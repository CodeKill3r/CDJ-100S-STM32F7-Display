
CDJ_STM32F7_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f8cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005514  0801fa9c  0801fa9c  0002fa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08024fb0  08024fb0  00034fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08024fb8  08024fb8  00034fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08024fbc  08024fbc  00034fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000110  20000000  08024fc0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00019484  20000110  080250d0  00040110  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20019594  080250d0  00049594  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00040110  2**0
                  CONTENTS, READONLY
 10 .debug_info   00069c4f  00000000  00000000  00040140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000cb1a  00000000  00000000  000a9d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0006a3d0  00000000  00000000  000b68a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000022c0  00000000  00000000  00120c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000d350  00000000  00000000  00122f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00034735  00000000  00000000  00130290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000705b5  00000000  00000000  001649c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001052e8  00000000  00000000  001d4f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002da262  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007b78  00000000  00000000  002da2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801fa84 	.word	0x0801fa84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	0801fa84 	.word	0x0801fa84

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	; 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__gedf2>:
 800089c:	f04f 3cff 	mov.w	ip, #4294967295
 80008a0:	e006      	b.n	80008b0 <__cmpdf2+0x4>
 80008a2:	bf00      	nop

080008a4 <__ledf2>:
 80008a4:	f04f 0c01 	mov.w	ip, #1
 80008a8:	e002      	b.n	80008b0 <__cmpdf2+0x4>
 80008aa:	bf00      	nop

080008ac <__cmpdf2>:
 80008ac:	f04f 0c01 	mov.w	ip, #1
 80008b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c0:	bf18      	it	ne
 80008c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008c6:	d01b      	beq.n	8000900 <__cmpdf2+0x54>
 80008c8:	b001      	add	sp, #4
 80008ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ce:	bf0c      	ite	eq
 80008d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008d4:	ea91 0f03 	teqne	r1, r3
 80008d8:	bf02      	ittt	eq
 80008da:	ea90 0f02 	teqeq	r0, r2
 80008de:	2000      	moveq	r0, #0
 80008e0:	4770      	bxeq	lr
 80008e2:	f110 0f00 	cmn.w	r0, #0
 80008e6:	ea91 0f03 	teq	r1, r3
 80008ea:	bf58      	it	pl
 80008ec:	4299      	cmppl	r1, r3
 80008ee:	bf08      	it	eq
 80008f0:	4290      	cmpeq	r0, r2
 80008f2:	bf2c      	ite	cs
 80008f4:	17d8      	asrcs	r0, r3, #31
 80008f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008fa:	f040 0001 	orr.w	r0, r0, #1
 80008fe:	4770      	bx	lr
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d102      	bne.n	8000910 <__cmpdf2+0x64>
 800090a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800090e:	d107      	bne.n	8000920 <__cmpdf2+0x74>
 8000910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d1d6      	bne.n	80008c8 <__cmpdf2+0x1c>
 800091a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800091e:	d0d3      	beq.n	80008c8 <__cmpdf2+0x1c>
 8000920:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <__aeabi_cdrcmple>:
 8000928:	4684      	mov	ip, r0
 800092a:	4610      	mov	r0, r2
 800092c:	4662      	mov	r2, ip
 800092e:	468c      	mov	ip, r1
 8000930:	4619      	mov	r1, r3
 8000932:	4663      	mov	r3, ip
 8000934:	e000      	b.n	8000938 <__aeabi_cdcmpeq>
 8000936:	bf00      	nop

08000938 <__aeabi_cdcmpeq>:
 8000938:	b501      	push	{r0, lr}
 800093a:	f7ff ffb7 	bl	80008ac <__cmpdf2>
 800093e:	2800      	cmp	r0, #0
 8000940:	bf48      	it	mi
 8000942:	f110 0f00 	cmnmi.w	r0, #0
 8000946:	bd01      	pop	{r0, pc}

08000948 <__aeabi_dcmpeq>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff fff4 	bl	8000938 <__aeabi_cdcmpeq>
 8000950:	bf0c      	ite	eq
 8000952:	2001      	moveq	r0, #1
 8000954:	2000      	movne	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_dcmplt>:
 800095c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000960:	f7ff ffea 	bl	8000938 <__aeabi_cdcmpeq>
 8000964:	bf34      	ite	cc
 8000966:	2001      	movcc	r0, #1
 8000968:	2000      	movcs	r0, #0
 800096a:	f85d fb08 	ldr.w	pc, [sp], #8
 800096e:	bf00      	nop

08000970 <__aeabi_dcmple>:
 8000970:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000974:	f7ff ffe0 	bl	8000938 <__aeabi_cdcmpeq>
 8000978:	bf94      	ite	ls
 800097a:	2001      	movls	r0, #1
 800097c:	2000      	movhi	r0, #0
 800097e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000982:	bf00      	nop

08000984 <__aeabi_dcmpge>:
 8000984:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000988:	f7ff ffce 	bl	8000928 <__aeabi_cdrcmple>
 800098c:	bf94      	ite	ls
 800098e:	2001      	movls	r0, #1
 8000990:	2000      	movhi	r0, #0
 8000992:	f85d fb08 	ldr.w	pc, [sp], #8
 8000996:	bf00      	nop

08000998 <__aeabi_dcmpgt>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff ffc4 	bl	8000928 <__aeabi_cdrcmple>
 80009a0:	bf34      	ite	cc
 80009a2:	2001      	movcc	r0, #1
 80009a4:	2000      	movcs	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_frsub>:
 8000a8c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a90:	e002      	b.n	8000a98 <__addsf3>
 8000a92:	bf00      	nop

08000a94 <__aeabi_fsub>:
 8000a94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a98 <__addsf3>:
 8000a98:	0042      	lsls	r2, r0, #1
 8000a9a:	bf1f      	itttt	ne
 8000a9c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa0:	ea92 0f03 	teqne	r2, r3
 8000aa4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aac:	d06a      	beq.n	8000b84 <__addsf3+0xec>
 8000aae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab6:	bfc1      	itttt	gt
 8000ab8:	18d2      	addgt	r2, r2, r3
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	4048      	eorgt	r0, r1
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	bfb8      	it	lt
 8000ac2:	425b      	neglt	r3, r3
 8000ac4:	2b19      	cmp	r3, #25
 8000ac6:	bf88      	it	hi
 8000ac8:	4770      	bxhi	lr
 8000aca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4249      	negne	r1, r1
 8000aea:	ea92 0f03 	teq	r2, r3
 8000aee:	d03f      	beq.n	8000b70 <__addsf3+0xd8>
 8000af0:	f1a2 0201 	sub.w	r2, r2, #1
 8000af4:	fa41 fc03 	asr.w	ip, r1, r3
 8000af8:	eb10 000c 	adds.w	r0, r0, ip
 8000afc:	f1c3 0320 	rsb	r3, r3, #32
 8000b00:	fa01 f103 	lsl.w	r1, r1, r3
 8000b04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__addsf3+0x78>
 8000b0a:	4249      	negs	r1, r1
 8000b0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b14:	d313      	bcc.n	8000b3e <__addsf3+0xa6>
 8000b16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1a:	d306      	bcc.n	8000b2a <__addsf3+0x92>
 8000b1c:	0840      	lsrs	r0, r0, #1
 8000b1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b22:	f102 0201 	add.w	r2, r2, #1
 8000b26:	2afe      	cmp	r2, #254	; 0xfe
 8000b28:	d251      	bcs.n	8000bce <__addsf3+0x136>
 8000b2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b32:	bf08      	it	eq
 8000b34:	f020 0001 	biceq.w	r0, r0, #1
 8000b38:	ea40 0003 	orr.w	r0, r0, r3
 8000b3c:	4770      	bx	lr
 8000b3e:	0049      	lsls	r1, r1, #1
 8000b40:	eb40 0000 	adc.w	r0, r0, r0
 8000b44:	3a01      	subs	r2, #1
 8000b46:	bf28      	it	cs
 8000b48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b4c:	d2ed      	bcs.n	8000b2a <__addsf3+0x92>
 8000b4e:	fab0 fc80 	clz	ip, r0
 8000b52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b56:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5e:	bfaa      	itet	ge
 8000b60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b64:	4252      	neglt	r2, r2
 8000b66:	4318      	orrge	r0, r3
 8000b68:	bfbc      	itt	lt
 8000b6a:	40d0      	lsrlt	r0, r2
 8000b6c:	4318      	orrlt	r0, r3
 8000b6e:	4770      	bx	lr
 8000b70:	f092 0f00 	teq	r2, #0
 8000b74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b78:	bf06      	itte	eq
 8000b7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7e:	3201      	addeq	r2, #1
 8000b80:	3b01      	subne	r3, #1
 8000b82:	e7b5      	b.n	8000af0 <__addsf3+0x58>
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d021      	beq.n	8000bd8 <__addsf3+0x140>
 8000b94:	ea92 0f03 	teq	r2, r3
 8000b98:	d004      	beq.n	8000ba4 <__addsf3+0x10c>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	4608      	moveq	r0, r1
 8000ba2:	4770      	bx	lr
 8000ba4:	ea90 0f01 	teq	r0, r1
 8000ba8:	bf1c      	itt	ne
 8000baa:	2000      	movne	r0, #0
 8000bac:	4770      	bxne	lr
 8000bae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb2:	d104      	bne.n	8000bbe <__addsf3+0x126>
 8000bb4:	0040      	lsls	r0, r0, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bbc:	4770      	bx	lr
 8000bbe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc2:	bf3c      	itt	cc
 8000bc4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bxcc	lr
 8000bca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	4770      	bx	lr
 8000bd8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bdc:	bf16      	itet	ne
 8000bde:	4608      	movne	r0, r1
 8000be0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be4:	4601      	movne	r1, r0
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	bf06      	itte	eq
 8000bea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bee:	ea90 0f01 	teqeq	r0, r1
 8000bf2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ui2f>:
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	e004      	b.n	8000c08 <__aeabi_i2f+0x8>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_i2f>:
 8000c00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	bf48      	it	mi
 8000c06:	4240      	negmi	r0, r0
 8000c08:	ea5f 0c00 	movs.w	ip, r0
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c14:	4601      	mov	r1, r0
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	e01c      	b.n	8000c56 <__aeabi_l2f+0x2a>

08000c1c <__aeabi_ul2f>:
 8000c1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c20:	bf08      	it	eq
 8000c22:	4770      	bxeq	lr
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e00a      	b.n	8000c40 <__aeabi_l2f+0x14>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_l2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c38:	d502      	bpl.n	8000c40 <__aeabi_l2f+0x14>
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	ea5f 0c01 	movs.w	ip, r1
 8000c44:	bf02      	ittt	eq
 8000c46:	4684      	moveq	ip, r0
 8000c48:	4601      	moveq	r1, r0
 8000c4a:	2000      	moveq	r0, #0
 8000c4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c50:	bf08      	it	eq
 8000c52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5a:	fabc f28c 	clz	r2, ip
 8000c5e:	3a08      	subs	r2, #8
 8000c60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c64:	db10      	blt.n	8000c88 <__aeabi_l2f+0x5c>
 8000c66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c78:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f102 0220 	add.w	r2, r2, #32
 8000c8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c98:	fa21 f202 	lsr.w	r2, r1, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b994 	b.w	8000fe8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f826 	bl	8000d18 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_f2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	f7ff fd87 	bl	80007ec <__aeabi_f2d>
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__aeabi_f2ulz+0x38>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4606      	mov	r6, r0
 8000ce4:	460f      	mov	r7, r1
 8000ce6:	f7ff faf3 	bl	80002d0 <__aeabi_dmul>
 8000cea:	f7ff fe5f 	bl	80009ac <__aeabi_d2uiz>
 8000cee:	4604      	mov	r4, r0
 8000cf0:	f7ff fd5a 	bl	80007a8 <__aeabi_ui2d>
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <__aeabi_f2ulz+0x3c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f7ff faea 	bl	80002d0 <__aeabi_dmul>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4630      	mov	r0, r6
 8000d02:	4639      	mov	r1, r7
 8000d04:	f7ff fc12 	bl	800052c <__aeabi_dsub>
 8000d08:	f7ff fe50 	bl	80009ac <__aeabi_d2uiz>
 8000d0c:	4621      	mov	r1, r4
 8000d0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d10:	3df00000 	.word	0x3df00000
 8000d14:	41f00000 	.word	0x41f00000

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	468e      	mov	lr, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d14d      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d26:	428a      	cmp	r2, r1
 8000d28:	4694      	mov	ip, r2
 8000d2a:	d969      	bls.n	8000e00 <__udivmoddi4+0xe8>
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b152      	cbz	r2, 8000d48 <__udivmoddi4+0x30>
 8000d32:	fa01 f302 	lsl.w	r3, r1, r2
 8000d36:	f1c2 0120 	rsb	r1, r2, #32
 8000d3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d42:	ea41 0e03 	orr.w	lr, r1, r3
 8000d46:	4094      	lsls	r4, r2
 8000d48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d4c:	0c21      	lsrs	r1, r4, #16
 8000d4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d52:	fa1f f78c 	uxth.w	r7, ip
 8000d56:	fb08 e316 	mls	r3, r8, r6, lr
 8000d5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d5e:	fb06 f107 	mul.w	r1, r6, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6e:	f080 811f 	bcs.w	8000fb0 <__udivmoddi4+0x298>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 811c 	bls.w	8000fb0 <__udivmoddi4+0x298>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3310 	mls	r3, r8, r0, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb00 f707 	mul.w	r7, r0, r7
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	d90a      	bls.n	8000daa <__udivmoddi4+0x92>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9c:	f080 810a 	bcs.w	8000fb4 <__udivmoddi4+0x29c>
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	f240 8107 	bls.w	8000fb4 <__udivmoddi4+0x29c>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dae:	1be4      	subs	r4, r4, r7
 8000db0:	2600      	movs	r6, #0
 8000db2:	b11d      	cbz	r5, 8000dbc <__udivmoddi4+0xa4>
 8000db4:	40d4      	lsrs	r4, r2
 8000db6:	2300      	movs	r3, #0
 8000db8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d909      	bls.n	8000dda <__udivmoddi4+0xc2>
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	f000 80ef 	beq.w	8000faa <__udivmoddi4+0x292>
 8000dcc:	2600      	movs	r6, #0
 8000dce:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	fab3 f683 	clz	r6, r3
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	d14a      	bne.n	8000e78 <__udivmoddi4+0x160>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xd4>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 80f9 	bhi.w	8000fde <__udivmoddi4+0x2c6>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb61 0303 	sbc.w	r3, r1, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	469e      	mov	lr, r3
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e0      	beq.n	8000dbc <__udivmoddi4+0xa4>
 8000dfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dfe:	e7dd      	b.n	8000dbc <__udivmoddi4+0xa4>
 8000e00:	b902      	cbnz	r2, 8000e04 <__udivmoddi4+0xec>
 8000e02:	deff      	udf	#255	; 0xff
 8000e04:	fab2 f282 	clz	r2, r2
 8000e08:	2a00      	cmp	r2, #0
 8000e0a:	f040 8092 	bne.w	8000f32 <__udivmoddi4+0x21a>
 8000e0e:	eba1 010c 	sub.w	r1, r1, ip
 8000e12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e16:	fa1f fe8c 	uxth.w	lr, ip
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	0c20      	lsrs	r0, r4, #16
 8000e1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e22:	fb07 1113 	mls	r1, r7, r3, r1
 8000e26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2a:	fb0e f003 	mul.w	r0, lr, r3
 8000e2e:	4288      	cmp	r0, r1
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x12c>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x12a>
 8000e3c:	4288      	cmp	r0, r1
 8000e3e:	f200 80cb 	bhi.w	8000fd8 <__udivmoddi4+0x2c0>
 8000e42:	4643      	mov	r3, r8
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e54:	fb0e fe00 	mul.w	lr, lr, r0
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x156>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e64:	d202      	bcs.n	8000e6c <__udivmoddi4+0x154>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f200 80bb 	bhi.w	8000fe2 <__udivmoddi4+0x2ca>
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	eba4 040e 	sub.w	r4, r4, lr
 8000e72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e76:	e79c      	b.n	8000db2 <__udivmoddi4+0x9a>
 8000e78:	f1c6 0720 	rsb	r7, r6, #32
 8000e7c:	40b3      	lsls	r3, r6
 8000e7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e86:	fa20 f407 	lsr.w	r4, r0, r7
 8000e8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8e:	431c      	orrs	r4, r3
 8000e90:	40f9      	lsrs	r1, r7
 8000e92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e96:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e9e:	0c20      	lsrs	r0, r4, #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	fb08 f00e 	mul.w	r0, r8, lr
 8000eb0:	4288      	cmp	r0, r1
 8000eb2:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb6:	d90b      	bls.n	8000ed0 <__udivmoddi4+0x1b8>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec0:	f080 8088 	bcs.w	8000fd4 <__udivmoddi4+0x2bc>
 8000ec4:	4288      	cmp	r0, r1
 8000ec6:	f240 8085 	bls.w	8000fd4 <__udivmoddi4+0x2bc>
 8000eca:	f1a8 0802 	sub.w	r8, r8, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ed8:	fb09 1110 	mls	r1, r9, r0, r1
 8000edc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee4:	458e      	cmp	lr, r1
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x1e2>
 8000ee8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef0:	d26c      	bcs.n	8000fcc <__udivmoddi4+0x2b4>
 8000ef2:	458e      	cmp	lr, r1
 8000ef4:	d96a      	bls.n	8000fcc <__udivmoddi4+0x2b4>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	4461      	add	r1, ip
 8000efa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efe:	fba0 9402 	umull	r9, r4, r0, r2
 8000f02:	eba1 010e 	sub.w	r1, r1, lr
 8000f06:	42a1      	cmp	r1, r4
 8000f08:	46c8      	mov	r8, r9
 8000f0a:	46a6      	mov	lr, r4
 8000f0c:	d356      	bcc.n	8000fbc <__udivmoddi4+0x2a4>
 8000f0e:	d053      	beq.n	8000fb8 <__udivmoddi4+0x2a0>
 8000f10:	b15d      	cbz	r5, 8000f2a <__udivmoddi4+0x212>
 8000f12:	ebb3 0208 	subs.w	r2, r3, r8
 8000f16:	eb61 010e 	sbc.w	r1, r1, lr
 8000f1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f22:	40f1      	lsrs	r1, r6
 8000f24:	431f      	orrs	r7, r3
 8000f26:	e9c5 7100 	strd	r7, r1, [r5]
 8000f2a:	2600      	movs	r6, #0
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	f1c2 0320 	rsb	r3, r2, #32
 8000f36:	40d8      	lsrs	r0, r3
 8000f38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f40:	4091      	lsls	r1, r2
 8000f42:	4301      	orrs	r1, r0
 8000f44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f48:	fa1f fe8c 	uxth.w	lr, ip
 8000f4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f50:	fb07 3610 	mls	r6, r7, r0, r3
 8000f54:	0c0b      	lsrs	r3, r1, #16
 8000f56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f5e:	429e      	cmp	r6, r3
 8000f60:	fa04 f402 	lsl.w	r4, r4, r2
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x260>
 8000f66:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6e:	d22f      	bcs.n	8000fd0 <__udivmoddi4+0x2b8>
 8000f70:	429e      	cmp	r6, r3
 8000f72:	d92d      	bls.n	8000fd0 <__udivmoddi4+0x2b8>
 8000f74:	3802      	subs	r0, #2
 8000f76:	4463      	add	r3, ip
 8000f78:	1b9b      	subs	r3, r3, r6
 8000f7a:	b289      	uxth	r1, r1
 8000f7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f80:	fb07 3316 	mls	r3, r7, r6, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb06 f30e 	mul.w	r3, r6, lr
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d908      	bls.n	8000fa2 <__udivmoddi4+0x28a>
 8000f90:	eb1c 0101 	adds.w	r1, ip, r1
 8000f94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f98:	d216      	bcs.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	d914      	bls.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f9e:	3e02      	subs	r6, #2
 8000fa0:	4461      	add	r1, ip
 8000fa2:	1ac9      	subs	r1, r1, r3
 8000fa4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fa8:	e738      	b.n	8000e1c <__udivmoddi4+0x104>
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e705      	b.n	8000dbc <__udivmoddi4+0xa4>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e3      	b.n	8000d7c <__udivmoddi4+0x64>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6f8      	b.n	8000daa <__udivmoddi4+0x92>
 8000fb8:	454b      	cmp	r3, r9
 8000fba:	d2a9      	bcs.n	8000f10 <__udivmoddi4+0x1f8>
 8000fbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7a3      	b.n	8000f10 <__udivmoddi4+0x1f8>
 8000fc8:	4646      	mov	r6, r8
 8000fca:	e7ea      	b.n	8000fa2 <__udivmoddi4+0x28a>
 8000fcc:	4620      	mov	r0, r4
 8000fce:	e794      	b.n	8000efa <__udivmoddi4+0x1e2>
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	e7d1      	b.n	8000f78 <__udivmoddi4+0x260>
 8000fd4:	46d0      	mov	r8, sl
 8000fd6:	e77b      	b.n	8000ed0 <__udivmoddi4+0x1b8>
 8000fd8:	3b02      	subs	r3, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	e732      	b.n	8000e44 <__udivmoddi4+0x12c>
 8000fde:	4630      	mov	r0, r6
 8000fe0:	e709      	b.n	8000df6 <__udivmoddi4+0xde>
 8000fe2:	4464      	add	r4, ip
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	e742      	b.n	8000e6e <__udivmoddi4+0x156>

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	490e      	ldr	r1, [pc, #56]	; (8001028 <HAL_InitTick+0x3c>)
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_InitTick+0x40>)
{
 8000ff4:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff6:	7809      	ldrb	r1, [r1, #0]
{
 8000ff8:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001000:	fbb2 f0f3 	udiv	r0, r2, r3
 8001004:	f000 f8e2 	bl	80011cc <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001008:	b908      	cbnz	r0, 800100e <HAL_InitTick+0x22>
 800100a:	2c0f      	cmp	r4, #15
 800100c:	d901      	bls.n	8001012 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800100e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001010:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001012:	2200      	movs	r2, #0
 8001014:	4621      	mov	r1, r4
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	f000 f85f 	bl	80010dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_InitTick+0x44>)
 8001020:	2000      	movs	r0, #0
 8001022:	601c      	str	r4, [r3, #0]
}
 8001024:	bd10      	pop	{r4, pc}
 8001026:	bf00      	nop
 8001028:	20000000 	.word	0x20000000
 800102c:	20000078 	.word	0x20000078
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001036:	2003      	movs	r0, #3
{
 8001038:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103a:	6813      	ldr	r3, [r2, #0]
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001042:	f000 f82d 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff ffd0 	bl	8000fec <HAL_InitTick>
  HAL_MspInit();
 800104c:	f01b f9f4 	bl	801c438 <HAL_MspInit>
}
 8001050:	2000      	movs	r0, #0
 8001052:	bd08      	pop	{r3, pc}
 8001054:	40023c00 	.word	0x40023c00

08001058 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <HAL_IncTick+0x10>)
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <HAL_IncTick+0x14>)
 800105c:	6811      	ldr	r1, [r2, #0]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	440b      	add	r3, r1
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000012c 	.word	0x2000012c
 800106c:	20000000 	.word	0x20000000

08001070 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001070:	4b01      	ldr	r3, [pc, #4]	; (8001078 <HAL_GetTick+0x8>)
 8001072:	6818      	ldr	r0, [r3, #0]
}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000012c 	.word	0x2000012c

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b538      	push	{r3, r4, r5, lr}
 800107e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff fff6 	bl	8001070 <HAL_GetTick>
 8001084:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	1c63      	adds	r3, r4, #1
 8001088:	d002      	beq.n	8001090 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <HAL_Delay+0x20>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	1b43      	subs	r3, r0, r5
 8001096:	42a3      	cmp	r3, r4
 8001098:	d3fa      	bcc.n	8001090 <HAL_Delay+0x14>
  {
  }
}
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	20000000 	.word	0x20000000

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010a0:	1ec3      	subs	r3, r0, #3
 80010a2:	2b04      	cmp	r3, #4
{
 80010a4:	b510      	push	{r4, lr}
 80010a6:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010a8:	d80c      	bhi.n	80010c4 <HAL_NVIC_SetPriorityGrouping+0x24>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010aa:	4909      	ldr	r1, [pc, #36]	; (80010d0 <HAL_NVIC_SetPriorityGrouping+0x30>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b6:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 80010be:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 80010c0:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010c2:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010c4:	2192      	movs	r1, #146	; 0x92
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80010c8:	f018 ff08 	bl	8019edc <assert_failed>
 80010cc:	e7ed      	b.n	80010aa <HAL_NVIC_SetPriorityGrouping+0xa>
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	05fa0000 	.word	0x05fa0000
 80010d8:	0801faa4 	.word	0x0801faa4

080010dc <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010dc:	2a0f      	cmp	r2, #15
{ 
 80010de:	b570      	push	{r4, r5, r6, lr}
 80010e0:	4616      	mov	r6, r2
 80010e2:	4605      	mov	r5, r0
 80010e4:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010e6:	d836      	bhi.n	8001156 <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010e8:	2c0f      	cmp	r4, #15
 80010ea:	d82f      	bhi.n	800114c <HAL_NVIC_SetPriority+0x70>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <HAL_NVIC_SetPriority+0x84>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f8:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fa:	2804      	cmp	r0, #4
 80010fc:	bf28      	it	cs
 80010fe:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001100:	2a06      	cmp	r2, #6
 8001102:	d918      	bls.n	8001136 <HAL_NVIC_SetPriority+0x5a>
 8001104:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001106:	f04f 32ff 	mov.w	r2, #4294967295
 800110a:	409a      	lsls	r2, r3
 800110c:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001114:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001116:	fa01 f100 	lsl.w	r1, r1, r0
 800111a:	ea24 0401 	bic.w	r4, r4, r1
 800111e:	fa04 f403 	lsl.w	r4, r4, r3
 8001122:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8001126:	db09      	blt.n	800113c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	0124      	lsls	r4, r4, #4
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_NVIC_SetPriority+0x88>)
 800112c:	b2e4      	uxtb	r4, r4
 800112e:	442b      	add	r3, r5
 8001130:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001134:	bd70      	pop	{r4, r5, r6, pc}
 8001136:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001138:	4633      	mov	r3, r6
 800113a:	e7e9      	b.n	8001110 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	f005 050f 	and.w	r5, r5, #15
 8001140:	0124      	lsls	r4, r4, #4
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_NVIC_SetPriority+0x8c>)
 8001144:	b2e4      	uxtb	r4, r4
 8001146:	442b      	add	r3, r5
 8001148:	761c      	strb	r4, [r3, #24]
 800114a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800114c:	21ab      	movs	r1, #171	; 0xab
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <HAL_NVIC_SetPriority+0x90>)
 8001150:	f018 fec4 	bl	8019edc <assert_failed>
 8001154:	e7ca      	b.n	80010ec <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001156:	21aa      	movs	r1, #170	; 0xaa
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <HAL_NVIC_SetPriority+0x90>)
 800115a:	f018 febf 	bl	8019edc <assert_failed>
 800115e:	e7c3      	b.n	80010e8 <HAL_NVIC_SetPriority+0xc>
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ecfc 	.word	0xe000ecfc
 800116c:	0801faa4 	.word	0x0801faa4

08001170 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001170:	2800      	cmp	r0, #0
 8001172:	db08      	blt.n	8001186 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001174:	f000 011f 	and.w	r1, r0, #31
 8001178:	2301      	movs	r3, #1
 800117a:	0940      	lsrs	r0, r0, #5
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_NVIC_EnableIRQ+0x20>)
 800117e:	408b      	lsls	r3, r1
 8001180:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001184:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001186:	21be      	movs	r1, #190	; 0xbe
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <HAL_NVIC_EnableIRQ+0x24>)
 800118a:	f018 bea7 	b.w	8019edc <assert_failed>
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100
 8001194:	0801faa4 	.word	0x0801faa4

08001198 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001198:	2800      	cmp	r0, #0
 800119a:	db0e      	blt.n	80011ba <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119c:	0943      	lsrs	r3, r0, #5
 800119e:	2201      	movs	r2, #1
 80011a0:	f000 001f 	and.w	r0, r0, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <HAL_NVIC_DisableIRQ+0x2c>)
 80011a6:	3320      	adds	r3, #32
 80011a8:	fa02 f000 	lsl.w	r0, r2, r0
 80011ac:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80011b8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80011ba:	21ce      	movs	r1, #206	; 0xce
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <HAL_NVIC_DisableIRQ+0x30>)
 80011be:	f018 be8d 	b.w	8019edc <assert_failed>
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	0801faa4 	.word	0x0801faa4

080011cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	1e43      	subs	r3, r0, #1
 80011ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d2:	d20c      	bcs.n	80011ee <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	4906      	ldr	r1, [pc, #24]	; (80011f4 <HAL_SYSTICK_Config+0x28>)
 80011dc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e0:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011f8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_MPU_Disable+0x18>)
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011fe:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001202:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8001208:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MPU_Enable+0x1c>)
 8001216:	f040 0001 	orr.w	r0, r0, #1
 800121a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800121e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001220:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800122a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff ff1a 	bl	8001070 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800123c:	2c00      	cmp	r4, #0
 800123e:	f000 8135 	beq.w	80014ac <HAL_DMA_Init+0x278>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001242:	6822      	ldr	r2, [r4, #0]
 8001244:	4605      	mov	r5, r0
 8001246:	4bad      	ldr	r3, [pc, #692]	; (80014fc <HAL_DMA_Init+0x2c8>)
 8001248:	49ad      	ldr	r1, [pc, #692]	; (8001500 <HAL_DMA_Init+0x2cc>)
 800124a:	429a      	cmp	r2, r3
 800124c:	bf18      	it	ne
 800124e:	428a      	cmpne	r2, r1
 8001250:	f101 0118 	add.w	r1, r1, #24
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	428a      	cmp	r2, r1
 800125c:	bf0c      	ite	eq
 800125e:	2300      	moveq	r3, #0
 8001260:	f003 0301 	andne.w	r3, r3, #1
 8001264:	3118      	adds	r1, #24
 8001266:	428a      	cmp	r2, r1
 8001268:	bf0c      	ite	eq
 800126a:	2300      	moveq	r3, #0
 800126c:	f003 0301 	andne.w	r3, r3, #1
 8001270:	3118      	adds	r1, #24
 8001272:	428a      	cmp	r2, r1
 8001274:	bf0c      	ite	eq
 8001276:	2300      	moveq	r3, #0
 8001278:	f003 0301 	andne.w	r3, r3, #1
 800127c:	3118      	adds	r1, #24
 800127e:	428a      	cmp	r2, r1
 8001280:	bf0c      	ite	eq
 8001282:	2300      	moveq	r3, #0
 8001284:	f003 0301 	andne.w	r3, r3, #1
 8001288:	3118      	adds	r1, #24
 800128a:	428a      	cmp	r2, r1
 800128c:	bf0c      	ite	eq
 800128e:	2300      	moveq	r3, #0
 8001290:	f003 0301 	andne.w	r3, r3, #1
 8001294:	3118      	adds	r1, #24
 8001296:	428a      	cmp	r2, r1
 8001298:	bf0c      	ite	eq
 800129a:	2300      	moveq	r3, #0
 800129c:	f003 0301 	andne.w	r3, r3, #1
 80012a0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80012a4:	428a      	cmp	r2, r1
 80012a6:	bf0c      	ite	eq
 80012a8:	2300      	moveq	r3, #0
 80012aa:	f003 0301 	andne.w	r3, r3, #1
 80012ae:	3118      	adds	r1, #24
 80012b0:	428a      	cmp	r2, r1
 80012b2:	bf0c      	ite	eq
 80012b4:	2300      	moveq	r3, #0
 80012b6:	f003 0301 	andne.w	r3, r3, #1
 80012ba:	3118      	adds	r1, #24
 80012bc:	428a      	cmp	r2, r1
 80012be:	bf0c      	ite	eq
 80012c0:	2300      	moveq	r3, #0
 80012c2:	f003 0301 	andne.w	r3, r3, #1
 80012c6:	3118      	adds	r1, #24
 80012c8:	428a      	cmp	r2, r1
 80012ca:	bf0c      	ite	eq
 80012cc:	2300      	moveq	r3, #0
 80012ce:	f003 0301 	andne.w	r3, r3, #1
 80012d2:	3118      	adds	r1, #24
 80012d4:	428a      	cmp	r2, r1
 80012d6:	bf0c      	ite	eq
 80012d8:	2300      	moveq	r3, #0
 80012da:	f003 0301 	andne.w	r3, r3, #1
 80012de:	3118      	adds	r1, #24
 80012e0:	428a      	cmp	r2, r1
 80012e2:	bf0c      	ite	eq
 80012e4:	2300      	moveq	r3, #0
 80012e6:	f003 0301 	andne.w	r3, r3, #1
 80012ea:	3118      	adds	r1, #24
 80012ec:	428a      	cmp	r2, r1
 80012ee:	bf0c      	ite	eq
 80012f0:	2300      	moveq	r3, #0
 80012f2:	f003 0301 	andne.w	r3, r3, #1
 80012f6:	b11b      	cbz	r3, 8001300 <HAL_DMA_Init+0xcc>
 80012f8:	4b82      	ldr	r3, [pc, #520]	; (8001504 <HAL_DMA_Init+0x2d0>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	f040 811f 	bne.w	800153e <HAL_DMA_Init+0x30a>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001300:	6863      	ldr	r3, [r4, #4]
 8001302:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800130a:	d002      	beq.n	8001312 <HAL_DMA_Init+0xde>
 800130c:	2b00      	cmp	r3, #0
 800130e:	f040 8111 	bne.w	8001534 <HAL_DMA_Init+0x300>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001312:	68a3      	ldr	r3, [r4, #8]
 8001314:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8001318:	d002      	beq.n	8001320 <HAL_DMA_Init+0xec>
 800131a:	2b80      	cmp	r3, #128	; 0x80
 800131c:	f040 80a8 	bne.w	8001470 <HAL_DMA_Init+0x23c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001320:	68e3      	ldr	r3, [r4, #12]
 8001322:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8001326:	f040 80ac 	bne.w	8001482 <HAL_DMA_Init+0x24e>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800132a:	6923      	ldr	r3, [r4, #16]
 800132c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8001330:	f040 80b0 	bne.w	8001494 <HAL_DMA_Init+0x260>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001334:	6963      	ldr	r3, [r4, #20]
 8001336:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800133a:	d003      	beq.n	8001344 <HAL_DMA_Init+0x110>
 800133c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001340:	f040 8091 	bne.w	8001466 <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001344:	69a3      	ldr	r3, [r4, #24]
 8001346:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800134a:	d003      	beq.n	8001354 <HAL_DMA_Init+0x120>
 800134c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001350:	f040 8084 	bne.w	800145c <HAL_DMA_Init+0x228>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001354:	69e3      	ldr	r3, [r4, #28]
 8001356:	f033 0220 	bics.w	r2, r3, #32
 800135a:	d002      	beq.n	8001362 <HAL_DMA_Init+0x12e>
 800135c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001360:	d16f      	bne.n	8001442 <HAL_DMA_Init+0x20e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001362:	6a23      	ldr	r3, [r4, #32]
 8001364:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8001368:	d173      	bne.n	8001452 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800136a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800136c:	f033 0204 	bics.w	r2, r3, #4
 8001370:	d15f      	bne.n	8001432 <HAL_DMA_Init+0x1fe>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001372:	2b00      	cmp	r3, #0
 8001374:	d14d      	bne.n	8001412 <HAL_DMA_Init+0x1de>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001376:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001378:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 800137a:	2100      	movs	r1, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800137c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001380:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138c:	e006      	b.n	800139c <HAL_DMA_Init+0x168>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800138e:	f7ff fe6f 	bl	8001070 <HAL_GetTick>
 8001392:	1b40      	subs	r0, r0, r5
 8001394:	2805      	cmp	r0, #5
 8001396:	f200 8082 	bhi.w	800149e <HAL_DMA_Init+0x26a>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	07d1      	lsls	r1, r2, #31
 80013a0:	d4f5      	bmi.n	800138e <HAL_DMA_Init+0x15a>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a2:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 80013a6:	68e1      	ldr	r1, [r4, #12]
 80013a8:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013aa:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 80013ac:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ae:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b0:	6921      	ldr	r1, [r4, #16]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	6961      	ldr	r1, [r4, #20]
 80013b6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b8:	69e1      	ldr	r1, [r4, #28]
 80013ba:	4302      	orrs	r2, r0
 80013bc:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013be:	4952      	ldr	r1, [pc, #328]	; (8001508 <HAL_DMA_Init+0x2d4>)
 80013c0:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c2:	6a25      	ldr	r5, [r4, #32]
 80013c4:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013c6:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013ca:	2904      	cmp	r1, #4
 80013cc:	d070      	beq.n	80014b0 <HAL_DMA_Init+0x27c>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013d0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013d2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013d6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013d8:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 80013da:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013dc:	494b      	ldr	r1, [pc, #300]	; (800150c <HAL_DMA_Init+0x2d8>)
 80013de:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013e0:	484b      	ldr	r0, [pc, #300]	; (8001510 <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013e2:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 80013e6:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013e8:	4a4a      	ldr	r2, [pc, #296]	; (8001514 <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013ea:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013ee:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f2:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013f6:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f8:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013fc:	bf88      	it	hi
 80013fe:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001400:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001402:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001404:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001406:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8001408:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800140a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800140c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001410:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001412:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001414:	2b03      	cmp	r3, #3
 8001416:	d86c      	bhi.n	80014f2 <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001418:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800141a:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800141e:	d17d      	bne.n	800151c <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001420:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001422:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8001426:	d0a6      	beq.n	8001376 <HAL_DMA_Init+0x142>
 8001428:	21c9      	movs	r1, #201	; 0xc9
 800142a:	483b      	ldr	r0, [pc, #236]	; (8001518 <HAL_DMA_Init+0x2e4>)
 800142c:	f018 fd56 	bl	8019edc <assert_failed>
 8001430:	e7a1      	b.n	8001376 <HAL_DMA_Init+0x142>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001432:	21c2      	movs	r1, #194	; 0xc2
 8001434:	4838      	ldr	r0, [pc, #224]	; (8001518 <HAL_DMA_Init+0x2e4>)
 8001436:	f018 fd51 	bl	8019edc <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800143a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800143c:	2b00      	cmp	r3, #0
 800143e:	d09a      	beq.n	8001376 <HAL_DMA_Init+0x142>
 8001440:	e7e7      	b.n	8001412 <HAL_DMA_Init+0x1de>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001442:	21c0      	movs	r1, #192	; 0xc0
 8001444:	4834      	ldr	r0, [pc, #208]	; (8001518 <HAL_DMA_Init+0x2e4>)
 8001446:	f018 fd49 	bl	8019edc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800144a:	6a23      	ldr	r3, [r4, #32]
 800144c:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8001450:	d08b      	beq.n	800136a <HAL_DMA_Init+0x136>
 8001452:	21c1      	movs	r1, #193	; 0xc1
 8001454:	4830      	ldr	r0, [pc, #192]	; (8001518 <HAL_DMA_Init+0x2e4>)
 8001456:	f018 fd41 	bl	8019edc <assert_failed>
 800145a:	e786      	b.n	800136a <HAL_DMA_Init+0x136>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800145c:	21bf      	movs	r1, #191	; 0xbf
 800145e:	482e      	ldr	r0, [pc, #184]	; (8001518 <HAL_DMA_Init+0x2e4>)
 8001460:	f018 fd3c 	bl	8019edc <assert_failed>
 8001464:	e776      	b.n	8001354 <HAL_DMA_Init+0x120>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001466:	21be      	movs	r1, #190	; 0xbe
 8001468:	482b      	ldr	r0, [pc, #172]	; (8001518 <HAL_DMA_Init+0x2e4>)
 800146a:	f018 fd37 	bl	8019edc <assert_failed>
 800146e:	e769      	b.n	8001344 <HAL_DMA_Init+0x110>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001470:	21bb      	movs	r1, #187	; 0xbb
 8001472:	4829      	ldr	r0, [pc, #164]	; (8001518 <HAL_DMA_Init+0x2e4>)
 8001474:	f018 fd32 	bl	8019edc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001478:	68e3      	ldr	r3, [r4, #12]
 800147a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800147e:	f43f af54 	beq.w	800132a <HAL_DMA_Init+0xf6>
 8001482:	21bc      	movs	r1, #188	; 0xbc
 8001484:	4824      	ldr	r0, [pc, #144]	; (8001518 <HAL_DMA_Init+0x2e4>)
 8001486:	f018 fd29 	bl	8019edc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800148a:	6923      	ldr	r3, [r4, #16]
 800148c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8001490:	f43f af50 	beq.w	8001334 <HAL_DMA_Init+0x100>
 8001494:	21bd      	movs	r1, #189	; 0xbd
 8001496:	4820      	ldr	r0, [pc, #128]	; (8001518 <HAL_DMA_Init+0x2e4>)
 8001498:	f018 fd20 	bl	8019edc <assert_failed>
 800149c:	e74a      	b.n	8001334 <HAL_DMA_Init+0x100>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80014a2:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
}
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014b0:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 80014b4:	4329      	orrs	r1, r5
 80014b6:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 80014b8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80014ba:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80014bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014be:	f021 0107 	bic.w	r1, r1, #7
 80014c2:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80014c4:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d085      	beq.n	80013d8 <HAL_DMA_Init+0x1a4>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014cc:	b358      	cbz	r0, 8001526 <HAL_DMA_Init+0x2f2>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014ce:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80014d2:	d03e      	beq.n	8001552 <HAL_DMA_Init+0x31e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014d4:	2a02      	cmp	r2, #2
 80014d6:	d905      	bls.n	80014e4 <HAL_DMA_Init+0x2b0>
 80014d8:	2a03      	cmp	r2, #3
 80014da:	f47f af7d 	bne.w	80013d8 <HAL_DMA_Init+0x1a4>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014de:	01ea      	lsls	r2, r5, #7
 80014e0:	f57f af7a 	bpl.w	80013d8 <HAL_DMA_Init+0x1a4>
        hdma->State = HAL_DMA_STATE_READY;
 80014e4:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014e6:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80014e8:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014ea:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80014ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80014f0:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80014f2:	21c7      	movs	r1, #199	; 0xc7
 80014f4:	4808      	ldr	r0, [pc, #32]	; (8001518 <HAL_DMA_Init+0x2e4>)
 80014f6:	f018 fcf1 	bl	8019edc <assert_failed>
 80014fa:	e78d      	b.n	8001418 <HAL_DMA_Init+0x1e4>
 80014fc:	40026010 	.word	0x40026010
 8001500:	40026028 	.word	0x40026028
 8001504:	400264b8 	.word	0x400264b8
 8001508:	f010803f 	.word	0xf010803f
 800150c:	aaaaaaab 	.word	0xaaaaaaab
 8001510:	0801fb18 	.word	0x0801fb18
 8001514:	fffffc00 	.word	0xfffffc00
 8001518:	0801fae0 	.word	0x0801fae0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800151c:	21c8      	movs	r1, #200	; 0xc8
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <HAL_DMA_Init+0x33c>)
 8001520:	f018 fcdc 	bl	8019edc <assert_failed>
 8001524:	e77c      	b.n	8001420 <HAL_DMA_Init+0x1ec>
    switch (tmp)
 8001526:	2a01      	cmp	r2, #1
 8001528:	d00e      	beq.n	8001548 <HAL_DMA_Init+0x314>
 800152a:	f032 0202 	bics.w	r2, r2, #2
 800152e:	f47f af53 	bne.w	80013d8 <HAL_DMA_Init+0x1a4>
 8001532:	e7d4      	b.n	80014de <HAL_DMA_Init+0x2aa>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001534:	21ba      	movs	r1, #186	; 0xba
 8001536:	480e      	ldr	r0, [pc, #56]	; (8001570 <HAL_DMA_Init+0x33c>)
 8001538:	f018 fcd0 	bl	8019edc <assert_failed>
 800153c:	e6e9      	b.n	8001312 <HAL_DMA_Init+0xde>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800153e:	21b9      	movs	r1, #185	; 0xb9
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <HAL_DMA_Init+0x33c>)
 8001542:	f018 fccb 	bl	8019edc <assert_failed>
 8001546:	e6db      	b.n	8001300 <HAL_DMA_Init+0xcc>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001548:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800154c:	f47f af44 	bne.w	80013d8 <HAL_DMA_Init+0x1a4>
 8001550:	e7c8      	b.n	80014e4 <HAL_DMA_Init+0x2b0>
    switch (tmp)
 8001552:	2a03      	cmp	r2, #3
 8001554:	f63f af40 	bhi.w	80013d8 <HAL_DMA_Init+0x1a4>
 8001558:	a001      	add	r0, pc, #4	; (adr r0, 8001560 <HAL_DMA_Init+0x32c>)
 800155a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800155e:	bf00      	nop
 8001560:	080014e5 	.word	0x080014e5
 8001564:	080014df 	.word	0x080014df
 8001568:	080014e5 	.word	0x080014e5
 800156c:	08001549 	.word	0x08001549
 8001570:	0801fae0 	.word	0x0801fae0

08001574 <HAL_DMA_Start_IT>:
{
 8001574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001578:	461e      	mov	r6, r3
 800157a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157c:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001580:	1e58      	subs	r0, r3, #1
 8001582:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8001586:	4688      	mov	r8, r1
 8001588:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800158a:	4298      	cmp	r0, r3
 800158c:	d83b      	bhi.n	8001606 <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 800158e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001592:	2b01      	cmp	r3, #1
 8001594:	d040      	beq.n	8001618 <HAL_DMA_Start_IT+0xa4>
 8001596:	2301      	movs	r3, #1
 8001598:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800159c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d005      	beq.n	80015b0 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 80015a4:	2300      	movs	r3, #0
    status = HAL_BUSY;
 80015a6:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 80015a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80015ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b0:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015b2:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015c4:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 80015c6:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015c8:	2b40      	cmp	r3, #64	; 0x40
 80015ca:	d028      	beq.n	800161e <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 80015cc:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 80015d0:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80015d4:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 80015d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d8:	408b      	lsls	r3, r1
 80015da:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	f043 0316 	orr.w	r3, r3, #22
 80015e4:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015e6:	696b      	ldr	r3, [r5, #20]
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80015ee:	b11a      	cbz	r2, 80015f8 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80015f8:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	602b      	str	r3, [r5, #0]
}
 8001602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001606:	f240 11cd 	movw	r1, #461	; 0x1cd
 800160a:	4807      	ldr	r0, [pc, #28]	; (8001628 <HAL_DMA_Start_IT+0xb4>)
 800160c:	f018 fc66 	bl	8019edc <assert_failed>
  __HAL_LOCK(hdma);
 8001610:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001614:	2b01      	cmp	r3, #1
 8001616:	d1be      	bne.n	8001596 <HAL_DMA_Start_IT+0x22>
 8001618:	2002      	movs	r0, #2
}
 800161a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 800161e:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001620:	f8c5 800c 	str.w	r8, [r5, #12]
 8001624:	e7d5      	b.n	80015d2 <HAL_DMA_Start_IT+0x5e>
 8001626:	bf00      	nop
 8001628:	0801fae0 	.word	0x0801fae0

0800162c <HAL_DMA_Abort>:
{
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001630:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001632:	f7ff fd1d 	bl	8001070 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001636:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800163a:	2b02      	cmp	r3, #2
 800163c:	d006      	beq.n	800164c <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163e:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8001640:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001642:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001644:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001646:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800164a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	4605      	mov	r5, r0
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f022 0216 	bic.w	r2, r2, #22
 8001656:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800165e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001660:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001662:	b33a      	cbz	r2, 80016b4 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	f022 0208 	bic.w	r2, r2, #8
 800166a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001674:	e005      	b.n	8001682 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001676:	f7ff fcfb 	bl	8001070 <HAL_GetTick>
 800167a:	1b43      	subs	r3, r0, r5
 800167c:	2b05      	cmp	r3, #5
 800167e:	d80f      	bhi.n	80016a0 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f013 0301 	ands.w	r3, r3, #1
 8001688:	d1f5      	bne.n	8001676 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800168a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800168c:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800168e:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001690:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8001692:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001694:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8001696:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800169a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800169e:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016a2:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 80016a4:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016a6:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80016a8:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 80016aa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	d1d4      	bne.n	8001664 <HAL_DMA_Abort+0x38>
 80016ba:	e7d7      	b.n	800166c <HAL_DMA_Abort+0x40>

080016bc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016bc:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 80016c0:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c2:	2a02      	cmp	r2, #2
 80016c4:	d003      	beq.n	80016ce <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c6:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80016c8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016cc:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80016ce:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80016d0:	2105      	movs	r1, #5
  return HAL_OK;
 80016d2:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 80016d4:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop

080016e4 <HAL_DMA_IRQHandler>:
{
 80016e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 80016e8:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 80016ea:	4b74      	ldr	r3, [pc, #464]	; (80018bc <HAL_DMA_IRQHandler+0x1d8>)
{
 80016ec:	b082      	sub	sp, #8
 80016ee:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 80016f0:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 80016f2:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f4:	2208      	movs	r2, #8
 80016f6:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80016fa:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fc:	409a      	lsls	r2, r3
 80016fe:	4222      	tst	r2, r4
 8001700:	d004      	beq.n	800170c <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001702:	6801      	ldr	r1, [r0, #0]
 8001704:	680f      	ldr	r7, [r1, #0]
 8001706:	0778      	lsls	r0, r7, #29
 8001708:	f100 80ab 	bmi.w	8001862 <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800170c:	2201      	movs	r2, #1
 800170e:	409a      	lsls	r2, r3
 8001710:	4222      	tst	r2, r4
 8001712:	d005      	beq.n	8001720 <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001714:	f8d8 1000 	ldr.w	r1, [r8]
 8001718:	6949      	ldr	r1, [r1, #20]
 800171a:	0609      	lsls	r1, r1, #24
 800171c:	f100 8099 	bmi.w	8001852 <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	2204      	movs	r2, #4
 8001722:	409a      	lsls	r2, r3
 8001724:	4222      	tst	r2, r4
 8001726:	d005      	beq.n	8001734 <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001728:	f8d8 1000 	ldr.w	r1, [r8]
 800172c:	6809      	ldr	r1, [r1, #0]
 800172e:	078f      	lsls	r7, r1, #30
 8001730:	f100 8087 	bmi.w	8001842 <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001734:	2210      	movs	r2, #16
 8001736:	409a      	lsls	r2, r3
 8001738:	4222      	tst	r2, r4
 800173a:	d004      	beq.n	8001746 <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800173c:	f8d8 1000 	ldr.w	r1, [r8]
 8001740:	680f      	ldr	r7, [r1, #0]
 8001742:	0738      	lsls	r0, r7, #28
 8001744:	d468      	bmi.n	8001818 <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001746:	2220      	movs	r2, #32
 8001748:	409a      	lsls	r2, r3
 800174a:	4222      	tst	r2, r4
 800174c:	d017      	beq.n	800177e <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800174e:	f8d8 1000 	ldr.w	r1, [r8]
 8001752:	680c      	ldr	r4, [r1, #0]
 8001754:	06e0      	lsls	r0, r4, #27
 8001756:	d512      	bpl.n	800177e <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001758:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800175a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800175e:	2a05      	cmp	r2, #5
 8001760:	d039      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001762:	680b      	ldr	r3, [r1, #0]
 8001764:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001768:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800176a:	f000 808d 	beq.w	8001888 <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800176e:	0319      	lsls	r1, r3, #12
 8001770:	f140 8098 	bpl.w	80018a4 <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 8001774:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8001778:	b10b      	cbz	r3, 800177e <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 800177a:	4640      	mov	r0, r8
 800177c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800177e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001782:	2b00      	cmp	r3, #0
 8001784:	d045      	beq.n	8001812 <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001786:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800178a:	07da      	lsls	r2, r3, #31
 800178c:	d51b      	bpl.n	80017c6 <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 800178e:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001792:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8001794:	494a      	ldr	r1, [pc, #296]	; (80018c0 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001796:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800179a:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800179c:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80017a0:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 80017a4:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e002      	b.n	80017b0 <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	07db      	lsls	r3, r3, #31
 80017ae:	d504      	bpl.n	80017ba <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 80017b0:	9b01      	ldr	r3, [sp, #4]
 80017b2:	3301      	adds	r3, #1
 80017b4:	42ab      	cmp	r3, r5
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	d9f7      	bls.n	80017aa <HAL_DMA_IRQHandler+0xc6>
      __HAL_UNLOCK(hdma);
 80017ba:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80017bc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80017be:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80017c2:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80017c6:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80017ca:	b313      	cbz	r3, 8001812 <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 80017cc:	4640      	mov	r0, r8
}
 80017ce:	b002      	add	sp, #8
 80017d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80017d4:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d6:	680a      	ldr	r2, [r1, #0]
 80017d8:	f022 0216 	bic.w	r2, r2, #22
 80017dc:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017de:	694a      	ldr	r2, [r1, #20]
 80017e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017e4:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017e6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	d060      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ee:	680a      	ldr	r2, [r1, #0]
 80017f0:	f022 0208 	bic.w	r2, r2, #8
 80017f4:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f6:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80017f8:	2100      	movs	r1, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
        hdma->State = HAL_DMA_STATE_READY;
 80017fe:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001800:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 8001802:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        __HAL_UNLOCK(hdma);
 8001806:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800180a:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1dc      	bne.n	80017cc <HAL_DMA_IRQHandler+0xe8>
}
 8001812:	b002      	add	sp, #8
 8001814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001818:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800181a:	680a      	ldr	r2, [r1, #0]
 800181c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001820:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001822:	d12a      	bne.n	800187a <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001824:	05d7      	lsls	r7, r2, #23
 8001826:	d403      	bmi.n	8001830 <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001828:	680a      	ldr	r2, [r1, #0]
 800182a:	f022 0208 	bic.w	r2, r2, #8
 800182e:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001830:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8001834:	2a00      	cmp	r2, #0
 8001836:	d086      	beq.n	8001746 <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 8001838:	4640      	mov	r0, r8
 800183a:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800183c:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8001840:	e781      	b.n	8001746 <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001842:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001844:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001848:	f042 0204 	orr.w	r2, r2, #4
 800184c:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001850:	e770      	b.n	8001734 <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001852:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001854:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001858:	f042 0202 	orr.w	r2, r2, #2
 800185c:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001860:	e75e      	b.n	8001720 <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001862:	680f      	ldr	r7, [r1, #0]
 8001864:	f027 0704 	bic.w	r7, r7, #4
 8001868:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800186a:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800186c:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001870:	f042 0201 	orr.w	r2, r2, #1
 8001874:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001878:	e748      	b.n	800170c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800187a:	0312      	lsls	r2, r2, #12
 800187c:	d5d8      	bpl.n	8001830 <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800187e:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001882:	2a00      	cmp	r2, #0
 8001884:	d1d8      	bne.n	8001838 <HAL_DMA_IRQHandler+0x154>
 8001886:	e75e      	b.n	8001746 <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001888:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800188c:	f47f af72 	bne.w	8001774 <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001890:	680a      	ldr	r2, [r1, #0]
 8001892:	f022 0210 	bic.w	r2, r2, #16
 8001896:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001898:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 800189a:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800189e:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
 80018a2:	e767      	b.n	8001774 <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 80018a4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f af66 	bne.w	800177a <HAL_DMA_IRQHandler+0x96>
 80018ae:	e766      	b.n	800177e <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018b0:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80018b4:	2a00      	cmp	r2, #0
 80018b6:	d19a      	bne.n	80017ee <HAL_DMA_IRQHandler+0x10a>
 80018b8:	e79d      	b.n	80017f6 <HAL_DMA_IRQHandler+0x112>
 80018ba:	bf00      	nop
 80018bc:	20000078 	.word	0x20000078
 80018c0:	1b4e81b5 	.word	0x1b4e81b5

080018c4 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d045      	beq.n	8001954 <HAL_DMA2D_Init+0x90>
  {
     return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 80018c8:	6802      	ldr	r2, [r0, #0]
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_DMA2D_Init+0xa0>)
 80018ce:	4604      	mov	r4, r0
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d003      	beq.n	80018dc <HAL_DMA2D_Init+0x18>
 80018d4:	21f6      	movs	r1, #246	; 0xf6
 80018d6:	4824      	ldr	r0, [pc, #144]	; (8001968 <HAL_DMA2D_Init+0xa4>)
 80018d8:	f018 fb00 	bl	8019edc <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 80018dc:	6863      	ldr	r3, [r4, #4]
 80018de:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80018e2:	d139      	bne.n	8001958 <HAL_DMA2D_Init+0x94>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 80018e4:	68a3      	ldr	r3, [r4, #8]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d82f      	bhi.n	800194a <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 80018ea:	68e3      	ldr	r3, [r4, #12]
 80018ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f0:	d226      	bcs.n	8001940 <HAL_DMA2D_Init+0x7c>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018f2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80018f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018fa:	b1db      	cbz	r3, 8001934 <HAL_DMA2D_Init+0x70>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018fc:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018fe:	2102      	movs	r1, #2
 8001900:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001904:	6818      	ldr	r0, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001906:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800190a:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
 800190e:	4310      	orrs	r0, r2

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001910:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_DMA2D_Init+0xa8>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001912:	6018      	str	r0, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001914:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001916:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001918:	f021 0107 	bic.w	r1, r1, #7
 800191c:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800191e:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001920:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001922:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001924:	400a      	ands	r2, r1
 8001926:	432a      	orrs	r2, r5
 8001928:	641a      	str	r2, [r3, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800192a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800192c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800192e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8001932:	bd38      	pop	{r3, r4, r5, pc}
    HAL_DMA2D_MspInit(hdma2d);
 8001934:	4620      	mov	r0, r4
    hdma2d->Lock = HAL_UNLOCKED;
 8001936:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800193a:	f017 f9a5 	bl	8018c88 <HAL_DMA2D_MspInit>
 800193e:	e7dd      	b.n	80018fc <HAL_DMA2D_Init+0x38>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8001940:	21f9      	movs	r1, #249	; 0xf9
 8001942:	4809      	ldr	r0, [pc, #36]	; (8001968 <HAL_DMA2D_Init+0xa4>)
 8001944:	f018 faca 	bl	8019edc <assert_failed>
 8001948:	e7d3      	b.n	80018f2 <HAL_DMA2D_Init+0x2e>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 800194a:	21f8      	movs	r1, #248	; 0xf8
 800194c:	4806      	ldr	r0, [pc, #24]	; (8001968 <HAL_DMA2D_Init+0xa4>)
 800194e:	f018 fac5 	bl	8019edc <assert_failed>
 8001952:	e7ca      	b.n	80018ea <HAL_DMA2D_Init+0x26>
     return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
}
 8001956:	4770      	bx	lr
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8001958:	21f7      	movs	r1, #247	; 0xf7
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <HAL_DMA2D_Init+0xa4>)
 800195c:	f018 fabe 	bl	8019edc <assert_failed>
 8001960:	e7c0      	b.n	80018e4 <HAL_DMA2D_Init+0x20>
 8001962:	bf00      	nop
 8001964:	4002b000 	.word	0x4002b000
 8001968:	0801fb20 	.word	0x0801fb20
 800196c:	ffffc000 	.word	0xffffc000

08001970 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001978:	4604      	mov	r4, r0
 800197a:	460f      	mov	r7, r1
 800197c:	4690      	mov	r8, r2
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
 800197e:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
{
 8001982:	461e      	mov	r6, r3
  assert_param(IS_DMA2D_LINE(Height));
 8001984:	d223      	bcs.n	80019ce <HAL_DMA2D_Start+0x5e>
  assert_param(IS_DMA2D_PIXEL(Width));
 8001986:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800198a:	d228      	bcs.n	80019de <HAL_DMA2D_Start+0x6e>

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800198c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001990:	2b01      	cmp	r3, #1
 8001992:	d02d      	beq.n	80019f0 <HAL_DMA2D_Start+0x80>
 8001994:	2301      	movs	r3, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001996:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hdma2d);
 8001998:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800199c:	2302      	movs	r3, #2
 800199e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80019a2:	6c68      	ldr	r0, [r5, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80019a4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80019a6:	f000 4040 	and.w	r0, r0, #3221225472	; 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80019aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80019ae:	ea40 0009 	orr.w	r0, r0, r9
 80019b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80019b6:	6468      	str	r0, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80019b8:	f8c5 803c 	str.w	r8, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80019bc:	d01b      	beq.n	80019f6 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80019be:	60ef      	str	r7, [r5, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 80019c0:	682b      	ldr	r3, [r5, #0]
  return HAL_OK;
 80019c2:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	602b      	str	r3, [r5, #0]
}
 80019ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA2D_LINE(Height));
 80019ce:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 80019d2:	4821      	ldr	r0, [pc, #132]	; (8001a58 <HAL_DMA2D_Start+0xe8>)
 80019d4:	f018 fa82 	bl	8019edc <assert_failed>
  assert_param(IS_DMA2D_PIXEL(Width));
 80019d8:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 80019dc:	d3d6      	bcc.n	800198c <HAL_DMA2D_Start+0x1c>
 80019de:	f240 21a5 	movw	r1, #677	; 0x2a5
 80019e2:	481d      	ldr	r0, [pc, #116]	; (8001a58 <HAL_DMA2D_Start+0xe8>)
 80019e4:	f018 fa7a 	bl	8019edc <assert_failed>
  __HAL_LOCK(hdma2d);
 80019e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d1d1      	bne.n	8001994 <HAL_DMA2D_Start+0x24>
 80019f0:	2002      	movs	r0, #2
}
 80019f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80019f6:	68a3      	ldr	r3, [r4, #8]
 80019f8:	b1b3      	cbz	r3, 8001a28 <HAL_DMA2D_Start+0xb8>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d021      	beq.n	8001a42 <HAL_DMA2D_Start+0xd2>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80019fe:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001a00:	f407 027f 	and.w	r2, r7, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001a04:	f407 447f 	and.w	r4, r7, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001a08:	b2f8      	uxtb	r0, r7
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001a0a:	d01d      	beq.n	8001a48 <HAL_DMA2D_Start+0xd8>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001a0c:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001a0e:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001a12:	d00b      	beq.n	8001a2c <HAL_DMA2D_Start+0xbc>
      tmp2 = (tmp2 >> 20U);
 8001a14:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8001a16:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001a18:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8001a1a:	0f3f      	lsrs	r7, r7, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001a1c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001a20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001a24:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001a28:	63af      	str	r7, [r5, #56]	; 0x38
 8001a2a:	e7c9      	b.n	80019c0 <HAL_DMA2D_Start+0x50>
      tmp2 = (tmp2 >> 19U);
 8001a2c:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 8001a2e:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001a30:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 8001a32:	0fff      	lsrs	r7, r7, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001a34:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8001a38:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8001a3c:	ea43 37c7 	orr.w	r7, r3, r7, lsl #15
 8001a40:	e7f2      	b.n	8001a28 <HAL_DMA2D_Start+0xb8>
      tmp = (tmp3 | tmp2 | tmp4);
 8001a42:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
 8001a46:	e7ef      	b.n	8001a28 <HAL_DMA2D_Start+0xb8>
      tmp2 = (tmp2 >> 19U);
 8001a48:	0cd7      	lsrs	r7, r2, #19
      tmp3 = (tmp3 >> 10U);
 8001a4a:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001a4c:	02ff      	lsls	r7, r7, #11
 8001a4e:	ea47 1744 	orr.w	r7, r7, r4, lsl #5
 8001a52:	ea47 07d0 	orr.w	r7, r7, r0, lsr #3
 8001a56:	e7e7      	b.n	8001a28 <HAL_DMA2D_Start+0xb8>
 8001a58:	0801fb20 	.word	0x0801fb20

08001a5c <HAL_DMA2D_PollForTransfer>:
{
 8001a5c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8001a5e:	2300      	movs	r3, #0
{
 8001a60:	b082      	sub	sp, #8
 8001a62:	4604      	mov	r4, r0
 8001a64:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8001a66:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001a68:	6803      	ldr	r3, [r0, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	07d6      	lsls	r6, r2, #31
 8001a6e:	d40f      	bmi.n	8001a90 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001a70:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001a72:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a74:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8001a76:	0691      	lsls	r1, r2, #26
 8001a78:	d432      	bmi.n	8001ae0 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 8001a7a:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001a7c:	2012      	movs	r0, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a7e:	2101      	movs	r1, #1
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001a80:	6098      	str	r0, [r3, #8]
  return HAL_OK;
 8001a82:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a84:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001a88:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8001a90:	f7ff faee 	bl	8001070 <HAL_GetTick>
 8001a94:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001a96:	1c6a      	adds	r2, r5, #1
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	d147      	bne.n	8001b2c <HAL_DMA2D_PollForTransfer+0xd0>
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	0796      	lsls	r6, r2, #30
 8001aa0:	d4e6      	bmi.n	8001a70 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001aa6:	9a01      	ldr	r2, [sp, #4]
 8001aa8:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001aac:	d0f6      	beq.n	8001a9c <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001aae:	9a01      	ldr	r2, [sp, #4]
 8001ab0:	0690      	lsls	r0, r2, #26
 8001ab2:	d503      	bpl.n	8001abc <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ab4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ab6:	f042 0202 	orr.w	r2, r2, #2
 8001aba:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001abc:	9a01      	ldr	r2, [sp, #4]
 8001abe:	07d1      	lsls	r1, r2, #31
 8001ac0:	d503      	bpl.n	8001aca <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ac2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001aca:	2021      	movs	r0, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001acc:	6098      	str	r0, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001ace:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8001ad0:	2200      	movs	r2, #0
        return HAL_ERROR;
 8001ad2:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001ad4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001ad8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 8001adc:	b002      	add	sp, #8
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8001ae0:	f7ff fac6 	bl	8001070 <HAL_GetTick>
 8001ae4:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001ae6:	1c68      	adds	r0, r5, #1
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	d13b      	bne.n	8001b64 <HAL_DMA2D_PollForTransfer+0x108>
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	06d1      	lsls	r1, r2, #27
 8001af0:	d4c3      	bmi.n	8001a7a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001af6:	9a01      	ldr	r2, [sp, #4]
 8001af8:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001afc:	d0f6      	beq.n	8001aec <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001afe:	9a01      	ldr	r2, [sp, #4]
 8001b00:	0712      	lsls	r2, r2, #28
 8001b02:	d503      	bpl.n	8001b0c <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001b04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b06:	f042 0204 	orr.w	r2, r2, #4
 8001b0a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b0c:	9a01      	ldr	r2, [sp, #4]
 8001b0e:	0696      	lsls	r6, r2, #26
 8001b10:	d503      	bpl.n	8001b1a <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b14:	f042 0202 	orr.w	r2, r2, #2
 8001b18:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b1a:	9a01      	ldr	r2, [sp, #4]
 8001b1c:	07d5      	lsls	r5, r2, #31
 8001b1e:	d503      	bpl.n	8001b28 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001b28:	2029      	movs	r0, #41	; 0x29
 8001b2a:	e7cf      	b.n	8001acc <HAL_DMA2D_PollForTransfer+0x70>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	0790      	lsls	r0, r2, #30
 8001b30:	d49e      	bmi.n	8001a70 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001b36:	9a01      	ldr	r2, [sp, #4]
 8001b38:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001b3c:	d1b7      	bne.n	8001aae <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001b3e:	f7ff fa97 	bl	8001070 <HAL_GetTick>
 8001b42:	1b80      	subs	r0, r0, r6
 8001b44:	42a8      	cmp	r0, r5
 8001b46:	d801      	bhi.n	8001b4c <HAL_DMA2D_PollForTransfer+0xf0>
 8001b48:	2d00      	cmp	r5, #0
 8001b4a:	d1a4      	bne.n	8001a96 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001b4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001b4e:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 8001b50:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001b52:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8001b56:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 8001b58:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001b5c:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001b5e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 8001b62:	e793      	b.n	8001a8c <HAL_DMA2D_PollForTransfer+0x30>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	06d2      	lsls	r2, r2, #27
 8001b68:	d487      	bmi.n	8001a7a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001b6e:	9a01      	ldr	r2, [sp, #4]
 8001b70:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001b74:	d1c3      	bne.n	8001afe <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001b76:	f7ff fa7b 	bl	8001070 <HAL_GetTick>
 8001b7a:	1b80      	subs	r0, r0, r6
 8001b7c:	42a8      	cmp	r0, r5
 8001b7e:	d8e5      	bhi.n	8001b4c <HAL_DMA2D_PollForTransfer+0xf0>
 8001b80:	2d00      	cmp	r5, #0
 8001b82:	d1b0      	bne.n	8001ae6 <HAL_DMA2D_PollForTransfer+0x8a>
 8001b84:	e7e2      	b.n	8001b4c <HAL_DMA2D_PollForTransfer+0xf0>
 8001b86:	bf00      	nop

08001b88 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8001b88:	2901      	cmp	r1, #1
{
 8001b8a:	b570      	push	{r4, r5, r6, lr}
 8001b8c:	460d      	mov	r5, r1
 8001b8e:	4604      	mov	r4, r0
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8001b90:	d904      	bls.n	8001b9c <HAL_DMA2D_ConfigLayer+0x14>
 8001b92:	f240 614a 	movw	r1, #1610	; 0x64a
 8001b96:	483f      	ldr	r0, [pc, #252]	; (8001c94 <HAL_DMA2D_ConfigLayer+0x10c>)
 8001b98:	f018 f9a0 	bl	8019edc <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8001b9c:	eb04 1205 	add.w	r2, r4, r5, lsl #4
 8001ba0:	012e      	lsls	r6, r5, #4
 8001ba2:	6993      	ldr	r3, [r2, #24]
 8001ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ba8:	d261      	bcs.n	8001c6e <HAL_DMA2D_ConfigLayer+0xe6>
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001baa:	6862      	ldr	r2, [r4, #4]
 8001bac:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001bb0:	d004      	beq.n	8001bbc <HAL_DMA2D_ConfigLayer+0x34>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8001bb2:	19a3      	adds	r3, r4, r6
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2b0a      	cmp	r3, #10
 8001bb8:	d83f      	bhi.n	8001c3a <HAL_DMA2D_ConfigLayer+0xb2>
    if(hdma2d->Init.Mode != DMA2D_M2M)
 8001bba:	bb2a      	cbnz	r2, 8001c08 <HAL_DMA2D_ConfigLayer+0x80>
  __HAL_LOCK(hdma2d);
 8001bbc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d02f      	beq.n	8001c24 <HAL_DMA2D_ConfigLayer+0x9c>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bc4:	19a3      	adds	r3, r4, r6
  __HAL_LOCK(hdma2d);
 8001bc6:	2101      	movs	r1, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bc8:	2202      	movs	r2, #2
  __HAL_LOCK(hdma2d);
 8001bca:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bce:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bd2:	e9d3 1207 	ldrd	r1, r2, [r3, #28]
 8001bd6:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bda:	3909      	subs	r1, #9
 8001bdc:	2901      	cmp	r1, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001bde:	6a59      	ldr	r1, [r3, #36]	; 0x24
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001be0:	d934      	bls.n	8001c4c <HAL_DMA2D_ConfigLayer+0xc4>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001be2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001be6:	b1fd      	cbz	r5, 8001c28 <HAL_DMA2D_ConfigLayer+0xa0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001be8:	6821      	ldr	r1, [r4, #0]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001bea:	6998      	ldr	r0, [r3, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001bec:	69cd      	ldr	r5, [r1, #28]
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_DMA2D_ConfigLayer+0x110>)
 8001bf0:	402b      	ands	r3, r5
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001bf6:	6108      	str	r0, [r1, #16]
  __HAL_UNLOCK(hdma2d);
 8001bf8:	2300      	movs	r3, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bfa:	2201      	movs	r2, #1
  return HAL_OK;
 8001bfc:	4618      	mov	r0, r3
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bfe:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001c02:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001c06:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8001c08:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d9d4      	bls.n	8001bbc <HAL_DMA2D_ConfigLayer+0x34>
 8001c12:	f240 6151 	movw	r1, #1617	; 0x651
 8001c16:	481f      	ldr	r0, [pc, #124]	; (8001c94 <HAL_DMA2D_ConfigLayer+0x10c>)
 8001c18:	f018 f960 	bl	8019edc <assert_failed>
  __HAL_LOCK(hdma2d);
 8001c1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d1cf      	bne.n	8001bc4 <HAL_DMA2D_ConfigLayer+0x3c>
 8001c24:	2002      	movs	r0, #2
}
 8001c26:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c28:	6821      	ldr	r1, [r4, #0]
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_DMA2D_ConfigLayer+0x110>)
 8001c2c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c2e:	69a0      	ldr	r0, [r4, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c30:	402b      	ands	r3, r5
 8001c32:	431a      	orrs	r2, r3
 8001c34:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c36:	6188      	str	r0, [r1, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c38:	e7de      	b.n	8001bf8 <HAL_DMA2D_ConfigLayer+0x70>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8001c3a:	f240 614e 	movw	r1, #1614	; 0x64e
 8001c3e:	4815      	ldr	r0, [pc, #84]	; (8001c94 <HAL_DMA2D_ConfigLayer+0x10c>)
 8001c40:	f018 f94c 	bl	8019edc <assert_failed>
    if(hdma2d->Init.Mode != DMA2D_M2M)
 8001c44:	6862      	ldr	r2, [r4, #4]
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	d0b8      	beq.n	8001bbc <HAL_DMA2D_ConfigLayer+0x34>
 8001c4a:	e7dd      	b.n	8001c08 <HAL_DMA2D_ConfigLayer+0x80>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c4c:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 8001c50:	4302      	orrs	r2, r0
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c52:	b995      	cbnz	r5, 8001c7a <HAL_DMA2D_ConfigLayer+0xf2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c54:	6821      	ldr	r1, [r4, #0]
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_DMA2D_ConfigLayer+0x110>)
 8001c58:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001c5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c5c:	4033      	ands	r3, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c5e:	69a5      	ldr	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001c60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c64:	431a      	orrs	r2, r3
 8001c66:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c68:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001c6a:	6288      	str	r0, [r1, #40]	; 0x28
 8001c6c:	e7c4      	b.n	8001bf8 <HAL_DMA2D_ConfigLayer+0x70>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8001c6e:	f240 614b 	movw	r1, #1611	; 0x64b
 8001c72:	4808      	ldr	r0, [pc, #32]	; (8001c94 <HAL_DMA2D_ConfigLayer+0x10c>)
 8001c74:	f018 f932 	bl	8019edc <assert_failed>
 8001c78:	e797      	b.n	8001baa <HAL_DMA2D_ConfigLayer+0x22>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c7a:	6820      	ldr	r0, [r4, #0]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001c7c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c80:	699d      	ldr	r5, [r3, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c82:	69c6      	ldr	r6, [r0, #28]
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <HAL_DMA2D_ConfigLayer+0x110>)
 8001c86:	4033      	ands	r3, r6
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	61c2      	str	r2, [r0, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c8c:	6105      	str	r5, [r0, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001c8e:	6201      	str	r1, [r0, #32]
 8001c90:	e7b2      	b.n	8001bf8 <HAL_DMA2D_ConfigLayer+0x70>
 8001c92:	bf00      	nop
 8001c94:	0801fb20 	.word	0x0801fb20
 8001c98:	00fcfff0 	.word	0x00fcfff0

08001c9c <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001c9c:	4bb5      	ldr	r3, [pc, #724]	; (8001f74 <HAL_GPIO_Init+0x2d8>)
 8001c9e:	4ab6      	ldr	r2, [pc, #728]	; (8001f78 <HAL_GPIO_Init+0x2dc>)
 8001ca0:	4290      	cmp	r0, r2
 8001ca2:	bf18      	it	ne
 8001ca4:	4298      	cmpne	r0, r3
{
 8001ca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001caa:	bf18      	it	ne
 8001cac:	2301      	movne	r3, #1
{
 8001cae:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001cb0:	bf08      	it	eq
 8001cb2:	2300      	moveq	r3, #0
{
 8001cb4:	4606      	mov	r6, r0
 8001cb6:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	d026      	beq.n	8001d0a <HAL_GPIO_Init+0x6e>
 8001cbc:	4baf      	ldr	r3, [pc, #700]	; (8001f7c <HAL_GPIO_Init+0x2e0>)
 8001cbe:	4298      	cmp	r0, r3
 8001cc0:	d023      	beq.n	8001d0a <HAL_GPIO_Init+0x6e>
 8001cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc6:	4298      	cmp	r0, r3
 8001cc8:	d01f      	beq.n	8001d0a <HAL_GPIO_Init+0x6e>
 8001cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cce:	4298      	cmp	r0, r3
 8001cd0:	d01b      	beq.n	8001d0a <HAL_GPIO_Init+0x6e>
 8001cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd6:	4298      	cmp	r0, r3
 8001cd8:	d017      	beq.n	8001d0a <HAL_GPIO_Init+0x6e>
 8001cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cde:	4298      	cmp	r0, r3
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x6e>
 8001ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce6:	4298      	cmp	r0, r3
 8001ce8:	d00f      	beq.n	8001d0a <HAL_GPIO_Init+0x6e>
 8001cea:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf2:	4290      	cmp	r0, r2
 8001cf4:	bf18      	it	ne
 8001cf6:	4298      	cmpne	r0, r3
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x6e>
 8001cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cfe:	4298      	cmp	r0, r3
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x6e>
 8001d02:	21b1      	movs	r1, #177	; 0xb1
 8001d04:	489e      	ldr	r0, [pc, #632]	; (8001f80 <HAL_GPIO_Init+0x2e4>)
 8001d06:	f018 f8e9 	bl	8019edc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001d0a:	f8b8 3000 	ldrh.w	r3, [r8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 810c 	beq.w	8001f2c <HAL_GPIO_Init+0x290>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001d14:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001d18:	4b9a      	ldr	r3, [pc, #616]	; (8001f84 <HAL_GPIO_Init+0x2e8>)
 8001d1a:	489b      	ldr	r0, [pc, #620]	; (8001f88 <HAL_GPIO_Init+0x2ec>)
 8001d1c:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8001d20:	429a      	cmp	r2, r3
 8001d22:	bf18      	it	ne
 8001d24:	2a03      	cmpne	r2, #3
 8001d26:	bf8c      	ite	hi
 8001d28:	2301      	movhi	r3, #1
 8001d2a:	2300      	movls	r3, #0
 8001d2c:	4282      	cmp	r2, r0
 8001d2e:	bf0c      	ite	eq
 8001d30:	2300      	moveq	r3, #0
 8001d32:	f003 0301 	andne.w	r3, r3, #1
 8001d36:	3a11      	subs	r2, #17
 8001d38:	2a01      	cmp	r2, #1
 8001d3a:	bf94      	ite	ls
 8001d3c:	2300      	movls	r3, #0
 8001d3e:	f003 0301 	andhi.w	r3, r3, #1
 8001d42:	4a92      	ldr	r2, [pc, #584]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001d44:	4291      	cmp	r1, r2
 8001d46:	bf0c      	ite	eq
 8001d48:	2300      	moveq	r3, #0
 8001d4a:	f003 0301 	andne.w	r3, r3, #1
 8001d4e:	b11b      	cbz	r3, 8001d58 <HAL_GPIO_Init+0xbc>
 8001d50:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <HAL_GPIO_Init+0x2f4>)
 8001d52:	4299      	cmp	r1, r3
 8001d54:	f040 8132 	bne.w	8001fbc <HAL_GPIO_Init+0x320>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001d58:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	f200 80ea 	bhi.w	8001f36 <HAL_GPIO_Init+0x29a>
{
 8001d62:	2400      	movs	r4, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d64:	f8df b250 	ldr.w	fp, [pc, #592]	; 8001fb8 <HAL_GPIO_Init+0x31c>
 8001d68:	e003      	b.n	8001d72 <HAL_GPIO_Init+0xd6>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d6a:	3401      	adds	r4, #1
 8001d6c:	2c10      	cmp	r4, #16
 8001d6e:	f000 80bc 	beq.w	8001eea <HAL_GPIO_Init+0x24e>
    ioposition = ((uint32_t)0x01) << position;
 8001d72:	2501      	movs	r5, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d74:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 8001d78:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	ea05 0a03 	and.w	sl, r5, r3
    if(iocurrent == ioposition)
 8001d7e:	ea35 0303 	bics.w	r3, r5, r3
 8001d82:	d1f2      	bne.n	8001d6a <HAL_GPIO_Init+0xce>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001d88:	f023 0010 	bic.w	r0, r3, #16
 8001d8c:	2802      	cmp	r0, #2
 8001d8e:	d114      	bne.n	8001dba <HAL_GPIO_Init+0x11e>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001d90:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8001d94:	290f      	cmp	r1, #15
 8001d96:	f200 80b9 	bhi.w	8001f0c <HAL_GPIO_Init+0x270>
        temp = GPIOx->AFR[position >> 3];
 8001d9a:	08e7      	lsrs	r7, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d9c:	f004 0207 	and.w	r2, r4, #7
 8001da0:	f04f 0c0f 	mov.w	ip, #15
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	eb06 0787 	add.w	r7, r6, r7, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001daa:	4091      	lsls	r1, r2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dac:	fa0c fc02 	lsl.w	ip, ip, r2
        temp = GPIOx->AFR[position >> 3];
 8001db0:	6a3a      	ldr	r2, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001db2:	ea22 020c 	bic.w	r2, r2, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001db6:	430a      	orrs	r2, r1
        GPIOx->AFR[position >> 3] = temp;
 8001db8:	623a      	str	r2, [r7, #32]
      temp = GPIOx->MODER;
 8001dba:	ea4f 0944 	mov.w	r9, r4, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dbe:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001dc0:	6831      	ldr	r1, [r6, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dc2:	3801      	subs	r0, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dc4:	fa07 f709 	lsl.w	r7, r7, r9
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc8:	2801      	cmp	r0, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dca:	ea21 0c07 	bic.w	ip, r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dce:	f003 0103 	and.w	r1, r3, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dd2:	ea6f 0707 	mvn.w	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dd6:	fa01 f109 	lsl.w	r1, r1, r9
 8001dda:	ea41 010c 	orr.w	r1, r1, ip
      GPIOx->MODER = temp;
 8001dde:	6031      	str	r1, [r6, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de0:	d812      	bhi.n	8001e08 <HAL_GPIO_Init+0x16c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001de2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8001de6:	2903      	cmp	r1, #3
 8001de8:	f200 8082 	bhi.w	8001ef0 <HAL_GPIO_Init+0x254>
        temp = GPIOx->OSPEEDR; 
 8001dec:	68b0      	ldr	r0, [r6, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dee:	fa01 f109 	lsl.w	r1, r1, r9
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001df2:	4038      	ands	r0, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001df4:	4301      	orrs	r1, r0
        GPIOx->OSPEEDR = temp;
 8001df6:	60b1      	str	r1, [r6, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001df8:	f3c3 1100 	ubfx	r1, r3, #4, #1
        temp = GPIOx->OTYPER;
 8001dfc:	6870      	ldr	r0, [r6, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001dfe:	40a1      	lsls	r1, r4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e00:	ea20 0505 	bic.w	r5, r0, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e04:	430d      	orrs	r5, r1
        GPIOx->OTYPER = temp;
 8001e06:	6075      	str	r5, [r6, #4]
      temp = GPIOx->PUPDR;
 8001e08:	68f1      	ldr	r1, [r6, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0a:	00da      	lsls	r2, r3, #3
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e0c:	ea07 0701 	and.w	r7, r7, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e10:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8001e14:	fa01 f109 	lsl.w	r1, r1, r9
 8001e18:	ea41 0107 	orr.w	r1, r1, r7
      GPIOx->PUPDR = temp;
 8001e1c:	60f1      	str	r1, [r6, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1e:	d5a4      	bpl.n	8001d6a <HAL_GPIO_Init+0xce>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e20:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 8001e24:	f024 0203 	bic.w	r2, r4, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e28:	f004 0503 	and.w	r5, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e30:	00ad      	lsls	r5, r5, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8001e36:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 8001e3a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001e3e:	9103      	str	r1, [sp, #12]
 8001e40:	4954      	ldr	r1, [pc, #336]	; (8001f94 <HAL_GPIO_Init+0x2f8>)
 8001e42:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001e44:	4411      	add	r1, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e46:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8001e48:	6888      	ldr	r0, [r1, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e4a:	40aa      	lsls	r2, r5
 8001e4c:	ea20 0202 	bic.w	r2, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e50:	4849      	ldr	r0, [pc, #292]	; (8001f78 <HAL_GPIO_Init+0x2dc>)
 8001e52:	4286      	cmp	r6, r0
 8001e54:	d020      	beq.n	8001e98 <HAL_GPIO_Init+0x1fc>
 8001e56:	9801      	ldr	r0, [sp, #4]
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d052      	beq.n	8001f02 <HAL_GPIO_Init+0x266>
 8001e5c:	4847      	ldr	r0, [pc, #284]	; (8001f7c <HAL_GPIO_Init+0x2e0>)
 8001e5e:	4286      	cmp	r6, r0
 8001e60:	d05f      	beq.n	8001f22 <HAL_GPIO_Init+0x286>
 8001e62:	484d      	ldr	r0, [pc, #308]	; (8001f98 <HAL_GPIO_Init+0x2fc>)
 8001e64:	4286      	cmp	r6, r0
 8001e66:	d06b      	beq.n	8001f40 <HAL_GPIO_Init+0x2a4>
 8001e68:	484c      	ldr	r0, [pc, #304]	; (8001f9c <HAL_GPIO_Init+0x300>)
 8001e6a:	4286      	cmp	r6, r0
 8001e6c:	d06d      	beq.n	8001f4a <HAL_GPIO_Init+0x2ae>
 8001e6e:	484c      	ldr	r0, [pc, #304]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001e70:	4286      	cmp	r6, r0
 8001e72:	d074      	beq.n	8001f5e <HAL_GPIO_Init+0x2c2>
 8001e74:	484b      	ldr	r0, [pc, #300]	; (8001fa4 <HAL_GPIO_Init+0x308>)
 8001e76:	4286      	cmp	r6, r0
 8001e78:	d076      	beq.n	8001f68 <HAL_GPIO_Init+0x2cc>
 8001e7a:	484b      	ldr	r0, [pc, #300]	; (8001fa8 <HAL_GPIO_Init+0x30c>)
 8001e7c:	4286      	cmp	r6, r0
 8001e7e:	d069      	beq.n	8001f54 <HAL_GPIO_Init+0x2b8>
 8001e80:	484a      	ldr	r0, [pc, #296]	; (8001fac <HAL_GPIO_Init+0x310>)
 8001e82:	4286      	cmp	r6, r0
 8001e84:	f000 809f 	beq.w	8001fc6 <HAL_GPIO_Init+0x32a>
 8001e88:	4849      	ldr	r0, [pc, #292]	; (8001fb0 <HAL_GPIO_Init+0x314>)
 8001e8a:	4286      	cmp	r6, r0
 8001e8c:	bf0c      	ite	eq
 8001e8e:	2009      	moveq	r0, #9
 8001e90:	200a      	movne	r0, #10
 8001e92:	fa00 f505 	lsl.w	r5, r0, r5
 8001e96:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e98:	608a      	str	r2, [r1, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9a:	03df      	lsls	r7, r3, #15
        temp = EXTI->IMR;
 8001e9c:	4a45      	ldr	r2, [pc, #276]	; (8001fb4 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	ea6f 010a 	mvn.w	r1, sl
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001ea2:	4844      	ldr	r0, [pc, #272]	; (8001fb4 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ea4:	f104 0401 	add.w	r4, r4, #1
        temp = EXTI->IMR;
 8001ea8:	6812      	ldr	r2, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001eaa:	bf54      	ite	pl
 8001eac:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8001eae:	ea4a 0202 	orrmi.w	r2, sl, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb2:	039d      	lsls	r5, r3, #14
        EXTI->IMR = temp;
 8001eb4:	6002      	str	r2, [r0, #0]
        temp = EXTI->EMR;
 8001eb6:	6842      	ldr	r2, [r0, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001eb8:	483e      	ldr	r0, [pc, #248]	; (8001fb4 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 8001eba:	bf54      	ite	pl
 8001ebc:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8001ebe:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR = temp;
 8001ec2:	6042      	str	r2, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec4:	6882      	ldr	r2, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec6:	02d8      	lsls	r0, r3, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001ec8:	483a      	ldr	r0, [pc, #232]	; (8001fb4 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 8001eca:	bf54      	ite	pl
 8001ecc:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8001ece:	ea4a 0202 	orrmi.w	r2, sl, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed2:	029b      	lsls	r3, r3, #10
        EXTI->RTSR = temp;
 8001ed4:	6082      	str	r2, [r0, #8]
        temp = EXTI->FTSR;
 8001ed6:	68c2      	ldr	r2, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	bf54      	ite	pl
 8001eda:	4011      	andpl	r1, r2
        {
          temp |= iocurrent;
 8001edc:	ea4a 0102 	orrmi.w	r1, sl, r2
        }
        EXTI->FTSR = temp;
 8001ee0:	4a34      	ldr	r2, [pc, #208]	; (8001fb4 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ee2:	2c10      	cmp	r4, #16
        EXTI->FTSR = temp;
 8001ee4:	60d1      	str	r1, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ee6:	f47f af44 	bne.w	8001d72 <HAL_GPIO_Init+0xd6>
      }
    }
  }
}
 8001eea:	b005      	add	sp, #20
 8001eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001ef0:	21d9      	movs	r1, #217	; 0xd9
 8001ef2:	4823      	ldr	r0, [pc, #140]	; (8001f80 <HAL_GPIO_Init+0x2e4>)
 8001ef4:	f017 fff2 	bl	8019edc <assert_failed>
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ef8:	f8d8 100c 	ldr.w	r1, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001efc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001f00:	e774      	b.n	8001dec <HAL_GPIO_Init+0x150>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f02:	2001      	movs	r0, #1
 8001f04:	fa00 f505 	lsl.w	r5, r0, r5
 8001f08:	432a      	orrs	r2, r5
 8001f0a:	e7c5      	b.n	8001e98 <HAL_GPIO_Init+0x1fc>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001f0c:	21c5      	movs	r1, #197	; 0xc5
 8001f0e:	481c      	ldr	r0, [pc, #112]	; (8001f80 <HAL_GPIO_Init+0x2e4>)
 8001f10:	f017 ffe4 	bl	8019edc <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f14:	f8d8 3004 	ldr.w	r3, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f18:	f8d8 1010 	ldr.w	r1, [r8, #16]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1c:	f023 0010 	bic.w	r0, r3, #16
 8001f20:	e73b      	b.n	8001d9a <HAL_GPIO_Init+0xfe>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f22:	2002      	movs	r0, #2
 8001f24:	fa00 f505 	lsl.w	r5, r0, r5
 8001f28:	432a      	orrs	r2, r5
 8001f2a:	e7b5      	b.n	8001e98 <HAL_GPIO_Init+0x1fc>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f2c:	21b2      	movs	r1, #178	; 0xb2
 8001f2e:	4814      	ldr	r0, [pc, #80]	; (8001f80 <HAL_GPIO_Init+0x2e4>)
 8001f30:	f017 ffd4 	bl	8019edc <assert_failed>
 8001f34:	e6ee      	b.n	8001d14 <HAL_GPIO_Init+0x78>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001f36:	21b4      	movs	r1, #180	; 0xb4
 8001f38:	4811      	ldr	r0, [pc, #68]	; (8001f80 <HAL_GPIO_Init+0x2e4>)
 8001f3a:	f017 ffcf 	bl	8019edc <assert_failed>
 8001f3e:	e710      	b.n	8001d62 <HAL_GPIO_Init+0xc6>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f40:	2003      	movs	r0, #3
 8001f42:	fa00 f505 	lsl.w	r5, r0, r5
 8001f46:	432a      	orrs	r2, r5
 8001f48:	e7a6      	b.n	8001e98 <HAL_GPIO_Init+0x1fc>
 8001f4a:	2004      	movs	r0, #4
 8001f4c:	fa00 f505 	lsl.w	r5, r0, r5
 8001f50:	432a      	orrs	r2, r5
 8001f52:	e7a1      	b.n	8001e98 <HAL_GPIO_Init+0x1fc>
 8001f54:	2007      	movs	r0, #7
 8001f56:	fa00 f505 	lsl.w	r5, r0, r5
 8001f5a:	432a      	orrs	r2, r5
 8001f5c:	e79c      	b.n	8001e98 <HAL_GPIO_Init+0x1fc>
 8001f5e:	2005      	movs	r0, #5
 8001f60:	fa00 f505 	lsl.w	r5, r0, r5
 8001f64:	432a      	orrs	r2, r5
 8001f66:	e797      	b.n	8001e98 <HAL_GPIO_Init+0x1fc>
 8001f68:	2006      	movs	r0, #6
 8001f6a:	fa00 f505 	lsl.w	r5, r0, r5
 8001f6e:	432a      	orrs	r2, r5
 8001f70:	e792      	b.n	8001e98 <HAL_GPIO_Init+0x1fc>
 8001f72:	bf00      	nop
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	0801fb5c 	.word	0x0801fb5c
 8001f84:	10210000 	.word	0x10210000
 8001f88:	10220000 	.word	0x10220000
 8001f8c:	10110000 	.word	0x10110000
 8001f90:	10120000 	.word	0x10120000
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021800 	.word	0x40021800
 8001fa8:	40021c00 	.word	0x40021c00
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40022400 	.word	0x40022400
 8001fb4:	40013c00 	.word	0x40013c00
 8001fb8:	40023800 	.word	0x40023800
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001fbc:	21b3      	movs	r1, #179	; 0xb3
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <HAL_GPIO_Init+0x334>)
 8001fc0:	f017 ff8c 	bl	8019edc <assert_failed>
 8001fc4:	e6c8      	b.n	8001d58 <HAL_GPIO_Init+0xbc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fc6:	2008      	movs	r0, #8
 8001fc8:	fa00 f505 	lsl.w	r5, r0, r5
 8001fcc:	432a      	orrs	r2, r5
 8001fce:	e763      	b.n	8001e98 <HAL_GPIO_Init+0x1fc>
 8001fd0:	0801fb5c 	.word	0x0801fb5c

08001fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001fd8:	460c      	mov	r4, r1
 8001fda:	b129      	cbz	r1, 8001fe8 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fdc:	692b      	ldr	r3, [r5, #16]
 8001fde:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001fe0:	bf14      	ite	ne
 8001fe2:	2001      	movne	r0, #1
 8001fe4:	2000      	moveq	r0, #0
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001fe8:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8001fec:	4801      	ldr	r0, [pc, #4]	; (8001ff4 <HAL_GPIO_ReadPin+0x20>)
 8001fee:	f017 ff75 	bl	8019edc <assert_failed>
 8001ff2:	e7f3      	b.n	8001fdc <HAL_GPIO_ReadPin+0x8>
 8001ff4:	0801fb5c 	.word	0x0801fb5c

08001ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001ffc:	460c      	mov	r4, r1
{
 8001ffe:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002000:	b161      	cbz	r1, 800201c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002002:	2d01      	cmp	r5, #1
 8002004:	d803      	bhi.n	800200e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8002006:	b905      	cbnz	r5, 800200a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002008:	0424      	lsls	r4, r4, #16
 800200a:	61b4      	str	r4, [r6, #24]
  }
}
 800200c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800200e:	f240 119b 	movw	r1, #411	; 0x19b
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <HAL_GPIO_WritePin+0x30>)
 8002014:	f017 ff62 	bl	8019edc <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002018:	61b4      	str	r4, [r6, #24]
}
 800201a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800201c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002020:	4801      	ldr	r0, [pc, #4]	; (8002028 <HAL_GPIO_WritePin+0x30>)
 8002022:	f017 ff5b 	bl	8019edc <assert_failed>
 8002026:	e7ec      	b.n	8002002 <HAL_GPIO_WritePin+0xa>
 8002028:	0801fb5c 	.word	0x0801fb5c

0800202c <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002032:	6951      	ldr	r1, [r2, #20]
 8002034:	4201      	tst	r1, r0
 8002036:	d100      	bne.n	800203a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002038:	4770      	bx	lr
{
 800203a:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800203c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800203e:	f7ff fff5 	bl	800202c <HAL_GPIO_EXTI_Callback>
}
 8002042:	bd08      	pop	{r3, pc}
 8002044:	40013c00 	.word	0x40013c00

08002048 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800204c:	f890 62b8 	ldrb.w	r6, [r0, #696]	; 0x2b8
{
 8002050:	b085      	sub	sp, #20
 8002052:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002054:	2e01      	cmp	r6, #1
{
 8002056:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800205a:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
 800205e:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
  __HAL_LOCK(hhcd);
 8002062:	d026      	beq.n	80020b2 <HAL_HCD_HC_Init+0x6a>
  hhcd->hc[ch_num].do_ping = 0U;
 8002064:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8002068:	2600      	movs	r6, #0
  hhcd->hc[ch_num].dev_addr = dev_address;
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800206a:	f002 0a7f 	and.w	sl, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
 800206e:	f04f 0b01 	mov.w	fp, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8002072:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3

  if ((epnum & 0x80U) == 0x80U)
 8002076:	09d0      	lsrs	r0, r2, #7
  __HAL_LOCK(hhcd);
 8002078:	f884 b2b8 	strb.w	fp, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].dev_addr = dev_address;
 800207c:	f88c 3038 	strb.w	r3, [ip, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8002080:	f88c 1039 	strb.w	r1, [ip, #57]	; 0x39
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002084:	f88c a03a 	strb.w	sl, [ip, #58]	; 0x3a
 8002088:	f88c 003b 	strb.w	r0, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].do_ping = 0U;
 800208c:	f88c 603d 	strb.w	r6, [ip, #61]	; 0x3d
  hhcd->hc[ch_num].ep_type = ep_type;
 8002090:	f88c 703f 	strb.w	r7, [ip, #63]	; 0x3f
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8002094:	f88c 503c 	strb.w	r5, [ip, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8002098:	f8ac 8040 	strh.w	r8, [ip, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 800209c:	9500      	str	r5, [sp, #0]
 800209e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80020a2:	6820      	ldr	r0, [r4, #0]
 80020a4:	f005 fac2 	bl	800762c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80020a8:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 80020ac:	b005      	add	sp, #20
 80020ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hhcd);
 80020b2:	2002      	movs	r0, #2
}
 80020b4:	b005      	add	sp, #20
 80020b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ba:	bf00      	nop

080020bc <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80020bc:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d00c      	beq.n	80020de <HAL_HCD_HC_Halt+0x22>
 80020c4:	2301      	movs	r3, #1
{
 80020c6:	b510      	push	{r4, lr}
 80020c8:	4604      	mov	r4, r0
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ca:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 80020cc:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d0:	f005 fc00 	bl	80078d4 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020d4:	2300      	movs	r3, #0

  return status;
 80020d6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hhcd);
 80020d8:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
}
 80020dc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80020de:	2002      	movs	r0, #2
}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <HAL_HCD_Init>:
  if (hhcd == NULL)
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d058      	beq.n	800219a <HAL_HCD_Init+0xb6>
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80020e8:	6803      	ldr	r3, [r0, #0]
 80020ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80020ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f2:	4606      	mov	r6, r0
 80020f4:	b08a      	sub	sp, #40	; 0x28
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80020f6:	d002      	beq.n	80020fe <HAL_HCD_Init+0x1a>
 80020f8:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_HCD_Init+0xbc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d13d      	bne.n	800217a <HAL_HCD_Init+0x96>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020fe:	f896 32b9 	ldrb.w	r3, [r6, #697]	; 0x2b9
 8002102:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002106:	2b00      	cmp	r3, #0
 8002108:	d041      	beq.n	800218e <HAL_HCD_Init+0xaa>
  hhcd->State = HAL_HCD_STATE_BUSY;
 800210a:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800210c:	4634      	mov	r4, r6
  __HAL_HCD_DISABLE(hhcd);
 800210e:	6830      	ldr	r0, [r6, #0]
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002110:	466d      	mov	r5, sp
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002112:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002116:	1d37      	adds	r7, r6, #4
  __HAL_HCD_DISABLE(hhcd);
 8002118:	f005 f94a 	bl	80073b0 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800211c:	f854 cb10 	ldr.w	ip, [r4], #16
 8002120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002128:	e894 0003 	ldmia.w	r4, {r0, r1}
 800212c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002130:	4660      	mov	r0, ip
 8002132:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002136:	f005 f8bf 	bl	80072b8 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800213a:	2101      	movs	r1, #1
 800213c:	6830      	ldr	r0, [r6, #0]
 800213e:	f005 f93f 	bl	80073c0 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002142:	46b4      	mov	ip, r6
 8002144:	46ee      	mov	lr, sp
 8002146:	f85c 8b10 	ldr.w	r8, [ip], #16
 800214a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800214e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002152:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002156:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800215a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800215e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002162:	4640      	mov	r0, r8
 8002164:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002168:	f005 f95a 	bl	8007420 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800216c:	2301      	movs	r3, #1
  return HAL_OK;
 800216e:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8002170:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
}
 8002174:	b00a      	add	sp, #40	; 0x28
 8002176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800217a:	217c      	movs	r1, #124	; 0x7c
 800217c:	4809      	ldr	r0, [pc, #36]	; (80021a4 <HAL_HCD_Init+0xc0>)
 800217e:	f017 fead 	bl	8019edc <assert_failed>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002182:	f896 32b9 	ldrb.w	r3, [r6, #697]	; 0x2b9
 8002186:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1bd      	bne.n	800210a <HAL_HCD_Init+0x26>
    HAL_HCD_MspInit(hhcd);
 800218e:	4630      	mov	r0, r6
    hhcd->Lock = HAL_UNLOCKED;
 8002190:	f886 22b8 	strb.w	r2, [r6, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8002194:	f01b fbc0 	bl	801d918 <HAL_HCD_MspInit>
 8002198:	e7b7      	b.n	800210a <HAL_HCD_Init+0x26>
    return HAL_ERROR;
 800219a:	2001      	movs	r0, #1
}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40040000 	.word	0x40040000
 80021a4:	0801fb98 	.word	0x0801fb98

080021a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80021ae:	468e      	mov	lr, r1
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80021b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
{
 80021b4:	9e05      	ldr	r6, [sp, #20]
  hhcd->hc[ch_num].ep_type  = ep_type;

  if (token == 0U)
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021b6:	2d00      	cmp	r5, #0
  hhcd->hc[ch_num].ep_is_in = direction;
 80021b8:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 80021bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021c0:	bf14      	ite	ne
 80021c2:	2402      	movne	r4, #2
 80021c4:	2403      	moveq	r4, #3
  hhcd->hc[ch_num].ep_is_in = direction;
 80021c6:	f881 203b 	strb.w	r2, [r1, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021ca:	f881 4042 	strb.w	r4, [r1, #66]	; 0x42
 80021ce:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
{
 80021d2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d80a      	bhi.n	80021f0 <HAL_HCD_HC_SubmitRequest+0x48>
 80021da:	e8df f003 	tbb	[pc, r3]
 80021de:	022c      	.short	0x022c
 80021e0:	1f1f      	.short	0x1f1f
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e2:	eb0c 030e 	add.w	r3, ip, lr
 80021e6:	2200      	movs	r2, #0
 80021e8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021f0:	eb0c 030e 	add.w	r3, ip, lr
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021f4:	2128      	movs	r1, #40	; 0x28
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021f6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021fa:	fb01 010e 	mla	r1, r1, lr, r0
  hhcd->hc[ch_num].xfer_len  = length;
 80021fe:	e9c2 6411 	strd	r6, r4, [r2, #68]	; 0x44
  hhcd->hc[ch_num].xfer_count = 0U;
 8002202:	2400      	movs	r4, #0
  hhcd->hc[ch_num].ch_num = ch_num;
 8002204:	f882 e039 	strb.w	lr, [r2, #57]	; 0x39
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002208:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800220a:	f8a2 405c 	strh.w	r4, [r2, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 800220e:	64d4      	str	r4, [r2, #76]	; 0x4c
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002210:	7c02      	ldrb	r2, [r0, #16]
 8002212:	6800      	ldr	r0, [r0, #0]
}
 8002214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002218:	f005 ba9c 	b.w	8007754 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800221c:	eb0c 030e 	add.w	r3, ip, lr
 8002220:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
      if (direction == 0U)
 8002224:	b9da      	cbnz	r2, 800225e <HAL_HCD_HC_SubmitRequest+0xb6>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002226:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
 800222a:	2900      	cmp	r1, #0
 800222c:	d0de      	beq.n	80021ec <HAL_HCD_HC_SubmitRequest+0x44>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002234:	e7dc      	b.n	80021f0 <HAL_HCD_HC_SubmitRequest+0x48>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002236:	2d01      	cmp	r5, #1
 8002238:	d1da      	bne.n	80021f0 <HAL_HCD_HC_SubmitRequest+0x48>
 800223a:	2a00      	cmp	r2, #0
 800223c:	d1d8      	bne.n	80021f0 <HAL_HCD_HC_SubmitRequest+0x48>
          hhcd->hc[ch_num].toggle_out = 1U;
 800223e:	eb0c 030e 	add.w	r3, ip, lr
 8002242:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (length == 0U)
 8002246:	b994      	cbnz	r4, 800226e <HAL_HCD_HC_SubmitRequest+0xc6>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800224e:	eb0c 030e 	add.w	r3, ip, lr
 8002252:	2202      	movs	r2, #2
 8002254:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800225c:	e7c8      	b.n	80021f0 <HAL_HCD_HC_SubmitRequest+0x48>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800225e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002262:	2a00      	cmp	r2, #0
 8002264:	d0c2      	beq.n	80021ec <HAL_HCD_HC_SubmitRequest+0x44>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800226c:	e7c0      	b.n	80021f0 <HAL_HCD_HC_SubmitRequest+0x48>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800226e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8002272:	2a00      	cmp	r2, #0
 8002274:	d0ba      	beq.n	80021ec <HAL_HCD_HC_SubmitRequest+0x44>
 8002276:	e7ea      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0xa6>

08002278 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800227c:	6805      	ldr	r5, [r0, #0]
{
 800227e:	b085      	sub	sp, #20
 8002280:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002282:	4628      	mov	r0, r5
 8002284:	f005 f8c8 	bl	8007418 <USB_GetMode>
 8002288:	2801      	cmp	r0, #1
 800228a:	d002      	beq.n	8002292 <HAL_HCD_IRQHandler+0x1a>
      HCD_RXQLVL_IRQHandler(hhcd);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
  }
}
 800228c:	b005      	add	sp, #20
 800228e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002292:	6820      	ldr	r0, [r4, #0]
 8002294:	f005 f8bc 	bl	8007410 <USB_ReadInterrupts>
 8002298:	2800      	cmp	r0, #0
 800229a:	d0f7      	beq.n	800228c <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800229c:	6820      	ldr	r0, [r4, #0]
 800229e:	f005 f8b7 	bl	8007410 <USB_ReadInterrupts>
 80022a2:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022a6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022a8:	d002      	beq.n	80022b0 <HAL_HCD_IRQHandler+0x38>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022ae:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022b0:	f005 f8ae 	bl	8007410 <USB_ReadInterrupts>
 80022b4:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022b8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022ba:	d002      	beq.n	80022c2 <HAL_HCD_IRQHandler+0x4a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022c0:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022c2:	f005 f8a5 	bl	8007410 <USB_ReadInterrupts>
 80022c6:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022ca:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022cc:	d002      	beq.n	80022d4 <HAL_HCD_IRQHandler+0x5c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022d2:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022d4:	f005 f89c 	bl	8007410 <USB_ReadInterrupts>
 80022d8:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022dc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022de:	d12f      	bne.n	8002340 <HAL_HCD_IRQHandler+0xc8>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022e0:	f005 f896 	bl	8007410 <USB_ReadInterrupts>
 80022e4:	0087      	lsls	r7, r0, #2
 80022e6:	f100 8113 	bmi.w	8002510 <HAL_HCD_IRQHandler+0x298>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	f005 f890 	bl	8007410 <USB_ReadInterrupts>
 80022f0:	01c6      	lsls	r6, r0, #7
 80022f2:	f100 80cf 	bmi.w	8002494 <HAL_HCD_IRQHandler+0x21c>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	f005 f88a 	bl	8007410 <USB_ReadInterrupts>
 80022fc:	0700      	lsls	r0, r0, #28
 80022fe:	f100 80be 	bmi.w	800247e <HAL_HCD_IRQHandler+0x206>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002302:	6820      	ldr	r0, [r4, #0]
 8002304:	f005 f884 	bl	8007410 <USB_ReadInterrupts>
 8002308:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800230c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800230e:	d11a      	bne.n	8002346 <HAL_HCD_IRQHandler+0xce>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002310:	f005 f87e 	bl	8007410 <USB_ReadInterrupts>
 8002314:	06c3      	lsls	r3, r0, #27
 8002316:	d5b9      	bpl.n	800228c <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002318:	6825      	ldr	r5, [r4, #0]
 800231a:	69ab      	ldr	r3, [r5, #24]
 800231c:	f023 0310 	bic.w	r3, r3, #16
 8002320:	61ab      	str	r3, [r5, #24]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002322:	6a2e      	ldr	r6, [r5, #32]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002324:	f3c6 4143 	ubfx	r1, r6, #17, #4
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002328:	f3c6 170a 	ubfx	r7, r6, #4, #11

  switch (pktsts)
  {
    case GRXSTS_PKTSTS_IN:
      /* Read the data into the host buffer. */
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800232c:	2902      	cmp	r1, #2
 800232e:	d102      	bne.n	8002336 <HAL_HCD_IRQHandler+0xbe>
 8002330:	2f00      	cmp	r7, #0
 8002332:	f040 81c6 	bne.w	80026c2 <HAL_HCD_IRQHandler+0x44a>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002336:	69ab      	ldr	r3, [r5, #24]
 8002338:	f043 0310 	orr.w	r3, r3, #16
 800233c:	61ab      	str	r3, [r5, #24]
 800233e:	e7a5      	b.n	800228c <HAL_HCD_IRQHandler+0x14>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002340:	2302      	movs	r3, #2
 8002342:	6143      	str	r3, [r0, #20]
 8002344:	e7cc      	b.n	80022e0 <HAL_HCD_IRQHandler+0x68>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002346:	f005 fac1 	bl	80078cc <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800234a:	f8d4 e008 	ldr.w	lr, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800234e:	4680      	mov	r8, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002350:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002352:	f1be 0f00 	cmp.w	lr, #0
 8002356:	f000 8099 	beq.w	800248c <HAL_HCD_IRQHandler+0x214>
 800235a:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 800235e:	2600      	movs	r6, #0
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002360:	f04f 0b28 	mov.w	fp, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002364:	f04f 0a02 	mov.w	sl, #2
 8002368:	e04a      	b.n	8002400 <HAL_HCD_IRQHandler+0x188>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800236a:	f500 69a0 	add.w	r9, r0, #1280	; 0x500
 800236e:	014a      	lsls	r2, r1, #5
 8002370:	eb09 1741 	add.w	r7, r9, r1, lsl #5
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	075b      	lsls	r3, r3, #29
 8002378:	d55d      	bpl.n	8002436 <HAL_HCD_IRQHandler+0x1be>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800237a:	2304      	movs	r3, #4
 800237c:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	60fb      	str	r3, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	0598      	lsls	r0, r3, #22
 800238a:	f100 80fd 	bmi.w	8002588 <HAL_HCD_IRQHandler+0x310>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	07db      	lsls	r3, r3, #31
 8002392:	f140 80cf 	bpl.w	8002534 <HAL_HCD_IRQHandler+0x2bc>
    if (hhcd->Init.dma_enable != 0U)
 8002396:	6923      	ldr	r3, [r4, #16]
 8002398:	b153      	cbz	r3, 80023b0 <HAL_HCD_IRQHandler+0x138>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800239a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800239e:	693b      	ldr	r3, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80023a0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023a4:	f3c3 0c12 	ubfx	ip, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80023a8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80023aa:	eba3 030c 	sub.w	r3, r3, ip
 80023ae:	64c3      	str	r3, [r0, #76]	; 0x4c
 80023b0:	008b      	lsls	r3, r1, #2
    hhcd->hc[ch_num].state = HC_XFRC;
 80023b2:	f04f 0c01 	mov.w	ip, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023b6:	f04f 0e00 	mov.w	lr, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 80023ba:	1858      	adds	r0, r3, r1
 80023bc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023c0:	f8c0 e058 	str.w	lr, [r0, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 80023c4:	f880 c05d 	strb.w	ip, [r0, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023c8:	f8c7 c008 	str.w	ip, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023cc:	f890 e03f 	ldrb.w	lr, [r0, #63]	; 0x3f
 80023d0:	f01e 0ffd 	tst.w	lr, #253	; 0xfd
 80023d4:	f000 8164 	beq.w	80026a0 <HAL_HCD_IRQHandler+0x428>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023d8:	f1be 0f03 	cmp.w	lr, #3
 80023dc:	f000 823c 	beq.w	8002858 <HAL_HCD_IRQHandler+0x5e0>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80023e0:	440b      	add	r3, r1
 80023e2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80023e6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80023ea:	f082 0201 	eor.w	r2, r2, #1
 80023ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023f2:	f8d4 e008 	ldr.w	lr, [r4, #8]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023f6:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023f8:	3601      	adds	r6, #1
 80023fa:	3520      	adds	r5, #32
 80023fc:	4576      	cmp	r6, lr
 80023fe:	d245      	bcs.n	800248c <HAL_HCD_IRQHandler+0x214>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002400:	f006 030f 	and.w	r3, r6, #15
 8002404:	fa28 f303 	lsr.w	r3, r8, r3
 8002408:	07d9      	lsls	r1, r3, #31
 800240a:	d5f5      	bpl.n	80023f8 <HAL_HCD_IRQHandler+0x180>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	b2f1      	uxtb	r1, r6
 8002410:	041a      	lsls	r2, r3, #16
 8002412:	d4aa      	bmi.n	800236a <HAL_HCD_IRQHandler+0xf2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002414:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8002418:	ea4f 1c41 	mov.w	ip, r1, lsl #5
 800241c:	eb02 1741 	add.w	r7, r2, r1, lsl #5
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f013 0904 	ands.w	r9, r3, #4
 8002426:	d00d      	beq.n	8002444 <HAL_HCD_IRQHandler+0x1cc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002428:	2304      	movs	r3, #4
 800242a:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e7e0      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	069b      	lsls	r3, r3, #26
 800243a:	f140 80b3 	bpl.w	80025a4 <HAL_HCD_IRQHandler+0x32c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800243e:	2320      	movs	r3, #32
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	e7a0      	b.n	8002386 <HAL_HCD_IRQHandler+0x10e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f013 0320 	ands.w	r3, r3, #32
 800244a:	f000 80ca 	beq.w	80025e2 <HAL_HCD_IRQHandler+0x36a>
    if (hhcd->hc[ch_num].do_ping == 1U)
 800244e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002452:	2220      	movs	r2, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002454:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002458:	60ba      	str	r2, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800245a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800245e:	2a01      	cmp	r2, #1
 8002460:	d1ca      	bne.n	80023f8 <HAL_HCD_IRQHandler+0x180>
      hhcd->hc[ch_num].do_ping = 0U;
 8002462:	f883 903d 	strb.w	r9, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002466:	f883 a05c 	strb.w	sl, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002472:	f005 fa2f 	bl	80078d4 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002476:	f8d4 e008 	ldr.w	lr, [r4, #8]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800247a:	6820      	ldr	r0, [r4, #0]
 800247c:	e7bc      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
      HAL_HCD_SOF_Callback(hhcd);
 800247e:	4620      	mov	r0, r4
 8002480:	f01b fb2e 	bl	801dae0 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002484:	6820      	ldr	r0, [r4, #0]
 8002486:	2308      	movs	r3, #8
 8002488:	6143      	str	r3, [r0, #20]
 800248a:	e73b      	b.n	8002304 <HAL_HCD_IRQHandler+0x8c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800248c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002490:	6143      	str	r3, [r0, #20]
 8002492:	e73d      	b.n	8002310 <HAL_HCD_IRQHandler+0x98>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002494:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002496:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 800249a:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 800249c:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80024a0:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80024a2:	9b03      	ldr	r3, [sp, #12]
 80024a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80024a8:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80024aa:	9b02      	ldr	r3, [sp, #8]
 80024ac:	0798      	lsls	r0, r3, #30
 80024ae:	d507      	bpl.n	80024c0 <HAL_HCD_IRQHandler+0x248>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80024b0:	9b02      	ldr	r3, [sp, #8]
 80024b2:	07d9      	lsls	r1, r3, #31
 80024b4:	f100 8163 	bmi.w	800277e <HAL_HCD_IRQHandler+0x506>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80024b8:	9b03      	ldr	r3, [sp, #12]
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80024c0:	9b02      	ldr	r3, [sp, #8]
 80024c2:	071a      	lsls	r2, r3, #28
 80024c4:	d518      	bpl.n	80024f8 <HAL_HCD_IRQHandler+0x280>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80024c6:	9b03      	ldr	r3, [sp, #12]
 80024c8:	f043 0308 	orr.w	r3, r3, #8
 80024cc:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80024ce:	9b02      	ldr	r3, [sp, #8]
 80024d0:	075b      	lsls	r3, r3, #29
 80024d2:	f140 8158 	bpl.w	8002786 <HAL_HCD_IRQHandler+0x50e>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80024d6:	69a1      	ldr	r1, [r4, #24]
 80024d8:	2902      	cmp	r1, #2
 80024da:	f000 8196 	beq.w	800280a <HAL_HCD_IRQHandler+0x592>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024de:	68e3      	ldr	r3, [r4, #12]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d103      	bne.n	80024ec <HAL_HCD_IRQHandler+0x274>
        {
          USBx_HOST->HFIR = 60000U;
 80024e4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80024e8:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024ec:	4620      	mov	r0, r4
 80024ee:	f01b fb05 	bl	801dafc <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80024f2:	4620      	mov	r0, r4
 80024f4:	f01b faf8 	bl	801dae8 <HAL_HCD_Connect_Callback>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024f8:	6820      	ldr	r0, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80024fa:	9b02      	ldr	r3, [sp, #8]
 80024fc:	069f      	lsls	r7, r3, #26
 80024fe:	d503      	bpl.n	8002508 <HAL_HCD_IRQHandler+0x290>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002500:	9b03      	ldr	r3, [sp, #12]
 8002502:	f043 0320 	orr.w	r3, r3, #32
 8002506:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002508:	9b03      	ldr	r3, [sp, #12]
 800250a:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
}
 800250e:	e6f3      	b.n	80022f8 <HAL_HCD_IRQHandler+0x80>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002510:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8002514:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002516:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800251a:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 800251e:	f01b fae7 	bl	801daf0 <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002522:	2101      	movs	r1, #1
 8002524:	6820      	ldr	r0, [r4, #0]
 8002526:	f005 f807 	bl	8007538 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002530:	6143      	str	r3, [r0, #20]
 8002532:	e6db      	b.n	80022ec <HAL_HCD_IRQHandler+0x74>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	0798      	lsls	r0, r3, #30
 8002538:	f140 808e 	bpl.w	8002658 <HAL_HCD_IRQHandler+0x3e0>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800253c:	68fb      	ldr	r3, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800253e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002542:	f023 0302 	bic.w	r3, r3, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002546:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800254a:	60fb      	str	r3, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800254c:	008b      	lsls	r3, r1, #2
 800254e:	f89c 005d 	ldrb.w	r0, [ip, #93]	; 0x5d
 8002552:	2801      	cmp	r0, #1
 8002554:	f000 80b2 	beq.w	80026bc <HAL_HCD_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002558:	2805      	cmp	r0, #5
 800255a:	f000 80af 	beq.w	80026bc <HAL_HCD_IRQHandler+0x444>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800255e:	2806      	cmp	r0, #6
 8002560:	f000 819f 	beq.w	80028a2 <HAL_HCD_IRQHandler+0x62a>
 8002564:	2808      	cmp	r0, #8
 8002566:	f000 819c 	beq.w	80028a2 <HAL_HCD_IRQHandler+0x62a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800256a:	2803      	cmp	r0, #3
 800256c:	f000 81d8 	beq.w	8002920 <HAL_HCD_IRQHandler+0x6a8>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002570:	f89c 005c 	ldrb.w	r0, [ip, #92]	; 0x5c
 8002574:	4602      	mov	r2, r0
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002576:	f8c7 a008 	str.w	sl, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800257a:	4620      	mov	r0, r4
 800257c:	f01b fabc 	bl	801daf8 <HAL_HCD_HC_NotifyURBChange_Callback>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002580:	f8d4 e008 	ldr.w	lr, [r4, #8]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002584:	6820      	ldr	r0, [r4, #0]
 8002586:	e737      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002588:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002592:	f005 f99f 	bl	80078d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002596:	f44f 7300 	mov.w	r3, #512	; 0x200
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800259a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800259c:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800259e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80025a2:	e729      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	071b      	lsls	r3, r3, #28
 80025a8:	f100 80bb 	bmi.w	8002722 <HAL_HCD_IRQHandler+0x4aa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	055b      	lsls	r3, r3, #21
 80025b0:	f57f aee9 	bpl.w	8002386 <HAL_HCD_IRQHandler+0x10e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	9201      	str	r2, [sp, #4]
 80025b8:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025bc:	9100      	str	r1, [sp, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025be:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c0:	f005 f988 	bl	80078d4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025c4:	9900      	ldr	r1, [sp, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025c6:	2010      	movs	r0, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025c8:	9a01      	ldr	r2, [sp, #4]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025ca:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025ce:	60b8      	str	r0, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025d0:	2008      	movs	r0, #8
 80025d2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80025d6:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	e6d1      	b.n	8002386 <HAL_HCD_IRQHandler+0x10e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025e2:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80025e6:	f019 0f40 	tst.w	r9, #64	; 0x40
 80025ea:	f040 80b1 	bne.w	8002750 <HAL_HCD_IRQHandler+0x4d8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 80025f4:	f040 812b 	bne.w	800284e <HAL_HCD_IRQHandler+0x5d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025f8:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80025fc:	f019 0f01 	tst.w	r9, #1
 8002600:	f040 813b 	bne.w	800287a <HAL_HCD_IRQHandler+0x602>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f013 0308 	ands.w	r3, r3, #8
 800260a:	f040 8164 	bne.w	80028d6 <HAL_HCD_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800260e:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8002612:	f019 0f10 	tst.w	r9, #16
 8002616:	f000 80c5 	beq.w	80027a4 <HAL_HCD_IRQHandler+0x52c>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800261e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8002624:	2303      	movs	r3, #3
 8002626:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800262a:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 800262e:	b93b      	cbnz	r3, 8002640 <HAL_HCD_IRQHandler+0x3c8>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002630:	fb0b 4301 	mla	r3, fp, r1, r4
 8002634:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002638:	b912      	cbnz	r2, 8002640 <HAL_HCD_IRQHandler+0x3c8>
        hhcd->hc[ch_num].do_ping = 1U;
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002648:	f005 f944 	bl	80078d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800264c:	2310      	movs	r3, #16
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800264e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002650:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002652:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8002656:	e6cf      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800265e:	f040 80df 	bne.w	8002820 <HAL_HCD_IRQHandler+0x5a8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	06d2      	lsls	r2, r2, #27
 8002666:	f140 80cc 	bpl.w	8002802 <HAL_HCD_IRQHandler+0x58a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800266a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800266e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002672:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8002676:	2a03      	cmp	r2, #3
 8002678:	f000 8147 	beq.w	800290a <HAL_HCD_IRQHandler+0x692>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800267c:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8002680:	d1e4      	bne.n	800264c <HAL_HCD_IRQHandler+0x3d4>
      if (hhcd->Init.dma_enable == 0U)
 8002682:	6923      	ldr	r3, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002684:	6582      	str	r2, [r0, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1e0      	bne.n	800264c <HAL_HCD_IRQHandler+0x3d4>
        hhcd->hc[ch_num].state = HC_NAK;
 800268a:	fb0b 4301 	mla	r3, fp, r1, r4
 800268e:	2203      	movs	r2, #3
 8002690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002694:	68fb      	ldr	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002696:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269e:	e7d3      	b.n	8002648 <HAL_HCD_IRQHandler+0x3d0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a0:	68fa      	ldr	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a4:	f042 0202 	orr.w	r2, r2, #2
 80026a8:	9301      	str	r3, [sp, #4]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026aa:	9100      	str	r1, [sp, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ac:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ae:	f005 f911 	bl	80078d4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026b2:	2210      	movs	r2, #16
 80026b4:	e9dd 1300 	ldrd	r1, r3, [sp]
 80026b8:	60ba      	str	r2, [r7, #8]
 80026ba:	e691      	b.n	80023e0 <HAL_HCD_IRQHandler+0x168>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80026bc:	f88c 005c 	strb.w	r0, [ip, #92]	; 0x5c
 80026c0:	e758      	b.n	8002574 <HAL_HCD_IRQHandler+0x2fc>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80026c2:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80026c6:	eb06 0886 	add.w	r8, r6, r6, lsl #2
 80026ca:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 80026ce:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 80026d2:	2900      	cmp	r1, #0
 80026d4:	f43f ae2f 	beq.w	8002336 <HAL_HCD_IRQHandler+0xbe>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80026d8:	4628      	mov	r0, r5
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80026da:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80026de:	463a      	mov	r2, r7
 80026e0:	f004 fe86 	bl	80073f0 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026e4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80026e8:	eb05 1246 	add.w	r2, r5, r6, lsl #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026ec:	443b      	add	r3, r7
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80026ee:	6911      	ldr	r1, [r2, #16]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80026f0:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026f4:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80026f8:	0173      	lsls	r3, r6, #5
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80026fa:	443a      	add	r2, r7
 80026fc:	f8c8 204c 	str.w	r2, [r8, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002700:	4aba      	ldr	r2, [pc, #744]	; (80029ec <HAL_HCD_IRQHandler+0x774>)
 8002702:	400a      	ands	r2, r1
 8002704:	b15a      	cbz	r2, 800271e <HAL_HCD_IRQHandler+0x4a6>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002706:	58ea      	ldr	r2, [r5, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002708:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800270c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002710:	50ea      	str	r2, [r5, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002712:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
 8002716:	f083 0301 	eor.w	r3, r3, #1
 800271a:	f888 3050 	strb.w	r3, [r8, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800271e:	6825      	ldr	r5, [r4, #0]
 8002720:	e609      	b.n	8002336 <HAL_HCD_IRQHandler+0xbe>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002722:	68fb      	ldr	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002724:	f04f 0c05 	mov.w	ip, #5
 8002728:	9201      	str	r2, [sp, #4]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272a:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272e:	9100      	str	r1, [sp, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002730:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002732:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002736:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800273a:	f883 c05d 	strb.w	ip, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800273e:	2310      	movs	r3, #16
 8002740:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002742:	2308      	movs	r3, #8
 8002744:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002746:	f005 f8c5 	bl	80078d4 <USB_HC_Halt>
 800274a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800274e:	e61a      	b.n	8002386 <HAL_HCD_IRQHandler+0x10e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002750:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002754:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NYET;
 800275a:	2304      	movs	r3, #4
 800275c:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8002760:	2301      	movs	r3, #1
 8002762:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276e:	f005 f8b1 	bl	80078d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002772:	2340      	movs	r3, #64	; 0x40
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002774:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002776:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002778:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800277c:	e63c      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
      HAL_HCD_Connect_Callback(hhcd);
 800277e:	4620      	mov	r0, r4
 8002780:	f01b f9b2 	bl	801dae8 <HAL_HCD_Connect_Callback>
 8002784:	e698      	b.n	80024b8 <HAL_HCD_IRQHandler+0x240>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002786:	4620      	mov	r0, r4
 8002788:	f01b f9bc 	bl	801db04 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800278c:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002790:	6820      	ldr	r0, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002792:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002796:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800279a:	6983      	ldr	r3, [r0, #24]
 800279c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027a0:	6183      	str	r3, [r0, #24]
 80027a2:	e6aa      	b.n	80024fa <HAL_HCD_IRQHandler+0x282>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	f100 80c8 	bmi.w	800293c <HAL_HCD_IRQHandler+0x6c4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	055b      	lsls	r3, r3, #21
 80027b0:	f100 80d7 	bmi.w	8002962 <HAL_HCD_IRQHandler+0x6ea>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	079b      	lsls	r3, r3, #30
 80027b8:	f57f ae1e 	bpl.w	80023f8 <HAL_HCD_IRQHandler+0x180>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027bc:	68fb      	ldr	r3, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027be:	fb0b 4001 	mla	r0, fp, r1, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027c2:	f023 0302 	bic.w	r3, r3, #2
 80027c6:	60fb      	str	r3, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027c8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	f000 80e1 	beq.w	8002994 <HAL_HCD_IRQHandler+0x71c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	f000 80db 	beq.w	800298e <HAL_HCD_IRQHandler+0x716>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80027d8:	2b04      	cmp	r3, #4
 80027da:	f000 80d8 	beq.w	800298e <HAL_HCD_IRQHandler+0x716>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027de:	2b05      	cmp	r3, #5
 80027e0:	f000 80fc 	beq.w	80029dc <HAL_HCD_IRQHandler+0x764>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027e4:	2b06      	cmp	r3, #6
 80027e6:	f000 80e4 	beq.w	80029b2 <HAL_HCD_IRQHandler+0x73a>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	f000 80e1 	beq.w	80029b2 <HAL_HCD_IRQHandler+0x73a>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027f0:	fb0b 4301 	mla	r3, fp, r1, r4
 80027f4:	4620      	mov	r0, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027f6:	f8c7 a008 	str.w	sl, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027fa:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80027fe:	f01b f97b 	bl	801daf8 <HAL_HCD_HC_NotifyURBChange_Callback>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002802:	f8d4 e008 	ldr.w	lr, [r4, #8]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002806:	6820      	ldr	r0, [r4, #0]
 8002808:	e5f6      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800280a:	9b02      	ldr	r3, [sp, #8]
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800280c:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800280e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002812:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002816:	bf18      	it	ne
 8002818:	2101      	movne	r1, #1
 800281a:	f004 fe8d 	bl	8007538 <USB_InitFSLSPClkSel>
 800281e:	e665      	b.n	80024ec <HAL_HCD_IRQHandler+0x274>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002820:	68fb      	ldr	r3, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002822:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002826:	f043 0302 	orr.w	r3, r3, #2
    hhcd->hc[ch_num].ErrCnt++;
 800282a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800282e:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002830:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002832:	3301      	adds	r3, #1
 8002834:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002836:	2306      	movs	r3, #6
 8002838:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	f005 f849 	bl	80078d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002842:	2380      	movs	r3, #128	; 0x80
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002844:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002846:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002848:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800284c:	e5d4      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e69c      	b.n	8002592 <HAL_HCD_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002858:	f852 7009 	ldr.w	r7, [r2, r9]
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002862:	9100      	str	r1, [sp, #0]
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002864:	f842 7009 	str.w	r7, [r2, r9]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002868:	4662      	mov	r2, ip
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800286a:	f880 c05c 	strb.w	ip, [r0, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800286e:	4620      	mov	r0, r4
 8002870:	f01b f942 	bl	801daf8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002874:	e9dd 1300 	ldrd	r1, r3, [sp]
 8002878:	e5b2      	b.n	80023e0 <HAL_HCD_IRQHandler+0x168>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287a:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800287c:	eb01 0981 	add.w	r9, r1, r1, lsl #2
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002880:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002884:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 8002888:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288c:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288e:	f005 f821 	bl	80078d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002892:	2301      	movs	r3, #1
 8002894:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002896:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800289a:	f8d4 e008 	ldr.w	lr, [r4, #8]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	e5aa      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
      hhcd->hc[ch_num].ErrCnt++;
 80028a2:	eb03 0c01 	add.w	ip, r3, r1
 80028a6:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80028aa:	f8dc 0058 	ldr.w	r0, [ip, #88]	; 0x58
 80028ae:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028b0:	2803      	cmp	r0, #3
 80028b2:	d825      	bhi.n	8002900 <HAL_HCD_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt++;
 80028b4:	f8cc 0058 	str.w	r0, [ip, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028b8:	2002      	movs	r0, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80028c0:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028c4:	f852 3009 	ldr.w	r3, [r2, r9]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028d0:	f842 3009 	str.w	r3, [r2, r9]
 80028d4:	e64e      	b.n	8002574 <HAL_HCD_IRQHandler+0x2fc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028d6:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d8:	9100      	str	r1, [sp, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028da:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e4:	f004 fff6 	bl	80078d4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80028e8:	9900      	ldr	r1, [sp, #0]
 80028ea:	2205      	movs	r2, #5
 80028ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80028f0:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80028f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028f8:	f8d4 e008 	ldr.w	lr, [r4, #8]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028fc:	6820      	ldr	r0, [r4, #0]
 80028fe:	e57b      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002900:	2000      	movs	r0, #0
 8002902:	f8cc 0058 	str.w	r0, [ip, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002906:	2004      	movs	r0, #4
 8002908:	e7d7      	b.n	80028ba <HAL_HCD_IRQHandler+0x642>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800290a:	68fa      	ldr	r2, [r7, #12]
      hhcd->hc[ch_num].ErrCnt = 0U;
 800290c:	fb0b 4001 	mla	r0, fp, r1, r4
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002910:	f042 0202 	orr.w	r2, r2, #2
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002914:	6583      	str	r3, [r0, #88]	; 0x58
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002916:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002918:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291a:	f004 ffdb 	bl	80078d4 <USB_HC_Halt>
 800291e:	e695      	b.n	800264c <HAL_HCD_IRQHandler+0x3d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002920:	fb0b 4301 	mla	r3, fp, r1, r4
 8002924:	2002      	movs	r0, #2
 8002926:	f883 a05c 	strb.w	sl, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800292a:	f852 3009 	ldr.w	r3, [r2, r9]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800292e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002936:	f842 3009 	str.w	r3, [r2, r9]
 800293a:	e61b      	b.n	8002574 <HAL_HCD_IRQHandler+0x2fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800293c:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293e:	9100      	str	r1, [sp, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002946:	f004 ffc5 	bl	80078d4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800294a:	9900      	ldr	r1, [sp, #0]
 800294c:	2306      	movs	r3, #6
 800294e:	fb0b 4101 	mla	r1, fp, r1, r4
 8002952:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002956:	2380      	movs	r3, #128	; 0x80
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002958:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800295a:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800295c:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8002960:	e54a      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002962:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002964:	9100      	str	r1, [sp, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296c:	f004 ffb2 	bl	80078d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002970:	2310      	movs	r3, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002972:	9900      	ldr	r1, [sp, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002974:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002976:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800297a:	fb0b 4101 	mla	r1, fp, r1, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800297e:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002980:	2308      	movs	r3, #8
 8002982:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002986:	f8d4 e008 	ldr.w	lr, [r4, #8]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800298a:	6820      	ldr	r0, [r4, #0]
 800298c:	e534      	b.n	80023f8 <HAL_HCD_IRQHandler+0x180>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800298e:	f880 a05c 	strb.w	sl, [r0, #92]	; 0x5c
 8002992:	e72d      	b.n	80027f0 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002994:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002998:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800299c:	3b02      	subs	r3, #2
 800299e:	2b01      	cmp	r3, #1
 80029a0:	f63f af26 	bhi.w	80027f0 <HAL_HCD_IRQHandler+0x578>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80029a4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80029a8:	f083 0301 	eor.w	r3, r3, #1
 80029ac:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 80029b0:	e71e      	b.n	80027f0 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].ErrCnt++;
 80029b2:	fb0b 4001 	mla	r0, fp, r1, r4
 80029b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80029b8:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d811      	bhi.n	80029e2 <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt++;
 80029be:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029c0:	2302      	movs	r3, #2
 80029c2:	fb0b 4001 	mla	r0, fp, r1, r4
 80029c6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029ca:	f852 300c 	ldr.w	r3, [r2, ip]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029d6:	f842 300c 	str.w	r3, [r2, ip]
 80029da:	e709      	b.n	80027f0 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029dc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 80029e0:	e706      	b.n	80027f0 <HAL_HCD_IRQHandler+0x578>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029e6:	2304      	movs	r3, #4
 80029e8:	e7eb      	b.n	80029c2 <HAL_HCD_IRQHandler+0x74a>
 80029ea:	bf00      	nop
 80029ec:	1ff80000 	.word	0x1ff80000

080029f0 <HAL_HCD_Start>:
{
 80029f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80029f2:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d00f      	beq.n	8002a1a <HAL_HCD_Start+0x2a>
 80029fa:	4604      	mov	r4, r0
 80029fc:	2501      	movs	r5, #1
  __HAL_HCD_ENABLE(hhcd);
 80029fe:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 8002a00:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002a04:	f004 fccc 	bl	80073a0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a08:	4629      	mov	r1, r5
 8002a0a:	6820      	ldr	r0, [r4, #0]
 8002a0c:	f004 fdd6 	bl	80075bc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002a10:	2300      	movs	r3, #0
  return HAL_OK;
 8002a12:	4618      	mov	r0, r3
  __HAL_UNLOCK(hhcd);
 8002a14:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
}
 8002a18:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8002a1a:	2002      	movs	r0, #2
}
 8002a1c:	bd38      	pop	{r3, r4, r5, pc}
 8002a1e:	bf00      	nop

08002a20 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002a20:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d00c      	beq.n	8002a42 <HAL_HCD_Stop+0x22>
 8002a28:	2301      	movs	r3, #1
{
 8002a2a:	b510      	push	{r4, lr}
 8002a2c:	4604      	mov	r4, r0
  (void)USB_StopHost(hhcd->Instance);
 8002a2e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 8002a30:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002a34:	f004 ffa8 	bl	8007988 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a38:	2300      	movs	r3, #0
  return HAL_OK;
 8002a3a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hhcd);
 8002a3c:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
}
 8002a40:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002a42:	2002      	movs	r0, #2
}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop

08002a48 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8002a48:	6800      	ldr	r0, [r0, #0]
 8002a4a:	f004 bd97 	b.w	800757c <USB_ResetPort>
 8002a4e:	bf00      	nop

08002a50 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002a50:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002a54:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8002a58:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002a60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002a64:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8002a68:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8002a6a:	4770      	bx	lr

08002a6c <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a6c:	6800      	ldr	r0, [r0, #0]
 8002a6e:	f004 bdd9 	b.w	8007624 <USB_GetCurrentFrame>
 8002a72:	bf00      	nop

08002a74 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a74:	6800      	ldr	r0, [r0, #0]
 8002a76:	f004 bdc9 	b.w	800760c <USB_GetHostSpeed>
 8002a7a:	bf00      	nop

08002a7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	4605      	mov	r5, r0
 8002a80:	460e      	mov	r6, r1
 8002a82:	4617      	mov	r7, r2
 8002a84:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a86:	682c      	ldr	r4, [r5, #0]
 8002a88:	d12c      	bne.n	8002ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8002a8a:	69a3      	ldr	r3, [r4, #24]
 8002a8c:	0799      	lsls	r1, r3, #30
 8002a8e:	d427      	bmi.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a90:	69a3      	ldr	r3, [r4, #24]
 8002a92:	06da      	lsls	r2, r3, #27
 8002a94:	d5f9      	bpl.n	8002a8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a96:	69a3      	ldr	r3, [r4, #24]
 8002a98:	069a      	lsls	r2, r3, #26
 8002a9a:	d5fc      	bpl.n	8002a96 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a9c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa2:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aa4:	69a3      	ldr	r3, [r4, #24]
 8002aa6:	079f      	lsls	r7, r3, #30
 8002aa8:	d501      	bpl.n	8002aae <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aae:	69a3      	ldr	r3, [r4, #24]
 8002ab0:	07de      	lsls	r6, r3, #31
 8002ab2:	d403      	bmi.n	8002abc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ab4:	69a3      	ldr	r3, [r4, #24]
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	61a3      	str	r3, [r4, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002abc:	6863      	ldr	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abe:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8002ac0:	481b      	ldr	r0, [pc, #108]	; (8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8002ac4:	4003      	ands	r3, r0
      return HAL_ERROR;
 8002ac6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002ac8:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aca:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ada:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8002ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002ae0:	2000      	movs	r0, #0
}
 8002ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae4:	69a3      	ldr	r3, [r4, #24]
 8002ae6:	079b      	lsls	r3, r3, #30
 8002ae8:	d4fa      	bmi.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aea:	69a3      	ldr	r3, [r4, #24]
 8002aec:	06d9      	lsls	r1, r3, #27
 8002aee:	d41b      	bmi.n	8002b28 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7fe fabe 	bl	8001070 <HAL_GetTick>
 8002af4:	1bc0      	subs	r0, r0, r7
 8002af6:	42b0      	cmp	r0, r6
 8002af8:	d801      	bhi.n	8002afe <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8002afa:	2e00      	cmp	r6, #0
 8002afc:	d1c2      	bne.n	8002a84 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002afe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b02:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8002b04:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b06:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002b08:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b12:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8002b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b18:	f7fe faaa 	bl	8001070 <HAL_GetTick>
 8002b1c:	1bc0      	subs	r0, r0, r7
 8002b1e:	4286      	cmp	r6, r0
 8002b20:	d3ed      	bcc.n	8002afe <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8002b22:	2e00      	cmp	r6, #0
 8002b24:	d0eb      	beq.n	8002afe <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b26:	682c      	ldr	r4, [r5, #0]
 8002b28:	69a3      	ldr	r3, [r4, #24]
 8002b2a:	069b      	lsls	r3, r3, #26
 8002b2c:	d5f4      	bpl.n	8002b18 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 8002b2e:	e7b5      	b.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 8002b30:	fe00e800 	.word	0xfe00e800

08002b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	4605      	mov	r5, r0
 8002b38:	460e      	mov	r6, r1
 8002b3a:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b3c:	682c      	ldr	r4, [r5, #0]
 8002b3e:	69a3      	ldr	r3, [r4, #24]
 8002b40:	069b      	lsls	r3, r3, #26
 8002b42:	d449      	bmi.n	8002bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b44:	69a3      	ldr	r3, [r4, #24]
 8002b46:	06da      	lsls	r2, r3, #27
 8002b48:	d526      	bpl.n	8002b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 8002b4a:	1c73      	adds	r3, r6, #1
 8002b4c:	d138      	bne.n	8002bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b4e:	69a3      	ldr	r3, [r4, #24]
 8002b50:	069e      	lsls	r6, r3, #26
 8002b52:	d5fc      	bpl.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b54:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b56:	2210      	movs	r2, #16
 8002b58:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5a:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b5c:	69a3      	ldr	r3, [r4, #24]
 8002b5e:	0799      	lsls	r1, r3, #30
 8002b60:	d501      	bpl.n	8002b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b66:	69a3      	ldr	r3, [r4, #24]
 8002b68:	07da      	lsls	r2, r3, #31
 8002b6a:	d403      	bmi.n	8002b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b6c:	69a3      	ldr	r3, [r4, #24]
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	61a3      	str	r3, [r4, #24]
    I2C_RESET_CR2(hi2c);
 8002b74:	6863      	ldr	r3, [r4, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b76:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8002b78:	4818      	ldr	r0, [pc, #96]	; (8002bdc <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8002b7c:	4003      	ands	r3, r0
      return HAL_ERROR;
 8002b7e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002b80:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b82:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002b84:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b92:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8002b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b98:	f7fe fa6a 	bl	8001070 <HAL_GetTick>
 8002b9c:	1bc0      	subs	r0, r0, r7
 8002b9e:	42b0      	cmp	r0, r6
 8002ba0:	d801      	bhi.n	8002ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8002ba2:	2e00      	cmp	r6, #0
 8002ba4:	d1ca      	bne.n	8002b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ba8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002baa:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8002bac:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bae:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002bb0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bba:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8002bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bc0:	69a3      	ldr	r3, [r4, #24]
 8002bc2:	0698      	lsls	r0, r3, #26
 8002bc4:	d4c6      	bmi.n	8002b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7fe fa53 	bl	8001070 <HAL_GetTick>
 8002bca:	1bc0      	subs	r0, r0, r7
 8002bcc:	4286      	cmp	r6, r0
 8002bce:	d3ea      	bcc.n	8002ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8002bd0:	2e00      	cmp	r6, #0
 8002bd2:	d0e8      	beq.n	8002ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd4:	682c      	ldr	r4, [r5, #0]
 8002bd6:	e7b8      	b.n	8002b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002bd8:	2000      	movs	r0, #0
}
 8002bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bdc:	fe00e800 	.word	0xfe00e800

08002be0 <I2C_RequestMemoryWrite>:
{
 8002be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be4:	4698      	mov	r8, r3
 8002be6:	468a      	mov	sl, r1
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002be8:	6803      	ldr	r3, [r0, #0]
{
 8002bea:	4617      	mov	r7, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002bec:	4934      	ldr	r1, [pc, #208]	; (8002cc0 <I2C_RequestMemoryWrite+0xe0>)
{
 8002bee:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002bf0:	4a34      	ldr	r2, [pc, #208]	; (8002cc4 <I2C_RequestMemoryWrite+0xe4>)
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bf2:	fa5f f988 	uxtb.w	r9, r8
{
 8002bf6:	9d08      	ldr	r5, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	bf18      	it	ne
 8002bfc:	428b      	cmpne	r3, r1
 8002bfe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
{
 8002c02:	9e09      	ldr	r6, [sp, #36]	; 0x24
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002c04:	bf14      	ite	ne
 8002c06:	2201      	movne	r2, #1
 8002c08:	2200      	moveq	r2, #0
 8002c0a:	428b      	cmp	r3, r1
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2200      	moveq	r2, #0
 8002c10:	f002 0201 	andne.w	r2, r2, #1
 8002c14:	b112      	cbz	r2, 8002c1c <I2C_RequestMemoryWrite+0x3c>
 8002c16:	4a2c      	ldr	r2, [pc, #176]	; (8002cc8 <I2C_RequestMemoryWrite+0xe8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d13a      	bne.n	8002c92 <I2C_RequestMemoryWrite+0xb2>
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8002c22:	4a2a      	ldr	r2, [pc, #168]	; (8002ccc <I2C_RequestMemoryWrite+0xec>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c24:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c26:	4011      	ands	r1, r2
 8002c28:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <I2C_RequestMemoryWrite+0xf0>)
 8002c2a:	ea41 010a 	orr.w	r1, r1, sl
 8002c2e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8002c32:	430a      	orrs	r2, r1
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c34:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c36:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c38:	4632      	mov	r2, r6
 8002c3a:	f7ff ff1f 	bl	8002a7c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c3e:	4681      	mov	r9, r0
 8002c40:	bb10      	cbnz	r0, 8002c88 <I2C_RequestMemoryWrite+0xa8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c42:	f1b8 0f01 	cmp.w	r8, #1
 8002c46:	d115      	bne.n	8002c74 <I2C_RequestMemoryWrite+0x94>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c48:	b2ff      	uxtb	r7, r7
 8002c4a:	6822      	ldr	r2, [r4, #0]
 8002c4c:	6297      	str	r7, [r2, #40]	; 0x28
 8002c4e:	1c68      	adds	r0, r5, #1
 8002c50:	d105      	bne.n	8002c5e <I2C_RequestMemoryWrite+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c52:	6993      	ldr	r3, [r2, #24]
 8002c54:	0619      	lsls	r1, r3, #24
 8002c56:	d5fc      	bpl.n	8002c52 <I2C_RequestMemoryWrite+0x72>
}
 8002c58:	4648      	mov	r0, r9
 8002c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c5e:	6993      	ldr	r3, [r2, #24]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	d4f9      	bmi.n	8002c58 <I2C_RequestMemoryWrite+0x78>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c64:	f7fe fa04 	bl	8001070 <HAL_GetTick>
 8002c68:	1b80      	subs	r0, r0, r6
 8002c6a:	4285      	cmp	r5, r0
 8002c6c:	d318      	bcc.n	8002ca0 <I2C_RequestMemoryWrite+0xc0>
 8002c6e:	b1bd      	cbz	r5, 8002ca0 <I2C_RequestMemoryWrite+0xc0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c70:	6822      	ldr	r2, [r4, #0]
 8002c72:	e7ec      	b.n	8002c4e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c74:	0a3a      	lsrs	r2, r7, #8
 8002c76:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7e:	4632      	mov	r2, r6
 8002c80:	f7ff fefc 	bl	8002a7c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d0df      	beq.n	8002c48 <I2C_RequestMemoryWrite+0x68>
    return HAL_ERROR;
 8002c88:	f04f 0901 	mov.w	r9, #1
}
 8002c8c:	4648      	mov	r0, r9
 8002c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002c92:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8002c96:	480f      	ldr	r0, [pc, #60]	; (8002cd4 <I2C_RequestMemoryWrite+0xf4>)
 8002c98:	f017 f920 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	e7bd      	b.n	8002c1c <I2C_RequestMemoryWrite+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	2200      	movs	r2, #0
    return HAL_ERROR;
 8002ca6:	f04f 0901 	mov.w	r9, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002caa:	430b      	orrs	r3, r1
}
 8002cac:	4648      	mov	r0, r9
        __HAL_UNLOCK(hi2c);
 8002cae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc0:	40005800 	.word	0x40005800
 8002cc4:	40005400 	.word	0x40005400
 8002cc8:	40006000 	.word	0x40006000
 8002ccc:	fc009800 	.word	0xfc009800
 8002cd0:	81002000 	.word	0x81002000
 8002cd4:	0801fbd0 	.word	0x0801fbd0

08002cd8 <I2C_RequestMemoryRead>:
{
 8002cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cdc:	4698      	mov	r8, r3
 8002cde:	468a      	mov	sl, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002ce0:	6803      	ldr	r3, [r0, #0]
{
 8002ce2:	4617      	mov	r7, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002ce4:	4934      	ldr	r1, [pc, #208]	; (8002db8 <I2C_RequestMemoryRead+0xe0>)
{
 8002ce6:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002ce8:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <I2C_RequestMemoryRead+0xe4>)
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cea:	fa5f f988 	uxtb.w	r9, r8
{
 8002cee:	9d08      	ldr	r5, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	bf18      	it	ne
 8002cf4:	428b      	cmpne	r3, r1
 8002cf6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
{
 8002cfa:	9e09      	ldr	r6, [sp, #36]	; 0x24
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002cfc:	bf14      	ite	ne
 8002cfe:	2201      	movne	r2, #1
 8002d00:	2200      	moveq	r2, #0
 8002d02:	428b      	cmp	r3, r1
 8002d04:	bf0c      	ite	eq
 8002d06:	2200      	moveq	r2, #0
 8002d08:	f002 0201 	andne.w	r2, r2, #1
 8002d0c:	b112      	cbz	r2, 8002d14 <I2C_RequestMemoryRead+0x3c>
 8002d0e:	4a2c      	ldr	r2, [pc, #176]	; (8002dc0 <I2C_RequestMemoryRead+0xe8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d13a      	bne.n	8002d8a <I2C_RequestMemoryRead+0xb2>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8002d1a:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <I2C_RequestMemoryRead+0xec>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1c:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d1e:	4011      	ands	r1, r2
 8002d20:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <I2C_RequestMemoryRead+0xf0>)
 8002d22:	ea41 010a 	orr.w	r1, r1, sl
 8002d26:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8002d2a:	430a      	orrs	r2, r1
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2c:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d2e:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d30:	4632      	mov	r2, r6
 8002d32:	f7ff fea3 	bl	8002a7c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d36:	4681      	mov	r9, r0
 8002d38:	bb10      	cbnz	r0, 8002d80 <I2C_RequestMemoryRead+0xa8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d3a:	f1b8 0f01 	cmp.w	r8, #1
 8002d3e:	d115      	bne.n	8002d6c <I2C_RequestMemoryRead+0x94>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d40:	b2ff      	uxtb	r7, r7
 8002d42:	6822      	ldr	r2, [r4, #0]
 8002d44:	6297      	str	r7, [r2, #40]	; 0x28
 8002d46:	1c68      	adds	r0, r5, #1
 8002d48:	d105      	bne.n	8002d56 <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4a:	6993      	ldr	r3, [r2, #24]
 8002d4c:	0659      	lsls	r1, r3, #25
 8002d4e:	d5fc      	bpl.n	8002d4a <I2C_RequestMemoryRead+0x72>
}
 8002d50:	4648      	mov	r0, r9
 8002d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d56:	6993      	ldr	r3, [r2, #24]
 8002d58:	065b      	lsls	r3, r3, #25
 8002d5a:	d4f9      	bmi.n	8002d50 <I2C_RequestMemoryRead+0x78>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5c:	f7fe f988 	bl	8001070 <HAL_GetTick>
 8002d60:	1b80      	subs	r0, r0, r6
 8002d62:	4285      	cmp	r5, r0
 8002d64:	d318      	bcc.n	8002d98 <I2C_RequestMemoryRead+0xc0>
 8002d66:	b1bd      	cbz	r5, 8002d98 <I2C_RequestMemoryRead+0xc0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d68:	6822      	ldr	r2, [r4, #0]
 8002d6a:	e7ec      	b.n	8002d46 <I2C_RequestMemoryRead+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d6c:	0a3a      	lsrs	r2, r7, #8
 8002d6e:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d70:	4629      	mov	r1, r5
 8002d72:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d76:	4632      	mov	r2, r6
 8002d78:	f7ff fe80 	bl	8002a7c <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d0df      	beq.n	8002d40 <I2C_RequestMemoryRead+0x68>
    return HAL_ERROR;
 8002d80:	f04f 0901 	mov.w	r9, #1
}
 8002d84:	4648      	mov	r0, r9
 8002d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002d8a:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8002d8e:	480f      	ldr	r0, [pc, #60]	; (8002dcc <I2C_RequestMemoryRead+0xf4>)
 8002d90:	f017 f8a4 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	e7bd      	b.n	8002d14 <I2C_RequestMemoryRead+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	2200      	movs	r2, #0
    return HAL_ERROR;
 8002d9e:	f04f 0901 	mov.w	r9, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	430b      	orrs	r3, r1
}
 8002da4:	4648      	mov	r0, r9
        __HAL_UNLOCK(hi2c);
 8002da6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002daa:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db8:	40005800 	.word	0x40005800
 8002dbc:	40005400 	.word	0x40005400
 8002dc0:	40006000 	.word	0x40006000
 8002dc4:	fc009800 	.word	0xfc009800
 8002dc8:	80002000 	.word	0x80002000
 8002dcc:	0801fbd0 	.word	0x0801fbd0

08002dd0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	f000 80c1 	beq.w	8002f58 <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002dd6:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <HAL_I2C_Init+0x18c>)
 8002dd8:	6802      	ldr	r2, [r0, #0]
 8002dda:	4961      	ldr	r1, [pc, #388]	; (8002f60 <HAL_I2C_Init+0x190>)
{
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002de0:	4860      	ldr	r0, [pc, #384]	; (8002f64 <HAL_I2C_Init+0x194>)
 8002de2:	429a      	cmp	r2, r3
 8002de4:	bf18      	it	ne
 8002de6:	4282      	cmpne	r2, r0
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	428a      	cmp	r2, r1
 8002df0:	bf0c      	ite	eq
 8002df2:	2300      	moveq	r3, #0
 8002df4:	f003 0301 	andne.w	r3, r3, #1
 8002df8:	b11b      	cbz	r3, 8002e02 <HAL_I2C_Init+0x32>
 8002dfa:	4b5b      	ldr	r3, [pc, #364]	; (8002f68 <HAL_I2C_Init+0x198>)
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 80a5 	bne.w	8002f4c <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002e02:	68a3      	ldr	r3, [r4, #8]
 8002e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e08:	f080 809a 	bcs.w	8002f40 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002e0c:	68e3      	ldr	r3, [r4, #12]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d855      	bhi.n	8002ec0 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002e14:	6923      	ldr	r3, [r4, #16]
 8002e16:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8002e1a:	d15a      	bne.n	8002ed2 <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002e1c:	6963      	ldr	r3, [r4, #20]
 8002e1e:	2bff      	cmp	r3, #255	; 0xff
 8002e20:	d85f      	bhi.n	8002ee2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002e22:	69a3      	ldr	r3, [r4, #24]
 8002e24:	2b07      	cmp	r3, #7
 8002e26:	d864      	bhi.n	8002ef2 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002e28:	69e3      	ldr	r3, [r4, #28]
 8002e2a:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8002e2e:	d169      	bne.n	8002f04 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002e30:	6a23      	ldr	r3, [r4, #32]
 8002e32:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8002e36:	d16e      	bne.n	8002f16 <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e38:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002e3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d073      	beq.n	8002f2c <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 8002e44:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e46:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e48:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002e4e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e54:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002e56:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e5a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8002e5c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e5e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e66:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e68:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6a:	d065      	beq.n	8002f38 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e6c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e70:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e72:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e74:	d102      	bne.n	8002e7c <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e7a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e7c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e82:	493a      	ldr	r1, [pc, #232]	; (8002f6c <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e84:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e86:	4301      	orrs	r1, r0
 8002e88:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002e90:	60d9      	str	r1, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e92:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
 8002e96:	4302      	orrs	r2, r0
 8002e98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e9c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ea0:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea2:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea4:	4301      	orrs	r1, r0
  return HAL_OK;
 8002ea6:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea8:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002eaa:	6819      	ldr	r1, [r3, #0]
 8002eac:	f041 0101 	orr.w	r1, r1, #1
 8002eb0:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eb8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002ebe:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002ec0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002ec4:	482a      	ldr	r0, [pc, #168]	; (8002f70 <HAL_I2C_Init+0x1a0>)
 8002ec6:	f017 f809 	bl	8019edc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002eca:	6923      	ldr	r3, [r4, #16]
 8002ecc:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8002ed0:	d0a4      	beq.n	8002e1c <HAL_I2C_Init+0x4c>
 8002ed2:	f240 11e1 	movw	r1, #481	; 0x1e1
 8002ed6:	4826      	ldr	r0, [pc, #152]	; (8002f70 <HAL_I2C_Init+0x1a0>)
 8002ed8:	f017 f800 	bl	8019edc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002edc:	6963      	ldr	r3, [r4, #20]
 8002ede:	2bff      	cmp	r3, #255	; 0xff
 8002ee0:	d99f      	bls.n	8002e22 <HAL_I2C_Init+0x52>
 8002ee2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002ee6:	4822      	ldr	r0, [pc, #136]	; (8002f70 <HAL_I2C_Init+0x1a0>)
 8002ee8:	f016 fff8 	bl	8019edc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002eec:	69a3      	ldr	r3, [r4, #24]
 8002eee:	2b07      	cmp	r3, #7
 8002ef0:	d99a      	bls.n	8002e28 <HAL_I2C_Init+0x58>
 8002ef2:	f240 11e3 	movw	r1, #483	; 0x1e3
 8002ef6:	481e      	ldr	r0, [pc, #120]	; (8002f70 <HAL_I2C_Init+0x1a0>)
 8002ef8:	f016 fff0 	bl	8019edc <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002efc:	69e3      	ldr	r3, [r4, #28]
 8002efe:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8002f02:	d095      	beq.n	8002e30 <HAL_I2C_Init+0x60>
 8002f04:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8002f08:	4819      	ldr	r0, [pc, #100]	; (8002f70 <HAL_I2C_Init+0x1a0>)
 8002f0a:	f016 ffe7 	bl	8019edc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002f0e:	6a23      	ldr	r3, [r4, #32]
 8002f10:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8002f14:	d090      	beq.n	8002e38 <HAL_I2C_Init+0x68>
 8002f16:	f240 11e5 	movw	r1, #485	; 0x1e5
 8002f1a:	4815      	ldr	r0, [pc, #84]	; (8002f70 <HAL_I2C_Init+0x1a0>)
 8002f1c:	f016 ffde 	bl	8019edc <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f20:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002f24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d18b      	bne.n	8002e44 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 8002f2c:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002f2e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002f32:	f016 fab1 	bl	8019498 <HAL_I2C_MspInit>
 8002f36:	e785      	b.n	8002e44 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f3e:	e79d      	b.n	8002e7c <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002f40:	f240 11df 	movw	r1, #479	; 0x1df
 8002f44:	480a      	ldr	r0, [pc, #40]	; (8002f70 <HAL_I2C_Init+0x1a0>)
 8002f46:	f016 ffc9 	bl	8019edc <assert_failed>
 8002f4a:	e75f      	b.n	8002e0c <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002f4c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002f50:	4807      	ldr	r0, [pc, #28]	; (8002f70 <HAL_I2C_Init+0x1a0>)
 8002f52:	f016 ffc3 	bl	8019edc <assert_failed>
 8002f56:	e754      	b.n	8002e02 <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
}
 8002f5a:	4770      	bx	lr
 8002f5c:	40005400 	.word	0x40005400
 8002f60:	40005c00 	.word	0x40005c00
 8002f64:	40005800 	.word	0x40005800
 8002f68:	40006000 	.word	0x40006000
 8002f6c:	02008000 	.word	0x02008000
 8002f70:	0801fbd0 	.word	0x0801fbd0

08002f74 <HAL_I2C_Mem_Write>:
{
 8002f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f78:	461e      	mov	r6, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002f7a:	3b01      	subs	r3, #1
{
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002f80:	2b01      	cmp	r3, #1
{
 8002f82:	460f      	mov	r7, r1
 8002f84:	4691      	mov	r9, r2
 8002f86:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002f8a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002f8e:	d904      	bls.n	8002f9a <HAL_I2C_Mem_Write+0x26>
 8002f90:	f640 01ed 	movw	r1, #2285	; 0x8ed
 8002f94:	48a6      	ldr	r0, [pc, #664]	; (8003230 <HAL_I2C_Mem_Write+0x2bc>)
 8002f96:	f016 ffa1 	bl	8019edc <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	f040 80b5 	bne.w	800310e <HAL_I2C_Mem_Write+0x19a>
    if ((pData == NULL) || (Size == 0U))
 8002fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80aa 	beq.w	8003100 <HAL_I2C_Mem_Write+0x18c>
 8002fac:	f1ba 0f00 	cmp.w	sl, #0
 8002fb0:	f000 80a6 	beq.w	8003100 <HAL_I2C_Mem_Write+0x18c>
    __HAL_LOCK(hi2c);
 8002fb4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f000 80a8 	beq.w	800310e <HAL_I2C_Mem_Write+0x19a>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002fc4:	f7fe f854 	bl	8001070 <HAL_GetTick>
 8002fc8:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002fca:	e005      	b.n	8002fd8 <HAL_I2C_Mem_Write+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fcc:	f7fe f850 	bl	8001070 <HAL_GetTick>
 8002fd0:	1b40      	subs	r0, r0, r5
 8002fd2:	2819      	cmp	r0, #25
 8002fd4:	f200 80b0 	bhi.w	8003138 <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 8002fe0:	d1f4      	bne.n	8002fcc <HAL_I2C_Mem_Write+0x58>
    hi2c->pBuffPtr  = pData;
 8002fe2:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe4:	4633      	mov	r3, r6
    hi2c->XferISR   = NULL;
 8002fe6:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fea:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 8002fec:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fee:	2121      	movs	r1, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	e9cd 8500 	strd	r8, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ff6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ffa:	2140      	movs	r1, #64	; 0x40
 8002ffc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003000:	4639      	mov	r1, r7
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003002:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8003006:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800300a:	f7ff fde9 	bl	8002be0 <I2C_RequestMemoryWrite>
 800300e:	2800      	cmp	r0, #0
 8003010:	f040 8081 	bne.w	8003116 <HAL_I2C_Mem_Write+0x1a2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2bff      	cmp	r3, #255	; 0xff
 800301a:	f240 80bc 	bls.w	8003196 <HAL_I2C_Mem_Write+0x222>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800301e:	23ff      	movs	r3, #255	; 0xff
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003020:	4a84      	ldr	r2, [pc, #528]	; (8003234 <HAL_I2C_Mem_Write+0x2c0>)
 8003022:	4985      	ldr	r1, [pc, #532]	; (8003238 <HAL_I2C_Mem_Write+0x2c4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003024:	8523      	strh	r3, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	4293      	cmp	r3, r2
 800302a:	bf18      	it	ne
 800302c:	428b      	cmpne	r3, r1
 800302e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003032:	bf14      	ite	ne
 8003034:	2201      	movne	r2, #1
 8003036:	2200      	moveq	r2, #0
 8003038:	428b      	cmp	r3, r1
 800303a:	bf0c      	ite	eq
 800303c:	2200      	moveq	r2, #0
 800303e:	f002 0201 	andne.w	r2, r2, #1
 8003042:	b142      	cbz	r2, 8003056 <HAL_I2C_Mem_Write+0xe2>
 8003044:	4a7d      	ldr	r2, [pc, #500]	; (800323c <HAL_I2C_Mem_Write+0x2c8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d005      	beq.n	8003056 <HAL_I2C_Mem_Write+0xe2>
 800304a:	f641 01c1 	movw	r1, #6337	; 0x18c1
 800304e:	4878      	ldr	r0, [pc, #480]	; (8003230 <HAL_I2C_Mem_Write+0x2bc>)
 8003050:	f016 ff44 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800305c:	4978      	ldr	r1, [pc, #480]	; (8003240 <HAL_I2C_Mem_Write+0x2cc>)
 800305e:	400a      	ands	r2, r1
 8003060:	4978      	ldr	r1, [pc, #480]	; (8003244 <HAL_I2C_Mem_Write+0x2d0>)
 8003062:	433a      	orrs	r2, r7
 8003064:	4311      	orrs	r1, r2
 8003066:	6059      	str	r1, [r3, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003068:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8003234 <HAL_I2C_Mem_Write+0x2c0>
 800306c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8003238 <HAL_I2C_Mem_Write+0x2c4>
 8003070:	4e75      	ldr	r6, [pc, #468]	; (8003248 <HAL_I2C_Mem_Write+0x2d4>)
 8003072:	e004      	b.n	800307e <HAL_I2C_Mem_Write+0x10a>
    while (hi2c->XferCount > 0U);
 8003074:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80c4 	beq.w	8003206 <HAL_I2C_Mem_Write+0x292>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307e:	462a      	mov	r2, r5
 8003080:	4641      	mov	r1, r8
 8003082:	4620      	mov	r0, r4
 8003084:	f7ff fcfa 	bl	8002a7c <I2C_WaitOnTXISFlagUntilTimeout>
 8003088:	2800      	cmp	r0, #0
 800308a:	f040 8082 	bne.w	8003192 <HAL_I2C_Mem_Write+0x21e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800308e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003090:	6821      	ldr	r1, [r4, #0]
 8003092:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 8003096:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003098:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
 800309a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800309c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800309e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030a0:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 80030a2:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 80030a4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80030a6:	b292      	uxth	r2, r2
 80030a8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80030ac:	b292      	uxth	r2, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1e0      	bne.n	8003074 <HAL_I2C_Mem_Write+0x100>
 80030b2:	2a00      	cmp	r2, #0
 80030b4:	d0de      	beq.n	8003074 <HAL_I2C_Mem_Write+0x100>
 80030b6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80030ba:	d130      	bne.n	800311e <HAL_I2C_Mem_Write+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030bc:	698b      	ldr	r3, [r1, #24]
 80030be:	061a      	lsls	r2, r3, #24
 80030c0:	d5fc      	bpl.n	80030bc <HAL_I2C_Mem_Write+0x148>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2bff      	cmp	r3, #255	; 0xff
 80030c8:	d945      	bls.n	8003156 <HAL_I2C_Mem_Write+0x1e2>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80030ca:	4551      	cmp	r1, sl
 80030cc:	bf18      	it	ne
 80030ce:	4549      	cmpne	r1, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d0:	f04f 02ff 	mov.w	r2, #255	; 0xff
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030da:	8522      	strh	r2, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80030dc:	42b1      	cmp	r1, r6
 80030de:	bf0c      	ite	eq
 80030e0:	2300      	moveq	r3, #0
 80030e2:	f003 0301 	andne.w	r3, r3, #1
 80030e6:	b11b      	cbz	r3, 80030f0 <HAL_I2C_Mem_Write+0x17c>
 80030e8:	4b54      	ldr	r3, [pc, #336]	; (800323c <HAL_I2C_Mem_Write+0x2c8>)
 80030ea:	4299      	cmp	r1, r3
 80030ec:	f040 8084 	bne.w	80031f8 <HAL_I2C_Mem_Write+0x284>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80030f0:	684b      	ldr	r3, [r1, #4]
 80030f2:	4a53      	ldr	r2, [pc, #332]	; (8003240 <HAL_I2C_Mem_Write+0x2cc>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	4a53      	ldr	r2, [pc, #332]	; (8003244 <HAL_I2C_Mem_Write+0x2d0>)
 80030f8:	433b      	orrs	r3, r7
 80030fa:	431a      	orrs	r2, r3
 80030fc:	604a      	str	r2, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80030fe:	e7b9      	b.n	8003074 <HAL_I2C_Mem_Write+0x100>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003100:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8003104:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003106:	6463      	str	r3, [r4, #68]	; 0x44
}
 8003108:	b003      	add	sp, #12
 800310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800310e:	2002      	movs	r0, #2
}
 8003110:	b003      	add	sp, #12
 8003112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 8003116:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8003118:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 800311c:	e7f4      	b.n	8003108 <HAL_I2C_Mem_Write+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800311e:	698b      	ldr	r3, [r1, #24]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	d4ce      	bmi.n	80030c2 <HAL_I2C_Mem_Write+0x14e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7fd ffa4 	bl	8001070 <HAL_GetTick>
 8003128:	1b40      	subs	r0, r0, r5
 800312a:	4580      	cmp	r8, r0
 800312c:	d304      	bcc.n	8003138 <HAL_I2C_Mem_Write+0x1c4>
 800312e:	f1b8 0f00 	cmp.w	r8, #0
 8003132:	d001      	beq.n	8003138 <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003134:	6821      	ldr	r1, [r4, #0]
 8003136:	e7be      	b.n	80030b6 <HAL_I2C_Mem_Write+0x142>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800313a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800313c:	2200      	movs	r2, #0
          return HAL_ERROR;
 800313e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003140:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8003142:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003148:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8003150:	b003      	add	sp, #12
 8003152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          hi2c->XferSize = hi2c->XferCount;
 8003156:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003158:	4551      	cmp	r1, sl
 800315a:	bf18      	it	ne
 800315c:	4549      	cmpne	r1, r9
          hi2c->XferSize = hi2c->XferCount;
 800315e:	b29b      	uxth	r3, r3
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003160:	fa5f fb83 	uxtb.w	fp, r3
          hi2c->XferSize = hi2c->XferCount;
 8003164:	8523      	strh	r3, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	42b1      	cmp	r1, r6
 800316e:	bf0c      	ite	eq
 8003170:	2300      	moveq	r3, #0
 8003172:	f003 0301 	andne.w	r3, r3, #1
 8003176:	b113      	cbz	r3, 800317e <HAL_I2C_Mem_Write+0x20a>
 8003178:	4b30      	ldr	r3, [pc, #192]	; (800323c <HAL_I2C_Mem_Write+0x2c8>)
 800317a:	4299      	cmp	r1, r3
 800317c:	d135      	bne.n	80031ea <HAL_I2C_Mem_Write+0x276>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800317e:	684b      	ldr	r3, [r1, #4]
 8003180:	4a2f      	ldr	r2, [pc, #188]	; (8003240 <HAL_I2C_Mem_Write+0x2cc>)
 8003182:	4013      	ands	r3, r2
 8003184:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 8003188:	433b      	orrs	r3, r7
 800318a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800318e:	604b      	str	r3, [r1, #4]
}
 8003190:	e770      	b.n	8003074 <HAL_I2C_Mem_Write+0x100>
        return HAL_ERROR;
 8003192:	2001      	movs	r0, #1
 8003194:	e7b8      	b.n	8003108 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8003196:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003198:	6822      	ldr	r2, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 800319a:	b29b      	uxth	r3, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800319c:	4926      	ldr	r1, [pc, #152]	; (8003238 <HAL_I2C_Mem_Write+0x2c4>)
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800319e:	b2de      	uxtb	r6, r3
      hi2c->XferSize = hi2c->XferCount;
 80031a0:	8523      	strh	r3, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_I2C_Mem_Write+0x2c0>)
 80031a4:	429a      	cmp	r2, r3
 80031a6:	bf18      	it	ne
 80031a8:	428a      	cmpne	r2, r1
 80031aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	428a      	cmp	r2, r1
 80031b6:	bf0c      	ite	eq
 80031b8:	2300      	moveq	r3, #0
 80031ba:	f003 0301 	andne.w	r3, r3, #1
 80031be:	b143      	cbz	r3, 80031d2 <HAL_I2C_Mem_Write+0x25e>
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_I2C_Mem_Write+0x2c8>)
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d005      	beq.n	80031d2 <HAL_I2C_Mem_Write+0x25e>
 80031c6:	f641 01c1 	movw	r1, #6337	; 0x18c1
 80031ca:	4819      	ldr	r0, [pc, #100]	; (8003230 <HAL_I2C_Mem_Write+0x2bc>)
 80031cc:	f016 fe86 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031d0:	6822      	ldr	r2, [r4, #0]
 80031d2:	6853      	ldr	r3, [r2, #4]
 80031d4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80031d8:	4919      	ldr	r1, [pc, #100]	; (8003240 <HAL_I2C_Mem_Write+0x2cc>)
 80031da:	400b      	ands	r3, r1
 80031dc:	433b      	orrs	r3, r7
 80031de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80031e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031e6:	6053      	str	r3, [r2, #4]
}
 80031e8:	e73e      	b.n	8003068 <HAL_I2C_Mem_Write+0xf4>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80031ea:	f641 01c1 	movw	r1, #6337	; 0x18c1
 80031ee:	4810      	ldr	r0, [pc, #64]	; (8003230 <HAL_I2C_Mem_Write+0x2bc>)
 80031f0:	f016 fe74 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031f4:	6821      	ldr	r1, [r4, #0]
 80031f6:	e7c2      	b.n	800317e <HAL_I2C_Mem_Write+0x20a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80031f8:	f641 01c1 	movw	r1, #6337	; 0x18c1
 80031fc:	480c      	ldr	r0, [pc, #48]	; (8003230 <HAL_I2C_Mem_Write+0x2bc>)
 80031fe:	f016 fe6d 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003202:	6821      	ldr	r1, [r4, #0]
 8003204:	e774      	b.n	80030f0 <HAL_I2C_Mem_Write+0x17c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003206:	462a      	mov	r2, r5
 8003208:	4641      	mov	r1, r8
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff fc92 	bl	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003210:	2800      	cmp	r0, #0
 8003212:	d1be      	bne.n	8003192 <HAL_I2C_Mem_Write+0x21e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8003218:	4d0c      	ldr	r5, [pc, #48]	; (800324c <HAL_I2C_Mem_Write+0x2d8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	402a      	ands	r2, r5
 8003220:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003222:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003226:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800322a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800322e:	e76b      	b.n	8003108 <HAL_I2C_Mem_Write+0x194>
 8003230:	0801fbd0 	.word	0x0801fbd0
 8003234:	40005400 	.word	0x40005400
 8003238:	40005800 	.word	0x40005800
 800323c:	40006000 	.word	0x40006000
 8003240:	fc009c00 	.word	0xfc009c00
 8003244:	01ff0000 	.word	0x01ff0000
 8003248:	40005c00 	.word	0x40005c00
 800324c:	fe00e800 	.word	0xfe00e800

08003250 <HAL_I2C_Mem_Read>:
{
 8003250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003254:	4698      	mov	r8, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003256:	3b01      	subs	r3, #1
{
 8003258:	b083      	sub	sp, #12
 800325a:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800325c:	2b01      	cmp	r3, #1
{
 800325e:	460f      	mov	r7, r1
 8003260:	4691      	mov	r9, r2
 8003262:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003266:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003268:	d904      	bls.n	8003274 <HAL_I2C_Mem_Read+0x24>
 800326a:	f640 1174 	movw	r1, #2420	; 0x974
 800326e:	489e      	ldr	r0, [pc, #632]	; (80034e8 <HAL_I2C_Mem_Read+0x298>)
 8003270:	f016 fe34 	bl	8019edc <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003274:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003278:	2b20      	cmp	r3, #32
 800327a:	f040 80a7 	bne.w	80033cc <HAL_I2C_Mem_Read+0x17c>
    if ((pData == NULL) || (Size == 0U))
 800327e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 809c 	beq.w	80033be <HAL_I2C_Mem_Read+0x16e>
 8003286:	f1ba 0f00 	cmp.w	sl, #0
 800328a:	f000 8098 	beq.w	80033be <HAL_I2C_Mem_Read+0x16e>
    __HAL_LOCK(hi2c);
 800328e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003292:	2b01      	cmp	r3, #1
 8003294:	f000 809a 	beq.w	80033cc <HAL_I2C_Mem_Read+0x17c>
 8003298:	2301      	movs	r3, #1
 800329a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800329e:	f7fd fee7 	bl	8001070 <HAL_GetTick>
 80032a2:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80032a4:	e004      	b.n	80032b0 <HAL_I2C_Mem_Read+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fd fee3 	bl	8001070 <HAL_GetTick>
 80032aa:	1b80      	subs	r0, r0, r6
 80032ac:	2819      	cmp	r0, #25
 80032ae:	d877      	bhi.n	80033a0 <HAL_I2C_Mem_Read+0x150>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 80032b8:	d1f5      	bne.n	80032a6 <HAL_I2C_Mem_Read+0x56>
    hi2c->pBuffPtr  = pData;
 80032ba:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032bc:	4643      	mov	r3, r8
    hi2c->XferISR   = NULL;
 80032be:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032c2:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 80032c4:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032c6:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032c8:	4620      	mov	r0, r4
 80032ca:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032ce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032d2:	2140      	movs	r1, #64	; 0x40
 80032d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d8:	4639      	mov	r1, r7
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032da:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80032de:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e2:	f7ff fcf9 	bl	8002cd8 <I2C_RequestMemoryRead>
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d174      	bne.n	80033d4 <HAL_I2C_Mem_Read+0x184>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2bff      	cmp	r3, #255	; 0xff
 80032f0:	f240 80c0 	bls.w	8003474 <HAL_I2C_Mem_Read+0x224>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f4:	23ff      	movs	r3, #255	; 0xff
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	497c      	ldr	r1, [pc, #496]	; (80034ec <HAL_I2C_Mem_Read+0x29c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032fa:	8523      	strh	r3, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80032fc:	4b7c      	ldr	r3, [pc, #496]	; (80034f0 <HAL_I2C_Mem_Read+0x2a0>)
 80032fe:	429a      	cmp	r2, r3
 8003300:	bf18      	it	ne
 8003302:	428a      	cmpne	r2, r1
 8003304:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	428a      	cmp	r2, r1
 8003310:	bf0c      	ite	eq
 8003312:	2300      	moveq	r3, #0
 8003314:	f003 0301 	andne.w	r3, r3, #1
 8003318:	b143      	cbz	r3, 800332c <HAL_I2C_Mem_Read+0xdc>
 800331a:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_I2C_Mem_Read+0x2a4>)
 800331c:	429a      	cmp	r2, r3
 800331e:	d005      	beq.n	800332c <HAL_I2C_Mem_Read+0xdc>
 8003320:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8003324:	4870      	ldr	r0, [pc, #448]	; (80034e8 <HAL_I2C_Mem_Read+0x298>)
 8003326:	f016 fdd9 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	6853      	ldr	r3, [r2, #4]
 800332e:	4972      	ldr	r1, [pc, #456]	; (80034f8 <HAL_I2C_Mem_Read+0x2a8>)
 8003330:	400b      	ands	r3, r1
 8003332:	f3c7 0109 	ubfx	r1, r7, #0, #10
 8003336:	430b      	orrs	r3, r1
 8003338:	460f      	mov	r7, r1
 800333a:	4970      	ldr	r1, [pc, #448]	; (80034fc <HAL_I2C_Mem_Read+0x2ac>)
 800333c:	4319      	orrs	r1, r3
 800333e:	6051      	str	r1, [r2, #4]
 8003340:	1c68      	adds	r0, r5, #1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003342:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80034f0 <HAL_I2C_Mem_Read+0x2a0>
 8003346:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80034ec <HAL_I2C_Mem_Read+0x29c>
 800334a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800350c <HAL_I2C_Mem_Read+0x2bc>
 800334e:	d11d      	bne.n	800338c <HAL_I2C_Mem_Read+0x13c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003350:	6993      	ldr	r3, [r2, #24]
 8003352:	0759      	lsls	r1, r3, #29
 8003354:	d5fc      	bpl.n	8003350 <HAL_I2C_Mem_Read+0x100>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003356:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800335a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800335c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800335e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003360:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003362:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8003364:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8003366:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003368:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800336a:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800336c:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800336e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003370:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003372:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8003374:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003376:	b10a      	cbz	r2, 800337c <HAL_I2C_Mem_Read+0x12c>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d039      	beq.n	80033f0 <HAL_I2C_Mem_Read+0x1a0>
    while (hi2c->XferCount > 0U);
 800337c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80c5 	beq.w	8003510 <HAL_I2C_Mem_Read+0x2c0>
 8003386:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003388:	6822      	ldr	r2, [r4, #0]
 800338a:	d0e1      	beq.n	8003350 <HAL_I2C_Mem_Read+0x100>
 800338c:	6993      	ldr	r3, [r2, #24]
 800338e:	075b      	lsls	r3, r3, #29
 8003390:	d4e1      	bmi.n	8003356 <HAL_I2C_Mem_Read+0x106>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fd fe6d 	bl	8001070 <HAL_GetTick>
 8003396:	1b80      	subs	r0, r0, r6
 8003398:	4285      	cmp	r5, r0
 800339a:	d301      	bcc.n	80033a0 <HAL_I2C_Mem_Read+0x150>
 800339c:	2d00      	cmp	r5, #0
 800339e:	d1f2      	bne.n	8003386 <HAL_I2C_Mem_Read+0x136>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	2200      	movs	r2, #0
          return HAL_ERROR;
 80033a6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80033aa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ae:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80033b8:	b003      	add	sp, #12
 80033ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033be:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 80033c2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033c4:	6463      	str	r3, [r4, #68]	; 0x44
}
 80033c6:	b003      	add	sp, #12
 80033c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 80033cc:	2002      	movs	r0, #2
}
 80033ce:	b003      	add	sp, #12
 80033d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 80033d6:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 80033da:	e7f4      	b.n	80033c6 <HAL_I2C_Mem_Read+0x176>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033dc:	6993      	ldr	r3, [r2, #24]
 80033de:	061b      	lsls	r3, r3, #24
 80033e0:	d40c      	bmi.n	80033fc <HAL_I2C_Mem_Read+0x1ac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fd fe45 	bl	8001070 <HAL_GetTick>
 80033e6:	1b80      	subs	r0, r0, r6
 80033e8:	4285      	cmp	r5, r0
 80033ea:	d3d9      	bcc.n	80033a0 <HAL_I2C_Mem_Read+0x150>
 80033ec:	2d00      	cmp	r5, #0
 80033ee:	d0d7      	beq.n	80033a0 <HAL_I2C_Mem_Read+0x150>
 80033f0:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f2:	6822      	ldr	r2, [r4, #0]
 80033f4:	d1f2      	bne.n	80033dc <HAL_I2C_Mem_Read+0x18c>
 80033f6:	6993      	ldr	r3, [r2, #24]
 80033f8:	0619      	lsls	r1, r3, #24
 80033fa:	d5fc      	bpl.n	80033f6 <HAL_I2C_Mem_Read+0x1a6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2bff      	cmp	r3, #255	; 0xff
 8003402:	d919      	bls.n	8003438 <HAL_I2C_Mem_Read+0x1e8>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003404:	4552      	cmp	r2, sl
 8003406:	bf18      	it	ne
 8003408:	454a      	cmpne	r2, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800340a:	f04f 01ff 	mov.w	r1, #255	; 0xff
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003414:	8521      	strh	r1, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003416:	4542      	cmp	r2, r8
 8003418:	bf0c      	ite	eq
 800341a:	2300      	moveq	r3, #0
 800341c:	f003 0301 	andne.w	r3, r3, #1
 8003420:	b113      	cbz	r3, 8003428 <HAL_I2C_Mem_Read+0x1d8>
 8003422:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <HAL_I2C_Mem_Read+0x2a4>)
 8003424:	429a      	cmp	r2, r3
 8003426:	d158      	bne.n	80034da <HAL_I2C_Mem_Read+0x28a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003428:	6853      	ldr	r3, [r2, #4]
 800342a:	4935      	ldr	r1, [pc, #212]	; (8003500 <HAL_I2C_Mem_Read+0x2b0>)
 800342c:	400b      	ands	r3, r1
 800342e:	4935      	ldr	r1, [pc, #212]	; (8003504 <HAL_I2C_Mem_Read+0x2b4>)
 8003430:	433b      	orrs	r3, r7
 8003432:	4319      	orrs	r1, r3
 8003434:	6051      	str	r1, [r2, #4]
}
 8003436:	e7a1      	b.n	800337c <HAL_I2C_Mem_Read+0x12c>
          hi2c->XferSize = hi2c->XferCount;
 8003438:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800343a:	4552      	cmp	r2, sl
 800343c:	bf18      	it	ne
 800343e:	454a      	cmpne	r2, r9
          hi2c->XferSize = hi2c->XferCount;
 8003440:	b29b      	uxth	r3, r3
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003442:	fa5f fb83 	uxtb.w	fp, r3
          hi2c->XferSize = hi2c->XferCount;
 8003446:	8523      	strh	r3, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	4542      	cmp	r2, r8
 8003450:	bf0c      	ite	eq
 8003452:	2300      	moveq	r3, #0
 8003454:	f003 0301 	andne.w	r3, r3, #1
 8003458:	b113      	cbz	r3, 8003460 <HAL_I2C_Mem_Read+0x210>
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_I2C_Mem_Read+0x2a4>)
 800345c:	429a      	cmp	r2, r3
 800345e:	d135      	bne.n	80034cc <HAL_I2C_Mem_Read+0x27c>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003460:	6853      	ldr	r3, [r2, #4]
 8003462:	4927      	ldr	r1, [pc, #156]	; (8003500 <HAL_I2C_Mem_Read+0x2b0>)
 8003464:	400b      	ands	r3, r1
 8003466:	433b      	orrs	r3, r7
 8003468:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 800346c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003470:	6053      	str	r3, [r2, #4]
}
 8003472:	e783      	b.n	800337c <HAL_I2C_Mem_Read+0x12c>
      hi2c->XferSize = hi2c->XferCount;
 8003474:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003476:	6822      	ldr	r2, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003478:	b29b      	uxth	r3, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800347a:	491c      	ldr	r1, [pc, #112]	; (80034ec <HAL_I2C_Mem_Read+0x29c>)
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800347c:	fa5f f883 	uxtb.w	r8, r3
      hi2c->XferSize = hi2c->XferCount;
 8003480:	8523      	strh	r3, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_I2C_Mem_Read+0x2a0>)
 8003484:	429a      	cmp	r2, r3
 8003486:	bf18      	it	ne
 8003488:	428a      	cmpne	r2, r1
 800348a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800348e:	bf14      	ite	ne
 8003490:	2301      	movne	r3, #1
 8003492:	2300      	moveq	r3, #0
 8003494:	428a      	cmp	r2, r1
 8003496:	bf0c      	ite	eq
 8003498:	2300      	moveq	r3, #0
 800349a:	f003 0301 	andne.w	r3, r3, #1
 800349e:	b143      	cbz	r3, 80034b2 <HAL_I2C_Mem_Read+0x262>
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_I2C_Mem_Read+0x2a4>)
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d005      	beq.n	80034b2 <HAL_I2C_Mem_Read+0x262>
 80034a6:	f641 01c1 	movw	r1, #6337	; 0x18c1
 80034aa:	480f      	ldr	r0, [pc, #60]	; (80034e8 <HAL_I2C_Mem_Read+0x298>)
 80034ac:	f016 fd16 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	6853      	ldr	r3, [r2, #4]
 80034b4:	4910      	ldr	r1, [pc, #64]	; (80034f8 <HAL_I2C_Mem_Read+0x2a8>)
 80034b6:	400b      	ands	r3, r1
 80034b8:	f3c7 0109 	ubfx	r1, r7, #0, #10
 80034bc:	430b      	orrs	r3, r1
 80034be:	460f      	mov	r7, r1
 80034c0:	4911      	ldr	r1, [pc, #68]	; (8003508 <HAL_I2C_Mem_Read+0x2b8>)
 80034c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80034c6:	4319      	orrs	r1, r3
 80034c8:	6051      	str	r1, [r2, #4]
}
 80034ca:	e739      	b.n	8003340 <HAL_I2C_Mem_Read+0xf0>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80034cc:	f641 01c1 	movw	r1, #6337	; 0x18c1
 80034d0:	4805      	ldr	r0, [pc, #20]	; (80034e8 <HAL_I2C_Mem_Read+0x298>)
 80034d2:	f016 fd03 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	e7c2      	b.n	8003460 <HAL_I2C_Mem_Read+0x210>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80034da:	f641 01c1 	movw	r1, #6337	; 0x18c1
 80034de:	4802      	ldr	r0, [pc, #8]	; (80034e8 <HAL_I2C_Mem_Read+0x298>)
 80034e0:	f016 fcfc 	bl	8019edc <assert_failed>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80034e4:	6822      	ldr	r2, [r4, #0]
 80034e6:	e79f      	b.n	8003428 <HAL_I2C_Mem_Read+0x1d8>
 80034e8:	0801fbd0 	.word	0x0801fbd0
 80034ec:	40005800 	.word	0x40005800
 80034f0:	40005400 	.word	0x40005400
 80034f4:	40006000 	.word	0x40006000
 80034f8:	fc009800 	.word	0xfc009800
 80034fc:	81ff2400 	.word	0x81ff2400
 8003500:	fc009c00 	.word	0xfc009c00
 8003504:	01ff0000 	.word	0x01ff0000
 8003508:	82002400 	.word	0x82002400
 800350c:	40005c00 	.word	0x40005c00
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003510:	4632      	mov	r2, r6
 8003512:	4629      	mov	r1, r5
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff fb0d 	bl	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800351a:	b968      	cbnz	r0, 8003538 <HAL_I2C_Mem_Read+0x2e8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8003520:	4d06      	ldr	r5, [pc, #24]	; (800353c <HAL_I2C_Mem_Read+0x2ec>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003522:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	402a      	ands	r2, r5
 8003528:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800352a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800352e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003532:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003536:	e746      	b.n	80033c6 <HAL_I2C_Mem_Read+0x176>
      return HAL_ERROR;
 8003538:	2001      	movs	r0, #1
 800353a:	e744      	b.n	80033c6 <HAL_I2C_Mem_Read+0x176>
 800353c:	fe00e800 	.word	0xfe00e800

08003540 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 8003542:	6802      	ldr	r2, [r0, #0]
{
 8003544:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003546:	4d23      	ldr	r5, [pc, #140]	; (80035d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 8003548:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800354a:	4e23      	ldr	r6, [pc, #140]	; (80035d8 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800354c:	429a      	cmp	r2, r3
 800354e:	bf18      	it	ne
 8003550:	42aa      	cmpne	r2, r5
{
 8003552:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	42b2      	cmp	r2, r6
 800355c:	bf0c      	ite	eq
 800355e:	2300      	moveq	r3, #0
 8003560:	f003 0301 	andne.w	r3, r3, #1
 8003564:	b113      	cbz	r3, 800356c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 8003568:	429a      	cmp	r2, r3
 800356a:	d12c      	bne.n	80035c6 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800356c:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 8003570:	d124      	bne.n	80035bc <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003572:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003576:	2b20      	cmp	r3, #32
 8003578:	b2de      	uxtb	r6, r3
 800357a:	d11d      	bne.n	80035b8 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003580:	2b01      	cmp	r3, #1
 8003582:	d019      	beq.n	80035b8 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003584:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003586:	2224      	movs	r2, #36	; 0x24
 8003588:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800359a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a0:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 80035a2:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 80035a4:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80035b2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80035b8:	2002      	movs	r0, #2
}
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80035bc:	2160      	movs	r1, #96	; 0x60
 80035be:	4808      	ldr	r0, [pc, #32]	; (80035e0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 80035c0:	f016 fc8c 	bl	8019edc <assert_failed>
 80035c4:	e7d5      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80035c6:	215f      	movs	r1, #95	; 0x5f
 80035c8:	4805      	ldr	r0, [pc, #20]	; (80035e0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 80035ca:	f016 fc87 	bl	8019edc <assert_failed>
 80035ce:	e7cd      	b.n	800356c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 80035d0:	40005400 	.word	0x40005400
 80035d4:	40005800 	.word	0x40005800
 80035d8:	40005c00 	.word	0x40005c00
 80035dc:	40006000 	.word	0x40006000
 80035e0:	0801fc08 	.word	0x0801fc08

080035e4 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80035e4:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 80035e6:	6802      	ldr	r2, [r0, #0]
{
 80035e8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80035ea:	4d22      	ldr	r5, [pc, #136]	; (8003674 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 80035ec:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80035ee:	4e22      	ldr	r6, [pc, #136]	; (8003678 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80035f0:	429a      	cmp	r2, r3
 80035f2:	bf18      	it	ne
 80035f4:	42aa      	cmpne	r2, r5
{
 80035f6:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	42b2      	cmp	r2, r6
 8003600:	bf0c      	ite	eq
 8003602:	2300      	moveq	r3, #0
 8003604:	f003 0301 	andne.w	r3, r3, #1
 8003608:	b113      	cbz	r3, 8003610 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800360c:	429a      	cmp	r2, r3
 800360e:	d12a      	bne.n	8003666 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003610:	2d0f      	cmp	r5, #15
 8003612:	d823      	bhi.n	800365c <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003614:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003618:	2b20      	cmp	r3, #32
 800361a:	b2de      	uxtb	r6, r3
 800361c:	d11c      	bne.n	8003658 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003622:	2b01      	cmp	r3, #1
 8003624:	d018      	beq.n	8003658 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003626:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003628:	2224      	movs	r2, #36	; 0x24
 800362a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003636:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003638:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800363c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003640:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 8003642:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 8003644:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800364e:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003652:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003656:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003658:	2002      	movs	r0, #2
}
 800365a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800365c:	218e      	movs	r1, #142	; 0x8e
 800365e:	4808      	ldr	r0, [pc, #32]	; (8003680 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8003660:	f016 fc3c 	bl	8019edc <assert_failed>
 8003664:	e7d6      	b.n	8003614 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003666:	218d      	movs	r1, #141	; 0x8d
 8003668:	4805      	ldr	r0, [pc, #20]	; (8003680 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800366a:	f016 fc37 	bl	8019edc <assert_failed>
 800366e:	e7cf      	b.n	8003610 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8003670:	40005400 	.word	0x40005400
 8003674:	40005800 	.word	0x40005800
 8003678:	40005c00 	.word	0x40005c00
 800367c:	40006000 	.word	0x40006000
 8003680:	0801fc08 	.word	0x0801fc08

08003684 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003684:	01d2      	lsls	r2, r2, #7
{
 8003686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800368a:	6804      	ldr	r4, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800368c:	f102 0084 	add.w	r0, r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003690:	f8d1 a004 	ldr.w	sl, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003694:	1823      	adds	r3, r4, r0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003696:	68e6      	ldr	r6, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003698:	f8d1 e00c 	ldr.w	lr, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800369c:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800369e:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036a2:	680f      	ldr	r7, [r1, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80036a4:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80036a8:	eb06 0c0a 	add.w	ip, r6, sl
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80036ac:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80036b0:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036b2:	1c7d      	adds	r5, r7, #1
 80036b4:	68e6      	ldr	r6, [r4, #12]
 80036b6:	f3c6 460b 	ubfx	r6, r6, #16, #12
 80036ba:	442e      	add	r6, r5
 80036bc:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80036c0:	605e      	str	r6, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80036c2:	68e5      	ldr	r5, [r4, #12]
 80036c4:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80036c8:	eb05 060e 	add.w	r6, r5, lr
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036cc:	689d      	ldr	r5, [r3, #8]
 80036ce:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80036d2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036d4:	688d      	ldr	r5, [r1, #8]
 80036d6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80036da:	3501      	adds	r5, #1
 80036dc:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 80036e0:	4465      	add	r5, ip
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80036e2:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036e6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036ea:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036ec:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036ee:	691d      	ldr	r5, [r3, #16]
 80036f0:	f025 0507 	bic.w	r5, r5, #7
 80036f4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036f6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80036f8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80036fa:	f891 e032 	ldrb.w	lr, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80036fe:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003702:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003706:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800370a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800370e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003712:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 8003716:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003718:	695d      	ldr	r5, [r3, #20]
 800371a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800371e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003720:	694d      	ldr	r5, [r1, #20]
 8003722:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003724:	4d1c      	ldr	r5, [pc, #112]	; (8003798 <LTDC_SetConfig+0x114>)
 8003726:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 800372a:	ea0e 0505 	and.w	r5, lr, r5
 800372e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003730:	e9d1 5207 	ldrd	r5, r2, [r1, #28]
 8003734:	4315      	orrs	r5, r2
 8003736:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003738:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800373a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800373c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003740:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003742:	b146      	cbz	r6, 8003756 <LTDC_SetConfig+0xd2>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003744:	2e01      	cmp	r6, #1
 8003746:	d022      	beq.n	800378e <LTDC_SetConfig+0x10a>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003748:	1eb5      	subs	r5, r6, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800374a:	2d02      	cmp	r5, #2
 800374c:	d901      	bls.n	8003752 <LTDC_SetConfig+0xce>
 800374e:	2e07      	cmp	r6, #7
 8003750:	d11f      	bne.n	8003792 <LTDC_SetConfig+0x10e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8003752:	2502      	movs	r5, #2
 8003754:	e000      	b.n	8003758 <LTDC_SetConfig+0xd4>
    tmp = 4U;
 8003756:	2504      	movs	r5, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003758:	ebaa 0207 	sub.w	r2, sl, r7
 800375c:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800375e:	fb05 f202 	mul.w	r2, r5, r2
 8003762:	fb06 f505 	mul.w	r5, r6, r5
 8003766:	3203      	adds	r2, #3
 8003768:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800376c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800376e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003770:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
 8003774:	62d9      	str	r1, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003778:	4a08      	ldr	r2, [pc, #32]	; (800379c <LTDC_SetConfig+0x118>)
 800377a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800377c:	400a      	ands	r2, r1
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003780:	631d      	str	r5, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003782:	5823      	ldr	r3, [r4, r0]
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	5023      	str	r3, [r4, r0]
}
 800378a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tmp = 3U;
 800378e:	2503      	movs	r5, #3
 8003790:	e7e2      	b.n	8003758 <LTDC_SetConfig+0xd4>
    tmp = 1U;
 8003792:	2501      	movs	r5, #1
 8003794:	e7e0      	b.n	8003758 <LTDC_SetConfig+0xd4>
 8003796:	bf00      	nop
 8003798:	fffff8f8 	.word	0xfffff8f8
 800379c:	fffff800 	.word	0xfffff800

080037a0 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80037a0:	2800      	cmp	r0, #0
 80037a2:	f000 80e6 	beq.w	8003972 <HAL_LTDC_Init+0x1d2>
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 80037a6:	6802      	ldr	r2, [r0, #0]
{
 80037a8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 80037aa:	4b73      	ldr	r3, [pc, #460]	; (8003978 <HAL_LTDC_Init+0x1d8>)
 80037ac:	4604      	mov	r4, r0
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d003      	beq.n	80037ba <HAL_LTDC_Init+0x1a>
 80037b2:	21ca      	movs	r1, #202	; 0xca
 80037b4:	4871      	ldr	r0, [pc, #452]	; (800397c <HAL_LTDC_Init+0x1dc>)
 80037b6:	f016 fb91 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 80037ba:	6963      	ldr	r3, [r4, #20]
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c0:	f080 80d2 	bcs.w	8003968 <HAL_LTDC_Init+0x1c8>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 80037c4:	69a3      	ldr	r3, [r4, #24]
 80037c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ca:	f080 80c8 	bcs.w	800395e <HAL_LTDC_Init+0x1be>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 80037ce:	69e3      	ldr	r3, [r4, #28]
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	f080 80be 	bcs.w	8003954 <HAL_LTDC_Init+0x1b4>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 80037d8:	6a23      	ldr	r3, [r4, #32]
 80037da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037de:	f080 80b4 	bcs.w	800394a <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 80037e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e8:	f080 80aa 	bcs.w	8003940 <HAL_LTDC_Init+0x1a0>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 80037ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	f080 80a0 	bcs.w	8003936 <HAL_LTDC_Init+0x196>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 80037f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037fc:	f080 8096 	bcs.w	800392c <HAL_LTDC_Init+0x18c>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 8003800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	f080 808c 	bcs.w	8003922 <HAL_LTDC_Init+0x182>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 800380a:	6863      	ldr	r3, [r4, #4]
 800380c:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8003810:	f040 8082 	bne.w	8003918 <HAL_LTDC_Init+0x178>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8003814:	68a3      	ldr	r3, [r4, #8]
 8003816:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 800381a:	d178      	bne.n	800390e <HAL_LTDC_Init+0x16e>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 800381c:	68e3      	ldr	r3, [r4, #12]
 800381e:	f033 5300 	bics.w	r3, r3, #536870912	; 0x20000000
 8003822:	d16f      	bne.n	8003904 <HAL_LTDC_Init+0x164>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8003824:	6923      	ldr	r3, [r4, #16]
 8003826:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 800382a:	d166      	bne.n	80038fa <HAL_LTDC_Init+0x15a>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800382c:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8003830:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003834:	2b00      	cmp	r3, #0
 8003836:	d05a      	beq.n	80038ee <HAL_LTDC_Init+0x14e>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003838:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800383a:	2102      	movs	r1, #2
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800383c:	69e5      	ldr	r5, [r4, #28]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800383e:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003842:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003846:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003848:	4302      	orrs	r2, r0
 800384a:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800384c:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003850:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003852:	6920      	ldr	r0, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003854:	6199      	str	r1, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003856:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003858:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800385a:	4849      	ldr	r0, [pc, #292]	; (8003980 <HAL_LTDC_Init+0x1e0>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800385c:	430a      	orrs	r2, r1
 800385e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	4002      	ands	r2, r0
 8003864:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003866:	6962      	ldr	r2, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003868:	6899      	ldr	r1, [r3, #8]
 800386a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800386e:	69a2      	ldr	r2, [r4, #24]
 8003870:	4311      	orrs	r1, r2
 8003872:	6099      	str	r1, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003874:	68d9      	ldr	r1, [r3, #12]
 8003876:	4001      	ands	r1, r0
 8003878:	60d9      	str	r1, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	6a21      	ldr	r1, [r4, #32]
 800387e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003882:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003884:	430a      	orrs	r2, r1
 8003886:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	4002      	ands	r2, r0
 800388c:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800388e:	6919      	ldr	r1, [r3, #16]
 8003890:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003892:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003896:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003898:	4311      	orrs	r1, r2
 800389a:	6119      	str	r1, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800389c:	6959      	ldr	r1, [r3, #20]
 800389e:	4008      	ands	r0, r1
 80038a0:	6158      	str	r0, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80038a6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80038aa:	430a      	orrs	r2, r1
 80038ac:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80038ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80038b0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80038b4:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80038b8:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80038bc:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80038be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c0:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80038c4:	430a      	orrs	r2, r1
 80038c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80038ca:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80038cc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80038d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d4:	f042 0206 	orr.w	r2, r2, #6
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80038e2:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80038e4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80038e8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80038ec:	bd38      	pop	{r3, r4, r5, pc}
    HAL_LTDC_MspInit(hltdc);
 80038ee:	4620      	mov	r0, r4
    hltdc->Lock = HAL_UNLOCKED;
 80038f0:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80038f4:	f015 fe98 	bl	8019628 <HAL_LTDC_MspInit>
 80038f8:	e79e      	b.n	8003838 <HAL_LTDC_Init+0x98>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 80038fa:	21d6      	movs	r1, #214	; 0xd6
 80038fc:	481f      	ldr	r0, [pc, #124]	; (800397c <HAL_LTDC_Init+0x1dc>)
 80038fe:	f016 faed 	bl	8019edc <assert_failed>
 8003902:	e793      	b.n	800382c <HAL_LTDC_Init+0x8c>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8003904:	21d5      	movs	r1, #213	; 0xd5
 8003906:	481d      	ldr	r0, [pc, #116]	; (800397c <HAL_LTDC_Init+0x1dc>)
 8003908:	f016 fae8 	bl	8019edc <assert_failed>
 800390c:	e78a      	b.n	8003824 <HAL_LTDC_Init+0x84>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 800390e:	21d4      	movs	r1, #212	; 0xd4
 8003910:	481a      	ldr	r0, [pc, #104]	; (800397c <HAL_LTDC_Init+0x1dc>)
 8003912:	f016 fae3 	bl	8019edc <assert_failed>
 8003916:	e781      	b.n	800381c <HAL_LTDC_Init+0x7c>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 8003918:	21d3      	movs	r1, #211	; 0xd3
 800391a:	4818      	ldr	r0, [pc, #96]	; (800397c <HAL_LTDC_Init+0x1dc>)
 800391c:	f016 fade 	bl	8019edc <assert_failed>
 8003920:	e778      	b.n	8003814 <HAL_LTDC_Init+0x74>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 8003922:	21d2      	movs	r1, #210	; 0xd2
 8003924:	4815      	ldr	r0, [pc, #84]	; (800397c <HAL_LTDC_Init+0x1dc>)
 8003926:	f016 fad9 	bl	8019edc <assert_failed>
 800392a:	e76e      	b.n	800380a <HAL_LTDC_Init+0x6a>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 800392c:	21d1      	movs	r1, #209	; 0xd1
 800392e:	4813      	ldr	r0, [pc, #76]	; (800397c <HAL_LTDC_Init+0x1dc>)
 8003930:	f016 fad4 	bl	8019edc <assert_failed>
 8003934:	e764      	b.n	8003800 <HAL_LTDC_Init+0x60>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 8003936:	21d0      	movs	r1, #208	; 0xd0
 8003938:	4810      	ldr	r0, [pc, #64]	; (800397c <HAL_LTDC_Init+0x1dc>)
 800393a:	f016 facf 	bl	8019edc <assert_failed>
 800393e:	e75a      	b.n	80037f6 <HAL_LTDC_Init+0x56>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 8003940:	21cf      	movs	r1, #207	; 0xcf
 8003942:	480e      	ldr	r0, [pc, #56]	; (800397c <HAL_LTDC_Init+0x1dc>)
 8003944:	f016 faca 	bl	8019edc <assert_failed>
 8003948:	e750      	b.n	80037ec <HAL_LTDC_Init+0x4c>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 800394a:	21ce      	movs	r1, #206	; 0xce
 800394c:	480b      	ldr	r0, [pc, #44]	; (800397c <HAL_LTDC_Init+0x1dc>)
 800394e:	f016 fac5 	bl	8019edc <assert_failed>
 8003952:	e746      	b.n	80037e2 <HAL_LTDC_Init+0x42>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 8003954:	21cd      	movs	r1, #205	; 0xcd
 8003956:	4809      	ldr	r0, [pc, #36]	; (800397c <HAL_LTDC_Init+0x1dc>)
 8003958:	f016 fac0 	bl	8019edc <assert_failed>
 800395c:	e73c      	b.n	80037d8 <HAL_LTDC_Init+0x38>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 800395e:	21cc      	movs	r1, #204	; 0xcc
 8003960:	4806      	ldr	r0, [pc, #24]	; (800397c <HAL_LTDC_Init+0x1dc>)
 8003962:	f016 fabb 	bl	8019edc <assert_failed>
 8003966:	e732      	b.n	80037ce <HAL_LTDC_Init+0x2e>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 8003968:	21cb      	movs	r1, #203	; 0xcb
 800396a:	4804      	ldr	r0, [pc, #16]	; (800397c <HAL_LTDC_Init+0x1dc>)
 800396c:	f016 fab6 	bl	8019edc <assert_failed>
 8003970:	e728      	b.n	80037c4 <HAL_LTDC_Init+0x24>
    return HAL_ERROR;
 8003972:	2001      	movs	r0, #1
}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40016800 	.word	0x40016800
 800397c:	0801fc44 	.word	0x0801fc44
 8003980:	f000f800 	.word	0xf000f800

08003984 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003984:	2a01      	cmp	r2, #1
{
 8003986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003988:	4616      	mov	r6, r2
 800398a:	4605      	mov	r5, r0
 800398c:	460c      	mov	r4, r1
  assert_param(IS_LTDC_LAYER(LayerIdx));
 800398e:	d904      	bls.n	800399a <HAL_LTDC_ConfigLayer+0x16>
 8003990:	f240 21fe 	movw	r1, #766	; 0x2fe
 8003994:	4865      	ldr	r0, [pc, #404]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003996:	f016 faa1 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a0:	d25a      	bcs.n	8003a58 <HAL_LTDC_ConfigLayer+0xd4>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 80039a2:	6863      	ldr	r3, [r4, #4]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d25f      	bcs.n	8003a6a <HAL_LTDC_ConfigLayer+0xe6>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 80039aa:	68a3      	ldr	r3, [r4, #8]
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d264      	bcs.n	8003a7c <HAL_LTDC_ConfigLayer+0xf8>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 80039b2:	68e3      	ldr	r3, [r4, #12]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d269      	bcs.n	8003a8e <HAL_LTDC_ConfigLayer+0x10a>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 80039ba:	6923      	ldr	r3, [r4, #16]
 80039bc:	2b07      	cmp	r3, #7
 80039be:	d86e      	bhi.n	8003a9e <HAL_LTDC_ConfigLayer+0x11a>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 80039c0:	6963      	ldr	r3, [r4, #20]
 80039c2:	2bff      	cmp	r3, #255	; 0xff
 80039c4:	d873      	bhi.n	8003aae <HAL_LTDC_ConfigLayer+0x12a>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 80039c6:	69a3      	ldr	r3, [r4, #24]
 80039c8:	2bff      	cmp	r3, #255	; 0xff
 80039ca:	d878      	bhi.n	8003abe <HAL_LTDC_ConfigLayer+0x13a>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 80039cc:	69e3      	ldr	r3, [r4, #28]
 80039ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	d17d      	bne.n	8003ad4 <HAL_LTDC_ConfigLayer+0x150>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 80039d8:	6a23      	ldr	r3, [r4, #32]
 80039da:	f023 0302 	bic.w	r3, r3, #2
 80039de:	2b05      	cmp	r3, #5
 80039e0:	f040 8083 	bne.w	8003aea <HAL_LTDC_ConfigLayer+0x166>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 80039e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ea:	f080 8088 	bcs.w	8003afe <HAL_LTDC_ConfigLayer+0x17a>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 80039ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80039f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f4:	f080 808d 	bcs.w	8003b12 <HAL_LTDC_ConfigLayer+0x18e>
  __HAL_LOCK(hltdc);
 80039f8:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f000 8092 	beq.w	8003b26 <HAL_LTDC_ConfigLayer+0x1a2>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003a02:	f04f 0c34 	mov.w	ip, #52	; 0x34
  __HAL_LOCK(hltdc);
 8003a06:	2701      	movs	r7, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a08:	2302      	movs	r3, #2
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003a0a:	46a6      	mov	lr, r4
 8003a0c:	fb0c 5c06 	mla	ip, ip, r6, r5
  __HAL_LOCK(hltdc);
 8003a10:	f885 70a0 	strb.w	r7, [r5, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a14:	f885 30a1 	strb.w	r3, [r5, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003a18:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8003a1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003a20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003a28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003a30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a34:	f8de 3000 	ldr.w	r3, [lr]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a38:	4632      	mov	r2, r6
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	4621      	mov	r1, r4
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003a3e:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a42:	f7ff fe1f 	bl	8003684 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8003a46:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a48:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 8003a4a:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a4c:	6257      	str	r7, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003a4e:	f885 70a1 	strb.w	r7, [r5, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003a52:	f885 30a0 	strb.w	r3, [r5, #160]	; 0xa0
}
 8003a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8003a58:	f240 21ff 	movw	r1, #767	; 0x2ff
 8003a5c:	4833      	ldr	r0, [pc, #204]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003a5e:	f016 fa3d 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d39f      	bcc.n	80039aa <HAL_LTDC_ConfigLayer+0x26>
 8003a6a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003a6e:	482f      	ldr	r0, [pc, #188]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003a70:	f016 fa34 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8003a74:	68a3      	ldr	r3, [r4, #8]
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d39a      	bcc.n	80039b2 <HAL_LTDC_ConfigLayer+0x2e>
 8003a7c:	f240 3101 	movw	r1, #769	; 0x301
 8003a80:	482a      	ldr	r0, [pc, #168]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003a82:	f016 fa2b 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d395      	bcc.n	80039ba <HAL_LTDC_ConfigLayer+0x36>
 8003a8e:	f240 3102 	movw	r1, #770	; 0x302
 8003a92:	4826      	ldr	r0, [pc, #152]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003a94:	f016 fa22 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8003a98:	6923      	ldr	r3, [r4, #16]
 8003a9a:	2b07      	cmp	r3, #7
 8003a9c:	d990      	bls.n	80039c0 <HAL_LTDC_ConfigLayer+0x3c>
 8003a9e:	f240 3103 	movw	r1, #771	; 0x303
 8003aa2:	4822      	ldr	r0, [pc, #136]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003aa4:	f016 fa1a 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 8003aa8:	6963      	ldr	r3, [r4, #20]
 8003aaa:	2bff      	cmp	r3, #255	; 0xff
 8003aac:	d98b      	bls.n	80039c6 <HAL_LTDC_ConfigLayer+0x42>
 8003aae:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003ab2:	481e      	ldr	r0, [pc, #120]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003ab4:	f016 fa12 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 8003ab8:	69a3      	ldr	r3, [r4, #24]
 8003aba:	2bff      	cmp	r3, #255	; 0xff
 8003abc:	d986      	bls.n	80039cc <HAL_LTDC_ConfigLayer+0x48>
 8003abe:	f240 3105 	movw	r1, #773	; 0x305
 8003ac2:	481a      	ldr	r0, [pc, #104]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003ac4:	f016 fa0a 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8003ac8:	69e3      	ldr	r3, [r4, #28]
 8003aca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad2:	d081      	beq.n	80039d8 <HAL_LTDC_ConfigLayer+0x54>
 8003ad4:	f240 3106 	movw	r1, #774	; 0x306
 8003ad8:	4814      	ldr	r0, [pc, #80]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003ada:	f016 f9ff 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 8003ade:	6a23      	ldr	r3, [r4, #32]
 8003ae0:	f023 0302 	bic.w	r3, r3, #2
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	f43f af7d 	beq.w	80039e4 <HAL_LTDC_ConfigLayer+0x60>
 8003aea:	f240 3107 	movw	r1, #775	; 0x307
 8003aee:	480f      	ldr	r0, [pc, #60]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003af0:	f016 f9f4 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 8003af4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afa:	f4ff af78 	bcc.w	80039ee <HAL_LTDC_ConfigLayer+0x6a>
 8003afe:	f44f 7142 	mov.w	r1, #776	; 0x308
 8003b02:	480a      	ldr	r0, [pc, #40]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003b04:	f016 f9ea 	bl	8019edc <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8003b08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0e:	f4ff af73 	bcc.w	80039f8 <HAL_LTDC_ConfigLayer+0x74>
 8003b12:	f240 3109 	movw	r1, #777	; 0x309
 8003b16:	4805      	ldr	r0, [pc, #20]	; (8003b2c <HAL_LTDC_ConfigLayer+0x1a8>)
 8003b18:	f016 f9e0 	bl	8019edc <assert_failed>
  __HAL_LOCK(hltdc);
 8003b1c:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f47f af6e 	bne.w	8003a02 <HAL_LTDC_ConfigLayer+0x7e>
 8003b26:	2002      	movs	r0, #2
}
 8003b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	0801fc44 	.word	0x0801fc44

08003b30 <HAL_LTDC_SetAddress>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003b30:	2a01      	cmp	r2, #1
{
 8003b32:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b36:	4614      	mov	r4, r2
 8003b38:	4605      	mov	r5, r0
 8003b3a:	460e      	mov	r6, r1
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003b3c:	d904      	bls.n	8003b48 <HAL_LTDC_SetAddress+0x18>
 8003b3e:	f240 5111 	movw	r1, #1297	; 0x511
 8003b42:	485a      	ldr	r0, [pc, #360]	; (8003cac <HAL_LTDC_SetAddress+0x17c>)
 8003b44:	f016 f9ca 	bl	8019edc <assert_failed>
  __HAL_LOCK(hltdc);
 8003b48:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	f000 80a7 	beq.w	8003ca0 <HAL_LTDC_SetAddress+0x170>
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b52:	6828      	ldr	r0, [r5, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b54:	2302      	movs	r3, #2
  pLayerCfg->FBStartAdress = Address;
 8003b56:	f04f 0c34 	mov.w	ip, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b5a:	f885 30a1 	strb.w	r3, [r5, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b5e:	f100 0e84 	add.w	lr, r0, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b62:	68c7      	ldr	r7, [r0, #12]
  pLayerCfg->FBStartAdress = Address;
 8003b64:	fb0c 5c04 	mla	ip, ip, r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b68:	eb0e 13c4 	add.w	r3, lr, r4, lsl #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b6c:	f3c7 470b 	ubfx	r7, r7, #16, #12
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b70:	f8dc 9044 	ldr.w	r9, [ip, #68]	; 0x44
  pLayerCfg->FBStartAdress = Address;
 8003b74:	f8cc 605c 	str.w	r6, [ip, #92]	; 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003b78:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b7c:	e9dc 1b0e 	ldrd	r1, fp, [ip, #56]	; 0x38
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b80:	eb07 080b 	add.w	r8, r7, fp
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b84:	685f      	ldr	r7, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b86:	f101 0a01 	add.w	sl, r1, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b8a:	f407 4770 	and.w	r7, r7, #61440	; 0xf000
 8003b8e:	605f      	str	r7, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b90:	68c7      	ldr	r7, [r0, #12]
 8003b92:	f3c7 470b 	ubfx	r7, r7, #16, #12
 8003b96:	4457      	add	r7, sl
 8003b98:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
 8003b9c:	605f      	str	r7, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b9e:	68c7      	ldr	r7, [r0, #12]
 8003ba0:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003ba4:	eb07 0809 	add.w	r8, r7, r9
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ba8:	689f      	ldr	r7, [r3, #8]
 8003baa:	f407 4770 	and.w	r7, r7, #61440	; 0xf000
 8003bae:	609f      	str	r7, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003bb0:	68c7      	ldr	r7, [r0, #12]
 8003bb2:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003bb6:	4417      	add	r7, r2
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003bb8:	f8dc 2050 	ldr.w	r2, [ip, #80]	; 0x50
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003bbc:	3701      	adds	r7, #1
 8003bbe:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003bc2:	f89c 8069 	ldrb.w	r8, [ip, #105]	; 0x69
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003bc6:	609f      	str	r7, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003bc8:	f89c 7068 	ldrb.w	r7, [ip, #104]	; 0x68
 8003bcc:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003bd0:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003bd4:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003bd8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8003bdc:	f028 0807 	bic.w	r8, r8, #7
 8003be0:	f8c3 8010 	str.w	r8, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003be4:	f89c 806a 	ldrb.w	r8, [ip, #106]	; 0x6a
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003be8:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003bec:	f8dc 8048 	ldr.w	r8, [ip, #72]	; 0x48
 8003bf0:	f8c3 8010 	str.w	r8, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003bf4:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8003bf8:	f04f 0900 	mov.w	r9, #0
 8003bfc:	f8c3 9018 	str.w	r9, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003c00:	619f      	str	r7, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c02:	695f      	ldr	r7, [r3, #20]
 8003c04:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
 8003c08:	615f      	str	r7, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c0a:	4f29      	ldr	r7, [pc, #164]	; (8003cb0 <HAL_LTDC_SetAddress+0x180>)
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003c0c:	615a      	str	r2, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c0e:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 8003c12:	ea0a 0707 	and.w	r7, sl, r7
 8003c16:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c18:	e9dc 7c15 	ldrd	r7, ip, [ip, #84]	; 0x54
 8003c1c:	ea47 070c 	orr.w	r7, r7, ip
 8003c20:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c22:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8003c24:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c28:	629e      	str	r6, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003c2a:	01e6      	lsls	r6, r4, #7
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c2c:	f1b8 0f00 	cmp.w	r8, #0
 8003c30:	d128      	bne.n	8003c84 <HAL_LTDC_SetAddress+0x154>
    tmp = 4U;
 8003c32:	2704      	movs	r7, #4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003c34:	2234      	movs	r2, #52	; 0x34
 8003c36:	ebab 0101 	sub.w	r1, fp, r1
 8003c3a:	fb02 5404 	mla	r4, r2, r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003c40:	fb07 f101 	mul.w	r1, r7, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c44:	f002 22e0 	and.w	r2, r2, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003c48:	3103      	adds	r1, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003c4c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003c4e:	fb07 f202 	mul.w	r2, r7, r2
 8003c52:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003c56:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <HAL_LTDC_SetAddress+0x184>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003c58:	62d9      	str	r1, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003c5a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003c5c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003c5e:	4022      	ands	r2, r4
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c62:	2201      	movs	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003c64:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003c66:	f85e 3006 	ldr.w	r3, [lr, r6]
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	f84e 3006 	str.w	r3, [lr, r6]
  __HAL_UNLOCK(hltdc);
 8003c72:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c74:	6242      	str	r2, [r0, #36]	; 0x24
  return HAL_OK;
 8003c76:	4618      	mov	r0, r3
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c78:	f885 20a1 	strb.w	r2, [r5, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003c7c:	f885 30a0 	strb.w	r3, [r5, #160]	; 0xa0
}
 8003c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c84:	f1b8 0f01 	cmp.w	r8, #1
 8003c88:	d00d      	beq.n	8003ca6 <HAL_LTDC_SetAddress+0x176>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c8a:	f1a8 0702 	sub.w	r7, r8, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c8e:	2f02      	cmp	r7, #2
 8003c90:	d904      	bls.n	8003c9c <HAL_LTDC_SetAddress+0x16c>
 8003c92:	f1b8 0f07 	cmp.w	r8, #7
 8003c96:	d001      	beq.n	8003c9c <HAL_LTDC_SetAddress+0x16c>
    tmp = 1U;
 8003c98:	2701      	movs	r7, #1
 8003c9a:	e7cb      	b.n	8003c34 <HAL_LTDC_SetAddress+0x104>
    tmp = 2U;
 8003c9c:	2702      	movs	r7, #2
 8003c9e:	e7c9      	b.n	8003c34 <HAL_LTDC_SetAddress+0x104>
  __HAL_LOCK(hltdc);
 8003ca0:	2002      	movs	r0, #2
}
 8003ca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 8003ca6:	2703      	movs	r7, #3
 8003ca8:	e7c4      	b.n	8003c34 <HAL_LTDC_SetAddress+0x104>
 8003caa:	bf00      	nop
 8003cac:	0801fc44 	.word	0x0801fc44
 8003cb0:	fffff8f8 	.word	0xfffff8f8
 8003cb4:	fffff800 	.word	0xfffff800

08003cb8 <HAL_LTDC_Reload>:
{
 8003cb8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_LTDC_RELOAD(ReloadType));
 8003cba:	1e4b      	subs	r3, r1, #1
{
 8003cbc:	460d      	mov	r5, r1
 8003cbe:	4604      	mov	r4, r0
  assert_param(IS_LTDC_RELOAD(ReloadType));
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d904      	bls.n	8003cce <HAL_LTDC_Reload+0x16>
 8003cc4:	f240 51aa 	movw	r1, #1450	; 0x5aa
 8003cc8:	480d      	ldr	r0, [pc, #52]	; (8003d00 <HAL_LTDC_Reload+0x48>)
 8003cca:	f016 f907 	bl	8019edc <assert_failed>
  __HAL_LOCK(hltdc);
 8003cce:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d011      	beq.n	8003cfa <HAL_LTDC_Reload+0x42>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8003cd6:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003cd8:	2202      	movs	r2, #2
  __HAL_UNLOCK(hltdc);
 8003cda:	f04f 0c00 	mov.w	ip, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cde:	2101      	movs	r1, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ce0:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8003ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8003ce6:	4660      	mov	r0, ip
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8003ce8:	f042 0208 	orr.w	r2, r2, #8
 8003cec:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 8003cee:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cf0:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003cf4:	f884 c0a0 	strb.w	ip, [r4, #160]	; 0xa0
}
 8003cf8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 8003cfa:	2002      	movs	r0, #2
}
 8003cfc:	bd38      	pop	{r3, r4, r5, pc}
 8003cfe:	bf00      	nop
 8003d00:	0801fc44 	.word	0x0801fc44

08003d04 <HAL_LTDC_SetAlpha_NoReload>:
  assert_param(IS_LTDC_ALPHA(Alpha));
 8003d04:	29ff      	cmp	r1, #255	; 0xff
{
 8003d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	460e      	mov	r6, r1
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	4615      	mov	r5, r2
  assert_param(IS_LTDC_ALPHA(Alpha));
 8003d10:	f200 80b5 	bhi.w	8003e7e <HAL_LTDC_SetAlpha_NoReload+0x17a>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003d14:	2d01      	cmp	r5, #1
 8003d16:	d904      	bls.n	8003d22 <HAL_LTDC_SetAlpha_NoReload+0x1e>
 8003d18:	f240 6197 	movw	r1, #1687	; 0x697
 8003d1c:	485d      	ldr	r0, [pc, #372]	; (8003e94 <HAL_LTDC_SetAlpha_NoReload+0x190>)
 8003d1e:	f016 f8dd 	bl	8019edc <assert_failed>
  __HAL_LOCK(hltdc);
 8003d22:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	f000 80af 	beq.w	8003e8a <HAL_LTDC_SetAlpha_NoReload+0x186>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d2c:	2302      	movs	r3, #2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d2e:	6827      	ldr	r7, [r4, #0]
  pLayerCfg->Alpha = Alpha;
 8003d30:	f04f 0c34 	mov.w	ip, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d34:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d38:	eb07 13c5 	add.w	r3, r7, r5, lsl #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d3c:	68f8      	ldr	r0, [r7, #12]
  pLayerCfg->Alpha = Alpha;
 8003d3e:	fb0c 4c05 	mla	ip, ip, r5, r4
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d42:	f3c0 400b 	ubfx	r0, r0, #16, #12
  pLayerCfg->Alpha = Alpha;
 8003d46:	f8cc 604c 	str.w	r6, [ip, #76]	; 0x4c
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d4a:	e9dc 120e 	ldrd	r1, r2, [ip, #56]	; 0x38
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d4e:	eb00 0e02 	add.w	lr, r0, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d52:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d56:	f101 0801 	add.w	r8, r1, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d5a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8003d5e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8003d68:	4440      	add	r0, r8
 8003d6a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d6e:	f8dc e044 	ldr.w	lr, [ip, #68]	; 0x44
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d72:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d76:	68f8      	ldr	r0, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003d78:	f8d3 808c 	ldr.w	r8, [r3, #140]	; 0x8c
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d7c:	f3c0 000a 	ubfx	r0, r0, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003d80:	f408 4870 	and.w	r8, r8, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d84:	4486      	add	lr, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003d86:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003d8a:	f8c3 808c 	str.w	r8, [r3, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003d8e:	68ff      	ldr	r7, [r7, #12]
 8003d90:	3001      	adds	r0, #1
 8003d92:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003d96:	4438      	add	r0, r7
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003d98:	f8dc 7050 	ldr.w	r7, [ip, #80]	; 0x50
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003d9c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8003da0:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003da4:	f89c 0068 	ldrb.w	r0, [ip, #104]	; 0x68
 8003da8:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003dac:	f89c 7069 	ldrb.w	r7, [ip, #105]	; 0x69
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003db0:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003db4:	f8d3 7094 	ldr.w	r7, [r3, #148]	; 0x94
 8003db8:	f027 0707 	bic.w	r7, r7, #7
 8003dbc:	f8c3 7094 	str.w	r7, [r3, #148]	; 0x94
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003dc0:	f89c 706a 	ldrb.w	r7, [ip, #106]	; 0x6a
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003dc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003dc8:	f8dc 7048 	ldr.w	r7, [ip, #72]	; 0x48
 8003dcc:	f8c3 7094 	str.w	r7, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003dd0:	f8d3 e09c 	ldr.w	lr, [r3, #156]	; 0x9c
 8003dd4:	f04f 0e00 	mov.w	lr, #0
 8003dd8:	f8c3 e09c 	str.w	lr, [r3, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003ddc:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003de0:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8003de4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003de8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003dec:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003df0:	4829      	ldr	r0, [pc, #164]	; (8003e98 <HAL_LTDC_SetAlpha_NoReload+0x194>)
 8003df2:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8003df6:	4030      	ands	r0, r6
 8003df8:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003dfc:	e9dc 0615 	ldrd	r0, r6, [ip, #84]	; 0x54
 8003e00:	4330      	orrs	r0, r6
 8003e02:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003e06:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003e0a:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 8003e0e:	f8c3 e0ac 	str.w	lr, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003e12:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003e16:	f103 0084 	add.w	r0, r3, #132	; 0x84
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003e1a:	bb2f      	cbnz	r7, 8003e68 <HAL_LTDC_SetAlpha_NoReload+0x164>
    tmp = 4U;
 8003e1c:	2704      	movs	r7, #4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e1e:	1a51      	subs	r1, r2, r1
 8003e20:	2234      	movs	r2, #52	; 0x34
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003e22:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e24:	fb02 4505 	mla	r5, r2, r5, r4
 8003e28:	fb07 f101 	mul.w	r1, r7, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003e2c:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e30:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8003e32:	3103      	adds	r1, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003e34:	62c6      	str	r6, [r0, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e36:	fb07 f202 	mul.w	r2, r7, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e3a:	6e6d      	ldr	r5, [r5, #100]	; 0x64
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003e40:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <HAL_LTDC_SetAlpha_NoReload+0x198>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e42:	62c1      	str	r1, [r0, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003e44:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003e46:	400a      	ands	r2, r1
  __HAL_UNLOCK(hltdc);
 8003e48:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003e4a:	6302      	str	r2, [r0, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e4c:	6305      	str	r5, [r0, #48]	; 0x30
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e4e:	2001      	movs	r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003e50:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003e54:	4302      	orrs	r2, r0
 8003e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e5a:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  return HAL_OK;
 8003e5e:	4608      	mov	r0, r1
  __HAL_UNLOCK(hltdc);
 8003e60:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
}
 8003e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003e68:	2f01      	cmp	r7, #1
 8003e6a:	d011      	beq.n	8003e90 <HAL_LTDC_SetAlpha_NoReload+0x18c>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003e6c:	1ebe      	subs	r6, r7, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003e6e:	2e02      	cmp	r6, #2
 8003e70:	d903      	bls.n	8003e7a <HAL_LTDC_SetAlpha_NoReload+0x176>
 8003e72:	2f07      	cmp	r7, #7
 8003e74:	d001      	beq.n	8003e7a <HAL_LTDC_SetAlpha_NoReload+0x176>
    tmp = 1U;
 8003e76:	2701      	movs	r7, #1
 8003e78:	e7d1      	b.n	8003e1e <HAL_LTDC_SetAlpha_NoReload+0x11a>
    tmp = 2U;
 8003e7a:	2702      	movs	r7, #2
 8003e7c:	e7cf      	b.n	8003e1e <HAL_LTDC_SetAlpha_NoReload+0x11a>
  assert_param(IS_LTDC_ALPHA(Alpha));
 8003e7e:	f240 6196 	movw	r1, #1686	; 0x696
 8003e82:	4804      	ldr	r0, [pc, #16]	; (8003e94 <HAL_LTDC_SetAlpha_NoReload+0x190>)
 8003e84:	f016 f82a 	bl	8019edc <assert_failed>
 8003e88:	e744      	b.n	8003d14 <HAL_LTDC_SetAlpha_NoReload+0x10>
  __HAL_LOCK(hltdc);
 8003e8a:	2002      	movs	r0, #2
}
 8003e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = 3U;
 8003e90:	2703      	movs	r7, #3
 8003e92:	e7c4      	b.n	8003e1e <HAL_LTDC_SetAlpha_NoReload+0x11a>
 8003e94:	0801fc44 	.word	0x0801fc44
 8003e98:	fffff8f8 	.word	0xfffff8f8
 8003e9c:	fffff800 	.word	0xfffff800

08003ea0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_PWREx_EnableOverDrive+0x6c>)
 8003ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8003ea8:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
{
 8003eac:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eb0:	4c17      	ldr	r4, [pc, #92]	; (8003f10 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec2:	f7fd f8d5 	bl	8001070 <HAL_GetTick>
 8003ec6:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ec8:	e005      	b.n	8003ed6 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eca:	f7fd f8d1 	bl	8001070 <HAL_GetTick>
 8003ece:	1b40      	subs	r0, r0, r5
 8003ed0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ed4:	d817      	bhi.n	8003f06 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	03da      	lsls	r2, r3, #15
 8003eda:	d5f6      	bpl.n	8003eca <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003edc:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ede:	4d0c      	ldr	r5, [pc, #48]	; (8003f10 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003ee6:	f7fd f8c3 	bl	8001070 <HAL_GetTick>
 8003eea:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eec:	e005      	b.n	8003efa <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eee:	f7fd f8bf 	bl	8001070 <HAL_GetTick>
 8003ef2:	1b00      	subs	r0, r0, r4
 8003ef4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ef8:	d805      	bhi.n	8003f06 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003efa:	686b      	ldr	r3, [r5, #4]
 8003efc:	039b      	lsls	r3, r3, #14
 8003efe:	d5f6      	bpl.n	8003eee <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003f00:	2000      	movs	r0, #0
}
 8003f02:	b003      	add	sp, #12
 8003f04:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8003f06:	2003      	movs	r0, #3
}
 8003f08:	b003      	add	sp, #12
 8003f0a:	bd30      	pop	{r4, r5, pc}
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40007000 	.word	0x40007000

08003f14 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f000 822b 	beq.w	8004370 <HAL_RCC_OscConfig+0x45c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f1a:	6803      	ldr	r3, [r0, #0]
 8003f1c:	2b0f      	cmp	r3, #15
{
 8003f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f22:	4604      	mov	r4, r0
 8003f24:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f26:	f200 811c 	bhi.w	8004162 <HAL_RCC_OscConfig+0x24e>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2a:	07dd      	lsls	r5, r3, #31
 8003f2c:	d534      	bpl.n	8003f98 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f2e:	6863      	ldr	r3, [r4, #4]
 8003f30:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8003f34:	d003      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2a>
 8003f36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f3a:	f040 816e 	bne.w	800421a <HAL_RCC_OscConfig+0x306>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f3e:	4aa4      	ldr	r2, [pc, #656]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
 8003f40:	6893      	ldr	r3, [r2, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d01d      	beq.n	8003f86 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f4a:	6893      	ldr	r3, [r2, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d015      	beq.n	8003f80 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f54:	6863      	ldr	r3, [r4, #4]
 8003f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5a:	f000 8164 	beq.w	8004226 <HAL_RCC_OscConfig+0x312>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8195 	beq.w	800428e <HAL_RCC_OscConfig+0x37a>
 8003f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f68:	4b99      	ldr	r3, [pc, #612]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	f000 8208 	beq.w	8004380 <HAL_RCC_OscConfig+0x46c>
 8003f70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e157      	b.n	8004230 <HAL_RCC_OscConfig+0x31c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f80:	6853      	ldr	r3, [r2, #4]
 8003f82:	0258      	lsls	r0, r3, #9
 8003f84:	d5e6      	bpl.n	8003f54 <HAL_RCC_OscConfig+0x40>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f86:	4b92      	ldr	r3, [pc, #584]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	0399      	lsls	r1, r3, #14
 8003f8c:	d503      	bpl.n	8003f96 <HAL_RCC_OscConfig+0x82>
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80f8 	beq.w	8004186 <HAL_RCC_OscConfig+0x272>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	079f      	lsls	r7, r3, #30
 8003f9a:	d531      	bpl.n	8004000 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003f9c:	68e3      	ldr	r3, [r4, #12]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	f200 80f5 	bhi.w	800418e <HAL_RCC_OscConfig+0x27a>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	2b1f      	cmp	r3, #31
 8003fa8:	f200 80fa 	bhi.w	80041a0 <HAL_RCC_OscConfig+0x28c>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fac:	4b88      	ldr	r3, [pc, #544]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	f012 0f0c 	tst.w	r2, #12
 8003fb4:	f000 80e0 	beq.w	8004178 <HAL_RCC_OscConfig+0x264>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	f002 020c 	and.w	r2, r2, #12
 8003fbe:	2a08      	cmp	r2, #8
 8003fc0:	f000 80d6 	beq.w	8004170 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc4:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc6:	4d82      	ldr	r5, [pc, #520]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8196 	beq.w	80042fa <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_HSI_ENABLE();
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7fd f84b 	bl	8001070 <HAL_GetTick>
 8003fda:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fdc:	e005      	b.n	8003fea <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fde:	f7fd f847 	bl	8001070 <HAL_GetTick>
 8003fe2:	1b80      	subs	r0, r0, r6
 8003fe4:	2802      	cmp	r0, #2
 8003fe6:	f200 814e 	bhi.w	8004286 <HAL_RCC_OscConfig+0x372>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	0798      	lsls	r0, r3, #30
 8003fee:	d5f6      	bpl.n	8003fde <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	6922      	ldr	r2, [r4, #16]
 8003ff4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ff8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003ffc:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	071a      	lsls	r2, r3, #28
 8004002:	d42a      	bmi.n	800405a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004004:	075e      	lsls	r6, r3, #29
 8004006:	d544      	bpl.n	8004092 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004008:	68a3      	ldr	r3, [r4, #8]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d906      	bls.n	800401c <HAL_RCC_OscConfig+0x108>
 800400e:	2b05      	cmp	r3, #5
 8004010:	d004      	beq.n	800401c <HAL_RCC_OscConfig+0x108>
 8004012:	f240 2107 	movw	r1, #519	; 0x207
 8004016:	486f      	ldr	r0, [pc, #444]	; (80041d4 <HAL_RCC_OscConfig+0x2c0>)
 8004018:	f015 ff60 	bl	8019edc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401c:	4b6c      	ldr	r3, [pc, #432]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
 800401e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004020:	00d5      	lsls	r5, r2, #3
 8004022:	f140 80e5 	bpl.w	80041f0 <HAL_RCC_OscConfig+0x2dc>
  FlagStatus pwrclkchanged = RESET;
 8004026:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004028:	4e6b      	ldr	r6, [pc, #428]	; (80041d8 <HAL_RCC_OscConfig+0x2c4>)
 800402a:	6833      	ldr	r3, [r6, #0]
 800402c:	05d8      	lsls	r0, r3, #23
 800402e:	f140 811a 	bpl.w	8004266 <HAL_RCC_OscConfig+0x352>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004032:	68a3      	ldr	r3, [r4, #8]
 8004034:	2b01      	cmp	r3, #1
 8004036:	f000 8172 	beq.w	800431e <HAL_RCC_OscConfig+0x40a>
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 813d 	beq.w	80042ba <HAL_RCC_OscConfig+0x3a6>
 8004040:	2b05      	cmp	r3, #5
 8004042:	4b63      	ldr	r3, [pc, #396]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
 8004044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004046:	f000 81b5 	beq.w	80043b4 <HAL_RCC_OscConfig+0x4a0>
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	671a      	str	r2, [r3, #112]	; 0x70
 8004050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004052:	f022 0204 	bic.w	r2, r2, #4
 8004056:	671a      	str	r2, [r3, #112]	; 0x70
 8004058:	e166      	b.n	8004328 <HAL_RCC_OscConfig+0x414>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800405a:	6963      	ldr	r3, [r4, #20]
 800405c:	2b01      	cmp	r3, #1
 800405e:	f200 80bd 	bhi.w	80041dc <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_LSI_ENABLE();
 8004062:	4d5b      	ldr	r5, [pc, #364]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80a1 	beq.w	80041ac <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 800406a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004072:	f7fc fffd 	bl	8001070 <HAL_GetTick>
 8004076:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004078:	e005      	b.n	8004086 <HAL_RCC_OscConfig+0x172>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407a:	f7fc fff9 	bl	8001070 <HAL_GetTick>
 800407e:	1b80      	subs	r0, r0, r6
 8004080:	2802      	cmp	r0, #2
 8004082:	f200 8100 	bhi.w	8004286 <HAL_RCC_OscConfig+0x372>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004088:	079b      	lsls	r3, r3, #30
 800408a:	d5f6      	bpl.n	800407a <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	075e      	lsls	r6, r3, #29
 8004090:	d4ba      	bmi.n	8004008 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004092:	69a3      	ldr	r3, [r4, #24]
 8004094:	2b02      	cmp	r3, #2
 8004096:	f200 80b6 	bhi.w	8004206 <HAL_RCC_OscConfig+0x2f2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409a:	2b00      	cmp	r3, #0
 800409c:	d05d      	beq.n	800415a <HAL_RCC_OscConfig+0x246>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409e:	4d4c      	ldr	r5, [pc, #304]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
 80040a0:	68aa      	ldr	r2, [r5, #8]
 80040a2:	f002 020c 	and.w	r2, r2, #12
 80040a6:	2a08      	cmp	r2, #8
 80040a8:	d06d      	beq.n	8004186 <HAL_RCC_OscConfig+0x272>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f040 814f 	bne.w	800434e <HAL_RCC_OscConfig+0x43a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80040b0:	69e3      	ldr	r3, [r4, #28]
 80040b2:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80040b6:	f040 816b 	bne.w	8004390 <HAL_RCC_OscConfig+0x47c>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80040ba:	6a23      	ldr	r3, [r4, #32]
 80040bc:	3b02      	subs	r3, #2
 80040be:	2b3d      	cmp	r3, #61	; 0x3d
 80040c0:	f200 8172 	bhi.w	80043a8 <HAL_RCC_OscConfig+0x494>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80040c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c6:	3b32      	subs	r3, #50	; 0x32
 80040c8:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80040cc:	f200 8166 	bhi.w	800439c <HAL_RCC_OscConfig+0x488>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80040d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	f200 814e 	bhi.w	8004374 <HAL_RCC_OscConfig+0x460>
 80040d8:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	07d8      	lsls	r0, r3, #31
 80040e2:	f140 8147 	bpl.w	8004374 <HAL_RCC_OscConfig+0x460>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80040e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80040e8:	3b02      	subs	r3, #2
 80040ea:	2b0d      	cmp	r3, #13
 80040ec:	f200 816a 	bhi.w	80043c4 <HAL_RCC_OscConfig+0x4b0>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4d37      	ldr	r5, [pc, #220]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
 80040f2:	682b      	ldr	r3, [r5, #0]
 80040f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fc ffb9 	bl	8001070 <HAL_GetTick>
 80040fe:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004100:	e005      	b.n	800410e <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004102:	f7fc ffb5 	bl	8001070 <HAL_GetTick>
 8004106:	1b80      	subs	r0, r0, r6
 8004108:	2802      	cmp	r0, #2
 800410a:	f200 80bc 	bhi.w	8004286 <HAL_RCC_OscConfig+0x372>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	682b      	ldr	r3, [r5, #0]
 8004110:	0199      	lsls	r1, r3, #6
 8004112:	d4f6      	bmi.n	8004102 <HAL_RCC_OscConfig+0x1ee>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004114:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004116:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004118:	0852      	lsrs	r2, r2, #1
 800411a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800411e:	3a01      	subs	r2, #1
 8004120:	430b      	orrs	r3, r1
 8004122:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004124:	4c2a      	ldr	r4, [pc, #168]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800412a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800412e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004136:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004140:	f7fc ff96 	bl	8001070 <HAL_GetTick>
 8004144:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004146:	e005      	b.n	8004154 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004148:	f7fc ff92 	bl	8001070 <HAL_GetTick>
 800414c:	1b40      	subs	r0, r0, r5
 800414e:	2802      	cmp	r0, #2
 8004150:	f200 8099 	bhi.w	8004286 <HAL_RCC_OscConfig+0x372>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	019a      	lsls	r2, r3, #6
 8004158:	d5f6      	bpl.n	8004148 <HAL_RCC_OscConfig+0x234>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800415a:	2000      	movs	r0, #0
}
 800415c:	b002      	add	sp, #8
 800415e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004162:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8004166:	481b      	ldr	r0, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x2c0>)
 8004168:	f015 feb8 	bl	8019edc <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	e6dc      	b.n	8003f2a <HAL_RCC_OscConfig+0x16>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	025e      	lsls	r6, r3, #9
 8004174:	f53f af26 	bmi.w	8003fc4 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <HAL_RCC_OscConfig+0x2bc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	079d      	lsls	r5, r3, #30
 800417e:	d565      	bpl.n	800424c <HAL_RCC_OscConfig+0x338>
 8004180:	68e3      	ldr	r3, [r4, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d062      	beq.n	800424c <HAL_RCC_OscConfig+0x338>
    return HAL_ERROR;
 8004186:	2001      	movs	r0, #1
}
 8004188:	b002      	add	sp, #8
 800418a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800418e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8004192:	4810      	ldr	r0, [pc, #64]	; (80041d4 <HAL_RCC_OscConfig+0x2c0>)
 8004194:	f015 fea2 	bl	8019edc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	2b1f      	cmp	r3, #31
 800419c:	f67f af06 	bls.w	8003fac <HAL_RCC_OscConfig+0x98>
 80041a0:	f240 119d 	movw	r1, #413	; 0x19d
 80041a4:	480b      	ldr	r0, [pc, #44]	; (80041d4 <HAL_RCC_OscConfig+0x2c0>)
 80041a6:	f015 fe99 	bl	8019edc <assert_failed>
 80041aa:	e6ff      	b.n	8003fac <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 80041ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80041b4:	f7fc ff5c 	bl	8001070 <HAL_GetTick>
 80041b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ba:	e004      	b.n	80041c6 <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fc ff58 	bl	8001070 <HAL_GetTick>
 80041c0:	1b80      	subs	r0, r0, r6
 80041c2:	2802      	cmp	r0, #2
 80041c4:	d85f      	bhi.n	8004286 <HAL_RCC_OscConfig+0x372>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80041c8:	079f      	lsls	r7, r3, #30
 80041ca:	d4f7      	bmi.n	80041bc <HAL_RCC_OscConfig+0x2a8>
 80041cc:	e75e      	b.n	800408c <HAL_RCC_OscConfig+0x178>
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	0801fc80 	.word	0x0801fc80
 80041d8:	40007000 	.word	0x40007000
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80041dc:	f240 11dd 	movw	r1, #477	; 0x1dd
 80041e0:	487b      	ldr	r0, [pc, #492]	; (80043d0 <HAL_RCC_OscConfig+0x4bc>)
 80041e2:	f015 fe7b 	bl	8019edc <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041e6:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80041e8:	4d7a      	ldr	r5, [pc, #488]	; (80043d4 <HAL_RCC_OscConfig+0x4c0>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0de      	beq.n	80041ac <HAL_RCC_OscConfig+0x298>
 80041ee:	e73c      	b.n	800406a <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80041f2:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004204:	e710      	b.n	8004028 <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004206:	f240 214b 	movw	r1, #587	; 0x24b
 800420a:	4871      	ldr	r0, [pc, #452]	; (80043d0 <HAL_RCC_OscConfig+0x4bc>)
 800420c:	f015 fe66 	bl	8019edc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004210:	69a3      	ldr	r3, [r4, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f47f af43 	bne.w	800409e <HAL_RCC_OscConfig+0x18a>
 8004218:	e79f      	b.n	800415a <HAL_RCC_OscConfig+0x246>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800421a:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800421e:	486c      	ldr	r0, [pc, #432]	; (80043d0 <HAL_RCC_OscConfig+0x4bc>)
 8004220:	f015 fe5c 	bl	8019edc <assert_failed>
 8004224:	e68b      	b.n	8003f3e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004226:	4a6b      	ldr	r2, [pc, #428]	; (80043d4 <HAL_RCC_OscConfig+0x4c0>)
 8004228:	6813      	ldr	r3, [r2, #0]
 800422a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004230:	f7fc ff1e 	bl	8001070 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004234:	4e67      	ldr	r6, [pc, #412]	; (80043d4 <HAL_RCC_OscConfig+0x4c0>)
        tickstart = HAL_GetTick();
 8004236:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004238:	e004      	b.n	8004244 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800423a:	f7fc ff19 	bl	8001070 <HAL_GetTick>
 800423e:	1b40      	subs	r0, r0, r5
 8004240:	2864      	cmp	r0, #100	; 0x64
 8004242:	d820      	bhi.n	8004286 <HAL_RCC_OscConfig+0x372>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004244:	6833      	ldr	r3, [r6, #0]
 8004246:	039a      	lsls	r2, r3, #14
 8004248:	d5f7      	bpl.n	800423a <HAL_RCC_OscConfig+0x326>
 800424a:	e6a4      	b.n	8003f96 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424c:	4a61      	ldr	r2, [pc, #388]	; (80043d4 <HAL_RCC_OscConfig+0x4c0>)
 800424e:	6921      	ldr	r1, [r4, #16]
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004256:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800425a:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	071a      	lsls	r2, r3, #28
 8004260:	f57f aed0 	bpl.w	8004004 <HAL_RCC_OscConfig+0xf0>
 8004264:	e6f9      	b.n	800405a <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 8004266:	6833      	ldr	r3, [r6, #0]
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800426e:	f7fc feff 	bl	8001070 <HAL_GetTick>
 8004272:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004274:	6833      	ldr	r3, [r6, #0]
 8004276:	05d9      	lsls	r1, r3, #23
 8004278:	f53f aedb 	bmi.w	8004032 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800427c:	f7fc fef8 	bl	8001070 <HAL_GetTick>
 8004280:	1bc0      	subs	r0, r0, r7
 8004282:	2864      	cmp	r0, #100	; 0x64
 8004284:	d9f6      	bls.n	8004274 <HAL_RCC_OscConfig+0x360>
            return HAL_TIMEOUT;
 8004286:	2003      	movs	r0, #3
}
 8004288:	b002      	add	sp, #8
 800428a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428e:	4d51      	ldr	r5, [pc, #324]	; (80043d4 <HAL_RCC_OscConfig+0x4c0>)
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800429e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80042a0:	f7fc fee6 	bl	8001070 <HAL_GetTick>
 80042a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e004      	b.n	80042b2 <HAL_RCC_OscConfig+0x39e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fc fee2 	bl	8001070 <HAL_GetTick>
 80042ac:	1b80      	subs	r0, r0, r6
 80042ae:	2864      	cmp	r0, #100	; 0x64
 80042b0:	d8e9      	bhi.n	8004286 <HAL_RCC_OscConfig+0x372>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	682b      	ldr	r3, [r5, #0]
 80042b4:	039b      	lsls	r3, r3, #14
 80042b6:	d4f7      	bmi.n	80042a8 <HAL_RCC_OscConfig+0x394>
 80042b8:	e66d      	b.n	8003f96 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ba:	4e46      	ldr	r6, [pc, #280]	; (80043d4 <HAL_RCC_OscConfig+0x4c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	6733      	str	r3, [r6, #112]	; 0x70
 80042c8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80042ca:	f023 0304 	bic.w	r3, r3, #4
 80042ce:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 80042d0:	f7fc fece 	bl	8001070 <HAL_GetTick>
 80042d4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d6:	e004      	b.n	80042e2 <HAL_RCC_OscConfig+0x3ce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f7fc feca 	bl	8001070 <HAL_GetTick>
 80042dc:	1bc0      	subs	r0, r0, r7
 80042de:	4540      	cmp	r0, r8
 80042e0:	d8d1      	bhi.n	8004286 <HAL_RCC_OscConfig+0x372>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80042e4:	079b      	lsls	r3, r3, #30
 80042e6:	d4f7      	bmi.n	80042d8 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	f43f aed2 	beq.w	8004092 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <HAL_RCC_OscConfig+0x4c0>)
 80042f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6413      	str	r3, [r2, #64]	; 0x40
 80042f8:	e6cb      	b.n	8004092 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004302:	f7fc feb5 	bl	8001070 <HAL_GetTick>
 8004306:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004308:	e004      	b.n	8004314 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430a:	f7fc feb1 	bl	8001070 <HAL_GetTick>
 800430e:	1b80      	subs	r0, r0, r6
 8004310:	2802      	cmp	r0, #2
 8004312:	d8b8      	bhi.n	8004286 <HAL_RCC_OscConfig+0x372>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	0799      	lsls	r1, r3, #30
 8004318:	d4f7      	bmi.n	800430a <HAL_RCC_OscConfig+0x3f6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	e670      	b.n	8004000 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431e:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <HAL_RCC_OscConfig+0x4c0>)
 8004320:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004328:	f7fc fea2 	bl	8001070 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432c:	4f29      	ldr	r7, [pc, #164]	; (80043d4 <HAL_RCC_OscConfig+0x4c0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004332:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004334:	e004      	b.n	8004340 <HAL_RCC_OscConfig+0x42c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fc fe9b 	bl	8001070 <HAL_GetTick>
 800433a:	1b80      	subs	r0, r0, r6
 800433c:	4540      	cmp	r0, r8
 800433e:	d8a2      	bhi.n	8004286 <HAL_RCC_OscConfig+0x372>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004342:	079a      	lsls	r2, r3, #30
 8004344:	d5f7      	bpl.n	8004336 <HAL_RCC_OscConfig+0x422>
    if(pwrclkchanged == SET)
 8004346:	2d00      	cmp	r5, #0
 8004348:	f43f aea3 	beq.w	8004092 <HAL_RCC_OscConfig+0x17e>
 800434c:	e7cf      	b.n	80042ee <HAL_RCC_OscConfig+0x3da>
        __HAL_RCC_PLL_DISABLE();
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004354:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004356:	f7fc fe8b 	bl	8001070 <HAL_GetTick>
 800435a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435c:	e004      	b.n	8004368 <HAL_RCC_OscConfig+0x454>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435e:	f7fc fe87 	bl	8001070 <HAL_GetTick>
 8004362:	1b00      	subs	r0, r0, r4
 8004364:	2802      	cmp	r0, #2
 8004366:	d88e      	bhi.n	8004286 <HAL_RCC_OscConfig+0x372>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	019b      	lsls	r3, r3, #6
 800436c:	d4f7      	bmi.n	800435e <HAL_RCC_OscConfig+0x44a>
 800436e:	e6f4      	b.n	800415a <HAL_RCC_OscConfig+0x246>
    return HAL_ERROR;
 8004370:	2001      	movs	r0, #1
}
 8004372:	4770      	bx	lr
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004374:	f240 2157 	movw	r1, #599	; 0x257
 8004378:	4815      	ldr	r0, [pc, #84]	; (80043d0 <HAL_RCC_OscConfig+0x4bc>)
 800437a:	f015 fdaf 	bl	8019edc <assert_failed>
 800437e:	e6b2      	b.n	80040e6 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004380:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e74f      	b.n	8004230 <HAL_RCC_OscConfig+0x31c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004390:	f44f 7115 	mov.w	r1, #596	; 0x254
 8004394:	480e      	ldr	r0, [pc, #56]	; (80043d0 <HAL_RCC_OscConfig+0x4bc>)
 8004396:	f015 fda1 	bl	8019edc <assert_failed>
 800439a:	e68e      	b.n	80040ba <HAL_RCC_OscConfig+0x1a6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800439c:	f240 2156 	movw	r1, #598	; 0x256
 80043a0:	480b      	ldr	r0, [pc, #44]	; (80043d0 <HAL_RCC_OscConfig+0x4bc>)
 80043a2:	f015 fd9b 	bl	8019edc <assert_failed>
 80043a6:	e693      	b.n	80040d0 <HAL_RCC_OscConfig+0x1bc>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80043a8:	f240 2155 	movw	r1, #597	; 0x255
 80043ac:	4808      	ldr	r0, [pc, #32]	; (80043d0 <HAL_RCC_OscConfig+0x4bc>)
 80043ae:	f015 fd95 	bl	8019edc <assert_failed>
 80043b2:	e687      	b.n	80040c4 <HAL_RCC_OscConfig+0x1b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b4:	f042 0204 	orr.w	r2, r2, #4
 80043b8:	671a      	str	r2, [r3, #112]	; 0x70
 80043ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	671a      	str	r2, [r3, #112]	; 0x70
 80043c2:	e7b1      	b.n	8004328 <HAL_RCC_OscConfig+0x414>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80043c4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80043c8:	4801      	ldr	r0, [pc, #4]	; (80043d0 <HAL_RCC_OscConfig+0x4bc>)
 80043ca:	f015 fd87 	bl	8019edc <assert_failed>
 80043ce:	e68f      	b.n	80040f0 <HAL_RCC_OscConfig+0x1dc>
 80043d0:	0801fc80 	.word	0x0801fc80
 80043d4:	40023800 	.word	0x40023800

080043d8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043d8:	2800      	cmp	r0, #0
 80043da:	f000 8117 	beq.w	800460c <HAL_RCC_ClockConfig+0x234>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80043de:	6803      	ldr	r3, [r0, #0]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	2b0e      	cmp	r3, #14
{
 80043e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e8:	4604      	mov	r4, r0
 80043ea:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80043ec:	f200 80e5 	bhi.w	80045ba <HAL_RCC_ClockConfig+0x1e2>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80043f0:	2d0f      	cmp	r5, #15
 80043f2:	f200 80d2 	bhi.w	800459a <HAL_RCC_ClockConfig+0x1c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f6:	4a96      	ldr	r2, [pc, #600]	; (8004650 <HAL_RCC_ClockConfig+0x278>)
 80043f8:	6813      	ldr	r3, [r2, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	42ab      	cmp	r3, r5
 8004400:	d36f      	bcc.n	80044e2 <HAL_RCC_ClockConfig+0x10a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	0798      	lsls	r0, r3, #30
 8004406:	d530      	bpl.n	800446a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	0759      	lsls	r1, r3, #29
 800440a:	d504      	bpl.n	8004416 <HAL_RCC_ClockConfig+0x3e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800440c:	4991      	ldr	r1, [pc, #580]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
 800440e:	688a      	ldr	r2, [r1, #8]
 8004410:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004414:	608a      	str	r2, [r1, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	071a      	lsls	r2, r3, #28
 8004418:	d504      	bpl.n	8004424 <HAL_RCC_ClockConfig+0x4c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800441a:	498e      	ldr	r1, [pc, #568]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
 800441c:	688a      	ldr	r2, [r1, #8]
 800441e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004422:	608a      	str	r2, [r1, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004424:	68a1      	ldr	r1, [r4, #8]
 8004426:	f021 0220 	bic.w	r2, r1, #32
 800442a:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800442e:	2a90      	cmp	r2, #144	; 0x90
 8004430:	bf18      	it	ne
 8004432:	2800      	cmpne	r0, #0
 8004434:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 8004438:	bf14      	ite	ne
 800443a:	2201      	movne	r2, #1
 800443c:	2200      	moveq	r2, #0
 800443e:	29f0      	cmp	r1, #240	; 0xf0
 8004440:	bf0c      	ite	eq
 8004442:	2200      	moveq	r2, #0
 8004444:	f002 0201 	andne.w	r2, r2, #1
 8004448:	28a0      	cmp	r0, #160	; 0xa0
 800444a:	bf0c      	ite	eq
 800444c:	2200      	moveq	r2, #0
 800444e:	f002 0201 	andne.w	r2, r2, #1
 8004452:	b122      	cbz	r2, 800445e <HAL_RCC_ClockConfig+0x86>
 8004454:	f021 0210 	bic.w	r2, r1, #16
 8004458:	2ac0      	cmp	r2, #192	; 0xc0
 800445a:	f040 80e1 	bne.w	8004620 <HAL_RCC_ClockConfig+0x248>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445e:	487d      	ldr	r0, [pc, #500]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
 8004460:	6882      	ldr	r2, [r0, #8]
 8004462:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004466:	4311      	orrs	r1, r2
 8004468:	6081      	str	r1, [r0, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446a:	07df      	lsls	r7, r3, #31
 800446c:	d526      	bpl.n	80044bc <HAL_RCC_ClockConfig+0xe4>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800446e:	6863      	ldr	r3, [r4, #4]
 8004470:	2b02      	cmp	r3, #2
 8004472:	f200 80c2 	bhi.w	80045fa <HAL_RCC_ClockConfig+0x222>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4a77      	ldr	r2, [pc, #476]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004478:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447c:	f000 80b7 	beq.w	80045ee <HAL_RCC_ClockConfig+0x216>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004480:	2b02      	cmp	r3, #2
 8004482:	f000 80b0 	beq.w	80045e6 <HAL_RCC_ClockConfig+0x20e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	0791      	lsls	r1, r2, #30
 8004488:	d528      	bpl.n	80044dc <HAL_RCC_ClockConfig+0x104>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448a:	4e72      	ldr	r6, [pc, #456]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004490:	68b2      	ldr	r2, [r6, #8]
 8004492:	f022 0203 	bic.w	r2, r2, #3
 8004496:	4313      	orrs	r3, r2
 8004498:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800449a:	f7fc fde9 	bl	8001070 <HAL_GetTick>
 800449e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a0:	e005      	b.n	80044ae <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a2:	f7fc fde5 	bl	8001070 <HAL_GetTick>
 80044a6:	1bc0      	subs	r0, r0, r7
 80044a8:	4540      	cmp	r0, r8
 80044aa:	f200 80ad 	bhi.w	8004608 <HAL_RCC_ClockConfig+0x230>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	68b3      	ldr	r3, [r6, #8]
 80044b0:	6862      	ldr	r2, [r4, #4]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80044ba:	d1f2      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xca>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044bc:	4a64      	ldr	r2, [pc, #400]	; (8004650 <HAL_RCC_ClockConfig+0x278>)
 80044be:	6813      	ldr	r3, [r2, #0]
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	42ab      	cmp	r3, r5
 80044c6:	d91a      	bls.n	80044fe <HAL_RCC_ClockConfig+0x126>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c8:	6813      	ldr	r3, [r2, #0]
 80044ca:	f023 030f 	bic.w	r3, r3, #15
 80044ce:	432b      	orrs	r3, r5
 80044d0:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	42ab      	cmp	r3, r5
 80044da:	d010      	beq.n	80044fe <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 80044dc:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 80044de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	f023 030f 	bic.w	r3, r3, #15
 80044e8:	432b      	orrs	r3, r5
 80044ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ec:	6813      	ldr	r3, [r2, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	42ab      	cmp	r3, r5
 80044f4:	d1f2      	bne.n	80044dc <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	0798      	lsls	r0, r3, #30
 80044fa:	d485      	bmi.n	8004408 <HAL_RCC_ClockConfig+0x30>
 80044fc:	e7b5      	b.n	800446a <HAL_RCC_ClockConfig+0x92>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	075a      	lsls	r2, r3, #29
 8004502:	d513      	bpl.n	800452c <HAL_RCC_ClockConfig+0x154>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004504:	68e1      	ldr	r1, [r4, #12]
 8004506:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800450a:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800450e:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 8004512:	bf18      	it	ne
 8004514:	2a00      	cmpne	r2, #0
 8004516:	d003      	beq.n	8004520 <HAL_RCC_ClockConfig+0x148>
 8004518:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800451c:	f040 8088 	bne.w	8004630 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	484c      	ldr	r0, [pc, #304]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
 8004522:	6882      	ldr	r2, [r0, #8]
 8004524:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004528:	430a      	orrs	r2, r1
 800452a:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452c:	071b      	lsls	r3, r3, #28
 800452e:	d513      	bpl.n	8004558 <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004530:	6922      	ldr	r2, [r4, #16]
 8004532:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 8004536:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800453a:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800453e:	bf18      	it	ne
 8004540:	2b00      	cmpne	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_RCC_ClockConfig+0x172>
 8004544:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8004548:	d17a      	bne.n	8004640 <HAL_RCC_ClockConfig+0x268>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800454a:	4942      	ldr	r1, [pc, #264]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
 800454c:	688b      	ldr	r3, [r1, #8]
 800454e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004552:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004556:	608b      	str	r3, [r1, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004558:	493e      	ldr	r1, [pc, #248]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
 800455a:	688b      	ldr	r3, [r1, #8]
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b04      	cmp	r3, #4
 8004562:	d048      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x21e>
 8004564:	2b08      	cmp	r3, #8
 8004566:	d12e      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x1ee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004568:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800456a:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800456c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004570:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004572:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8004576:	d04b      	beq.n	8004610 <HAL_RCC_ClockConfig+0x238>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004578:	4837      	ldr	r0, [pc, #220]	; (8004658 <HAL_RCC_ClockConfig+0x280>)
 800457a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800457e:	2300      	movs	r3, #0
 8004580:	fba1 0100 	umull	r0, r1, r1, r0
 8004584:	f7fc fb90 	bl	8000ca8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004588:	4b32      	ldr	r3, [pc, #200]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004590:	3301      	adds	r3, #1
 8004592:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004594:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8004598:	e016      	b.n	80045c8 <HAL_RCC_ClockConfig+0x1f0>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800459a:	f240 21cb 	movw	r1, #715	; 0x2cb
 800459e:	482f      	ldr	r0, [pc, #188]	; (800465c <HAL_RCC_ClockConfig+0x284>)
 80045a0:	f015 fc9c 	bl	8019edc <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <HAL_RCC_ClockConfig+0x278>)
      return HAL_ERROR;
 80045a6:	2001      	movs	r0, #1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a8:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	6819      	ldr	r1, [r3, #0]
 80045ac:	f021 010f 	bic.w	r1, r1, #15
 80045b0:	430d      	orrs	r5, r1
 80045b2:	601d      	str	r5, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b4:	681b      	ldr	r3, [r3, #0]
}
 80045b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80045ba:	f240 21ca 	movw	r1, #714	; 0x2ca
 80045be:	4827      	ldr	r0, [pc, #156]	; (800465c <HAL_RCC_ClockConfig+0x284>)
 80045c0:	f015 fc8c 	bl	8019edc <assert_failed>
 80045c4:	e714      	b.n	80043f0 <HAL_RCC_ClockConfig+0x18>
      sysclockfreq = HSI_VALUE;
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_RCC_ClockConfig+0x288>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045c8:	4a22      	ldr	r2, [pc, #136]	; (8004654 <HAL_RCC_ClockConfig+0x27c>)
 80045ca:	4826      	ldr	r0, [pc, #152]	; (8004664 <HAL_RCC_ClockConfig+0x28c>)
 80045cc:	6892      	ldr	r2, [r2, #8]
 80045ce:	4926      	ldr	r1, [pc, #152]	; (8004668 <HAL_RCC_ClockConfig+0x290>)
 80045d0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80045d4:	5c82      	ldrb	r2, [r0, r2]
  HAL_InitTick (TICK_INT_PRIORITY);
 80045d6:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045d8:	40d3      	lsrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80045dc:	f7fc fd06 	bl	8000fec <HAL_InitTick>
  return HAL_OK;
 80045e0:	2000      	movs	r0, #0
}
 80045e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e6:	0190      	lsls	r0, r2, #6
 80045e8:	f53f af4f 	bmi.w	800448a <HAL_RCC_ClockConfig+0xb2>
 80045ec:	e776      	b.n	80044dc <HAL_RCC_ClockConfig+0x104>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ee:	0396      	lsls	r6, r2, #14
 80045f0:	f53f af4b 	bmi.w	800448a <HAL_RCC_ClockConfig+0xb2>
 80045f4:	e772      	b.n	80044dc <HAL_RCC_ClockConfig+0x104>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <HAL_RCC_ClockConfig+0x280>)
 80045f8:	e7e6      	b.n	80045c8 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80045fa:	f240 21f6 	movw	r1, #758	; 0x2f6
 80045fe:	4817      	ldr	r0, [pc, #92]	; (800465c <HAL_RCC_ClockConfig+0x284>)
 8004600:	f015 fc6c 	bl	8019edc <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	e736      	b.n	8004476 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8004608:	2003      	movs	r0, #3
 800460a:	e768      	b.n	80044de <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800460c:	2001      	movs	r0, #1
}
 800460e:	4770      	bx	lr
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004610:	4813      	ldr	r0, [pc, #76]	; (8004660 <HAL_RCC_ClockConfig+0x288>)
 8004612:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004616:	fba1 0100 	umull	r0, r1, r1, r0
 800461a:	f7fc fb45 	bl	8000ca8 <__aeabi_uldivmod>
 800461e:	e7b3      	b.n	8004588 <HAL_RCC_ClockConfig+0x1b0>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004620:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004624:	480d      	ldr	r0, [pc, #52]	; (800465c <HAL_RCC_ClockConfig+0x284>)
 8004626:	f015 fc59 	bl	8019edc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462a:	68a1      	ldr	r1, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	e716      	b.n	800445e <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004630:	f240 3133 	movw	r1, #819	; 0x333
 8004634:	4809      	ldr	r0, [pc, #36]	; (800465c <HAL_RCC_ClockConfig+0x284>)
 8004636:	f015 fc51 	bl	8019edc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463a:	68e1      	ldr	r1, [r4, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	e76f      	b.n	8004520 <HAL_RCC_ClockConfig+0x148>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004640:	f240 313a 	movw	r1, #826	; 0x33a
 8004644:	4805      	ldr	r0, [pc, #20]	; (800465c <HAL_RCC_ClockConfig+0x284>)
 8004646:	f015 fc49 	bl	8019edc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800464a:	6922      	ldr	r2, [r4, #16]
 800464c:	e77d      	b.n	800454a <HAL_RCC_ClockConfig+0x172>
 800464e:	bf00      	nop
 8004650:	40023c00 	.word	0x40023c00
 8004654:	40023800 	.word	0x40023800
 8004658:	017d7840 	.word	0x017d7840
 800465c:	0801fc80 	.word	0x0801fc80
 8004660:	00f42400 	.word	0x00f42400
 8004664:	08024f14 	.word	0x08024f14
 8004668:	20000078 	.word	0x20000078

0800466c <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800466c:	4a59      	ldr	r2, [pc, #356]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800466e:	6803      	ldr	r3, [r0, #0]
 8004670:	401a      	ands	r2, r3
{
 8004672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004676:	4604      	mov	r4, r0
 8004678:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800467a:	2a00      	cmp	r2, #0
 800467c:	f000 8306 	beq.w	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x620>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004680:	f013 0601 	ands.w	r6, r3, #1
 8004684:	d00f      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004686:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8004688:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800468c:	f040 8309 	bne.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8004692:	6891      	ldr	r1, [r2, #8]
 8004694:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8004698:	6091      	str	r1, [r2, #8]
 800469a:	6891      	ldr	r1, [r2, #8]
 800469c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800469e:	fab6 f686 	clz	r6, r6
 80046a2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046a4:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046a6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80046aa:	d017      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80046ac:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80046ae:	f435 1280 	bics.w	r2, r5, #1048576	; 0x100000
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80046b4:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80046b8:	f040 8301 	bne.w	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x652>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046bc:	4946      	ldr	r1, [pc, #280]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046be:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046c2:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80046c6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80046ca:	ea42 0205 	orr.w	r2, r2, r5
 80046ce:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046d2:	f000 82e1 	beq.w	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046d6:	fab5 f585 	clz	r5, r5
 80046da:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046dc:	02d9      	lsls	r1, r3, #11
 80046de:	d517      	bpl.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80046e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80046e2:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 80046e6:	d003      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80046e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80046ec:	f040 82e0 	bne.w	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x644>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046f0:	4839      	ldr	r0, [pc, #228]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046f2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046f6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80046fa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80046fe:	ea42 0201 	orr.w	r2, r2, r1
 8004702:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004706:	f000 82ca 	beq.w	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x632>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800470a:	2900      	cmp	r1, #0
 800470c:	bf08      	it	eq
 800470e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004710:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004714:	bf18      	it	ne
 8004716:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004718:	069a      	lsls	r2, r3, #26
 800471a:	f140 8099 	bpl.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800471e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004720:	482e      	ldr	r0, [pc, #184]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8004722:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004726:	bf18      	it	ne
 8004728:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800472c:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 8004730:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	4287      	cmp	r7, r0
 800473c:	bf0c      	ite	eq
 800473e:	2300      	moveq	r3, #0
 8004740:	f003 0301 	andne.w	r3, r3, #1
 8004744:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 8004748:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800474c:	4287      	cmp	r7, r0
 800474e:	bf0c      	ite	eq
 8004750:	2300      	moveq	r3, #0
 8004752:	f003 0301 	andne.w	r3, r3, #1
 8004756:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800475a:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800475e:	4281      	cmp	r1, r0
 8004760:	bf0c      	ite	eq
 8004762:	2300      	moveq	r3, #0
 8004764:	f003 0301 	andne.w	r3, r3, #1
 8004768:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800476c:	4287      	cmp	r7, r0
 800476e:	bf0c      	ite	eq
 8004770:	2300      	moveq	r3, #0
 8004772:	f003 0301 	andne.w	r3, r3, #1
 8004776:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800477a:	4281      	cmp	r1, r0
 800477c:	bf0c      	ite	eq
 800477e:	2300      	moveq	r3, #0
 8004780:	f003 0301 	andne.w	r3, r3, #1
 8004784:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 8004788:	4281      	cmp	r1, r0
 800478a:	bf0c      	ite	eq
 800478c:	2300      	moveq	r3, #0
 800478e:	f003 0301 	andne.w	r3, r3, #1
 8004792:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 8004796:	4281      	cmp	r1, r0
 8004798:	bf0c      	ite	eq
 800479a:	2300      	moveq	r3, #0
 800479c:	f003 0301 	andne.w	r3, r3, #1
 80047a0:	b12b      	cbz	r3, 80047ae <HAL_RCCEx_PeriphCLKConfig+0x142>
 80047a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047a6:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80047a8:	429a      	cmp	r2, r3
 80047aa:	f040 83ed 	bne.w	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x91c>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047b0:	4f0c      	ldr	r7, [pc, #48]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ca:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047cc:	f7fc fc50 	bl	8001070 <HAL_GetTick>
 80047d0:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047d2:	e010      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047d4:	01fffff9 	.word	0x01fffff9
 80047d8:	40023800 	.word	0x40023800
 80047dc:	00020300 	.word	0x00020300
 80047e0:	001c0300 	.word	0x001c0300
 80047e4:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e8:	f7fc fc42 	bl	8001070 <HAL_GetTick>
 80047ec:	eba0 0008 	sub.w	r0, r0, r8
 80047f0:	2864      	cmp	r0, #100	; 0x64
 80047f2:	f200 81d5 	bhi.w	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	05db      	lsls	r3, r3, #23
 80047fa:	d5f5      	bpl.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047fc:	4fab      	ldr	r7, [pc, #684]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004800:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004802:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8004806:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800480a:	d011      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800480c:	4291      	cmp	r1, r2
 800480e:	d00f      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004810:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004812:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004814:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004818:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800481c:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800481e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004820:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004824:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004826:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004828:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800482a:	07d0      	lsls	r0, r2, #31
 800482c:	f100 8324 	bmi.w	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x80c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004830:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004834:	f000 8269 	beq.w	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8004838:	499c      	ldr	r1, [pc, #624]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800483a:	688a      	ldr	r2, [r1, #8]
 800483c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004840:	608a      	str	r2, [r1, #8]
 8004842:	4a9a      	ldr	r2, [pc, #616]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004848:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800484a:	430b      	orrs	r3, r1
 800484c:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	06da      	lsls	r2, r3, #27
 8004852:	d510      	bpl.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004854:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8004856:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800485a:	f040 8284 	bne.w	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x6fa>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800485e:	4a93      	ldr	r2, [pc, #588]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004860:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8004864:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8004868:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800486c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004870:	4339      	orrs	r1, r7
 8004872:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004876:	045f      	lsls	r7, r3, #17
 8004878:	d50f      	bpl.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800487a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800487c:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8004880:	d003      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004882:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004886:	f040 8221 	bne.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x660>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488a:	4888      	ldr	r0, [pc, #544]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800488c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8004890:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004894:	430a      	orrs	r2, r1
 8004896:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800489a:	0418      	lsls	r0, r3, #16
 800489c:	d50f      	bpl.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800489e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80048a0:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 80048a4:	d003      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x242>
 80048a6:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80048aa:	f040 8216 	bne.w	8004cda <HAL_RCCEx_PeriphCLKConfig+0x66e>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ae:	487f      	ldr	r0, [pc, #508]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80048b0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80048b4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80048b8:	430a      	orrs	r2, r1
 80048ba:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048be:	03d9      	lsls	r1, r3, #15
 80048c0:	d50f      	bpl.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80048c2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80048c4:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 80048c8:	d003      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80048ca:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80048ce:	f040 820c 	bne.w	8004cea <HAL_RCCEx_PeriphCLKConfig+0x67e>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048d2:	4876      	ldr	r0, [pc, #472]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80048d4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80048d8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80048dc:	430a      	orrs	r2, r1
 80048de:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048e2:	039a      	lsls	r2, r3, #14
 80048e4:	d50f      	bpl.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80048e6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80048e8:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 80048ec:	d003      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 80048ee:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80048f2:	f040 8202 	bne.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x68e>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048f6:	486d      	ldr	r0, [pc, #436]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80048f8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80048fc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004900:	430a      	orrs	r2, r1
 8004902:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004906:	065f      	lsls	r7, r3, #25
 8004908:	d50b      	bpl.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800490a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800490c:	2903      	cmp	r1, #3
 800490e:	f200 8249 	bhi.w	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x738>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004912:	4866      	ldr	r0, [pc, #408]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004914:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8004918:	f022 0203 	bic.w	r2, r2, #3
 800491c:	430a      	orrs	r2, r1
 800491e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004922:	0618      	lsls	r0, r3, #24
 8004924:	d50c      	bpl.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004926:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004928:	f031 020c 	bics.w	r2, r1, #12
 800492c:	f040 8260 	bne.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x784>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004930:	485e      	ldr	r0, [pc, #376]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004932:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8004936:	f022 020c 	bic.w	r2, r2, #12
 800493a:	430a      	orrs	r2, r1
 800493c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004940:	05d9      	lsls	r1, r3, #23
 8004942:	d50c      	bpl.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004944:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004946:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800494a:	f040 825f 	bne.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x7a0>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800494e:	4857      	ldr	r0, [pc, #348]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004950:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8004954:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004958:	430a      	orrs	r2, r1
 800495a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800495e:	059a      	lsls	r2, r3, #22
 8004960:	d50c      	bpl.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004962:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004964:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 8004968:	f040 8258 	bne.w	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x7b0>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800496c:	484f      	ldr	r0, [pc, #316]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800496e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8004972:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004976:	430a      	orrs	r2, r1
 8004978:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800497c:	055f      	lsls	r7, r3, #21
 800497e:	d50c      	bpl.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004980:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004982:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 8004986:	f040 8251 	bne.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800498a:	4848      	ldr	r0, [pc, #288]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800498c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8004990:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004994:	430a      	orrs	r2, r1
 8004996:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800499a:	0518      	lsls	r0, r3, #20
 800499c:	d50c      	bpl.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800499e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80049a0:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 80049a4:	f040 824a 	bne.w	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x7d0>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049a8:	4840      	ldr	r0, [pc, #256]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80049aa:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80049ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049b2:	430a      	orrs	r2, r1
 80049b4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049b8:	04d9      	lsls	r1, r3, #19
 80049ba:	d50c      	bpl.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80049bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80049be:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 80049c2:	f040 81fd 	bne.w	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x754>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049c6:	4839      	ldr	r0, [pc, #228]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80049c8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80049cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80049d0:	430a      	orrs	r2, r1
 80049d2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049d6:	049a      	lsls	r2, r3, #18
 80049d8:	d50c      	bpl.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80049da:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80049dc:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 80049e0:	f040 81f6 	bne.w	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049e4:	4831      	ldr	r0, [pc, #196]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80049e6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80049ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80049ee:	430a      	orrs	r2, r1
 80049f0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049f4:	025f      	lsls	r7, r3, #9
 80049f6:	d50c      	bpl.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80049f8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80049fa:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 80049fe:	f040 81c1 	bne.w	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x718>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a02:	482a      	ldr	r0, [pc, #168]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004a04:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8004a08:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a12:	0298      	lsls	r0, r3, #10
 8004a14:	d510      	bpl.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004a16:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004a18:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 8004a1c:	f040 81ba 	bne.w	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x728>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a20:	4822      	ldr	r0, [pc, #136]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004a22:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a26:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 8004a2a:	bf08      	it	eq
 8004a2c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a2e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8004a32:	430a      	orrs	r2, r1
 8004a34:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004a38:	f013 0f08 	tst.w	r3, #8
 8004a3c:	bf18      	it	ne
 8004a3e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a40:	0359      	lsls	r1, r3, #13
 8004a42:	d50c      	bpl.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004a44:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004a46:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 8004a4a:	f040 81c9 	bne.w	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x774>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a4e:	4817      	ldr	r0, [pc, #92]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004a50:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8004a54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a5e:	021a      	lsls	r2, r3, #8
 8004a60:	d50d      	bpl.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004a62:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004a66:	f032 5380 	bics.w	r3, r2, #268435456	; 0x10000000
 8004a6a:	f040 8183 	bne.w	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x708>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a6e:	490f      	ldr	r1, [pc, #60]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004a70:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8004a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004a7e:	2e01      	cmp	r6, #1
 8004a80:	f000 8092 	beq.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a8a:	f000 808d 	beq.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a8e:	2d01      	cmp	r5, #1
 8004a90:	d003      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004a92:	2000      	movs	r0, #0
}
 8004a94:	b003      	add	sp, #12
 8004a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8004a9a:	4d04      	ldr	r5, [pc, #16]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004aa4:	f7fc fae4 	bl	8001070 <HAL_GetTick>
 8004aa8:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aaa:	e006      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004aac:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ab0:	f7fc fade 	bl	8001070 <HAL_GetTick>
 8004ab4:	1b80      	subs	r0, r0, r6
 8004ab6:	2864      	cmp	r0, #100	; 0x64
 8004ab8:	d872      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	009f      	lsls	r7, r3, #2
 8004abe:	d4f7      	bmi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x444>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004ac0:	6963      	ldr	r3, [r4, #20]
 8004ac2:	3b32      	subs	r3, #50	; 0x32
 8004ac4:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004ac8:	f200 81fd 	bhi.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	031d      	lsls	r5, r3, #12
 8004ad0:	f100 81e6 	bmi.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8004ad4:	02d8      	lsls	r0, r3, #11
 8004ad6:	d526      	bpl.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ad8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ada:	bb22      	cbnz	r2, 8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004adc:	69a3      	ldr	r3, [r4, #24]
 8004ade:	3b02      	subs	r3, #2
 8004ae0:	2b0d      	cmp	r3, #13
 8004ae2:	f200 823c 	bhi.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004ae6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ae8:	1e59      	subs	r1, r3, #1
 8004aea:	291f      	cmp	r1, #31
 8004aec:	f200 822f 	bhi.w	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004af0:	4ab0      	ldr	r2, [pc, #704]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8004af2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004af6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004afa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004afe:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004b02:	4303      	orrs	r3, r0
 8004b04:	6960      	ldr	r0, [r4, #20]
 8004b06:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004b0a:	69a0      	ldr	r0, [r4, #24]
 8004b0c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b14:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004b18:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004b1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	0299      	lsls	r1, r3, #10
 8004b28:	d504      	bpl.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8004b2a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004b2c:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8004b30:	f000 81f2 	beq.w	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b34:	071a      	lsls	r2, r3, #28
 8004b36:	d522      	bpl.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x512>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004b38:	69e3      	ldr	r3, [r4, #28]
 8004b3a:	3b02      	subs	r3, #2
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	f200 8200 	bhi.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004b42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004b44:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 8004b48:	f040 820f 	bne.w	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b4c:	4a99      	ldr	r2, [pc, #612]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b4e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b50:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b54:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b58:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b60:	430b      	orrs	r3, r1
 8004b62:	69e1      	ldr	r1, [r4, #28]
 8004b64:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004b68:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b70:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004b74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b78:	4303      	orrs	r3, r0
 8004b7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004b7e:	4c8d      	ldr	r4, [pc, #564]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004b88:	f7fc fa72 	bl	8001070 <HAL_GetTick>
 8004b8c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	f53f af7e 	bmi.w	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x426>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b96:	f7fc fa6b 	bl	8001070 <HAL_GetTick>
 8004b9a:	1b40      	subs	r0, r0, r5
 8004b9c:	2864      	cmp	r0, #100	; 0x64
 8004b9e:	d9f6      	bls.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x522>
        return HAL_TIMEOUT;
 8004ba0:	2003      	movs	r0, #3
}
 8004ba2:	b003      	add	sp, #12
 8004ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8004ba8:	4e82      	ldr	r6, [pc, #520]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8004baa:	6833      	ldr	r3, [r6, #0]
 8004bac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bb0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004bb2:	f7fc fa5d 	bl	8001070 <HAL_GetTick>
 8004bb6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x558>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bba:	f7fc fa59 	bl	8001070 <HAL_GetTick>
 8004bbe:	1bc0      	subs	r0, r0, r7
 8004bc0:	2864      	cmp	r0, #100	; 0x64
 8004bc2:	d8ed      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bc4:	6833      	ldr	r3, [r6, #0]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	d4f7      	bmi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	3b32      	subs	r3, #50	; 0x32
 8004bce:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004bd2:	f200 8115 	bhi.w	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	07df      	lsls	r7, r3, #31
 8004bda:	d503      	bpl.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8004bdc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	f000 8134 	beq.w	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004be4:	031e      	lsls	r6, r3, #12
 8004be6:	d504      	bpl.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004be8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004bea:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004bee:	f000 8095 	beq.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004bf2:	02d8      	lsls	r0, r3, #11
 8004bf4:	d504      	bpl.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x594>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bf6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bf8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004bfc:	f000 808e 	beq.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c00:	01d9      	lsls	r1, r3, #7
 8004c02:	d514      	bpl.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004c04:	6927      	ldr	r7, [r4, #16]
 8004c06:	2f03      	cmp	r7, #3
 8004c08:	f200 8176 	bhi.w	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c0c:	4969      	ldr	r1, [pc, #420]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c0e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c10:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c14:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c18:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004c1c:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8004c20:	4332      	orrs	r2, r6
 8004c22:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004c26:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004c2a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c2e:	019a      	lsls	r2, r3, #6
 8004c30:	d51a      	bpl.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	f200 8159 	bhi.w	8004eec <HAL_RCCEx_PeriphCLKConfig+0x880>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004c3a:	68a3      	ldr	r3, [r4, #8]
 8004c3c:	3b02      	subs	r3, #2
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	f200 814e 	bhi.w	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004c44:	68e2      	ldr	r2, [r4, #12]
 8004c46:	1e93      	subs	r3, r2, #2
 8004c48:	2b0d      	cmp	r3, #13
 8004c4a:	f200 8142 	bhi.w	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x866>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	6861      	ldr	r1, [r4, #4]
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004c58:	68a1      	ldr	r1, [r4, #8]
 8004c5a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004c5e:	4955      	ldr	r1, [pc, #340]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8004c60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004c68:	4e52      	ldr	r6, [pc, #328]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8004c6a:	6833      	ldr	r3, [r6, #0]
 8004c6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c70:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004c72:	f7fc f9fd 	bl	8001070 <HAL_GetTick>
 8004c76:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c78:	e004      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x618>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c7a:	f7fc f9f9 	bl	8001070 <HAL_GetTick>
 8004c7e:	1bc0      	subs	r0, r0, r7
 8004c80:	2864      	cmp	r0, #100	; 0x64
 8004c82:	d88d      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c84:	6833      	ldr	r3, [r6, #0]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	d5f7      	bpl.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x60e>
 8004c8a:	e700      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x422>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004c8c:	2174      	movs	r1, #116	; 0x74
 8004c8e:	484a      	ldr	r0, [pc, #296]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004c90:	f015 f924 	bl	8019edc <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	e4f3      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x14>
  uint32_t pllsaiused = 0;
 8004c98:	2500      	movs	r5, #0
      plli2sused = 1;
 8004c9a:	2601      	movs	r6, #1
 8004c9c:	e51e      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x70>
      plli2sused = 1;
 8004c9e:	2601      	movs	r6, #1
 8004ca0:	e536      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004ca2:	217a      	movs	r1, #122	; 0x7a
 8004ca4:	4844      	ldr	r0, [pc, #272]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004ca6:	f015 f919 	bl	8019edc <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004caa:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	e4ef      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x24>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004cb0:	219e      	movs	r1, #158	; 0x9e
 8004cb2:	4841      	ldr	r0, [pc, #260]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004cb4:	f015 f912 	bl	8019edc <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cb8:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	e518      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004cbe:	218a      	movs	r1, #138	; 0x8a
 8004cc0:	483d      	ldr	r0, [pc, #244]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004cc2:	f015 f90b 	bl	8019edc <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	e4f7      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004ccc:	21fd      	movs	r1, #253	; 0xfd
 8004cce:	483a      	ldr	r0, [pc, #232]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004cd0:	f015 f904 	bl	8019edc <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cd4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	e5d7      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004cda:	f240 1107 	movw	r1, #263	; 0x107
 8004cde:	4836      	ldr	r0, [pc, #216]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004ce0:	f015 f8fc 	bl	8019edc <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ce4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	e5e1      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x242>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004cea:	f240 1111 	movw	r1, #273	; 0x111
 8004cee:	4832      	ldr	r0, [pc, #200]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004cf0:	f015 f8f4 	bl	8019edc <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cf4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	e5eb      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x266>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004cfa:	f240 111b 	movw	r1, #283	; 0x11b
 8004cfe:	482e      	ldr	r0, [pc, #184]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004d00:	f015 f8ec 	bl	8019edc <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d04:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	e5f5      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d0a:	482a      	ldr	r0, [pc, #168]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8004d0c:	492b      	ldr	r1, [pc, #172]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8004d0e:	6882      	ldr	r2, [r0, #8]
 8004d10:	4019      	ands	r1, r3
 8004d12:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004d16:	430a      	orrs	r2, r1
 8004d18:	6082      	str	r2, [r0, #8]
 8004d1a:	e592      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004d1c:	68e3      	ldr	r3, [r4, #12]
 8004d1e:	3b02      	subs	r3, #2
 8004d20:	2b0d      	cmp	r3, #13
 8004d22:	f200 80ca 	bhi.w	8004eba <HAL_RCCEx_PeriphCLKConfig+0x84e>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d28:	1e59      	subs	r1, r3, #1
 8004d2a:	291f      	cmp	r1, #31
 8004d2c:	f200 80bd 	bhi.w	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x83e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d30:	4a20      	ldr	r2, [pc, #128]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8004d32:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d36:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004d42:	4303      	orrs	r3, r0
 8004d44:	6860      	ldr	r0, [r4, #4]
 8004d46:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004d4a:	68e0      	ldr	r0, [r4, #12]
 8004d4c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004d50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d54:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004d58:	f023 031f 	bic.w	r3, r3, #31
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	e74c      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x594>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004d66:	21f3      	movs	r1, #243	; 0xf3
 8004d68:	4813      	ldr	r0, [pc, #76]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004d6a:	f015 f8b7 	bl	8019edc <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d6e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	e574      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004d74:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004d78:	480f      	ldr	r0, [pc, #60]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004d7a:	f015 f8af 	bl	8019edc <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d7e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004d82:	e674      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x402>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004d84:	f240 1175 	movw	r1, #373	; 0x175
 8004d88:	480b      	ldr	r0, [pc, #44]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004d8a:	f015 f8a7 	bl	8019edc <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d8e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	e636      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004d94:	f240 117f 	movw	r1, #383	; 0x17f
 8004d98:	4807      	ldr	r0, [pc, #28]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004d9a:	f015 f89f 	bl	8019edc <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d9e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	e63d      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004da4:	f240 1125 	movw	r1, #293	; 0x125
 8004da8:	4803      	ldr	r0, [pc, #12]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004daa:	f015 f897 	bl	8019edc <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dae:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	e5ae      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004db4:	40023800 	.word	0x40023800
 8004db8:	0801fcb8 	.word	0x0801fcb8
 8004dbc:	0ffffcff 	.word	0x0ffffcff
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004dc0:	f240 1161 	movw	r1, #353	; 0x161
 8004dc4:	4873      	ldr	r0, [pc, #460]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004dc6:	f015 f889 	bl	8019edc <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004dca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	e5fa      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004dd0:	f240 116b 	movw	r1, #363	; 0x16b
 8004dd4:	486f      	ldr	r0, [pc, #444]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004dd6:	f015 f881 	bl	8019edc <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dda:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	e601      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x378>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004de0:	f240 1197 	movw	r1, #407	; 0x197
 8004de4:	486b      	ldr	r0, [pc, #428]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004de6:	f015 f879 	bl	8019edc <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dea:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	e62e      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004df0:	f240 112f 	movw	r1, #303	; 0x12f
 8004df4:	4867      	ldr	r0, [pc, #412]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004df6:	f015 f871 	bl	8019edc <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dfa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	e597      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004e00:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004e04:	4863      	ldr	r0, [pc, #396]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004e06:	f015 f869 	bl	8019edc <assert_failed>
 8004e0a:	e6e4      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004e0c:	f240 1139 	movw	r1, #313	; 0x139
 8004e10:	4860      	ldr	r0, [pc, #384]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004e12:	f015 f863 	bl	8019edc <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e16:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	e598      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004e1c:	f240 1143 	movw	r1, #323	; 0x143
 8004e20:	485c      	ldr	r0, [pc, #368]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004e22:	f015 f85b 	bl	8019edc <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e26:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	e59f      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x300>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004e2c:	f240 114d 	movw	r1, #333	; 0x14d
 8004e30:	4858      	ldr	r0, [pc, #352]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004e32:	f015 f853 	bl	8019edc <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e36:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	e5a6      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004e3c:	f240 1157 	movw	r1, #343	; 0x157
 8004e40:	4854      	ldr	r0, [pc, #336]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004e42:	f015 f84b 	bl	8019edc <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e46:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	e5ad      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004e4c:	68a7      	ldr	r7, [r4, #8]
 8004e4e:	1eba      	subs	r2, r7, #2
 8004e50:	2a05      	cmp	r2, #5
 8004e52:	d859      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e54:	4950      	ldr	r1, [pc, #320]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x92c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e56:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e58:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e5c:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e60:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8004e64:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 8004e68:	4332      	orrs	r2, r6
 8004e6a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004e6e:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 8004e72:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 8004e76:	e6b5      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x578>
        tickstart = HAL_GetTick();
 8004e78:	f7fc f8fa 	bl	8001070 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004e80:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e82:	e006      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x826>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fc f8f4 	bl	8001070 <HAL_GetTick>
 8004e88:	eba0 0008 	sub.w	r0, r0, r8
 8004e8c:	4548      	cmp	r0, r9
 8004e8e:	f63f ae87 	bhi.w	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x534>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e94:	0799      	lsls	r1, r3, #30
 8004e96:	d5f5      	bpl.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x818>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e9a:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8004e9e:	e4c7      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ea0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	f43f ae1a 	beq.w	8004adc <HAL_RCCEx_PeriphCLKConfig+0x470>
 8004ea8:	e614      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004eaa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004eae:	4839      	ldr	r0, [pc, #228]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004eb0:	f015 f814 	bl	8019edc <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb6:	1e59      	subs	r1, r3, #1
 8004eb8:	e73a      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004eba:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004ebe:	4835      	ldr	r0, [pc, #212]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004ec0:	f015 f80c 	bl	8019edc <assert_failed>
 8004ec4:	e72f      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004ec6:	f240 2146 	movw	r1, #582	; 0x246
 8004eca:	4832      	ldr	r0, [pc, #200]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004ecc:	f015 f806 	bl	8019edc <assert_failed>
 8004ed0:	e5fc      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x460>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004ed2:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004ed6:	482f      	ldr	r0, [pc, #188]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004ed8:	f015 f800 	bl	8019edc <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004edc:	68e2      	ldr	r2, [r4, #12]
 8004ede:	e6b6      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004ee0:	f240 2117 	movw	r1, #535	; 0x217
 8004ee4:	482b      	ldr	r0, [pc, #172]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004ee6:	f014 fff9 	bl	8019edc <assert_failed>
 8004eea:	e6ab      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004eec:	f240 2116 	movw	r1, #534	; 0x216
 8004ef0:	4828      	ldr	r0, [pc, #160]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004ef2:	f014 fff3 	bl	8019edc <assert_failed>
 8004ef6:	e6a0      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004ef8:	f240 2107 	movw	r1, #519	; 0x207
 8004efc:	4825      	ldr	r0, [pc, #148]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004efe:	f014 ffed 	bl	8019edc <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f02:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	e681      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004f08:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004f0c:	4821      	ldr	r0, [pc, #132]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004f0e:	f014 ffe5 	bl	8019edc <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f12:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	e79d      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004f18:	6a20      	ldr	r0, [r4, #32]
 8004f1a:	2803      	cmp	r0, #3
 8004f1c:	d82c      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f1e:	491e      	ldr	r1, [pc, #120]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x92c>)
 8004f20:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f24:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f28:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004f2c:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 8004f30:	432a      	orrs	r2, r5
 8004f32:	6965      	ldr	r5, [r4, #20]
 8004f34:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8004f38:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004f3c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 8004f40:	e5f8      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004f42:	f240 2171 	movw	r1, #625	; 0x271
 8004f46:	4813      	ldr	r0, [pc, #76]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004f48:	f014 ffc8 	bl	8019edc <assert_failed>
 8004f4c:	e5f9      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004f4e:	f240 214f 	movw	r1, #591	; 0x24f
 8004f52:	4810      	ldr	r0, [pc, #64]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004f54:	f014 ffc2 	bl	8019edc <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f5a:	1e59      	subs	r1, r3, #1
 8004f5c:	e5c8      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x484>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004f5e:	f240 214d 	movw	r1, #589	; 0x24d
 8004f62:	480c      	ldr	r0, [pc, #48]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004f64:	f014 ffba 	bl	8019edc <assert_failed>
 8004f68:	e5bd      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004f6a:	480a      	ldr	r0, [pc, #40]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004f6c:	f240 2172 	movw	r1, #626	; 0x272
 8004f70:	f014 ffb4 	bl	8019edc <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f76:	e5e9      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004f78:	4806      	ldr	r0, [pc, #24]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004f7a:	f240 2162 	movw	r1, #610	; 0x262
 8004f7e:	f014 ffad 	bl	8019edc <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f82:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	e7ca      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004f88:	21b9      	movs	r1, #185	; 0xb9
 8004f8a:	4802      	ldr	r0, [pc, #8]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x928>)
 8004f8c:	f014 ffa6 	bl	8019edc <assert_failed>
 8004f90:	e40d      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004f92:	bf00      	nop
 8004f94:	0801fcb8 	.word	0x0801fcb8
 8004f98:	40023800 	.word	0x40023800

08004f9c <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8004f9e:	4a54      	ldr	r2, [pc, #336]	; (80050f0 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 8004fa0:	6002      	str	r2, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004fa2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fa6:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8004faa:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fb0:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8004fb4:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fba:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8004fbe:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fc0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fc4:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8004fc8:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8004fca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fce:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8004fd2:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fd8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8004fdc:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fde:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fe2:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8004fe6:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fe8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fec:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8004ff0:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8004ff2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ff6:	f002 021f 	and.w	r2, r2, #31
 8004ffa:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8004ffc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005000:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8005004:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8005006:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800500a:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800500e:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005010:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005014:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005018:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800501a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800501e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005022:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800502a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800502c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005030:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8005034:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005036:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800503a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800503e:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005040:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005044:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005048:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800504a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800504e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005052:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005054:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005058:	f002 0203 	and.w	r2, r2, #3
 800505c:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800505e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005062:	f002 020c 	and.w	r2, r2, #12
 8005066:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8005068:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800506c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005070:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005072:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005076:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800507a:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800507c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005080:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005084:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8005086:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800508a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800508e:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005090:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005094:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8005098:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800509a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800509e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80050a2:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80050a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050a8:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80050ac:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80050ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050b2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80050b6:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80050b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050bc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80050c0:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80050c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050c6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80050ca:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80050ce:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80050d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80050d2:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80050d6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80050da:	430a      	orrs	r2, r1
 80050dc:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80050de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80050e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e6:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40023800 	.word	0x40023800
 80050f0:	00fffff1 	.word	0x00fffff1

080050f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80050f4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80050f8:	d02f      	beq.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80050fa:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80050fe:	d12a      	bne.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005100:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005102:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005106:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 800510a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800510e:	d031      	beq.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8005110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005114:	d02c      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005116:	b9f3      	cbnz	r3, 8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005118:	6853      	ldr	r3, [r2, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800511a:	6851      	ldr	r1, [r2, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800511c:	025a      	lsls	r2, r3, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800511e:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005120:	f001 013f 	and.w	r1, r1, #63	; 0x3f
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005124:	bf54      	ite	pl
 8005126:	4824      	ldrpl	r0, [pc, #144]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005128:	4824      	ldrmi	r0, [pc, #144]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800512a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800512e:	fbb0 f1f1 	udiv	r1, r0, r1
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005132:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005136:	f3c2 6203 	ubfx	r2, r2, #24, #4

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800513a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800513e:	f3c0 1088 	ubfx	r0, r0, #6, #9
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005142:	f3c3 2304 	ubfx	r3, r3, #8, #5
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005146:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800514a:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800514c:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 8005150:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8005154:	4770      	bx	lr
    switch (saiclocksource)
 8005156:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8005158:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 800515a:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800515c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005160:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 8005164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005168:	d004      	beq.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 800516a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800516e:	d1d2      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005170:	4813      	ldr	r0, [pc, #76]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8005172:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005174:	6853      	ldr	r3, [r2, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005176:	6851      	ldr	r1, [r2, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005178:	025b      	lsls	r3, r3, #9
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800517c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005180:	bf54      	ite	pl
 8005182:	480d      	ldrpl	r0, [pc, #52]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005184:	480d      	ldrmi	r0, [pc, #52]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005186:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800518a:	fbb0 f1f1 	udiv	r1, r0, r1
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800518e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005192:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800519a:	f3c0 1088 	ubfx	r0, r0, #6, #9
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800519e:	f003 031f 	and.w	r3, r3, #31
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80051a2:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80051a6:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80051a8:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 80051ac:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00f42400 	.word	0x00f42400
 80051bc:	017d7840 	.word	0x017d7840
 80051c0:	00bb8000 	.word	0x00bb8000

080051c4 <HAL_SAI_Init>:
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80051c4:	2800      	cmp	r0, #0
 80051c6:	f000 827f 	beq.w	80056c8 <HAL_SAI_Init+0x504>
  {
    return HAL_ERROR;
  }

  /* check the instance */
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 80051ca:	6802      	ldr	r2, [r0, #0]
 80051cc:	49ae      	ldr	r1, [pc, #696]	; (8005488 <HAL_SAI_Init+0x2c4>)
{
 80051ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 80051d0:	4bae      	ldr	r3, [pc, #696]	; (800548c <HAL_SAI_Init+0x2c8>)
 80051d2:	4604      	mov	r4, r0
 80051d4:	48ae      	ldr	r0, [pc, #696]	; (8005490 <HAL_SAI_Init+0x2cc>)
 80051d6:	429a      	cmp	r2, r3
 80051d8:	bf18      	it	ne
 80051da:	4282      	cmpne	r2, r0
 80051dc:	bf14      	ite	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	2300      	moveq	r3, #0
 80051e2:	428a      	cmp	r2, r1
 80051e4:	bf0c      	ite	eq
 80051e6:	2300      	moveq	r3, #0
 80051e8:	f003 0301 	andne.w	r3, r3, #1
 80051ec:	b11b      	cbz	r3, 80051f6 <HAL_SAI_Init+0x32>
 80051ee:	4ba9      	ldr	r3, [pc, #676]	; (8005494 <HAL_SAI_Init+0x2d0>)
 80051f0:	429a      	cmp	r2, r3
 80051f2:	f040 8232 	bne.w	800565a <HAL_SAI_Init+0x496>

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 80051f6:	69e2      	ldr	r2, [r4, #28]
 80051f8:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80051fc:	4ba6      	ldr	r3, [pc, #664]	; (8005498 <HAL_SAI_Init+0x2d4>)
 80051fe:	48a7      	ldr	r0, [pc, #668]	; (800549c <HAL_SAI_Init+0x2d8>)
 8005200:	429a      	cmp	r2, r3
 8005202:	bf18      	it	ne
 8005204:	4282      	cmpne	r2, r0
 8005206:	f64a 4044 	movw	r0, #44100	; 0xac44
 800520a:	bf14      	ite	ne
 800520c:	2301      	movne	r3, #1
 800520e:	2300      	moveq	r3, #0
 8005210:	428a      	cmp	r2, r1
 8005212:	bf0c      	ite	eq
 8005214:	2300      	moveq	r3, #0
 8005216:	f003 0301 	andne.w	r3, r3, #1
 800521a:	f245 6122 	movw	r1, #22050	; 0x5622
 800521e:	4282      	cmp	r2, r0
 8005220:	bf0c      	ite	eq
 8005222:	2300      	moveq	r3, #0
 8005224:	f003 0301 	andne.w	r3, r3, #1
 8005228:	f5b2 4ffa 	cmp.w	r2, #32000	; 0x7d00
 800522c:	bf0c      	ite	eq
 800522e:	2300      	moveq	r3, #0
 8005230:	f003 0301 	andne.w	r3, r3, #1
 8005234:	428a      	cmp	r2, r1
 8005236:	bf0c      	ite	eq
 8005238:	2300      	moveq	r3, #0
 800523a:	f003 0301 	andne.w	r3, r3, #1
 800523e:	f642 3111 	movw	r1, #11025	; 0x2b11
 8005242:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
 8005246:	bf0c      	ite	eq
 8005248:	2300      	moveq	r3, #0
 800524a:	f003 0301 	andne.w	r3, r3, #1
 800524e:	428a      	cmp	r2, r1
 8005250:	bf0c      	ite	eq
 8005252:	2300      	moveq	r3, #0
 8005254:	f003 0301 	andne.w	r3, r3, #1
 8005258:	f5b2 5ffa 	cmp.w	r2, #8000	; 0x1f40
 800525c:	bf0c      	ite	eq
 800525e:	2300      	moveq	r3, #0
 8005260:	f003 0301 	andne.w	r3, r3, #1
 8005264:	b113      	cbz	r3, 800526c <HAL_SAI_Init+0xa8>
 8005266:	2a00      	cmp	r2, #0
 8005268:	f040 8230 	bne.w	80056cc <HAL_SAI_Init+0x508>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 800526c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800526e:	f033 0204 	bics.w	r2, r3, #4
 8005272:	d002      	beq.n	800527a <HAL_SAI_Init+0xb6>
 8005274:	2b08      	cmp	r3, #8
 8005276:	f040 817e 	bne.w	8005576 <HAL_SAI_Init+0x3b2>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 800527a:	6863      	ldr	r3, [r4, #4]
 800527c:	2b03      	cmp	r3, #3
 800527e:	f200 8183 	bhi.w	8005588 <HAL_SAI_Init+0x3c4>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 8005282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005284:	f023 0220 	bic.w	r2, r3, #32
 8005288:	2a80      	cmp	r2, #128	; 0x80
 800528a:	d004      	beq.n	8005296 <HAL_SAI_Init+0xd2>
 800528c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	f040 81ee 	bne.w	8005672 <HAL_SAI_Init+0x4ae>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 8005296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005298:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800529c:	f040 81a7 	bne.w	80055ee <HAL_SAI_Init+0x42a>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 80052a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	f200 80b9 	bhi.w	800541a <HAL_SAI_Init+0x256>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 80052a8:	68a3      	ldr	r3, [r4, #8]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	f200 80be 	bhi.w	800542c <HAL_SAI_Init+0x268>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 80052b0:	6923      	ldr	r3, [r4, #16]
 80052b2:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80052b6:	f040 80c3 	bne.w	8005440 <HAL_SAI_Init+0x27c>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 80052ba:	6963      	ldr	r3, [r4, #20]
 80052bc:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 80052c0:	f040 80c8 	bne.w	8005454 <HAL_SAI_Init+0x290>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 80052c4:	69a3      	ldr	r3, [r4, #24]
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	f200 80cd 	bhi.w	8005466 <HAL_SAI_Init+0x2a2>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 80052cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ce:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80052d2:	f040 80d2 	bne.w	800547a <HAL_SAI_Init+0x2b6>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 80052d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052d8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80052dc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80052e0:	f5b1 4f20 	cmp.w	r1, #40960	; 0xa000
 80052e4:	bf18      	it	ne
 80052e6:	2a00      	cmpne	r2, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_SAI_Init+0x12e>
 80052ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052ee:	f040 81ba 	bne.w	8005666 <HAL_SAI_Init+0x4a2>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 80052f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052f4:	f033 0310 	bics.w	r3, r3, #16
 80052f8:	f040 81a9 	bne.w	800564e <HAL_SAI_Init+0x48a>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 80052fc:	68e3      	ldr	r3, [r4, #12]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	f200 819f 	bhi.w	8005642 <HAL_SAI_Init+0x47e>

  /* Check the SAI Block Frame parameters */
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8005304:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005306:	3b08      	subs	r3, #8
 8005308:	2bf8      	cmp	r3, #248	; 0xf8
 800530a:	f200 8194 	bhi.w	8005636 <HAL_SAI_Init+0x472>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800530e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005310:	3b01      	subs	r3, #1
 8005312:	2b7f      	cmp	r3, #127	; 0x7f
 8005314:	f200 8189 	bhi.w	800562a <HAL_SAI_Init+0x466>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 8005318:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800531a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800531e:	f040 817e 	bne.w	800561e <HAL_SAI_Init+0x45a>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 8005322:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005324:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8005328:	f040 8173 	bne.w	8005612 <HAL_SAI_Init+0x44e>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 800532c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800532e:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8005332:	f040 8168 	bne.w	8005606 <HAL_SAI_Init+0x442>

  /* Check the SAI Block Slot parameters */
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 8005336:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005338:	2b18      	cmp	r3, #24
 800533a:	f200 815e 	bhi.w	80055fa <HAL_SAI_Init+0x436>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 800533e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005340:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8005344:	d002      	beq.n	800534c <HAL_SAI_Init+0x188>
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	f040 8124 	bne.w	8005594 <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 800534c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800534e:	3b01      	subs	r3, #1
 8005350:	2b0f      	cmp	r3, #15
 8005352:	f200 8129 	bhi.w	80055a8 <HAL_SAI_Init+0x3e4>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 8005356:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535c:	f080 812e 	bcs.w	80055bc <HAL_SAI_Init+0x3f8>

  if(hsai->State == HAL_SAI_STATE_RESET)
 8005360:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8005364:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8133 	beq.w	80055d4 <HAL_SAI_Init+0x410>
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800536e:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <HAL_SAI_Init+0x2dc>)
  hsai->State = HAL_SAI_STATE_BUSY;
 8005370:	2002      	movs	r0, #2
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005372:	494c      	ldr	r1, [pc, #304]	; (80054a4 <HAL_SAI_Init+0x2e0>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005374:	6822      	ldr	r2, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005376:	681b      	ldr	r3, [r3, #0]
  hsai->State = HAL_SAI_STATE_BUSY;
 8005378:	f884 007d 	strb.w	r0, [r4, #125]	; 0x7d
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800537c:	fba1 1303 	umull	r1, r3, r1, r3
  __HAL_SAI_DISABLE(hsai);
 8005380:	6811      	ldr	r1, [r2, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005382:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8005384:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005388:	4083      	lsls	r3, r0
  __HAL_SAI_DISABLE(hsai);
 800538a:	6011      	str	r1, [r2, #0]
 800538c:	e002      	b.n	8005394 <HAL_SAI_Init+0x1d0>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800538e:	6811      	ldr	r1, [r2, #0]
 8005390:	03ce      	lsls	r6, r1, #15
 8005392:	d507      	bpl.n	80053a4 <HAL_SAI_Init+0x1e0>
    if (count-- == 0)
 8005394:	3b01      	subs	r3, #1
 8005396:	d2fa      	bcs.n	800538e <HAL_SAI_Init+0x1ca>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005398:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800539c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  switch(hsai->Init.SynchroExt)
 80053a4:	68e3      	ldr	r3, [r4, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	f000 811e 	beq.w	80055e8 <HAL_SAI_Init+0x424>
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	bf15      	itete	ne
 80053b0:	2001      	movne	r0, #1
 80053b2:	2021      	moveq	r0, #33	; 0x21
 80053b4:	2100      	movne	r1, #0
 80053b6:	2120      	moveq	r1, #32
  switch(hsai->Init.Synchro)
 80053b8:	68a3      	ldr	r3, [r4, #8]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	f000 8111 	beq.w	80055e2 <HAL_SAI_Init+0x41e>
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	f000 810d 	beq.w	80055e0 <HAL_SAI_Init+0x41c>
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	bf14      	ite	ne
 80053ca:	2500      	movne	r5, #0
 80053cc:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80053d0:	4b2e      	ldr	r3, [pc, #184]	; (800548c <HAL_SAI_Init+0x2c8>)
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d06c      	beq.n	80054b0 <HAL_SAI_Init+0x2ec>
 80053d6:	3320      	adds	r3, #32
 80053d8:	429a      	cmp	r2, r3
 80053da:	d069      	beq.n	80054b0 <HAL_SAI_Init+0x2ec>
    SAI2->GCR = tmpregisterGCR;
 80053dc:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <HAL_SAI_Init+0x2e4>)
 80053de:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80053e2:	69e3      	ldr	r3, [r4, #28]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d06a      	beq.n	80054be <HAL_SAI_Init+0x2fa>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80053e8:	4b27      	ldr	r3, [pc, #156]	; (8005488 <HAL_SAI_Init+0x2c4>)
 80053ea:	429a      	cmp	r2, r3
 80053ec:	f000 8152 	beq.w	8005694 <HAL_SAI_Init+0x4d0>
 80053f0:	3320      	adds	r3, #32
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	fab3 f383 	clz	r3, r3
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f040 814a 	bne.w	8005694 <HAL_SAI_Init+0x4d0>
    hsai->Init.Mckdiv = tmpval / 10;
 8005400:	4619      	mov	r1, r3
 8005402:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005404:	6863      	ldr	r3, [r4, #4]
 8005406:	f033 0002 	bics.w	r0, r3, #2
 800540a:	d05e      	beq.n	80054ca <HAL_SAI_Init+0x306>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800540c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800540e:	2801      	cmp	r0, #1
 8005410:	bf14      	ite	ne
 8005412:	2000      	movne	r0, #0
 8005414:	f44f 7000 	moveq.w	r0, #512	; 0x200
 8005418:	e05c      	b.n	80054d4 <HAL_SAI_Init+0x310>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 800541a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800541e:	4823      	ldr	r0, [pc, #140]	; (80054ac <HAL_SAI_Init+0x2e8>)
 8005420:	f014 fd5c 	bl	8019edc <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	2b03      	cmp	r3, #3
 8005428:	f67f af42 	bls.w	80052b0 <HAL_SAI_Init+0xec>
 800542c:	f240 1179 	movw	r1, #377	; 0x179
 8005430:	481e      	ldr	r0, [pc, #120]	; (80054ac <HAL_SAI_Init+0x2e8>)
 8005432:	f014 fd53 	bl	8019edc <assert_failed>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8005436:	6923      	ldr	r3, [r4, #16]
 8005438:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800543c:	f43f af3d 	beq.w	80052ba <HAL_SAI_Init+0xf6>
 8005440:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8005444:	4819      	ldr	r0, [pc, #100]	; (80054ac <HAL_SAI_Init+0x2e8>)
 8005446:	f014 fd49 	bl	8019edc <assert_failed>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 800544a:	6963      	ldr	r3, [r4, #20]
 800544c:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8005450:	f43f af38 	beq.w	80052c4 <HAL_SAI_Init+0x100>
 8005454:	f240 117b 	movw	r1, #379	; 0x17b
 8005458:	4814      	ldr	r0, [pc, #80]	; (80054ac <HAL_SAI_Init+0x2e8>)
 800545a:	f014 fd3f 	bl	8019edc <assert_failed>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 800545e:	69a3      	ldr	r3, [r4, #24]
 8005460:	2b04      	cmp	r3, #4
 8005462:	f67f af33 	bls.w	80052cc <HAL_SAI_Init+0x108>
 8005466:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800546a:	4810      	ldr	r0, [pc, #64]	; (80054ac <HAL_SAI_Init+0x2e8>)
 800546c:	f014 fd36 	bl	8019edc <assert_failed>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8005470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005472:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8005476:	f43f af2e 	beq.w	80052d6 <HAL_SAI_Init+0x112>
 800547a:	f240 117d 	movw	r1, #381	; 0x17d
 800547e:	480b      	ldr	r0, [pc, #44]	; (80054ac <HAL_SAI_Init+0x2e8>)
 8005480:	f014 fd2c 	bl	8019edc <assert_failed>
 8005484:	e727      	b.n	80052d6 <HAL_SAI_Init+0x112>
 8005486:	bf00      	nop
 8005488:	40015c04 	.word	0x40015c04
 800548c:	40015804 	.word	0x40015804
 8005490:	40015824 	.word	0x40015824
 8005494:	40015c24 	.word	0x40015c24
 8005498:	0002ee00 	.word	0x0002ee00
 800549c:	00017700 	.word	0x00017700
 80054a0:	20000078 	.word	0x20000078
 80054a4:	95cbec1b 	.word	0x95cbec1b
 80054a8:	40015000 	.word	0x40015000
 80054ac:	0801fcf4 	.word	0x0801fcf4
    SAI1->GCR = tmpregisterGCR;
 80054b0:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <HAL_SAI_Init+0x514>)
 80054b2:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80054b6:	69e3      	ldr	r3, [r4, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f040 80e0 	bne.w	800567e <HAL_SAI_Init+0x4ba>
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80054be:	6a23      	ldr	r3, [r4, #32]
 80054c0:	0519      	lsls	r1, r3, #20
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	f033 0002 	bics.w	r0, r3, #2
 80054c8:	d1a0      	bne.n	800540c <HAL_SAI_Init+0x248>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80054ca:	6be6      	ldr	r6, [r4, #60]	; 0x3c
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80054cc:	2e01      	cmp	r6, #1
 80054ce:	bf18      	it	ne
 80054d0:	f44f 7000 	movne.w	r0, #512	; 0x200
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054d4:	6b26      	ldr	r6, [r4, #48]	; 0x30
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054d6:	6817      	ldr	r7, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054d8:	4333      	orrs	r3, r6
 80054da:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80054dc:	4333      	orrs	r3, r6
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80054de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80054e0:	4333      	orrs	r3, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054e4:	4333      	orrs	r3, r6
 80054e6:	6926      	ldr	r6, [r4, #16]
 80054e8:	4333      	orrs	r3, r6
 80054ea:	6966      	ldr	r6, [r4, #20]
 80054ec:	4333      	orrs	r3, r6
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054ee:	4e7b      	ldr	r6, [pc, #492]	; (80056dc <HAL_SAI_Init+0x518>)
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054f0:	432b      	orrs	r3, r5
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054f2:	403e      	ands	r6, r7
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80054f4:	4d7a      	ldr	r5, [pc, #488]	; (80056e0 <HAL_SAI_Init+0x51c>)
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054f6:	430b      	orrs	r3, r1
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80054f8:	69a1      	ldr	r1, [r4, #24]
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054fa:	6016      	str	r6, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054fc:	6816      	ldr	r6, [r2, #0]
 80054fe:	4333      	orrs	r3, r6
 8005500:	4303      	orrs	r3, r0
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005502:	4878      	ldr	r0, [pc, #480]	; (80056e4 <HAL_SAI_Init+0x520>)
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005504:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005506:	6853      	ldr	r3, [r2, #4]
 8005508:	401d      	ands	r5, r3
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800550a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800550c:	4319      	orrs	r1, r3
 800550e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005510:	6055      	str	r5, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005512:	4319      	orrs	r1, r3
 8005514:	6855      	ldr	r5, [r2, #4]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005516:	6d23      	ldr	r3, [r4, #80]	; 0x50
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005518:	4329      	orrs	r1, r5
 800551a:	6051      	str	r1, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800551c:	6891      	ldr	r1, [r2, #8]
 800551e:	4008      	ands	r0, r1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005520:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005522:	430b      	orrs	r3, r1
 8005524:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005526:	6090      	str	r0, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005528:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800552c:	430b      	orrs	r3, r1
 800552e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005530:	6895      	ldr	r5, [r2, #8]
 8005532:	3901      	subs	r1, #1
 8005534:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005536:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005538:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800553a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800553e:	432b      	orrs	r3, r5
 8005540:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005542:	68d1      	ldr	r1, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005544:	e9d4 3515 	ldrd	r3, r5, [r4, #84]	; 0x54
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005548:	4001      	ands	r1, r0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800554a:	432b      	orrs	r3, r5
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800554c:	60d1      	str	r1, [r2, #12]
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800554e:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005550:	68d0      	ldr	r0, [r2, #12]
 8005552:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005556:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005558:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800555a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800555e:	2100      	movs	r1, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005560:	4303      	orrs	r3, r0
  return HAL_OK;
 8005562:	4608      	mov	r0, r1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005564:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8005566:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005568:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 800556c:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8005570:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8005574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 8005576:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800557a:	485b      	ldr	r0, [pc, #364]	; (80056e8 <HAL_SAI_Init+0x524>)
 800557c:	f014 fcae 	bl	8019edc <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 8005580:	6863      	ldr	r3, [r4, #4]
 8005582:	2b03      	cmp	r3, #3
 8005584:	f67f ae7d 	bls.w	8005282 <HAL_SAI_Init+0xbe>
 8005588:	f240 1175 	movw	r1, #373	; 0x175
 800558c:	4856      	ldr	r0, [pc, #344]	; (80056e8 <HAL_SAI_Init+0x524>)
 800558e:	f014 fca5 	bl	8019edc <assert_failed>
 8005592:	e676      	b.n	8005282 <HAL_SAI_Init+0xbe>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 8005594:	f240 118b 	movw	r1, #395	; 0x18b
 8005598:	4853      	ldr	r0, [pc, #332]	; (80056e8 <HAL_SAI_Init+0x524>)
 800559a:	f014 fc9f 	bl	8019edc <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 800559e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80055a0:	3b01      	subs	r3, #1
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	f67f aed7 	bls.w	8005356 <HAL_SAI_Init+0x192>
 80055a8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80055ac:	484e      	ldr	r0, [pc, #312]	; (80056e8 <HAL_SAI_Init+0x524>)
 80055ae:	f014 fc95 	bl	8019edc <assert_failed>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 80055b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b8:	f4ff aed2 	bcc.w	8005360 <HAL_SAI_Init+0x19c>
 80055bc:	f240 118d 	movw	r1, #397	; 0x18d
 80055c0:	4849      	ldr	r0, [pc, #292]	; (80056e8 <HAL_SAI_Init+0x524>)
 80055c2:	f014 fc8b 	bl	8019edc <assert_failed>
  if(hsai->State == HAL_SAI_STATE_RESET)
 80055c6:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80055ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f47f aecd 	bne.w	800536e <HAL_SAI_Init+0x1aa>
    HAL_SAI_MspInit(hsai);
 80055d4:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 80055d6:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80055da:	f016 fa4d 	bl	801ba78 <HAL_SAI_MspInit>
 80055de:	e6c6      	b.n	800536e <HAL_SAI_Init+0x1aa>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80055e0:	4601      	mov	r1, r0
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80055e2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80055e6:	e6f3      	b.n	80053d0 <HAL_SAI_Init+0x20c>
  switch(hsai->Init.SynchroExt)
 80055e8:	2011      	movs	r0, #17
 80055ea:	2110      	movs	r1, #16
 80055ec:	e6e4      	b.n	80053b8 <HAL_SAI_Init+0x1f4>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 80055ee:	f240 1177 	movw	r1, #375	; 0x177
 80055f2:	483d      	ldr	r0, [pc, #244]	; (80056e8 <HAL_SAI_Init+0x524>)
 80055f4:	f014 fc72 	bl	8019edc <assert_failed>
 80055f8:	e652      	b.n	80052a0 <HAL_SAI_Init+0xdc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 80055fa:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80055fe:	483a      	ldr	r0, [pc, #232]	; (80056e8 <HAL_SAI_Init+0x524>)
 8005600:	f014 fc6c 	bl	8019edc <assert_failed>
 8005604:	e69b      	b.n	800533e <HAL_SAI_Init+0x17a>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 8005606:	f240 1187 	movw	r1, #391	; 0x187
 800560a:	4837      	ldr	r0, [pc, #220]	; (80056e8 <HAL_SAI_Init+0x524>)
 800560c:	f014 fc66 	bl	8019edc <assert_failed>
 8005610:	e691      	b.n	8005336 <HAL_SAI_Init+0x172>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 8005612:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8005616:	4834      	ldr	r0, [pc, #208]	; (80056e8 <HAL_SAI_Init+0x524>)
 8005618:	f014 fc60 	bl	8019edc <assert_failed>
 800561c:	e686      	b.n	800532c <HAL_SAI_Init+0x168>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800561e:	f240 1185 	movw	r1, #389	; 0x185
 8005622:	4831      	ldr	r0, [pc, #196]	; (80056e8 <HAL_SAI_Init+0x524>)
 8005624:	f014 fc5a 	bl	8019edc <assert_failed>
 8005628:	e67b      	b.n	8005322 <HAL_SAI_Init+0x15e>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800562a:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800562e:	482e      	ldr	r0, [pc, #184]	; (80056e8 <HAL_SAI_Init+0x524>)
 8005630:	f014 fc54 	bl	8019edc <assert_failed>
 8005634:	e670      	b.n	8005318 <HAL_SAI_Init+0x154>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8005636:	f240 1183 	movw	r1, #387	; 0x183
 800563a:	482b      	ldr	r0, [pc, #172]	; (80056e8 <HAL_SAI_Init+0x524>)
 800563c:	f014 fc4e 	bl	8019edc <assert_failed>
 8005640:	e665      	b.n	800530e <HAL_SAI_Init+0x14a>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8005642:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005646:	4828      	ldr	r0, [pc, #160]	; (80056e8 <HAL_SAI_Init+0x524>)
 8005648:	f014 fc48 	bl	8019edc <assert_failed>
 800564c:	e65a      	b.n	8005304 <HAL_SAI_Init+0x140>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 800564e:	f240 117f 	movw	r1, #383	; 0x17f
 8005652:	4825      	ldr	r0, [pc, #148]	; (80056e8 <HAL_SAI_Init+0x524>)
 8005654:	f014 fc42 	bl	8019edc <assert_failed>
 8005658:	e650      	b.n	80052fc <HAL_SAI_Init+0x138>
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 800565a:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800565e:	4822      	ldr	r0, [pc, #136]	; (80056e8 <HAL_SAI_Init+0x524>)
 8005660:	f014 fc3c 	bl	8019edc <assert_failed>
 8005664:	e5c7      	b.n	80051f6 <HAL_SAI_Init+0x32>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 8005666:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800566a:	481f      	ldr	r0, [pc, #124]	; (80056e8 <HAL_SAI_Init+0x524>)
 800566c:	f014 fc36 	bl	8019edc <assert_failed>
 8005670:	e63f      	b.n	80052f2 <HAL_SAI_Init+0x12e>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 8005672:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8005676:	481c      	ldr	r0, [pc, #112]	; (80056e8 <HAL_SAI_Init+0x524>)
 8005678:	f014 fc30 	bl	8019edc <assert_failed>
 800567c:	e60b      	b.n	8005296 <HAL_SAI_Init+0xd2>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800567e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005682:	f7ff fd37 	bl	80050f4 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	4b18      	ldr	r3, [pc, #96]	; (80056ec <HAL_SAI_Init+0x528>)
 800568a:	429a      	cmp	r2, r3
 800568c:	d002      	beq.n	8005694 <HAL_SAI_Init+0x4d0>
 800568e:	3320      	adds	r3, #32
 8005690:	429a      	cmp	r2, r3
 8005692:	d104      	bne.n	800569e <HAL_SAI_Init+0x4da>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005694:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005698:	f7ff fd2c 	bl	80050f4 <HAL_RCCEx_GetPeriphCLKFreq>
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800569c:	6822      	ldr	r2, [r4, #0]
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800569e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056a2:	69e1      	ldr	r1, [r4, #28]
 80056a4:	0043      	lsls	r3, r0, #1
    hsai->Init.Mckdiv = tmpval / 10;
 80056a6:	4812      	ldr	r0, [pc, #72]	; (80056f0 <HAL_SAI_Init+0x52c>)
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80056a8:	0249      	lsls	r1, r1, #9
 80056aa:	fbb3 f3f1 	udiv	r3, r3, r1
    hsai->Init.Mckdiv = tmpval / 10;
 80056ae:	fba0 1003 	umull	r1, r0, r0, r3
 80056b2:	08c0      	lsrs	r0, r0, #3
    if((tmpval % 10) > 8)
 80056b4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80056b8:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80056bc:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv+= 1;
 80056be:	bf08      	it	eq
 80056c0:	3001      	addeq	r0, #1
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80056c2:	0501      	lsls	r1, r0, #20
      hsai->Init.Mckdiv+= 1;
 80056c4:	6220      	str	r0, [r4, #32]
 80056c6:	e6fc      	b.n	80054c2 <HAL_SAI_Init+0x2fe>
    return HAL_ERROR;
 80056c8:	2001      	movs	r0, #1
}
 80056ca:	4770      	bx	lr
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 80056cc:	f240 1173 	movw	r1, #371	; 0x173
 80056d0:	4805      	ldr	r0, [pc, #20]	; (80056e8 <HAL_SAI_Init+0x524>)
 80056d2:	f014 fc03 	bl	8019edc <assert_failed>
 80056d6:	e5c9      	b.n	800526c <HAL_SAI_Init+0xa8>
 80056d8:	40015000 	.word	0x40015000
 80056dc:	ff05c010 	.word	0xff05c010
 80056e0:	ffff1ff0 	.word	0xffff1ff0
 80056e4:	fff88000 	.word	0xfff88000
 80056e8:	0801fcf4 	.word	0x0801fcf4
 80056ec:	40015c04 	.word	0x40015c04
 80056f0:	cccccccd 	.word	0xcccccccd

080056f4 <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
 80056f4:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80056f8:	2a01      	cmp	r2, #1
 80056fa:	d00d      	beq.n	8005718 <HAL_SAI_DMAPause+0x24>
 80056fc:	4603      	mov	r3, r0
  __HAL_UNLOCK(hsai);
 80056fe:	2100      	movs	r1, #0
{
 8005700:	b410      	push	{r4}
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005702:	6804      	ldr	r4, [r0, #0]
  return HAL_OK;
 8005704:	4608      	mov	r0, r1
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800570c:	6022      	str	r2, [r4, #0]
  __HAL_UNLOCK(hsai);
 800570e:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8005712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005716:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8005718:	2002      	movs	r0, #2
}
 800571a:	4770      	bx	lr

0800571c <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
 800571c:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
{
 8005720:	4603      	mov	r3, r0
  __HAL_LOCK(hsai);
 8005722:	2a01      	cmp	r2, #1
 8005724:	d010      	beq.n	8005748 <HAL_SAI_DMAResume+0x2c>
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005726:	6802      	ldr	r2, [r0, #0]
 8005728:	6811      	ldr	r1, [r2, #0]
 800572a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800572e:	6011      	str	r1, [r2, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005730:	6811      	ldr	r1, [r2, #0]
 8005732:	03c9      	lsls	r1, r1, #15
 8005734:	d403      	bmi.n	800573e <HAL_SAI_DMAResume+0x22>
    __HAL_SAI_ENABLE(hsai);
 8005736:	6811      	ldr	r1, [r2, #0]
 8005738:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800573c:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hsai);
 800573e:	2200      	movs	r2, #0
  return HAL_OK;
 8005740:	4610      	mov	r0, r2
  __HAL_UNLOCK(hsai);
 8005742:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  return HAL_OK;
 8005746:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8005748:	2002      	movs	r0, #2
}
 800574a:	4770      	bx	lr

0800574c <HAL_SAI_DMAStop>:
{
 800574c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 800574e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d058      	beq.n	8005808 <HAL_SAI_DMAStop+0xbc>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005756:	6802      	ldr	r2, [r0, #0]
 8005758:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 800575a:	2501      	movs	r5, #1
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800575c:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  __HAL_LOCK(hsai);
 800575e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005768:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800576a:	b118      	cbz	r0, 8005774 <HAL_SAI_DMAStop+0x28>
 800576c:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8005770:	2b12      	cmp	r3, #18
 8005772:	d03a      	beq.n	80057ea <HAL_SAI_DMAStop+0x9e>
  HAL_StatusTypeDef status = HAL_OK;
 8005774:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8005776:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005778:	b118      	cbz	r0, 8005782 <HAL_SAI_DMAStop+0x36>
 800577a:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800577e:	2b22      	cmp	r3, #34	; 0x22
 8005780:	d023      	beq.n	80057ca <HAL_SAI_DMAStop+0x7e>
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005782:	4b23      	ldr	r3, [pc, #140]	; (8005810 <HAL_SAI_DMAStop+0xc4>)
 8005784:	4a23      	ldr	r2, [pc, #140]	; (8005814 <HAL_SAI_DMAStop+0xc8>)
  __HAL_SAI_DISABLE(hsai);
 8005786:	6821      	ldr	r1, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
 800578e:	680a      	ldr	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005790:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8005792:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005796:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8005798:	600a      	str	r2, [r1, #0]
 800579a:	e002      	b.n	80057a2 <HAL_SAI_DMAStop+0x56>
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800579c:	680a      	ldr	r2, [r1, #0]
 800579e:	03d2      	lsls	r2, r2, #15
 80057a0:	d507      	bpl.n	80057b2 <HAL_SAI_DMAStop+0x66>
    if (count-- == 0)
 80057a2:	3b01      	subs	r3, #1
 80057a4:	d2fa      	bcs.n	800579c <HAL_SAI_DMAStop+0x50>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80057a6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80057aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80057b2:	684b      	ldr	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80057b4:	2201      	movs	r2, #1
}
 80057b6:	4628      	mov	r0, r5
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hsai);
 80057be:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80057c0:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80057c4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80057c8:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80057ca:	f7fb ff2f 	bl	800162c <HAL_DMA_Abort>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d0d7      	beq.n	8005782 <HAL_SAI_DMAStop+0x36>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80057d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	2b80      	cmp	r3, #128	; 0x80
 80057d8:	d0d3      	beq.n	8005782 <HAL_SAI_DMAStop+0x36>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80057da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 80057de:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80057e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80057e8:	e7cb      	b.n	8005782 <HAL_SAI_DMAStop+0x36>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80057ea:	f7fb ff1f 	bl	800162c <HAL_DMA_Abort>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d0c0      	beq.n	8005774 <HAL_SAI_DMAStop+0x28>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80057f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	2b80      	cmp	r3, #128	; 0x80
 80057f8:	d0bc      	beq.n	8005774 <HAL_SAI_DMAStop+0x28>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80057fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80057fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005802:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8005806:	e7b6      	b.n	8005776 <HAL_SAI_DMAStop+0x2a>
  __HAL_LOCK(hsai);
 8005808:	2502      	movs	r5, #2
}
 800580a:	4628      	mov	r0, r5
 800580c:	bd38      	pop	{r3, r4, r5, pc}
 800580e:	bf00      	nop
 8005810:	20000078 	.word	0x20000078
 8005814:	95cbec1b 	.word	0x95cbec1b

08005818 <HAL_SAI_Transmit_DMA>:
{
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((pData == NULL) || (Size == 0))
 800581a:	2900      	cmp	r1, #0
 800581c:	d04c      	beq.n	80058b8 <HAL_SAI_Transmit_DMA+0xa0>
 800581e:	fab2 f582 	clz	r5, r2
 8005822:	096d      	lsrs	r5, r5, #5
 8005824:	2a00      	cmp	r2, #0
 8005826:	d047      	beq.n	80058b8 <HAL_SAI_Transmit_DMA+0xa0>
 8005828:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_READY)
 800582a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
 800582e:	2801      	cmp	r0, #1
 8005830:	b2c6      	uxtb	r6, r0
 8005832:	d13e      	bne.n	80058b2 <HAL_SAI_Transmit_DMA+0x9a>
    __HAL_LOCK(hsai);
 8005834:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
 8005838:	2801      	cmp	r0, #1
 800583a:	d03a      	beq.n	80058b2 <HAL_SAI_Transmit_DMA+0x9a>
    hsai->XferSize = Size;
 800583c:	462b      	mov	r3, r5
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800583e:	2712      	movs	r7, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005840:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    hsai->XferSize = Size;
 8005844:	f362 030f 	bfi	r3, r2, #0, #16
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005848:	f884 707d 	strb.w	r7, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800584c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->XferSize = Size;
 800584e:	f362 431f 	bfi	r3, r2, #16, #16
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005852:	4f21      	ldr	r7, [pc, #132]	; (80058d8 <HAL_SAI_Transmit_DMA+0xc0>)
    hsai->pBuffPtr = pData;
 8005854:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8005856:	66a3      	str	r3, [r4, #104]	; 0x68
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005858:	4613      	mov	r3, r2
    __HAL_LOCK(hsai);
 800585a:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800585e:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005860:	6407      	str	r7, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005862:	4f1e      	ldr	r7, [pc, #120]	; (80058dc <HAL_SAI_Transmit_DMA+0xc4>)
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005864:	321c      	adds	r2, #28
    hsai->hdmatx->XferAbortCallback = NULL;
 8005866:	6505      	str	r5, [r0, #80]	; 0x50
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005868:	63c7      	str	r7, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800586a:	4f1d      	ldr	r7, [pc, #116]	; (80058e0 <HAL_SAI_Transmit_DMA+0xc8>)
 800586c:	64c7      	str	r7, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800586e:	f7fb fe81 	bl	8001574 <HAL_DMA_Start_IT>
 8005872:	bb20      	cbnz	r0, 80058be <HAL_SAI_Transmit_DMA+0xa6>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	03d2      	lsls	r2, r2, #15
 800587a:	d403      	bmi.n	8005884 <HAL_SAI_Transmit_DMA+0x6c>
      __HAL_SAI_ENABLE(hsai);
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005882:	601a      	str	r2, [r3, #0]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005884:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005886:	2a08      	cmp	r2, #8
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005888:	6862      	ldr	r2, [r4, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800588a:	d01c      	beq.n	80058c6 <HAL_SAI_Transmit_DMA+0xae>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800588c:	2105      	movs	r1, #5
 800588e:	2061      	movs	r0, #97	; 0x61
  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005890:	3a02      	subs	r2, #2
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005892:	2a01      	cmp	r2, #1
 8005894:	bf98      	it	ls
 8005896:	4601      	movls	r1, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005898:	691a      	ldr	r2, [r3, #16]
    __HAL_UNLOCK(hsai);
 800589a:	2000      	movs	r0, #0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800589c:	430a      	orrs	r2, r1
    return HAL_OK;
 800589e:	4606      	mov	r6, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80058a0:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80058a8:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80058aa:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80058ae:	4630      	mov	r0, r6
 80058b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80058b2:	2602      	movs	r6, #2
}
 80058b4:	4630      	mov	r0, r6
 80058b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 80058b8:	2601      	movs	r6, #1
}
 80058ba:	4630      	mov	r0, r6
 80058bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058be:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
 80058c0:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
}
 80058c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80058c6:	f022 0102 	bic.w	r1, r2, #2
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80058ca:	2901      	cmp	r1, #1
 80058cc:	bf0b      	itete	eq
 80058ce:	2115      	moveq	r1, #21
 80058d0:	2105      	movne	r1, #5
 80058d2:	2071      	moveq	r0, #113	; 0x71
 80058d4:	2061      	movne	r0, #97	; 0x61
 80058d6:	e7db      	b.n	8005890 <HAL_SAI_Transmit_DMA+0x78>
 80058d8:	08005949 	.word	0x08005949
 80058dc:	080058e5 	.word	0x080058e5
 80058e0:	08005955 	.word	0x08005955

080058e4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80058e4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80058e6:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80058e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80058f0:	d119      	bne.n	8005926 <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80058f2:	6802      	ldr	r2, [r0, #0]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80058f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hsai->XferCount = 0;
 80058f6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80058fa:	6813      	ldr	r3, [r2, #0]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80058fc:	2908      	cmp	r1, #8
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80058fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005902:	6013      	str	r3, [r2, #0]
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005904:	6843      	ldr	r3, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005906:	d011      	beq.n	800592c <SAI_DMATxCplt+0x48>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005908:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 800590c:	f06f 0105 	mvn.w	r1, #5
  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005910:	3b02      	subs	r3, #2
 8005912:	2b01      	cmp	r3, #1
 8005914:	bf98      	it	ls
 8005916:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005918:	6913      	ldr	r3, [r2, #16]

    hsai->State= HAL_SAI_STATE_READY;
 800591a:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800591e:	400b      	ands	r3, r1
 8005920:	6113      	str	r3, [r2, #16]
    hsai->State= HAL_SAI_STATE_READY;
 8005922:	f880 c07d 	strb.w	ip, [r0, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005926:	f016 faa5 	bl	801be74 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800592a:	bd08      	pop	{r3, pc}
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800592c:	f023 0102 	bic.w	r1, r3, #2
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005930:	2901      	cmp	r1, #1
 8005932:	bf0b      	itete	eq
 8005934:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8005938:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 800593c:	f06f 0115 	mvneq.w	r1, #21
 8005940:	f06f 0105 	mvnne.w	r1, #5
 8005944:	e7e4      	b.n	8005910 <SAI_DMATxCplt+0x2c>
 8005946:	bf00      	nop

08005948 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005948:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800594a:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 800594c:	f016 fad4 	bl	801bef8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005950:	bd08      	pop	{r3, pc}
 8005952:	bf00      	nop

08005954 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005954:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005956:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800595a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800595c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
{
 8005960:	b510      	push	{r4, lr}
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005962:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005966:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005968:	2b01      	cmp	r3, #1
 800596a:	d006      	beq.n	800597a <SAI_DMAError+0x26>
 800596c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005970:	2b01      	cmp	r3, #1
 8005972:	d002      	beq.n	800597a <SAI_DMAError+0x26>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005974:	f016 fb00 	bl	801bf78 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005978:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800597a:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800597c:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <SAI_DMAError+0x70>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800597e:	680a      	ldr	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005980:	681b      	ldr	r3, [r3, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005982:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005986:	4c10      	ldr	r4, [pc, #64]	; (80059c8 <SAI_DMAError+0x74>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005988:	600a      	str	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800598a:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_SAI_DISABLE(hsai);
 800598e:	680a      	ldr	r2, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005990:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8005992:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005996:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8005998:	600a      	str	r2, [r1, #0]
 800599a:	e002      	b.n	80059a2 <SAI_DMAError+0x4e>
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800599c:	680a      	ldr	r2, [r1, #0]
 800599e:	03d2      	lsls	r2, r2, #15
 80059a0:	d507      	bpl.n	80059b2 <SAI_DMAError+0x5e>
    if (count-- == 0)
 80059a2:	3b01      	subs	r3, #1
 80059a4:	d2fa      	bcs.n	800599c <SAI_DMAError+0x48>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80059a6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80059aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ae:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_READY;
 80059b2:	2201      	movs	r2, #1
    hsai->XferCount = 0U;
 80059b4:	2300      	movs	r3, #0
    hsai->State = HAL_SAI_STATE_READY;
 80059b6:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
    hsai->XferCount = 0U;
 80059ba:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  HAL_SAI_ErrorCallback(hsai);
 80059be:	f016 fadb 	bl	801bf78 <HAL_SAI_ErrorCallback>
}
 80059c2:	bd10      	pop	{r4, pc}
 80059c4:	20000078 	.word	0x20000078
 80059c8:	95cbec1b 	.word	0x95cbec1b

080059cc <HAL_SAI_GetState>:
  return hsai->State;
 80059cc:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop

080059d4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80059d4:	b1f0      	cbz	r0, 8005a14 <HAL_SDRAM_Init+0x40>
{   
 80059d6:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80059d8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80059dc:	4604      	mov	r4, r0
 80059de:	460d      	mov	r5, r1
 80059e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059e4:	b18b      	cbz	r3, 8005a0a <HAL_SDRAM_Init+0x36>
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80059e6:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80059e8:	2302      	movs	r3, #2
 80059ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80059ee:	f851 0b04 	ldr.w	r0, [r1], #4
 80059f2:	f001 fa83 	bl	8006efc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80059f6:	6862      	ldr	r2, [r4, #4]
 80059f8:	4629      	mov	r1, r5
 80059fa:	6820      	ldr	r0, [r4, #0]
 80059fc:	f001 fb44 	bl	8007088 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a00:	2301      	movs	r3, #1
  
  return HAL_OK;
 8005a02:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a04:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8005a08:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005a0a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005a0e:	f013 fa0d 	bl	8018e2c <HAL_SDRAM_MspInit>
 8005a12:	e7e8      	b.n	80059e6 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8005a14:	2001      	movs	r0, #1
}
 8005a16:	4770      	bx	lr

08005a18 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005a18:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005a1a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8005a1e:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	b2d8      	uxtb	r0, r3
 8005a24:	d00e      	beq.n	8005a44 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a26:	2302      	movs	r3, #2
 8005a28:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005a2a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a2c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005a30:	f001 fbd2 	bl	80071d8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005a34:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8005a36:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005a38:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005a3e:	2301      	movne	r3, #1
 8005a40:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8005a44:	bd38      	pop	{r3, r4, r5, pc}
 8005a46:	bf00      	nop

08005a48 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005a48:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d00c      	beq.n	8005a6a <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a50:	2302      	movs	r3, #2
{
 8005a52:	b510      	push	{r4, lr}
 8005a54:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005a56:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a58:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005a5c:	f001 fc0e 	bl	800727c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a60:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8005a62:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a64:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8005a68:	bd10      	pop	{r4, pc}
 8005a6a:	b2d8      	uxtb	r0, r3
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop

08005a70 <SPI_EndRxTxTransaction.constprop.0>:
  * @param  hspi SPI handle
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4604      	mov	r4, r0
 8005a74:	460d      	mov	r5, r1
 8005a76:	e004      	b.n	8005a82 <SPI_EndRxTxTransaction.constprop.0+0x12>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a78:	f7fb fafa 	bl	8001070 <HAL_GetTick>
 8005a7c:	1b40      	subs	r0, r0, r5
 8005a7e:	2863      	cmp	r0, #99	; 0x63
 8005a80:	d81b      	bhi.n	8005aba <SPI_EndRxTxTransaction.constprop.0+0x4a>
  while ((hspi->Instance->SR & Fifo) != State)
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8005a8a:	d1f5      	bne.n	8005a78 <SPI_EndRxTxTransaction.constprop.0+0x8>
 8005a8c:	e005      	b.n	8005a9a <SPI_EndRxTxTransaction.constprop.0+0x2a>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a8e:	f7fb faef 	bl	8001070 <HAL_GetTick>
 8005a92:	1b40      	subs	r0, r0, r5
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a94:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a96:	2863      	cmp	r0, #99	; 0x63
 8005a98:	d810      	bhi.n	8005abc <SPI_EndRxTxTransaction.constprop.0+0x4c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	0612      	lsls	r2, r2, #24
 8005a9e:	d4f6      	bmi.n	8005a8e <SPI_EndRxTxTransaction.constprop.0+0x1e>
 8005aa0:	e006      	b.n	8005ab0 <SPI_EndRxTxTransaction.constprop.0+0x40>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005aa2:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005aa4:	f7fb fae4 	bl	8001070 <HAL_GetTick>
 8005aa8:	1b40      	subs	r0, r0, r5
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aaa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005aac:	2863      	cmp	r0, #99	; 0x63
 8005aae:	d805      	bhi.n	8005abc <SPI_EndRxTxTransaction.constprop.0+0x4c>
  while ((hspi->Instance->SR & Fifo) != State)
 8005ab0:	6898      	ldr	r0, [r3, #8]
 8005ab2:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 8005ab6:	d1f4      	bne.n	8005aa2 <SPI_EndRxTxTransaction.constprop.0+0x32>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aba:	6823      	ldr	r3, [r4, #0]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005abc:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005abe:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ac8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aca:	d017      	beq.n	8005afc <SPI_EndRxTxTransaction.constprop.0+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005acc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005ace:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005ad2:	d107      	bne.n	8005ae4 <SPI_EndRxTxTransaction.constprop.0+0x74>
          SPI_RESET_CRC(hspi);
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ae2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005ae4:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 8005ae6:	2200      	movs	r2, #0
    return HAL_TIMEOUT;
 8005ae8:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8005aea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aee:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8005af0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af4:	f043 0320 	orr.w	r3, r3, #32
 8005af8:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005afc:	68a2      	ldr	r2, [r4, #8]
 8005afe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005b02:	d002      	beq.n	8005b0a <SPI_EndRxTxTransaction.constprop.0+0x9a>
 8005b04:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005b08:	d1e0      	bne.n	8005acc <SPI_EndRxTxTransaction.constprop.0+0x5c>
          __HAL_SPI_DISABLE(hspi);
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e7db      	b.n	8005acc <SPI_EndRxTxTransaction.constprop.0+0x5c>

08005b14 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f000 8108 	beq.w	8005d2a <HAL_SPI_Init+0x216>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005b1a:	6802      	ldr	r2, [r0, #0]
 8005b1c:	4b8d      	ldr	r3, [pc, #564]	; (8005d54 <HAL_SPI_Init+0x240>)
 8005b1e:	498e      	ldr	r1, [pc, #568]	; (8005d58 <HAL_SPI_Init+0x244>)
{
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005b24:	488d      	ldr	r0, [pc, #564]	; (8005d5c <HAL_SPI_Init+0x248>)
 8005b26:	429a      	cmp	r2, r3
 8005b28:	bf18      	it	ne
 8005b2a:	4282      	cmpne	r2, r0
 8005b2c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 8005b30:	bf14      	ite	ne
 8005b32:	2301      	movne	r3, #1
 8005b34:	2300      	moveq	r3, #0
 8005b36:	428a      	cmp	r2, r1
 8005b38:	bf0c      	ite	eq
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	f003 0301 	andne.w	r3, r3, #1
 8005b40:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 8005b44:	4282      	cmp	r2, r0
 8005b46:	bf0c      	ite	eq
 8005b48:	2300      	moveq	r3, #0
 8005b4a:	f003 0301 	andne.w	r3, r3, #1
 8005b4e:	428a      	cmp	r2, r1
 8005b50:	bf0c      	ite	eq
 8005b52:	2300      	moveq	r3, #0
 8005b54:	f003 0301 	andne.w	r3, r3, #1
 8005b58:	b11b      	cbz	r3, 8005b62 <HAL_SPI_Init+0x4e>
 8005b5a:	4b81      	ldr	r3, [pc, #516]	; (8005d60 <HAL_SPI_Init+0x24c>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	f040 80de 	bne.w	8005d1e <HAL_SPI_Init+0x20a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	b11b      	cbz	r3, 8005b6e <HAL_SPI_Init+0x5a>
 8005b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b6a:	f040 80a1 	bne.w	8005cb0 <HAL_SPI_Init+0x19c>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005b6e:	68a3      	ldr	r3, [r4, #8]
 8005b70:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8005b74:	d003      	beq.n	8005b7e <HAL_SPI_Init+0x6a>
 8005b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7a:	f040 80b8 	bne.w	8005cee <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005b7e:	68e2      	ldr	r2, [r4, #12]
 8005b80:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8005b84:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 8005b88:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 8005b8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b90:	bf18      	it	ne
 8005b92:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8005ba0:	bf0c      	ite	eq
 8005ba2:	2300      	moveq	r3, #0
 8005ba4:	f003 0301 	andne.w	r3, r3, #1
 8005ba8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005bac:	bf0c      	ite	eq
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	f003 0301 	andne.w	r3, r3, #1
 8005bb4:	b12b      	cbz	r3, 8005bc2 <HAL_SPI_Init+0xae>
 8005bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005bbe:	f040 80c2 	bne.w	8005d46 <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005bc2:	69a3      	ldr	r3, [r4, #24]
 8005bc4:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Init+0xbc>
 8005bca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bce:	d17e      	bne.n	8005cce <HAL_SPI_Init+0x1ba>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005bd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bd2:	f033 0308 	bics.w	r3, r3, #8
 8005bd6:	f040 8084 	bne.w	8005ce2 <HAL_SPI_Init+0x1ce>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005bda:	69e3      	ldr	r3, [r4, #28]
 8005bdc:	f023 0318 	bic.w	r3, r3, #24
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d002      	beq.n	8005bea <HAL_SPI_Init+0xd6>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f040 80a8 	bne.w	8005d3a <HAL_SPI_Init+0x226>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005bea:	6a23      	ldr	r3, [r4, #32]
 8005bec:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8005bf0:	f040 8089 	bne.w	8005d06 <HAL_SPI_Init+0x1f2>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bf6:	f033 0210 	bics.w	r2, r3, #16
 8005bfa:	d15f      	bne.n	8005cbc <HAL_SPI_Init+0x1a8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bfc:	b943      	cbnz	r3, 8005c10 <HAL_SPI_Init+0xfc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	f033 0302 	bics.w	r3, r3, #2
 8005c04:	f040 8093 	bne.w	8005d2e <HAL_SPI_Init+0x21a>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005c08:	6963      	ldr	r3, [r4, #20]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	f200 8081 	bhi.w	8005d12 <HAL_SPI_Init+0x1fe>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c10:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c12:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c16:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d06c      	beq.n	8005cfa <HAL_SPI_Init+0x1e6>
  __HAL_SPI_DISABLE(hspi);
 8005c20:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005c22:	2302      	movs	r3, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c24:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005c26:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005c2a:	680b      	ldr	r3, [r1, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c2c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8005c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c34:	bf8c      	ite	hi
 8005c36:	f04f 0c00 	movhi.w	ip, #0
 8005c3a:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 8005c3e:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c40:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8005c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c48:	d12f      	bne.n	8005caa <HAL_SPI_Init+0x196>
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c4e:	b92b      	cbnz	r3, 8005c5c <HAL_SPI_Init+0x148>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c50:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005c54:	bf8c      	ite	hi
 8005c56:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005c58:	2301      	movls	r3, #1
 8005c5a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c5c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8005c60:	432b      	orrs	r3, r5
 8005c62:	6925      	ldr	r5, [r4, #16]
 8005c64:	432b      	orrs	r3, r5
 8005c66:	6965      	ldr	r5, [r4, #20]
 8005c68:	432b      	orrs	r3, r5
 8005c6a:	e9d4 5606 	ldrd	r5, r6, [r4, #24]
 8005c6e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005c70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c76:	f405 7500 	and.w	r5, r5, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005c7a:	4332      	orrs	r2, r6
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c7c:	6a26      	ldr	r6, [r4, #32]
 8005c7e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005c80:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c82:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005c84:	4332      	orrs	r2, r6
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c86:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c88:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c8a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005c8c:	f00e 0304 	and.w	r3, lr, #4
 8005c90:	431a      	orrs	r2, r3
 8005c92:	ea42 020c 	orr.w	r2, r2, ip
 8005c96:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c98:	69cb      	ldr	r3, [r1, #28]
 8005c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9e:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005ca0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ca2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ca4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005caa:	2000      	movs	r0, #0
 8005cac:	62a0      	str	r0, [r4, #40]	; 0x28
 8005cae:	e7cd      	b.n	8005c4c <HAL_SPI_Init+0x138>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005cb0:	f240 1145 	movw	r1, #325	; 0x145
 8005cb4:	482b      	ldr	r0, [pc, #172]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005cb6:	f014 f911 	bl	8019edc <assert_failed>
 8005cba:	e758      	b.n	8005b6e <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005cbc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005cc0:	4828      	ldr	r0, [pc, #160]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005cc2:	f014 f90b 	bl	8019edc <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1a1      	bne.n	8005c10 <HAL_SPI_Init+0xfc>
 8005ccc:	e797      	b.n	8005bfe <HAL_SPI_Init+0xea>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005cce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005cd2:	4824      	ldr	r0, [pc, #144]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005cd4:	f014 f902 	bl	8019edc <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005cd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cda:	f033 0308 	bics.w	r3, r3, #8
 8005cde:	f43f af7c 	beq.w	8005bda <HAL_SPI_Init+0xc6>
 8005ce2:	f240 1149 	movw	r1, #329	; 0x149
 8005ce6:	481f      	ldr	r0, [pc, #124]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005ce8:	f014 f8f8 	bl	8019edc <assert_failed>
 8005cec:	e775      	b.n	8005bda <HAL_SPI_Init+0xc6>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005cee:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005cf2:	481c      	ldr	r0, [pc, #112]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005cf4:	f014 f8f2 	bl	8019edc <assert_failed>
 8005cf8:	e741      	b.n	8005b7e <HAL_SPI_Init+0x6a>
    HAL_SPI_MspInit(hspi);
 8005cfa:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005cfc:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005d00:	f015 ff7a 	bl	801bbf8 <HAL_SPI_MspInit>
 8005d04:	e78c      	b.n	8005c20 <HAL_SPI_Init+0x10c>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005d06:	f240 114b 	movw	r1, #331	; 0x14b
 8005d0a:	4816      	ldr	r0, [pc, #88]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005d0c:	f014 f8e6 	bl	8019edc <assert_failed>
 8005d10:	e770      	b.n	8005bf4 <HAL_SPI_Init+0xe0>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005d12:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8005d16:	4813      	ldr	r0, [pc, #76]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005d18:	f014 f8e0 	bl	8019edc <assert_failed>
 8005d1c:	e778      	b.n	8005c10 <HAL_SPI_Init+0xfc>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005d1e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005d22:	4810      	ldr	r0, [pc, #64]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005d24:	f014 f8da 	bl	8019edc <assert_failed>
 8005d28:	e71b      	b.n	8005b62 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 8005d2a:	2001      	movs	r0, #1
}
 8005d2c:	4770      	bx	lr
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005d2e:	f240 114f 	movw	r1, #335	; 0x14f
 8005d32:	480c      	ldr	r0, [pc, #48]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005d34:	f014 f8d2 	bl	8019edc <assert_failed>
 8005d38:	e766      	b.n	8005c08 <HAL_SPI_Init+0xf4>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005d3a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005d3e:	4809      	ldr	r0, [pc, #36]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005d40:	f014 f8cc 	bl	8019edc <assert_failed>
 8005d44:	e751      	b.n	8005bea <HAL_SPI_Init+0xd6>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005d46:	f240 1147 	movw	r1, #327	; 0x147
 8005d4a:	4806      	ldr	r0, [pc, #24]	; (8005d64 <HAL_SPI_Init+0x250>)
 8005d4c:	f014 f8c6 	bl	8019edc <assert_failed>
 8005d50:	e737      	b.n	8005bc2 <HAL_SPI_Init+0xae>
 8005d52:	bf00      	nop
 8005d54:	40013000 	.word	0x40013000
 8005d58:	40003c00 	.word	0x40003c00
 8005d5c:	40003800 	.word	0x40003800
 8005d60:	40015400 	.word	0x40015400
 8005d64:	0801fd2c 	.word	0x0801fd2c

08005d68 <HAL_SPI_TransmitReceive_IT>:
{
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005d6c:	6883      	ldr	r3, [r0, #8]
{
 8005d6e:	4604      	mov	r4, r0
 8005d70:	460f      	mov	r7, r1
 8005d72:	4616      	mov	r6, r2
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d14b      	bne.n	8005e10 <HAL_SPI_TransmitReceive_IT+0xa8>
  __HAL_LOCK(hspi);
 8005d78:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d050      	beq.n	8005e22 <HAL_SPI_TransmitReceive_IT+0xba>
 8005d80:	2301      	movs	r3, #1
 8005d82:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8005d86:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d8a:	2b01      	cmp	r3, #1
  tmp_state           = hspi->State;
 8005d8c:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d8e:	d00d      	beq.n	8005dac <HAL_SPI_TransmitReceive_IT+0x44>
 8005d90:	6863      	ldr	r3, [r4, #4]
 8005d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d96:	d004      	beq.n	8005da2 <HAL_SPI_TransmitReceive_IT+0x3a>
    errorcode = HAL_BUSY;
 8005d98:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f7      	bne.n	8005d98 <HAL_SPI_TransmitReceive_IT+0x30>
 8005da8:	2a04      	cmp	r2, #4
 8005daa:	d1f5      	bne.n	8005d98 <HAL_SPI_TransmitReceive_IT+0x30>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dac:	2d00      	cmp	r5, #0
 8005dae:	bf18      	it	ne
 8005db0:	2e00      	cmpne	r6, #0
 8005db2:	d02b      	beq.n	8005e0c <HAL_SPI_TransmitReceive_IT+0xa4>
 8005db4:	b357      	cbz	r7, 8005e0c <HAL_SPI_TransmitReceive_IT+0xa4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005db6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_TransmitReceive_IT+0x5c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dbe:	2305      	movs	r3, #5
 8005dc0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dc4:	68e3      	ldr	r3, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dc6:	2200      	movs	r2, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dc8:	63a7      	str	r7, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dce:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 8005dd0:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005dd2:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005dd4:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005dd6:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005dda:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dde:	d924      	bls.n	8005e2a <HAL_SPI_TransmitReceive_IT+0xc2>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005de0:	4a18      	ldr	r2, [pc, #96]	; (8005e44 <HAL_SPI_TransmitReceive_IT+0xdc>)
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005de2:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <HAL_SPI_TransmitReceive_IT+0xe0>)
 8005de4:	e9c4 2313 	strd	r2, r3, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005df0:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005df8:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8005e00:	d111      	bne.n	8005e26 <HAL_SPI_TransmitReceive_IT+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	e7c6      	b.n	8005d9a <HAL_SPI_TransmitReceive_IT+0x32>
    errorcode = HAL_ERROR;
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	e7c4      	b.n	8005d9a <HAL_SPI_TransmitReceive_IT+0x32>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005e10:	f240 619a 	movw	r1, #1690	; 0x69a
 8005e14:	480d      	ldr	r0, [pc, #52]	; (8005e4c <HAL_SPI_TransmitReceive_IT+0xe4>)
 8005e16:	f014 f861 	bl	8019edc <assert_failed>
  __HAL_LOCK(hspi);
 8005e1a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d1ae      	bne.n	8005d80 <HAL_SPI_TransmitReceive_IT+0x18>
 8005e22:	2002      	movs	r0, #2
}
 8005e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e26:	2000      	movs	r0, #0
 8005e28:	e7b7      	b.n	8005d9a <HAL_SPI_TransmitReceive_IT+0x32>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005e2a:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <HAL_SPI_TransmitReceive_IT+0xe8>)
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005e2c:	2d01      	cmp	r5, #1
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <HAL_SPI_TransmitReceive_IT+0xec>)
 8005e30:	e9c4 2313 	strd	r2, r3, [r4, #76]	; 0x4c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005e34:	d1d8      	bne.n	8005de8 <HAL_SPI_TransmitReceive_IT+0x80>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	e7d7      	b.n	8005df2 <HAL_SPI_TransmitReceive_IT+0x8a>
 8005e42:	bf00      	nop
 8005e44:	080060f1 	.word	0x080060f1
 8005e48:	0800606d 	.word	0x0800606d
 8005e4c:	0801fd2c 	.word	0x0801fd2c
 8005e50:	08005e61 	.word	0x08005e61
 8005e54:	08006179 	.word	0x08006179

08005e58 <HAL_SPI_RxCpltCallback>:
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <HAL_SPI_ErrorCallback>:
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop

08005e60 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8005e60:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b01      	cmp	r3, #1
{
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	4604      	mov	r4, r0
  if (hspi->RxXferCount > 1U)
 8005e6c:	d922      	bls.n	8005eb4 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005e6e:	6801      	ldr	r1, [r0, #0]
 8005e70:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005e72:	68cb      	ldr	r3, [r1, #12]
 8005e74:	f822 3b02 	strh.w	r3, [r2], #2
    hspi->RxXferCount -= 2U;
 8005e78:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e7c:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005e7e:	3b02      	subs	r3, #2
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005e86:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d00c      	beq.n	8005eaa <SPI_2linesRxISR_8BIT+0x4a>
  if (hspi->RxXferCount == 0U)
 8005e90:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b93b      	cbnz	r3, 8005ea8 <SPI_2linesRxISR_8BIT+0x48>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	6853      	ldr	r3, [r2, #4]
 8005e9c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005ea0:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8005ea2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b19b      	cbz	r3, 8005ed0 <SPI_2linesRxISR_8BIT+0x70>
}
 8005ea8:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eaa:	684b      	ldr	r3, [r1, #4]
 8005eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eb0:	604b      	str	r3, [r1, #4]
 8005eb2:	e7ed      	b.n	8005e90 <SPI_2linesRxISR_8BIT+0x30>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005eb4:	6802      	ldr	r2, [r0, #0]
 8005eb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005eb8:	7b12      	ldrb	r2, [r2, #12]
 8005eba:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8005ebc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    hspi->pRxBuffPtr++;
 8005ec0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8005ec2:	3b01      	subs	r3, #1
    hspi->pRxBuffPtr++;
 8005ec4:	3201      	adds	r2, #1
    hspi->RxXferCount--;
 8005ec6:	b29b      	uxth	r3, r3
    hspi->pRxBuffPtr++;
 8005ec8:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8005eca:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8005ece:	e7df      	b.n	8005e90 <SPI_2linesRxISR_8BIT+0x30>
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ed0:	f7fb f8ce 	bl	8001070 <HAL_GetTick>

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ed4:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8005ed6:	4601      	mov	r1, r0

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ed8:	4620      	mov	r0, r4
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005eda:	6853      	ldr	r3, [r2, #4]
 8005edc:	f023 0320 	bic.w	r3, r3, #32
 8005ee0:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ee2:	f7ff fdc5 	bl	8005a70 <SPI_EndRxTxTransaction.constprop.0>
 8005ee6:	b118      	cbz	r0, 8005ef0 <SPI_2linesRxISR_8BIT+0x90>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005eea:	f043 0320 	orr.w	r3, r3, #32
 8005eee:	6623      	str	r3, [r4, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005ef0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ef2:	b95b      	cbnz	r3, 8005f0c <SPI_2linesRxISR_8BIT+0xac>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005ef4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005ef8:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005efa:	2b04      	cmp	r3, #4
        hspi->State = HAL_SPI_STATE_READY;
 8005efc:	f04f 0301 	mov.w	r3, #1
 8005f00:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005f04:	d009      	beq.n	8005f1a <SPI_2linesRxISR_8BIT+0xba>
        hspi->State = HAL_SPI_STATE_READY;
        /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->TxRxCpltCallback(hspi);
#else
        HAL_SPI_TxRxCpltCallback(hspi);
 8005f06:	f016 fe05 	bl	801cb14 <HAL_SPI_TxRxCpltCallback>
}
 8005f0a:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    else
    {
      hspi->State = HAL_SPI_STATE_READY;
 8005f0c:	2301      	movs	r3, #1
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f0e:	4620      	mov	r0, r4
      hspi->State = HAL_SPI_STATE_READY;
 8005f10:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005f14:	f7ff ffa2 	bl	8005e5c <HAL_SPI_ErrorCallback>
}
 8005f18:	bd10      	pop	{r4, pc}
        HAL_SPI_RxCpltCallback(hspi);
 8005f1a:	f7ff ff9d 	bl	8005e58 <HAL_SPI_RxCpltCallback>
}
 8005f1e:	bd10      	pop	{r4, pc}

08005f20 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8005f20:	6802      	ldr	r2, [r0, #0]
 8005f22:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005f24:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f26:	f013 0f40 	tst.w	r3, #64	; 0x40
{
 8005f2a:	b530      	push	{r4, r5, lr}
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f30:	f3c3 1580 	ubfx	r5, r3, #6, #1
 8005f34:	d105      	bne.n	8005f42 <HAL_SPI_IRQHandler+0x22>
 8005f36:	f013 0f01 	tst.w	r3, #1
 8005f3a:	d002      	beq.n	8005f42 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f3c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005f40:	d17a      	bne.n	8006038 <HAL_SPI_IRQHandler+0x118>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f42:	0798      	lsls	r0, r3, #30
 8005f44:	d501      	bpl.n	8005f4a <HAL_SPI_IRQHandler+0x2a>
 8005f46:	0608      	lsls	r0, r1, #24
 8005f48:	d470      	bmi.n	800602c <HAL_SPI_IRQHandler+0x10c>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f4a:	f013 0f20 	tst.w	r3, #32
 8005f4e:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8005f52:	d049      	beq.n	8005fe8 <HAL_SPI_IRQHandler+0xc8>
 8005f54:	0688      	lsls	r0, r1, #26
 8005f56:	d545      	bpl.n	8005fe4 <HAL_SPI_IRQHandler+0xc4>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f58:	b175      	cbz	r5, 8005f78 <HAL_SPI_IRQHandler+0x58>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f5a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005f5e:	2803      	cmp	r0, #3
 8005f60:	d06c      	beq.n	800603c <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f62:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005f64:	f040 0004 	orr.w	r0, r0, #4
 8005f68:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	9000      	str	r0, [sp, #0]
 8005f6e:	68d0      	ldr	r0, [r2, #12]
 8005f70:	9000      	str	r0, [sp, #0]
 8005f72:	6890      	ldr	r0, [r2, #8]
 8005f74:	9000      	str	r0, [sp, #0]
 8005f76:	9800      	ldr	r0, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f78:	6e20      	ldr	r0, [r4, #96]	; 0x60
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f7a:	f3c3 2300 	ubfx	r3, r3, #8, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f7e:	f040 0001 	orr.w	r0, r0, #1
 8005f82:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f84:	2000      	movs	r0, #0
 8005f86:	9002      	str	r0, [sp, #8]
 8005f88:	6890      	ldr	r0, [r2, #8]
 8005f8a:	9002      	str	r0, [sp, #8]
 8005f8c:	6810      	ldr	r0, [r2, #0]
 8005f8e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005f92:	6010      	str	r0, [r2, #0]
 8005f94:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d13e      	bne.n	8006018 <HAL_SPI_IRQHandler+0xf8>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f9c:	b313      	cbz	r3, 8005fe4 <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f9e:	6853      	ldr	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005fa0:	2001      	movs	r0, #1
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005fa2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005fa6:	6053      	str	r3, [r2, #4]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005fa8:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8005faa:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005fae:	d04d      	beq.n	800604c <HAL_SPI_IRQHandler+0x12c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005fb0:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005fb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005fb4:	f023 0303 	bic.w	r3, r3, #3
 8005fb8:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005fba:	b140      	cbz	r0, 8005fce <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fbc:	4b25      	ldr	r3, [pc, #148]	; (8006054 <HAL_SPI_IRQHandler+0x134>)
 8005fbe:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005fc0:	f7fb fb7c 	bl	80016bc <HAL_DMA_Abort_IT>
 8005fc4:	b118      	cbz	r0, 8005fce <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fcc:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fd0:	b140      	cbz	r0, 8005fe4 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fd2:	4b20      	ldr	r3, [pc, #128]	; (8006054 <HAL_SPI_IRQHandler+0x134>)
 8005fd4:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005fd6:	f7fb fb71 	bl	80016bc <HAL_DMA_Abort_IT>
 8005fda:	b118      	cbz	r0, 8005fe4 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fdc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe2:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005fe4:	b005      	add	sp, #20
 8005fe6:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005fe8:	b195      	cbz	r5, 8006010 <HAL_SPI_IRQHandler+0xf0>
 8005fea:	068d      	lsls	r5, r1, #26
 8005fec:	d5fa      	bpl.n	8005fe4 <HAL_SPI_IRQHandler+0xc4>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005fee:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 8005ff2:	2d03      	cmp	r5, #3
 8005ff4:	d022      	beq.n	800603c <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ff6:	6e25      	ldr	r5, [r4, #96]	; 0x60
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ff8:	f3c3 2300 	ubfx	r3, r3, #8, #1
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ffc:	f045 0504 	orr.w	r5, r5, #4
 8006000:	6625      	str	r5, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006002:	9000      	str	r0, [sp, #0]
 8006004:	68d0      	ldr	r0, [r2, #12]
 8006006:	9000      	str	r0, [sp, #0]
 8006008:	6890      	ldr	r0, [r2, #8]
 800600a:	9000      	str	r0, [sp, #0]
 800600c:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800600e:	e7c2      	b.n	8005f96 <HAL_SPI_IRQHandler+0x76>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006010:	05dd      	lsls	r5, r3, #23
 8006012:	d5e7      	bpl.n	8005fe4 <HAL_SPI_IRQHandler+0xc4>
 8006014:	068b      	lsls	r3, r1, #26
 8006016:	d5e5      	bpl.n	8005fe4 <HAL_SPI_IRQHandler+0xc4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006018:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800601a:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800601c:	f043 0308 	orr.w	r3, r3, #8
 8006020:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006022:	9003      	str	r0, [sp, #12]
 8006024:	6893      	ldr	r3, [r2, #8]
 8006026:	9303      	str	r3, [sp, #12]
 8006028:	9b03      	ldr	r3, [sp, #12]
 800602a:	e7b6      	b.n	8005f9a <HAL_SPI_IRQHandler+0x7a>
    hspi->TxISR(hspi);
 800602c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800602e:	4620      	mov	r0, r4
}
 8006030:	b005      	add	sp, #20
 8006032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 8006036:	4718      	bx	r3
    hspi->RxISR(hspi);
 8006038:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800603a:	e7f9      	b.n	8006030 <HAL_SPI_IRQHandler+0x110>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603c:	2300      	movs	r3, #0
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	68d3      	ldr	r3, [r2, #12]
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	6893      	ldr	r3, [r2, #8]
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	9b01      	ldr	r3, [sp, #4]
        return;
 800604a:	e7cb      	b.n	8005fe4 <HAL_SPI_IRQHandler+0xc4>
        HAL_SPI_ErrorCallback(hspi);
 800604c:	4620      	mov	r0, r4
 800604e:	f7ff ff05 	bl	8005e5c <HAL_SPI_ErrorCallback>
 8006052:	e7c7      	b.n	8005fe4 <HAL_SPI_IRQHandler+0xc4>
 8006054:	08006059 	.word	0x08006059

08006058 <SPI_DMAAbortOnError>:
{
 8006058:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800605a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006062:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8006064:	f7ff fefa 	bl	8005e5c <HAL_SPI_ErrorCallback>
}
 8006068:	bd08      	pop	{r3, pc}
 800606a:	bf00      	nop

0800606c <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800606c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800606e:	6801      	ldr	r1, [r0, #0]
 8006070:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006074:	60cb      	str	r3, [r1, #12]
  hspi->TxXferCount--;
 8006076:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006078:	6382      	str	r2, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800607a:	3b01      	subs	r3, #1
 800607c:	b29b      	uxth	r3, r3
 800607e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8006080:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006082:	b29b      	uxth	r3, r3
 8006084:	b953      	cbnz	r3, 800609c <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006086:	684b      	ldr	r3, [r1, #4]
 8006088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 800608c:	b510      	push	{r4, lr}
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800608e:	604b      	str	r3, [r1, #4]
    if (hspi->RxXferCount == 0U)
 8006090:	4604      	mov	r4, r0
 8006092:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006096:	b29b      	uxth	r3, r3
 8006098:	b10b      	cbz	r3, 800609e <SPI_2linesTxISR_16BIT+0x32>
}
 800609a:	bd10      	pop	{r4, pc}
 800609c:	4770      	bx	lr
  tickstart = HAL_GetTick();
 800609e:	f7fa ffe7 	bl	8001070 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060a2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80060a4:	4601      	mov	r1, r0
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060a6:	4620      	mov	r0, r4
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060a8:	6853      	ldr	r3, [r2, #4]
 80060aa:	f023 0320 	bic.w	r3, r3, #32
 80060ae:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060b0:	f7ff fcde 	bl	8005a70 <SPI_EndRxTxTransaction.constprop.0>
 80060b4:	b118      	cbz	r0, 80060be <SPI_2linesTxISR_16BIT+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80060b8:	f043 0320 	orr.w	r3, r3, #32
 80060bc:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80060be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80060c0:	b95b      	cbnz	r3, 80060da <SPI_2linesTxISR_16BIT+0x6e>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80060c2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80060c6:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80060c8:	2b04      	cmp	r3, #4
        hspi->State = HAL_SPI_STATE_READY;
 80060ca:	f04f 0301 	mov.w	r3, #1
 80060ce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80060d2:	d009      	beq.n	80060e8 <SPI_2linesTxISR_16BIT+0x7c>
        HAL_SPI_TxRxCpltCallback(hspi);
 80060d4:	f016 fd1e 	bl	801cb14 <HAL_SPI_TxRxCpltCallback>
}
 80060d8:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 80060da:	2301      	movs	r3, #1
      HAL_SPI_ErrorCallback(hspi);
 80060dc:	4620      	mov	r0, r4
      hspi->State = HAL_SPI_STATE_READY;
 80060de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80060e2:	f7ff febb 	bl	8005e5c <HAL_SPI_ErrorCallback>
}
 80060e6:	bd10      	pop	{r4, pc}
        HAL_SPI_RxCpltCallback(hspi);
 80060e8:	f7ff feb6 	bl	8005e58 <HAL_SPI_RxCpltCallback>
}
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	bf00      	nop

080060f0 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80060f0:	6801      	ldr	r1, [r0, #0]
 80060f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80060f4:	68cb      	ldr	r3, [r1, #12]
 80060f6:	f822 3b02 	strh.w	r3, [r2], #2
  hspi->RxXferCount--;
 80060fa:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80060fe:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8006100:	3b01      	subs	r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8006108:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800610c:	b29b      	uxth	r3, r3
 800610e:	b94b      	cbnz	r3, 8006124 <SPI_2linesRxISR_16BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006110:	684b      	ldr	r3, [r1, #4]
 8006112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
{
 8006116:	b510      	push	{r4, lr}
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006118:	604b      	str	r3, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800611a:	4604      	mov	r4, r0
 800611c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800611e:	b29b      	uxth	r3, r3
 8006120:	b10b      	cbz	r3, 8006126 <SPI_2linesRxISR_16BIT+0x36>
}
 8006122:	bd10      	pop	{r4, pc}
 8006124:	4770      	bx	lr
  tickstart = HAL_GetTick();
 8006126:	f7fa ffa3 	bl	8001070 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800612a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800612c:	4601      	mov	r1, r0
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800612e:	4620      	mov	r0, r4
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006130:	6853      	ldr	r3, [r2, #4]
 8006132:	f023 0320 	bic.w	r3, r3, #32
 8006136:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006138:	f7ff fc9a 	bl	8005a70 <SPI_EndRxTxTransaction.constprop.0>
 800613c:	b118      	cbz	r0, 8006146 <SPI_2linesRxISR_16BIT+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800613e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006140:	f043 0320 	orr.w	r3, r3, #32
 8006144:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006146:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006148:	b95b      	cbnz	r3, 8006162 <SPI_2linesRxISR_16BIT+0x72>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800614a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800614e:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006150:	2b04      	cmp	r3, #4
        hspi->State = HAL_SPI_STATE_READY;
 8006152:	f04f 0301 	mov.w	r3, #1
 8006156:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800615a:	d009      	beq.n	8006170 <SPI_2linesRxISR_16BIT+0x80>
        HAL_SPI_TxRxCpltCallback(hspi);
 800615c:	f016 fcda 	bl	801cb14 <HAL_SPI_TxRxCpltCallback>
}
 8006160:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 8006162:	2301      	movs	r3, #1
      HAL_SPI_ErrorCallback(hspi);
 8006164:	4620      	mov	r0, r4
      hspi->State = HAL_SPI_STATE_READY;
 8006166:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800616a:	f7ff fe77 	bl	8005e5c <HAL_SPI_ErrorCallback>
}
 800616e:	bd10      	pop	{r4, pc}
        HAL_SPI_RxCpltCallback(hspi);
 8006170:	f7ff fe72 	bl	8005e58 <HAL_SPI_RxCpltCallback>
}
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop

08006178 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8006178:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800617a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hspi->TxXferCount >= 2U)
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b01      	cmp	r3, #1
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006180:	6803      	ldr	r3, [r0, #0]
{
 8006182:	b510      	push	{r4, lr}
 8006184:	4604      	mov	r4, r0
  if (hspi->TxXferCount >= 2U)
 8006186:	d914      	bls.n	80061b2 <SPI_2linesTxISR_8BIT+0x3a>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006188:	f832 1b02 	ldrh.w	r1, [r2], #2
 800618c:	60d9      	str	r1, [r3, #12]
    hspi->TxXferCount -= 2U;
 800618e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006190:	6382      	str	r2, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006192:	3b02      	subs	r3, #2
 8006194:	b29b      	uxth	r3, r3
 8006196:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8006198:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800619a:	b29b      	uxth	r3, r3
 800619c:	b943      	cbnz	r3, 80061b0 <SPI_2linesTxISR_8BIT+0x38>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800619e:	6822      	ldr	r2, [r4, #0]
 80061a0:	6853      	ldr	r3, [r2, #4]
 80061a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a6:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80061a8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	b153      	cbz	r3, 80061c6 <SPI_2linesTxISR_8BIT+0x4e>
}
 80061b0:	bd10      	pop	{r4, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061b2:	7812      	ldrb	r2, [r2, #0]
 80061b4:	731a      	strb	r2, [r3, #12]
    hspi->TxXferCount--;
 80061b6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    hspi->pTxBuffPtr++;
 80061b8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 80061ba:	3b01      	subs	r3, #1
    hspi->pTxBuffPtr++;
 80061bc:	3201      	adds	r2, #1
    hspi->TxXferCount--;
 80061be:	b29b      	uxth	r3, r3
    hspi->pTxBuffPtr++;
 80061c0:	6382      	str	r2, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 80061c2:	87c3      	strh	r3, [r0, #62]	; 0x3e
 80061c4:	e7e8      	b.n	8006198 <SPI_2linesTxISR_8BIT+0x20>
  tickstart = HAL_GetTick();
 80061c6:	f7fa ff53 	bl	8001070 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80061ca:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80061cc:	4601      	mov	r1, r0
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061ce:	4620      	mov	r0, r4
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80061d0:	6853      	ldr	r3, [r2, #4]
 80061d2:	f023 0320 	bic.w	r3, r3, #32
 80061d6:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061d8:	f7ff fc4a 	bl	8005a70 <SPI_EndRxTxTransaction.constprop.0>
 80061dc:	b118      	cbz	r0, 80061e6 <SPI_2linesTxISR_8BIT+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80061e0:	f043 0320 	orr.w	r3, r3, #32
 80061e4:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80061e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80061e8:	b95b      	cbnz	r3, 8006202 <SPI_2linesTxISR_8BIT+0x8a>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80061ea:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80061ee:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80061f0:	2b04      	cmp	r3, #4
        hspi->State = HAL_SPI_STATE_READY;
 80061f2:	f04f 0301 	mov.w	r3, #1
 80061f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80061fa:	d009      	beq.n	8006210 <SPI_2linesTxISR_8BIT+0x98>
        HAL_SPI_TxRxCpltCallback(hspi);
 80061fc:	f016 fc8a 	bl	801cb14 <HAL_SPI_TxRxCpltCallback>
}
 8006200:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 8006202:	2301      	movs	r3, #1
      HAL_SPI_ErrorCallback(hspi);
 8006204:	4620      	mov	r0, r4
      hspi->State = HAL_SPI_STATE_READY;
 8006206:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800620a:	f7ff fe27 	bl	8005e5c <HAL_SPI_ErrorCallback>
}
 800620e:	bd10      	pop	{r4, pc}
        HAL_SPI_RxCpltCallback(hspi);
 8006210:	f7ff fe22 	bl	8005e58 <HAL_SPI_RxCpltCallback>
}
 8006214:	bd10      	pop	{r4, pc}
 8006216:	bf00      	nop

08006218 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006218:	2800      	cmp	r0, #0
 800621a:	f000 8113 	beq.w	8006444 <HAL_TIM_Base_Init+0x22c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800621e:	6802      	ldr	r2, [r0, #0]
 8006220:	4b8d      	ldr	r3, [pc, #564]	; (8006458 <HAL_TIM_Base_Init+0x240>)
 8006222:	498e      	ldr	r1, [pc, #568]	; (800645c <HAL_TIM_Base_Init+0x244>)
 8006224:	429a      	cmp	r2, r3
 8006226:	bf18      	it	ne
 8006228:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800622c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	4604      	mov	r4, r0
 8006236:	488a      	ldr	r0, [pc, #552]	; (8006460 <HAL_TIM_Base_Init+0x248>)
 8006238:	4282      	cmp	r2, r0
 800623a:	bf0c      	ite	eq
 800623c:	2300      	moveq	r3, #0
 800623e:	f003 0301 	andne.w	r3, r3, #1
 8006242:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8006246:	428a      	cmp	r2, r1
 8006248:	bf0c      	ite	eq
 800624a:	2300      	moveq	r3, #0
 800624c:	f003 0301 	andne.w	r3, r3, #1
 8006250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006254:	4282      	cmp	r2, r0
 8006256:	bf0c      	ite	eq
 8006258:	2300      	moveq	r3, #0
 800625a:	f003 0301 	andne.w	r3, r3, #1
 800625e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8006262:	428a      	cmp	r2, r1
 8006264:	bf0c      	ite	eq
 8006266:	2300      	moveq	r3, #0
 8006268:	f003 0301 	andne.w	r3, r3, #1
 800626c:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8006270:	4282      	cmp	r2, r0
 8006272:	bf0c      	ite	eq
 8006274:	2300      	moveq	r3, #0
 8006276:	f003 0301 	andne.w	r3, r3, #1
 800627a:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800627e:	428a      	cmp	r2, r1
 8006280:	bf0c      	ite	eq
 8006282:	2300      	moveq	r3, #0
 8006284:	f003 0301 	andne.w	r3, r3, #1
 8006288:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800628c:	4282      	cmp	r2, r0
 800628e:	bf0c      	ite	eq
 8006290:	2300      	moveq	r3, #0
 8006292:	f003 0301 	andne.w	r3, r3, #1
 8006296:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800629a:	428a      	cmp	r2, r1
 800629c:	bf0c      	ite	eq
 800629e:	2300      	moveq	r3, #0
 80062a0:	f003 0301 	andne.w	r3, r3, #1
 80062a4:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80062a8:	4282      	cmp	r2, r0
 80062aa:	bf0c      	ite	eq
 80062ac:	2300      	moveq	r3, #0
 80062ae:	f003 0301 	andne.w	r3, r3, #1
 80062b2:	428a      	cmp	r2, r1
 80062b4:	bf0c      	ite	eq
 80062b6:	2300      	moveq	r3, #0
 80062b8:	f003 0301 	andne.w	r3, r3, #1
 80062bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062c0:	428a      	cmp	r2, r1
 80062c2:	bf0c      	ite	eq
 80062c4:	2300      	moveq	r3, #0
 80062c6:	f003 0301 	andne.w	r3, r3, #1
 80062ca:	b11b      	cbz	r3, 80062d4 <HAL_TIM_Base_Init+0xbc>
 80062cc:	4b65      	ldr	r3, [pc, #404]	; (8006464 <HAL_TIM_Base_Init+0x24c>)
 80062ce:	429a      	cmp	r2, r3
 80062d0:	f040 80bc 	bne.w	800644c <HAL_TIM_Base_Init+0x234>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80062d4:	68a3      	ldr	r3, [r4, #8]
 80062d6:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80062da:	f023 0210 	bic.w	r2, r3, #16
 80062de:	2920      	cmp	r1, #32
 80062e0:	bf18      	it	ne
 80062e2:	2a00      	cmpne	r2, #0
 80062e4:	d002      	beq.n	80062ec <HAL_TIM_Base_Init+0xd4>
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	f040 809c 	bne.w	8006424 <HAL_TIM_Base_Init+0x20c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80062ec:	6923      	ldr	r3, [r4, #16]
 80062ee:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80062f2:	d002      	beq.n	80062fa <HAL_TIM_Base_Init+0xe2>
 80062f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f8:	d16d      	bne.n	80063d6 <HAL_TIM_Base_Init+0x1be>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80062fa:	69a3      	ldr	r3, [r4, #24]
 80062fc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006300:	d172      	bne.n	80063e8 <HAL_TIM_Base_Init+0x1d0>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006302:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006306:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800630a:	2b00      	cmp	r3, #0
 800630c:	d077      	beq.n	80063fe <HAL_TIM_Base_Init+0x1e6>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800630e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006312:	4951      	ldr	r1, [pc, #324]	; (8006458 <HAL_TIM_Base_Init+0x240>)
 8006314:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800631c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8006320:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006322:	fab1 f181 	clz	r1, r1
 8006326:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800632a:	d036      	beq.n	800639a <HAL_TIM_Base_Init+0x182>
 800632c:	2900      	cmp	r1, #0
 800632e:	d134      	bne.n	800639a <HAL_TIM_Base_Init+0x182>
 8006330:	4d4b      	ldr	r5, [pc, #300]	; (8006460 <HAL_TIM_Base_Init+0x248>)
 8006332:	484a      	ldr	r0, [pc, #296]	; (800645c <HAL_TIM_Base_Init+0x244>)
 8006334:	4282      	cmp	r2, r0
 8006336:	bf18      	it	ne
 8006338:	42aa      	cmpne	r2, r5
 800633a:	d069      	beq.n	8006410 <HAL_TIM_Base_Init+0x1f8>
 800633c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8006340:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006344:	1b55      	subs	r5, r2, r5
 8006346:	4282      	cmp	r2, r0
 8006348:	fab5 f585 	clz	r5, r5
 800634c:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8006350:	d06e      	beq.n	8006430 <HAL_TIM_Base_Init+0x218>
 8006352:	2d00      	cmp	r5, #0
 8006354:	d16c      	bne.n	8006430 <HAL_TIM_Base_Init+0x218>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006356:	4d44      	ldr	r5, [pc, #272]	; (8006468 <HAL_TIM_Base_Init+0x250>)
 8006358:	4844      	ldr	r0, [pc, #272]	; (800646c <HAL_TIM_Base_Init+0x254>)
 800635a:	4282      	cmp	r2, r0
 800635c:	bf18      	it	ne
 800635e:	42aa      	cmpne	r2, r5
 8006360:	bf0c      	ite	eq
 8006362:	2501      	moveq	r5, #1
 8006364:	2500      	movne	r5, #0
 8006366:	d06f      	beq.n	8006448 <HAL_TIM_Base_Init+0x230>
 8006368:	4e41      	ldr	r6, [pc, #260]	; (8006470 <HAL_TIM_Base_Init+0x258>)
 800636a:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800636e:	4282      	cmp	r2, r0
 8006370:	bf18      	it	ne
 8006372:	42b2      	cmpne	r2, r6
 8006374:	d01a      	beq.n	80063ac <HAL_TIM_Base_Init+0x194>
 8006376:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800637a:	4282      	cmp	r2, r0
 800637c:	d064      	beq.n	8006448 <HAL_TIM_Base_Init+0x230>
 800637e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006382:	4282      	cmp	r2, r0
 8006384:	d060      	beq.n	8006448 <HAL_TIM_Base_Init+0x230>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006386:	69a0      	ldr	r0, [r4, #24]
 8006388:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800638c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800638e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006390:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006392:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006394:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006396:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006398:	e017      	b.n	80063ca <HAL_TIM_Base_Init+0x1b2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800639a:	4d36      	ldr	r5, [pc, #216]	; (8006474 <HAL_TIM_Base_Init+0x25c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800639c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063a0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a2:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 80063a4:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a6:	fab5 f585 	clz	r5, r5
 80063aa:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ac:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063b2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b4:	69a0      	ldr	r0, [r4, #24]
 80063b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ba:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80063bc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c6:	bb01      	cbnz	r1, 800640a <HAL_TIM_Base_Init+0x1f2>
 80063c8:	b9fd      	cbnz	r5, 800640a <HAL_TIM_Base_Init+0x1f2>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ca:	2301      	movs	r3, #1
  return HAL_OK;
 80063cc:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80063ce:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80063d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80063d6:	f240 110f 	movw	r1, #271	; 0x10f
 80063da:	4827      	ldr	r0, [pc, #156]	; (8006478 <HAL_TIM_Base_Init+0x260>)
 80063dc:	f013 fd7e 	bl	8019edc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80063e0:	69a3      	ldr	r3, [r4, #24]
 80063e2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80063e6:	d08c      	beq.n	8006302 <HAL_TIM_Base_Init+0xea>
 80063e8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80063ec:	4822      	ldr	r0, [pc, #136]	; (8006478 <HAL_TIM_Base_Init+0x260>)
 80063ee:	f013 fd75 	bl	8019edc <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80063f2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80063f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d187      	bne.n	800630e <HAL_TIM_Base_Init+0xf6>
    HAL_TIM_Base_MspInit(htim);
 80063fe:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8006400:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006404:	f017 f92c 	bl	801d660 <HAL_TIM_Base_MspInit>
 8006408:	e781      	b.n	800630e <HAL_TIM_Base_Init+0xf6>
    TIMx->RCR = Structure->RepetitionCounter;
 800640a:	6963      	ldr	r3, [r4, #20]
 800640c:	6313      	str	r3, [r2, #48]	; 0x30
 800640e:	e7dc      	b.n	80063ca <HAL_TIM_Base_Init+0x1b2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006410:	4d18      	ldr	r5, [pc, #96]	; (8006474 <HAL_TIM_Base_Init+0x25c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006416:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006418:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800641a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800641c:	fab5 f585 	clz	r5, r5
 8006420:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006422:	e7c3      	b.n	80063ac <HAL_TIM_Base_Init+0x194>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006424:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006428:	4813      	ldr	r0, [pc, #76]	; (8006478 <HAL_TIM_Base_Init+0x260>)
 800642a:	f013 fd57 	bl	8019edc <assert_failed>
 800642e:	e75d      	b.n	80062ec <HAL_TIM_Base_Init+0xd4>
    tmpcr1 |= Structure->CounterMode;
 8006430:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006436:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006438:	4810      	ldr	r0, [pc, #64]	; (800647c <HAL_TIM_Base_Init+0x264>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800643a:	4282      	cmp	r2, r0
 800643c:	d0b6      	beq.n	80063ac <HAL_TIM_Base_Init+0x194>
 800643e:	2d00      	cmp	r5, #0
 8006440:	d1b4      	bne.n	80063ac <HAL_TIM_Base_Init+0x194>
 8006442:	e788      	b.n	8006356 <HAL_TIM_Base_Init+0x13e>
    return HAL_ERROR;
 8006444:	2001      	movs	r0, #1
}
 8006446:	4770      	bx	lr
 8006448:	2500      	movs	r5, #0
 800644a:	e7af      	b.n	80063ac <HAL_TIM_Base_Init+0x194>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800644c:	f240 110d 	movw	r1, #269	; 0x10d
 8006450:	4809      	ldr	r0, [pc, #36]	; (8006478 <HAL_TIM_Base_Init+0x260>)
 8006452:	f013 fd43 	bl	8019edc <assert_failed>
 8006456:	e73d      	b.n	80062d4 <HAL_TIM_Base_Init+0xbc>
 8006458:	40010000 	.word	0x40010000
 800645c:	40000800 	.word	0x40000800
 8006460:	40000400 	.word	0x40000400
 8006464:	40002000 	.word	0x40002000
 8006468:	40014000 	.word	0x40014000
 800646c:	40014400 	.word	0x40014400
 8006470:	40014800 	.word	0x40014800
 8006474:	40010400 	.word	0x40010400
 8006478:	0801fd64 	.word	0x0801fd64
 800647c:	40000c00 	.word	0x40000c00

08006480 <HAL_TIM_Base_Start_IT>:
{
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006484:	4b37      	ldr	r3, [pc, #220]	; (8006564 <HAL_TIM_Base_Start_IT+0xe4>)
 8006486:	4d38      	ldr	r5, [pc, #224]	; (8006568 <HAL_TIM_Base_Start_IT+0xe8>)
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	4938      	ldr	r1, [pc, #224]	; (800656c <HAL_TIM_Base_Start_IT+0xec>)
 800648c:	429a      	cmp	r2, r3
 800648e:	bf18      	it	ne
 8006490:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8006494:	4836      	ldr	r0, [pc, #216]	; (8006570 <HAL_TIM_Base_Start_IT+0xf0>)
 8006496:	bf14      	ite	ne
 8006498:	2301      	movne	r3, #1
 800649a:	2300      	moveq	r3, #0
 800649c:	42aa      	cmp	r2, r5
 800649e:	bf0c      	ite	eq
 80064a0:	2300      	moveq	r3, #0
 80064a2:	f003 0301 	andne.w	r3, r3, #1
 80064a6:	428a      	cmp	r2, r1
 80064a8:	bf0c      	ite	eq
 80064aa:	2300      	moveq	r3, #0
 80064ac:	f003 0301 	andne.w	r3, r3, #1
 80064b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b4:	4282      	cmp	r2, r0
 80064b6:	bf0c      	ite	eq
 80064b8:	2300      	moveq	r3, #0
 80064ba:	f003 0301 	andne.w	r3, r3, #1
 80064be:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80064c2:	428a      	cmp	r2, r1
 80064c4:	bf0c      	ite	eq
 80064c6:	2300      	moveq	r3, #0
 80064c8:	f003 0301 	andne.w	r3, r3, #1
 80064cc:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80064d0:	4282      	cmp	r2, r0
 80064d2:	bf0c      	ite	eq
 80064d4:	2300      	moveq	r3, #0
 80064d6:	f003 0301 	andne.w	r3, r3, #1
 80064da:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80064de:	428a      	cmp	r2, r1
 80064e0:	bf0c      	ite	eq
 80064e2:	2300      	moveq	r3, #0
 80064e4:	f003 0301 	andne.w	r3, r3, #1
 80064e8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80064ec:	4282      	cmp	r2, r0
 80064ee:	bf0c      	ite	eq
 80064f0:	2300      	moveq	r3, #0
 80064f2:	f003 0301 	andne.w	r3, r3, #1
 80064f6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80064fa:	428a      	cmp	r2, r1
 80064fc:	bf0c      	ite	eq
 80064fe:	2300      	moveq	r3, #0
 8006500:	f003 0301 	andne.w	r3, r3, #1
 8006504:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8006508:	4282      	cmp	r2, r0
 800650a:	bf0c      	ite	eq
 800650c:	2300      	moveq	r3, #0
 800650e:	f003 0301 	andne.w	r3, r3, #1
 8006512:	428a      	cmp	r2, r1
 8006514:	bf0c      	ite	eq
 8006516:	2300      	moveq	r3, #0
 8006518:	f003 0301 	andne.w	r3, r3, #1
 800651c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006520:	428a      	cmp	r2, r1
 8006522:	bf0c      	ite	eq
 8006524:	2300      	moveq	r3, #0
 8006526:	f003 0301 	andne.w	r3, r3, #1
 800652a:	b113      	cbz	r3, 8006532 <HAL_TIM_Base_Start_IT+0xb2>
 800652c:	4b11      	ldr	r3, [pc, #68]	; (8006574 <HAL_TIM_Base_Start_IT+0xf4>)
 800652e:	429a      	cmp	r2, r3
 8006530:	d111      	bne.n	8006556 <HAL_TIM_Base_Start_IT+0xd6>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006532:	68d1      	ldr	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006534:	4b10      	ldr	r3, [pc, #64]	; (8006578 <HAL_TIM_Base_Start_IT+0xf8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006536:	f041 0101 	orr.w	r1, r1, #1
 800653a:	60d1      	str	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800653c:	6891      	ldr	r1, [r2, #8]
 800653e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006540:	2b06      	cmp	r3, #6
 8006542:	d006      	beq.n	8006552 <HAL_TIM_Base_Start_IT+0xd2>
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006548:	d003      	beq.n	8006552 <HAL_TIM_Base_Start_IT+0xd2>
    __HAL_TIM_ENABLE(htim);
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	6013      	str	r3, [r2, #0]
}
 8006552:	2000      	movs	r0, #0
 8006554:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006556:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800655a:	4808      	ldr	r0, [pc, #32]	; (800657c <HAL_TIM_Base_Start_IT+0xfc>)
 800655c:	f013 fcbe 	bl	8019edc <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	e7e6      	b.n	8006532 <HAL_TIM_Base_Start_IT+0xb2>
 8006564:	40010000 	.word	0x40010000
 8006568:	40000400 	.word	0x40000400
 800656c:	40000800 	.word	0x40000800
 8006570:	40000c00 	.word	0x40000c00
 8006574:	40002000 	.word	0x40002000
 8006578:	00010007 	.word	0x00010007
 800657c:	0801fd64 	.word	0x0801fd64

08006580 <HAL_TIM_Base_Stop_IT>:
{
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006584:	4b38      	ldr	r3, [pc, #224]	; (8006668 <HAL_TIM_Base_Stop_IT+0xe8>)
 8006586:	4d39      	ldr	r5, [pc, #228]	; (800666c <HAL_TIM_Base_Stop_IT+0xec>)
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	4939      	ldr	r1, [pc, #228]	; (8006670 <HAL_TIM_Base_Stop_IT+0xf0>)
 800658c:	429a      	cmp	r2, r3
 800658e:	bf18      	it	ne
 8006590:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8006594:	4837      	ldr	r0, [pc, #220]	; (8006674 <HAL_TIM_Base_Stop_IT+0xf4>)
 8006596:	bf14      	ite	ne
 8006598:	2301      	movne	r3, #1
 800659a:	2300      	moveq	r3, #0
 800659c:	42aa      	cmp	r2, r5
 800659e:	bf0c      	ite	eq
 80065a0:	2300      	moveq	r3, #0
 80065a2:	f003 0301 	andne.w	r3, r3, #1
 80065a6:	428a      	cmp	r2, r1
 80065a8:	bf0c      	ite	eq
 80065aa:	2300      	moveq	r3, #0
 80065ac:	f003 0301 	andne.w	r3, r3, #1
 80065b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b4:	4282      	cmp	r2, r0
 80065b6:	bf0c      	ite	eq
 80065b8:	2300      	moveq	r3, #0
 80065ba:	f003 0301 	andne.w	r3, r3, #1
 80065be:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80065c2:	428a      	cmp	r2, r1
 80065c4:	bf0c      	ite	eq
 80065c6:	2300      	moveq	r3, #0
 80065c8:	f003 0301 	andne.w	r3, r3, #1
 80065cc:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80065d0:	4282      	cmp	r2, r0
 80065d2:	bf0c      	ite	eq
 80065d4:	2300      	moveq	r3, #0
 80065d6:	f003 0301 	andne.w	r3, r3, #1
 80065da:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80065de:	428a      	cmp	r2, r1
 80065e0:	bf0c      	ite	eq
 80065e2:	2300      	moveq	r3, #0
 80065e4:	f003 0301 	andne.w	r3, r3, #1
 80065e8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80065ec:	4282      	cmp	r2, r0
 80065ee:	bf0c      	ite	eq
 80065f0:	2300      	moveq	r3, #0
 80065f2:	f003 0301 	andne.w	r3, r3, #1
 80065f6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80065fa:	428a      	cmp	r2, r1
 80065fc:	bf0c      	ite	eq
 80065fe:	2300      	moveq	r3, #0
 8006600:	f003 0301 	andne.w	r3, r3, #1
 8006604:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8006608:	4282      	cmp	r2, r0
 800660a:	bf0c      	ite	eq
 800660c:	2300      	moveq	r3, #0
 800660e:	f003 0301 	andne.w	r3, r3, #1
 8006612:	428a      	cmp	r2, r1
 8006614:	bf0c      	ite	eq
 8006616:	2300      	moveq	r3, #0
 8006618:	f003 0301 	andne.w	r3, r3, #1
 800661c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006620:	428a      	cmp	r2, r1
 8006622:	bf0c      	ite	eq
 8006624:	2300      	moveq	r3, #0
 8006626:	f003 0301 	andne.w	r3, r3, #1
 800662a:	b113      	cbz	r3, 8006632 <HAL_TIM_Base_Stop_IT+0xb2>
 800662c:	4b12      	ldr	r3, [pc, #72]	; (8006678 <HAL_TIM_Base_Stop_IT+0xf8>)
 800662e:	429a      	cmp	r2, r3
 8006630:	d113      	bne.n	800665a <HAL_TIM_Base_Stop_IT+0xda>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006632:	68d3      	ldr	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8006634:	f241 1111 	movw	r1, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006638:	f023 0301 	bic.w	r3, r3, #1
 800663c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800663e:	6a13      	ldr	r3, [r2, #32]
 8006640:	420b      	tst	r3, r1
 8006642:	d108      	bne.n	8006656 <HAL_TIM_Base_Stop_IT+0xd6>
 8006644:	6a11      	ldr	r1, [r2, #32]
 8006646:	f240 4344 	movw	r3, #1092	; 0x444
 800664a:	4219      	tst	r1, r3
 800664c:	d103      	bne.n	8006656 <HAL_TIM_Base_Stop_IT+0xd6>
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	6013      	str	r3, [r2, #0]
}
 8006656:	2000      	movs	r0, #0
 8006658:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800665a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800665e:	4807      	ldr	r0, [pc, #28]	; (800667c <HAL_TIM_Base_Stop_IT+0xfc>)
 8006660:	f013 fc3c 	bl	8019edc <assert_failed>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006664:	6822      	ldr	r2, [r4, #0]
 8006666:	e7e4      	b.n	8006632 <HAL_TIM_Base_Stop_IT+0xb2>
 8006668:	40010000 	.word	0x40010000
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	40000c00 	.word	0x40000c00
 8006678:	40002000 	.word	0x40002000
 800667c:	0801fd64 	.word	0x0801fd64

08006680 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006680:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006684:	2b01      	cmp	r3, #1
 8006686:	f000 814e 	beq.w	8006926 <HAL_TIM_ConfigClockSource+0x2a6>
 800668a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	2302      	movs	r3, #2
{
 800668e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006690:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006694:	460d      	mov	r5, r1
 8006696:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800669a:	4604      	mov	r4, r0
 800669c:	680b      	ldr	r3, [r1, #0]
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a2:	bf18      	it	ne
 80066a4:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 80066a8:	bf14      	ite	ne
 80066aa:	2201      	movne	r2, #1
 80066ac:	2200      	moveq	r2, #0
 80066ae:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 80066b2:	f002 0201 	and.w	r2, r2, #1
 80066b6:	bf08      	it	eq
 80066b8:	2200      	moveq	r2, #0
 80066ba:	b112      	cbz	r2, 80066c2 <HAL_TIM_ConfigClockSource+0x42>
 80066bc:	2940      	cmp	r1, #64	; 0x40
 80066be:	f040 8269 	bne.w	8006b94 <HAL_TIM_ConfigClockSource+0x514>
  tmpsmcr = htim->Instance->SMCR;
 80066c2:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 80066c4:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c6:	4999      	ldr	r1, [pc, #612]	; (800692c <HAL_TIM_ConfigClockSource+0x2ac>)
  tmpsmcr = htim->Instance->SMCR;
 80066c8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ca:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 80066ce:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80066d0:	f000 8136 	beq.w	8006940 <HAL_TIM_ConfigClockSource+0x2c0>
 80066d4:	d854      	bhi.n	8006780 <HAL_TIM_ConfigClockSource+0x100>
 80066d6:	2b40      	cmp	r3, #64	; 0x40
 80066d8:	f000 81da 	beq.w	8006a90 <HAL_TIM_ConfigClockSource+0x410>
 80066dc:	f240 80ef 	bls.w	80068be <HAL_TIM_ConfigClockSource+0x23e>
 80066e0:	2b50      	cmp	r3, #80	; 0x50
 80066e2:	d145      	bne.n	8006770 <HAL_TIM_ConfigClockSource+0xf0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80066e4:	4b92      	ldr	r3, [pc, #584]	; (8006930 <HAL_TIM_ConfigClockSource+0x2b0>)
 80066e6:	4993      	ldr	r1, [pc, #588]	; (8006934 <HAL_TIM_ConfigClockSource+0x2b4>)
 80066e8:	429a      	cmp	r2, r3
 80066ea:	bf18      	it	ne
 80066ec:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80066f0:	bf14      	ite	ne
 80066f2:	2301      	movne	r3, #1
 80066f4:	2300      	moveq	r3, #0
 80066f6:	428a      	cmp	r2, r1
 80066f8:	bf0c      	ite	eq
 80066fa:	2300      	moveq	r3, #0
 80066fc:	f003 0301 	andne.w	r3, r3, #1
 8006700:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006704:	428a      	cmp	r2, r1
 8006706:	bf0c      	ite	eq
 8006708:	2300      	moveq	r3, #0
 800670a:	f003 0301 	andne.w	r3, r3, #1
 800670e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006712:	428a      	cmp	r2, r1
 8006714:	bf0c      	ite	eq
 8006716:	2300      	moveq	r3, #0
 8006718:	f003 0301 	andne.w	r3, r3, #1
 800671c:	b11b      	cbz	r3, 8006726 <HAL_TIM_ConfigClockSource+0xa6>
 800671e:	4b86      	ldr	r3, [pc, #536]	; (8006938 <HAL_TIM_ConfigClockSource+0x2b8>)
 8006720:	429a      	cmp	r2, r3
 8006722:	f040 8225 	bne.w	8006b70 <HAL_TIM_ConfigClockSource+0x4f0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006726:	686b      	ldr	r3, [r5, #4]
 8006728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800672c:	bf18      	it	ne
 800672e:	2b0a      	cmpne	r3, #10
 8006730:	d003      	beq.n	800673a <HAL_TIM_ConfigClockSource+0xba>
 8006732:	f033 0302 	bics.w	r3, r3, #2
 8006736:	f040 8201 	bne.w	8006b3c <HAL_TIM_ConfigClockSource+0x4bc>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800673a:	68ee      	ldr	r6, [r5, #12]
 800673c:	2e0f      	cmp	r6, #15
 800673e:	f200 823e 	bhi.w	8006bbe <HAL_TIM_ConfigClockSource+0x53e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	6869      	ldr	r1, [r5, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006746:	6a18      	ldr	r0, [r3, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006748:	f020 000a 	bic.w	r0, r0, #10
  tmpccer |= TIM_ICPolarity;
 800674c:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800674e:	6a18      	ldr	r0, [r3, #32]
 8006750:	f020 0001 	bic.w	r0, r0, #1
 8006754:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006756:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006758:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800675c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006762:	6219      	str	r1, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006764:	689a      	ldr	r2, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006766:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800676a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8006770:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006772:	2201      	movs	r2, #1
  return HAL_OK;
 8006774:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8006776:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800677a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800677e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006784:	f000 8124 	beq.w	80069d0 <HAL_TIM_ConfigClockSource+0x350>
 8006788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678c:	d143      	bne.n	8006816 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800678e:	4b68      	ldr	r3, [pc, #416]	; (8006930 <HAL_TIM_ConfigClockSource+0x2b0>)
 8006790:	4968      	ldr	r1, [pc, #416]	; (8006934 <HAL_TIM_ConfigClockSource+0x2b4>)
 8006792:	429a      	cmp	r2, r3
 8006794:	bf18      	it	ne
 8006796:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800679a:	bf14      	ite	ne
 800679c:	2301      	movne	r3, #1
 800679e:	2300      	moveq	r3, #0
 80067a0:	428a      	cmp	r2, r1
 80067a2:	bf0c      	ite	eq
 80067a4:	2300      	moveq	r3, #0
 80067a6:	f003 0301 	andne.w	r3, r3, #1
 80067aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067ae:	428a      	cmp	r2, r1
 80067b0:	bf0c      	ite	eq
 80067b2:	2300      	moveq	r3, #0
 80067b4:	f003 0301 	andne.w	r3, r3, #1
 80067b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067bc:	428a      	cmp	r2, r1
 80067be:	bf0c      	ite	eq
 80067c0:	2300      	moveq	r3, #0
 80067c2:	f003 0301 	andne.w	r3, r3, #1
 80067c6:	b11b      	cbz	r3, 80067d0 <HAL_TIM_ConfigClockSource+0x150>
 80067c8:	4b5b      	ldr	r3, [pc, #364]	; (8006938 <HAL_TIM_ConfigClockSource+0x2b8>)
 80067ca:	429a      	cmp	r2, r3
 80067cc:	f040 81c2 	bne.w	8006b54 <HAL_TIM_ConfigClockSource+0x4d4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80067d0:	68ab      	ldr	r3, [r5, #8]
 80067d2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80067d6:	f040 8207 	bne.w	8006be8 <HAL_TIM_ConfigClockSource+0x568>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80067da:	686b      	ldr	r3, [r5, #4]
 80067dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e0:	bf18      	it	ne
 80067e2:	2b0a      	cmpne	r3, #10
 80067e4:	d003      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x16e>
 80067e6:	f033 0302 	bics.w	r3, r3, #2
 80067ea:	f040 81a1 	bne.w	8006b30 <HAL_TIM_ConfigClockSource+0x4b0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80067ee:	68e8      	ldr	r0, [r5, #12]
 80067f0:	280f      	cmp	r0, #15
 80067f2:	f200 81eb 	bhi.w	8006bcc <HAL_TIM_ConfigClockSource+0x54c>
      TIM_ETR_SetConfig(htim->Instance,
 80067f6:	6822      	ldr	r2, [r4, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067f8:	e9d5 5301 	ldrd	r5, r3, [r5, #4]
 80067fc:	6891      	ldr	r1, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067fe:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006800:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8006804:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006806:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800680a:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800680c:	6893      	ldr	r3, [r2, #8]
 800680e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006812:	6093      	str	r3, [r2, #8]
      break;
 8006814:	e7ac      	b.n	8006770 <HAL_TIM_ConfigClockSource+0xf0>
  switch (sClockSourceConfig->ClockSource)
 8006816:	2b70      	cmp	r3, #112	; 0x70
 8006818:	d1aa      	bne.n	8006770 <HAL_TIM_ConfigClockSource+0xf0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800681a:	4b45      	ldr	r3, [pc, #276]	; (8006930 <HAL_TIM_ConfigClockSource+0x2b0>)
 800681c:	4945      	ldr	r1, [pc, #276]	; (8006934 <HAL_TIM_ConfigClockSource+0x2b4>)
 800681e:	429a      	cmp	r2, r3
 8006820:	bf18      	it	ne
 8006822:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	428a      	cmp	r2, r1
 800682e:	bf0c      	ite	eq
 8006830:	2300      	moveq	r3, #0
 8006832:	f003 0301 	andne.w	r3, r3, #1
 8006836:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800683a:	428a      	cmp	r2, r1
 800683c:	bf0c      	ite	eq
 800683e:	2300      	moveq	r3, #0
 8006840:	f003 0301 	andne.w	r3, r3, #1
 8006844:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006848:	428a      	cmp	r2, r1
 800684a:	bf0c      	ite	eq
 800684c:	2300      	moveq	r3, #0
 800684e:	f003 0301 	andne.w	r3, r3, #1
 8006852:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8006856:	428a      	cmp	r2, r1
 8006858:	bf0c      	ite	eq
 800685a:	2300      	moveq	r3, #0
 800685c:	f003 0301 	andne.w	r3, r3, #1
 8006860:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8006864:	428a      	cmp	r2, r1
 8006866:	bf0c      	ite	eq
 8006868:	2300      	moveq	r3, #0
 800686a:	f003 0301 	andne.w	r3, r3, #1
 800686e:	b11b      	cbz	r3, 8006878 <HAL_TIM_ConfigClockSource+0x1f8>
 8006870:	4b32      	ldr	r3, [pc, #200]	; (800693c <HAL_TIM_ConfigClockSource+0x2bc>)
 8006872:	429a      	cmp	r2, r3
 8006874:	f040 81c4 	bne.w	8006c00 <HAL_TIM_ConfigClockSource+0x580>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006878:	68ab      	ldr	r3, [r5, #8]
 800687a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800687e:	f040 81b9 	bne.w	8006bf4 <HAL_TIM_ConfigClockSource+0x574>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006882:	686b      	ldr	r3, [r5, #4]
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	bf18      	it	ne
 800688a:	2b0a      	cmpne	r3, #10
 800688c:	d003      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x216>
 800688e:	f033 0302 	bics.w	r3, r3, #2
 8006892:	f040 8159 	bne.w	8006b48 <HAL_TIM_ConfigClockSource+0x4c8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006896:	68e8      	ldr	r0, [r5, #12]
 8006898:	280f      	cmp	r0, #15
 800689a:	f200 8182 	bhi.w	8006ba2 <HAL_TIM_ConfigClockSource+0x522>
      TIM_ETR_SetConfig(htim->Instance,
 800689e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80068a0:	e9d5 5301 	ldrd	r5, r3, [r5, #4]
 80068a4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068a6:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 80068ac:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 80068b2:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80068b4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80068ba:	6093      	str	r3, [r2, #8]
      break;
 80068bc:	e758      	b.n	8006770 <HAL_TIM_ConfigClockSource+0xf0>
  switch (sClockSourceConfig->ClockSource)
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d003      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x24a>
 80068c2:	d92b      	bls.n	800691c <HAL_TIM_ConfigClockSource+0x29c>
 80068c4:	2b30      	cmp	r3, #48	; 0x30
 80068c6:	f47f af53 	bne.w	8006770 <HAL_TIM_ConfigClockSource+0xf0>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80068ca:	4919      	ldr	r1, [pc, #100]	; (8006930 <HAL_TIM_ConfigClockSource+0x2b0>)
 80068cc:	4819      	ldr	r0, [pc, #100]	; (8006934 <HAL_TIM_ConfigClockSource+0x2b4>)
 80068ce:	428a      	cmp	r2, r1
 80068d0:	bf18      	it	ne
 80068d2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80068d6:	bf14      	ite	ne
 80068d8:	2101      	movne	r1, #1
 80068da:	2100      	moveq	r1, #0
 80068dc:	4282      	cmp	r2, r0
 80068de:	bf0c      	ite	eq
 80068e0:	2100      	moveq	r1, #0
 80068e2:	f001 0101 	andne.w	r1, r1, #1
 80068e6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80068ea:	4282      	cmp	r2, r0
 80068ec:	bf0c      	ite	eq
 80068ee:	2100      	moveq	r1, #0
 80068f0:	f001 0101 	andne.w	r1, r1, #1
 80068f4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80068f8:	4282      	cmp	r2, r0
 80068fa:	bf0c      	ite	eq
 80068fc:	2100      	moveq	r1, #0
 80068fe:	f001 0101 	andne.w	r1, r1, #1
 8006902:	b119      	cbz	r1, 800690c <HAL_TIM_ConfigClockSource+0x28c>
 8006904:	490c      	ldr	r1, [pc, #48]	; (8006938 <HAL_TIM_ConfigClockSource+0x2b8>)
 8006906:	428a      	cmp	r2, r1
 8006908:	f040 812a 	bne.w	8006b60 <HAL_TIM_ConfigClockSource+0x4e0>
  tmpsmcr = TIMx->SMCR;
 800690c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800690e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006912:	430b      	orrs	r3, r1
 8006914:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006918:	6093      	str	r3, [r2, #8]
}
 800691a:	e729      	b.n	8006770 <HAL_TIM_ConfigClockSource+0xf0>
  switch (sClockSourceConfig->ClockSource)
 800691c:	f033 0110 	bics.w	r1, r3, #16
 8006920:	f47f af26 	bne.w	8006770 <HAL_TIM_ConfigClockSource+0xf0>
 8006924:	e7d1      	b.n	80068ca <HAL_TIM_ConfigClockSource+0x24a>
  __HAL_LOCK(htim);
 8006926:	2002      	movs	r0, #2
}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	fffe0088 	.word	0xfffe0088
 8006930:	40010000 	.word	0x40010000
 8006934:	40000400 	.word	0x40000400
 8006938:	40010400 	.word	0x40010400
 800693c:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006940:	4bb2      	ldr	r3, [pc, #712]	; (8006c0c <HAL_TIM_ConfigClockSource+0x58c>)
 8006942:	49b3      	ldr	r1, [pc, #716]	; (8006c10 <HAL_TIM_ConfigClockSource+0x590>)
 8006944:	429a      	cmp	r2, r3
 8006946:	bf18      	it	ne
 8006948:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800694c:	bf14      	ite	ne
 800694e:	2301      	movne	r3, #1
 8006950:	2300      	moveq	r3, #0
 8006952:	428a      	cmp	r2, r1
 8006954:	bf0c      	ite	eq
 8006956:	2300      	moveq	r3, #0
 8006958:	f003 0301 	andne.w	r3, r3, #1
 800695c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006960:	428a      	cmp	r2, r1
 8006962:	bf0c      	ite	eq
 8006964:	2300      	moveq	r3, #0
 8006966:	f003 0301 	andne.w	r3, r3, #1
 800696a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800696e:	428a      	cmp	r2, r1
 8006970:	bf0c      	ite	eq
 8006972:	2300      	moveq	r3, #0
 8006974:	f003 0301 	andne.w	r3, r3, #1
 8006978:	b11b      	cbz	r3, 8006982 <HAL_TIM_ConfigClockSource+0x302>
 800697a:	4ba6      	ldr	r3, [pc, #664]	; (8006c14 <HAL_TIM_ConfigClockSource+0x594>)
 800697c:	429a      	cmp	r2, r3
 800697e:	f040 8103 	bne.w	8006b88 <HAL_TIM_ConfigClockSource+0x508>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006982:	686b      	ldr	r3, [r5, #4]
 8006984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006988:	bf18      	it	ne
 800698a:	2b0a      	cmpne	r3, #10
 800698c:	d003      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x316>
 800698e:	f033 0302 	bics.w	r3, r3, #2
 8006992:	f040 80c7 	bne.w	8006b24 <HAL_TIM_ConfigClockSource+0x4a4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006996:	68ee      	ldr	r6, [r5, #12]
 8006998:	2e0f      	cmp	r6, #15
 800699a:	f200 8109 	bhi.w	8006bb0 <HAL_TIM_ConfigClockSource+0x530>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a2:	6a18      	ldr	r0, [r3, #32]
 80069a4:	f020 0010 	bic.w	r0, r0, #16
 80069a8:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069aa:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80069ac:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ae:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069b6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ba:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80069be:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c0:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80069c2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80069c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069c8:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80069cc:	609a      	str	r2, [r3, #8]
}
 80069ce:	e6cf      	b.n	8006770 <HAL_TIM_ConfigClockSource+0xf0>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80069d0:	4b8e      	ldr	r3, [pc, #568]	; (8006c0c <HAL_TIM_ConfigClockSource+0x58c>)
 80069d2:	488f      	ldr	r0, [pc, #572]	; (8006c10 <HAL_TIM_ConfigClockSource+0x590>)
 80069d4:	429a      	cmp	r2, r3
 80069d6:	bf18      	it	ne
 80069d8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80069dc:	498e      	ldr	r1, [pc, #568]	; (8006c18 <HAL_TIM_ConfigClockSource+0x598>)
 80069de:	bf14      	ite	ne
 80069e0:	2301      	movne	r3, #1
 80069e2:	2300      	moveq	r3, #0
 80069e4:	4282      	cmp	r2, r0
 80069e6:	bf0c      	ite	eq
 80069e8:	2300      	moveq	r3, #0
 80069ea:	f003 0301 	andne.w	r3, r3, #1
 80069ee:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80069f2:	428a      	cmp	r2, r1
 80069f4:	bf0c      	ite	eq
 80069f6:	2300      	moveq	r3, #0
 80069f8:	f003 0301 	andne.w	r3, r3, #1
 80069fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a00:	4282      	cmp	r2, r0
 8006a02:	bf0c      	ite	eq
 8006a04:	2300      	moveq	r3, #0
 8006a06:	f003 0301 	andne.w	r3, r3, #1
 8006a0a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8006a0e:	428a      	cmp	r2, r1
 8006a10:	bf0c      	ite	eq
 8006a12:	2300      	moveq	r3, #0
 8006a14:	f003 0301 	andne.w	r3, r3, #1
 8006a18:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8006a1c:	4282      	cmp	r2, r0
 8006a1e:	bf0c      	ite	eq
 8006a20:	2300      	moveq	r3, #0
 8006a22:	f003 0301 	andne.w	r3, r3, #1
 8006a26:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8006a2a:	428a      	cmp	r2, r1
 8006a2c:	bf0c      	ite	eq
 8006a2e:	2300      	moveq	r3, #0
 8006a30:	f003 0301 	andne.w	r3, r3, #1
 8006a34:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8006a38:	4282      	cmp	r2, r0
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2300      	moveq	r3, #0
 8006a3e:	f003 0301 	andne.w	r3, r3, #1
 8006a42:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8006a46:	428a      	cmp	r2, r1
 8006a48:	bf0c      	ite	eq
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	f003 0301 	andne.w	r3, r3, #1
 8006a50:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8006a54:	4282      	cmp	r2, r0
 8006a56:	bf0c      	ite	eq
 8006a58:	2300      	moveq	r3, #0
 8006a5a:	f003 0301 	andne.w	r3, r3, #1
 8006a5e:	428a      	cmp	r2, r1
 8006a60:	bf0c      	ite	eq
 8006a62:	2300      	moveq	r3, #0
 8006a64:	f003 0301 	andne.w	r3, r3, #1
 8006a68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a6c:	428a      	cmp	r2, r1
 8006a6e:	bf0c      	ite	eq
 8006a70:	2300      	moveq	r3, #0
 8006a72:	f003 0301 	andne.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f43f ae7a 	beq.w	8006770 <HAL_TIM_ConfigClockSource+0xf0>
 8006a7c:	4b67      	ldr	r3, [pc, #412]	; (8006c1c <HAL_TIM_ConfigClockSource+0x59c>)
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	f43f ae76 	beq.w	8006770 <HAL_TIM_ConfigClockSource+0xf0>
 8006a84:	f241 2102 	movw	r1, #4610	; 0x1202
 8006a88:	4865      	ldr	r0, [pc, #404]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006a8a:	f013 fa27 	bl	8019edc <assert_failed>
 8006a8e:	e66f      	b.n	8006770 <HAL_TIM_ConfigClockSource+0xf0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a90:	4b5e      	ldr	r3, [pc, #376]	; (8006c0c <HAL_TIM_ConfigClockSource+0x58c>)
 8006a92:	495f      	ldr	r1, [pc, #380]	; (8006c10 <HAL_TIM_ConfigClockSource+0x590>)
 8006a94:	429a      	cmp	r2, r3
 8006a96:	bf18      	it	ne
 8006a98:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8006a9c:	bf14      	ite	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	2300      	moveq	r3, #0
 8006aa2:	428a      	cmp	r2, r1
 8006aa4:	bf0c      	ite	eq
 8006aa6:	2300      	moveq	r3, #0
 8006aa8:	f003 0301 	andne.w	r3, r3, #1
 8006aac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ab0:	428a      	cmp	r2, r1
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2300      	moveq	r3, #0
 8006ab6:	f003 0301 	andne.w	r3, r3, #1
 8006aba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006abe:	428a      	cmp	r2, r1
 8006ac0:	bf0c      	ite	eq
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	f003 0301 	andne.w	r3, r3, #1
 8006ac8:	b113      	cbz	r3, 8006ad0 <HAL_TIM_ConfigClockSource+0x450>
 8006aca:	4b52      	ldr	r3, [pc, #328]	; (8006c14 <HAL_TIM_ConfigClockSource+0x594>)
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d155      	bne.n	8006b7c <HAL_TIM_ConfigClockSource+0x4fc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ad0:	686b      	ldr	r3, [r5, #4]
 8006ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad6:	bf18      	it	ne
 8006ad8:	2b0a      	cmpne	r3, #10
 8006ada:	d002      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x462>
 8006adc:	f033 0302 	bics.w	r3, r3, #2
 8006ae0:	d11a      	bne.n	8006b18 <HAL_TIM_ConfigClockSource+0x498>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ae2:	68ee      	ldr	r6, [r5, #12]
 8006ae4:	2e0f      	cmp	r6, #15
 8006ae6:	d878      	bhi.n	8006bda <HAL_TIM_ConfigClockSource+0x55a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8006aec:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aee:	f020 000a 	bic.w	r0, r0, #10
  tmpccer |= TIM_ICPolarity;
 8006af2:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006af4:	6a18      	ldr	r0, [r3, #32]
 8006af6:	f020 0001 	bic.w	r0, r0, #1
 8006afa:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afc:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006afe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b02:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b08:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006b0a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b10:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006b14:	609a      	str	r2, [r3, #8]
}
 8006b16:	e62b      	b.n	8006770 <HAL_TIM_ConfigClockSource+0xf0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b18:	f241 2158 	movw	r1, #4696	; 0x1258
 8006b1c:	4840      	ldr	r0, [pc, #256]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b1e:	f013 f9dd 	bl	8019edc <assert_failed>
 8006b22:	e7de      	b.n	8006ae2 <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b24:	f241 2148 	movw	r1, #4680	; 0x1248
 8006b28:	483d      	ldr	r0, [pc, #244]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b2a:	f013 f9d7 	bl	8019edc <assert_failed>
 8006b2e:	e732      	b.n	8006996 <HAL_TIM_ConfigClockSource+0x316>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b30:	f241 2125 	movw	r1, #4645	; 0x1225
 8006b34:	483a      	ldr	r0, [pc, #232]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b36:	f013 f9d1 	bl	8019edc <assert_failed>
 8006b3a:	e658      	b.n	80067ee <HAL_TIM_ConfigClockSource+0x16e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b3c:	f241 2138 	movw	r1, #4664	; 0x1238
 8006b40:	4837      	ldr	r0, [pc, #220]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b42:	f013 f9cb 	bl	8019edc <assert_failed>
 8006b46:	e5f8      	b.n	800673a <HAL_TIM_ConfigClockSource+0xba>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b48:	f241 210d 	movw	r1, #4621	; 0x120d
 8006b4c:	4834      	ldr	r0, [pc, #208]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b4e:	f013 f9c5 	bl	8019edc <assert_failed>
 8006b52:	e6a0      	b.n	8006896 <HAL_TIM_ConfigClockSource+0x216>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006b54:	f241 2121 	movw	r1, #4641	; 0x1221
 8006b58:	4831      	ldr	r0, [pc, #196]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b5a:	f013 f9bf 	bl	8019edc <assert_failed>
 8006b5e:	e637      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006b60:	f241 2168 	movw	r1, #4712	; 0x1268
 8006b64:	482e      	ldr	r0, [pc, #184]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b66:	f013 f9b9 	bl	8019edc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	e6cd      	b.n	800690c <HAL_TIM_ConfigClockSource+0x28c>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b70:	f241 2135 	movw	r1, #4661	; 0x1235
 8006b74:	482a      	ldr	r0, [pc, #168]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b76:	f013 f9b1 	bl	8019edc <assert_failed>
 8006b7a:	e5d4      	b.n	8006726 <HAL_TIM_ConfigClockSource+0xa6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b7c:	f241 2155 	movw	r1, #4693	; 0x1255
 8006b80:	4827      	ldr	r0, [pc, #156]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b82:	f013 f9ab 	bl	8019edc <assert_failed>
 8006b86:	e7a3      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x450>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b88:	f241 2145 	movw	r1, #4677	; 0x1245
 8006b8c:	4824      	ldr	r0, [pc, #144]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b8e:	f013 f9a5 	bl	8019edc <assert_failed>
 8006b92:	e6f6      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x302>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006b94:	f241 11f6 	movw	r1, #4598	; 0x11f6
 8006b98:	4821      	ldr	r0, [pc, #132]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006b9a:	f013 f99f 	bl	8019edc <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	e58f      	b.n	80066c2 <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ba2:	481f      	ldr	r0, [pc, #124]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006ba4:	f241 210e 	movw	r1, #4622	; 0x120e
 8006ba8:	f013 f998 	bl	8019edc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006bac:	68e8      	ldr	r0, [r5, #12]
 8006bae:	e676      	b.n	800689e <HAL_TIM_ConfigClockSource+0x21e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006bb0:	f241 2149 	movw	r1, #4681	; 0x1249
 8006bb4:	481a      	ldr	r0, [pc, #104]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006bb6:	f013 f991 	bl	8019edc <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bba:	68ee      	ldr	r6, [r5, #12]
 8006bbc:	e6ef      	b.n	800699e <HAL_TIM_ConfigClockSource+0x31e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006bbe:	f241 2139 	movw	r1, #4665	; 0x1239
 8006bc2:	4817      	ldr	r0, [pc, #92]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006bc4:	f013 f98a 	bl	8019edc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc8:	68ee      	ldr	r6, [r5, #12]
 8006bca:	e5ba      	b.n	8006742 <HAL_TIM_ConfigClockSource+0xc2>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006bcc:	4814      	ldr	r0, [pc, #80]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006bce:	f241 2126 	movw	r1, #4646	; 0x1226
 8006bd2:	f013 f983 	bl	8019edc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006bd6:	68e8      	ldr	r0, [r5, #12]
 8006bd8:	e60d      	b.n	80067f6 <HAL_TIM_ConfigClockSource+0x176>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006bda:	f241 2159 	movw	r1, #4697	; 0x1259
 8006bde:	4810      	ldr	r0, [pc, #64]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006be0:	f013 f97c 	bl	8019edc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be4:	68ee      	ldr	r6, [r5, #12]
 8006be6:	e77f      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x468>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006be8:	f241 2124 	movw	r1, #4644	; 0x1224
 8006bec:	480c      	ldr	r0, [pc, #48]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006bee:	f013 f975 	bl	8019edc <assert_failed>
 8006bf2:	e5f2      	b.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006bf4:	f241 210c 	movw	r1, #4620	; 0x120c
 8006bf8:	4809      	ldr	r0, [pc, #36]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006bfa:	f013 f96f 	bl	8019edc <assert_failed>
 8006bfe:	e640      	b.n	8006882 <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006c00:	f241 2109 	movw	r1, #4617	; 0x1209
 8006c04:	4806      	ldr	r0, [pc, #24]	; (8006c20 <HAL_TIM_ConfigClockSource+0x5a0>)
 8006c06:	f013 f969 	bl	8019edc <assert_failed>
 8006c0a:	e635      	b.n	8006878 <HAL_TIM_ConfigClockSource+0x1f8>
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40010400 	.word	0x40010400
 8006c18:	40000800 	.word	0x40000800
 8006c1c:	40002000 	.word	0x40002000
 8006c20:	0801fd64 	.word	0x0801fd64

08006c24 <HAL_TIM_PeriodElapsedCallback>:
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <HAL_TIM_OC_DelayElapsedCallback>:
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop

08006c2c <HAL_TIM_IC_CaptureCallback>:
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop

08006c30 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop

08006c34 <HAL_TIM_TriggerCallback>:
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop

08006c38 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c38:	6803      	ldr	r3, [r0, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	0791      	lsls	r1, r2, #30
{
 8006c3e:	b510      	push	{r4, lr}
 8006c40:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c42:	d502      	bpl.n	8006c4a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	0792      	lsls	r2, r2, #30
 8006c48:	d468      	bmi.n	8006d1c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	0752      	lsls	r2, r2, #29
 8006c4e:	d502      	bpl.n	8006c56 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	0750      	lsls	r0, r2, #29
 8006c54:	d44f      	bmi.n	8006cf6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	0711      	lsls	r1, r2, #28
 8006c5a:	d502      	bpl.n	8006c62 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	0712      	lsls	r2, r2, #28
 8006c60:	d437      	bmi.n	8006cd2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	06d0      	lsls	r0, r2, #27
 8006c66:	d502      	bpl.n	8006c6e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	06d1      	lsls	r1, r2, #27
 8006c6c:	d41e      	bmi.n	8006cac <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	07d2      	lsls	r2, r2, #31
 8006c72:	d502      	bpl.n	8006c7a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	07d0      	lsls	r0, r2, #31
 8006c78:	d469      	bmi.n	8006d4e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	0611      	lsls	r1, r2, #24
 8006c7e:	d502      	bpl.n	8006c86 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	0612      	lsls	r2, r2, #24
 8006c84:	d46b      	bmi.n	8006d5e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	05d0      	lsls	r0, r2, #23
 8006c8a:	d502      	bpl.n	8006c92 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	0611      	lsls	r1, r2, #24
 8006c90:	d46d      	bmi.n	8006d6e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	0652      	lsls	r2, r2, #25
 8006c96:	d502      	bpl.n	8006c9e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	0650      	lsls	r0, r2, #25
 8006c9c:	d46f      	bmi.n	8006d7e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	0691      	lsls	r1, r2, #26
 8006ca2:	d502      	bpl.n	8006caa <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	0692      	lsls	r2, r2, #26
 8006ca8:	d449      	bmi.n	8006d3e <HAL_TIM_IRQHandler+0x106>
}
 8006caa:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cac:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cb0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cb6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006cbe:	d16f      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc0:	f7ff ffb2 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7ff ffb3 	bl	8006c30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cca:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ccc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cce:	7722      	strb	r2, [r4, #28]
 8006cd0:	e7cd      	b.n	8006c6e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cd2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cd6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cda:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cdc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	079b      	lsls	r3, r3, #30
 8006ce2:	d15a      	bne.n	8006d9a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce4:	f7ff ffa0 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f7ff ffa1 	bl	8006c30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cf0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf2:	7722      	strb	r2, [r4, #28]
 8006cf4:	e7b5      	b.n	8006c62 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cf6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cfa:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cfe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d00:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d08:	d144      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0a:	f7ff ff8d 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff ff8e 	bl	8006c30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d14:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d16:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d18:	7722      	strb	r2, [r4, #28]
 8006d1a:	e79c      	b.n	8006c56 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d1c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d20:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d22:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d24:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	0799      	lsls	r1, r3, #30
 8006d2a:	d130      	bne.n	8006d8e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2c:	f7ff ff7c 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7ff ff7d 	bl	8006c30 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d36:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d38:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3a:	7722      	strb	r2, [r4, #28]
 8006d3c:	e785      	b.n	8006c4a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d3e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006d42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d44:	611a      	str	r2, [r3, #16]
}
 8006d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006d4a:	f000 b8d1 	b.w	8006ef0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d4e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d54:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d56:	f7ff ff65 	bl	8006c24 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	e78d      	b.n	8006c7a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8006d62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d66:	f000 f8c5 	bl	8006ef4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	e78b      	b.n	8006c86 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8006d72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d74:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006d76:	f000 f8bf 	bl	8006ef8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	e789      	b.n	8006c92 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8006d82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d84:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006d86:	f7ff ff55 	bl	8006c34 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	e787      	b.n	8006c9e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8006d8e:	f7ff ff4d 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 8006d92:	e7d0      	b.n	8006d36 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d94:	f7ff ff4a 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 8006d98:	e7bc      	b.n	8006d14 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9a:	f7ff ff47 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 8006d9e:	e7a6      	b.n	8006cee <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8006da0:	f7ff ff44 	bl	8006c2c <HAL_TIM_IC_CaptureCallback>
 8006da4:	e791      	b.n	8006cca <HAL_TIM_IRQHandler+0x92>
 8006da6:	bf00      	nop

08006da8 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8006da8:	6802      	ldr	r2, [r0, #0]
{
 8006daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8006dac:	4b4a      	ldr	r3, [pc, #296]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
{
 8006dae:	460d      	mov	r5, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8006db0:	4f4a      	ldr	r7, [pc, #296]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
{
 8006db2:	4604      	mov	r4, r0
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8006db4:	429a      	cmp	r2, r3
 8006db6:	bf18      	it	ne
 8006db8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8006dbc:	4e48      	ldr	r6, [pc, #288]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8006dbe:	4949      	ldr	r1, [pc, #292]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 8006dc0:	bf14      	ite	ne
 8006dc2:	2301      	movne	r3, #1
 8006dc4:	2300      	moveq	r3, #0
 8006dc6:	42ba      	cmp	r2, r7
 8006dc8:	bf0c      	ite	eq
 8006dca:	2300      	moveq	r3, #0
 8006dcc:	f003 0301 	andne.w	r3, r3, #1
 8006dd0:	42b2      	cmp	r2, r6
 8006dd2:	bf0c      	ite	eq
 8006dd4:	2300      	moveq	r3, #0
 8006dd6:	f003 0301 	andne.w	r3, r3, #1
 8006dda:	428a      	cmp	r2, r1
 8006ddc:	bf0c      	ite	eq
 8006dde:	2300      	moveq	r3, #0
 8006de0:	f003 0301 	andne.w	r3, r3, #1
 8006de4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006de8:	428a      	cmp	r2, r1
 8006dea:	bf0c      	ite	eq
 8006dec:	2300      	moveq	r3, #0
 8006dee:	f003 0301 	andne.w	r3, r3, #1
 8006df2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006df6:	428a      	cmp	r2, r1
 8006df8:	bf0c      	ite	eq
 8006dfa:	2300      	moveq	r3, #0
 8006dfc:	f003 0301 	andne.w	r3, r3, #1
 8006e00:	b113      	cbz	r3, 8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006e02:	4b39      	ldr	r3, [pc, #228]	; (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x140>)
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d153      	bne.n	8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d001      	beq.n	8006e16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d152      	bne.n	8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x114>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006e16:	68ab      	ldr	r3, [r5, #8]
 8006e18:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006e1c:	d13d      	bne.n	8006e9a <HAL_TIMEx_MasterConfigSynchronization+0xf2>

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d042      	beq.n	8006eac <HAL_TIMEx_MasterConfigSynchronization+0x104>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e26:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e28:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(htim);
 8006e2a:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e30:	4a29      	ldr	r2, [pc, #164]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
  __HAL_LOCK(htim);
 8006e32:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e36:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 8006e38:	685e      	ldr	r6, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006e3a:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e3c:	d015      	beq.n	8006e6a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006e3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d011      	beq.n	8006e6a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e46:	682a      	ldr	r2, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e48:	f026 0670 	bic.w	r6, r6, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006e4c:	f027 0780 	bic.w	r7, r7, #128	; 0x80

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e50:	2101      	movs	r1, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e52:	4316      	orrs	r6, r2
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e54:	68aa      	ldr	r2, [r5, #8]
 8006e56:	4317      	orrs	r7, r2

  __HAL_UNLOCK(htim);
 8006e58:	2200      	movs	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8006e5a:	605e      	str	r6, [r3, #4]

  return HAL_OK;
 8006e5c:	4610      	mov	r0, r2
  htim->Instance->SMCR = tmpsmcr;
 8006e5e:	609f      	str	r7, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006e60:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006e64:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8006e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006e6a:	6868      	ldr	r0, [r5, #4]
 8006e6c:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
 8006e70:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006e74:	bf18      	it	ne
 8006e76:	2a00      	cmpne	r2, #0
 8006e78:	bf14      	ite	ne
 8006e7a:	2101      	movne	r1, #1
 8006e7c:	2100      	moveq	r1, #0
 8006e7e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006e82:	bf0c      	ite	eq
 8006e84:	2100      	moveq	r1, #0
 8006e86:	f001 0101 	andne.w	r1, r1, #1
 8006e8a:	b111      	cbz	r1, 8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e8c:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8006e90:	d11a      	bne.n	8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0x120>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e92:	f426 0670 	bic.w	r6, r6, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e96:	4306      	orrs	r6, r0
 8006e98:	e7d5      	b.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006e9a:	f240 6165 	movw	r1, #1637	; 0x665
 8006e9e:	4813      	ldr	r0, [pc, #76]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006ea0:	f013 f81c 	bl	8019edc <assert_failed>
  __HAL_LOCK(htim);
 8006ea4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d1bc      	bne.n	8006e26 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006eac:	2002      	movs	r0, #2
}
 8006eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8006eb0:	f240 6163 	movw	r1, #1635	; 0x663
 8006eb4:	480d      	ldr	r0, [pc, #52]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006eb6:	f013 f811 	bl	8019edc <assert_failed>
 8006eba:	e7a5      	b.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006ebc:	f240 6164 	movw	r1, #1636	; 0x664
 8006ec0:	480a      	ldr	r0, [pc, #40]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006ec2:	f013 f80b 	bl	8019edc <assert_failed>
 8006ec6:	e7a6      	b.n	8006e16 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006ec8:	4808      	ldr	r0, [pc, #32]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006eca:	f240 6177 	movw	r1, #1655	; 0x677
 8006ece:	f013 f805 	bl	8019edc <assert_failed>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ed2:	6868      	ldr	r0, [r5, #4]
  htim->Instance->CR2 = tmpcr2;
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	e7dc      	b.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40000400 	.word	0x40000400
 8006ee0:	40000800 	.word	0x40000800
 8006ee4:	40000c00 	.word	0x40000c00
 8006ee8:	40010400 	.word	0x40010400
 8006eec:	0801fd9c 	.word	0x0801fd9c

08006ef0 <HAL_TIMEx_CommutCallback>:
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop

08006ef4 <HAL_TIMEx_BreakCallback>:
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop

08006ef8 <HAL_TIMEx_Break2Callback>:
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006efc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8006efe:	4b5f      	ldr	r3, [pc, #380]	; (800707c <FMC_SDRAM_Init+0x180>)
{
 8006f00:	4605      	mov	r5, r0
 8006f02:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8006f04:	4298      	cmp	r0, r3
 8006f06:	d004      	beq.n	8006f12 <FMC_SDRAM_Init+0x16>
 8006f08:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8006f0c:	485c      	ldr	r0, [pc, #368]	; (8007080 <FMC_SDRAM_Init+0x184>)
 8006f0e:	f012 ffe5 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d904      	bls.n	8006f22 <FMC_SDRAM_Init+0x26>
 8006f18:	f240 21ed 	movw	r1, #749	; 0x2ed
 8006f1c:	4858      	ldr	r0, [pc, #352]	; (8007080 <FMC_SDRAM_Init+0x184>)
 8006f1e:	f012 ffdd 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 8006f22:	6863      	ldr	r3, [r4, #4]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	f200 80a3 	bhi.w	8007070 <FMC_SDRAM_Init+0x174>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 8006f2a:	68a3      	ldr	r3, [r4, #8]
 8006f2c:	f033 0204 	bics.w	r2, r3, #4
 8006f30:	d002      	beq.n	8006f38 <FMC_SDRAM_Init+0x3c>
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	f040 8096 	bne.w	8007064 <FMC_SDRAM_Init+0x168>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 8006f38:	68e3      	ldr	r3, [r4, #12]
 8006f3a:	f033 0210 	bics.w	r2, r3, #16
 8006f3e:	d001      	beq.n	8006f44 <FMC_SDRAM_Init+0x48>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d17f      	bne.n	8007044 <FMC_SDRAM_Init+0x148>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8006f4a:	f040 8085 	bne.w	8007058 <FMC_SDRAM_Init+0x15c>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 8006f4e:	6963      	ldr	r3, [r4, #20]
 8006f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f54:	2a80      	cmp	r2, #128	; 0x80
 8006f56:	d002      	beq.n	8006f5e <FMC_SDRAM_Init+0x62>
 8006f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5c:	d163      	bne.n	8007026 <FMC_SDRAM_Init+0x12a>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 8006f5e:	69a3      	ldr	r3, [r4, #24]
 8006f60:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8006f64:	d168      	bne.n	8007038 <FMC_SDRAM_Init+0x13c>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 8006f66:	69e3      	ldr	r3, [r4, #28]
 8006f68:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006f6c:	d002      	beq.n	8006f74 <FMC_SDRAM_Init+0x78>
 8006f6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f72:	d149      	bne.n	8007008 <FMC_SDRAM_Init+0x10c>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8006f74:	6a23      	ldr	r3, [r4, #32]
 8006f76:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8006f7a:	d14e      	bne.n	800701a <FMC_SDRAM_Init+0x11e>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 8006f7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f7e:	f431 5300 	bics.w	r3, r1, #8192	; 0x2000
 8006f82:	d002      	beq.n	8006f8a <FMC_SDRAM_Init+0x8e>
 8006f84:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006f88:	d119      	bne.n	8006fbe <FMC_SDRAM_Init+0xc2>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d01f      	beq.n	8006fd0 <FMC_SDRAM_Init+0xd4>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006f90:	6828      	ldr	r0, [r5, #0]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f92:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	68e2      	ldr	r2, [r4, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	6922      	ldr	r2, [r4, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	6962      	ldr	r2, [r4, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	69a2      	ldr	r2, [r4, #24]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	69e2      	ldr	r2, [r4, #28]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	6a22      	ldr	r2, [r4, #32]
 8006fae:	4313      	orrs	r3, r2
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006fb0:	4a34      	ldr	r2, [pc, #208]	; (8007084 <FMC_SDRAM_Init+0x188>)
 8006fb2:	4002      	ands	r2, r0
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006fb8:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006fba:	602b      	str	r3, [r5, #0]
}
 8006fbc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 8006fbe:	f240 21f6 	movw	r1, #758	; 0x2f6
 8006fc2:	482f      	ldr	r0, [pc, #188]	; (8007080 <FMC_SDRAM_Init+0x184>)
 8006fc4:	f012 ff8a 	bl	8019edc <assert_failed>
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006fc8:	6823      	ldr	r3, [r4, #0]
                        Init->ReadPipeDelay
 8006fca:	6a61      	ldr	r1, [r4, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d1df      	bne.n	8006f90 <FMC_SDRAM_Init+0x94>
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006fd0:	682b      	ldr	r3, [r5, #0]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006fd2:	69e0      	ldr	r0, [r4, #28]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006fd4:	f423 4cf8 	bic.w	ip, r3, #31744	; 0x7c00
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006fd8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8006fdc:	4313      	orrs	r3, r2
                       Init->RowBitsNumber       |\
 8006fde:	68e2      	ldr	r2, [r4, #12]
 8006fe0:	4313      	orrs	r3, r2
                       Init->MemoryDataWidth     |\
 8006fe2:	6922      	ldr	r2, [r4, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	6a22      	ldr	r2, [r4, #32]
 8006fe8:	4310      	orrs	r0, r2
                       Init->InternalBankNumber  |\
 8006fea:	6962      	ldr	r2, [r4, #20]
 8006fec:	ea40 000c 	orr.w	r0, r0, ip
 8006ff0:	4313      	orrs	r3, r2
                       Init->CASLatency          |\
 8006ff2:	69a2      	ldr	r2, [r4, #24]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006ff4:	4301      	orrs	r1, r0
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006ff6:	6868      	ldr	r0, [r5, #4]
                       Init->CASLatency          |\
 8006ff8:	4313      	orrs	r3, r2
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006ffa:	4a22      	ldr	r2, [pc, #136]	; (8007084 <FMC_SDRAM_Init+0x188>)
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006ffc:	6029      	str	r1, [r5, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006ffe:	4002      	ands	r2, r0
}
 8007000:	2000      	movs	r0, #0
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007002:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007004:	606b      	str	r3, [r5, #4]
}
 8007006:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 8007008:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800700c:	481c      	ldr	r0, [pc, #112]	; (8007080 <FMC_SDRAM_Init+0x184>)
 800700e:	f012 ff65 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8007012:	6a23      	ldr	r3, [r4, #32]
 8007014:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8007018:	d0b0      	beq.n	8006f7c <FMC_SDRAM_Init+0x80>
 800701a:	f240 21f5 	movw	r1, #757	; 0x2f5
 800701e:	4818      	ldr	r0, [pc, #96]	; (8007080 <FMC_SDRAM_Init+0x184>)
 8007020:	f012 ff5c 	bl	8019edc <assert_failed>
 8007024:	e7aa      	b.n	8006f7c <FMC_SDRAM_Init+0x80>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 8007026:	f240 21f2 	movw	r1, #754	; 0x2f2
 800702a:	4815      	ldr	r0, [pc, #84]	; (8007080 <FMC_SDRAM_Init+0x184>)
 800702c:	f012 ff56 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 8007030:	69a3      	ldr	r3, [r4, #24]
 8007032:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8007036:	d096      	beq.n	8006f66 <FMC_SDRAM_Init+0x6a>
 8007038:	f240 21f3 	movw	r1, #755	; 0x2f3
 800703c:	4810      	ldr	r0, [pc, #64]	; (8007080 <FMC_SDRAM_Init+0x184>)
 800703e:	f012 ff4d 	bl	8019edc <assert_failed>
 8007042:	e790      	b.n	8006f66 <FMC_SDRAM_Init+0x6a>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 8007044:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8007048:	480d      	ldr	r0, [pc, #52]	; (8007080 <FMC_SDRAM_Init+0x184>)
 800704a:	f012 ff47 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800704e:	6923      	ldr	r3, [r4, #16]
 8007050:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8007054:	f43f af7b 	beq.w	8006f4e <FMC_SDRAM_Init+0x52>
 8007058:	f240 21f1 	movw	r1, #753	; 0x2f1
 800705c:	4808      	ldr	r0, [pc, #32]	; (8007080 <FMC_SDRAM_Init+0x184>)
 800705e:	f012 ff3d 	bl	8019edc <assert_failed>
 8007062:	e774      	b.n	8006f4e <FMC_SDRAM_Init+0x52>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 8007064:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007068:	4805      	ldr	r0, [pc, #20]	; (8007080 <FMC_SDRAM_Init+0x184>)
 800706a:	f012 ff37 	bl	8019edc <assert_failed>
 800706e:	e763      	b.n	8006f38 <FMC_SDRAM_Init+0x3c>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 8007070:	f240 21ee 	movw	r1, #750	; 0x2ee
 8007074:	4802      	ldr	r0, [pc, #8]	; (8007080 <FMC_SDRAM_Init+0x184>)
 8007076:	f012 ff31 	bl	8019edc <assert_failed>
 800707a:	e756      	b.n	8006f2a <FMC_SDRAM_Init+0x2e>
 800707c:	a0000140 	.word	0xa0000140
 8007080:	0801fdd8 	.word	0x0801fdd8
 8007084:	ffff8000 	.word	0xffff8000

08007088 <FMC_SDRAM_Timing_Init>:
{
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007088:	4b50      	ldr	r3, [pc, #320]	; (80071cc <FMC_SDRAM_Timing_Init+0x144>)
 800708a:	4298      	cmp	r0, r3
{
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	4605      	mov	r5, r0
 8007090:	460c      	mov	r4, r1
 8007092:	4616      	mov	r6, r2
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007094:	d004      	beq.n	80070a0 <FMC_SDRAM_Timing_Init+0x18>
 8007096:	f240 313d 	movw	r1, #829	; 0x33d
 800709a:	484d      	ldr	r0, [pc, #308]	; (80071d0 <FMC_SDRAM_Timing_Init+0x148>)
 800709c:	f012 ff1e 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	2b0f      	cmp	r3, #15
 80070a6:	f200 808a 	bhi.w	80071be <FMC_SDRAM_Timing_Init+0x136>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 80070aa:	6863      	ldr	r3, [r4, #4]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	2b0f      	cmp	r3, #15
 80070b0:	d87f      	bhi.n	80071b2 <FMC_SDRAM_Timing_Init+0x12a>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 80070b2:	68a3      	ldr	r3, [r4, #8]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	2b0f      	cmp	r3, #15
 80070b8:	d875      	bhi.n	80071a6 <FMC_SDRAM_Timing_Init+0x11e>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 80070ba:	68e3      	ldr	r3, [r4, #12]
 80070bc:	3b01      	subs	r3, #1
 80070be:	2b0f      	cmp	r3, #15
 80070c0:	d86b      	bhi.n	800719a <FMC_SDRAM_Timing_Init+0x112>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	2b0f      	cmp	r3, #15
 80070c8:	d861      	bhi.n	800718e <FMC_SDRAM_Timing_Init+0x106>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 80070ca:	6963      	ldr	r3, [r4, #20]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	2b0f      	cmp	r3, #15
 80070d0:	d857      	bhi.n	8007182 <FMC_SDRAM_Timing_Init+0xfa>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 80070d2:	69a3      	ldr	r3, [r4, #24]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	2b0f      	cmp	r3, #15
 80070d8:	d84d      	bhi.n	8007176 <FMC_SDRAM_Timing_Init+0xee>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 80070da:	2e01      	cmp	r6, #1
 80070dc:	d825      	bhi.n	800712a <FMC_SDRAM_Timing_Init+0xa2>
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80070de:	d129      	bne.n	8007134 <FMC_SDRAM_Timing_Init+0xac>
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
                        (((Timing->RPDelay)-1) << 20)); 
 80070e0:	6962      	ldr	r2, [r4, #20]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80070e2:	68e1      	ldr	r1, [r4, #12]
                        (((Timing->RPDelay)-1) << 20)); 
 80070e4:	3a01      	subs	r2, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80070e6:	3901      	subs	r1, #1
                        (((Timing->RPDelay)-1) << 20)); 
 80070e8:	0512      	lsls	r2, r2, #20
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80070ea:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80070ee:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80070f2:	6821      	ldr	r1, [r4, #0]
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80070f4:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80070f6:	1e46      	subs	r6, r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80070f8:	3901      	subs	r1, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80070fa:	68a8      	ldr	r0, [r5, #8]
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80070fc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80070fe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007102:	6926      	ldr	r6, [r4, #16]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007104:	430b      	orrs	r3, r1
                       (((Timing->RCDDelay)-1) << 24));   
 8007106:	69a1      	ldr	r1, [r4, #24]
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007108:	1e74      	subs	r4, r6, #1
                       (((Timing->RCDDelay)-1) << 24));   
 800710a:	3901      	subs	r1, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800710c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007110:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007114:	68e9      	ldr	r1, [r5, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007116:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800711a:	430b      	orrs	r3, r1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800711c:	492d      	ldr	r1, [pc, #180]	; (80071d4 <FMC_SDRAM_Timing_Init+0x14c>)
 800711e:	4001      	ands	r1, r0
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8007120:	2000      	movs	r0, #0
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007122:	430a      	orrs	r2, r1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007124:	60aa      	str	r2, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007126:	60eb      	str	r3, [r5, #12]
}
 8007128:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800712a:	f240 3145 	movw	r1, #837	; 0x345
 800712e:	4828      	ldr	r0, [pc, #160]	; (80071d0 <FMC_SDRAM_Timing_Init+0x148>)
 8007130:	f012 fed4 	bl	8019edc <assert_failed>
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007134:	6821      	ldr	r1, [r4, #0]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007136:	68aa      	ldr	r2, [r5, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007138:	3901      	subs	r1, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800713a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800713e:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007142:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007144:	3801      	subs	r0, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007146:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007148:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800714c:	430b      	orrs	r3, r1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800714e:	68e1      	ldr	r1, [r4, #12]
 8007150:	3901      	subs	r1, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007152:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007156:	6921      	ldr	r1, [r4, #16]
 8007158:	3901      	subs	r1, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800715a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                       (((Timing->RCDDelay)-1) << 24));
 800715e:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
                       (((Timing->RPDelay)-1) << 20)             |\
 8007162:	3801      	subs	r0, #1
                       (((Timing->RCDDelay)-1) << 24));
 8007164:	3901      	subs	r1, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007166:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
}
 800716a:	2000      	movs	r0, #0
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800716c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007170:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007172:	60ab      	str	r3, [r5, #8]
}
 8007174:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 8007176:	f44f 7151 	mov.w	r1, #836	; 0x344
 800717a:	4815      	ldr	r0, [pc, #84]	; (80071d0 <FMC_SDRAM_Timing_Init+0x148>)
 800717c:	f012 feae 	bl	8019edc <assert_failed>
 8007180:	e7ab      	b.n	80070da <FMC_SDRAM_Timing_Init+0x52>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 8007182:	f240 3143 	movw	r1, #835	; 0x343
 8007186:	4812      	ldr	r0, [pc, #72]	; (80071d0 <FMC_SDRAM_Timing_Init+0x148>)
 8007188:	f012 fea8 	bl	8019edc <assert_failed>
 800718c:	e7a1      	b.n	80070d2 <FMC_SDRAM_Timing_Init+0x4a>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800718e:	f240 3142 	movw	r1, #834	; 0x342
 8007192:	480f      	ldr	r0, [pc, #60]	; (80071d0 <FMC_SDRAM_Timing_Init+0x148>)
 8007194:	f012 fea2 	bl	8019edc <assert_failed>
 8007198:	e797      	b.n	80070ca <FMC_SDRAM_Timing_Init+0x42>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800719a:	f240 3141 	movw	r1, #833	; 0x341
 800719e:	480c      	ldr	r0, [pc, #48]	; (80071d0 <FMC_SDRAM_Timing_Init+0x148>)
 80071a0:	f012 fe9c 	bl	8019edc <assert_failed>
 80071a4:	e78d      	b.n	80070c2 <FMC_SDRAM_Timing_Init+0x3a>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 80071a6:	f44f 7150 	mov.w	r1, #832	; 0x340
 80071aa:	4809      	ldr	r0, [pc, #36]	; (80071d0 <FMC_SDRAM_Timing_Init+0x148>)
 80071ac:	f012 fe96 	bl	8019edc <assert_failed>
 80071b0:	e783      	b.n	80070ba <FMC_SDRAM_Timing_Init+0x32>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 80071b2:	f240 313f 	movw	r1, #831	; 0x33f
 80071b6:	4806      	ldr	r0, [pc, #24]	; (80071d0 <FMC_SDRAM_Timing_Init+0x148>)
 80071b8:	f012 fe90 	bl	8019edc <assert_failed>
 80071bc:	e779      	b.n	80070b2 <FMC_SDRAM_Timing_Init+0x2a>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 80071be:	f240 313e 	movw	r1, #830	; 0x33e
 80071c2:	4803      	ldr	r0, [pc, #12]	; (80071d0 <FMC_SDRAM_Timing_Init+0x148>)
 80071c4:	f012 fe8a 	bl	8019edc <assert_failed>
 80071c8:	e76f      	b.n	80070aa <FMC_SDRAM_Timing_Init+0x22>
 80071ca:	bf00      	nop
 80071cc:	a0000140 	.word	0xa0000140
 80071d0:	0801fdd8 	.word	0x0801fdd8
 80071d4:	ff0f0fff 	.word	0xff0f0fff

080071d8 <FMC_SDRAM_SendCommand>:
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 80071d8:	4b26      	ldr	r3, [pc, #152]	; (8007274 <FMC_SDRAM_SendCommand+0x9c>)
  __IO uint32_t tmpr = 0;
 80071da:	2200      	movs	r2, #0
{
 80071dc:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 80071de:	4298      	cmp	r0, r3
{
 80071e0:	b083      	sub	sp, #12
 80071e2:	4605      	mov	r5, r0
 80071e4:	460c      	mov	r4, r1
  __IO uint32_t tmpr = 0;
 80071e6:	9201      	str	r2, [sp, #4]
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 80071e8:	d004      	beq.n	80071f4 <FMC_SDRAM_SendCommand+0x1c>
 80071ea:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 80071ee:	4822      	ldr	r0, [pc, #136]	; (8007278 <FMC_SDRAM_SendCommand+0xa0>)
 80071f0:	f012 fe74 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	2b06      	cmp	r3, #6
 80071f8:	d836      	bhi.n	8007268 <FMC_SDRAM_SendCommand+0x90>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 80071fa:	6863      	ldr	r3, [r4, #4]
 80071fc:	f023 0210 	bic.w	r2, r3, #16
 8007200:	2a08      	cmp	r2, #8
 8007202:	d001      	beq.n	8007208 <FMC_SDRAM_SendCommand+0x30>
 8007204:	2b10      	cmp	r3, #16
 8007206:	d116      	bne.n	8007236 <FMC_SDRAM_SendCommand+0x5e>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 8007208:	68a3      	ldr	r3, [r4, #8]
 800720a:	3b01      	subs	r3, #1
 800720c:	2b0f      	cmp	r3, #15
 800720e:	d81b      	bhi.n	8007248 <FMC_SDRAM_SendCommand+0x70>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 8007210:	68e1      	ldr	r1, [r4, #12]
 8007212:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007216:	d220      	bcs.n	800725a <FMC_SDRAM_SendCommand+0x82>

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007218:	68a2      	ldr	r2, [r4, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800721a:	e9d4 3000 	ldrd	r3, r0, [r4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800721e:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007220:	4303      	orrs	r3, r0
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 8007222:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007224:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8007228:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800722c:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	612b      	str	r3, [r5, #16]
}
 8007232:	b003      	add	sp, #12
 8007234:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 8007236:	f240 31d2 	movw	r1, #978	; 0x3d2
 800723a:	480f      	ldr	r0, [pc, #60]	; (8007278 <FMC_SDRAM_SendCommand+0xa0>)
 800723c:	f012 fe4e 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 8007240:	68a3      	ldr	r3, [r4, #8]
 8007242:	3b01      	subs	r3, #1
 8007244:	2b0f      	cmp	r3, #15
 8007246:	d9e3      	bls.n	8007210 <FMC_SDRAM_SendCommand+0x38>
 8007248:	f240 31d3 	movw	r1, #979	; 0x3d3
 800724c:	480a      	ldr	r0, [pc, #40]	; (8007278 <FMC_SDRAM_SendCommand+0xa0>)
 800724e:	f012 fe45 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 8007252:	68e1      	ldr	r1, [r4, #12]
 8007254:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007258:	d3de      	bcc.n	8007218 <FMC_SDRAM_SendCommand+0x40>
 800725a:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800725e:	4806      	ldr	r0, [pc, #24]	; (8007278 <FMC_SDRAM_SendCommand+0xa0>)
 8007260:	f012 fe3c 	bl	8019edc <assert_failed>
                    ((Command->ModeRegisterDefinition) << 9)
 8007264:	68e1      	ldr	r1, [r4, #12]
 8007266:	e7d7      	b.n	8007218 <FMC_SDRAM_SendCommand+0x40>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 8007268:	f240 31d1 	movw	r1, #977	; 0x3d1
 800726c:	4802      	ldr	r0, [pc, #8]	; (8007278 <FMC_SDRAM_SendCommand+0xa0>)
 800726e:	f012 fe35 	bl	8019edc <assert_failed>
 8007272:	e7c2      	b.n	80071fa <FMC_SDRAM_SendCommand+0x22>
 8007274:	a0000140 	.word	0xa0000140
 8007278:	0801fdd8 	.word	0x0801fdd8

0800727c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800727c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <FMC_SDRAM_ProgramRefreshRate+0x34>)
{
 8007280:	4604      	mov	r4, r0
 8007282:	460d      	mov	r5, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007284:	4298      	cmp	r0, r3
 8007286:	d004      	beq.n	8007292 <FMC_SDRAM_ProgramRefreshRate+0x16>
 8007288:	f240 31eb 	movw	r1, #1003	; 0x3eb
 800728c:	4809      	ldr	r0, [pc, #36]	; (80072b4 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 800728e:	f012 fe25 	bl	8019edc <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 8007292:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8007296:	d205      	bcs.n	80072a4 <FMC_SDRAM_ProgramRefreshRate+0x28>
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007298:	6961      	ldr	r1, [r4, #20]
  
  return HAL_OK;   
}
 800729a:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 800729c:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
 80072a0:	6165      	str	r5, [r4, #20]
}
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 80072a4:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 80072a8:	4802      	ldr	r0, [pc, #8]	; (80072b4 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 80072aa:	f012 fe17 	bl	8019edc <assert_failed>
 80072ae:	e7f3      	b.n	8007298 <FMC_SDRAM_ProgramRefreshRate+0x1c>
 80072b0:	a0000140 	.word	0xa0000140
 80072b4:	0801fdd8 	.word	0x0801fdd8

080072b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072b8:	b084      	sub	sp, #16
 80072ba:	4684      	mov	ip, r0
 80072bc:	b500      	push	{lr}
 80072be:	f10d 0e08 	add.w	lr, sp, #8
 80072c2:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072c6:	9b07      	ldr	r3, [sp, #28]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d13b      	bne.n	8007344 <USB_CoreInit+0x8c>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072cc:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072ce:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 80072d2:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 80072d8:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072da:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072dc:	68c2      	ldr	r2, [r0, #12]
 80072de:	ea03 0302 	and.w	r3, r3, r2
 80072e2:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072e4:	68c3      	ldr	r3, [r0, #12]
 80072e6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80072ea:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80072ec:	d04d      	beq.n	800738a <USB_CoreInit+0xd2>
{
 80072ee:	4b2b      	ldr	r3, [pc, #172]	; (800739c <USB_CoreInit+0xe4>)
 80072f0:	e001      	b.n	80072f6 <USB_CoreInit+0x3e>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072f2:	3b01      	subs	r3, #1
 80072f4:	d04e      	beq.n	8007394 <USB_CoreInit+0xdc>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072f6:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80072fa:	2a00      	cmp	r2, #0
 80072fc:	daf9      	bge.n	80072f2 <USB_CoreInit+0x3a>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072fe:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007302:	4a26      	ldr	r2, [pc, #152]	; (800739c <USB_CoreInit+0xe4>)
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	f8cc 3010 	str.w	r3, [ip, #16]

  do
  {
    if (++count > 200000U)
 800730c:	e001      	b.n	8007312 <USB_CoreInit+0x5a>
 800730e:	3a01      	subs	r2, #1
 8007310:	d040      	beq.n	8007394 <USB_CoreInit+0xdc>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007312:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007316:	f013 0301 	ands.w	r3, r3, #1
 800731a:	d1f8      	bne.n	800730e <USB_CoreInit+0x56>

  return HAL_OK;
 800731c:	4618      	mov	r0, r3
  if (cfg.dma_enable == 1U)
 800731e:	9b05      	ldr	r3, [sp, #20]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d10b      	bne.n	800733c <USB_CoreInit+0x84>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007324:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8007328:	f043 0306 	orr.w	r3, r3, #6
 800732c:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007330:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8007334:	f043 0320 	orr.w	r3, r3, #32
 8007338:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800733c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007340:	b004      	add	sp, #16
 8007342:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007344:	68c2      	ldr	r2, [r0, #12]
 8007346:	4b15      	ldr	r3, [pc, #84]	; (800739c <USB_CoreInit+0xe4>)
 8007348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800734c:	60c2      	str	r2, [r0, #12]
    if (++count > 200000U)
 800734e:	e001      	b.n	8007354 <USB_CoreInit+0x9c>
 8007350:	3b01      	subs	r3, #1
 8007352:	d021      	beq.n	8007398 <USB_CoreInit+0xe0>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007354:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8007358:	2a00      	cmp	r2, #0
 800735a:	daf9      	bge.n	8007350 <USB_CoreInit+0x98>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800735c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007360:	4a0e      	ldr	r2, [pc, #56]	; (800739c <USB_CoreInit+0xe4>)
 8007362:	f043 0301 	orr.w	r3, r3, #1
 8007366:	f8cc 3010 	str.w	r3, [ip, #16]
    if (++count > 200000U)
 800736a:	e001      	b.n	8007370 <USB_CoreInit+0xb8>
 800736c:	3a01      	subs	r2, #1
 800736e:	d013      	beq.n	8007398 <USB_CoreInit+0xe0>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007370:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007374:	f013 0301 	ands.w	r3, r3, #1
 8007378:	d1f8      	bne.n	800736c <USB_CoreInit+0xb4>
  return HAL_OK;
 800737a:	4618      	mov	r0, r3
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800737c:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8007380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007384:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 8007388:	e7c9      	b.n	800731e <USB_CoreInit+0x66>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800738a:	68c3      	ldr	r3, [r0, #12]
 800738c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007390:	60c3      	str	r3, [r0, #12]
 8007392:	e7ac      	b.n	80072ee <USB_CoreInit+0x36>
      return HAL_TIMEOUT;
 8007394:	2003      	movs	r0, #3
 8007396:	e7c2      	b.n	800731e <USB_CoreInit+0x66>
 8007398:	2003      	movs	r0, #3
 800739a:	e7ef      	b.n	800737c <USB_CoreInit+0xc4>
 800739c:	00030d40 	.word	0x00030d40

080073a0 <USB_EnableGlobalInt>:
{
 80073a0:	4603      	mov	r3, r0
}
 80073a2:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	f042 0201 	orr.w	r2, r2, #1
 80073aa:	609a      	str	r2, [r3, #8]
}
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop

080073b0 <USB_DisableGlobalInt>:
{
 80073b0:	4603      	mov	r3, r0
}
 80073b2:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	f022 0201 	bic.w	r2, r2, #1
 80073ba:	609a      	str	r2, [r3, #8]
}
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop

080073c0 <USB_SetCurrentMode>:
{
 80073c0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073c2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80073c4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073c6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073ca:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80073cc:	d00b      	beq.n	80073e6 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 80073ce:	b941      	cbnz	r1, 80073e2 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073d0:	68c3      	ldr	r3, [r0, #12]
 80073d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073d6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80073d8:	2032      	movs	r0, #50	; 0x32
 80073da:	f7f9 fe4f 	bl	800107c <HAL_Delay>
  return HAL_OK;
 80073de:	2000      	movs	r0, #0
}
 80073e0:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80073e2:	2001      	movs	r0, #1
}
 80073e4:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073e6:	68c3      	ldr	r3, [r0, #12]
 80073e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073ec:	60c3      	str	r3, [r0, #12]
 80073ee:	e7f3      	b.n	80073d8 <USB_SetCurrentMode+0x18>

080073f0 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80073f0:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 80073f2:	0892      	lsrs	r2, r2, #2
 80073f4:	d00a      	beq.n	800740c <USB_ReadPacket+0x1c>
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80073f6:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 80073fa:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80073fe:	f8dc 3000 	ldr.w	r3, [ip]
 8007402:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8007406:	4288      	cmp	r0, r1
 8007408:	d1f9      	bne.n	80073fe <USB_ReadPacket+0xe>
 800740a:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800740c:	4608      	mov	r0, r1
}
 800740e:	4770      	bx	lr

08007410 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007410:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007412:	6980      	ldr	r0, [r0, #24]
}
 8007414:	4010      	ands	r0, r2
 8007416:	4770      	bx	lr

08007418 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007418:	6940      	ldr	r0, [r0, #20]
}
 800741a:	f000 0001 	and.w	r0, r0, #1
 800741e:	4770      	bx	lr

08007420 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007420:	b084      	sub	sp, #16
 8007422:	b530      	push	{r4, r5, lr}
 8007424:	b083      	sub	sp, #12
 8007426:	4604      	mov	r4, r0
 8007428:	ad07      	add	r5, sp, #28
 800742a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	4611      	mov	r1, r2
 8007432:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007436:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007438:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800743c:	6383      	str	r3, [r0, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800743e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007440:	05db      	lsls	r3, r3, #23
 8007442:	d565      	bpl.n	8007510 <USB_HostInit+0xf0>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8007444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007446:	2b03      	cmp	r3, #3
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007448:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800744c:	d063      	beq.n	8007516 <USB_HostInit+0xf6>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800744e:	f023 0304 	bic.w	r3, r3, #4
 8007452:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007456:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800745a:	4b31      	ldr	r3, [pc, #196]	; (8007520 <USB_HostInit+0x100>)
 800745c:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800745e:	e001      	b.n	8007464 <USB_HostInit+0x44>
 8007460:	3b01      	subs	r3, #1
 8007462:	d002      	beq.n	800746a <USB_HostInit+0x4a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007464:	6922      	ldr	r2, [r4, #16]
 8007466:	0695      	lsls	r5, r2, #26
 8007468:	d4fa      	bmi.n	8007460 <USB_HostInit+0x40>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800746a:	2210      	movs	r2, #16
 800746c:	4b2c      	ldr	r3, [pc, #176]	; (8007520 <USB_HostInit+0x100>)
 800746e:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 8007470:	e001      	b.n	8007476 <USB_HostInit+0x56>
 8007472:	3b01      	subs	r3, #1
 8007474:	d002      	beq.n	800747c <USB_HostInit+0x5c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007476:	6922      	ldr	r2, [r4, #16]
 8007478:	06d0      	lsls	r0, r2, #27
 800747a:	d4fa      	bmi.n	8007472 <USB_HostInit+0x52>
  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  (void)USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800747c:	b159      	cbz	r1, 8007496 <USB_HostInit+0x76>
 800747e:	2200      	movs	r2, #0
 8007480:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007484:	f04f 35ff 	mov.w	r5, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8007488:	4610      	mov	r0, r2
  for (i = 0U; i < cfg.Host_channels; i++)
 800748a:	3201      	adds	r2, #1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800748c:	609d      	str	r5, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800748e:	60d8      	str	r0, [r3, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007490:	3320      	adds	r3, #32
 8007492:	428a      	cmp	r2, r1
 8007494:	d1f9      	bne.n	800748a <USB_HostInit+0x6a>
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800749a:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800749e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074a0:	9b01      	ldr	r3, [sp, #4]
 80074a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074a6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	04da      	lsls	r2, r3, #19
 80074ac:	d404      	bmi.n	80074b8 <USB_HostInit+0x98>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074b4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(200U);
 80074b8:	20c8      	movs	r0, #200	; 0xc8
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80074ba:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(200U);
 80074bc:	f7f9 fdde 	bl	800107c <HAL_Delay>
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074c0:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTMSK = 0U;
 80074c4:	2200      	movs	r2, #0
 80074c6:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074c8:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80074ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074cc:	05db      	lsls	r3, r3, #23
 80074ce:	d517      	bpl.n	8007500 <USB_HostInit+0xe0>
    USBx->GRXFSIZ  = 0x200U;
 80074d0:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80074d4:	4a13      	ldr	r2, [pc, #76]	; (8007524 <USB_HostInit+0x104>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <USB_HostInit+0x108>)
    USBx->GRXFSIZ  = 0x200U;
 80074d8:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80074da:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80074dc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80074e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e2:	b91b      	cbnz	r3, 80074ec <USB_HostInit+0xcc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074e4:	69a3      	ldr	r3, [r4, #24]
 80074e6:	f043 0310 	orr.w	r3, r3, #16
 80074ea:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80074ec:	69a2      	ldr	r2, [r4, #24]
}
 80074ee:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80074f0:	4b0e      	ldr	r3, [pc, #56]	; (800752c <USB_HostInit+0x10c>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61a3      	str	r3, [r4, #24]
}
 80074f6:	b003      	add	sp, #12
 80074f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074fc:	b004      	add	sp, #16
 80074fe:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8007500:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007502:	4a0b      	ldr	r2, [pc, #44]	; (8007530 <USB_HostInit+0x110>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007504:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <USB_HostInit+0x114>)
    USBx->GRXFSIZ  = 0x80U;
 8007506:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007508:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800750a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800750e:	e7e7      	b.n	80074e0 <USB_HostInit+0xc0>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007510:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8007514:	e79b      	b.n	800744e <USB_HostInit+0x2e>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007516:	f043 0304 	orr.w	r3, r3, #4
 800751a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
 800751e:	e79a      	b.n	8007456 <USB_HostInit+0x36>
 8007520:	00030d40 	.word	0x00030d40
 8007524:	01000200 	.word	0x01000200
 8007528:	00e00300 	.word	0x00e00300
 800752c:	a3200008 	.word	0xa3200008
 8007530:	00600080 	.word	0x00600080
 8007534:	004000e0 	.word	0x004000e0

08007538 <USB_InitFSLSPClkSel>:
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007538:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800753c:	f001 0303 	and.w	r3, r1, #3
  if (freq == HCFG_48_MHZ)
 8007540:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007542:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8007546:	f022 0203 	bic.w	r2, r2, #3
 800754a:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800754e:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8007552:	ea43 0302 	orr.w	r3, r3, r2
 8007556:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 800755a:	d009      	beq.n	8007570 <USB_InitFSLSPClkSel+0x38>
  else if (freq == HCFG_6_MHZ)
 800755c:	2902      	cmp	r1, #2
 800755e:	d001      	beq.n	8007564 <USB_InitFSLSPClkSel+0x2c>
}
 8007560:	2000      	movs	r0, #0
 8007562:	4770      	bx	lr
    USBx_HOST->HFIR = 6000U;
 8007564:	f241 7370 	movw	r3, #6000	; 0x1770
}
 8007568:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 6000U;
 800756a:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800756e:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8007570:	f64b 3380 	movw	r3, #48000	; 0xbb80
}
 8007574:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 48000U;
 8007576:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800757a:	4770      	bx	lr

0800757c <USB_ResetPort>:
{
 800757c:	b530      	push	{r4, r5, lr}
 800757e:	4604      	mov	r4, r0
 8007580:	b083      	sub	sp, #12
  __IO uint32_t hprt0 = 0U;
 8007582:	2500      	movs	r5, #0
  HAL_Delay(100U);                                 /* See Note #1 */
 8007584:	2064      	movs	r0, #100	; 0x64
  __IO uint32_t hprt0 = 0U;
 8007586:	9501      	str	r5, [sp, #4]
  hprt0 = USBx_HPRT0;
 8007588:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800758c:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007594:	9301      	str	r3, [sp, #4]
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007596:	9b01      	ldr	r3, [sp, #4]
 8007598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800759c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80075a0:	f7f9 fd6c 	bl	800107c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80075a4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 80075a6:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80075a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ac:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80075b0:	f7f9 fd64 	bl	800107c <HAL_Delay>
}
 80075b4:	4628      	mov	r0, r5
 80075b6:	b003      	add	sp, #12
 80075b8:	bd30      	pop	{r4, r5, pc}
 80075ba:	bf00      	nop

080075bc <USB_DriveVbus>:
{
 80075bc:	b082      	sub	sp, #8
  __IO uint32_t hprt0 = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	9301      	str	r3, [sp, #4]
  hprt0 = USBx_HPRT0;
 80075c2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80075c6:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075c8:	9b01      	ldr	r3, [sp, #4]
 80075ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80075ce:	9301      	str	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80075d0:	9b01      	ldr	r3, [sp, #4]
 80075d2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80075d6:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80075d8:	d101      	bne.n	80075de <USB_DriveVbus+0x22>
 80075da:	2901      	cmp	r1, #1
 80075dc:	d00d      	beq.n	80075fa <USB_DriveVbus+0x3e>
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80075de:	04db      	lsls	r3, r3, #19
 80075e0:	d500      	bpl.n	80075e4 <USB_DriveVbus+0x28>
 80075e2:	b111      	cbz	r1, 80075ea <USB_DriveVbus+0x2e>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
  }
  return HAL_OK;
}
 80075e4:	2000      	movs	r0, #0
 80075e6:	b002      	add	sp, #8
 80075e8:	4770      	bx	lr
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075f0:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
}
 80075f4:	2000      	movs	r0, #0
 80075f6:	b002      	add	sp, #8
 80075f8:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80075fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075fe:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
}
 8007602:	2000      	movs	r0, #0
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007604:	9b01      	ldr	r3, [sp, #4]
}
 8007606:	b002      	add	sp, #8
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop

0800760c <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800760c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8007612:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8007616:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007618:	9801      	ldr	r0, [sp, #4]
}
 800761a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800761e:	b002      	add	sp, #8
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop

08007624 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007624:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
}
 8007628:	b280      	uxth	r0, r0
 800762a:	4770      	bx	lr

0800762c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800762c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800762e:	eb00 1e41 	add.w	lr, r0, r1, lsl #5
 8007632:	f04f 34ff 	mov.w	r4, #4294967295
{
 8007636:	f89d c018 	ldrb.w	ip, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800763a:	f8ce 4508 	str.w	r4, [lr, #1288]	; 0x508
 800763e:	f50e 65a0 	add.w	r5, lr, #1280	; 0x500
{
 8007642:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8007646:	f8bd 401c 	ldrh.w	r4, [sp, #28]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800764a:	f1bc 0f03 	cmp.w	ip, #3
 800764e:	d86b      	bhi.n	8007728 <USB_HC_Init+0xfc>
 8007650:	e8df f00c 	tbb	[pc, ip]
 8007654:	46026002 	.word	0x46026002
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007658:	f240 479d 	movw	r7, #1181	; 0x49d
 800765c:	60ef      	str	r7, [r5, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800765e:	0617      	lsls	r7, r2, #24
 8007660:	d443      	bmi.n	80076ea <USB_HC_Init+0xbe>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007662:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8007664:	05ff      	lsls	r7, r7, #23
 8007666:	d503      	bpl.n	8007670 <USB_HC_Init+0x44>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007668:	68ef      	ldr	r7, [r5, #12]
 800766a:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 800766e:	60ef      	str	r7, [r5, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007670:	2501      	movs	r5, #1
 8007672:	f001 010f 	and.w	r1, r1, #15
 8007676:	fa05 f101 	lsl.w	r1, r5, r1
 800767a:	f8d0 5418 	ldr.w	r5, [r0, #1048]	; 0x418
 800767e:	4329      	orrs	r1, r5
 8007680:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007684:	6981      	ldr	r1, [r0, #24]
 8007686:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800768a:	6181      	str	r1, [r0, #24]
 800768c:	2100      	movs	r1, #0
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800768e:	4608      	mov	r0, r1
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007690:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007692:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007696:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = 0U;
 8007698:	2e02      	cmp	r6, #2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800769a:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800769e:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076a2:	ea43 0304 	orr.w	r3, r3, r4
 80076a6:	ea43 0302 	orr.w	r3, r3, r2
 80076aa:	ea4f 428c 	mov.w	r2, ip, lsl #18
 80076ae:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80076b2:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 80076b6:	bf0c      	ite	eq
 80076b8:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
 80076bc:	2200      	movne	r2, #0

  if (ep_type == EP_TYPE_INTR)
 80076be:	f1bc 0f03 	cmp.w	ip, #3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80076c2:	ea43 0300 	orr.w	r3, r3, r0
 80076c6:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076ca:	f8ce 3500 	str.w	r3, [lr, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 80076ce:	d105      	bne.n	80076dc <USB_HC_Init+0xb0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80076d0:	f8de 3500 	ldr.w	r3, [lr, #1280]	; 0x500
 80076d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076d8:	f8ce 3500 	str.w	r3, [lr, #1280]	; 0x500
  }

  return ret;
}
 80076dc:	4608      	mov	r0, r1
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076e0:	f240 679d 	movw	r7, #1693	; 0x69d
 80076e4:	60ef      	str	r7, [r5, #12]
      if ((epnum & 0x80U) == 0x80U)
 80076e6:	0617      	lsls	r7, r2, #24
 80076e8:	d5c2      	bpl.n	8007670 <USB_HC_Init+0x44>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076ea:	68ef      	ldr	r7, [r5, #12]
 80076ec:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 80076f0:	60ef      	str	r7, [r5, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80076f2:	f001 050f 	and.w	r5, r1, #15
 80076f6:	2101      	movs	r1, #1
 80076f8:	40a9      	lsls	r1, r5
 80076fa:	f8d0 5418 	ldr.w	r5, [r0, #1048]	; 0x418
 80076fe:	4329      	orrs	r1, r5
 8007700:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007704:	6981      	ldr	r1, [r0, #24]
 8007706:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800770a:	6181      	str	r1, [r0, #24]
 800770c:	2100      	movs	r1, #0
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800770e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007712:	e7bd      	b.n	8007690 <USB_HC_Init+0x64>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007714:	f240 2725 	movw	r7, #549	; 0x225
 8007718:	60ef      	str	r7, [r5, #12]
      if ((epnum & 0x80U) == 0x80U)
 800771a:	0617      	lsls	r7, r2, #24
 800771c:	d5a8      	bpl.n	8007670 <USB_HC_Init+0x44>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800771e:	68ef      	ldr	r7, [r5, #12]
 8007720:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
 8007724:	60ef      	str	r7, [r5, #12]
 8007726:	e7e4      	b.n	80076f2 <USB_HC_Init+0xc6>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007728:	f001 050f 	and.w	r5, r1, #15
 800772c:	2101      	movs	r1, #1
 800772e:	f8d0 7418 	ldr.w	r7, [r0, #1048]	; 0x418
      ret = HAL_ERROR;
 8007732:	f012 0f80 	tst.w	r2, #128	; 0x80
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007736:	fa01 f505 	lsl.w	r5, r1, r5
 800773a:	ea45 0507 	orr.w	r5, r5, r7
 800773e:	f8c0 5418 	str.w	r5, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007742:	6985      	ldr	r5, [r0, #24]
 8007744:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 8007748:	6185      	str	r5, [r0, #24]
      ret = HAL_ERROR;
 800774a:	bf14      	ite	ne
 800774c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8007750:	2000      	moveq	r0, #0
 8007752:	e79d      	b.n	8007690 <USB_HC_Init+0x64>

08007754 <USB_HC_StartXfer>:
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8007754:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007756:	05db      	lsls	r3, r3, #23
{
 8007758:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800775a:	f891 c001 	ldrb.w	ip, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800775e:	d502      	bpl.n	8007766 <USB_HC_StartXfer+0x12>
 8007760:	790c      	ldrb	r4, [r1, #4]
 8007762:	2c00      	cmp	r4, #0
 8007764:	d04b      	beq.n	80077fe <USB_HC_StartXfer+0xaa>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007766:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 800776a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  if (hc->xfer_len > 0U)
 800776e:	690d      	ldr	r5, [r1, #16]
 8007770:	2d00      	cmp	r5, #0
 8007772:	d138      	bne.n	80077e6 <USB_HC_StartXfer+0x92>
 8007774:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8007778:	2701      	movs	r7, #1
  if (hc->ep_is_in != 0U)
 800777a:	78ce      	ldrb	r6, [r1, #3]
 800777c:	b11e      	cbz	r6, 8007786 <USB_HC_StartXfer+0x32>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800777e:	890d      	ldrh	r5, [r1, #8]
 8007780:	fb07 f505 	mul.w	r5, r7, r5
 8007784:	610d      	str	r5, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007786:	7a8c      	ldrb	r4, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007788:	f3c5 0712 	ubfx	r7, r5, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800778c:	0764      	lsls	r4, r4, #29
 800778e:	f004 44c0 	and.w	r4, r4, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007792:	ea44 040e 	orr.w	r4, r4, lr
 8007796:	433c      	orrs	r4, r7
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007798:	611c      	str	r4, [r3, #16]
  if (dma != 0U)
 800779a:	b10a      	cbz	r2, 80077a0 <USB_HC_StartXfer+0x4c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800779c:	68cc      	ldr	r4, [r1, #12]
 800779e:	615c      	str	r4, [r3, #20]
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80077a0:	f8d0 4408 	ldr.w	r4, [r0, #1032]	; 0x408
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80077a4:	681f      	ldr	r7, [r3, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80077a6:	43e4      	mvns	r4, r4
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80077a8:	f027 5700 	bic.w	r7, r7, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80077ac:	0764      	lsls	r4, r4, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80077ae:	601f      	str	r7, [r3, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80077b0:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 80077b4:	681f      	ldr	r7, [r3, #0]
 80077b6:	433c      	orrs	r4, r7
 80077b8:	601c      	str	r4, [r3, #0]
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077ba:	4c42      	ldr	r4, [pc, #264]	; (80078c4 <USB_HC_StartXfer+0x170>)
 80077bc:	681f      	ldr	r7, [r3, #0]
 80077be:	6027      	str	r7, [r4, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077c0:	6827      	ldr	r7, [r4, #0]
 80077c2:	f027 4780 	bic.w	r7, r7, #1073741824	; 0x40000000
 80077c6:	6027      	str	r7, [r4, #0]
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80077c8:	f500 6780 	add.w	r7, r0, #1024	; 0x400
  if (hc->ep_is_in != 0U)
 80077cc:	b326      	cbz	r6, 8007818 <USB_HC_StartXfer+0xc4>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077d4:	6022      	str	r2, [r4, #0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077d6:	6822      	ldr	r2, [r4, #0]
 80077d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80077dc:	6022      	str	r2, [r4, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	601a      	str	r2, [r3, #0]
}
 80077e2:	2000      	movs	r0, #0
 80077e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80077e6:	890e      	ldrh	r6, [r1, #8]
 80077e8:	1e6c      	subs	r4, r5, #1
 80077ea:	4434      	add	r4, r6
 80077ec:	fbb4 f4f6 	udiv	r4, r4, r6
    if (num_packets > max_hc_pkt_count)
 80077f0:	b2a7      	uxth	r7, r4
 80077f2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80077f6:	d824      	bhi.n	8007842 <USB_HC_StartXfer+0xee>
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077f8:	ea4f 4ec4 	mov.w	lr, r4, lsl #19
 80077fc:	e7bd      	b.n	800777a <USB_HC_StartXfer+0x26>
    if ((dma == 0U) && (hc->do_ping == 1U))
 80077fe:	b33a      	cbz	r2, 8007850 <USB_HC_StartXfer+0xfc>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007800:	eb00 134c 	add.w	r3, r0, ip, lsl #5
    else if (dma == 1U)
 8007804:	2a01      	cmp	r2, #1
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    else if (dma == 1U)
 800780a:	d1b0      	bne.n	800776e <USB_HC_StartXfer+0x1a>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800780c:	68dd      	ldr	r5, [r3, #12]
 800780e:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 8007812:	60dd      	str	r5, [r3, #12]
      hc->do_ping = 0U;
 8007814:	714c      	strb	r4, [r1, #5]
 8007816:	e7aa      	b.n	800776e <USB_HC_StartXfer+0x1a>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007818:	6826      	ldr	r6, [r4, #0]
 800781a:	f426 4600 	bic.w	r6, r6, #32768	; 0x8000
 800781e:	6026      	str	r6, [r4, #0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007820:	6826      	ldr	r6, [r4, #0]
 8007822:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8007826:	6026      	str	r6, [r4, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007828:	6824      	ldr	r4, [r4, #0]
 800782a:	601c      	str	r4, [r3, #0]
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800782c:	2d00      	cmp	r5, #0
 800782e:	d0d8      	beq.n	80077e2 <USB_HC_StartXfer+0x8e>
 8007830:	2a00      	cmp	r2, #0
 8007832:	d1d6      	bne.n	80077e2 <USB_HC_StartXfer+0x8e>
      switch (hc->ep_type)
 8007834:	79cb      	ldrb	r3, [r1, #7]
 8007836:	2b03      	cmp	r3, #3
 8007838:	d826      	bhi.n	8007888 <USB_HC_StartXfer+0x134>
 800783a:	e8df f003 	tbb	[pc, r3]
 800783e:	1a37      	.short	0x1a37
 8007840:	1a37      	.short	0x1a37
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007842:	0235      	lsls	r5, r6, #8
 8007844:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 8007848:	f44f 7780 	mov.w	r7, #256	; 0x100
 800784c:	610d      	str	r5, [r1, #16]
 800784e:	e794      	b.n	800777a <USB_HC_StartXfer+0x26>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007850:	794b      	ldrb	r3, [r1, #5]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d187      	bne.n	8007766 <USB_HC_StartXfer+0x12>
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007856:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800785a:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <USB_HC_StartXfer+0x174>)
 800785c:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007860:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007864:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800786c:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
      return HAL_OK;
 8007870:	e7b7      	b.n	80077e2 <USB_HC_StartXfer+0x8e>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007872:	693a      	ldr	r2, [r7, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007874:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007876:	b292      	uxth	r2, r2
 8007878:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800787c:	429a      	cmp	r2, r3
 800787e:	d203      	bcs.n	8007888 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007880:	6983      	ldr	r3, [r0, #24]
 8007882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007886:	6183      	str	r3, [r0, #24]
    count32b = ((uint32_t)len + 3U) / 4U;
 8007888:	b2ab      	uxth	r3, r5
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800788a:	68ca      	ldr	r2, [r1, #12]
    count32b = ((uint32_t)len + 3U) / 4U;
 800788c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800788e:	089b      	lsrs	r3, r3, #2
 8007890:	d0a7      	beq.n	80077e2 <USB_HC_StartXfer+0x8e>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007892:	eb00 300c 	add.w	r0, r0, ip, lsl #12
 8007896:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800789a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800789e:	f852 1b04 	ldr.w	r1, [r2], #4
    for (i = 0U; i < count32b; i++)
 80078a2:	429a      	cmp	r2, r3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80078a4:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80078a6:	d1fa      	bne.n	800789e <USB_HC_StartXfer+0x14a>
}
 80078a8:	2000      	movs	r0, #0
 80078aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80078ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80078ae:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80078b0:	b292      	uxth	r2, r2
 80078b2:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d2e6      	bcs.n	8007888 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80078ba:	6983      	ldr	r3, [r0, #24]
 80078bc:	f043 0320 	orr.w	r3, r3, #32
 80078c0:	6183      	str	r3, [r0, #24]
 80078c2:	e7e1      	b.n	8007888 <USB_HC_StartXfer+0x134>
 80078c4:	20000130 	.word	0x20000130
 80078c8:	80080000 	.word	0x80080000

080078cc <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078cc:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
}
 80078d0:	b280      	uxth	r0, r0
 80078d2:	4770      	bx	lr

080078d4 <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80078d4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80078d8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80078dc:	f501 6ca0 	add.w	ip, r1, #1280	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80078e0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80078e4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80078e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ec:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80078f0:	d120      	bne.n	8007934 <USB_HC_Halt+0x60>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80078f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80078f4:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80078f8:	d121      	bne.n	800793e <USB_HC_Halt+0x6a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80078fa:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80078fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007906:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800790a:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 800790e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007912:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007916:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 800791a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800791e:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
        if (++count > 1000U)
 8007922:	e001      	b.n	8007928 <USB_HC_Halt+0x54>
 8007924:	3b01      	subs	r3, #1
 8007926:	d010      	beq.n	800794a <USB_HC_Halt+0x76>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007928:	f8dc 2000 	ldr.w	r2, [ip]
 800792c:	2a00      	cmp	r2, #0
 800792e:	dbf9      	blt.n	8007924 <USB_HC_Halt+0x50>
}
 8007930:	2000      	movs	r0, #0
 8007932:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007934:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8007938:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800793c:	d007      	beq.n	800794e <USB_HC_Halt+0x7a>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800793e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007946:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800794a:	2000      	movs	r0, #0
 800794c:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800794e:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007956:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800795a:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800795e:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8007962:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007966:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800796a:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 800796e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007972:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
        if (++count > 1000U)
 8007976:	e001      	b.n	800797c <USB_HC_Halt+0xa8>
 8007978:	3b01      	subs	r3, #1
 800797a:	d0e6      	beq.n	800794a <USB_HC_Halt+0x76>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800797c:	f8dc 2000 	ldr.w	r2, [ip]
 8007980:	2a00      	cmp	r2, #0
 8007982:	dbf9      	blt.n	8007978 <USB_HC_Halt+0xa4>
}
 8007984:	2000      	movs	r0, #0
 8007986:	4770      	bx	lr

08007988 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007988:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800798a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800798e:	4b5e      	ldr	r3, [pc, #376]	; (8007b08 <USB_StopHost+0x180>)
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007990:	4684      	mov	ip, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007992:	f022 0201 	bic.w	r2, r2, #1
 8007996:	6082      	str	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007998:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800799a:	e001      	b.n	80079a0 <USB_StopHost+0x18>
 800799c:	3b01      	subs	r3, #1
 800799e:	d003      	beq.n	80079a8 <USB_StopHost+0x20>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079a0:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80079a4:	0691      	lsls	r1, r2, #26
 80079a6:	d4f9      	bmi.n	800799c <USB_StopHost+0x14>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079a8:	2210      	movs	r2, #16
 80079aa:	4b57      	ldr	r3, [pc, #348]	; (8007b08 <USB_StopHost+0x180>)
 80079ac:	f8cc 2010 	str.w	r2, [ip, #16]
    if (++count > 200000U)
 80079b0:	e001      	b.n	80079b6 <USB_StopHost+0x2e>
 80079b2:	3b01      	subs	r3, #1
 80079b4:	d003      	beq.n	80079be <USB_StopHost+0x36>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079b6:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80079ba:	06d2      	lsls	r2, r2, #27
 80079bc:	d4f9      	bmi.n	80079b2 <USB_StopHost+0x2a>
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80079be:	f8dc 2500 	ldr.w	r2, [ip, #1280]	; 0x500
 80079c2:	f50c 61a0 	add.w	r1, ip, #1280	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079c6:	f50c 60e0 	add.w	r0, ip, #1792	; 0x700
  uint32_t count = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80079d4:	f8cc 2500 	str.w	r2, [ip, #1280]	; 0x500
    value = USBx_HC(i)->HCCHAR;
 80079d8:	f8dc 2520 	ldr.w	r2, [ip, #1312]	; 0x520
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079dc:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 80079e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80079e4:	f8cc 2520 	str.w	r2, [ip, #1312]	; 0x520
    value = USBx_HC(i)->HCCHAR;
 80079e8:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079ec:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 80079f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80079f4:	f8cc 2540 	str.w	r2, [ip, #1344]	; 0x540
    value = USBx_HC(i)->HCCHAR;
 80079f8:	f8dc 2560 	ldr.w	r2, [ip, #1376]	; 0x560
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079fc:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a04:	f8cc 2560 	str.w	r2, [ip, #1376]	; 0x560
    value = USBx_HC(i)->HCCHAR;
 8007a08:	f8dc 2580 	ldr.w	r2, [ip, #1408]	; 0x580
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a0c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a14:	f8cc 2580 	str.w	r2, [ip, #1408]	; 0x580
    value = USBx_HC(i)->HCCHAR;
 8007a18:	f8dc 25a0 	ldr.w	r2, [ip, #1440]	; 0x5a0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a1c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a24:	f8cc 25a0 	str.w	r2, [ip, #1440]	; 0x5a0
    value = USBx_HC(i)->HCCHAR;
 8007a28:	f8dc 25c0 	ldr.w	r2, [ip, #1472]	; 0x5c0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a2c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a34:	f8cc 25c0 	str.w	r2, [ip, #1472]	; 0x5c0
    value = USBx_HC(i)->HCCHAR;
 8007a38:	f8dc 25e0 	ldr.w	r2, [ip, #1504]	; 0x5e0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a3c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a44:	f8cc 25e0 	str.w	r2, [ip, #1504]	; 0x5e0
    value = USBx_HC(i)->HCCHAR;
 8007a48:	f8dc 2600 	ldr.w	r2, [ip, #1536]	; 0x600
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a4c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a54:	f8cc 2600 	str.w	r2, [ip, #1536]	; 0x600
    value = USBx_HC(i)->HCCHAR;
 8007a58:	f8dc 2620 	ldr.w	r2, [ip, #1568]	; 0x620
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a5c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a64:	f8cc 2620 	str.w	r2, [ip, #1568]	; 0x620
    value = USBx_HC(i)->HCCHAR;
 8007a68:	f8dc 2640 	ldr.w	r2, [ip, #1600]	; 0x640
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a6c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a74:	f8cc 2640 	str.w	r2, [ip, #1600]	; 0x640
    value = USBx_HC(i)->HCCHAR;
 8007a78:	f8dc 2660 	ldr.w	r2, [ip, #1632]	; 0x660
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a7c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a84:	f8cc 2660 	str.w	r2, [ip, #1632]	; 0x660
    value = USBx_HC(i)->HCCHAR;
 8007a88:	f8dc 2680 	ldr.w	r2, [ip, #1664]	; 0x680
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a8c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007a90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007a94:	f8cc 2680 	str.w	r2, [ip, #1664]	; 0x680
    value = USBx_HC(i)->HCCHAR;
 8007a98:	f8dc 26a0 	ldr.w	r2, [ip, #1696]	; 0x6a0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a9c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007aa0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007aa4:	f8cc 26a0 	str.w	r2, [ip, #1696]	; 0x6a0
    value = USBx_HC(i)->HCCHAR;
 8007aa8:	f8dc 26c0 	ldr.w	r2, [ip, #1728]	; 0x6c0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007aac:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007ab0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007ab4:	f8cc 26c0 	str.w	r2, [ip, #1728]	; 0x6c0
    value = USBx_HC(i)->HCCHAR;
 8007ab8:	f8dc 26e0 	ldr.w	r2, [ip, #1760]	; 0x6e0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007abc:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007ac0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007ac4:	f8cc 26e0 	str.w	r2, [ip, #1760]	; 0x6e0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8007ac8:	680a      	ldr	r2, [r1, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ace:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8007ad2:	600a      	str	r2, [r1, #0]
 8007ad4:	e002      	b.n	8007adc <USB_StopHost+0x154>
      if (++count > 1000U)
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ad6:	680a      	ldr	r2, [r1, #0]
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	da03      	bge.n	8007ae4 <USB_StopHost+0x15c>
      if (++count > 1000U)
 8007adc:	3301      	adds	r3, #1
 8007ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ae2:	d9f8      	bls.n	8007ad6 <USB_StopHost+0x14e>
  for (i = 0U; i <= 15U; i++)
 8007ae4:	3120      	adds	r1, #32
 8007ae6:	4281      	cmp	r1, r0
 8007ae8:	d1ee      	bne.n	8007ac8 <USB_StopHost+0x140>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8007aee:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007af0:	f8cc 3414 	str.w	r3, [ip, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007af4:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007af8:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	f8cc 3008 	str.w	r3, [ip, #8]
}
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	00030d40 	.word	0x00030d40

08007b0c <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	4770      	bx	lr

08007b10 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b10:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
{
 8007b14:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b16:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 8007b18:	7b2b      	ldrb	r3, [r5, #12]
 8007b1a:	b12b      	cbz	r3, 8007b28 <USBH_MSC_Process+0x18>
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d001      	beq.n	8007b24 <USBH_MSC_Process+0x14>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007b20:	2001      	movs	r0, #1
}
 8007b22:	bd70      	pop	{r4, r5, r6, pc}
  switch (MSC_Handle->state)
 8007b24:	2000      	movs	r0, #0
}
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007b28:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	682a      	ldr	r2, [r5, #0]
 8007b30:	4291      	cmp	r1, r2
 8007b32:	d21f      	bcs.n	8007b74 <USBH_MSC_Process+0x64>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007b34:	2334      	movs	r3, #52	; 0x34
 8007b36:	2201      	movs	r2, #1
 8007b38:	fb03 5301 	mla	r3, r3, r1, r5
 8007b3c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007b40:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d8eb      	bhi.n	8007b20 <USBH_MSC_Process+0x10>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <USBH_MSC_Process+0x40>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007c59 	.word	0x08007c59
 8007b54:	08007b21 	.word	0x08007b21
 8007b58:	08007c25 	.word	0x08007c25
 8007b5c:	08007bfb 	.word	0x08007bfb
 8007b60:	08007bd7 	.word	0x08007bd7
 8007b64:	08007b93 	.word	0x08007b93
 8007b68:	08007b21 	.word	0x08007b21
 8007b6c:	08007b21 	.word	0x08007b21
 8007b70:	08007b89 	.word	0x08007b89
      MSC_Handle->state = MSC_IDLE;
 8007b74:	2601      	movs	r6, #1
      MSC_Handle->current_lun = 0U;
 8007b76:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b7a:	2102      	movs	r1, #2
      MSC_Handle->state = MSC_IDLE;
 8007b7c:	732e      	strb	r6, [r5, #12]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b7e:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
 8007b82:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007b84:	4630      	mov	r0, r6
}
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
        MSC_Handle->current_lun++;
 8007b88:	3101      	adds	r1, #1
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007b8a:	2001      	movs	r0, #1
        MSC_Handle->current_lun++;
 8007b8c:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
}
 8007b90:	bd70      	pop	{r4, r5, r6, pc}
        scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007b92:	2634      	movs	r6, #52	; 0x34
 8007b94:	fb06 5201 	mla	r2, r6, r1, r5
 8007b98:	b2c9      	uxtb	r1, r1
 8007b9a:	329c      	adds	r2, #156	; 0x9c
 8007b9c:	f000 fce6 	bl	800856c <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d170      	bne.n	8007c86 <USBH_MSC_Process+0x176>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007ba4:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
 8007ba8:	fb06 5603 	mla	r6, r6, r3, r5
 8007bac:	f896 209c 	ldrb.w	r2, [r6, #156]	; 0x9c
 8007bb0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8007bb4:	2a02      	cmp	r2, #2
 8007bb6:	f040 809a 	bne.w	8007cee <USBH_MSC_Process+0x1de>
            if((phost->Timer - MSC_Handle->timer) < 10000U)
 8007bba:	f8d5 00c8 	ldr.w	r0, [r5, #200]	; 0xc8
 8007bbe:	f8d4 12bc 	ldr.w	r1, [r4, #700]	; 0x2bc
 8007bc2:	1a09      	subs	r1, r1, r0
 8007bc4:	f242 700f 	movw	r0, #9999	; 0x270f
 8007bc8:	4281      	cmp	r1, r0
 8007bca:	f200 8090 	bhi.w	8007cee <USBH_MSC_Process+0x1de>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007bce:	2001      	movs	r0, #1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007bd0:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
}
 8007bd4:	bd70      	pop	{r4, r5, r6, pc}
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007bd6:	2634      	movs	r6, #52	; 0x34
 8007bd8:	fb06 5201 	mla	r2, r6, r1, r5
 8007bdc:	b2c9      	uxtb	r1, r1
 8007bde:	329f      	adds	r2, #159	; 0x9f
 8007be0:	f000 fc64 	bl	80084ac <USBH_MSC_SCSI_Inquiry>
        if (scsi_status == USBH_OK)
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d143      	bne.n	8007c70 <USBH_MSC_Process+0x160>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007be8:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
 8007bec:	2202      	movs	r2, #2
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007bee:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007bf0:	fb06 5503 	mla	r5, r6, r3, r5
 8007bf4:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
}
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007bfa:	2634      	movs	r6, #52	; 0x34
 8007bfc:	fb06 5201 	mla	r2, r6, r1, r5
 8007c00:	b2c9      	uxtb	r1, r1
 8007c02:	3294      	adds	r2, #148	; 0x94
 8007c04:	f000 fc18 	bl	8008438 <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d147      	bne.n	8007c9c <USBH_MSC_Process+0x18c>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8007c0c:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007c10:	2201      	movs	r2, #1
 8007c12:	fb06 5603 	mla	r6, r6, r3, r5
          MSC_Handle->current_lun++;
 8007c16:	4413      	add	r3, r2
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007c18:	4610      	mov	r0, r2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007c1a:	f8a6 2090 	strh.w	r2, [r6, #144]	; 0x90
          MSC_Handle->current_lun++;
 8007c1e:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
}
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007c24:	b2c9      	uxtb	r1, r1
 8007c26:	f000 fbe1 	bl	80083ec <USBH_MSC_SCSI_TestUnitReady>
        if (ready_status == USBH_OK)
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d144      	bne.n	8007cba <USBH_MSC_Process+0x1aa>
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007c30:	f8b5 20c4 	ldrh.w	r2, [r5, #196]	; 0xc4
 8007c34:	2134      	movs	r1, #52	; 0x34
 8007c36:	fb01 f202 	mul.w	r2, r1, r2
 8007c3a:	18a9      	adds	r1, r5, r2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007c3c:	3290      	adds	r2, #144	; 0x90
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007c3e:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8007c42:	3800      	subs	r0, #0
 8007c44:	bf18      	it	ne
 8007c46:	2001      	movne	r0, #1
 8007c48:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007c4c:	2003      	movs	r0, #3
 8007c4e:	52a8      	strh	r0, [r5, r2]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007c50:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007c52:	f881 3092 	strb.w	r3, [r1, #146]	; 0x92
}
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007c58:	2334      	movs	r3, #52	; 0x34
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	fb03 5101 	mla	r1, r3, r1, r5
 8007c60:	f881 2090 	strb.w	r2, [r1, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 8007c64:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007c68:	2001      	movs	r0, #1
        MSC_Handle->timer = phost->Timer;
 8007c6a:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
}
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
        if (scsi_status == USBH_FAIL)
 8007c70:	2802      	cmp	r0, #2
 8007c72:	d139      	bne.n	8007ce8 <USBH_MSC_Process+0x1d8>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007c74:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
 8007c78:	2205      	movs	r2, #5
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007c7a:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007c7c:	fb06 5503 	mla	r5, r6, r3, r5
 8007c80:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
}
 8007c84:	bd70      	pop	{r4, r5, r6, pc}
        if(scsi_status == USBH_FAIL)
 8007c86:	2802      	cmp	r0, #2
 8007c88:	d12e      	bne.n	8007ce8 <USBH_MSC_Process+0x1d8>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007c8a:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
 8007c8e:	2208      	movs	r2, #8
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007c90:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007c92:	fb06 5503 	mla	r5, r6, r3, r5
 8007c96:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
}
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
        else if(scsi_status == USBH_FAIL)
 8007c9c:	2802      	cmp	r0, #2
 8007c9e:	d0e9      	beq.n	8007c74 <USBH_MSC_Process+0x164>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8007ca0:	2804      	cmp	r0, #4
 8007ca2:	f47f af3d 	bne.w	8007b20 <USBH_MSC_Process+0x10>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007ca6:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
 8007caa:	f240 2201 	movw	r2, #513	; 0x201
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007cae:	2001      	movs	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007cb0:	fb06 5503 	mla	r5, r6, r3, r5
 8007cb4:	f8a5 2090 	strh.w	r2, [r5, #144]	; 0x90
}
 8007cb8:	bd70      	pop	{r4, r5, r6, pc}
        if (ready_status == USBH_FAIL)
 8007cba:	2802      	cmp	r0, #2
 8007cbc:	d121      	bne.n	8007d02 <USBH_MSC_Process+0x1f2>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007cbe:	f8b5 20c4 	ldrh.w	r2, [r5, #196]	; 0xc4
 8007cc2:	2134      	movs	r1, #52	; 0x34
 8007cc4:	fb01 f202 	mul.w	r2, r1, r2
 8007cc8:	18a9      	adds	r1, r5, r2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007cca:	3290      	adds	r2, #144	; 0x90
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007ccc:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8007cd0:	3802      	subs	r0, #2
 8007cd2:	bf18      	it	ne
 8007cd4:	2001      	movne	r0, #1
 8007cd6:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007cda:	f240 1005 	movw	r0, #261	; 0x105
 8007cde:	52a8      	strh	r0, [r5, r2]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007ce0:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007ce2:	f881 3092 	strb.w	r3, [r1, #146]	; 0x92
}
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8007ce8:	2804      	cmp	r0, #4
 8007cea:	d0dc      	beq.n	8007ca6 <USBH_MSC_Process+0x196>
 8007cec:	e718      	b.n	8007b20 <USBH_MSC_Process+0x10>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007cee:	2001      	movs	r0, #1
 8007cf0:	2134      	movs	r1, #52	; 0x34
          MSC_Handle->current_lun++;
 8007cf2:	181a      	adds	r2, r3, r0
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007cf4:	fb01 5303 	mla	r3, r1, r3, r5
 8007cf8:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
          MSC_Handle->current_lun++;
 8007cfc:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
}
 8007d00:	bd70      	pop	{r4, r5, r6, pc}
          if (ready_status == USBH_UNRECOVERED_ERROR)
 8007d02:	2804      	cmp	r0, #4
 8007d04:	f47f af0c 	bne.w	8007b20 <USBH_MSC_Process+0x10>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007d08:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
 8007d0c:	2134      	movs	r1, #52	; 0x34
 8007d0e:	f240 2201 	movw	r2, #513	; 0x201
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007d12:	2001      	movs	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007d14:	fb01 5503 	mla	r5, r1, r3, r5
 8007d18:	f8a5 2090 	strh.w	r2, [r5, #144]	; 0x90
}
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
 8007d1e:	bf00      	nop

08007d20 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d20:	f8d0 2278 	ldr.w	r2, [r0, #632]	; 0x278
{
 8007d24:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d26:	69d4      	ldr	r4, [r2, #28]
{
 8007d28:	4603      	mov	r3, r0
  switch (MSC_Handle->req_state)
 8007d2a:	7ba2      	ldrb	r2, [r4, #14]
 8007d2c:	2a02      	cmp	r2, #2
 8007d2e:	d004      	beq.n	8007d3a <USBH_MSC_ClassRequest+0x1a>
 8007d30:	2a03      	cmp	r2, #3
 8007d32:	d015      	beq.n	8007d60 <USBH_MSC_ClassRequest+0x40>
 8007d34:	b10a      	cbz	r2, 8007d3a <USBH_MSC_ClassRequest+0x1a>
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d36:	2001      	movs	r0, #1
}
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)(void *)&MSC_Handle->max_lun);
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fa25 	bl	800818c <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 8007d42:	2803      	cmp	r0, #3
 8007d44:	d015      	beq.n	8007d72 <USBH_MSC_ClassRequest+0x52>
    if(status == USBH_OK)
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d1f6      	bne.n	8007d38 <USBH_MSC_ClassRequest+0x18>
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d923      	bls.n	8007d98 <USBH_MSC_ClassRequest+0x78>
 8007d50:	2201      	movs	r2, #1
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007d52:	2302      	movs	r3, #2
        MSC_Handle->unit[i].state_changed = 0U;
 8007d54:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 8007d58:	6022      	str	r2, [r4, #0]
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007d5a:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
}
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
    if(USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007d60:	2100      	movs	r1, #0
 8007d62:	f001 fc51 	bl	8009608 <USBH_ClrFeature>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d1e5      	bne.n	8007d36 <USBH_MSC_ClassRequest+0x16>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007d6a:	7be3      	ldrb	r3, [r4, #15]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d6c:	2001      	movs	r0, #1
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007d6e:	73a3      	strb	r3, [r4, #14]
}
 8007d70:	bd38      	pop	{r3, r4, r5, pc}
 8007d72:	2001      	movs	r0, #1
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8007d74:	2300      	movs	r3, #0
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007d76:	2534      	movs	r5, #52	; 0x34
 8007d78:	f04f 0e02 	mov.w	lr, #2
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 8007d7c:	6020      	str	r0, [r4, #0]
        MSC_Handle->unit[i].state_changed = 0U;
 8007d7e:	469c      	mov	ip, r3
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8007d80:	1c59      	adds	r1, r3, #1
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007d82:	fb05 4203 	mla	r2, r5, r3, r4
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8007d86:	b2cb      	uxtb	r3, r1
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007d88:	f882 e092 	strb.w	lr, [r2, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0U;
 8007d8c:	f882 c0c1 	strb.w	ip, [r2, #193]	; 0xc1
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 8007d90:	4283      	cmp	r3, r0
 8007d92:	d3f5      	bcc.n	8007d80 <USBH_MSC_ClassRequest+0x60>
 8007d94:	2000      	movs	r0, #0
}
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 8007d98:	1c58      	adds	r0, r3, #1
 8007d9a:	e7eb      	b.n	8007d74 <USBH_MSC_ClassRequest+0x54>

08007d9c <USBH_MSC_InterfaceDeInit>:
{
 8007d9c:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d9e:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
{
 8007da2:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007da4:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 8007da6:	7969      	ldrb	r1, [r5, #5]
 8007da8:	b951      	cbnz	r1, 8007dc0 <USBH_MSC_InterfaceDeInit+0x24>
  if ( MSC_Handle->InPipe)
 8007daa:	7929      	ldrb	r1, [r5, #4]
 8007dac:	b991      	cbnz	r1, 8007dd4 <USBH_MSC_InterfaceDeInit+0x38>
    USBH_free (phost->pActiveClass->pData);
 8007dae:	4628      	mov	r0, r5
 8007db0:	f017 f9a0 	bl	801f0f4 <free>
    phost->pActiveClass->pData = 0U;
 8007db4:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 8007db8:	2200      	movs	r2, #0
}
 8007dba:	2000      	movs	r0, #0
    phost->pActiveClass->pData = 0U;
 8007dbc:	61da      	str	r2, [r3, #28]
}
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007dc0:	f001 fe40 	bl	8009a44 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 8007dc4:	7969      	ldrb	r1, [r5, #5]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f001 fe96 	bl	8009af8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007dcc:	2300      	movs	r3, #0
  if ( MSC_Handle->InPipe)
 8007dce:	7929      	ldrb	r1, [r5, #4]
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007dd0:	716b      	strb	r3, [r5, #5]
  if ( MSC_Handle->InPipe)
 8007dd2:	b141      	cbz	r1, 8007de6 <USBH_MSC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f001 fe35 	bl	8009a44 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8007dda:	7929      	ldrb	r1, [r5, #4]
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f001 fe8b 	bl	8009af8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007de2:	2300      	movs	r3, #0
 8007de4:	712b      	strb	r3, [r5, #4]
  if(phost->pActiveClass->pData)
 8007de6:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 8007dea:	69dd      	ldr	r5, [r3, #28]
 8007dec:	2d00      	cmp	r5, #0
 8007dee:	d1de      	bne.n	8007dae <USBH_MSC_InterfaceDeInit+0x12>
}
 8007df0:	2000      	movs	r0, #0
 8007df2:	bd38      	pop	{r3, r4, r5, pc}

08007df4 <USBH_MSC_InterfaceInit>:
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007df4:	f8d0 1278 	ldr.w	r1, [r0, #632]	; 0x278
 8007df8:	2350      	movs	r3, #80	; 0x50
 8007dfa:	2206      	movs	r2, #6
{
 8007dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dfe:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007e00:	7909      	ldrb	r1, [r1, #4]
{
 8007e02:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007e04:	f000 fcc4 	bl	8008790 <USBH_FindInterface>
  if(interface == 0xFFU) /* Not Valid Interface */
 8007e08:	28ff      	cmp	r0, #255	; 0xff
 8007e0a:	d069      	beq.n	8007ee0 <USBH_MSC_InterfaceInit+0xec>
    USBH_SelectInterface (phost, interface);
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 fcb2 	bl	8008778 <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8007e14:	f8d5 6278 	ldr.w	r6, [r5, #632]	; 0x278
 8007e18:	20cc      	movs	r0, #204	; 0xcc
 8007e1a:	f017 f963 	bl	801f0e4 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007e1e:	221a      	movs	r2, #26
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8007e20:	61f0      	str	r0, [r6, #28]
 8007e22:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007e24:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
 8007e28:	fb02 5203 	mla	r2, r2, r3, r5
 8007e2c:	f992 024a 	ldrsb.w	r0, [r2, #586]	; 0x24a
 8007e30:	f892 124a 	ldrb.w	r1, [r2, #586]	; 0x24a
 8007e34:	2800      	cmp	r0, #0
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8007e36:	f8b2 224c 	ldrh.w	r2, [r2, #588]	; 0x24c
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007e3a:	db4e      	blt.n	8007eda <USBH_MSC_InterfaceInit+0xe6>
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8007e3c:	71a1      	strb	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8007e3e:	8122      	strh	r2, [r4, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007e40:	221a      	movs	r2, #26
 8007e42:	fb02 5303 	mla	r3, r2, r3, r5
 8007e46:	f993 2252 	ldrsb.w	r2, [r3, #594]	; 0x252
 8007e4a:	f893 1252 	ldrb.w	r1, [r3, #594]	; 0x252
 8007e4e:	2a00      	cmp	r2, #0
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8007e50:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007e54:	db47      	blt.n	8007ee6 <USBH_MSC_InterfaceInit+0xf2>
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8007e56:	71a1      	strb	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8007e58:	8123      	strh	r3, [r4, #8]
    MSC_Handle->current_lun = 0U;
 8007e5a:	2600      	movs	r6, #0
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007e5c:	4628      	mov	r0, r5
    USBH_OpenPipe  (phost,
 8007e5e:	2702      	movs	r7, #2
    MSC_Handle->current_lun = 0U;
 8007e60:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
    MSC_Handle->state = MSC_INIT;
 8007e64:	81a6      	strh	r6, [r4, #12]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8007e66:	73a6      	strb	r6, [r4, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007e68:	f001 fdf2 	bl	8009a50 <USBH_AllocPipe>
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007e6c:	79e1      	ldrb	r1, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007e6e:	7160      	strb	r0, [r4, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007e70:	4628      	mov	r0, r5
 8007e72:	f001 fded 	bl	8009a50 <USBH_AllocPipe>
 8007e76:	4603      	mov	r3, r0
    USBH_MSC_BOT_Init(phost);
 8007e78:	4628      	mov	r0, r5
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007e7a:	7123      	strb	r3, [r4, #4]
    USBH_MSC_BOT_Init(phost);
 8007e7c:	f000 f992 	bl	80081a4 <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 8007e80:	4631      	mov	r1, r6
 8007e82:	2234      	movs	r2, #52	; 0x34
 8007e84:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8007e88:	f017 f964 	bl	801f154 <memset>
    USBH_OpenPipe  (phost,
 8007e8c:	8923      	ldrh	r3, [r4, #8]
 8007e8e:	79a2      	ldrb	r2, [r4, #6]
 8007e90:	4628      	mov	r0, r5
 8007e92:	7961      	ldrb	r1, [r4, #5]
 8007e94:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8007e98:	f895 321d 	ldrb.w	r3, [r5, #541]	; 0x21d
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
 8007ea2:	f001 fdbf 	bl	8009a24 <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 8007ea6:	8962      	ldrh	r2, [r4, #10]
 8007ea8:	9701      	str	r7, [sp, #4]
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f895 321d 	ldrb.w	r3, [r5, #541]	; 0x21d
 8007eb0:	7921      	ldrb	r1, [r4, #4]
 8007eb2:	9202      	str	r2, [sp, #8]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	79e2      	ldrb	r2, [r4, #7]
 8007eb8:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
 8007ebc:	f001 fdb2 	bl	8009a24 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, MSC_Handle->InPipe, 0U);
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	7921      	ldrb	r1, [r4, #4]
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f015 ff1d 	bl	801dd04 <USBH_LL_SetToggle>
    USBH_LL_SetToggle (phost, MSC_Handle->OutPipe, 0U);
 8007eca:	4632      	mov	r2, r6
 8007ecc:	7961      	ldrb	r1, [r4, #5]
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f015 ff18 	bl	801dd04 <USBH_LL_SetToggle>
    status = USBH_OK;
 8007ed4:	4630      	mov	r0, r6
}
 8007ed6:	b005      	add	sp, #20
 8007ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8007eda:	71e1      	strb	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8007edc:	8162      	strh	r2, [r4, #10]
 8007ede:	e7af      	b.n	8007e40 <USBH_MSC_InterfaceInit+0x4c>
    status = USBH_FAIL;
 8007ee0:	2002      	movs	r0, #2
}
 8007ee2:	b005      	add	sp, #20
 8007ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8007ee6:	71e1      	strb	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8007ee8:	8163      	strh	r3, [r4, #10]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007eea:	79a1      	ldrb	r1, [r4, #6]
 8007eec:	e7b5      	b.n	8007e5a <USBH_MSC_InterfaceInit+0x66>
 8007eee:	bf00      	nop

08007ef0 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007ef0:	7803      	ldrb	r3, [r0, #0]
 8007ef2:	2b0b      	cmp	r3, #11
 8007ef4:	d001      	beq.n	8007efa <USBH_MSC_UnitIsReady+0xa>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8007ef6:	2000      	movs	r0, #0
  }

  return res;
}
 8007ef8:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007efa:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007efe:	2234      	movs	r2, #52	; 0x34
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	fb02 3101 	mla	r1, r2, r1, r3
 8007f06:	f891 0091 	ldrb.w	r0, [r1, #145]	; 0x91
    res = 0U;
 8007f0a:	fab0 f080 	clz	r0, r0
 8007f0e:	0940      	lsrs	r0, r0, #5
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop

08007f14 <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if(phost->gState == HOST_CLASS)
 8007f14:	7803      	ldrb	r3, [r0, #0]
 8007f16:	2b0b      	cmp	r3, #11
 8007f18:	d001      	beq.n	8007f1e <USBH_MSC_GetLUNInfo+0xa>
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 8007f1a:	2002      	movs	r0, #2
  }
}
 8007f1c:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f1e:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007f22:	2034      	movs	r0, #52	; 0x34
{
 8007f24:	b510      	push	{r4, lr}
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007f26:	2490      	movs	r4, #144	; 0x90
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	fb10 4101 	smlabb	r1, r0, r1, r4
 8007f2e:	4419      	add	r1, r3
 8007f30:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8007f34:	f8d1 e000 	ldr.w	lr, [r1]
 8007f38:	3110      	adds	r1, #16
 8007f3a:	f851 cc0c 	ldr.w	ip, [r1, #-12]
 8007f3e:	3210      	adds	r2, #16
 8007f40:	f851 0c08 	ldr.w	r0, [r1, #-8]
 8007f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f48:	42a1      	cmp	r1, r4
 8007f4a:	f842 ec10 	str.w	lr, [r2, #-16]
 8007f4e:	f842 cc0c 	str.w	ip, [r2, #-12]
 8007f52:	f842 0c08 	str.w	r0, [r2, #-8]
 8007f56:	f842 3c04 	str.w	r3, [r2, #-4]
 8007f5a:	d1eb      	bne.n	8007f34 <USBH_MSC_GetLUNInfo+0x20>
 8007f5c:	680b      	ldr	r3, [r1, #0]
    return USBH_OK;
 8007f5e:	2000      	movs	r0, #0
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007f60:	6013      	str	r3, [r2, #0]
}
 8007f62:	bd10      	pop	{r4, pc}

08007f64 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8007f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8007f68:	f890 521e 	ldrb.w	r5, [r0, #542]	; 0x21e
{
 8007f6c:	b085      	sub	sp, #20
  if ((phost->device.is_connected == 0U) ||
 8007f6e:	b19d      	cbz	r5, 8007f98 <USBH_MSC_Read+0x34>
      (phost->gState != HOST_CLASS) ||
 8007f70:	7805      	ldrb	r5, [r0, #0]
 8007f72:	4604      	mov	r4, r0
  if ((phost->device.is_connected == 0U) ||
 8007f74:	2d0b      	cmp	r5, #11
 8007f76:	d10f      	bne.n	8007f98 <USBH_MSC_Read+0x34>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f78:	f8d0 5278 	ldr.w	r5, [r0, #632]	; 0x278
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007f7c:	f04f 0834 	mov.w	r8, #52	; 0x34
 8007f80:	460e      	mov	r6, r1
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f82:	f8d5 b01c 	ldr.w	fp, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007f86:	fb08 f701 	mul.w	r7, r8, r1
 8007f8a:	eb0b 0c07 	add.w	ip, fp, r7
      (phost->gState != HOST_CLASS) ||
 8007f8e:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 8007f92:	f1be 0f01 	cmp.w	lr, #1
 8007f96:	d003      	beq.n	8007fa0 <USBH_MSC_Read+0x3c>
  {
    return  USBH_FAIL;
 8007f98:	2002      	movs	r0, #2
    }
  }
  MSC_Handle->state = MSC_IDLE;

  return USBH_OK;
}
 8007f9a:	b005      	add	sp, #20
 8007f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MSC_Handle->state = MSC_READ;
 8007fa0:	f04f 0e06 	mov.w	lr, #6
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007fa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  MSC_Handle->state = MSC_READ;
 8007fa6:	f88b e00c 	strb.w	lr, [fp, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007faa:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8007fae:	f8ab 10c6 	strh.w	r1, [fp, #198]	; 0xc6
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007fb2:	9500      	str	r5, [sp, #0]
 8007fb4:	f000 fb5e 	bl	8008674 <USBH_MSC_SCSI_Read>
  timeout = phost->Timer;
 8007fb8:	239c      	movs	r3, #156	; 0x9c
 8007fba:	f8d4 a2bc 	ldr.w	sl, [r4, #700]	; 0x2bc
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007fbe:	fb18 3306 	smlabb	r3, r8, r6, r3
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007fc2:	f242 7810 	movw	r8, #10000	; 0x2710
 8007fc6:	9303      	str	r3, [sp, #12]
 8007fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fca:	fb08 f803 	mul.w	r8, r8, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007fce:	e00b      	b.n	8007fe8 <USBH_MSC_Read+0x84>
  switch (MSC_Handle->unit[lun].state)
 8007fd0:	2a05      	cmp	r2, #5
 8007fd2:	d036      	beq.n	8008042 <USBH_MSC_Read+0xde>
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007fd4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8007fd8:	eba3 030a 	sub.w	r3, r3, sl
 8007fdc:	4543      	cmp	r3, r8
 8007fde:	d844      	bhi.n	800806a <USBH_MSC_Read+0x106>
 8007fe0:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d040      	beq.n	800806a <USBH_MSC_Read+0x106>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fe8:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 8007fec:	69db      	ldr	r3, [r3, #28]
  switch (MSC_Handle->unit[lun].state)
 8007fee:	19dd      	adds	r5, r3, r7
 8007ff0:	f895 2090 	ldrb.w	r2, [r5, #144]	; 0x90
 8007ff4:	f105 0990 	add.w	r9, r5, #144	; 0x90
 8007ff8:	2a06      	cmp	r2, #6
 8007ffa:	d011      	beq.n	8008020 <USBH_MSC_Read+0xbc>
 8007ffc:	2a07      	cmp	r2, #7
 8007ffe:	d1e7      	bne.n	8007fd0 <USBH_MSC_Read+0x6c>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 8008000:	2300      	movs	r3, #0
 8008002:	4631      	mov	r1, r6
 8008004:	4620      	mov	r0, r4
 8008006:	461a      	mov	r2, r3
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	f000 faef 	bl	80085ec <USBH_MSC_SCSI_Write>
    if(scsi_status == USBH_OK)
 800800e:	b980      	cbnz	r0, 8008032 <USBH_MSC_Read+0xce>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008010:	2301      	movs	r3, #1
 8008012:	f889 3000 	strb.w	r3, [r9]
  MSC_Handle->state = MSC_IDLE;
 8008016:	2301      	movs	r3, #1
  return USBH_OK;
 8008018:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 800801a:	f88b 300c 	strb.w	r3, [fp, #12]
  return USBH_OK;
 800801e:	e7bc      	b.n	8007f9a <USBH_MSC_Read+0x36>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 8008020:	2300      	movs	r3, #0
 8008022:	4631      	mov	r1, r6
 8008024:	4620      	mov	r0, r4
 8008026:	461a      	mov	r2, r3
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	f000 fb23 	bl	8008674 <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 800802e:	2800      	cmp	r0, #0
 8008030:	d0ee      	beq.n	8008010 <USBH_MSC_Read+0xac>
    else if( scsi_status == USBH_FAIL)
 8008032:	2802      	cmp	r0, #2
 8008034:	d014      	beq.n	8008060 <USBH_MSC_Read+0xfc>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 8008036:	2804      	cmp	r0, #4
 8008038:	d1cc      	bne.n	8007fd4 <USBH_MSC_Read+0x70>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800803a:	2308      	movs	r3, #8
 800803c:	f889 3000 	strb.w	r3, [r9]
  return error;
 8008040:	e7e9      	b.n	8008016 <USBH_MSC_Read+0xb2>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008042:	9a03      	ldr	r2, [sp, #12]
 8008044:	4631      	mov	r1, r6
 8008046:	4620      	mov	r0, r4
 8008048:	9302      	str	r3, [sp, #8]
 800804a:	189a      	adds	r2, r3, r2
 800804c:	f000 fa8e 	bl	800856c <USBH_MSC_SCSI_RequestSense>
    if(scsi_status == USBH_OK)
 8008050:	2800      	cmp	r0, #0
 8008052:	d1f0      	bne.n	8008036 <USBH_MSC_Read+0xd2>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8008054:	9b02      	ldr	r3, [sp, #8]
 8008056:	3790      	adds	r7, #144	; 0x90
 8008058:	f240 2201 	movw	r2, #513	; 0x201
 800805c:	53da      	strh	r2, [r3, r7]
  return error;
 800805e:	e7da      	b.n	8008016 <USBH_MSC_Read+0xb2>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008060:	f04f 0305 	mov.w	r3, #5
 8008064:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
  return error;
 8008068:	e7b4      	b.n	8007fd4 <USBH_MSC_Read+0x70>
      MSC_Handle->state = MSC_IDLE;
 800806a:	2301      	movs	r3, #1
      return USBH_FAIL;
 800806c:	2002      	movs	r0, #2
      MSC_Handle->state = MSC_IDLE;
 800806e:	f88b 300c 	strb.w	r3, [fp, #12]
}
 8008072:	b005      	add	sp, #20
 8008074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008078 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8008078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800807c:	f890 521e 	ldrb.w	r5, [r0, #542]	; 0x21e
{
 8008080:	b085      	sub	sp, #20
  if ((phost->device.is_connected == 0U) ||
 8008082:	b19d      	cbz	r5, 80080ac <USBH_MSC_Write+0x34>
      (phost->gState != HOST_CLASS) ||
 8008084:	7805      	ldrb	r5, [r0, #0]
 8008086:	4604      	mov	r4, r0
  if ((phost->device.is_connected == 0U) ||
 8008088:	2d0b      	cmp	r5, #11
 800808a:	d10f      	bne.n	80080ac <USBH_MSC_Write+0x34>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800808c:	f8d0 5278 	ldr.w	r5, [r0, #632]	; 0x278
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008090:	f04f 0834 	mov.w	r8, #52	; 0x34
 8008094:	460e      	mov	r6, r1
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008096:	f8d5 b01c 	ldr.w	fp, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800809a:	fb08 f701 	mul.w	r7, r8, r1
 800809e:	eb0b 0c07 	add.w	ip, fp, r7
      (phost->gState != HOST_CLASS) ||
 80080a2:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 80080a6:	f1be 0f01 	cmp.w	lr, #1
 80080aa:	d003      	beq.n	80080b4 <USBH_MSC_Write+0x3c>
  {
    return  USBH_FAIL;
 80080ac:	2002      	movs	r0, #2
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
  return USBH_OK;
}
 80080ae:	b005      	add	sp, #20
 80080b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MSC_Handle->state = MSC_WRITE;
 80080b4:	f04f 0e07 	mov.w	lr, #7
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80080b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  MSC_Handle->state = MSC_WRITE;
 80080ba:	f88b e00c 	strb.w	lr, [fp, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80080be:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 80080c2:	f8ab 10c6 	strh.w	r1, [fp, #198]	; 0xc6
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80080c6:	9500      	str	r5, [sp, #0]
 80080c8:	f000 fa90 	bl	80085ec <USBH_MSC_SCSI_Write>
  timeout = phost->Timer;
 80080cc:	239c      	movs	r3, #156	; 0x9c
 80080ce:	f8d4 a2bc 	ldr.w	sl, [r4, #700]	; 0x2bc
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80080d2:	fb18 3306 	smlabb	r3, r8, r6, r3
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 80080d6:	f242 7810 	movw	r8, #10000	; 0x2710
 80080da:	9303      	str	r3, [sp, #12]
 80080dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080de:	fb08 f803 	mul.w	r8, r8, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80080e2:	e00b      	b.n	80080fc <USBH_MSC_Write+0x84>
  switch (MSC_Handle->unit[lun].state)
 80080e4:	2a05      	cmp	r2, #5
 80080e6:	d036      	beq.n	8008156 <USBH_MSC_Write+0xde>
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 80080e8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80080ec:	eba3 030a 	sub.w	r3, r3, sl
 80080f0:	4543      	cmp	r3, r8
 80080f2:	d844      	bhi.n	800817e <USBH_MSC_Write+0x106>
 80080f4:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d040      	beq.n	800817e <USBH_MSC_Write+0x106>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080fc:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 8008100:	69db      	ldr	r3, [r3, #28]
  switch (MSC_Handle->unit[lun].state)
 8008102:	19dd      	adds	r5, r3, r7
 8008104:	f895 2090 	ldrb.w	r2, [r5, #144]	; 0x90
 8008108:	f105 0990 	add.w	r9, r5, #144	; 0x90
 800810c:	2a06      	cmp	r2, #6
 800810e:	d011      	beq.n	8008134 <USBH_MSC_Write+0xbc>
 8008110:	2a07      	cmp	r2, #7
 8008112:	d1e7      	bne.n	80080e4 <USBH_MSC_Write+0x6c>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 8008114:	2300      	movs	r3, #0
 8008116:	4631      	mov	r1, r6
 8008118:	4620      	mov	r0, r4
 800811a:	461a      	mov	r2, r3
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	f000 fa65 	bl	80085ec <USBH_MSC_SCSI_Write>
    if(scsi_status == USBH_OK)
 8008122:	b980      	cbnz	r0, 8008146 <USBH_MSC_Write+0xce>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008124:	2301      	movs	r3, #1
 8008126:	f889 3000 	strb.w	r3, [r9]
  MSC_Handle->state = MSC_IDLE;
 800812a:	2301      	movs	r3, #1
  return USBH_OK;
 800812c:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 800812e:	f88b 300c 	strb.w	r3, [fp, #12]
  return USBH_OK;
 8008132:	e7bc      	b.n	80080ae <USBH_MSC_Write+0x36>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 8008134:	2300      	movs	r3, #0
 8008136:	4631      	mov	r1, r6
 8008138:	4620      	mov	r0, r4
 800813a:	461a      	mov	r2, r3
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	f000 fa99 	bl	8008674 <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 8008142:	2800      	cmp	r0, #0
 8008144:	d0ee      	beq.n	8008124 <USBH_MSC_Write+0xac>
    else if( scsi_status == USBH_FAIL)
 8008146:	2802      	cmp	r0, #2
 8008148:	d014      	beq.n	8008174 <USBH_MSC_Write+0xfc>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 800814a:	2804      	cmp	r0, #4
 800814c:	d1cc      	bne.n	80080e8 <USBH_MSC_Write+0x70>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800814e:	2308      	movs	r3, #8
 8008150:	f889 3000 	strb.w	r3, [r9]
  return error;
 8008154:	e7e9      	b.n	800812a <USBH_MSC_Write+0xb2>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008156:	9a03      	ldr	r2, [sp, #12]
 8008158:	4631      	mov	r1, r6
 800815a:	4620      	mov	r0, r4
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	189a      	adds	r2, r3, r2
 8008160:	f000 fa04 	bl	800856c <USBH_MSC_SCSI_RequestSense>
    if(scsi_status == USBH_OK)
 8008164:	2800      	cmp	r0, #0
 8008166:	d1f0      	bne.n	800814a <USBH_MSC_Write+0xd2>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8008168:	9b02      	ldr	r3, [sp, #8]
 800816a:	3790      	adds	r7, #144	; 0x90
 800816c:	f240 2201 	movw	r2, #513	; 0x201
 8008170:	53da      	strh	r2, [r3, r7]
  return error;
 8008172:	e7da      	b.n	800812a <USBH_MSC_Write+0xb2>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008174:	f04f 0305 	mov.w	r3, #5
 8008178:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
  return error;
 800817c:	e7b4      	b.n	80080e8 <USBH_MSC_Write+0x70>
      MSC_Handle->state = MSC_IDLE;
 800817e:	2301      	movs	r3, #1
      return USBH_FAIL;
 8008180:	2002      	movs	r0, #2
      MSC_Handle->state = MSC_IDLE;
 8008182:	f88b 300c 	strb.w	r3, [fp, #12]
}
 8008186:	b005      	add	sp, #20
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800818c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800818c:	b410      	push	{r4}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
 800818e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008192:	f64f 64a1 	movw	r4, #65185	; 0xfea1
  phost->Control.setup.b.wValue.w = 0U;
 8008196:	e9c0 4204 	strd	r4, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 800819a:	2201      	movs	r2, #1
}
 800819c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return USBH_CtlReq(phost, Maxlun, 1U);
 80081a0:	f001 bb0a 	b.w	80097b8 <USBH_CtlReq>

080081a4 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081a4:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081a8:	2201      	movs	r2, #1
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80081aa:	4907      	ldr	r1, [pc, #28]	; (80081c8 <USBH_MSC_BOT_Init+0x24>)
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
 80081ac:	2000      	movs	r0, #0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081ae:	69db      	ldr	r3, [r3, #28]
{
 80081b0:	b410      	push	{r4}
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80081b2:	4c06      	ldr	r4, [pc, #24]	; (80081cc <USBH_MSC_BOT_Init+0x28>)
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80081b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80081bc:	e9c3 4115 	strd	r4, r1, [r3, #84]	; 0x54
}
 80081c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	20304050 	.word	0x20304050
 80081cc:	43425355 	.word	0x43425355

080081d0 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081d0:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
{
 80081d4:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081d6:	69de      	ldr	r6, [r3, #28]
{
 80081d8:	b082      	sub	sp, #8
 80081da:	4605      	mov	r5, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 80081dc:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 80081e0:	1e63      	subs	r3, r4, #1
 80081e2:	2b0a      	cmp	r3, #10
 80081e4:	d830      	bhi.n	8008248 <USBH_MSC_BOT_Process+0x78>
 80081e6:	e8df f003 	tbb	[pc, r3]
 80081ea:	2414      	.short	0x2414
 80081ec:	766a8333 	.word	0x766a8333
 80081f0:	6156493e 	.word	0x6156493e
 80081f4:	06          	.byte	0x06
 80081f5:	00          	.byte	0x00
  phost->Control.setup.b.wValue.w = 0U;
 80081f6:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80081f8:	f64f 7321 	movw	r3, #65313	; 0xff21
  return USBH_CtlReq(phost, 0U, 0U);
 80081fc:	4611      	mov	r1, r2
  phost->Control.setup.b.wValue.w = 0U;
 80081fe:	e9c0 3204 	strd	r3, r2, [r0, #16]
  return USBH_CtlReq(phost, 0U, 0U);
 8008202:	f001 fad9 	bl	80097b8 <USBH_CtlReq>
    break;


  case BOT_UNRECOVERED_ERROR:
    status = USBH_MSC_BOT_REQ_Reset(phost);
    if ( status == USBH_OK)
 8008206:	4604      	mov	r4, r0
 8008208:	b980      	cbnz	r0, 800822c <USBH_MSC_BOT_Process+0x5c>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800820a:	2301      	movs	r3, #1
 800820c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8008210:	e00c      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008212:	2202      	movs	r2, #2
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8008214:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 8008218:	7973      	ldrb	r3, [r6, #5]
 800821a:	f106 0154 	add.w	r1, r6, #84	; 0x54
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800821e:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 8008222:	2201      	movs	r2, #1
 8008224:	9200      	str	r2, [sp, #0]
 8008226:	221f      	movs	r2, #31
 8008228:	f001 fbd2 	bl	80099d0 <USBH_BulkSendData>

  default:
    break;
  }
  return status;
}
 800822c:	4620      	mov	r0, r4
 800822e:	b002      	add	sp, #8
 8008230:	bd70      	pop	{r4, r5, r6, pc}
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008232:	7971      	ldrb	r1, [r6, #5]
 8008234:	f015 fd46 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8008238:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800823a:	4604      	mov	r4, r0
    if(URB_Status == USBH_URB_DONE)
 800823c:	f000 809a 	beq.w	8008374 <USBH_MSC_BOT_Process+0x1a4>
    else if(URB_Status == USBH_URB_NOTREADY)
 8008240:	2802      	cmp	r0, #2
 8008242:	d068      	beq.n	8008316 <USBH_MSC_BOT_Process+0x146>
    else if(URB_Status == USBH_URB_STALL)
 8008244:	2c05      	cmp	r4, #5
 8008246:	d061      	beq.n	800830c <USBH_MSC_BOT_Process+0x13c>
  switch (MSC_Handle->hbot.state)
 8008248:	2401      	movs	r4, #1
}
 800824a:	4620      	mov	r0, r4
 800824c:	b002      	add	sp, #8
 800824e:	bd70      	pop	{r4, r5, r6, pc}
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8008250:	7933      	ldrb	r3, [r6, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008252:	2401      	movs	r4, #1
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8008254:	8972      	ldrh	r2, [r6, #10]
 8008256:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800825a:	f001 fbd3 	bl	8009a04 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800825e:	2304      	movs	r3, #4
 8008260:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    break;
 8008264:	e7e2      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 8008266:	7933      	ldrb	r3, [r6, #4]
 8008268:	220d      	movs	r2, #13
 800826a:	f106 0178 	add.w	r1, r6, #120	; 0x78
  USBH_StatusTypeDef   status = USBH_BUSY;
 800826e:	2401      	movs	r4, #1
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 8008270:	f001 fbc8 	bl	8009a04 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008274:	2308      	movs	r3, #8
 8008276:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    break;
 800827a:	e7d7      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800827c:	7931      	ldrb	r1, [r6, #4]
 800827e:	f015 fd21 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8008282:	2801      	cmp	r0, #1
 8008284:	f000 8093 	beq.w	80083ae <USBH_MSC_BOT_Process+0x1de>
    else if(URB_Status == USBH_URB_STALL)
 8008288:	2805      	cmp	r0, #5
 800828a:	d1dd      	bne.n	8008248 <USBH_MSC_BOT_Process+0x78>
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 800828c:	2309      	movs	r3, #9
  USBH_StatusTypeDef   status = USBH_BUSY;
 800828e:	2401      	movs	r4, #1
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008290:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8008294:	e7ca      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>

  switch (dir)
  {
  case BOT_DIR_IN :
    /* send ClrFeture on Bulk IN endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008296:	79f1      	ldrb	r1, [r6, #7]
 8008298:	f001 f9b6 	bl	8009608 <USBH_ClrFeature>
    if (error == USBH_OK)
 800829c:	b388      	cbz	r0, 8008302 <USBH_MSC_BOT_Process+0x132>
    else if (error == USBH_UNRECOVERED_ERROR)
 800829e:	2804      	cmp	r0, #4
 80082a0:	d1d2      	bne.n	8008248 <USBH_MSC_BOT_Process+0x78>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80082a2:	230b      	movs	r3, #11
  USBH_StatusTypeDef   status = USBH_BUSY;
 80082a4:	2401      	movs	r4, #1
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80082a6:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80082aa:	e7bf      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>

    break;

  case BOT_DIR_OUT :
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80082ac:	79b1      	ldrb	r1, [r6, #6]
 80082ae:	f001 f9ab 	bl	8009608 <USBH_ClrFeature>
    if (error == USBH_OK)
 80082b2:	4604      	mov	r4, r0
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d069      	beq.n	800838c <USBH_MSC_BOT_Process+0x1bc>
      if (error == USBH_UNRECOVERED_ERROR)
 80082b8:	2804      	cmp	r0, #4
 80082ba:	d1c5      	bne.n	8008248 <USBH_MSC_BOT_Process+0x78>
 80082bc:	e7f1      	b.n	80082a2 <USBH_MSC_BOT_Process+0xd2>
    USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 80082be:	2401      	movs	r4, #1
 80082c0:	7973      	ldrb	r3, [r6, #5]
 80082c2:	8932      	ldrh	r2, [r6, #8]
 80082c4:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80082c8:	9400      	str	r4, [sp, #0]
 80082ca:	f001 fb81 	bl	80099d0 <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80082ce:	2306      	movs	r3, #6
 80082d0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    break;
 80082d4:	e7aa      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80082d6:	7971      	ldrb	r1, [r6, #5]
 80082d8:	f015 fcf4 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80082dc:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80082de:	4604      	mov	r4, r0
    if(URB_Status == USBH_URB_DONE)
 80082e0:	d01e      	beq.n	8008320 <USBH_MSC_BOT_Process+0x150>
    else if(URB_Status == USBH_URB_NOTREADY)
 80082e2:	2802      	cmp	r0, #2
 80082e4:	d1ae      	bne.n	8008244 <USBH_MSC_BOT_Process+0x74>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80082e6:	2305      	movs	r3, #5
  USBH_StatusTypeDef   status = USBH_BUSY;
 80082e8:	2401      	movs	r4, #1
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80082ea:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80082ee:	e79d      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80082f0:	7931      	ldrb	r1, [r6, #4]
 80082f2:	f015 fce7 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80082f6:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80082f8:	4604      	mov	r4, r0
    if(URB_Status == USBH_URB_DONE)
 80082fa:	d029      	beq.n	8008350 <USBH_MSC_BOT_Process+0x180>
    else if(URB_Status == USBH_URB_STALL)
 80082fc:	2805      	cmp	r0, #5
 80082fe:	d1a3      	bne.n	8008248 <USBH_MSC_BOT_Process+0x78>
 8008300:	e7c4      	b.n	800828c <USBH_MSC_BOT_Process+0xbc>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008302:	2307      	movs	r3, #7
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008304:	2401      	movs	r4, #1
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008306:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800830a:	e78f      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800830c:	230a      	movs	r3, #10
  USBH_StatusTypeDef   status = USBH_BUSY;
 800830e:	2401      	movs	r4, #1
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008310:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8008314:	e78a      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008316:	2301      	movs	r3, #1
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008318:	461c      	mov	r4, r3
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800831a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800831e:	e785      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008320:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8008322:	8932      	ldrh	r2, [r6, #8]
 8008324:	4293      	cmp	r3, r2
 8008326:	d90d      	bls.n	8008344 <USBH_MSC_BOT_Process+0x174>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008328:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800832c:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800832e:	4411      	add	r1, r2
 8008330:	65f3      	str	r3, [r6, #92]	; 0x5c
 8008332:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008336:	b13b      	cbz	r3, 8008348 <USBH_MSC_BOT_Process+0x178>
        USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8008338:	7973      	ldrb	r3, [r6, #5]
 800833a:	4628      	mov	r0, r5
 800833c:	9400      	str	r4, [sp, #0]
 800833e:	f001 fb47 	bl	80099d0 <USBH_BulkSendData>
 8008342:	e773      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
 8008344:	2300      	movs	r3, #0
 8008346:	65f3      	str	r3, [r6, #92]	; 0x5c
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008348:	2307      	movs	r3, #7
 800834a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800834e:	e76d      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008350:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8008352:	8972      	ldrh	r2, [r6, #10]
 8008354:	4293      	cmp	r3, r2
 8008356:	d9f5      	bls.n	8008344 <USBH_MSC_BOT_Process+0x174>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008358:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800835c:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800835e:	4411      	add	r1, r2
 8008360:	65f3      	str	r3, [r6, #92]	; 0x5c
 8008362:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0ee      	beq.n	8008348 <USBH_MSC_BOT_Process+0x178>
        USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 800836a:	7933      	ldrb	r3, [r6, #4]
 800836c:	4628      	mov	r0, r5
 800836e:	f001 fb49 	bl	8009a04 <USBH_BulkReceiveData>
 8008372:	e75b      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008374:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0e6      	beq.n	8008348 <USBH_MSC_BOT_Process+0x178>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800837a:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 800837e:	2b00      	cmp	r3, #0
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8008380:	bfb4      	ite	lt
 8008382:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008384:	2305      	movge	r3, #5
 8008386:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800838a:	e74f      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800838c:	7971      	ldrb	r1, [r6, #5]
 800838e:	4628      	mov	r0, r5
 8008390:	f015 fcca 	bl	801dd28 <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008394:	f1c0 0001 	rsb	r0, r0, #1
 8008398:	7971      	ldrb	r1, [r6, #5]
 800839a:	b2c2      	uxtb	r2, r0
 800839c:	4628      	mov	r0, r5
 800839e:	f015 fcb1 	bl	801dd04 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80083a2:	4622      	mov	r2, r4
 80083a4:	7931      	ldrb	r1, [r6, #4]
 80083a6:	4628      	mov	r0, r5
 80083a8:	f015 fcac 	bl	801dd04 <USBH_LL_SetToggle>
 80083ac:	e76e      	b.n	800828c <USBH_MSC_BOT_Process+0xbc>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083ae:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80083b2:	f886 0052 	strb.w	r0, [r6, #82]	; 0x52
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

    /*Checking if the transfer length is different than 13*/
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80083b6:	4628      	mov	r0, r5
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083b8:	f8d5 3278 	ldr.w	r3, [r5, #632]	; 0x278
 80083bc:	69dc      	ldr	r4, [r3, #28]
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80083be:	7921      	ldrb	r1, [r4, #4]
 80083c0:	f015 fc38 	bl	801dc34 <USBH_LL_GetLastXferSize>
 80083c4:	280d      	cmp	r0, #13
 80083c6:	d107      	bne.n	80083d8 <USBH_MSC_BOT_Process+0x208>
    }
    else
    { /* CSW length is Correct */

      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80083c8:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <USBH_MSC_BOT_Process+0x218>)
 80083ca:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d103      	bne.n	80083d8 <USBH_MSC_BOT_Process+0x208>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */

        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80083d0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80083d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d001      	beq.n	80083dc <USBH_MSC_BOT_Process+0x20c>
        status = USBH_FAIL;
 80083d8:	2402      	movs	r4, #2
 80083da:	e727      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0U)
 80083dc:	f894 4084 	ldrb.w	r4, [r4, #132]	; 0x84
        status = USBH_FAIL;
 80083e0:	2c00      	cmp	r4, #0
 80083e2:	bf18      	it	ne
 80083e4:	2402      	movne	r4, #2
 80083e6:	e721      	b.n	800822c <USBH_MSC_BOT_Process+0x5c>
 80083e8:	53425355 	.word	0x53425355

080083ec <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost,
                                                uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083ec:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
 80083f0:	69db      	ldr	r3, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 80083f2:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80083f6:	2a01      	cmp	r2, #1
 80083f8:	d006      	beq.n	8008408 <USBH_MSC_SCSI_TestUnitReady+0x1c>
 80083fa:	2a02      	cmp	r2, #2
 80083fc:	d101      	bne.n	8008402 <USBH_MSC_SCSI_TestUnitReady+0x16>
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
    error = USBH_BUSY;
    break;

  case BOT_CMD_WAIT:
    error = USBH_MSC_BOT_Process(phost, lun);
 80083fe:	f7ff bee7 	b.w	80081d0 <USBH_MSC_BOT_Process>
  switch(MSC_Handle->hbot.cmd_state)
 8008402:	2202      	movs	r2, #2
  default:
    break;
  }

  return error;
}
 8008404:	4610      	mov	r0, r2
 8008406:	4770      	bx	lr
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008408:	2100      	movs	r1, #0
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800840a:	f04f 0c0a 	mov.w	ip, #10
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800840e:	2002      	movs	r0, #2
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008414:	65d9      	str	r1, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008416:	f883 0052 	strb.w	r0, [r3, #82]	; 0x52
}
 800841a:	4610      	mov	r0, r2
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800841c:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008420:	f883 c062 	strb.w	ip, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008424:	f8c3 1063 	str.w	r1, [r3, #99]	; 0x63
 8008428:	f8c3 1067 	str.w	r1, [r3, #103]	; 0x67
 800842c:	f8c3 106b 	str.w	r1, [r3, #107]	; 0x6b
 8008430:	f8c3 106f 	str.w	r1, [r3, #111]	; 0x6f
}
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop

08008438 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 8008438:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800843a:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
 800843e:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8008440:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8008444:	2b01      	cmp	r3, #1
 8008446:	d013      	beq.n	8008470 <USBH_MSC_SCSI_ReadCapacity+0x38>
 8008448:	2b02      	cmp	r3, #2
 800844a:	d10e      	bne.n	800846a <USBH_MSC_SCSI_ReadCapacity+0x32>
    error = USBH_BUSY;
    break;

  case BOT_CMD_WAIT:

    error = USBH_MSC_BOT_Process(phost, lun);
 800844c:	4615      	mov	r5, r2
 800844e:	f7ff febf 	bl	80081d0 <USBH_MSC_BOT_Process>

    if(error == USBH_OK)
 8008452:	4603      	mov	r3, r0
 8008454:	b938      	cbnz	r0, 8008466 <USBH_MSC_SCSI_ReadCapacity+0x2e>
    {
      /*assign the capacity*/
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8008456:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800845a:	680a      	ldr	r2, [r1, #0]
 800845c:	ba12      	rev	r2, r2
 800845e:	602a      	str	r2, [r5, #0]
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);

      /*assign the page length*/
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008460:	88ca      	ldrh	r2, [r1, #6]
 8008462:	ba52      	rev16	r2, r2
 8008464:	80aa      	strh	r2, [r5, #4]
  default:
    break;
  }

  return error;
}
 8008466:	4618      	mov	r0, r3
 8008468:	bd38      	pop	{r3, r4, r5, pc}
  switch(MSC_Handle->hbot.cmd_state)
 800846a:	2301      	movs	r3, #1
}
 800846c:	4618      	mov	r0, r3
 800846e:	bd38      	pop	{r3, r4, r5, pc}
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008470:	2200      	movs	r2, #0
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008472:	2008      	movs	r0, #8
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008474:	2180      	movs	r1, #128	; 0x80
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008476:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800847a:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800847e:	65e0      	str	r0, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008480:	f242 500a 	movw	r0, #9482	; 0x250a
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008484:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008488:	2102      	movs	r1, #2
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800848a:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
 800848e:	f8c4 206b 	str.w	r2, [r4, #107]	; 0x6b
 8008492:	f8c4 206f 	str.w	r2, [r4, #111]	; 0x6f
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008496:	f104 0210 	add.w	r2, r4, #16
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800849a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
}
 800849e:	4618      	mov	r0, r3
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80084a0:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80084a4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 80084a8:	bd38      	pop	{r3, r4, r5, pc}
 80084aa:	bf00      	nop

080084ac <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, uint8_t lun,
                                          SCSI_StdInquiryDataTypeDef *inquiry)
{
 80084ac:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ae:	f8d0 4278 	ldr.w	r4, [r0, #632]	; 0x278
 80084b2:	69e4      	ldr	r4, [r4, #28]

  switch(MSC_Handle->hbot.cmd_state)
 80084b4:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80084b8:	2d01      	cmp	r5, #1
 80084ba:	d00b      	beq.n	80084d4 <USBH_MSC_SCSI_Inquiry+0x28>
 80084bc:	2d02      	cmp	r5, #2
 80084be:	d106      	bne.n	80084ce <USBH_MSC_SCSI_Inquiry+0x22>
    error = USBH_BUSY;
    break;

  case BOT_CMD_WAIT:

    error = USBH_MSC_BOT_Process(phost, lun);
 80084c0:	4616      	mov	r6, r2
 80084c2:	f7ff fe85 	bl	80081d0 <USBH_MSC_BOT_Process>

    if(error == USBH_OK)
 80084c6:	4605      	mov	r5, r0
 80084c8:	b320      	cbz	r0, 8008514 <USBH_MSC_SCSI_Inquiry+0x68>
  default:
    break;
  }

  return error;
}
 80084ca:	4628      	mov	r0, r5
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
  switch(MSC_Handle->hbot.cmd_state)
 80084ce:	2502      	movs	r5, #2
}
 80084d0:	4628      	mov	r0, r5
 80084d2:	bd70      	pop	{r4, r5, r6, pc}
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80084d4:	2300      	movs	r3, #0
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80084d6:	0149      	lsls	r1, r1, #5
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80084d8:	2224      	movs	r2, #36	; 0x24
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80084da:	2080      	movs	r0, #128	; 0x80
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80084dc:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 80084e0:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80084e4:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80084e8:	f241 230a 	movw	r3, #4618	; 0x120a
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80084ec:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80084f0:	2102      	movs	r1, #2
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80084f2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80084f6:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80084fa:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
}
 80084fe:	4628      	mov	r0, r5
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008500:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008502:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008506:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800850a:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800850e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8008512:	bd70      	pop	{r4, r5, r6, pc}
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008514:	2222      	movs	r2, #34	; 0x22
 8008516:	4601      	mov	r1, r0
 8008518:	4630      	mov	r0, r6
 800851a:	f016 fe1b 	bl	801f154 <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800851e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008522:	781a      	ldrb	r2, [r3, #0]
 8008524:	f002 021f 	and.w	r2, r2, #31
 8008528:	7072      	strb	r2, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800852a:	781a      	ldrb	r2, [r3, #0]
 800852c:	0952      	lsrs	r2, r2, #5
 800852e:	7032      	strb	r2, [r6, #0]
      if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008530:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8008534:	2a00      	cmp	r2, #0
 8008536:	da01      	bge.n	800853c <USBH_MSC_SCSI_Inquiry+0x90>
        inquiry->RemovableMedia = 1U;
 8008538:	2201      	movs	r2, #1
 800853a:	70b2      	strb	r2, [r6, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f8c6 2003 	str.w	r2, [r6, #3]
 8008544:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008548:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800854c:	6918      	ldr	r0, [r3, #16]
 800854e:	6959      	ldr	r1, [r3, #20]
 8008550:	699a      	ldr	r2, [r3, #24]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	60f0      	str	r0, [r6, #12]
}
 8008556:	4628      	mov	r0, r5
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008558:	6131      	str	r1, [r6, #16]
 800855a:	6172      	str	r2, [r6, #20]
 800855c:	61b3      	str	r3, [r6, #24]
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800855e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	f8c6 301d 	str.w	r3, [r6, #29]
}
 8008568:	bd70      	pop	{r4, r5, r6, pc}
 800856a:	bf00      	nop

0800856c <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_SenseTypeDef *sense_data)
{
 800856c:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800856e:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
 8008572:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8008574:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8008578:	2b01      	cmp	r3, #1
 800857a:	d015      	beq.n	80085a8 <USBH_MSC_SCSI_RequestSense+0x3c>
 800857c:	2b02      	cmp	r3, #2
 800857e:	d110      	bne.n	80085a2 <USBH_MSC_SCSI_RequestSense+0x36>
    error = USBH_BUSY;
    break;

  case BOT_CMD_WAIT:

    error = USBH_MSC_BOT_Process(phost, lun);
 8008580:	4615      	mov	r5, r2
 8008582:	f7ff fe25 	bl	80081d0 <USBH_MSC_BOT_Process>

    if(error == USBH_OK)
 8008586:	4603      	mov	r3, r0
 8008588:	b948      	cbnz	r0, 800859e <USBH_MSC_SCSI_RequestSense+0x32>
    {
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800858a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800858e:	7891      	ldrb	r1, [r2, #2]
 8008590:	f001 010f 	and.w	r1, r1, #15
 8008594:	7029      	strb	r1, [r5, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008596:	7b11      	ldrb	r1, [r2, #12]
 8008598:	7069      	strb	r1, [r5, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800859a:	7b52      	ldrb	r2, [r2, #13]
 800859c:	70aa      	strb	r2, [r5, #2]
  default:
    break;
  }

  return error;
}
 800859e:	4618      	mov	r0, r3
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
  switch(MSC_Handle->hbot.cmd_state)
 80085a2:	2302      	movs	r3, #2
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80085a8:	2280      	movs	r2, #128	; 0x80
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80085aa:	0149      	lsls	r1, r1, #5
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80085ac:	200e      	movs	r0, #14
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085ae:	2502      	movs	r5, #2
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80085b0:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80085b4:	2200      	movs	r2, #0
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80085b6:	65e0      	str	r0, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80085b8:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
 80085bc:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80085c0:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80085c4:	f240 310a 	movw	r1, #778	; 0x30a
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80085c8:	f8c4 206b 	str.w	r2, [r4, #107]	; 0x6b
 80085cc:	f8c4 206f 	str.w	r2, [r4, #111]	; 0x6f
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80085d0:	f104 0210 	add.w	r2, r4, #16
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80085d4:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
}
 80085d8:	4618      	mov	r0, r3
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085da:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085de:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80085e2:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80085e6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 80085ea:	bd38      	pop	{r3, r4, r5, pc}

080085ec <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80085ec:	b430      	push	{r4, r5}
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085ee:	f8d0 4278 	ldr.w	r4, [r0, #632]	; 0x278
{
 80085f2:	9d02      	ldr	r5, [sp, #8]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085f4:	69e4      	ldr	r4, [r4, #28]

  switch(MSC_Handle->hbot.cmd_state)
 80085f6:	f894 c052 	ldrb.w	ip, [r4, #82]	; 0x52
 80085fa:	f1bc 0f01 	cmp.w	ip, #1
 80085fe:	d00a      	beq.n	8008616 <USBH_MSC_SCSI_Write+0x2a>
 8008600:	f1bc 0f02 	cmp.w	ip, #2
 8008604:	d102      	bne.n	800860c <USBH_MSC_SCSI_Write+0x20>
  default:
    break;
  }

  return error;
}
 8008606:	bc30      	pop	{r4, r5}
    error = USBH_MSC_BOT_Process(phost, lun);
 8008608:	f7ff bde2 	b.w	80081d0 <USBH_MSC_BOT_Process>
  switch(MSC_Handle->hbot.cmd_state)
 800860c:	f04f 0c02 	mov.w	ip, #2
}
 8008610:	bc30      	pop	{r4, r5}
 8008612:	4660      	mov	r0, ip
 8008614:	4770      	bx	lr
    MSC_Handle->hbot.pbuf = pbuf;
 8008616:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800861a:	2102      	movs	r1, #2
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800861c:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
}
 8008620:	4660      	mov	r0, ip
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008622:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8008626:	f3c2 6107 	ubfx	r1, r2, #24, #8
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800862a:	fb05 f303 	mul.w	r3, r5, r3
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800862e:	ba6d      	rev16	r5, r5
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008630:	f884 c050 	strb.w	ip, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008634:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008636:	2300      	movs	r3, #0
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008638:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 800863c:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8008640:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008644:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008648:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800864c:	f642 230a 	movw	r3, #10762	; 0x2a0a
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 8008650:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008654:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8008658:	f3c2 4307 	ubfx	r3, r2, #16, #8
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 800865c:	f3c2 2207 	ubfx	r2, r2, #8, #8
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008660:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8008664:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8008668:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 800866c:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
}
 8008670:	bc30      	pop	{r4, r5}
 8008672:	4770      	bx	lr

08008674 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8008674:	b430      	push	{r4, r5}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008676:	f8d0 4278 	ldr.w	r4, [r0, #632]	; 0x278
{
 800867a:	9d02      	ldr	r5, [sp, #8]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800867c:	69e4      	ldr	r4, [r4, #28]

  switch(MSC_Handle->hbot.cmd_state)
 800867e:	f894 c052 	ldrb.w	ip, [r4, #82]	; 0x52
 8008682:	f1bc 0f01 	cmp.w	ip, #1
 8008686:	d00a      	beq.n	800869e <USBH_MSC_SCSI_Read+0x2a>
 8008688:	f1bc 0f02 	cmp.w	ip, #2
 800868c:	d102      	bne.n	8008694 <USBH_MSC_SCSI_Read+0x20>
  default:
    break;
  }

  return error;
}
 800868e:	bc30      	pop	{r4, r5}
    error = USBH_MSC_BOT_Process(phost, lun);
 8008690:	f7ff bd9e 	b.w	80081d0 <USBH_MSC_BOT_Process>
  switch(MSC_Handle->hbot.cmd_state)
 8008694:	f04f 0c02 	mov.w	ip, #2
}
 8008698:	bc30      	pop	{r4, r5}
 800869a:	4660      	mov	r0, ip
 800869c:	4770      	bx	lr
    MSC_Handle->hbot.pbuf = pbuf;
 800869e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80086a2:	2102      	movs	r1, #2
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80086a4:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
}
 80086a8:	4660      	mov	r0, ip
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80086aa:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 80086ae:	f3c2 6107 	ubfx	r1, r2, #24, #8
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80086b2:	fb05 f303 	mul.w	r3, r5, r3
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80086b6:	ba6d      	rev16	r5, r5
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80086b8:	f884 c050 	strb.w	ip, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80086bc:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80086be:	2380      	movs	r3, #128	; 0x80
 80086c0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80086c4:	2300      	movs	r3, #0
 80086c6:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 80086ca:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80086ce:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 80086d2:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80086d6:	f642 030a 	movw	r3, #10250	; 0x280a
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 80086da:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80086de:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 80086e2:	f3c2 4307 	ubfx	r3, r2, #16, #8
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 80086e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80086ea:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 80086ee:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 80086f2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 80086f6:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
}
 80086fa:	bc30      	pop	{r4, r5}
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop

08008700 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8008700:	b350      	cbz	r0, 8008758 <USBH_Init+0x58>
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
  }

  /* Set DRiver ID */
  phost->id = id;
 8008702:	4613      	mov	r3, r2
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8008704:	223c      	movs	r2, #60	; 0x3c
{
 8008706:	b570      	push	{r4, r5, r6, lr}
  phost->pActiveClass = NULL;
 8008708:	2500      	movs	r5, #0
 800870a:	4604      	mov	r4, r0
  phost->id = id;
 800870c:	f880 32c0 	strb.w	r3, [r0, #704]	; 0x2c0
  phost->pActiveClass = NULL;
 8008710:	460e      	mov	r6, r1
    phost->Pipes[i] = 0U;
 8008712:	4629      	mov	r1, r5
  phost->ClassNumber = 0U;
 8008714:	e9c0 559e 	strd	r5, r5, [r0, #632]	; 0x278
    phost->Pipes[i] = 0U;
 8008718:	f500 7020 	add.w	r0, r0, #640	; 0x280
 800871c:	f016 fd1a 	bl	801f154 <memset>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8008720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008724:	4629      	mov	r1, r5
 8008726:	f104 001c 	add.w	r0, r4, #28
 800872a:	f016 fd13 	bl	801f154 <memset>
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800872e:	2240      	movs	r2, #64	; 0x40
  phost->EnumState = ENUM_IDLE;
 8008730:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->gState = HOST_IDLE;
 8008734:	7025      	strb	r5, [r4, #0]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008736:	71a2      	strb	r2, [r4, #6]
  phost->Control.state = CTRL_SETUP;
 8008738:	2201      	movs	r2, #1
  phost->EnumState = ENUM_IDLE;
 800873a:	f8a4 3001 	strh.w	r3, [r4, #1]
  phost->Timer = 0U;
 800873e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008742:	f8a4 321c 	strh.w	r3, [r4, #540]	; 0x21c
  phost->Control.state = CTRL_SETUP;
 8008746:	8322      	strh	r2, [r4, #24]
  if(pUsrFunc != NULL)
 8008748:	b10e      	cbz	r6, 800874e <USBH_Init+0x4e>
    phost->pUser = pUsrFunc;
 800874a:	f8c4 62c8 	str.w	r6, [r4, #712]	; 0x2c8
  USBH_LL_Init(phost);
 800874e:	4620      	mov	r0, r4
 8008750:	f015 f9de 	bl	801db10 <USBH_LL_Init>
  return USBH_OK;
 8008754:	2000      	movs	r0, #0
}
 8008756:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8008758:	2002      	movs	r0, #2
}
 800875a:	4770      	bx	lr

0800875c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800875c:	4603      	mov	r3, r0
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 800875e:	b141      	cbz	r1, 8008772 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008760:	f8d0 027c 	ldr.w	r0, [r0, #636]	; 0x27c
 8008764:	b928      	cbnz	r0, 8008772 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008766:	2201      	movs	r2, #1
 8008768:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
 800876c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8008770:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008772:	2002      	movs	r0, #2
  }

  return status;
}
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop

08008778 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8008778:	f890 2238 	ldrb.w	r2, [r0, #568]	; 0x238
{
 800877c:	4603      	mov	r3, r0
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800877e:	428a      	cmp	r2, r1
 8008780:	d903      	bls.n	800878a <USBH_SelectInterface+0x12>
  USBH_StatusTypeDef   status = USBH_OK;
 8008782:	2000      	movs	r0, #0
  {
    phost->device.current_interface = interface;
 8008784:	f883 1220 	strb.w	r1, [r3, #544]	; 0x220
    USBH_UsrLog ("Switching to Interface (#%d)", interface);
    USBH_UsrLog ("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass );
    USBH_UsrLog ("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass );
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
 8008788:	4770      	bx	lr
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800878a:	2002      	movs	r0, #2
  }
  return status;
}
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop

08008790 <USBH_FindInterface>:
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8008790:	f890 c243 	ldrb.w	ip, [r0, #579]	; 0x243
{
 8008794:	b410      	push	{r4}
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8008796:	f1a1 04ff 	sub.w	r4, r1, #255	; 0xff
 800879a:	458c      	cmp	ip, r1
 800879c:	fab4 f484 	clz	r4, r4
 80087a0:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80087a4:	d009      	beq.n	80087ba <USBH_FindInterface+0x2a>
 80087a6:	b944      	cbnz	r4, 80087ba <USBH_FindInterface+0x2a>
 80087a8:	f890 c25d 	ldrb.w	ip, [r0, #605]	; 0x25d
 80087ac:	458c      	cmp	ip, r1
 80087ae:	d012      	beq.n	80087d6 <USBH_FindInterface+0x46>
 80087b0:	b98c      	cbnz	r4, 80087d6 <USBH_FindInterface+0x46>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 80087b2:	20ff      	movs	r0, #255	; 0xff
}
 80087b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087b8:	4770      	bx	lr
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80087ba:	f890 c244 	ldrb.w	ip, [r0, #580]	; 0x244
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80087be:	4594      	cmp	ip, r2
 80087c0:	d001      	beq.n	80087c6 <USBH_FindInterface+0x36>
 80087c2:	2aff      	cmp	r2, #255	; 0xff
 80087c4:	d1f0      	bne.n	80087a8 <USBH_FindInterface+0x18>
 80087c6:	f890 c245 	ldrb.w	ip, [r0, #581]	; 0x245
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087ca:	459c      	cmp	ip, r3
 80087cc:	d001      	beq.n	80087d2 <USBH_FindInterface+0x42>
 80087ce:	2bff      	cmp	r3, #255	; 0xff
 80087d0:	d1ea      	bne.n	80087a8 <USBH_FindInterface+0x18>
  uint8_t                        if_ix = 0U;
 80087d2:	2000      	movs	r0, #0
 80087d4:	e7ee      	b.n	80087b4 <USBH_FindInterface+0x24>
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80087d6:	f890 125e 	ldrb.w	r1, [r0, #606]	; 0x25e
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80087da:	4291      	cmp	r1, r2
 80087dc:	d001      	beq.n	80087e2 <USBH_FindInterface+0x52>
 80087de:	2aff      	cmp	r2, #255	; 0xff
 80087e0:	d1e7      	bne.n	80087b2 <USBH_FindInterface+0x22>
 80087e2:	f890 225f 	ldrb.w	r2, [r0, #607]	; 0x25f
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d001      	beq.n	80087ee <USBH_FindInterface+0x5e>
 80087ea:	2bff      	cmp	r3, #255	; 0xff
 80087ec:	d1e1      	bne.n	80087b2 <USBH_FindInterface+0x22>
    if_ix++;
 80087ee:	2001      	movs	r0, #1
 80087f0:	e7e0      	b.n	80087b4 <USBH_FindInterface+0x24>
 80087f2:	bf00      	nop

080087f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80087f4:	b510      	push	{r4, lr}
 80087f6:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80087f8:	f015 f9e8 	bl	801dbcc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80087fc:	2101      	movs	r1, #1
 80087fe:	4620      	mov	r0, r4
 8008800:	f015 fa64 	bl	801dccc <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8008804:	2000      	movs	r0, #0
 8008806:	bd10      	pop	{r4, pc}

08008808 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008808:	b530      	push	{r4, r5, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800880a:	2302      	movs	r3, #2
{
 800880c:	b087      	sub	sp, #28
 800880e:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008810:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8008814:	f890 321f 	ldrb.w	r3, [r0, #543]	; 0x21f
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8008818:	2b00      	cmp	r3, #0
 800881a:	d14a      	bne.n	80088b2 <USBH_Process+0xaa>
 800881c:	7803      	ldrb	r3, [r0, #0]
 800881e:	b123      	cbz	r3, 800882a <USBH_Process+0x22>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8008820:	7803      	ldrb	r3, [r0, #0]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d001      	beq.n	800882a <USBH_Process+0x22>
      phost->gState = HOST_DEV_DISCONNECTED;
 8008826:	2303      	movs	r3, #3
 8008828:	7003      	strb	r3, [r0, #0]
  switch (phost->gState)
 800882a:	7823      	ldrb	r3, [r4, #0]
 800882c:	2b0b      	cmp	r3, #11
 800882e:	d83d      	bhi.n	80088ac <USBH_Process+0xa4>
 8008830:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008834:	003c005e 	.word	0x003c005e
 8008838:	006b000c 	.word	0x006b000c
 800883c:	0090003c 	.word	0x0090003c
 8008840:	00a90099 	.word	0x00a90099
 8008844:	00bd00b3 	.word	0x00bd00b3
 8008848:	00e200c5 	.word	0x00e200c5
    USBH_Delay(100U);
 800884c:	2064      	movs	r0, #100	; 0x64
    USBH_OpenPipe (phost,
 800884e:	2500      	movs	r5, #0
    USBH_Delay(100U);
 8008850:	f015 fa7a 	bl	801dd48 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8008854:	4620      	mov	r0, r4
 8008856:	f015 f9d5 	bl	801dc04 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800885a:	2305      	movs	r3, #5
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800885c:	4629      	mov	r1, r5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800885e:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
    phost->gState = HOST_ENUMERATION;
 8008862:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8008864:	4620      	mov	r0, r4
 8008866:	f001 f8f3 	bl	8009a50 <USBH_AllocPipe>
 800886a:	4603      	mov	r3, r0
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800886c:	2180      	movs	r1, #128	; 0x80
 800886e:	4620      	mov	r0, r4
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8008870:	7163      	strb	r3, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8008872:	f001 f8ed 	bl	8009a50 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8008876:	79a2      	ldrb	r2, [r4, #6]
 8008878:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800887c:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 800887e:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	2280      	movs	r2, #128	; 0x80
 8008886:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800888a:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe (phost,
 800888c:	4620      	mov	r0, r4
 800888e:	f001 f8c9 	bl	8009a24 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8008892:	79a2      	ldrb	r2, [r4, #6]
 8008894:	f894 121d 	ldrb.w	r1, [r4, #541]	; 0x21d
 8008898:	4620      	mov	r0, r4
 800889a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800889e:	9100      	str	r1, [sp, #0]
 80088a0:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80088a4:	462a      	mov	r2, r5
 80088a6:	7961      	ldrb	r1, [r4, #5]
 80088a8:	f001 f8bc 	bl	8009a24 <USBH_OpenPipe>
}
 80088ac:	2000      	movs	r0, #0
 80088ae:	b007      	add	sp, #28
 80088b0:	bd30      	pop	{r4, r5, pc}
  switch (phost->gState)
 80088b2:	7802      	ldrb	r2, [r0, #0]
 80088b4:	2a0b      	cmp	r2, #11
 80088b6:	d8f9      	bhi.n	80088ac <USBH_Process+0xa4>
 80088b8:	a101      	add	r1, pc, #4	; (adr r1, 80088c0 <USBH_Process+0xb8>)
 80088ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088f1 	.word	0x080088f1
 80088c4:	08008a11 	.word	0x08008a11
 80088c8:	0800884d 	.word	0x0800884d
 80088cc:	0800890b 	.word	0x0800890b
 80088d0:	080088ad 	.word	0x080088ad
 80088d4:	08008955 	.word	0x08008955
 80088d8:	08008967 	.word	0x08008967
 80088dc:	08008987 	.word	0x08008987
 80088e0:	0800899b 	.word	0x0800899b
 80088e4:	080089af 	.word	0x080089af
 80088e8:	080089bf 	.word	0x080089bf
 80088ec:	080089f9 	.word	0x080089f9
    if (phost->device.is_connected)
 80088f0:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0d9      	beq.n	80088ac <USBH_Process+0xa4>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80088f8:	2301      	movs	r3, #1
      USBH_Delay(200U);
 80088fa:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80088fc:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 80088fe:	f015 fa23 	bl	801dd48 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8008902:	4620      	mov	r0, r4
 8008904:	f015 f988 	bl	801dc18 <USBH_LL_ResetPort>
 8008908:	e7d0      	b.n	80088ac <USBH_Process+0xa4>
    phost->Pipes[i] = 0U;
 800890a:	2100      	movs	r1, #0
 800890c:	223c      	movs	r2, #60	; 0x3c
 800890e:	f504 7020 	add.w	r0, r4, #640	; 0x280
  phost->gState = HOST_IDLE;
 8008912:	460d      	mov	r5, r1
    phost->Pipes[i] = 0U;
 8008914:	f016 fc1e 	bl	801f154 <memset>
    phost->device.Data[i] = 0U;
 8008918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800891c:	f104 001c 	add.w	r0, r4, #28
 8008920:	4629      	mov	r1, r5
 8008922:	f016 fc17 	bl	801f154 <memset>
  phost->Control.state = CTRL_SETUP;
 8008926:	2201      	movs	r2, #1
  phost->EnumState = ENUM_IDLE;
 8008928:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800892c:	2140      	movs	r1, #64	; 0x40
  phost->Control.state = CTRL_SETUP;
 800892e:	8322      	strh	r2, [r4, #24]
    if(phost->pActiveClass != NULL)
 8008930:	f8d4 2278 	ldr.w	r2, [r4, #632]	; 0x278
  phost->gState = HOST_IDLE;
 8008934:	7025      	strb	r5, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 8008936:	f8a4 3001 	strh.w	r3, [r4, #1]
  phost->Timer = 0U;
 800893a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800893e:	71a1      	strb	r1, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008940:	f8a4 321c 	strh.w	r3, [r4, #540]	; 0x21c
    if(phost->pActiveClass != NULL)
 8008944:	2a00      	cmp	r2, #0
 8008946:	d0b1      	beq.n	80088ac <USBH_Process+0xa4>
      phost->pActiveClass->DeInit(phost);
 8008948:	68d3      	ldr	r3, [r2, #12]
 800894a:	4620      	mov	r0, r4
 800894c:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800894e:	f8c4 5278 	str.w	r5, [r4, #632]	; 0x278
 8008952:	e7ab      	b.n	80088ac <USBH_Process+0xa4>
  switch (phost->EnumState)
 8008954:	7863      	ldrb	r3, [r4, #1]
 8008956:	2b07      	cmp	r3, #7
 8008958:	d8a8      	bhi.n	80088ac <USBH_Process+0xa4>
 800895a:	e8df f003 	tbb	[pc, r3]
 800895e:	9a5f      	.short	0x9a5f
 8008960:	aab0bb84 	.word	0xaab0bb84
 8008964:	76a4      	.short	0x76a4
    if(phost->pActiveClass != NULL)
 8008966:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 800896a:	2b00      	cmp	r3, #0
 800896c:	d04d      	beq.n	8008a0a <USBH_Process+0x202>
      status = phost->pActiveClass->Requests(phost);
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	4620      	mov	r0, r4
 8008972:	4798      	blx	r3
 8008974:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8008978:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d195      	bne.n	80088ac <USBH_Process+0xa4>
        phost->gState  = HOST_CLASS;
 8008980:	230b      	movs	r3, #11
 8008982:	7023      	strb	r3, [r4, #0]
 8008984:	e792      	b.n	80088ac <USBH_Process+0xa4>
      if(phost->pUser != NULL)
 8008986:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d08e      	beq.n	80088ac <USBH_Process+0xa4>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800898e:	2101      	movs	r1, #1
 8008990:	4620      	mov	r0, r4
 8008992:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008994:	2308      	movs	r3, #8
 8008996:	7023      	strb	r3, [r4, #0]
 8008998:	e788      	b.n	80088ac <USBH_Process+0xa4>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800899a:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 fc82 	bl	80092a8 <USBH_SetCfg>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d181      	bne.n	80088ac <USBH_Process+0xa4>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80089a8:	2309      	movs	r3, #9
 80089aa:	7023      	strb	r3, [r4, #0]
 80089ac:	e77e      	b.n	80088ac <USBH_Process+0xa4>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80089ae:	f894 323b 	ldrb.w	r3, [r4, #571]	; 0x23b
 80089b2:	069b      	lsls	r3, r3, #26
 80089b4:	f100 8098 	bmi.w	8008ae8 <USBH_Process+0x2e0>
      phost->gState  = HOST_CHECK_CLASS;
 80089b8:	230a      	movs	r3, #10
 80089ba:	7023      	strb	r3, [r4, #0]
 80089bc:	e776      	b.n	80088ac <USBH_Process+0xa4>
    if(phost->ClassNumber == 0U)
 80089be:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f43f af72 	beq.w	80088ac <USBH_Process+0xa4>
      phost->pActiveClass = NULL;
 80089c8:	2100      	movs	r1, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80089ca:	f8d4 3274 	ldr.w	r3, [r4, #628]	; 0x274
 80089ce:	f894 2243 	ldrb.w	r2, [r4, #579]	; 0x243
      phost->pActiveClass = NULL;
 80089d2:	f8c4 1278 	str.w	r1, [r4, #632]	; 0x278
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80089d6:	7919      	ldrb	r1, [r3, #4]
 80089d8:	4291      	cmp	r1, r2
 80089da:	d116      	bne.n	8008a0a <USBH_Process+0x202>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	4620      	mov	r0, r4
          phost->pActiveClass = phost->pClass[idx];
 80089e0:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80089e4:	4790      	blx	r2
 80089e6:	b980      	cbnz	r0, 8008a0a <USBH_Process+0x202>
          phost->gState  = HOST_CLASS_REQUEST;
 80089e8:	2206      	movs	r2, #6
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80089ea:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
 80089ee:	2103      	movs	r1, #3
 80089f0:	4620      	mov	r0, r4
          phost->gState  = HOST_CLASS_REQUEST;
 80089f2:	7022      	strb	r2, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80089f4:	4798      	blx	r3
 80089f6:	e759      	b.n	80088ac <USBH_Process+0xa4>
    if(phost->pActiveClass != NULL)
 80089f8:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f43f af55 	beq.w	80088ac <USBH_Process+0xa4>
      phost->pActiveClass->BgndProcess(phost);
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	4620      	mov	r0, r4
 8008a06:	4798      	blx	r3
 8008a08:	e750      	b.n	80088ac <USBH_Process+0xa4>
        phost->gState  = HOST_ABORT_STATE;
 8008a0a:	230d      	movs	r3, #13
 8008a0c:	7023      	strb	r3, [r4, #0]
 8008a0e:	e74d      	b.n	80088ac <USBH_Process+0xa4>
    if (phost->device.PortEnabled == 1U)
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	f47f af4b 	bne.w	80088ac <USBH_Process+0xa4>
      phost->gState = HOST_DEV_ATTACHED;
 8008a16:	2302      	movs	r3, #2
 8008a18:	7003      	strb	r3, [r0, #0]
 8008a1a:	e747      	b.n	80088ac <USBH_Process+0xa4>
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8008a1c:	2108      	movs	r1, #8
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f000 f99c 	bl	8008d5c <USBH_Get_DevDesc>
 8008a24:	4605      	mov	r5, r0
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f47f af40 	bne.w	80088ac <USBH_Process+0xa4>
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008a2c:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008a30:	2101      	movs	r1, #1
      USBH_OpenPipe (phost,
 8008a32:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 8008a36:	9001      	str	r0, [sp, #4]
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008a38:	71a3      	strb	r3, [r4, #6]
      USBH_OpenPipe (phost,
 8008a3a:	9302      	str	r3, [sp, #8]
 8008a3c:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008a40:	7061      	strb	r1, [r4, #1]
      USBH_OpenPipe (phost,
 8008a42:	9200      	str	r2, [sp, #0]
 8008a44:	2280      	movs	r2, #128	; 0x80
 8008a46:	7921      	ldrb	r1, [r4, #4]
 8008a48:	e720      	b.n	800888c <USBH_Process+0x84>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8008a4a:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d152      	bne.n	8008af8 <USBH_Process+0x2f0>
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8008a52:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
      phost->device.current_interface = 0U;
 8008a56:	2200      	movs	r2, #0
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8008a58:	2b01      	cmp	r3, #1
      phost->device.current_interface = 0U;
 8008a5a:	f884 2220 	strb.w	r2, [r4, #544]	; 0x220
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8008a5e:	d099      	beq.n	8008994 <USBH_Process+0x18c>
        phost->gState  = HOST_INPUT;
 8008a60:	2307      	movs	r3, #7
 8008a62:	7023      	strb	r3, [r4, #0]
 8008a64:	e722      	b.n	80088ac <USBH_Process+0xa4>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8008a66:	2101      	movs	r1, #1
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 fb45 	bl	80090f8 <USBH_SetAddress>
 8008a6e:	4605      	mov	r5, r0
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f47f af1b 	bne.w	80088ac <USBH_Process+0xa4>
      USBH_Delay(2U);
 8008a76:	2002      	movs	r0, #2
 8008a78:	f015 f966 	bl	801dd48 <USBH_Delay>
      USBH_OpenPipe (phost,
 8008a7c:	79a0      	ldrb	r0, [r4, #6]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8008a7e:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8008a80:	2103      	movs	r1, #3
      USBH_OpenPipe (phost,
 8008a82:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 8008a86:	9002      	str	r0, [sp, #8]
      phost->EnumState = ENUM_GET_CFG_DESC;
 8008a88:	7061      	strb	r1, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8008a8a:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
      USBH_OpenPipe (phost,
 8008a8e:	9501      	str	r5, [sp, #4]
 8008a90:	e7d7      	b.n	8008a42 <USBH_Process+0x23a>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8008a92:	2112      	movs	r1, #18
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 f961 	bl	8008d5c <USBH_Get_DevDesc>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	f47f af06 	bne.w	80088ac <USBH_Process+0xa4>
      phost->EnumState = ENUM_SET_ADDR;
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	7063      	strb	r3, [r4, #1]
  return Status;
 8008aa4:	e702      	b.n	80088ac <USBH_Process+0xa4>
    if (phost->device.DevDesc.iProduct != 0U)
 8008aa6:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
 8008aaa:	bb71      	cbnz	r1, 8008b0a <USBH_Process+0x302>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008aac:	2307      	movs	r3, #7
 8008aae:	7063      	strb	r3, [r4, #1]
  return Status;
 8008ab0:	e6fc      	b.n	80088ac <USBH_Process+0xa4>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8008ab2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
 8008ab6:	bb91      	cbnz	r1, 8008b1e <USBH_Process+0x316>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ab8:	2306      	movs	r3, #6
 8008aba:	7063      	strb	r3, [r4, #1]
  return Status;
 8008abc:	e6f6      	b.n	80088ac <USBH_Process+0xa4>
    if (USBH_Get_CfgDesc(phost,
 8008abe:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 fa3e 	bl	8008f44 <USBH_Get_CfgDesc>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f47f aeef 	bne.w	80088ac <USBH_Process+0xa4>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008ace:	2305      	movs	r3, #5
 8008ad0:	7063      	strb	r3, [r4, #1]
  return Status;
 8008ad2:	e6eb      	b.n	80088ac <USBH_Process+0xa4>
    if ( USBH_Get_CfgDesc(phost,
 8008ad4:	2109      	movs	r1, #9
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 fa34 	bl	8008f44 <USBH_Get_CfgDesc>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f47f aee5 	bne.w	80088ac <USBH_Process+0xa4>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008ae2:	2304      	movs	r3, #4
 8008ae4:	7063      	strb	r3, [r4, #1]
  return Status;
 8008ae6:	e6e1      	b.n	80088ac <USBH_Process+0xa4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008ae8:	2101      	movs	r1, #1
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fcb4 	bl	8009458 <USBH_SetFeature>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	f47f aedb 	bne.w	80088ac <USBH_Process+0xa4>
 8008af6:	e75f      	b.n	80089b8 <USBH_Process+0x1b0>
      if ( USBH_Get_StringDesc(phost,
 8008af8:	23ff      	movs	r3, #255	; 0xff
 8008afa:	f104 021c 	add.w	r2, r4, #28
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 fabe 	bl	8009080 <USBH_Get_StringDesc>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d0a4      	beq.n	8008a52 <USBH_Process+0x24a>
 8008b08:	e6d0      	b.n	80088ac <USBH_Process+0xa4>
      if ( USBH_Get_StringDesc(phost,
 8008b0a:	23ff      	movs	r3, #255	; 0xff
 8008b0c:	f104 021c 	add.w	r2, r4, #28
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fab5 	bl	8009080 <USBH_Get_StringDesc>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f47f aec8 	bne.w	80088ac <USBH_Process+0xa4>
 8008b1c:	e7c6      	b.n	8008aac <USBH_Process+0x2a4>
      if ( USBH_Get_StringDesc(phost,
 8008b1e:	23ff      	movs	r3, #255	; 0xff
 8008b20:	f104 021c 	add.w	r2, r4, #28
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 faab 	bl	8009080 <USBH_Get_StringDesc>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	f47f aebe 	bne.w	80088ac <USBH_Process+0xa4>
 8008b30:	e7c2      	b.n	8008ab8 <USBH_Process+0x2b0>
 8008b32:	bf00      	nop

08008b34 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8008b34:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
}
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop

08008b3c <USBH_LL_IncTimer>:
  phost->Timer ++;
 8008b3c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8008b40:	3201      	adds	r2, #1
 8008b42:	f8c0 22bc 	str.w	r2, [r0, #700]	; 0x2bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8008b46:	7802      	ldrb	r2, [r0, #0]
 8008b48:	2a0b      	cmp	r2, #11
 8008b4a:	d000      	beq.n	8008b4e <USBH_LL_IncTimer+0x12>
}
 8008b4c:	4770      	bx	lr
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8008b4e:	f8d0 3278 	ldr.w	r3, [r0, #632]	; 0x278
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0fa      	beq.n	8008b4c <USBH_LL_IncTimer+0x10>
    phost->pActiveClass->SOFProcess(phost);
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	4718      	bx	r3
 8008b5a:	bf00      	nop

08008b5c <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f880 321f 	strb.w	r3, [r0, #543]	; 0x21f
}
 8008b62:	4770      	bx	lr

08008b64 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	f880 321f 	strb.w	r3, [r0, #543]	; 0x21f
}
 8008b6a:	4770      	bx	lr

08008b6c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8008b6c:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8008b6e:	7802      	ldrb	r2, [r0, #0]
 8008b70:	b94a      	cbnz	r2, 8008b86 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;
 8008b72:	2101      	movs	r1, #1

    if(phost->pUser != NULL)
 8008b74:	f8d0 22c8 	ldr.w	r2, [r0, #712]	; 0x2c8
    phost->device.is_connected = 1U;
 8008b78:	f880 121e 	strb.w	r1, [r0, #542]	; 0x21e
    if(phost->pUser != NULL)
 8008b7c:	b10a      	cbz	r2, 8008b82 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8008b7e:	2104      	movs	r1, #4
 8008b80:	4790      	blx	r2
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8008b82:	2000      	movs	r0, #0
 8008b84:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8008b86:	f890 221f 	ldrb.w	r2, [r0, #543]	; 0x21f
 8008b8a:	2a01      	cmp	r2, #1
 8008b8c:	d1f9      	bne.n	8008b82 <USBH_LL_Connect+0x16>
      phost->gState = HOST_DEV_ATTACHED;
 8008b8e:	2202      	movs	r2, #2
 8008b90:	7002      	strb	r2, [r0, #0]
}
 8008b92:	2000      	movs	r0, #0
 8008b94:	bd08      	pop	{r3, pc}
 8008b96:	bf00      	nop

08008b98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8008b9c:	f015 f824 	bl	801dbe8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8008ba0:	7921      	ldrb	r1, [r4, #4]
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 ffa8 	bl	8009af8 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8008ba8:	7961      	ldrb	r1, [r4, #5]
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 ffa4 	bl	8009af8 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8008bb0:	2200      	movs	r2, #0

  if(phost->pUser != NULL)
 8008bb2:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
  phost->device.is_connected = 0U;
 8008bb6:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  if(phost->pUser != NULL)
 8008bba:	b113      	cbz	r3, 8008bc2 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008bbc:	2105      	movs	r1, #5
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f015 f802 	bl	801dbcc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8008bc8:	2303      	movs	r3, #3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8008bca:	2000      	movs	r0, #0
  phost->gState = HOST_DEV_DISCONNECTED;
 8008bcc:	7023      	strb	r3, [r4, #0]
}
 8008bce:	bd10      	pop	{r4, pc}

08008bd0 <USBH_CtlReq.part.0>:
  * @param  req: Setup Request Structure
  * @param  buff: data buffer address to store the response
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
 8008bd0:	b530      	push	{r4, r5, lr}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8008bd2:	7e05      	ldrb	r5, [r0, #24]
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	4604      	mov	r4, r0
  switch (phost->Control.state)
 8008bd8:	1e6b      	subs	r3, r5, #1
 8008bda:	2b0a      	cmp	r3, #10
 8008bdc:	d82d      	bhi.n	8008c3a <USBH_CtlReq.part.0+0x6a>
 8008bde:	e8df f003 	tbb	[pc, r3]
 8008be2:	2117      	.short	0x2117
 8008be4:	81748f30 	.word	0x81748f30
 8008be8:	675a493d 	.word	0x675a493d
 8008bec:	06          	.byte	0x06
 8008bed:	00          	.byte	0x00
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008bee:	7e43      	ldrb	r3, [r0, #25]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	7643      	strb	r3, [r0, #25]
 8008bf8:	f240 8098 	bls.w	8008d2c <USBH_CtlReq.part.0+0x15c>
      phost->Control.state = CTRL_SETUP;
      phost->RequestState = CMD_SEND;
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008bfc:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
 8008c00:	2106      	movs	r1, #6
 8008c02:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	7663      	strb	r3, [r4, #25]
        phost->RequestState = CMD_SEND;
 8008c08:	2301      	movs	r3, #1
        status = USBH_FAIL;
 8008c0a:	2502      	movs	r5, #2
        phost->RequestState = CMD_SEND;
 8008c0c:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8008c0e:	e006      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008c10:	7942      	ldrb	r2, [r0, #5]
 8008c12:	f100 0110 	add.w	r1, r0, #16
 8008c16:	f000 fea1 	bl	800995c <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	7623      	strb	r3, [r4, #24]
}
 8008c1e:	4628      	mov	r0, r5
 8008c20:	b003      	add	sp, #12
 8008c22:	bd30      	pop	{r4, r5, pc}
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c24:	7941      	ldrb	r1, [r0, #5]
 8008c26:	f015 f84d 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8008c2a:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c2c:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 8008c2e:	f000 8088 	beq.w	8008d42 <USBH_CtlReq.part.0+0x172>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008c32:	2804      	cmp	r0, #4
 8008c34:	d045      	beq.n	8008cc2 <USBH_CtlReq.part.0+0xf2>
 8008c36:	2802      	cmp	r0, #2
 8008c38:	d043      	beq.n	8008cc2 <USBH_CtlReq.part.0+0xf2>
  switch (phost->Control.state)
 8008c3a:	2501      	movs	r5, #1
}
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	b003      	add	sp, #12
 8008c40:	bd30      	pop	{r4, r5, pc}
    phost->Control.timer = (uint16_t)phost->Timer;
 8008c42:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c46:	2501      	movs	r5, #1
    USBH_CtlReceiveData(phost,
 8008c48:	7923      	ldrb	r3, [r4, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 8008c4a:	81e0      	strh	r0, [r4, #14]
    USBH_CtlReceiveData(phost,
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	89a2      	ldrh	r2, [r4, #12]
 8008c50:	68a1      	ldr	r1, [r4, #8]
 8008c52:	f000 fead 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c56:	2304      	movs	r3, #4
 8008c58:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8008c5a:	e7e0      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
    USBH_CtlReceiveData (phost,
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	7903      	ldrb	r3, [r0, #4]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008c60:	2501      	movs	r5, #1
    USBH_CtlReceiveData (phost,
 8008c62:	4611      	mov	r1, r2
 8008c64:	f000 fea4 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8008c68:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008c6c:	2308      	movs	r3, #8
    phost->Control.timer = (uint16_t)phost->Timer;
 8008c6e:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008c70:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8008c72:	e7d4      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008c74:	7901      	ldrb	r1, [r0, #4]
 8008c76:	f015 f825 	bl	801dcc4 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8008c7a:	2801      	cmp	r0, #1
 8008c7c:	d04e      	beq.n	8008d1c <USBH_CtlReq.part.0+0x14c>
    else if (URB_Status == USBH_URB_ERROR)
 8008c7e:	2804      	cmp	r0, #4
 8008c80:	d01f      	beq.n	8008cc2 <USBH_CtlReq.part.0+0xf2>
      if(URB_Status == USBH_URB_STALL)
 8008c82:	2805      	cmp	r0, #5
 8008c84:	d1d9      	bne.n	8008c3a <USBH_CtlReq.part.0+0x6a>
      status = USBH_NOT_SUPPORTED;
 8008c86:	2503      	movs	r5, #3
      phost->RequestState = CMD_SEND;
 8008c88:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4628      	mov	r0, r5
      phost->RequestState = CMD_SEND;
 8008c8e:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8008c90:	7623      	strb	r3, [r4, #24]
}
 8008c92:	b003      	add	sp, #12
 8008c94:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 8008c96:	2200      	movs	r2, #0
 8008c98:	2501      	movs	r5, #1
 8008c9a:	7943      	ldrb	r3, [r0, #5]
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	9500      	str	r5, [sp, #0]
 8008ca0:	f000 fe6c 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8008ca4:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ca8:	230a      	movs	r3, #10
     phost->Control.timer = (uint16_t)phost->Timer;
 8008caa:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008cac:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8008cae:	e7b6      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008cb0:	7941      	ldrb	r1, [r0, #5]
 8008cb2:	f015 f807 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8008cb6:	2801      	cmp	r0, #1
 8008cb8:	d030      	beq.n	8008d1c <USBH_CtlReq.part.0+0x14c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008cba:	2802      	cmp	r0, #2
 8008cbc:	d02a      	beq.n	8008d14 <USBH_CtlReq.part.0+0x144>
      if (URB_Status == USBH_URB_ERROR)
 8008cbe:	2804      	cmp	r0, #4
 8008cc0:	d1bb      	bne.n	8008c3a <USBH_CtlReq.part.0+0x6a>
        phost->Control.state = CTRL_ERROR;
 8008cc2:	230b      	movs	r3, #11
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cc4:	2501      	movs	r5, #1
        phost->Control.state = CTRL_ERROR;
 8008cc6:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8008cc8:	e7a9      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
    USBH_CtlSendData (phost,
 8008cca:	2501      	movs	r5, #1
 8008ccc:	7943      	ldrb	r3, [r0, #5]
 8008cce:	8982      	ldrh	r2, [r0, #12]
 8008cd0:	6881      	ldr	r1, [r0, #8]
 8008cd2:	9500      	str	r5, [sp, #0]
 8008cd4:	f000 fe52 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8008cd8:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008cdc:	2306      	movs	r3, #6
     phost->Control.timer = (uint16_t)phost->Timer;
 8008cde:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008ce0:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8008ce2:	e79c      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008ce4:	7941      	ldrb	r1, [r0, #5]
 8008ce6:	f014 ffed 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8008cea:	2801      	cmp	r0, #1
 8008cec:	d025      	beq.n	8008d3a <USBH_CtlReq.part.0+0x16a>
    else if  (URB_Status == USBH_URB_STALL)
 8008cee:	2805      	cmp	r0, #5
 8008cf0:	d0c9      	beq.n	8008c86 <USBH_CtlReq.part.0+0xb6>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008cf2:	2802      	cmp	r0, #2
 8008cf4:	d02b      	beq.n	8008d4e <USBH_CtlReq.part.0+0x17e>
      if (URB_Status == USBH_URB_ERROR)
 8008cf6:	2804      	cmp	r0, #4
 8008cf8:	d19f      	bne.n	8008c3a <USBH_CtlReq.part.0+0x6a>
        phost->Control.state = CTRL_ERROR;
 8008cfa:	230b      	movs	r3, #11
 8008cfc:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8008cfe:	e783      	b.n	8008c08 <USBH_CtlReq.part.0+0x38>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008d00:	7901      	ldrb	r1, [r0, #4]
 8008d02:	f014 ffdf 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8008d06:	2801      	cmp	r0, #1
 8008d08:	d004      	beq.n	8008d14 <USBH_CtlReq.part.0+0x144>
    if  (URB_Status == USBH_URB_STALL)
 8008d0a:	2805      	cmp	r0, #5
 8008d0c:	d1d7      	bne.n	8008cbe <USBH_CtlReq.part.0+0xee>
 8008d0e:	e7ba      	b.n	8008c86 <USBH_CtlReq.part.0+0xb6>
        if (direction == USB_D2H)
 8008d10:	061b      	lsls	r3, r3, #24
 8008d12:	d512      	bpl.n	8008d3a <USBH_CtlReq.part.0+0x16a>
          phost->Control.state = CTRL_STATUS_OUT;
 8008d14:	2309      	movs	r3, #9
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d16:	2501      	movs	r5, #1
          phost->Control.state = CTRL_STATUS_OUT;
 8008d18:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8008d1a:	e780      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
      phost->Control.state =CTRL_IDLE;
 8008d1c:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 8008d1e:	2201      	movs	r2, #1
      status = USBH_OK;
 8008d20:	461d      	mov	r5, r3
      phost->RequestState = CMD_SEND;
 8008d22:	70a2      	strb	r2, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8008d24:	7623      	strb	r3, [r4, #24]
}
 8008d26:	4628      	mov	r0, r5
 8008d28:	b003      	add	sp, #12
 8008d2a:	bd30      	pop	{r4, r5, pc}
      USBH_LL_Stop(phost);
 8008d2c:	f014 ff5c 	bl	801dbe8 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8008d30:	2301      	movs	r3, #1
      phost->RequestState = CMD_SEND;
 8008d32:	461d      	mov	r5, r3
      phost->Control.state = CTRL_SETUP;
 8008d34:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8008d36:	70a3      	strb	r3, [r4, #2]
    if (status == USBH_OK)
 8008d38:	e771      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
          phost->Control.state = CTRL_STATUS_IN;
 8008d3a:	2307      	movs	r3, #7
 8008d3c:	2501      	movs	r5, #1
 8008d3e:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8008d40:	e76d      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
      if (phost->Control.setup.b.wLength.w != 0U)
 8008d42:	8ae2      	ldrh	r2, [r4, #22]
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d44:	7c23      	ldrb	r3, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 8008d46:	2a00      	cmp	r2, #0
 8008d48:	d0e2      	beq.n	8008d10 <USBH_CtlReq.part.0+0x140>
        if (direction == USB_D2H)
 8008d4a:	061a      	lsls	r2, r3, #24
 8008d4c:	d403      	bmi.n	8008d56 <USBH_CtlReq.part.0+0x186>
          phost->Control.state = CTRL_DATA_OUT;
 8008d4e:	2305      	movs	r3, #5
 8008d50:	2501      	movs	r5, #1
 8008d52:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 8008d54:	e763      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>
          phost->Control.state = CTRL_DATA_IN;
 8008d56:	2303      	movs	r3, #3
 8008d58:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 8008d5a:	e760      	b.n	8008c1e <USBH_CtlReq.part.0+0x4e>

08008d5c <USBH_Get_DevDesc>:
{
 8008d5c:	b570      	push	{r4, r5, r6, lr}
  if(phost->RequestState == CMD_SEND)
 8008d5e:	7885      	ldrb	r5, [r0, #2]
{
 8008d60:	b082      	sub	sp, #8
 8008d62:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8008d64:	460e      	mov	r6, r1
  if(phost->RequestState == CMD_SEND)
 8008d66:	2d01      	cmp	r5, #1
 8008d68:	d01d      	beq.n	8008da6 <USBH_Get_DevDesc+0x4a>
  switch (phost->RequestState)
 8008d6a:	2d02      	cmp	r5, #2
 8008d6c:	d117      	bne.n	8008d9e <USBH_Get_DevDesc+0x42>
  switch (phost->Control.state)
 8008d6e:	f890 c018 	ldrb.w	ip, [r0, #24]
 8008d72:	f10c 33ff 	add.w	r3, ip, #4294967295
 8008d76:	2b0a      	cmp	r3, #10
 8008d78:	d811      	bhi.n	8008d9e <USBH_Get_DevDesc+0x42>
 8008d7a:	e8df f003 	tbb	[pc, r3]
 8008d7e:	3a31      	.short	0x3a31
 8008d80:	63560649 	.word	0x63560649
 8008d84:	9b8e7f73 	.word	0x9b8e7f73
 8008d88:	23          	.byte	0x23
 8008d89:	00          	.byte	0x00
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008d8a:	7901      	ldrb	r1, [r0, #4]
 8008d8c:	f014 ff9a 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8008d90:	2801      	cmp	r0, #1
 8008d92:	f000 8097 	beq.w	8008ec4 <USBH_Get_DevDesc+0x168>
    if  (URB_Status == USBH_URB_STALL)
 8008d96:	2805      	cmp	r0, #5
 8008d98:	d079      	beq.n	8008e8e <USBH_Get_DevDesc+0x132>
      if (URB_Status == USBH_URB_ERROR)
 8008d9a:	2804      	cmp	r0, #4
 8008d9c:	d034      	beq.n	8008e08 <USBH_Get_DevDesc+0xac>
  switch (phost->Control.state)
 8008d9e:	2501      	movs	r5, #1
}
 8008da0:	4628      	mov	r0, r5
 8008da2:	b002      	add	sp, #8
 8008da4:	bd70      	pop	{r4, r5, r6, pc}
      phost->Control.setup.b.wIndex.w = 0U;
 8008da6:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008da8:	4965      	ldr	r1, [pc, #404]	; (8008f40 <USBH_Get_DevDesc+0x1e4>)
    phost->RequestState = CMD_WAIT;
 8008daa:	2202      	movs	r2, #2
    phost->Control.setup.b.wLength.w = length;
 8008dac:	82c6      	strh	r6, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0U;
 8008dae:	8283      	strh	r3, [r0, #20]
                                  phost->device.Data,
 8008db0:	f100 031c 	add.w	r3, r0, #28
    phost->Control.length = length;
 8008db4:	8186      	strh	r6, [r0, #12]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008db6:	6101      	str	r1, [r0, #16]
    phost->Control.state = CTRL_SETUP;
 8008db8:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 8008dba:	7082      	strb	r2, [r0, #2]
    phost->Control.buff = buff;
 8008dbc:	6083      	str	r3, [r0, #8]
}
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	b002      	add	sp, #8
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008dc4:	7e43      	ldrb	r3, [r0, #25]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	7643      	strb	r3, [r0, #25]
 8008dce:	f200 809d 	bhi.w	8008f0c <USBH_Get_DevDesc+0x1b0>
      USBH_LL_Stop(phost);
 8008dd2:	f014 ff09 	bl	801dbe8 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8008dd6:	2301      	movs	r3, #1
      phost->RequestState = CMD_SEND;
 8008dd8:	461d      	mov	r5, r3
      phost->Control.state = CTRL_SETUP;
 8008dda:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8008ddc:	70a3      	strb	r3, [r4, #2]
    if (status == USBH_OK)
 8008dde:	e7df      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008de0:	7942      	ldrb	r2, [r0, #5]
 8008de2:	f100 0110 	add.w	r1, r0, #16
    phost->Control.state = CTRL_SETUP_WAIT;
 8008de6:	4665      	mov	r5, ip
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008de8:	f000 fdb8 	bl	800995c <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8008dec:	2302      	movs	r3, #2
 8008dee:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8008df0:	e7d6      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008df2:	7941      	ldrb	r1, [r0, #5]
 8008df4:	f014 ff66 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8008df8:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dfa:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 8008dfc:	f000 8093 	beq.w	8008f26 <USBH_Get_DevDesc+0x1ca>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e00:	2804      	cmp	r0, #4
 8008e02:	d001      	beq.n	8008e08 <USBH_Get_DevDesc+0xac>
 8008e04:	2802      	cmp	r0, #2
 8008e06:	d1ca      	bne.n	8008d9e <USBH_Get_DevDesc+0x42>
        phost->Control.state = CTRL_ERROR;
 8008e08:	230b      	movs	r3, #11
 8008e0a:	2501      	movs	r5, #1
 8008e0c:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8008e0e:	e7c7      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
    phost->Control.timer = (uint16_t)phost->Timer;
 8008e10:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e14:	2501      	movs	r5, #1
    USBH_CtlReceiveData(phost,
 8008e16:	7923      	ldrb	r3, [r4, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 8008e18:	81e0      	strh	r0, [r4, #14]
    USBH_CtlReceiveData(phost,
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	89a2      	ldrh	r2, [r4, #12]
 8008e1e:	68a1      	ldr	r1, [r4, #8]
 8008e20:	f000 fdc6 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e24:	2304      	movs	r3, #4
 8008e26:	7623      	strb	r3, [r4, #24]
  return status;
 8008e28:	e7ba      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
    USBH_CtlSendData (phost,
 8008e2a:	2501      	movs	r5, #1
 8008e2c:	7943      	ldrb	r3, [r0, #5]
 8008e2e:	8982      	ldrh	r2, [r0, #12]
 8008e30:	6881      	ldr	r1, [r0, #8]
 8008e32:	9500      	str	r5, [sp, #0]
 8008e34:	f000 fda2 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8008e38:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e3c:	2306      	movs	r3, #6
     phost->Control.timer = (uint16_t)phost->Timer;
 8008e3e:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e40:	7623      	strb	r3, [r4, #24]
  return status;
 8008e42:	e7ad      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008e44:	7941      	ldrb	r1, [r0, #5]
 8008e46:	f014 ff3d 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8008e4a:	2801      	cmp	r0, #1
 8008e4c:	d067      	beq.n	8008f1e <USBH_Get_DevDesc+0x1c2>
    else if  (URB_Status == USBH_URB_STALL)
 8008e4e:	2805      	cmp	r0, #5
 8008e50:	d01d      	beq.n	8008e8e <USBH_Get_DevDesc+0x132>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008e52:	2802      	cmp	r0, #2
 8008e54:	d06d      	beq.n	8008f32 <USBH_Get_DevDesc+0x1d6>
      if (URB_Status == USBH_URB_ERROR)
 8008e56:	2804      	cmp	r0, #4
 8008e58:	d1a1      	bne.n	8008d9e <USBH_Get_DevDesc+0x42>
        phost->Control.state = CTRL_ERROR;
 8008e5a:	230b      	movs	r3, #11
 8008e5c:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	70a3      	strb	r3, [r4, #2]
  return status;
 8008e62:	e79d      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
    USBH_CtlReceiveData (phost,
 8008e64:	2200      	movs	r2, #0
 8008e66:	7903      	ldrb	r3, [r0, #4]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e68:	2501      	movs	r5, #1
    USBH_CtlReceiveData (phost,
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	f000 fda0 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8008e70:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e74:	2308      	movs	r3, #8
    phost->Control.timer = (uint16_t)phost->Timer;
 8008e76:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e78:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8008e7a:	e791      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008e7c:	7901      	ldrb	r1, [r0, #4]
 8008e7e:	f014 ff21 	bl	801dcc4 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8008e82:	2801      	cmp	r0, #1
 8008e84:	d022      	beq.n	8008ecc <USBH_Get_DevDesc+0x170>
    else if (URB_Status == USBH_URB_ERROR)
 8008e86:	2804      	cmp	r0, #4
 8008e88:	d0be      	beq.n	8008e08 <USBH_Get_DevDesc+0xac>
      if(URB_Status == USBH_URB_STALL)
 8008e8a:	2805      	cmp	r0, #5
 8008e8c:	d187      	bne.n	8008d9e <USBH_Get_DevDesc+0x42>
      phost->RequestState = CMD_SEND;
 8008e8e:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8008e90:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8008e92:	2503      	movs	r5, #3
      phost->RequestState = CMD_SEND;
 8008e94:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8008e96:	7623      	strb	r3, [r4, #24]
  return status;
 8008e98:	e782      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
    USBH_CtlSendData (phost,
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2501      	movs	r5, #1
 8008e9e:	7943      	ldrb	r3, [r0, #5]
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	9500      	str	r5, [sp, #0]
 8008ea4:	f000 fd6a 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8008ea8:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008eac:	230a      	movs	r3, #10
     phost->Control.timer = (uint16_t)phost->Timer;
 8008eae:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008eb0:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8008eb2:	e775      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008eb4:	7941      	ldrb	r1, [r0, #5]
 8008eb6:	f014 ff05 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8008eba:	2801      	cmp	r0, #1
 8008ebc:	d006      	beq.n	8008ecc <USBH_Get_DevDesc+0x170>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008ebe:	2802      	cmp	r0, #2
 8008ec0:	f47f af6b 	bne.w	8008d9a <USBH_Get_DevDesc+0x3e>
          phost->Control.state = CTRL_STATUS_OUT;
 8008ec4:	2309      	movs	r3, #9
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ec6:	2501      	movs	r5, #1
          phost->Control.state = CTRL_STATUS_OUT;
 8008ec8:	7623      	strb	r3, [r4, #24]
  return status;
 8008eca:	e769      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8008ecc:	8be3      	ldrh	r3, [r4, #30]
      phost->RequestState = CMD_SEND;
 8008ece:	2201      	movs	r2, #1
      phost->Control.state =CTRL_IDLE;
 8008ed0:	2500      	movs	r5, #0
  if (length > 8U)
 8008ed2:	2e08      	cmp	r6, #8
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8008ed4:	f8a4 3224 	strh.w	r3, [r4, #548]	; 0x224
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8008ed8:	8c23      	ldrh	r3, [r4, #32]
      phost->RequestState = CMD_SEND;
 8008eda:	70a2      	strb	r2, [r4, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8008edc:	f8a4 3226 	strh.w	r3, [r4, #550]	; 0x226
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8008ee0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
      phost->Control.state =CTRL_IDLE;
 8008ee2:	7625      	strb	r5, [r4, #24]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8008ee4:	f8a4 3228 	strh.w	r3, [r4, #552]	; 0x228
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8008ee8:	8ba3      	ldrh	r3, [r4, #28]
 8008eea:	f8a4 3222 	strh.w	r3, [r4, #546]	; 0x222
  if (length > 8U)
 8008eee:	f67f af57 	bls.w	8008da0 <USBH_Get_DevDesc+0x44>
    dev_desc->idVendor           = LE16 (buf +  8);
 8008ef2:	6a61      	ldr	r1, [r4, #36]	; 0x24
}
 8008ef4:	4628      	mov	r0, r5
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8008ef6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8008ef8:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
    dev_desc->idVendor           = LE16 (buf +  8);
 8008efc:	f8c4 122a 	str.w	r1, [r4, #554]	; 0x22a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8008f00:	f8a4 222e 	strh.w	r2, [r4, #558]	; 0x22e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8008f04:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
}
 8008f08:	b002      	add	sp, #8
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f0c:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
 8008f10:	2106      	movs	r1, #6
 8008f12:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	7663      	strb	r3, [r4, #25]
    else if (status == USBH_NOT_SUPPORTED)
 8008f18:	e7a1      	b.n	8008e5e <USBH_Get_DevDesc+0x102>
        if (direction == USB_D2H)
 8008f1a:	0613      	lsls	r3, r2, #24
 8008f1c:	d4d2      	bmi.n	8008ec4 <USBH_Get_DevDesc+0x168>
          phost->Control.state = CTRL_STATUS_IN;
 8008f1e:	2307      	movs	r3, #7
 8008f20:	2501      	movs	r5, #1
 8008f22:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8008f24:	e73c      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
      if (phost->Control.setup.b.wLength.w != 0U)
 8008f26:	8ae3      	ldrh	r3, [r4, #22]
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f28:	7c22      	ldrb	r2, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0f5      	beq.n	8008f1a <USBH_Get_DevDesc+0x1be>
        if (direction == USB_D2H)
 8008f2e:	0612      	lsls	r2, r2, #24
 8008f30:	d403      	bmi.n	8008f3a <USBH_Get_DevDesc+0x1de>
          phost->Control.state = CTRL_DATA_OUT;
 8008f32:	2305      	movs	r3, #5
 8008f34:	2501      	movs	r5, #1
 8008f36:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8008f38:	e732      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
          phost->Control.state = CTRL_DATA_IN;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8008f3e:	e72f      	b.n	8008da0 <USBH_Get_DevDesc+0x44>
 8008f40:	01000680 	.word	0x01000680

08008f44 <USBH_Get_CfgDesc>:
{
 8008f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(phost->RequestState == CMD_SEND)
 8008f48:	f890 c002 	ldrb.w	ip, [r0, #2]
{
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460e      	mov	r6, r1
  pData = phost->device.Data;
 8008f50:	f100 041c 	add.w	r4, r0, #28
  if(phost->RequestState == CMD_SEND)
 8008f54:	f1bc 0f01 	cmp.w	ip, #1
 8008f58:	f000 8081 	beq.w	800905e <USBH_Get_CfgDesc+0x11a>
  switch (phost->RequestState)
 8008f5c:	f1bc 0f02 	cmp.w	ip, #2
 8008f60:	d178      	bne.n	8009054 <USBH_Get_CfgDesc+0x110>
 8008f62:	f7ff fe35 	bl	8008bd0 <USBH_CtlReq.part.0>
  if((status = USBH_GetDescriptor(phost,
 8008f66:	4684      	mov	ip, r0
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d175      	bne.n	8009058 <USBH_Get_CfgDesc+0x114>
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8008f6c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008f70:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008f72:	8be8      	ldrh	r0, [r5, #30]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8008f74:	f885 323c 	strb.w	r3, [r5, #572]	; 0x23c
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8008f78:	8bab      	ldrh	r3, [r5, #28]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008f7a:	f8a5 0236 	strh.w	r0, [r5, #566]	; 0x236
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8008f7e:	f8a5 3234 	strh.w	r3, [r5, #564]	; 0x234
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8008f82:	8c2b      	ldrh	r3, [r5, #32]
 8008f84:	f8a5 3238 	strh.w	r3, [r5, #568]	; 0x238
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8008f88:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8008f8a:	f8a5 323a 	strh.w	r3, [r5, #570]	; 0x23a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008f8e:	d963      	bls.n	8009058 <USBH_Get_CfgDesc+0x114>
 8008f90:	46ae      	mov	lr, r5
 8008f92:	4667      	mov	r7, ip
    ptr = USB_LEN_CFG_DESC;
 8008f94:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008f96:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f9a:	b2fe      	uxtb	r6, r7
 8008f9c:	3e02      	subs	r6, #2
 8008f9e:	bf18      	it	ne
 8008fa0:	2601      	movne	r6, #1
 8008fa2:	4290      	cmp	r0, r2
 8008fa4:	d958      	bls.n	8009058 <USBH_Get_CfgDesc+0x114>
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	d056      	beq.n	8009058 <USBH_Get_CfgDesc+0x114>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008faa:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008fac:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008fae:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008fb0:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008fb2:	b29a      	uxth	r2, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008fb4:	2904      	cmp	r1, #4
 8008fb6:	d1f4      	bne.n	8008fa2 <USBH_Get_CfgDesc+0x5e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8008fb8:	7823      	ldrb	r3, [r4, #0]
 8008fba:	f88e 323e 	strb.w	r3, [lr, #574]	; 0x23e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008fbe:	7863      	ldrb	r3, [r4, #1]
 8008fc0:	f88e 323f 	strb.w	r3, [lr, #575]	; 0x23f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008fc4:	78a3      	ldrb	r3, [r4, #2]
 8008fc6:	f88e 3240 	strb.w	r3, [lr, #576]	; 0x240
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008fca:	78e3      	ldrb	r3, [r4, #3]
 8008fcc:	f88e 3241 	strb.w	r3, [lr, #577]	; 0x241
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8008fd0:	7926      	ldrb	r6, [r4, #4]
 8008fd2:	f88e 6242 	strb.w	r6, [lr, #578]	; 0x242
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008fd6:	7963      	ldrb	r3, [r4, #5]
 8008fd8:	f88e 3243 	strb.w	r3, [lr, #579]	; 0x243
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8008fdc:	79a3      	ldrb	r3, [r4, #6]
 8008fde:	f88e 3244 	strb.w	r3, [lr, #580]	; 0x244
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8008fe2:	79e3      	ldrb	r3, [r4, #7]
 8008fe4:	f88e 3245 	strb.w	r3, [lr, #581]	; 0x245
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8008fe8:	7a23      	ldrb	r3, [r4, #8]
 8008fea:	f88e 3246 	strb.w	r3, [lr, #582]	; 0x246
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008fee:	b36e      	cbz	r6, 800904c <USBH_Get_CfgDesc+0x108>
 8008ff0:	4290      	cmp	r0, r2
 8008ff2:	d92b      	bls.n	800904c <USBH_Get_CfgDesc+0x108>
        ep_ix = 0U;
 8008ff4:	2100      	movs	r1, #0
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008ff6:	fb08 f907 	mul.w	r9, r8, r7
 8008ffa:	e001      	b.n	8009000 <USBH_Get_CfgDesc+0xbc>
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ffc:	4290      	cmp	r0, r2
 8008ffe:	d925      	bls.n	800904c <USBH_Get_CfgDesc+0x108>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009000:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009002:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009004:	4413      	add	r3, r2
 8009006:	b29a      	uxth	r2, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009008:	7863      	ldrb	r3, [r4, #1]
 800900a:	2b05      	cmp	r3, #5
 800900c:	d11c      	bne.n	8009048 <USBH_Get_CfgDesc+0x104>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800900e:	3101      	adds	r1, #1
 8009010:	f894 a000 	ldrb.w	sl, [r4]
 8009014:	eb09 03c1 	add.w	r3, r9, r1, lsl #3
            ep_ix++;
 8009018:	b2c9      	uxtb	r1, r1
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800901a:	442b      	add	r3, r5
 800901c:	f883 a240 	strb.w	sl, [r3, #576]	; 0x240
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8009020:	f894 a001 	ldrb.w	sl, [r4, #1]
 8009024:	f883 a241 	strb.w	sl, [r3, #577]	; 0x241
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8009028:	f894 a002 	ldrb.w	sl, [r4, #2]
 800902c:	f883 a242 	strb.w	sl, [r3, #578]	; 0x242
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8009030:	f894 a003 	ldrb.w	sl, [r4, #3]
 8009034:	f883 a243 	strb.w	sl, [r3, #579]	; 0x243
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8009038:	f8b4 a004 	ldrh.w	sl, [r4, #4]
 800903c:	f8a3 a244 	strh.w	sl, [r3, #580]	; 0x244
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8009040:	f894 a006 	ldrb.w	sl, [r4, #6]
 8009044:	f883 a246 	strb.w	sl, [r3, #582]	; 0x246
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009048:	428e      	cmp	r6, r1
 800904a:	d8d7      	bhi.n	8008ffc <USBH_Get_CfgDesc+0xb8>
        if_ix++;
 800904c:	3701      	adds	r7, #1
 800904e:	f10e 0e1a 	add.w	lr, lr, #26
 8009052:	e7a2      	b.n	8008f9a <USBH_Get_CfgDesc+0x56>
  switch (phost->RequestState)
 8009054:	f04f 0c01 	mov.w	ip, #1
}
 8009058:	4660      	mov	r0, ip
 800905a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800905e:	4a07      	ldr	r2, [pc, #28]	; (800907c <USBH_Get_CfgDesc+0x138>)
    phost->RequestState = CMD_WAIT;
 8009060:	2302      	movs	r3, #2
    phost->Control.setup.b.wLength.w = length;
 8009062:	82e9      	strh	r1, [r5, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009064:	6102      	str	r2, [r0, #16]
      phost->Control.setup.b.wIndex.w = 0U;
 8009066:	2200      	movs	r2, #0
    phost->Control.buff = buff;
 8009068:	6084      	str	r4, [r0, #8]
    phost->Control.length = length;
 800906a:	81a9      	strh	r1, [r5, #12]
    phost->Control.state = CTRL_SETUP;
 800906c:	f880 c018 	strb.w	ip, [r0, #24]
      phost->Control.setup.b.wIndex.w = 0U;
 8009070:	8282      	strh	r2, [r0, #20]
    phost->RequestState = CMD_WAIT;
 8009072:	7083      	strb	r3, [r0, #2]
}
 8009074:	4660      	mov	r0, ip
 8009076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907a:	bf00      	nop
 800907c:	02000680 	.word	0x02000680

08009080 <USBH_Get_StringDesc>:
{
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	4616      	mov	r6, r2
  if(phost->RequestState == CMD_SEND)
 8009084:	7882      	ldrb	r2, [r0, #2]
{
 8009086:	4604      	mov	r4, r0
 8009088:	461d      	mov	r5, r3
  if(phost->RequestState == CMD_SEND)
 800908a:	2a01      	cmp	r2, #1
                                  phost->device.Data,
 800908c:	f100 071c 	add.w	r7, r0, #28
  if(phost->RequestState == CMD_SEND)
 8009090:	d00d      	beq.n	80090ae <USBH_Get_StringDesc+0x2e>
  switch (phost->RequestState)
 8009092:	2a02      	cmp	r2, #2
 8009094:	d108      	bne.n	80090a8 <USBH_Get_StringDesc+0x28>
 8009096:	f7ff fd9b 	bl	8008bd0 <USBH_CtlReq.part.0>
  if((status = USBH_GetDescriptor(phost,
 800909a:	4602      	mov	r2, r0
 800909c:	b910      	cbnz	r0, 80090a4 <USBH_Get_StringDesc+0x24>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800909e:	7f63      	ldrb	r3, [r4, #29]
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d015      	beq.n	80090d0 <USBH_Get_StringDesc+0x50>
}
 80090a4:	4610      	mov	r0, r2
 80090a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (phost->RequestState)
 80090a8:	2201      	movs	r2, #1
}
 80090aa:	4610      	mov	r0, r2
 80090ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((status = USBH_GetDescriptor(phost,
 80090ae:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    phost->RequestState = CMD_WAIT;
 80090b2:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 80090b4:	6087      	str	r7, [r0, #8]
    phost->Control.setup.b.wValue.w = value_idx;
 80090b6:	8241      	strh	r1, [r0, #18]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80090b8:	f240 4109 	movw	r1, #1033	; 0x409
    phost->RequestState = CMD_WAIT;
 80090bc:	7083      	strb	r3, [r0, #2]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80090be:	f44f 63d0 	mov.w	r3, #1664	; 0x680
    phost->Control.setup.b.wLength.w = length;
 80090c2:	82c5      	strh	r5, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80090c4:	8281      	strh	r1, [r0, #20]
    phost->Control.length = length;
 80090c6:	8185      	strh	r5, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 80090c8:	7602      	strb	r2, [r0, #24]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80090ca:	8203      	strh	r3, [r0, #16]
}
 80090cc:	4610      	mov	r0, r2
 80090ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80090d0:	7f23      	ldrb	r3, [r4, #28]
 80090d2:	3b02      	subs	r3, #2
 80090d4:	42ab      	cmp	r3, r5
 80090d6:	bf28      	it	cs
 80090d8:	462b      	movcs	r3, r5
 80090da:	b298      	uxth	r0, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 80090dc:	b143      	cbz	r3, 80090f0 <USBH_Get_StringDesc+0x70>
 80090de:	4613      	mov	r3, r2
      *pdest =  psrc[idx];
 80090e0:	18f9      	adds	r1, r7, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 80090e2:	3302      	adds	r3, #2
 80090e4:	b29b      	uxth	r3, r3
      *pdest =  psrc[idx];
 80090e6:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 80090e8:	4298      	cmp	r0, r3
      *pdest =  psrc[idx];
 80090ea:	f806 1b01 	strb.w	r1, [r6], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80090ee:	d8f7      	bhi.n	80090e0 <USBH_Get_StringDesc+0x60>
    *pdest = 0U; /* mark end of string */
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4610      	mov	r0, r2
    *pdest = 0U; /* mark end of string */
 80090f4:	7033      	strb	r3, [r6, #0]
}
 80090f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090f8 <USBH_SetAddress>:
{
 80090f8:	b530      	push	{r4, r5, lr}
  if(phost->RequestState == CMD_SEND)
 80090fa:	7885      	ldrb	r5, [r0, #2]
{
 80090fc:	b083      	sub	sp, #12
 80090fe:	4604      	mov	r4, r0
  if(phost->RequestState == CMD_SEND)
 8009100:	2d01      	cmp	r5, #1
 8009102:	d01d      	beq.n	8009140 <USBH_SetAddress+0x48>
  switch (phost->RequestState)
 8009104:	2d02      	cmp	r5, #2
 8009106:	d117      	bne.n	8009138 <USBH_SetAddress+0x40>
  switch (phost->Control.state)
 8009108:	f890 c018 	ldrb.w	ip, [r0, #24]
 800910c:	f10c 33ff 	add.w	r3, ip, #4294967295
 8009110:	2b0a      	cmp	r3, #10
 8009112:	d811      	bhi.n	8009138 <USBH_SetAddress+0x40>
 8009114:	e8df f003 	tbb	[pc, r3]
 8009118:	06473930 	.word	0x06473930
 800911c:	7d716154 	.word	0x7d716154
 8009120:	998c      	.short	0x998c
 8009122:	22          	.byte	0x22
 8009123:	00          	.byte	0x00
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009124:	7901      	ldrb	r1, [r0, #4]
 8009126:	f014 fdcd 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800912a:	2801      	cmp	r0, #1
 800912c:	f000 8095 	beq.w	800925a <USBH_SetAddress+0x162>
    if  (URB_Status == USBH_URB_STALL)
 8009130:	2805      	cmp	r0, #5
 8009132:	d077      	beq.n	8009224 <USBH_SetAddress+0x12c>
      if (URB_Status == USBH_URB_ERROR)
 8009134:	2804      	cmp	r0, #4
 8009136:	d032      	beq.n	800919e <USBH_SetAddress+0xa6>
  switch (phost->Control.state)
 8009138:	2501      	movs	r5, #1
}
 800913a:	4628      	mov	r0, r5
 800913c:	b003      	add	sp, #12
 800913e:	bd30      	pop	{r4, r5, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009140:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    phost->Control.buff = buff;
 8009144:	2300      	movs	r3, #0
    phost->RequestState = CMD_WAIT;
 8009146:	2202      	movs	r2, #2
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009148:	8261      	strh	r1, [r4, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800914a:	8220      	strh	r0, [r4, #16]
}
 800914c:	4628      	mov	r0, r5
    phost->Control.buff = buff;
 800914e:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 8009150:	81a3      	strh	r3, [r4, #12]
    phost->Control.setup.b.wIndex.w = 0U;
 8009152:	6163      	str	r3, [r4, #20]
    phost->Control.state = CTRL_SETUP;
 8009154:	7625      	strb	r5, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8009156:	70a2      	strb	r2, [r4, #2]
}
 8009158:	b003      	add	sp, #12
 800915a:	bd30      	pop	{r4, r5, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800915c:	7e43      	ldrb	r3, [r0, #25]
 800915e:	3301      	adds	r3, #1
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	7643      	strb	r3, [r0, #25]
 8009166:	f200 8084 	bhi.w	8009272 <USBH_SetAddress+0x17a>
      USBH_LL_Stop(phost);
 800916a:	f014 fd3d 	bl	801dbe8 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 800916e:	2301      	movs	r3, #1
      phost->RequestState = CMD_SEND;
 8009170:	461d      	mov	r5, r3
      phost->Control.state = CTRL_SETUP;
 8009172:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8009174:	70a3      	strb	r3, [r4, #2]
    if (status == USBH_OK)
 8009176:	e7e0      	b.n	800913a <USBH_SetAddress+0x42>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009178:	7942      	ldrb	r2, [r0, #5]
 800917a:	f100 0110 	add.w	r1, r0, #16
  USBH_StatusTypeDef status = USBH_BUSY;
 800917e:	4665      	mov	r5, ip
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009180:	f000 fbec 	bl	800995c <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8009184:	2302      	movs	r3, #2
 8009186:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009188:	e7d7      	b.n	800913a <USBH_SetAddress+0x42>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800918a:	7941      	ldrb	r1, [r0, #5]
 800918c:	f014 fd9a 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8009190:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009192:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 8009194:	d07a      	beq.n	800928c <USBH_SetAddress+0x194>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009196:	2804      	cmp	r0, #4
 8009198:	d001      	beq.n	800919e <USBH_SetAddress+0xa6>
 800919a:	2802      	cmp	r0, #2
 800919c:	d1cc      	bne.n	8009138 <USBH_SetAddress+0x40>
        phost->Control.state = CTRL_ERROR;
 800919e:	230b      	movs	r3, #11
  USBH_StatusTypeDef status = USBH_BUSY;
 80091a0:	2501      	movs	r5, #1
        phost->Control.state = CTRL_ERROR;
 80091a2:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 80091a4:	e7c9      	b.n	800913a <USBH_SetAddress+0x42>
    phost->Control.timer = (uint16_t)phost->Timer;
 80091a6:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80091aa:	2501      	movs	r5, #1
    USBH_CtlReceiveData(phost,
 80091ac:	7923      	ldrb	r3, [r4, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 80091ae:	81e0      	strh	r0, [r4, #14]
    USBH_CtlReceiveData(phost,
 80091b0:	4620      	mov	r0, r4
 80091b2:	89a2      	ldrh	r2, [r4, #12]
 80091b4:	68a1      	ldr	r1, [r4, #8]
 80091b6:	f000 fbfb 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80091ba:	2304      	movs	r3, #4
 80091bc:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 80091be:	e7bc      	b.n	800913a <USBH_SetAddress+0x42>
    USBH_CtlSendData (phost,
 80091c0:	2501      	movs	r5, #1
 80091c2:	7943      	ldrb	r3, [r0, #5]
 80091c4:	8982      	ldrh	r2, [r0, #12]
 80091c6:	6881      	ldr	r1, [r0, #8]
 80091c8:	9500      	str	r5, [sp, #0]
 80091ca:	f000 fbd7 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80091ce:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80091d2:	2306      	movs	r3, #6
     phost->Control.timer = (uint16_t)phost->Timer;
 80091d4:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80091d6:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 80091d8:	e7af      	b.n	800913a <USBH_SetAddress+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80091da:	7941      	ldrb	r1, [r0, #5]
 80091dc:	f014 fd72 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80091e0:	2801      	cmp	r0, #1
 80091e2:	d04f      	beq.n	8009284 <USBH_SetAddress+0x18c>
    else if  (URB_Status == USBH_URB_STALL)
 80091e4:	2805      	cmp	r0, #5
 80091e6:	d01d      	beq.n	8009224 <USBH_SetAddress+0x12c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80091e8:	2802      	cmp	r0, #2
 80091ea:	d055      	beq.n	8009298 <USBH_SetAddress+0x1a0>
      if (URB_Status == USBH_URB_ERROR)
 80091ec:	2804      	cmp	r0, #4
 80091ee:	d1a3      	bne.n	8009138 <USBH_SetAddress+0x40>
        phost->Control.state = CTRL_ERROR;
 80091f0:	230b      	movs	r3, #11
 80091f2:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80091f4:	2301      	movs	r3, #1
 80091f6:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 80091f8:	e79f      	b.n	800913a <USBH_SetAddress+0x42>
    USBH_CtlReceiveData (phost,
 80091fa:	2200      	movs	r2, #0
 80091fc:	7903      	ldrb	r3, [r0, #4]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80091fe:	2501      	movs	r5, #1
    USBH_CtlReceiveData (phost,
 8009200:	4611      	mov	r1, r2
 8009202:	f000 fbd5 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8009206:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800920a:	2308      	movs	r3, #8
    phost->Control.timer = (uint16_t)phost->Timer;
 800920c:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800920e:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8009210:	e793      	b.n	800913a <USBH_SetAddress+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009212:	7901      	ldrb	r1, [r0, #4]
 8009214:	f014 fd56 	bl	801dcc4 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8009218:	2801      	cmp	r0, #1
 800921a:	d022      	beq.n	8009262 <USBH_SetAddress+0x16a>
    else if (URB_Status == USBH_URB_ERROR)
 800921c:	2804      	cmp	r0, #4
 800921e:	d0be      	beq.n	800919e <USBH_SetAddress+0xa6>
      if(URB_Status == USBH_URB_STALL)
 8009220:	2805      	cmp	r0, #5
 8009222:	d189      	bne.n	8009138 <USBH_SetAddress+0x40>
      phost->RequestState = CMD_SEND;
 8009224:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8009226:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8009228:	2503      	movs	r5, #3
      phost->RequestState = CMD_SEND;
 800922a:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800922c:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800922e:	e784      	b.n	800913a <USBH_SetAddress+0x42>
    USBH_CtlSendData (phost,
 8009230:	2200      	movs	r2, #0
 8009232:	2501      	movs	r5, #1
 8009234:	7943      	ldrb	r3, [r0, #5]
 8009236:	4611      	mov	r1, r2
 8009238:	9500      	str	r5, [sp, #0]
 800923a:	f000 fb9f 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800923e:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009242:	230a      	movs	r3, #10
     phost->Control.timer = (uint16_t)phost->Timer;
 8009244:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009246:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009248:	e777      	b.n	800913a <USBH_SetAddress+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800924a:	7941      	ldrb	r1, [r0, #5]
 800924c:	f014 fd3a 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009250:	2801      	cmp	r0, #1
 8009252:	d006      	beq.n	8009262 <USBH_SetAddress+0x16a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009254:	2802      	cmp	r0, #2
 8009256:	f47f af6d 	bne.w	8009134 <USBH_SetAddress+0x3c>
          phost->Control.state = CTRL_STATUS_OUT;
 800925a:	2309      	movs	r3, #9
  USBH_StatusTypeDef status = USBH_BUSY;
 800925c:	2501      	movs	r5, #1
          phost->Control.state = CTRL_STATUS_OUT;
 800925e:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009260:	e76b      	b.n	800913a <USBH_SetAddress+0x42>
      phost->Control.state =CTRL_IDLE;
 8009262:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 8009264:	2201      	movs	r2, #1
      status = USBH_OK;
 8009266:	461d      	mov	r5, r3
      phost->RequestState = CMD_SEND;
 8009268:	70a2      	strb	r2, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800926a:	7623      	strb	r3, [r4, #24]
}
 800926c:	4628      	mov	r0, r5
 800926e:	b003      	add	sp, #12
 8009270:	bd30      	pop	{r4, r5, pc}
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009272:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
 8009276:	2106      	movs	r1, #6
 8009278:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	7663      	strb	r3, [r4, #25]
      if (status == USBH_FAIL)
 800927e:	e7b9      	b.n	80091f4 <USBH_SetAddress+0xfc>
        if (direction == USB_D2H)
 8009280:	0613      	lsls	r3, r2, #24
 8009282:	d4ea      	bmi.n	800925a <USBH_SetAddress+0x162>
          phost->Control.state = CTRL_STATUS_IN;
 8009284:	2307      	movs	r3, #7
 8009286:	2501      	movs	r5, #1
 8009288:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 800928a:	e756      	b.n	800913a <USBH_SetAddress+0x42>
      if (phost->Control.setup.b.wLength.w != 0U)
 800928c:	8ae3      	ldrh	r3, [r4, #22]
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800928e:	7c22      	ldrb	r2, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0f5      	beq.n	8009280 <USBH_SetAddress+0x188>
        if (direction == USB_D2H)
 8009294:	0612      	lsls	r2, r2, #24
 8009296:	d403      	bmi.n	80092a0 <USBH_SetAddress+0x1a8>
          phost->Control.state = CTRL_DATA_OUT;
 8009298:	2305      	movs	r3, #5
 800929a:	2501      	movs	r5, #1
 800929c:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 800929e:	e74c      	b.n	800913a <USBH_SetAddress+0x42>
          phost->Control.state = CTRL_DATA_IN;
 80092a0:	2303      	movs	r3, #3
 80092a2:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 80092a4:	e749      	b.n	800913a <USBH_SetAddress+0x42>
 80092a6:	bf00      	nop

080092a8 <USBH_SetCfg>:
{
 80092a8:	b530      	push	{r4, r5, lr}
  if(phost->RequestState == CMD_SEND)
 80092aa:	7885      	ldrb	r5, [r0, #2]
{
 80092ac:	b083      	sub	sp, #12
 80092ae:	4604      	mov	r4, r0
  if(phost->RequestState == CMD_SEND)
 80092b0:	2d01      	cmp	r5, #1
 80092b2:	d01d      	beq.n	80092f0 <USBH_SetCfg+0x48>
  switch (phost->RequestState)
 80092b4:	2d02      	cmp	r5, #2
 80092b6:	d117      	bne.n	80092e8 <USBH_SetCfg+0x40>
  switch (phost->Control.state)
 80092b8:	f890 c018 	ldrb.w	ip, [r0, #24]
 80092bc:	f10c 33ff 	add.w	r3, ip, #4294967295
 80092c0:	2b0a      	cmp	r3, #10
 80092c2:	d811      	bhi.n	80092e8 <USBH_SetCfg+0x40>
 80092c4:	e8df f003 	tbb	[pc, r3]
 80092c8:	06473930 	.word	0x06473930
 80092cc:	7d716154 	.word	0x7d716154
 80092d0:	998c      	.short	0x998c
 80092d2:	22          	.byte	0x22
 80092d3:	00          	.byte	0x00
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80092d4:	7901      	ldrb	r1, [r0, #4]
 80092d6:	f014 fcf5 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80092da:	2801      	cmp	r0, #1
 80092dc:	f000 8095 	beq.w	800940a <USBH_SetCfg+0x162>
    if  (URB_Status == USBH_URB_STALL)
 80092e0:	2805      	cmp	r0, #5
 80092e2:	d077      	beq.n	80093d4 <USBH_SetCfg+0x12c>
      if (URB_Status == USBH_URB_ERROR)
 80092e4:	2804      	cmp	r0, #4
 80092e6:	d032      	beq.n	800934e <USBH_SetCfg+0xa6>
  switch (phost->Control.state)
 80092e8:	2501      	movs	r5, #1
}
 80092ea:	4628      	mov	r0, r5
 80092ec:	b003      	add	sp, #12
 80092ee:	bd30      	pop	{r4, r5, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092f0:	f44f 6010 	mov.w	r0, #2304	; 0x900
    phost->Control.buff = buff;
 80092f4:	2300      	movs	r3, #0
    phost->RequestState = CMD_WAIT;
 80092f6:	2202      	movs	r2, #2
    phost->Control.setup.b.wValue.w = cfg_idx;
 80092f8:	8261      	strh	r1, [r4, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092fa:	8220      	strh	r0, [r4, #16]
}
 80092fc:	4628      	mov	r0, r5
    phost->Control.buff = buff;
 80092fe:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 8009300:	81a3      	strh	r3, [r4, #12]
    phost->Control.setup.b.wIndex.w = 0U;
 8009302:	6163      	str	r3, [r4, #20]
    phost->Control.state = CTRL_SETUP;
 8009304:	7625      	strb	r5, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8009306:	70a2      	strb	r2, [r4, #2]
}
 8009308:	b003      	add	sp, #12
 800930a:	bd30      	pop	{r4, r5, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800930c:	7e43      	ldrb	r3, [r0, #25]
 800930e:	3301      	adds	r3, #1
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	7643      	strb	r3, [r0, #25]
 8009316:	f200 8084 	bhi.w	8009422 <USBH_SetCfg+0x17a>
      USBH_LL_Stop(phost);
 800931a:	f014 fc65 	bl	801dbe8 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 800931e:	2301      	movs	r3, #1
      phost->RequestState = CMD_SEND;
 8009320:	461d      	mov	r5, r3
      phost->Control.state = CTRL_SETUP;
 8009322:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8009324:	70a3      	strb	r3, [r4, #2]
    if (status == USBH_OK)
 8009326:	e7e0      	b.n	80092ea <USBH_SetCfg+0x42>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009328:	7942      	ldrb	r2, [r0, #5]
 800932a:	f100 0110 	add.w	r1, r0, #16
  USBH_StatusTypeDef status = USBH_BUSY;
 800932e:	4665      	mov	r5, ip
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009330:	f000 fb14 	bl	800995c <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8009334:	2302      	movs	r3, #2
 8009336:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009338:	e7d7      	b.n	80092ea <USBH_SetCfg+0x42>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800933a:	7941      	ldrb	r1, [r0, #5]
 800933c:	f014 fcc2 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8009340:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009342:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 8009344:	d07a      	beq.n	800943c <USBH_SetCfg+0x194>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009346:	2804      	cmp	r0, #4
 8009348:	d001      	beq.n	800934e <USBH_SetCfg+0xa6>
 800934a:	2802      	cmp	r0, #2
 800934c:	d1cc      	bne.n	80092e8 <USBH_SetCfg+0x40>
        phost->Control.state = CTRL_ERROR;
 800934e:	230b      	movs	r3, #11
  USBH_StatusTypeDef status = USBH_BUSY;
 8009350:	2501      	movs	r5, #1
        phost->Control.state = CTRL_ERROR;
 8009352:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009354:	e7c9      	b.n	80092ea <USBH_SetCfg+0x42>
    phost->Control.timer = (uint16_t)phost->Timer;
 8009356:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800935a:	2501      	movs	r5, #1
    USBH_CtlReceiveData(phost,
 800935c:	7923      	ldrb	r3, [r4, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 800935e:	81e0      	strh	r0, [r4, #14]
    USBH_CtlReceiveData(phost,
 8009360:	4620      	mov	r0, r4
 8009362:	89a2      	ldrh	r2, [r4, #12]
 8009364:	68a1      	ldr	r1, [r4, #8]
 8009366:	f000 fb23 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800936a:	2304      	movs	r3, #4
 800936c:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 800936e:	e7bc      	b.n	80092ea <USBH_SetCfg+0x42>
    USBH_CtlSendData (phost,
 8009370:	2501      	movs	r5, #1
 8009372:	7943      	ldrb	r3, [r0, #5]
 8009374:	8982      	ldrh	r2, [r0, #12]
 8009376:	6881      	ldr	r1, [r0, #8]
 8009378:	9500      	str	r5, [sp, #0]
 800937a:	f000 faff 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800937e:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009382:	2306      	movs	r3, #6
     phost->Control.timer = (uint16_t)phost->Timer;
 8009384:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009386:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009388:	e7af      	b.n	80092ea <USBH_SetCfg+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800938a:	7941      	ldrb	r1, [r0, #5]
 800938c:	f014 fc9a 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009390:	2801      	cmp	r0, #1
 8009392:	d04f      	beq.n	8009434 <USBH_SetCfg+0x18c>
    else if  (URB_Status == USBH_URB_STALL)
 8009394:	2805      	cmp	r0, #5
 8009396:	d01d      	beq.n	80093d4 <USBH_SetCfg+0x12c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009398:	2802      	cmp	r0, #2
 800939a:	d055      	beq.n	8009448 <USBH_SetCfg+0x1a0>
      if (URB_Status == USBH_URB_ERROR)
 800939c:	2804      	cmp	r0, #4
 800939e:	d1a3      	bne.n	80092e8 <USBH_SetCfg+0x40>
        phost->Control.state = CTRL_ERROR;
 80093a0:	230b      	movs	r3, #11
 80093a2:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80093a4:	2301      	movs	r3, #1
 80093a6:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 80093a8:	e79f      	b.n	80092ea <USBH_SetCfg+0x42>
    USBH_CtlReceiveData (phost,
 80093aa:	2200      	movs	r2, #0
 80093ac:	7903      	ldrb	r3, [r0, #4]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093ae:	2501      	movs	r5, #1
    USBH_CtlReceiveData (phost,
 80093b0:	4611      	mov	r1, r2
 80093b2:	f000 fafd 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 80093b6:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093ba:	2308      	movs	r3, #8
    phost->Control.timer = (uint16_t)phost->Timer;
 80093bc:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093be:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 80093c0:	e793      	b.n	80092ea <USBH_SetCfg+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80093c2:	7901      	ldrb	r1, [r0, #4]
 80093c4:	f014 fc7e 	bl	801dcc4 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80093c8:	2801      	cmp	r0, #1
 80093ca:	d022      	beq.n	8009412 <USBH_SetCfg+0x16a>
    else if (URB_Status == USBH_URB_ERROR)
 80093cc:	2804      	cmp	r0, #4
 80093ce:	d0be      	beq.n	800934e <USBH_SetCfg+0xa6>
      if(URB_Status == USBH_URB_STALL)
 80093d0:	2805      	cmp	r0, #5
 80093d2:	d189      	bne.n	80092e8 <USBH_SetCfg+0x40>
      phost->RequestState = CMD_SEND;
 80093d4:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 80093d6:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 80093d8:	2503      	movs	r5, #3
      phost->RequestState = CMD_SEND;
 80093da:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 80093dc:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 80093de:	e784      	b.n	80092ea <USBH_SetCfg+0x42>
    USBH_CtlSendData (phost,
 80093e0:	2200      	movs	r2, #0
 80093e2:	2501      	movs	r5, #1
 80093e4:	7943      	ldrb	r3, [r0, #5]
 80093e6:	4611      	mov	r1, r2
 80093e8:	9500      	str	r5, [sp, #0]
 80093ea:	f000 fac7 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80093ee:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80093f2:	230a      	movs	r3, #10
     phost->Control.timer = (uint16_t)phost->Timer;
 80093f4:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80093f6:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 80093f8:	e777      	b.n	80092ea <USBH_SetCfg+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80093fa:	7941      	ldrb	r1, [r0, #5]
 80093fc:	f014 fc62 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009400:	2801      	cmp	r0, #1
 8009402:	d006      	beq.n	8009412 <USBH_SetCfg+0x16a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009404:	2802      	cmp	r0, #2
 8009406:	f47f af6d 	bne.w	80092e4 <USBH_SetCfg+0x3c>
          phost->Control.state = CTRL_STATUS_OUT;
 800940a:	2309      	movs	r3, #9
  USBH_StatusTypeDef status = USBH_BUSY;
 800940c:	2501      	movs	r5, #1
          phost->Control.state = CTRL_STATUS_OUT;
 800940e:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009410:	e76b      	b.n	80092ea <USBH_SetCfg+0x42>
      phost->Control.state =CTRL_IDLE;
 8009412:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 8009414:	2201      	movs	r2, #1
      status = USBH_OK;
 8009416:	461d      	mov	r5, r3
      phost->RequestState = CMD_SEND;
 8009418:	70a2      	strb	r2, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800941a:	7623      	strb	r3, [r4, #24]
}
 800941c:	4628      	mov	r0, r5
 800941e:	b003      	add	sp, #12
 8009420:	bd30      	pop	{r4, r5, pc}
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009422:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
 8009426:	2106      	movs	r1, #6
 8009428:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	7663      	strb	r3, [r4, #25]
      if (status == USBH_FAIL)
 800942e:	e7b9      	b.n	80093a4 <USBH_SetCfg+0xfc>
        if (direction == USB_D2H)
 8009430:	0613      	lsls	r3, r2, #24
 8009432:	d4ea      	bmi.n	800940a <USBH_SetCfg+0x162>
          phost->Control.state = CTRL_STATUS_IN;
 8009434:	2307      	movs	r3, #7
 8009436:	2501      	movs	r5, #1
 8009438:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 800943a:	e756      	b.n	80092ea <USBH_SetCfg+0x42>
      if (phost->Control.setup.b.wLength.w != 0U)
 800943c:	8ae3      	ldrh	r3, [r4, #22]
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800943e:	7c22      	ldrb	r2, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0f5      	beq.n	8009430 <USBH_SetCfg+0x188>
        if (direction == USB_D2H)
 8009444:	0612      	lsls	r2, r2, #24
 8009446:	d403      	bmi.n	8009450 <USBH_SetCfg+0x1a8>
          phost->Control.state = CTRL_DATA_OUT;
 8009448:	2305      	movs	r3, #5
 800944a:	2501      	movs	r5, #1
 800944c:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 800944e:	e74c      	b.n	80092ea <USBH_SetCfg+0x42>
          phost->Control.state = CTRL_DATA_IN;
 8009450:	2303      	movs	r3, #3
 8009452:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 8009454:	e749      	b.n	80092ea <USBH_SetCfg+0x42>
 8009456:	bf00      	nop

08009458 <USBH_SetFeature>:
{
 8009458:	b530      	push	{r4, r5, lr}
  if(phost->RequestState == CMD_SEND)
 800945a:	7885      	ldrb	r5, [r0, #2]
{
 800945c:	b083      	sub	sp, #12
 800945e:	4604      	mov	r4, r0
  if(phost->RequestState == CMD_SEND)
 8009460:	2d01      	cmp	r5, #1
 8009462:	d01d      	beq.n	80094a0 <USBH_SetFeature+0x48>
  switch (phost->RequestState)
 8009464:	2d02      	cmp	r5, #2
 8009466:	d117      	bne.n	8009498 <USBH_SetFeature+0x40>
  switch (phost->Control.state)
 8009468:	f890 c018 	ldrb.w	ip, [r0, #24]
 800946c:	f10c 33ff 	add.w	r3, ip, #4294967295
 8009470:	2b0a      	cmp	r3, #10
 8009472:	d811      	bhi.n	8009498 <USBH_SetFeature+0x40>
 8009474:	e8df f003 	tbb	[pc, r3]
 8009478:	06473930 	.word	0x06473930
 800947c:	7d716154 	.word	0x7d716154
 8009480:	998c      	.short	0x998c
 8009482:	22          	.byte	0x22
 8009483:	00          	.byte	0x00
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009484:	7901      	ldrb	r1, [r0, #4]
 8009486:	f014 fc1d 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800948a:	2801      	cmp	r0, #1
 800948c:	f000 8095 	beq.w	80095ba <USBH_SetFeature+0x162>
    if  (URB_Status == USBH_URB_STALL)
 8009490:	2805      	cmp	r0, #5
 8009492:	d077      	beq.n	8009584 <USBH_SetFeature+0x12c>
      if (URB_Status == USBH_URB_ERROR)
 8009494:	2804      	cmp	r0, #4
 8009496:	d032      	beq.n	80094fe <USBH_SetFeature+0xa6>
  switch (phost->Control.state)
 8009498:	2501      	movs	r5, #1
}
 800949a:	4628      	mov	r0, r5
 800949c:	b003      	add	sp, #12
 800949e:	bd30      	pop	{r4, r5, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094a0:	f44f 7040 	mov.w	r0, #768	; 0x300
    phost->Control.buff = buff;
 80094a4:	2300      	movs	r3, #0
    phost->RequestState = CMD_WAIT;
 80094a6:	2202      	movs	r2, #2
    phost->Control.setup.b.wValue.w = wValue;
 80094a8:	8261      	strh	r1, [r4, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094aa:	8220      	strh	r0, [r4, #16]
}
 80094ac:	4628      	mov	r0, r5
    phost->Control.buff = buff;
 80094ae:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 80094b0:	81a3      	strh	r3, [r4, #12]
    phost->Control.setup.b.wIndex.w = 0U;
 80094b2:	6163      	str	r3, [r4, #20]
    phost->Control.state = CTRL_SETUP;
 80094b4:	7625      	strb	r5, [r4, #24]
    phost->RequestState = CMD_WAIT;
 80094b6:	70a2      	strb	r2, [r4, #2]
}
 80094b8:	b003      	add	sp, #12
 80094ba:	bd30      	pop	{r4, r5, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80094bc:	7e43      	ldrb	r3, [r0, #25]
 80094be:	3301      	adds	r3, #1
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	7643      	strb	r3, [r0, #25]
 80094c6:	f200 8084 	bhi.w	80095d2 <USBH_SetFeature+0x17a>
      USBH_LL_Stop(phost);
 80094ca:	f014 fb8d 	bl	801dbe8 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 80094ce:	2301      	movs	r3, #1
      phost->RequestState = CMD_SEND;
 80094d0:	461d      	mov	r5, r3
      phost->Control.state = CTRL_SETUP;
 80094d2:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80094d4:	70a3      	strb	r3, [r4, #2]
    if (status == USBH_OK)
 80094d6:	e7e0      	b.n	800949a <USBH_SetFeature+0x42>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80094d8:	7942      	ldrb	r2, [r0, #5]
 80094da:	f100 0110 	add.w	r1, r0, #16
  USBH_StatusTypeDef status = USBH_BUSY;
 80094de:	4665      	mov	r5, ip
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80094e0:	f000 fa3c 	bl	800995c <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 80094e4:	2302      	movs	r3, #2
 80094e6:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 80094e8:	e7d7      	b.n	800949a <USBH_SetFeature+0x42>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094ea:	7941      	ldrb	r1, [r0, #5]
 80094ec:	f014 fbea 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80094f0:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094f2:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 80094f4:	d07a      	beq.n	80095ec <USBH_SetFeature+0x194>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80094f6:	2804      	cmp	r0, #4
 80094f8:	d001      	beq.n	80094fe <USBH_SetFeature+0xa6>
 80094fa:	2802      	cmp	r0, #2
 80094fc:	d1cc      	bne.n	8009498 <USBH_SetFeature+0x40>
        phost->Control.state = CTRL_ERROR;
 80094fe:	230b      	movs	r3, #11
  USBH_StatusTypeDef status = USBH_BUSY;
 8009500:	2501      	movs	r5, #1
        phost->Control.state = CTRL_ERROR;
 8009502:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009504:	e7c9      	b.n	800949a <USBH_SetFeature+0x42>
    phost->Control.timer = (uint16_t)phost->Timer;
 8009506:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800950a:	2501      	movs	r5, #1
    USBH_CtlReceiveData(phost,
 800950c:	7923      	ldrb	r3, [r4, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 800950e:	81e0      	strh	r0, [r4, #14]
    USBH_CtlReceiveData(phost,
 8009510:	4620      	mov	r0, r4
 8009512:	89a2      	ldrh	r2, [r4, #12]
 8009514:	68a1      	ldr	r1, [r4, #8]
 8009516:	f000 fa4b 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800951a:	2304      	movs	r3, #4
 800951c:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 800951e:	e7bc      	b.n	800949a <USBH_SetFeature+0x42>
    USBH_CtlSendData (phost,
 8009520:	2501      	movs	r5, #1
 8009522:	7943      	ldrb	r3, [r0, #5]
 8009524:	8982      	ldrh	r2, [r0, #12]
 8009526:	6881      	ldr	r1, [r0, #8]
 8009528:	9500      	str	r5, [sp, #0]
 800952a:	f000 fa27 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800952e:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009532:	2306      	movs	r3, #6
     phost->Control.timer = (uint16_t)phost->Timer;
 8009534:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009536:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009538:	e7af      	b.n	800949a <USBH_SetFeature+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800953a:	7941      	ldrb	r1, [r0, #5]
 800953c:	f014 fbc2 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009540:	2801      	cmp	r0, #1
 8009542:	d04f      	beq.n	80095e4 <USBH_SetFeature+0x18c>
    else if  (URB_Status == USBH_URB_STALL)
 8009544:	2805      	cmp	r0, #5
 8009546:	d01d      	beq.n	8009584 <USBH_SetFeature+0x12c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009548:	2802      	cmp	r0, #2
 800954a:	d055      	beq.n	80095f8 <USBH_SetFeature+0x1a0>
      if (URB_Status == USBH_URB_ERROR)
 800954c:	2804      	cmp	r0, #4
 800954e:	d1a3      	bne.n	8009498 <USBH_SetFeature+0x40>
        phost->Control.state = CTRL_ERROR;
 8009550:	230b      	movs	r3, #11
 8009552:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8009554:	2301      	movs	r3, #1
 8009556:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8009558:	e79f      	b.n	800949a <USBH_SetFeature+0x42>
    USBH_CtlReceiveData (phost,
 800955a:	2200      	movs	r2, #0
 800955c:	7903      	ldrb	r3, [r0, #4]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800955e:	2501      	movs	r5, #1
    USBH_CtlReceiveData (phost,
 8009560:	4611      	mov	r1, r2
 8009562:	f000 fa25 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8009566:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800956a:	2308      	movs	r3, #8
    phost->Control.timer = (uint16_t)phost->Timer;
 800956c:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800956e:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8009570:	e793      	b.n	800949a <USBH_SetFeature+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009572:	7901      	ldrb	r1, [r0, #4]
 8009574:	f014 fba6 	bl	801dcc4 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8009578:	2801      	cmp	r0, #1
 800957a:	d022      	beq.n	80095c2 <USBH_SetFeature+0x16a>
    else if (URB_Status == USBH_URB_ERROR)
 800957c:	2804      	cmp	r0, #4
 800957e:	d0be      	beq.n	80094fe <USBH_SetFeature+0xa6>
      if(URB_Status == USBH_URB_STALL)
 8009580:	2805      	cmp	r0, #5
 8009582:	d189      	bne.n	8009498 <USBH_SetFeature+0x40>
      phost->RequestState = CMD_SEND;
 8009584:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8009586:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8009588:	2503      	movs	r5, #3
      phost->RequestState = CMD_SEND;
 800958a:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800958c:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800958e:	e784      	b.n	800949a <USBH_SetFeature+0x42>
    USBH_CtlSendData (phost,
 8009590:	2200      	movs	r2, #0
 8009592:	2501      	movs	r5, #1
 8009594:	7943      	ldrb	r3, [r0, #5]
 8009596:	4611      	mov	r1, r2
 8009598:	9500      	str	r5, [sp, #0]
 800959a:	f000 f9ef 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800959e:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80095a2:	230a      	movs	r3, #10
     phost->Control.timer = (uint16_t)phost->Timer;
 80095a4:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80095a6:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 80095a8:	e777      	b.n	800949a <USBH_SetFeature+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80095aa:	7941      	ldrb	r1, [r0, #5]
 80095ac:	f014 fb8a 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80095b0:	2801      	cmp	r0, #1
 80095b2:	d006      	beq.n	80095c2 <USBH_SetFeature+0x16a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80095b4:	2802      	cmp	r0, #2
 80095b6:	f47f af6d 	bne.w	8009494 <USBH_SetFeature+0x3c>
          phost->Control.state = CTRL_STATUS_OUT;
 80095ba:	2309      	movs	r3, #9
  USBH_StatusTypeDef status = USBH_BUSY;
 80095bc:	2501      	movs	r5, #1
          phost->Control.state = CTRL_STATUS_OUT;
 80095be:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 80095c0:	e76b      	b.n	800949a <USBH_SetFeature+0x42>
      phost->Control.state =CTRL_IDLE;
 80095c2:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 80095c4:	2201      	movs	r2, #1
      status = USBH_OK;
 80095c6:	461d      	mov	r5, r3
      phost->RequestState = CMD_SEND;
 80095c8:	70a2      	strb	r2, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 80095ca:	7623      	strb	r3, [r4, #24]
}
 80095cc:	4628      	mov	r0, r5
 80095ce:	b003      	add	sp, #12
 80095d0:	bd30      	pop	{r4, r5, pc}
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80095d2:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
 80095d6:	2106      	movs	r1, #6
 80095d8:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	7663      	strb	r3, [r4, #25]
      if (status == USBH_FAIL)
 80095de:	e7b9      	b.n	8009554 <USBH_SetFeature+0xfc>
        if (direction == USB_D2H)
 80095e0:	0613      	lsls	r3, r2, #24
 80095e2:	d4ea      	bmi.n	80095ba <USBH_SetFeature+0x162>
          phost->Control.state = CTRL_STATUS_IN;
 80095e4:	2307      	movs	r3, #7
 80095e6:	2501      	movs	r5, #1
 80095e8:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 80095ea:	e756      	b.n	800949a <USBH_SetFeature+0x42>
      if (phost->Control.setup.b.wLength.w != 0U)
 80095ec:	8ae3      	ldrh	r3, [r4, #22]
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80095ee:	7c22      	ldrb	r2, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f5      	beq.n	80095e0 <USBH_SetFeature+0x188>
        if (direction == USB_D2H)
 80095f4:	0612      	lsls	r2, r2, #24
 80095f6:	d403      	bmi.n	8009600 <USBH_SetFeature+0x1a8>
          phost->Control.state = CTRL_DATA_OUT;
 80095f8:	2305      	movs	r3, #5
 80095fa:	2501      	movs	r5, #1
 80095fc:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 80095fe:	e74c      	b.n	800949a <USBH_SetFeature+0x42>
          phost->Control.state = CTRL_DATA_IN;
 8009600:	2303      	movs	r3, #3
 8009602:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 8009604:	e749      	b.n	800949a <USBH_SetFeature+0x42>
 8009606:	bf00      	nop

08009608 <USBH_ClrFeature>:
{
 8009608:	b530      	push	{r4, r5, lr}
  if(phost->RequestState == CMD_SEND)
 800960a:	7885      	ldrb	r5, [r0, #2]
{
 800960c:	b083      	sub	sp, #12
 800960e:	4604      	mov	r4, r0
  if(phost->RequestState == CMD_SEND)
 8009610:	2d01      	cmp	r5, #1
 8009612:	d01d      	beq.n	8009650 <USBH_ClrFeature+0x48>
  switch (phost->RequestState)
 8009614:	2d02      	cmp	r5, #2
 8009616:	d117      	bne.n	8009648 <USBH_ClrFeature+0x40>
  switch (phost->Control.state)
 8009618:	f890 c018 	ldrb.w	ip, [r0, #24]
 800961c:	f10c 33ff 	add.w	r3, ip, #4294967295
 8009620:	2b0a      	cmp	r3, #10
 8009622:	d811      	bhi.n	8009648 <USBH_ClrFeature+0x40>
 8009624:	e8df f003 	tbb	[pc, r3]
 8009628:	06473930 	.word	0x06473930
 800962c:	7d716154 	.word	0x7d716154
 8009630:	998c      	.short	0x998c
 8009632:	22          	.byte	0x22
 8009633:	00          	.byte	0x00
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009634:	7901      	ldrb	r1, [r0, #4]
 8009636:	f014 fb45 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800963a:	2801      	cmp	r0, #1
 800963c:	f000 8095 	beq.w	800976a <USBH_ClrFeature+0x162>
    if  (URB_Status == USBH_URB_STALL)
 8009640:	2805      	cmp	r0, #5
 8009642:	d077      	beq.n	8009734 <USBH_ClrFeature+0x12c>
      if (URB_Status == USBH_URB_ERROR)
 8009644:	2804      	cmp	r0, #4
 8009646:	d032      	beq.n	80096ae <USBH_ClrFeature+0xa6>
  switch (phost->Control.state)
 8009648:	2501      	movs	r5, #1
}
 800964a:	4628      	mov	r0, r5
 800964c:	b003      	add	sp, #12
 800964e:	bd30      	pop	{r4, r5, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009650:	f44f 7081 	mov.w	r0, #258	; 0x102
    phost->Control.setup.b.wLength.w = 0U;
 8009654:	2300      	movs	r3, #0
    phost->RequestState = CMD_WAIT;
 8009656:	2202      	movs	r2, #2
    phost->Control.setup.b.wIndex.w = ep_num;
 8009658:	82a1      	strh	r1, [r4, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800965a:	6120      	str	r0, [r4, #16]
}
 800965c:	4628      	mov	r0, r5
    phost->Control.setup.b.wLength.w = 0U;
 800965e:	82e3      	strh	r3, [r4, #22]
    phost->Control.buff = buff;
 8009660:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 8009662:	81a3      	strh	r3, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8009664:	7625      	strb	r5, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8009666:	70a2      	strb	r2, [r4, #2]
}
 8009668:	b003      	add	sp, #12
 800966a:	bd30      	pop	{r4, r5, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800966c:	7e43      	ldrb	r3, [r0, #25]
 800966e:	3301      	adds	r3, #1
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b02      	cmp	r3, #2
 8009674:	7643      	strb	r3, [r0, #25]
 8009676:	f200 8084 	bhi.w	8009782 <USBH_ClrFeature+0x17a>
      USBH_LL_Stop(phost);
 800967a:	f014 fab5 	bl	801dbe8 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 800967e:	2301      	movs	r3, #1
      phost->RequestState = CMD_SEND;
 8009680:	461d      	mov	r5, r3
      phost->Control.state = CTRL_SETUP;
 8009682:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8009684:	70a3      	strb	r3, [r4, #2]
    if (status == USBH_OK)
 8009686:	e7e0      	b.n	800964a <USBH_ClrFeature+0x42>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009688:	7942      	ldrb	r2, [r0, #5]
 800968a:	f100 0110 	add.w	r1, r0, #16
  USBH_StatusTypeDef status = USBH_BUSY;
 800968e:	4665      	mov	r5, ip
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009690:	f000 f964 	bl	800995c <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8009694:	2302      	movs	r3, #2
 8009696:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009698:	e7d7      	b.n	800964a <USBH_ClrFeature+0x42>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800969a:	7941      	ldrb	r1, [r0, #5]
 800969c:	f014 fb12 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80096a0:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096a2:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 80096a4:	d07a      	beq.n	800979c <USBH_ClrFeature+0x194>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80096a6:	2804      	cmp	r0, #4
 80096a8:	d001      	beq.n	80096ae <USBH_ClrFeature+0xa6>
 80096aa:	2802      	cmp	r0, #2
 80096ac:	d1cc      	bne.n	8009648 <USBH_ClrFeature+0x40>
        phost->Control.state = CTRL_ERROR;
 80096ae:	230b      	movs	r3, #11
  USBH_StatusTypeDef status = USBH_BUSY;
 80096b0:	2501      	movs	r5, #1
        phost->Control.state = CTRL_ERROR;
 80096b2:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 80096b4:	e7c9      	b.n	800964a <USBH_ClrFeature+0x42>
    phost->Control.timer = (uint16_t)phost->Timer;
 80096b6:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80096ba:	2501      	movs	r5, #1
    USBH_CtlReceiveData(phost,
 80096bc:	7923      	ldrb	r3, [r4, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 80096be:	81e0      	strh	r0, [r4, #14]
    USBH_CtlReceiveData(phost,
 80096c0:	4620      	mov	r0, r4
 80096c2:	89a2      	ldrh	r2, [r4, #12]
 80096c4:	68a1      	ldr	r1, [r4, #8]
 80096c6:	f000 f973 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80096ca:	2304      	movs	r3, #4
 80096cc:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 80096ce:	e7bc      	b.n	800964a <USBH_ClrFeature+0x42>
    USBH_CtlSendData (phost,
 80096d0:	2501      	movs	r5, #1
 80096d2:	7943      	ldrb	r3, [r0, #5]
 80096d4:	8982      	ldrh	r2, [r0, #12]
 80096d6:	6881      	ldr	r1, [r0, #8]
 80096d8:	9500      	str	r5, [sp, #0]
 80096da:	f000 f94f 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80096de:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80096e2:	2306      	movs	r3, #6
     phost->Control.timer = (uint16_t)phost->Timer;
 80096e4:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80096e6:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 80096e8:	e7af      	b.n	800964a <USBH_ClrFeature+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80096ea:	7941      	ldrb	r1, [r0, #5]
 80096ec:	f014 faea 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80096f0:	2801      	cmp	r0, #1
 80096f2:	d04f      	beq.n	8009794 <USBH_ClrFeature+0x18c>
    else if  (URB_Status == USBH_URB_STALL)
 80096f4:	2805      	cmp	r0, #5
 80096f6:	d01d      	beq.n	8009734 <USBH_ClrFeature+0x12c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80096f8:	2802      	cmp	r0, #2
 80096fa:	d055      	beq.n	80097a8 <USBH_ClrFeature+0x1a0>
      if (URB_Status == USBH_URB_ERROR)
 80096fc:	2804      	cmp	r0, #4
 80096fe:	d1a3      	bne.n	8009648 <USBH_ClrFeature+0x40>
        phost->Control.state = CTRL_ERROR;
 8009700:	230b      	movs	r3, #11
 8009702:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8009704:	2301      	movs	r3, #1
 8009706:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8009708:	e79f      	b.n	800964a <USBH_ClrFeature+0x42>
    USBH_CtlReceiveData (phost,
 800970a:	2200      	movs	r2, #0
 800970c:	7903      	ldrb	r3, [r0, #4]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800970e:	2501      	movs	r5, #1
    USBH_CtlReceiveData (phost,
 8009710:	4611      	mov	r1, r2
 8009712:	f000 f94d 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8009716:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800971a:	2308      	movs	r3, #8
    phost->Control.timer = (uint16_t)phost->Timer;
 800971c:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800971e:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8009720:	e793      	b.n	800964a <USBH_ClrFeature+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009722:	7901      	ldrb	r1, [r0, #4]
 8009724:	f014 face 	bl	801dcc4 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8009728:	2801      	cmp	r0, #1
 800972a:	d022      	beq.n	8009772 <USBH_ClrFeature+0x16a>
    else if (URB_Status == USBH_URB_ERROR)
 800972c:	2804      	cmp	r0, #4
 800972e:	d0be      	beq.n	80096ae <USBH_ClrFeature+0xa6>
      if(URB_Status == USBH_URB_STALL)
 8009730:	2805      	cmp	r0, #5
 8009732:	d189      	bne.n	8009648 <USBH_ClrFeature+0x40>
      phost->RequestState = CMD_SEND;
 8009734:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8009736:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8009738:	2503      	movs	r5, #3
      phost->RequestState = CMD_SEND;
 800973a:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800973c:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800973e:	e784      	b.n	800964a <USBH_ClrFeature+0x42>
    USBH_CtlSendData (phost,
 8009740:	2200      	movs	r2, #0
 8009742:	2501      	movs	r5, #1
 8009744:	7943      	ldrb	r3, [r0, #5]
 8009746:	4611      	mov	r1, r2
 8009748:	9500      	str	r5, [sp, #0]
 800974a:	f000 f917 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800974e:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009752:	230a      	movs	r3, #10
     phost->Control.timer = (uint16_t)phost->Timer;
 8009754:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009756:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009758:	e777      	b.n	800964a <USBH_ClrFeature+0x42>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800975a:	7941      	ldrb	r1, [r0, #5]
 800975c:	f014 fab2 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009760:	2801      	cmp	r0, #1
 8009762:	d006      	beq.n	8009772 <USBH_ClrFeature+0x16a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009764:	2802      	cmp	r0, #2
 8009766:	f47f af6d 	bne.w	8009644 <USBH_ClrFeature+0x3c>
          phost->Control.state = CTRL_STATUS_OUT;
 800976a:	2309      	movs	r3, #9
  USBH_StatusTypeDef status = USBH_BUSY;
 800976c:	2501      	movs	r5, #1
          phost->Control.state = CTRL_STATUS_OUT;
 800976e:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009770:	e76b      	b.n	800964a <USBH_ClrFeature+0x42>
      phost->Control.state =CTRL_IDLE;
 8009772:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 8009774:	2201      	movs	r2, #1
      status = USBH_OK;
 8009776:	461d      	mov	r5, r3
      phost->RequestState = CMD_SEND;
 8009778:	70a2      	strb	r2, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800977a:	7623      	strb	r3, [r4, #24]
}
 800977c:	4628      	mov	r0, r5
 800977e:	b003      	add	sp, #12
 8009780:	bd30      	pop	{r4, r5, pc}
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009782:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
 8009786:	2106      	movs	r1, #6
 8009788:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	7663      	strb	r3, [r4, #25]
      if (status == USBH_FAIL)
 800978e:	e7b9      	b.n	8009704 <USBH_ClrFeature+0xfc>
        if (direction == USB_D2H)
 8009790:	0613      	lsls	r3, r2, #24
 8009792:	d4ea      	bmi.n	800976a <USBH_ClrFeature+0x162>
          phost->Control.state = CTRL_STATUS_IN;
 8009794:	2307      	movs	r3, #7
 8009796:	2501      	movs	r5, #1
 8009798:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 800979a:	e756      	b.n	800964a <USBH_ClrFeature+0x42>
      if (phost->Control.setup.b.wLength.w != 0U)
 800979c:	8ae3      	ldrh	r3, [r4, #22]
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800979e:	7c22      	ldrb	r2, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0f5      	beq.n	8009790 <USBH_ClrFeature+0x188>
        if (direction == USB_D2H)
 80097a4:	0612      	lsls	r2, r2, #24
 80097a6:	d403      	bmi.n	80097b0 <USBH_ClrFeature+0x1a8>
          phost->Control.state = CTRL_DATA_OUT;
 80097a8:	2305      	movs	r3, #5
 80097aa:	2501      	movs	r5, #1
 80097ac:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 80097ae:	e74c      	b.n	800964a <USBH_ClrFeature+0x42>
          phost->Control.state = CTRL_DATA_IN;
 80097b0:	2303      	movs	r3, #3
 80097b2:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 80097b4:	e749      	b.n	800964a <USBH_ClrFeature+0x42>
 80097b6:	bf00      	nop

080097b8 <USBH_CtlReq>:
{
 80097b8:	b530      	push	{r4, r5, lr}
  switch (phost->RequestState)
 80097ba:	7885      	ldrb	r5, [r0, #2]
{
 80097bc:	b083      	sub	sp, #12
 80097be:	4604      	mov	r4, r0
  switch (phost->RequestState)
 80097c0:	2d01      	cmp	r5, #1
 80097c2:	d01e      	beq.n	8009802 <USBH_CtlReq+0x4a>
 80097c4:	2d02      	cmp	r5, #2
 80097c6:	d118      	bne.n	80097fa <USBH_CtlReq+0x42>
  switch (phost->Control.state)
 80097c8:	f890 c018 	ldrb.w	ip, [r0, #24]
 80097cc:	f10c 33ff 	add.w	r3, ip, #4294967295
 80097d0:	2b0a      	cmp	r3, #10
 80097d2:	d812      	bhi.n	80097fa <USBH_CtlReq+0x42>
 80097d4:	e8df f003 	tbb	[pc, r3]
 80097d8:	7d850692 	.word	0x7d850692
 80097dc:	45546070 	.word	0x45546070
 80097e0:	2b38      	.short	0x2b38
 80097e2:	1d          	.byte	0x1d
 80097e3:	00          	.byte	0x00
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80097e4:	7941      	ldrb	r1, [r0, #5]
 80097e6:	f014 fa6d 	bl	801dcc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80097ea:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80097ec:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 80097ee:	f000 80a7 	beq.w	8009940 <USBH_CtlReq+0x188>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80097f2:	2804      	cmp	r0, #4
 80097f4:	d024      	beq.n	8009840 <USBH_CtlReq+0x88>
 80097f6:	2802      	cmp	r0, #2
 80097f8:	d022      	beq.n	8009840 <USBH_CtlReq+0x88>
  switch (phost->Control.state)
 80097fa:	2501      	movs	r5, #1
}
 80097fc:	4628      	mov	r0, r5
 80097fe:	b003      	add	sp, #12
 8009800:	bd30      	pop	{r4, r5, pc}
    phost->RequestState = CMD_WAIT;
 8009802:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8009804:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 8009806:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 8009808:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 800980a:	7083      	strb	r3, [r0, #2]
}
 800980c:	4628      	mov	r0, r5
 800980e:	b003      	add	sp, #12
 8009810:	bd30      	pop	{r4, r5, pc}
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009812:	7e43      	ldrb	r3, [r0, #25]
 8009814:	3301      	adds	r3, #1
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b02      	cmp	r3, #2
 800981a:	7643      	strb	r3, [r0, #25]
 800981c:	f200 8085 	bhi.w	800992a <USBH_CtlReq+0x172>
      USBH_LL_Stop(phost);
 8009820:	f014 f9e2 	bl	801dbe8 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8009824:	2301      	movs	r3, #1
      phost->RequestState = CMD_SEND;
 8009826:	461d      	mov	r5, r3
      phost->Control.state = CTRL_SETUP;
 8009828:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 800982a:	70a3      	strb	r3, [r4, #2]
    if (status == USBH_OK)
 800982c:	e7e6      	b.n	80097fc <USBH_CtlReq+0x44>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800982e:	7941      	ldrb	r1, [r0, #5]
 8009830:	f014 fa48 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009834:	2801      	cmp	r0, #1
 8009836:	d06a      	beq.n	800990e <USBH_CtlReq+0x156>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009838:	2802      	cmp	r0, #2
 800983a:	d072      	beq.n	8009922 <USBH_CtlReq+0x16a>
      if (URB_Status == USBH_URB_ERROR)
 800983c:	2804      	cmp	r0, #4
 800983e:	d1dc      	bne.n	80097fa <USBH_CtlReq+0x42>
        phost->Control.state = CTRL_ERROR;
 8009840:	230b      	movs	r3, #11
  USBH_StatusTypeDef status = USBH_BUSY;
 8009842:	2501      	movs	r5, #1
        phost->Control.state = CTRL_ERROR;
 8009844:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009846:	e7d9      	b.n	80097fc <USBH_CtlReq+0x44>
    USBH_CtlSendData (phost,
 8009848:	2200      	movs	r2, #0
 800984a:	2501      	movs	r5, #1
 800984c:	7943      	ldrb	r3, [r0, #5]
 800984e:	4611      	mov	r1, r2
 8009850:	9500      	str	r5, [sp, #0]
 8009852:	f000 f893 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8009856:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800985a:	230a      	movs	r3, #10
     phost->Control.timer = (uint16_t)phost->Timer;
 800985c:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800985e:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009860:	e7cc      	b.n	80097fc <USBH_CtlReq+0x44>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009862:	7901      	ldrb	r1, [r0, #4]
 8009864:	f014 fa2e 	bl	801dcc4 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8009868:	2801      	cmp	r0, #1
 800986a:	d050      	beq.n	800990e <USBH_CtlReq+0x156>
    else if (URB_Status == USBH_URB_ERROR)
 800986c:	2804      	cmp	r0, #4
 800986e:	d0e7      	beq.n	8009840 <USBH_CtlReq+0x88>
      if(URB_Status == USBH_URB_STALL)
 8009870:	2805      	cmp	r0, #5
 8009872:	d1c2      	bne.n	80097fa <USBH_CtlReq+0x42>
      phost->RequestState = CMD_SEND;
 8009874:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8009876:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8009878:	2503      	movs	r5, #3
      phost->RequestState = CMD_SEND;
 800987a:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800987c:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800987e:	e7bd      	b.n	80097fc <USBH_CtlReq+0x44>
    USBH_CtlReceiveData (phost,
 8009880:	2200      	movs	r2, #0
 8009882:	7903      	ldrb	r3, [r0, #4]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009884:	2501      	movs	r5, #1
    USBH_CtlReceiveData (phost,
 8009886:	4611      	mov	r1, r2
 8009888:	f000 f892 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 800988c:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009890:	2308      	movs	r3, #8
    phost->Control.timer = (uint16_t)phost->Timer;
 8009892:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009894:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 8009896:	e7b1      	b.n	80097fc <USBH_CtlReq+0x44>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009898:	7941      	ldrb	r1, [r0, #5]
 800989a:	f014 fa13 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800989e:	2801      	cmp	r0, #1
 80098a0:	d04a      	beq.n	8009938 <USBH_CtlReq+0x180>
    else if  (URB_Status == USBH_URB_STALL)
 80098a2:	2805      	cmp	r0, #5
 80098a4:	d0e6      	beq.n	8009874 <USBH_CtlReq+0xbc>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80098a6:	2802      	cmp	r0, #2
 80098a8:	d050      	beq.n	800994c <USBH_CtlReq+0x194>
      if (URB_Status == USBH_URB_ERROR)
 80098aa:	2804      	cmp	r0, #4
 80098ac:	d1a5      	bne.n	80097fa <USBH_CtlReq+0x42>
        phost->Control.state = CTRL_ERROR;
 80098ae:	230b      	movs	r3, #11
 80098b0:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80098b2:	2301      	movs	r3, #1
 80098b4:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 80098b6:	e7a1      	b.n	80097fc <USBH_CtlReq+0x44>
    USBH_CtlSendData (phost,
 80098b8:	2501      	movs	r5, #1
 80098ba:	7943      	ldrb	r3, [r0, #5]
 80098bc:	8982      	ldrh	r2, [r0, #12]
 80098be:	6881      	ldr	r1, [r0, #8]
 80098c0:	9500      	str	r5, [sp, #0]
 80098c2:	f000 f85b 	bl	800997c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80098c6:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80098ca:	2306      	movs	r3, #6
     phost->Control.timer = (uint16_t)phost->Timer;
 80098cc:	81e2      	strh	r2, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80098ce:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 80098d0:	e794      	b.n	80097fc <USBH_CtlReq+0x44>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80098d2:	7901      	ldrb	r1, [r0, #4]
 80098d4:	f014 f9f6 	bl	801dcc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80098d8:	2801      	cmp	r0, #1
 80098da:	d022      	beq.n	8009922 <USBH_CtlReq+0x16a>
    if  (URB_Status == USBH_URB_STALL)
 80098dc:	2805      	cmp	r0, #5
 80098de:	d1ad      	bne.n	800983c <USBH_CtlReq+0x84>
 80098e0:	e7c8      	b.n	8009874 <USBH_CtlReq+0xbc>
    phost->Control.timer = (uint16_t)phost->Timer;
 80098e2:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80098e6:	2501      	movs	r5, #1
    USBH_CtlReceiveData(phost,
 80098e8:	7923      	ldrb	r3, [r4, #4]
    phost->Control.timer = (uint16_t)phost->Timer;
 80098ea:	81e0      	strh	r0, [r4, #14]
    USBH_CtlReceiveData(phost,
 80098ec:	4620      	mov	r0, r4
 80098ee:	89a2      	ldrh	r2, [r4, #12]
 80098f0:	68a1      	ldr	r1, [r4, #8]
 80098f2:	f000 f85d 	bl	80099b0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80098f6:	2304      	movs	r3, #4
 80098f8:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 80098fa:	e77f      	b.n	80097fc <USBH_CtlReq+0x44>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80098fc:	7942      	ldrb	r2, [r0, #5]
 80098fe:	f100 0110 	add.w	r1, r0, #16
  USBH_StatusTypeDef status = USBH_BUSY;
 8009902:	4665      	mov	r5, ip
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009904:	f000 f82a 	bl	800995c <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8009908:	2302      	movs	r3, #2
 800990a:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 800990c:	e776      	b.n	80097fc <USBH_CtlReq+0x44>
      phost->Control.state =CTRL_IDLE;
 800990e:	2300      	movs	r3, #0
      phost->RequestState = CMD_SEND;
 8009910:	2201      	movs	r2, #1
      status = USBH_OK;
 8009912:	461d      	mov	r5, r3
      phost->RequestState = CMD_SEND;
 8009914:	70a2      	strb	r2, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8009916:	7623      	strb	r3, [r4, #24]
}
 8009918:	4628      	mov	r0, r5
 800991a:	b003      	add	sp, #12
 800991c:	bd30      	pop	{r4, r5, pc}
        if (direction == USB_D2H)
 800991e:	0613      	lsls	r3, r2, #24
 8009920:	d50a      	bpl.n	8009938 <USBH_CtlReq+0x180>
          phost->Control.state = CTRL_STATUS_OUT;
 8009922:	2309      	movs	r3, #9
  USBH_StatusTypeDef status = USBH_BUSY;
 8009924:	2501      	movs	r5, #1
          phost->Control.state = CTRL_STATUS_OUT;
 8009926:	7623      	strb	r3, [r4, #24]
    else if (status == USBH_NOT_SUPPORTED)
 8009928:	e768      	b.n	80097fc <USBH_CtlReq+0x44>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800992a:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
 800992e:	2106      	movs	r1, #6
 8009930:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	7663      	strb	r3, [r4, #25]
      if (status == USBH_FAIL)
 8009936:	e7bc      	b.n	80098b2 <USBH_CtlReq+0xfa>
          phost->Control.state = CTRL_STATUS_IN;
 8009938:	2307      	movs	r3, #7
 800993a:	2501      	movs	r5, #1
 800993c:	7623      	strb	r3, [r4, #24]
    if (status == USBH_OK)
 800993e:	e75d      	b.n	80097fc <USBH_CtlReq+0x44>
      if (phost->Control.setup.b.wLength.w != 0U)
 8009940:	8ae3      	ldrh	r3, [r4, #22]
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009942:	7c22      	ldrb	r2, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0ea      	beq.n	800991e <USBH_CtlReq+0x166>
        if (direction == USB_D2H)
 8009948:	0612      	lsls	r2, r2, #24
 800994a:	d403      	bmi.n	8009954 <USBH_CtlReq+0x19c>
          phost->Control.state = CTRL_DATA_OUT;
 800994c:	2305      	movs	r3, #5
 800994e:	2501      	movs	r5, #1
 8009950:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 8009952:	e753      	b.n	80097fc <USBH_CtlReq+0x44>
          phost->Control.state = CTRL_DATA_IN;
 8009954:	2303      	movs	r3, #3
 8009956:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 8009958:	e750      	b.n	80097fc <USBH_CtlReq+0x44>
 800995a:	bf00      	nop

0800995c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800995c:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800995e:	2400      	movs	r4, #0
{
 8009960:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009962:	2508      	movs	r5, #8
 8009964:	9101      	str	r1, [sp, #4]
 8009966:	4623      	mov	r3, r4
 8009968:	4611      	mov	r1, r2
 800996a:	9403      	str	r4, [sp, #12]
 800996c:	4622      	mov	r2, r4
 800996e:	9502      	str	r5, [sp, #8]
 8009970:	9400      	str	r4, [sp, #0]
 8009972:	f014 f98b 	bl	801dc8c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8009976:	4620      	mov	r0, r4
 8009978:	b005      	add	sp, #20
 800997a:	bd30      	pop	{r4, r5, pc}

0800997c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800997c:	b510      	push	{r4, lr}
 800997e:	460c      	mov	r4, r1
 8009980:	b084      	sub	sp, #16
 8009982:	4619      	mov	r1, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009984:	f890 321d 	ldrb.w	r3, [r0, #541]	; 0x21d
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009988:	e9cd 4201 	strd	r4, r2, [sp, #4]
    do_ping = 0U;
 800998c:	2b00      	cmp	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800998e:	f04f 0401 	mov.w	r4, #1
 8009992:	f04f 0300 	mov.w	r3, #0
 8009996:	9400      	str	r4, [sp, #0]
{
 8009998:	f89d 4018 	ldrb.w	r4, [sp, #24]
    do_ping = 0U;
 800999c:	bf18      	it	ne
 800999e:	461c      	movne	r4, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099a0:	461a      	mov	r2, r3
 80099a2:	9403      	str	r4, [sp, #12]
 80099a4:	f014 f972 	bl	801dc8c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80099a8:	2000      	movs	r0, #0
 80099aa:	b004      	add	sp, #16
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	bf00      	nop

080099b0 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80099b0:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099b2:	2400      	movs	r4, #0
{
 80099b4:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099b6:	2501      	movs	r5, #1
 80099b8:	9101      	str	r1, [sp, #4]
 80099ba:	4619      	mov	r1, r3
 80099bc:	9202      	str	r2, [sp, #8]
 80099be:	4623      	mov	r3, r4
 80099c0:	462a      	mov	r2, r5
 80099c2:	9403      	str	r4, [sp, #12]
 80099c4:	9500      	str	r5, [sp, #0]
 80099c6:	f014 f961 	bl	801dc8c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 80099ca:	4620      	mov	r0, r4
 80099cc:	b005      	add	sp, #20
 80099ce:	bd30      	pop	{r4, r5, pc}

080099d0 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80099d0:	b510      	push	{r4, lr}
 80099d2:	460c      	mov	r4, r1
 80099d4:	b084      	sub	sp, #16
 80099d6:	4619      	mov	r1, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 80099d8:	f890 321d 	ldrb.w	r3, [r0, #541]	; 0x21d
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099dc:	e9cd 4201 	strd	r4, r2, [sp, #4]
    do_ping = 0U;
 80099e0:	2b00      	cmp	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099e2:	f04f 0200 	mov.w	r2, #0
 80099e6:	f04f 0401 	mov.w	r4, #1
 80099ea:	f04f 0302 	mov.w	r3, #2
 80099ee:	9400      	str	r4, [sp, #0]
{
 80099f0:	f89d 4018 	ldrb.w	r4, [sp, #24]
    do_ping = 0U;
 80099f4:	bf18      	it	ne
 80099f6:	4614      	movne	r4, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80099f8:	9403      	str	r4, [sp, #12]
 80099fa:	f014 f947 	bl	801dc8c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 80099fe:	2000      	movs	r0, #0
 8009a00:	b004      	add	sp, #16
 8009a02:	bd10      	pop	{r4, pc}

08009a04 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009a04:	b530      	push	{r4, r5, lr}
 8009a06:	b085      	sub	sp, #20
 8009a08:	460d      	mov	r5, r1
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009a0a:	2400      	movs	r4, #0
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	9202      	str	r2, [sp, #8]
 8009a10:	2201      	movs	r2, #1
 8009a12:	2302      	movs	r3, #2
 8009a14:	9403      	str	r4, [sp, #12]
 8009a16:	e9cd 2500 	strd	r2, r5, [sp]
 8009a1a:	f014 f937 	bl	801dc8c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8009a1e:	4620      	mov	r0, r4
 8009a20:	b005      	add	sp, #20
 8009a22:	bd30      	pop	{r4, r5, pc}

08009a24 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8009a24:	b510      	push	{r4, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	f89d 4018 	ldrb.w	r4, [sp, #24]

  USBH_LL_OpenPipe(phost,
 8009a2c:	9400      	str	r4, [sp, #0]
{
 8009a2e:	f89d 401c 	ldrb.w	r4, [sp, #28]
  USBH_LL_OpenPipe(phost,
 8009a32:	9401      	str	r4, [sp, #4]
{
 8009a34:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  USBH_LL_OpenPipe(phost,
 8009a38:	9402      	str	r4, [sp, #8]
 8009a3a:	f014 f8ff 	bl	801dc3c <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8009a3e:	2000      	movs	r0, #0
 8009a40:	b004      	add	sp, #16
 8009a42:	bd10      	pop	{r4, pc}

08009a44 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8009a44:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8009a46:	f014 f913 	bl	801dc70 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	bd08      	pop	{r3, pc}
 8009a4e:	bf00      	nop

08009a50 <USBH_AllocPipe>:
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009a50:	f8d0 3280 	ldr.w	r3, [r0, #640]	; 0x280
 8009a54:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8009a58:	d02b      	beq.n	8009ab2 <USBH_AllocPipe+0x62>
 8009a5a:	f8d0 3284 	ldr.w	r3, [r0, #644]	; 0x284
 8009a5e:	041a      	lsls	r2, r3, #16
 8009a60:	d52f      	bpl.n	8009ac2 <USBH_AllocPipe+0x72>
 8009a62:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009a66:	041b      	lsls	r3, r3, #16
 8009a68:	d52e      	bpl.n	8009ac8 <USBH_AllocPipe+0x78>
 8009a6a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009a6e:	041a      	lsls	r2, r3, #16
 8009a70:	d52d      	bpl.n	8009ace <USBH_AllocPipe+0x7e>
 8009a72:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8009a76:	041b      	lsls	r3, r3, #16
 8009a78:	d52c      	bpl.n	8009ad4 <USBH_AllocPipe+0x84>
 8009a7a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8009a7e:	041a      	lsls	r2, r3, #16
 8009a80:	d52b      	bpl.n	8009ada <USBH_AllocPipe+0x8a>
 8009a82:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8009a86:	041b      	lsls	r3, r3, #16
 8009a88:	d52a      	bpl.n	8009ae0 <USBH_AllocPipe+0x90>
 8009a8a:	f8d0 329c 	ldr.w	r3, [r0, #668]	; 0x29c
 8009a8e:	041a      	lsls	r2, r3, #16
 8009a90:	d529      	bpl.n	8009ae6 <USBH_AllocPipe+0x96>
 8009a92:	f8d0 32a0 	ldr.w	r3, [r0, #672]	; 0x2a0
 8009a96:	041b      	lsls	r3, r3, #16
 8009a98:	d528      	bpl.n	8009aec <USBH_AllocPipe+0x9c>
 8009a9a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8009a9e:	041a      	lsls	r2, r3, #16
 8009aa0:	d506      	bpl.n	8009ab0 <USBH_AllocPipe+0x60>
 8009aa2:	f8d0 32a8 	ldr.w	r3, [r0, #680]	; 0x2a8
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	d523      	bpl.n	8009af2 <USBH_AllocPipe+0xa2>
 8009aaa:	23ff      	movs	r3, #255	; 0xff
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	4770      	bx	lr
  for (idx = 0U ; idx < 11U ; idx++)
 8009ab0:	2309      	movs	r3, #9
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ab2:	461a      	mov	r2, r3
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8009ab4:	32a0      	adds	r2, #160	; 0xa0
 8009ab6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009aba:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	4770      	bx	lr
  for (idx = 0U ; idx < 11U ; idx++)
 8009ac2:	2301      	movs	r3, #1
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	e7f5      	b.n	8009ab4 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ac8:	2302      	movs	r3, #2
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009aca:	461a      	mov	r2, r3
 8009acc:	e7f2      	b.n	8009ab4 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ace:	2303      	movs	r3, #3
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	e7ef      	b.n	8009ab4 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ad4:	2304      	movs	r3, #4
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	e7ec      	b.n	8009ab4 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ada:	2305      	movs	r3, #5
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009adc:	461a      	mov	r2, r3
 8009ade:	e7e9      	b.n	8009ab4 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ae0:	2306      	movs	r3, #6
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	e7e6      	b.n	8009ab4 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ae6:	2307      	movs	r3, #7
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ae8:	461a      	mov	r2, r3
 8009aea:	e7e3      	b.n	8009ab4 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8009aec:	2308      	movs	r3, #8
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009aee:	461a      	mov	r2, r3
 8009af0:	e7e0      	b.n	8009ab4 <USBH_AllocPipe+0x64>
  for (idx = 0U ; idx < 11U ; idx++)
 8009af2:	230a      	movs	r3, #10
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009af4:	461a      	mov	r2, r3
 8009af6:	e7dd      	b.n	8009ab4 <USBH_AllocPipe+0x64>

08009af8 <USBH_FreePipe>:
   if(idx < 11U)
 8009af8:	290a      	cmp	r1, #10
 8009afa:	d807      	bhi.n	8009b0c <USBH_FreePipe+0x14>
	 phost->Pipes[idx] &= 0x7FFFU;
 8009afc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8009b00:	f8d0 3280 	ldr.w	r3, [r0, #640]	; 0x280
 8009b04:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009b08:	f8c0 3280 	str.w	r3, [r0, #640]	; 0x280
}
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	4770      	bx	lr

08009b10 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b10:	4b03      	ldr	r3, [pc, #12]	; (8009b20 <disk_status+0x10>)
 8009b12:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8009b16:	4403      	add	r3, r0
 8009b18:	6852      	ldr	r2, [r2, #4]
 8009b1a:	7b18      	ldrb	r0, [r3, #12]
 8009b1c:	6853      	ldr	r3, [r2, #4]
 8009b1e:	4718      	bx	r3
 8009b20:	200007a0 	.word	0x200007a0

08009b24 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8009b24:	4b07      	ldr	r3, [pc, #28]	; (8009b44 <disk_initialize+0x20>)
 8009b26:	5c1a      	ldrb	r2, [r3, r0]
 8009b28:	b952      	cbnz	r2, 8009b40 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b2a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8009b2e:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 8009b30:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b34:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8009b36:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b3a:	7b08      	ldrb	r0, [r1, #12]
 8009b3c:	6813      	ldr	r3, [r2, #0]
 8009b3e:	4718      	bx	r3
  }
  return stat;
}
 8009b40:	2000      	movs	r0, #0
 8009b42:	4770      	bx	lr
 8009b44:	200007a0 	.word	0x200007a0

08009b48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b48:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b4a:	4c05      	ldr	r4, [pc, #20]	; (8009b60 <disk_read+0x18>)
 8009b4c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8009b50:	4404      	add	r4, r0
 8009b52:	686d      	ldr	r5, [r5, #4]
 8009b54:	7b20      	ldrb	r0, [r4, #12]
 8009b56:	68ac      	ldr	r4, [r5, #8]
 8009b58:	46a4      	mov	ip, r4
  return res;
}
 8009b5a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b5c:	4760      	bx	ip
 8009b5e:	bf00      	nop
 8009b60:	200007a0 	.word	0x200007a0

08009b64 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009b68:	6b82      	ldr	r2, [r0, #56]	; 0x38
	fno->fname[0] = 0;		/* Invaidate file info */
 8009b6a:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
 8009b6c:	6803      	ldr	r3, [r0, #0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8009b6e:	644d      	str	r5, [r1, #68]	; 0x44
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009b70:	2a00      	cmp	r2, #0
 8009b72:	f000 8084 	beq.w	8009c7e <get_fileinfo+0x11a>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	468a      	mov	sl, r1
 8009b7a:	2a04      	cmp	r2, #4
 8009b7c:	f000 8081 	beq.w	8009c82 <get_fileinfo+0x11e>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8009b80:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009b82:	4606      	mov	r6, r0
 8009b84:	3201      	adds	r2, #1
 8009b86:	d01b      	beq.n	8009bc0 <get_fileinfo+0x5c>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009b88:	68d9      	ldr	r1, [r3, #12]
 8009b8a:	680a      	ldr	r2, [r1, #0]
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	f000 80a1 	beq.w	8009cd4 <get_fileinfo+0x170>
 8009b92:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8009b96:	2301      	movs	r3, #1
 8009b98:	e003      	b.n	8009ba2 <get_fileinfo+0x3e>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b9e:	f000 8099 	beq.w	8009cd4 <get_fileinfo+0x170>
				fno->fname[i++] = (TCHAR)w;
 8009ba2:	f840 2f04 	str.w	r2, [r0, #4]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009ba6:	461c      	mov	r4, r3
 8009ba8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009bac:	3301      	adds	r3, #1
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	d1f3      	bne.n	8009b9a <get_fileinfo+0x36>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009bb2:	3410      	adds	r4, #16
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 8009bba:	6063      	str	r3, [r4, #4]
		}
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8009bbc:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
	i = j = 0;
 8009bc0:	f04f 0900 	mov.w	r9, #0
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
 8009bc4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8009bc6:	273f      	movs	r7, #63	; 0x3f
			fno->altname[j++] = '.';
 8009bc8:	f04f 082e 	mov.w	r8, #46	; 0x2e
	i = j = 0;
 8009bcc:	464c      	mov	r4, r9
 8009bce:	e017      	b.n	8009c00 <get_fileinfo+0x9c>
		fno->altname[j] = c;
 8009bd0:	f84a 0023 	str.w	r0, [sl, r3, lsl #2]
		if (!lfv) {
 8009bd4:	bb55      	cbnz	r5, 8009c2c <get_fileinfo+0xc8>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009bd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009bda:	2b19      	cmp	r3, #25
 8009bdc:	f200 8083 	bhi.w	8009ce6 <get_fileinfo+0x182>
 8009be0:	2c08      	cmp	r4, #8
 8009be2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8009be4:	bf8c      	ite	hi
 8009be6:	2310      	movhi	r3, #16
 8009be8:	2308      	movls	r3, #8
 8009bea:	7b11      	ldrb	r1, [r2, #12]
 8009bec:	4219      	tst	r1, r3
				c += 0x20;			/* To lower */
 8009bee:	bf18      	it	ne
 8009bf0:	3020      	addne	r0, #32
			}
			fno->fname[j] = c;
 8009bf2:	eb0a 0389 	add.w	r3, sl, r9, lsl #2
 8009bf6:	6458      	str	r0, [r3, #68]	; 0x44
		}
		j++;
 8009bf8:	f109 0901 	add.w	r9, r9, #1
	while (i < 11) {		/* Copy name body and extension */
 8009bfc:	2c0b      	cmp	r4, #11
 8009bfe:	d023      	beq.n	8009c48 <get_fileinfo+0xe4>
		c = (TCHAR)dp->dir[i++];
 8009c00:	5d10      	ldrb	r0, [r2, r4]
 8009c02:	3401      	adds	r4, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8009c04:	2820      	cmp	r0, #32
 8009c06:	d0f9      	beq.n	8009bfc <get_fileinfo+0x98>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009c08:	2805      	cmp	r0, #5
 8009c0a:	bf08      	it	eq
 8009c0c:	20e5      	moveq	r0, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8009c0e:	2c09      	cmp	r4, #9
 8009c10:	d00e      	beq.n	8009c30 <get_fileinfo+0xcc>
		c = ff_convert(c, 1);	/* OEM -> Unicode */
 8009c12:	2101      	movs	r1, #1
 8009c14:	f002 f872 	bl	800bcfc <ff_convert>
		fno->altname[j] = c;
 8009c18:	f109 0304 	add.w	r3, r9, #4
		if (!c) c = '?';
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d1d7      	bne.n	8009bd0 <get_fileinfo+0x6c>
		fno->altname[j] = c;
 8009c20:	f84a 7023 	str.w	r7, [sl, r3, lsl #2]
		if (!lfv) {
 8009c24:	b915      	cbnz	r5, 8009c2c <get_fileinfo+0xc8>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009c26:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
		if (!c) c = '?';
 8009c28:	203f      	movs	r0, #63	; 0x3f
 8009c2a:	e7e2      	b.n	8009bf2 <get_fileinfo+0x8e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009c2c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8009c2e:	e7e3      	b.n	8009bf8 <get_fileinfo+0x94>
			if (!lfv) fno->fname[j] = '.';
 8009c30:	b91d      	cbnz	r5, 8009c3a <get_fileinfo+0xd6>
 8009c32:	eb0a 0389 	add.w	r3, sl, r9, lsl #2
 8009c36:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
			fno->altname[j++] = '.';
 8009c3a:	f109 0304 	add.w	r3, r9, #4
 8009c3e:	f109 0901 	add.w	r9, r9, #1
 8009c42:	f84a 8023 	str.w	r8, [sl, r3, lsl #2]
 8009c46:	e7e4      	b.n	8009c12 <get_fileinfo+0xae>
	}
	if (!lfv) {
 8009c48:	b93d      	cbnz	r5, 8009c5a <get_fileinfo+0xf6>
		fno->fname[j] = 0;
 8009c4a:	eb0a 0389 	add.w	r3, sl, r9, lsl #2
 8009c4e:	645d      	str	r5, [r3, #68]	; 0x44
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8009c50:	7b13      	ldrb	r3, [r2, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bf08      	it	eq
 8009c56:	f04f 0900 	moveq.w	r9, #0
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f109 0904 	add.w	r9, r9, #4
 8009c60:	f84a 3029 	str.w	r3, [sl, r9, lsl #2]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009c64:	7ad1      	ldrb	r1, [r2, #11]
 8009c66:	f88a 100c 	strb.w	r1, [sl, #12]
	rv = rv << 8 | ptr[0];
 8009c6a:	69d1      	ldr	r1, [r2, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009c6c:	e9ca 1300 	strd	r1, r3, [sl]
	rv = rv << 8 | ptr[0];
 8009c70:	f8d2 3016 	ldr.w	r3, [r2, #22]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009c74:	0c1a      	lsrs	r2, r3, #16
 8009c76:	f8aa 300a 	strh.w	r3, [sl, #10]
 8009c7a:	f8aa 2008 	strh.w	r2, [sl, #8]
}
 8009c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		get_xdir_info(fs->dirbuf, fno);
 8009c82:	691a      	ldr	r2, [r3, #16]
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 8009c84:	f892 3023 	ldrb.w	r3, [r2, #35]	; 0x23
 8009c88:	b34b      	cbz	r3, 8009cde <get_fileinfo+0x17a>
 8009c8a:	3140      	adds	r1, #64	; 0x40
 8009c8c:	2340      	movs	r3, #64	; 0x40
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8009c8e:	06d8      	lsls	r0, r3, #27
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 8009c90:	f105 0501 	add.w	r5, r5, #1
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8009c94:	bf08      	it	eq
 8009c96:	3302      	addeq	r3, #2
		w = ld_word(dirb + si);					/* Get a character */
 8009c98:	5ad0      	ldrh	r0, [r2, r3]
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 8009c9a:	3302      	adds	r3, #2
		w = ld_word(dirb + si);					/* Get a character */
 8009c9c:	f841 0f04 	str.w	r0, [r1, #4]!
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 8009ca0:	f892 0023 	ldrb.w	r0, [r2, #35]	; 0x23
 8009ca4:	4285      	cmp	r5, r0
 8009ca6:	d3f2      	bcc.n	8009c8e <get_fileinfo+0x12a>
	fno->fname[di] = 0;						/* Terminate file name */
 8009ca8:	3510      	adds	r5, #16
 8009caa:	2100      	movs	r1, #0
 8009cac:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 8009cb0:	6059      	str	r1, [r3, #4]
	fno->altname[0] = 0;							/* No SFN */
 8009cb2:	f8ca 1010 	str.w	r1, [sl, #16]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 8009cb6:	7913      	ldrb	r3, [r2, #4]
 8009cb8:	f88a 300c 	strb.w	r3, [sl, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8009cbc:	06db      	lsls	r3, r3, #27
 8009cbe:	d50b      	bpl.n	8009cd8 <get_fileinfo+0x174>
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	e9ca 1300 	strd	r1, r3, [sl]
	rv = ptr[1];
 8009cc6:	8993      	ldrh	r3, [r2, #12]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8009cc8:	f8aa 300a 	strh.w	r3, [sl, #10]
	rv = ptr[1];
 8009ccc:	89d3      	ldrh	r3, [r2, #14]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8009cce:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8009cd2:	e7d4      	b.n	8009c7e <get_fileinfo+0x11a>
			i = j = 0;
 8009cd4:	2400      	movs	r4, #0
 8009cd6:	e76c      	b.n	8009bb2 <get_fileinfo+0x4e>
	rv = rv << 8 | ptr[0];
 8009cd8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009cda:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	return rv;
 8009cdc:	e7f1      	b.n	8009cc2 <get_fileinfo+0x15e>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8009cde:	233f      	movs	r3, #63	; 0x3f
 8009ce0:	2501      	movs	r5, #1
 8009ce2:	644b      	str	r3, [r1, #68]	; 0x44
 8009ce4:	e7e0      	b.n	8009ca8 <get_fileinfo+0x144>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009ce6:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8009ce8:	e783      	b.n	8009bf2 <get_fileinfo+0x8e>
 8009cea:	bf00      	nop

08009cec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009cec:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009cee:	f04f 36ff 	mov.w	r6, #4294967295
 8009cf2:	2300      	movs	r3, #0
{
 8009cf4:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009cf6:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009cf8:	70c3      	strb	r3, [r0, #3]
 8009cfa:	62c6      	str	r6, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009cfc:	d14a      	bne.n	8009d94 <check_fs+0xa8>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009cfe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d02:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d154      	bne.n	8009db4 <check_fs+0xc8>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009d0a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009d0e:	2be9      	cmp	r3, #233	; 0xe9
 8009d10:	d032      	beq.n	8009d78 <check_fs+0x8c>
 8009d12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009d14:	492b      	ldr	r1, [pc, #172]	; (8009dc4 <check_fs+0xd8>)
 8009d16:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8009d1a:	428a      	cmp	r2, r1
 8009d1c:	d02c      	beq.n	8009d78 <check_fs+0x8c>
	} while (--cnt && r == 0);
 8009d1e:	2beb      	cmp	r3, #235	; 0xeb
 8009d20:	d14d      	bne.n	8009dbe <check_fs+0xd2>
 8009d22:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8009d26:	2b76      	cmp	r3, #118	; 0x76
 8009d28:	d149      	bne.n	8009dbe <check_fs+0xd2>
 8009d2a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8009d2e:	2b90      	cmp	r3, #144	; 0x90
 8009d30:	d145      	bne.n	8009dbe <check_fs+0xd2>
 8009d32:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8009d36:	2b45      	cmp	r3, #69	; 0x45
 8009d38:	d141      	bne.n	8009dbe <check_fs+0xd2>
 8009d3a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009d3e:	2b58      	cmp	r3, #88	; 0x58
 8009d40:	d13d      	bne.n	8009dbe <check_fs+0xd2>
 8009d42:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009d46:	2b46      	cmp	r3, #70	; 0x46
 8009d48:	d139      	bne.n	8009dbe <check_fs+0xd2>
 8009d4a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8009d4e:	2b41      	cmp	r3, #65	; 0x41
 8009d50:	d135      	bne.n	8009dbe <check_fs+0xd2>
 8009d52:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8009d56:	2b54      	cmp	r3, #84	; 0x54
 8009d58:	d131      	bne.n	8009dbe <check_fs+0xd2>
 8009d5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009d5e:	2b20      	cmp	r3, #32
 8009d60:	d12d      	bne.n	8009dbe <check_fs+0xd2>
 8009d62:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8009d66:	2b20      	cmp	r3, #32
 8009d68:	d129      	bne.n	8009dbe <check_fs+0xd2>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8009d6a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8009d6e:	2b20      	cmp	r3, #32
 8009d70:	bf14      	ite	ne
 8009d72:	2002      	movne	r0, #2
 8009d74:	2001      	moveq	r0, #1
#endif
	return 2;
}
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8009d78:	f8d4 2066 	ldr.w	r2, [r4, #102]	; 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d7c:	4912      	ldr	r1, [pc, #72]	; (8009dc8 <check_fs+0xdc>)
 8009d7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009d82:	428a      	cmp	r2, r1
 8009d84:	d004      	beq.n	8009d90 <check_fs+0xa4>
	rv = rv << 8 | ptr[0];
 8009d86:	f8d4 1082 	ldr.w	r1, [r4, #130]	; 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009d8a:	4a10      	ldr	r2, [pc, #64]	; (8009dcc <check_fs+0xe0>)
 8009d8c:	4291      	cmp	r1, r2
 8009d8e:	d1c6      	bne.n	8009d1e <check_fs+0x32>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009d90:	2000      	movs	r0, #0
}
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d94:	460d      	mov	r5, r1
 8009d96:	460a      	mov	r2, r1
 8009d98:	2301      	movs	r3, #1
 8009d9a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8009d9e:	7840      	ldrb	r0, [r0, #1]
 8009da0:	f7ff fed2 	bl	8009b48 <disk_read>
 8009da4:	b940      	cbnz	r0, 8009db8 <check_fs+0xcc>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009da6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009daa:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
			fs->winsect = sector;
 8009dae:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d0aa      	beq.n	8009d0a <check_fs+0x1e>
 8009db4:	2003      	movs	r0, #3
}
 8009db6:	bd70      	pop	{r4, r5, r6, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009db8:	2004      	movs	r0, #4
			fs->winsect = sector;
 8009dba:	62e6      	str	r6, [r4, #44]	; 0x2c
}
 8009dbc:	bd70      	pop	{r4, r5, r6, pc}
	return 2;
 8009dbe:	2002      	movs	r0, #2
}
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	bf00      	nop
 8009dc4:	009000eb 	.word	0x009000eb
 8009dc8:	00544146 	.word	0x00544146
 8009dcc:	33544146 	.word	0x33544146

08009dd0 <find_volume.constprop.0>:
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8009dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009dd4:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 8009dd6:	6805      	ldr	r5, [r0, #0]
	*rfs = 0;
 8009dd8:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8009dda:	b19d      	cbz	r5, 8009e04 <find_volume.constprop.0+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009ddc:	682c      	ldr	r4, [r5, #0]
 8009dde:	2c1f      	cmp	r4, #31
 8009de0:	d914      	bls.n	8009e0c <find_volume.constprop.0+0x3c>
 8009de2:	2c3a      	cmp	r4, #58	; 0x3a
 8009de4:	d012      	beq.n	8009e0c <find_volume.constprop.0+0x3c>
 8009de6:	462a      	mov	r2, r5
 8009de8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8009dec:	2b1f      	cmp	r3, #31
 8009dee:	d90f      	bls.n	8009e10 <find_volume.constprop.0+0x40>
 8009df0:	2b3a      	cmp	r3, #58	; 0x3a
 8009df2:	d1f9      	bne.n	8009de8 <find_volume.constprop.0+0x18>
			i = *tp++ - '0';
 8009df4:	1d2b      	adds	r3, r5, #4
 8009df6:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d102      	bne.n	8009e04 <find_volume.constprop.0+0x34>
 8009dfe:	2d01      	cmp	r5, #1
 8009e00:	f240 8147 	bls.w	800a092 <find_volume.constprop.0+0x2c2>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e04:	260b      	movs	r6, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8009e06:	4630      	mov	r0, r6
 8009e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009e0c:	4623      	mov	r3, r4
 8009e0e:	462a      	mov	r2, r5
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009e10:	2b3a      	cmp	r3, #58	; 0x3a
 8009e12:	d0ef      	beq.n	8009df4 <find_volume.constprop.0+0x24>
		vol = 0;		/* Drive 0 */
 8009e14:	2500      	movs	r5, #0
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e16:	4baa      	ldr	r3, [pc, #680]	; (800a0c0 <find_volume.constprop.0+0x2f0>)
 8009e18:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e1c:	2c00      	cmp	r4, #0
 8009e1e:	f000 80c2 	beq.w	8009fa6 <find_volume.constprop.0+0x1d6>
	*rfs = fs;							/* Return pointer to the file system object */
 8009e22:	600c      	str	r4, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e24:	7823      	ldrb	r3, [r4, #0]
 8009e26:	b12b      	cbz	r3, 8009e34 <find_volume.constprop.0+0x64>
		stat = disk_status(fs->drv);
 8009e28:	7860      	ldrb	r0, [r4, #1]
 8009e2a:	f7ff fe71 	bl	8009b10 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e2e:	f010 0601 	ands.w	r6, r0, #1
 8009e32:	d07e      	beq.n	8009f32 <find_volume.constprop.0+0x162>
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009e34:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8009e36:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009e38:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 8009e3a:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009e3c:	f7ff fe72 	bl	8009b24 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009e40:	f010 0601 	ands.w	r6, r0, #1
 8009e44:	d174      	bne.n	8009f30 <find_volume.constprop.0+0x160>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009e46:	4631      	mov	r1, r6
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f7ff ff4f 	bl	8009cec <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009e4e:	2802      	cmp	r0, #2
 8009e50:	d072      	beq.n	8009f38 <find_volume.constprop.0+0x168>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e52:	2804      	cmp	r0, #4
 8009e54:	f000 80a5 	beq.w	8009fa2 <find_volume.constprop.0+0x1d2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e58:	2801      	cmp	r0, #1
 8009e5a:	f200 8089 	bhi.w	8009f70 <find_volume.constprop.0+0x1a0>
	bsect = 0;
 8009e5e:	4635      	mov	r5, r6
	if (fmt == 1) {
 8009e60:	2801      	cmp	r0, #1
 8009e62:	f000 8089 	beq.w	8009f78 <find_volume.constprop.0+0x1a8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e66:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 8009e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e6e:	d17f      	bne.n	8009f70 <find_volume.constprop.0+0x1a0>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009e70:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	f000 809c 	beq.w	8009fb2 <find_volume.constprop.0+0x1e2>
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009e7a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		fs->fsize = fasize;
 8009e7e:	61a2      	str	r2, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009e80:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009e82:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009e84:	2901      	cmp	r1, #1
 8009e86:	d873      	bhi.n	8009f70 <find_volume.constprop.0+0x1a0>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009e88:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8009e8c:	b288      	uxth	r0, r1
 8009e8e:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d06d      	beq.n	8009f70 <find_volume.constprop.0+0x1a0>
 8009e94:	1e48      	subs	r0, r1, #1
 8009e96:	4208      	tst	r0, r1
 8009e98:	d16a      	bne.n	8009f70 <find_volume.constprop.0+0x1a0>
	rv = ptr[1];
 8009e9a:	f8b4 c041 	ldrh.w	ip, [r4, #65]	; 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009e9e:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ea2:	f8a4 c008 	strh.w	ip, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009ea6:	d163      	bne.n	8009f70 <find_volume.constprop.0+0x1a0>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009ea8:	f8b4 0043 	ldrh.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009eac:	b900      	cbnz	r0, 8009eb0 <find_volume.constprop.0+0xe0>
	rv = rv << 8 | ptr[0];
 8009eae:	6d20      	ldr	r0, [r4, #80]	; 0x50
	rv = ptr[1];
 8009eb0:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009eb2:	2f00      	cmp	r7, #0
 8009eb4:	d05c      	beq.n	8009f70 <find_volume.constprop.0+0x1a0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009eb6:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009eba:	eb07 1e1c 	add.w	lr, r7, ip, lsr #4
 8009ebe:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009ec0:	4586      	cmp	lr, r0
 8009ec2:	d855      	bhi.n	8009f70 <find_volume.constprop.0+0x1a0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009ec4:	eba0 080e 	sub.w	r8, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009ec8:	4588      	cmp	r8, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009eca:	fbb8 f0f1 	udiv	r0, r8, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009ece:	d34f      	bcc.n	8009f70 <find_volume.constprop.0+0x1a0>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009ed0:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8009ed4:	4288      	cmp	r0, r1
 8009ed6:	f200 80df 	bhi.w	800a098 <find_volume.constprop.0+0x2c8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009eda:	f640 71f5 	movw	r1, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009ede:	442f      	add	r7, r5
		fs->volbase = bsect;							/* Volume start sector */
 8009ee0:	61e5      	str	r5, [r4, #28]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009ee2:	4288      	cmp	r0, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009ee4:	f100 0002 	add.w	r0, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8009ee8:	eb0e 0105 	add.w	r1, lr, r5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009eec:	6227      	str	r7, [r4, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009eee:	6160      	str	r0, [r4, #20]
		fs->database = bsect + sysect;					/* Data start sector */
 8009ef0:	62a1      	str	r1, [r4, #40]	; 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009ef2:	f200 8138 	bhi.w	800a166 <find_volume.constprop.0+0x396>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009ef6:	f1bc 0f00 	cmp.w	ip, #0
 8009efa:	d039      	beq.n	8009f70 <find_volume.constprop.0+0x1a0>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009efc:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009efe:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009f00:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009f02:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009f06:	f000 0001 	and.w	r0, r0, #1
 8009f0a:	eb00 0353 	add.w	r3, r0, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009f0e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009f12:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 8009f16:	d32b      	bcc.n	8009f70 <find_volume.constprop.0+0x1a0>
	fs->id = ++Fsid;		/* File system mount ID */
 8009f18:	4a6a      	ldr	r2, [pc, #424]	; (800a0c4 <find_volume.constprop.0+0x2f4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8009f1a:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009f1c:	8813      	ldrh	r3, [r2, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009f1e:	496a      	ldr	r1, [pc, #424]	; (800a0c8 <find_volume.constprop.0+0x2f8>)
	fs->id = ++Fsid;		/* File system mount ID */
 8009f20:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009f22:	60e1      	str	r1, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8009f24:	b29b      	uxth	r3, r3
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8009f26:	4969      	ldr	r1, [pc, #420]	; (800a0cc <find_volume.constprop.0+0x2fc>)
	fs->id = ++Fsid;		/* File system mount ID */
 8009f28:	8013      	strh	r3, [r2, #0]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8009f2a:	6121      	str	r1, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8009f2c:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8009f2e:	e000      	b.n	8009f32 <find_volume.constprop.0+0x162>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009f30:	2603      	movs	r6, #3
}
 8009f32:	4630      	mov	r0, r6
 8009f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f38:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
 8009f3c:	b3ab      	cbz	r3, 8009faa <find_volume.constprop.0+0x1da>
	rv = rv << 8 | ptr[0];
 8009f3e:	f8d4 91f6 	ldr.w	r9, [r4, #502]	; 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f42:	f894 3202 	ldrb.w	r3, [r4, #514]	; 0x202
 8009f46:	b393      	cbz	r3, 8009fae <find_volume.constprop.0+0x1de>
	rv = rv << 8 | ptr[0];
 8009f48:	f8d4 8206 	ldr.w	r8, [r4, #518]	; 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f4c:	f894 7212 	ldrb.w	r7, [r4, #530]	; 0x212
 8009f50:	b10f      	cbz	r7, 8009f56 <find_volume.constprop.0+0x186>
	rv = rv << 8 | ptr[0];
 8009f52:	f8d4 7216 	ldr.w	r7, [r4, #534]	; 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f56:	f894 5222 	ldrb.w	r5, [r4, #546]	; 0x222
 8009f5a:	b10d      	cbz	r5, 8009f60 <find_volume.constprop.0+0x190>
	rv = rv << 8 | ptr[0];
 8009f5c:	f8d4 5226 	ldr.w	r5, [r4, #550]	; 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f60:	f1b9 0f00 	cmp.w	r9, #0
 8009f64:	d127      	bne.n	8009fb6 <find_volume.constprop.0+0x1e6>
 8009f66:	f1b8 0f00 	cmp.w	r8, #0
 8009f6a:	d12c      	bne.n	8009fc6 <find_volume.constprop.0+0x1f6>
 8009f6c:	bb9f      	cbnz	r7, 8009fd6 <find_volume.constprop.0+0x206>
 8009f6e:	b97d      	cbnz	r5, 8009f90 <find_volume.constprop.0+0x1c0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f70:	260d      	movs	r6, #13
}
 8009f72:	4630      	mov	r0, r6
 8009f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f78:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 8009f7c:	f104 016f 	add.w	r1, r4, #111	; 0x6f
 8009f80:	e001      	b.n	8009f86 <find_volume.constprop.0+0x1b6>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8009f82:	4299      	cmp	r1, r3
 8009f84:	d02f      	beq.n	8009fe6 <find_volume.constprop.0+0x216>
 8009f86:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8009f8a:	2a00      	cmp	r2, #0
 8009f8c:	d0f9      	beq.n	8009f82 <find_volume.constprop.0+0x1b2>
 8009f8e:	e7ef      	b.n	8009f70 <find_volume.constprop.0+0x1a0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f90:	4629      	mov	r1, r5
 8009f92:	4620      	mov	r0, r4
 8009f94:	f7ff feaa 	bl	8009cec <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009f98:	2801      	cmp	r0, #1
 8009f9a:	f67f af61 	bls.w	8009e60 <find_volume.constprop.0+0x90>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f9e:	2804      	cmp	r0, #4
 8009fa0:	d1e6      	bne.n	8009f70 <find_volume.constprop.0+0x1a0>
 8009fa2:	2601      	movs	r6, #1
 8009fa4:	e7c5      	b.n	8009f32 <find_volume.constprop.0+0x162>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009fa6:	260c      	movs	r6, #12
 8009fa8:	e7c3      	b.n	8009f32 <find_volume.constprop.0+0x162>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009faa:	46b1      	mov	r9, r6
 8009fac:	e7c9      	b.n	8009f42 <find_volume.constprop.0+0x172>
 8009fae:	4698      	mov	r8, r3
 8009fb0:	e7cc      	b.n	8009f4c <find_volume.constprop.0+0x17c>
	rv = rv << 8 | ptr[0];
 8009fb2:	6d62      	ldr	r2, [r4, #84]	; 0x54
	return rv;
 8009fb4:	e761      	b.n	8009e7a <find_volume.constprop.0+0xaa>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009fb6:	4649      	mov	r1, r9
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f7ff fe97 	bl	8009cec <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009fbe:	2801      	cmp	r0, #1
 8009fc0:	d8d1      	bhi.n	8009f66 <find_volume.constprop.0+0x196>
 8009fc2:	464d      	mov	r5, r9
 8009fc4:	e74c      	b.n	8009e60 <find_volume.constprop.0+0x90>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009fc6:	4641      	mov	r1, r8
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f7ff fe8f 	bl	8009cec <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009fce:	2801      	cmp	r0, #1
 8009fd0:	d8cc      	bhi.n	8009f6c <find_volume.constprop.0+0x19c>
 8009fd2:	4645      	mov	r5, r8
 8009fd4:	e744      	b.n	8009e60 <find_volume.constprop.0+0x90>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f7ff fe87 	bl	8009cec <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009fde:	2801      	cmp	r0, #1
 8009fe0:	d8c5      	bhi.n	8009f6e <find_volume.constprop.0+0x19e>
 8009fe2:	463d      	mov	r5, r7
 8009fe4:	e73c      	b.n	8009e60 <find_volume.constprop.0+0x90>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8009fe6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8009fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fee:	d1bf      	bne.n	8009f70 <find_volume.constprop.0+0x1a0>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8009ff0:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8009ff4:	2b09      	cmp	r3, #9
 8009ff6:	d1bb      	bne.n	8009f70 <find_volume.constprop.0+0x1a0>
	rv = rv << 8 | ptr[0];
 8009ff8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8009ffa:	f04f 30ff 	mov.w	r0, #4294967295
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8009ffe:	1959      	adds	r1, r3, r5
	rv = rv << 8 | ptr[0];
 800a000:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800a002:	f143 0300 	adc.w	r3, r3, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800a006:	4288      	cmp	r0, r1
 800a008:	eb72 0003 	sbcs.w	r0, r2, r3
 800a00c:	d3b0      	bcc.n	8009f70 <find_volume.constprop.0+0x1a0>
	rv = rv << 8 | ptr[0];
 800a00e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800a012:	61a0      	str	r0, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800a014:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800a018:	2801      	cmp	r0, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800a01a:	70a0      	strb	r0, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800a01c:	d1a8      	bne.n	8009f70 <find_volume.constprop.0+0x1a0>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800a01e:	f894 709d 	ldrb.w	r7, [r4, #157]	; 0x9d
 800a022:	40b8      	lsls	r0, r7
 800a024:	b287      	uxth	r7, r0
 800a026:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800a028:	2f00      	cmp	r7, #0
 800a02a:	d0a1      	beq.n	8009f70 <find_volume.constprop.0+0x1a0>
	rv = rv << 8 | ptr[0];
 800a02c:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800a030:	4f27      	ldr	r7, [pc, #156]	; (800a0d0 <find_volume.constprop.0+0x300>)
 800a032:	45bc      	cmp	ip, r7
 800a034:	d89c      	bhi.n	8009f70 <find_volume.constprop.0+0x1a0>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a036:	b287      	uxth	r7, r0
	rv = rv << 8 | ptr[0];
 800a038:	f8d4 e080 	ldr.w	lr, [r4, #128]	; 0x80
 800a03c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
		fs->volbase = bsect;
 800a040:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800a042:	4428      	add	r0, r5
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800a044:	4475      	add	r5, lr
		fs->n_fatent = nclst + 2;
 800a046:	f10c 0e02 	add.w	lr, ip, #2
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800a04a:	6225      	str	r5, [r4, #32]
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a04c:	fb07 f50c 	mul.w	r5, r7, ip
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800a050:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a052:	182d      	adds	r5, r5, r0
		fs->n_fatent = nclst + 2;
 800a054:	f8c4 e014 	str.w	lr, [r4, #20]
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a058:	4152      	adcs	r2, r2
 800a05a:	42a9      	cmp	r1, r5
 800a05c:	4193      	sbcs	r3, r2
 800a05e:	d387      	bcc.n	8009f70 <find_volume.constprop.0+0x1a0>
	rv = rv << 8 | ptr[0];
 800a060:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800a066:	6265      	str	r5, [r4, #36]	; 0x24
	clst -= 2;
 800a068:	3d02      	subs	r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a06a:	45ac      	cmp	ip, r5
	return clst * fs->csize + fs->database;
 800a06c:	bf8c      	ite	hi
 800a06e:	fb05 0507 	mlahi	r5, r5, r7, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a072:	2500      	movls	r5, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a074:	42ab      	cmp	r3, r5
 800a076:	d02e      	beq.n	800a0d6 <find_volume.constprop.0+0x306>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a078:	2301      	movs	r3, #1
 800a07a:	462a      	mov	r2, r5
 800a07c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800a080:	7860      	ldrb	r0, [r4, #1]
 800a082:	f7ff fd61 	bl	8009b48 <disk_read>
 800a086:	b328      	cbz	r0, 800a0d4 <find_volume.constprop.0+0x304>
			fs->winsect = sector;
 800a088:	f04f 33ff 	mov.w	r3, #4294967295
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800a08c:	2601      	movs	r6, #1
			fs->winsect = sector;
 800a08e:	62e3      	str	r3, [r4, #44]	; 0x2c
	return res;
 800a090:	e74f      	b.n	8009f32 <find_volume.constprop.0+0x162>
					*path = ++tt;
 800a092:	3204      	adds	r2, #4
 800a094:	6002      	str	r2, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a096:	e6be      	b.n	8009e16 <find_volume.constprop.0+0x46>
		fs->database = bsect + sysect;					/* Data start sector */
 800a098:	eb0e 0105 	add.w	r1, lr, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a09c:	1c83      	adds	r3, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a09e:	442f      	add	r7, r5
		fs->volbase = bsect;							/* Volume start sector */
 800a0a0:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800a0a2:	62a1      	str	r1, [r4, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 800a0a4:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a0a8:	6227      	str	r7, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a0aa:	ea51 010c 	orrs.w	r1, r1, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a0ae:	6163      	str	r3, [r4, #20]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a0b0:	f47f af5e 	bne.w	8009f70 <find_volume.constprop.0+0x1a0>
	rv = rv << 8 | ptr[0];
 800a0b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a0b6:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a0b8:	6261      	str	r1, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a0ba:	2103      	movs	r1, #3
 800a0bc:	e727      	b.n	8009f0e <find_volume.constprop.0+0x13e>
 800a0be:	bf00      	nop
 800a0c0:	20000394 	.word	0x20000394
 800a0c4:	2000039c 	.word	0x2000039c
 800a0c8:	200003a0 	.word	0x200003a0
 800a0cc:	20000134 	.word	0x20000134
 800a0d0:	7ffffffd 	.word	0x7ffffffd
			fs->winsect = sector;
 800a0d4:	62e5      	str	r5, [r4, #44]	; 0x2c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a0d6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a0da:	2b81      	cmp	r3, #129	; 0x81
 800a0dc:	d05a      	beq.n	800a194 <find_volume.constprop.0+0x3c4>
 800a0de:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800a0e2:	2b81      	cmp	r3, #129	; 0x81
 800a0e4:	d052      	beq.n	800a18c <find_volume.constprop.0+0x3bc>
 800a0e6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 800a0ea:	2b81      	cmp	r3, #129	; 0x81
 800a0ec:	d049      	beq.n	800a182 <find_volume.constprop.0+0x3b2>
 800a0ee:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800a0f2:	2b81      	cmp	r3, #129	; 0x81
 800a0f4:	d040      	beq.n	800a178 <find_volume.constprop.0+0x3a8>
 800a0f6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 800a0fa:	2b81      	cmp	r3, #129	; 0x81
 800a0fc:	d05d      	beq.n	800a1ba <find_volume.constprop.0+0x3ea>
 800a0fe:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
 800a102:	2b81      	cmp	r3, #129	; 0x81
 800a104:	d054      	beq.n	800a1b0 <find_volume.constprop.0+0x3e0>
 800a106:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
 800a10a:	2b81      	cmp	r3, #129	; 0x81
 800a10c:	d04b      	beq.n	800a1a6 <find_volume.constprop.0+0x3d6>
 800a10e:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 800a112:	2b81      	cmp	r3, #129	; 0x81
 800a114:	d042      	beq.n	800a19c <find_volume.constprop.0+0x3cc>
 800a116:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800a11a:	2b81      	cmp	r3, #129	; 0x81
 800a11c:	d070      	beq.n	800a200 <find_volume.constprop.0+0x430>
 800a11e:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
 800a122:	2b81      	cmp	r3, #129	; 0x81
 800a124:	d067      	beq.n	800a1f6 <find_volume.constprop.0+0x426>
 800a126:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
 800a12a:	2b81      	cmp	r3, #129	; 0x81
 800a12c:	d05e      	beq.n	800a1ec <find_volume.constprop.0+0x41c>
 800a12e:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
 800a132:	2b81      	cmp	r3, #129	; 0x81
 800a134:	d055      	beq.n	800a1e2 <find_volume.constprop.0+0x412>
 800a136:	f894 31b0 	ldrb.w	r3, [r4, #432]	; 0x1b0
 800a13a:	2b81      	cmp	r3, #129	; 0x81
 800a13c:	d04c      	beq.n	800a1d8 <find_volume.constprop.0+0x408>
 800a13e:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
 800a142:	2b81      	cmp	r3, #129	; 0x81
 800a144:	d043      	beq.n	800a1ce <find_volume.constprop.0+0x3fe>
 800a146:	f894 31f0 	ldrb.w	r3, [r4, #496]	; 0x1f0
 800a14a:	2b81      	cmp	r3, #129	; 0x81
 800a14c:	d03a      	beq.n	800a1c4 <find_volume.constprop.0+0x3f4>
 800a14e:	f894 3210 	ldrb.w	r3, [r4, #528]	; 0x210
 800a152:	2b81      	cmp	r3, #129	; 0x81
 800a154:	f47f af0c 	bne.w	8009f70 <find_volume.constprop.0+0x1a0>
	rv = rv << 8 | ptr[0];
 800a158:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	f47f af07 	bne.w	8009f70 <find_volume.constprop.0+0x1a0>
		fmt = FS_EXFAT;			/* FAT sub-type */
 800a162:	2104      	movs	r1, #4
 800a164:	e6d8      	b.n	8009f18 <find_volume.constprop.0+0x148>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a166:	f1bc 0f00 	cmp.w	ip, #0
 800a16a:	f43f af01 	beq.w	8009f70 <find_volume.constprop.0+0x1a0>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a16e:	441f      	add	r7, r3
 800a170:	2102      	movs	r1, #2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a172:	0043      	lsls	r3, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a174:	6267      	str	r7, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a176:	e6ca      	b.n	8009f0e <find_volume.constprop.0+0x13e>
	rv = rv << 8 | ptr[0];
 800a178:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d1ba      	bne.n	800a0f6 <find_volume.constprop.0+0x326>
 800a180:	e7ef      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a182:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a186:	2b02      	cmp	r3, #2
 800a188:	d1b1      	bne.n	800a0ee <find_volume.constprop.0+0x31e>
 800a18a:	e7ea      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a18c:	6e63      	ldr	r3, [r4, #100]	; 0x64
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d1a9      	bne.n	800a0e6 <find_volume.constprop.0+0x316>
 800a192:	e7e6      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a194:	6c63      	ldr	r3, [r4, #68]	; 0x44
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a196:	2b02      	cmp	r3, #2
 800a198:	d1a1      	bne.n	800a0de <find_volume.constprop.0+0x30e>
 800a19a:	e7e2      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a19c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d1b8      	bne.n	800a116 <find_volume.constprop.0+0x346>
 800a1a4:	e7dd      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a1a6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d1af      	bne.n	800a10e <find_volume.constprop.0+0x33e>
 800a1ae:	e7d8      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a1b0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d1a6      	bne.n	800a106 <find_volume.constprop.0+0x336>
 800a1b8:	e7d3      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a1ba:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d19d      	bne.n	800a0fe <find_volume.constprop.0+0x32e>
 800a1c2:	e7ce      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a1c4:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d1c0      	bne.n	800a14e <find_volume.constprop.0+0x37e>
 800a1cc:	e7c9      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a1ce:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d1b7      	bne.n	800a146 <find_volume.constprop.0+0x376>
 800a1d6:	e7c4      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a1d8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d1ae      	bne.n	800a13e <find_volume.constprop.0+0x36e>
 800a1e0:	e7bf      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a1e2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d1a5      	bne.n	800a136 <find_volume.constprop.0+0x366>
 800a1ea:	e7ba      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a1ec:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d19c      	bne.n	800a12e <find_volume.constprop.0+0x35e>
 800a1f4:	e7b5      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a1f6:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d193      	bne.n	800a126 <find_volume.constprop.0+0x356>
 800a1fe:	e7b0      	b.n	800a162 <find_volume.constprop.0+0x392>
	rv = rv << 8 | ptr[0];
 800a200:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a204:	2b02      	cmp	r3, #2
 800a206:	d18a      	bne.n	800a11e <find_volume.constprop.0+0x34e>
 800a208:	e7ab      	b.n	800a162 <find_volume.constprop.0+0x392>
 800a20a:	bf00      	nop

0800a20c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a20c:	2901      	cmp	r1, #1
 800a20e:	d911      	bls.n	800a234 <get_fat+0x28>
{
 800a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 800a214:	6805      	ldr	r5, [r0, #0]
 800a216:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a218:	696b      	ldr	r3, [r5, #20]
 800a21a:	428b      	cmp	r3, r1
 800a21c:	d802      	bhi.n	800a224 <get_fat+0x18>
		val = 1;	/* Internal error */
 800a21e:	2001      	movs	r0, #1
}
 800a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (fs->fs_type) {
 800a224:	782b      	ldrb	r3, [r5, #0]
 800a226:	3b01      	subs	r3, #1
 800a228:	2b03      	cmp	r3, #3
 800a22a:	d8f8      	bhi.n	800a21e <get_fat+0x12>
 800a22c:	e8df f003 	tbb	[pc, r3]
 800a230:	042f3e4b 	.word	0x042f3e4b
		val = 1;	/* Internal error */
 800a234:	2001      	movs	r0, #1
}
 800a236:	4770      	bx	lr
			if (obj->objsize) {
 800a238:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 800a23c:	ea53 0102 	orrs.w	r1, r3, r2
 800a240:	d0ed      	beq.n	800a21e <get_fat+0x12>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a242:	79c6      	ldrb	r6, [r0, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a244:	6881      	ldr	r1, [r0, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a246:	2e02      	cmp	r6, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a248:	eba4 0101 	sub.w	r1, r4, r1
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a24c:	f000 8087 	beq.w	800a35e <get_fat+0x152>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a250:	2e03      	cmp	r6, #3
 800a252:	f000 8093 	beq.w	800a37c <get_fat+0x170>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a256:	69c3      	ldr	r3, [r0, #28]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f040 8093 	bne.w	800a384 <get_fat+0x178>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a25e:	6a2e      	ldr	r6, [r5, #32]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a260:	f105 0730 	add.w	r7, r5, #48	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a264:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a266:	eb06 16d4 	add.w	r6, r6, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a26a:	429e      	cmp	r6, r3
 800a26c:	d008      	beq.n	800a280 <get_fat+0x74>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a26e:	2301      	movs	r3, #1
 800a270:	4632      	mov	r2, r6
 800a272:	7868      	ldrb	r0, [r5, #1]
 800a274:	4639      	mov	r1, r7
 800a276:	f7ff fc67 	bl	8009b48 <disk_read>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d16a      	bne.n	800a354 <get_fat+0x148>
			fs->winsect = sector;
 800a27e:	62ee      	str	r6, [r5, #44]	; 0x2c
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a280:	00a3      	lsls	r3, r4, #2
 800a282:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800a286:	58f8      	ldr	r0, [r7, r3]
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a288:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a28c:	e7c8      	b.n	800a220 <get_fat+0x14>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a28e:	6a2e      	ldr	r6, [r5, #32]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a290:	f105 0730 	add.w	r7, r5, #48	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a294:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a296:	eb06 16d1 	add.w	r6, r6, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a29a:	429e      	cmp	r6, r3
 800a29c:	d145      	bne.n	800a32a <get_fat+0x11e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a29e:	00a4      	lsls	r4, r4, #2
 800a2a0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800a2a4:	5938      	ldr	r0, [r7, r4]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2a6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800a2aa:	e7b9      	b.n	800a220 <get_fat+0x14>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2ac:	6a2e      	ldr	r6, [r5, #32]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a2ae:	f105 0730 	add.w	r7, r5, #48	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a2b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2b4:	eb06 2611 	add.w	r6, r6, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a2b8:	429e      	cmp	r6, r3
 800a2ba:	d12d      	bne.n	800a318 <get_fat+0x10c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a2bc:	0064      	lsls	r4, r4, #1
 800a2be:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800a2c2:	5b38      	ldrh	r0, [r7, r4]
			break;
 800a2c4:	e7ac      	b.n	800a220 <get_fat+0x14>
			bc = (UINT)clst; bc += bc / 2;
 800a2c6:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2ca:	6a2b      	ldr	r3, [r5, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a2cc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2ce:	eb03 2756 	add.w	r7, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a2d2:	428f      	cmp	r7, r1
 800a2d4:	d132      	bne.n	800a33c <get_fat+0x130>
			wc = fs->win[bc++ % SS(fs)];
 800a2d6:	1c77      	adds	r7, r6, #1
 800a2d8:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2dc:	eb03 2857 	add.w	r8, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800a2e0:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a2e2:	4588      	cmp	r8, r1
			wc = fs->win[bc++ % SS(fs)];
 800a2e4:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a2e8:	d009      	beq.n	800a2fe <get_fat+0xf2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800a2f2:	7868      	ldrb	r0, [r5, #1]
 800a2f4:	f7ff fc28 	bl	8009b48 <disk_read>
 800a2f8:	bb60      	cbnz	r0, 800a354 <get_fat+0x148>
			fs->winsect = sector;
 800a2fa:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
			wc |= fs->win[bc % SS(fs)] << 8;
 800a2fe:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a302:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800a304:	443d      	add	r5, r7
 800a306:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 800a30a:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a30e:	bf4c      	ite	mi
 800a310:	0900      	lsrmi	r0, r0, #4
 800a312:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800a316:	e783      	b.n	800a220 <get_fat+0x14>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a318:	2301      	movs	r3, #1
 800a31a:	4632      	mov	r2, r6
 800a31c:	7868      	ldrb	r0, [r5, #1]
 800a31e:	4639      	mov	r1, r7
 800a320:	f7ff fc12 	bl	8009b48 <disk_read>
 800a324:	b9b0      	cbnz	r0, 800a354 <get_fat+0x148>
			fs->winsect = sector;
 800a326:	62ee      	str	r6, [r5, #44]	; 0x2c
	return res;
 800a328:	e7c8      	b.n	800a2bc <get_fat+0xb0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a32a:	2301      	movs	r3, #1
 800a32c:	4632      	mov	r2, r6
 800a32e:	7868      	ldrb	r0, [r5, #1]
 800a330:	4639      	mov	r1, r7
 800a332:	f7ff fc09 	bl	8009b48 <disk_read>
 800a336:	b968      	cbnz	r0, 800a354 <get_fat+0x148>
			fs->winsect = sector;
 800a338:	62ee      	str	r6, [r5, #44]	; 0x2c
	return res;
 800a33a:	e7b0      	b.n	800a29e <get_fat+0x92>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a33c:	2301      	movs	r3, #1
 800a33e:	463a      	mov	r2, r7
 800a340:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800a344:	7868      	ldrb	r0, [r5, #1]
 800a346:	f7ff fbff 	bl	8009b48 <disk_read>
 800a34a:	b918      	cbnz	r0, 800a354 <get_fat+0x148>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a34c:	6a2b      	ldr	r3, [r5, #32]
 800a34e:	4639      	mov	r1, r7
			fs->winsect = sector;
 800a350:	62ef      	str	r7, [r5, #44]	; 0x2c
	return res;
 800a352:	e7c0      	b.n	800a2d6 <get_fat+0xca>
			fs->winsect = sector;
 800a354:	f04f 33ff 	mov.w	r3, #4294967295
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a358:	4618      	mov	r0, r3
			fs->winsect = sector;
 800a35a:	62eb      	str	r3, [r5, #44]	; 0x2c
	return res;
 800a35c:	e760      	b.n	800a220 <get_fat+0x14>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a35e:	3b01      	subs	r3, #1
 800a360:	8968      	ldrh	r0, [r5, #10]
 800a362:	f142 32ff 	adc.w	r2, r2, #4294967295
 800a366:	0a5b      	lsrs	r3, r3, #9
 800a368:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a36c:	fbb3 f3f0 	udiv	r3, r3, r0
					if (cofs <= clen) {
 800a370:	4299      	cmp	r1, r3
 800a372:	f63f af54 	bhi.w	800a21e <get_fat+0x12>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a376:	d005      	beq.n	800a384 <get_fat+0x178>
 800a378:	1c60      	adds	r0, r4, #1
 800a37a:	e751      	b.n	800a220 <get_fat+0x14>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a37c:	6983      	ldr	r3, [r0, #24]
 800a37e:	428b      	cmp	r3, r1
 800a380:	d8fa      	bhi.n	800a378 <get_fat+0x16c>
 800a382:	e768      	b.n	800a256 <get_fat+0x4a>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a384:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
 800a388:	e74a      	b.n	800a220 <get_fat+0x14>
 800a38a:	bf00      	nop

0800a38c <dir_next.constprop.0>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a38c:	6b83      	ldr	r3, [r0, #56]	; 0x38
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800a38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a392:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a394:	2b00      	cmp	r3, #0
 800a396:	d034      	beq.n	800a402 <dir_next.constprop.0+0x76>
	FATFS *fs = dp->obj.fs;
 800a398:	6806      	ldr	r6, [r0, #0]
 800a39a:	3520      	adds	r5, #32
 800a39c:	4604      	mov	r4, r0
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a39e:	7832      	ldrb	r2, [r6, #0]
 800a3a0:	2a04      	cmp	r2, #4
 800a3a2:	bf0c      	ite	eq
 800a3a4:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800a3a8:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800a3ac:	4295      	cmp	r5, r2
 800a3ae:	d228      	bcs.n	800a402 <dir_next.constprop.0+0x76>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a3b0:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800a3b4:	b137      	cbz	r7, 800a3c4 <dir_next.constprop.0+0x38>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a3b6:	3630      	adds	r6, #48	; 0x30
	return FR_OK;
 800a3b8:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800a3ba:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a3bc:	443e      	add	r6, r7
 800a3be:	63e6      	str	r6, [r4, #60]	; 0x3c
}
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 800a3c4:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800a3c6:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800a3c8:	6383      	str	r3, [r0, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 800a3ca:	b1e9      	cbz	r1, 800a408 <dir_next.constprop.0+0x7c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a3cc:	8973      	ldrh	r3, [r6, #10]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 800a3d4:	d1ef      	bne.n	800a3b6 <dir_next.constprop.0+0x2a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a3d6:	f7ff ff19 	bl	800a20c <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a3da:	2801      	cmp	r0, #1
 800a3dc:	d91c      	bls.n	800a418 <dir_next.constprop.0+0x8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	d01c      	beq.n	800a41c <dir_next.constprop.0+0x90>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a3e2:	6973      	ldr	r3, [r6, #20]
 800a3e4:	4298      	cmp	r0, r3
 800a3e6:	d213      	bcs.n	800a410 <dir_next.constprop.0+0x84>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a3e8:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800a3ea:	6360      	str	r0, [r4, #52]	; 0x34
	clst -= 2;
 800a3ec:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a3ee:	4298      	cmp	r0, r3
 800a3f0:	d204      	bcs.n	800a3fc <dir_next.constprop.0+0x70>
	return clst * fs->csize + fs->database;
 800a3f2:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 800a3f6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800a3f8:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 800a3fc:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800a400:	e7d9      	b.n	800a3b6 <dir_next.constprop.0+0x2a>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a402:	2004      	movs	r0, #4
}
 800a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a408:	8933      	ldrh	r3, [r6, #8]
 800a40a:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800a40e:	d8d2      	bhi.n	800a3b6 <dir_next.constprop.0+0x2a>
				dp->sect = 0; return FR_NO_FILE;
 800a410:	2300      	movs	r3, #0
 800a412:	2004      	movs	r0, #4
 800a414:	63a3      	str	r3, [r4, #56]	; 0x38
 800a416:	e7d3      	b.n	800a3c0 <dir_next.constprop.0+0x34>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a418:	2002      	movs	r0, #2
 800a41a:	e7d1      	b.n	800a3c0 <dir_next.constprop.0+0x34>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a41c:	2001      	movs	r0, #1
 800a41e:	e7cf      	b.n	800a3c0 <dir_next.constprop.0+0x34>

0800a420 <dir_read.constprop.0>:
FRESULT dir_read (
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800a424:	6b86      	ldr	r6, [r0, #56]	; 0x38
FRESULT dir_read (
 800a426:	b083      	sub	sp, #12
 800a428:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800a42a:	f8d0 8000 	ldr.w	r8, [r0]
	while (dp->sect) {
 800a42e:	2e00      	cmp	r6, #0
 800a430:	d04c      	beq.n	800a4cc <dir_read.constprop.0+0xac>
	BYTE ord = 0xFF, sum = 0xFF;
 800a432:	f04f 0bff 	mov.w	fp, #255	; 0xff
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a436:	f108 0a30 	add.w	sl, r8, #48	; 0x30
	BYTE ord = 0xFF, sum = 0xFF;
 800a43a:	46d9      	mov	r9, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a43c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800a440:	42b3      	cmp	r3, r6
 800a442:	d00a      	beq.n	800a45a <dir_read.constprop.0+0x3a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a444:	2301      	movs	r3, #1
 800a446:	4632      	mov	r2, r6
 800a448:	4651      	mov	r1, sl
 800a44a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a44e:	f7ff fb7b 	bl	8009b48 <disk_read>
 800a452:	2800      	cmp	r0, #0
 800a454:	d14b      	bne.n	800a4ee <dir_read.constprop.0+0xce>
			fs->winsect = sector;
 800a456:	f8c8 602c 	str.w	r6, [r8, #44]	; 0x2c
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a45a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a45c:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d034      	beq.n	800a4cc <dir_read.constprop.0+0xac>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a462:	f898 2000 	ldrb.w	r2, [r8]
 800a466:	2a04      	cmp	r2, #4
 800a468:	d037      	beq.n	800a4da <dir_read.constprop.0+0xba>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a46a:	7aca      	ldrb	r2, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a46c:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a46e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800a472:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a474:	d005      	beq.n	800a482 <dir_read.constprop.0+0x62>
 800a476:	2b2e      	cmp	r3, #46	; 0x2e
 800a478:	d003      	beq.n	800a482 <dir_read.constprop.0+0x62>
 800a47a:	f022 0020 	bic.w	r0, r2, #32
 800a47e:	2808      	cmp	r0, #8
 800a480:	d15a      	bne.n	800a538 <dir_read.constprop.0+0x118>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a482:	6b25      	ldr	r5, [r4, #48]	; 0x30
				ord = 0xFF;
 800a484:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a488:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a48a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a48c:	b1f6      	cbz	r6, 800a4cc <dir_read.constprop.0+0xac>
	FATFS *fs = dp->obj.fs;
 800a48e:	6827      	ldr	r7, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a490:	783b      	ldrb	r3, [r7, #0]
 800a492:	2b04      	cmp	r3, #4
 800a494:	bf0c      	ite	eq
 800a496:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 800a49a:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 800a49e:	429d      	cmp	r5, r3
 800a4a0:	d214      	bcs.n	800a4cc <dir_read.constprop.0+0xac>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a4a2:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800a4a6:	b9eb      	cbnz	r3, 800a4e4 <dir_read.constprop.0+0xc4>
		dp->sect++;				/* Next sector */
 800a4a8:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800a4aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800a4ac:	63a6      	str	r6, [r4, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 800a4ae:	bb21      	cbnz	r1, 800a4fa <dir_read.constprop.0+0xda>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a4b0:	893b      	ldrh	r3, [r7, #8]
 800a4b2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800a4b6:	d909      	bls.n	800a4cc <dir_read.constprop.0+0xac>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a4b8:	3730      	adds	r7, #48	; 0x30
	dp->dptr = ofs;						/* Current entry */
 800a4ba:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a4bc:	63e7      	str	r7, [r4, #60]	; 0x3c
	while (dp->sect) {
 800a4be:	2e00      	cmp	r6, #0
 800a4c0:	d1bc      	bne.n	800a43c <dir_read.constprop.0+0x1c>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a4c2:	2500      	movs	r5, #0
}
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	b003      	add	sp, #12
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	FRESULT res = FR_NO_FILE;
 800a4cc:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	b003      	add	sp, #12
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (c == 0x85) {		/* Start of the file entry block? */
 800a4da:	2b85      	cmp	r3, #133	; 0x85
 800a4dc:	f000 80f6 	beq.w	800a6cc <dir_read.constprop.0+0x2ac>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a4e0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800a4e2:	e7d1      	b.n	800a488 <dir_read.constprop.0+0x68>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a4e4:	3730      	adds	r7, #48	; 0x30
	dp->dptr = ofs;						/* Current entry */
 800a4e6:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a4e8:	443b      	add	r3, r7
 800a4ea:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (dp->sect) {
 800a4ec:	e7a6      	b.n	800a43c <dir_read.constprop.0+0x1c>
			fs->winsect = sector;
 800a4ee:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800a4f2:	2501      	movs	r5, #1
			fs->winsect = sector;
 800a4f4:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
		if (res != FR_OK) break;
 800a4f8:	e7e9      	b.n	800a4ce <dir_read.constprop.0+0xae>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a4fa:	897b      	ldrh	r3, [r7, #10]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800a502:	d1d9      	bne.n	800a4b8 <dir_read.constprop.0+0x98>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a504:	4620      	mov	r0, r4
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	f7ff fe80 	bl	800a20c <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a50c:	2801      	cmp	r0, #1
 800a50e:	f240 80d5 	bls.w	800a6bc <dir_read.constprop.0+0x29c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a512:	1c43      	adds	r3, r0, #1
 800a514:	f000 80d0 	beq.w	800a6b8 <dir_read.constprop.0+0x298>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	4290      	cmp	r0, r2
 800a51c:	d2d6      	bcs.n	800a4cc <dir_read.constprop.0+0xac>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a51e:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800a520:	6360      	str	r0, [r4, #52]	; 0x34
	clst -= 2;
 800a522:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	4290      	cmp	r0, r2
 800a528:	f080 80ca 	bcs.w	800a6c0 <dir_read.constprop.0+0x2a0>
	return clst * fs->csize + fs->database;
 800a52c:	897e      	ldrh	r6, [r7, #10]
 800a52e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a530:	fb00 2606 	mla	r6, r0, r6, r2
				dp->sect = clust2sect(fs, clst);
 800a534:	63a6      	str	r6, [r4, #56]	; 0x38
 800a536:	e7bf      	b.n	800a4b8 <dir_read.constprop.0+0x98>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800a538:	2a0f      	cmp	r2, #15
 800a53a:	f040 81f9 	bne.w	800a930 <dir_read.constprop.0+0x510>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800a53e:	0658      	lsls	r0, r3, #25
 800a540:	f140 80b5 	bpl.w	800a6ae <dir_read.constprop.0+0x28e>
						dp->blk_ofs = dp->dptr;
 800a544:	6b25      	ldr	r5, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 800a546:	f003 09bf 	and.w	r9, r3, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800a54a:	f891 b00d 	ldrb.w	fp, [r1, #13]
						dp->blk_ofs = dp->dptr;
 800a54e:	64e5      	str	r5, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a550:	7b4b      	ldrb	r3, [r1, #13]
 800a552:	455b      	cmp	r3, fp
 800a554:	d196      	bne.n	800a484 <dir_read.constprop.0+0x64>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a556:	8b4b      	ldrh	r3, [r1, #26]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d193      	bne.n	800a484 <dir_read.constprop.0+0x64>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a55c:	780b      	ldrb	r3, [r1, #0]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a55e:	f8b1 0001 	ldrh.w	r0, [r1, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a566:	3b01      	subs	r3, #1
 800a568:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a56c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a570:	2bfe      	cmp	r3, #254	; 0xfe
 800a572:	d887      	bhi.n	800a484 <dir_read.constprop.0+0x64>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a574:	f8d8 600c 	ldr.w	r6, [r8, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a57e:	f8b1 c003 	ldrh.w	ip, [r1, #3]
		if (wc) {
 800a582:	2800      	cmp	r0, #0
 800a584:	f000 813a 	beq.w	800a7fc <dir_read.constprop.0+0x3dc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a588:	2aff      	cmp	r2, #255	; 0xff
 800a58a:	f000 8227 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a58e:	f846 c022 	str.w	ip, [r6, r2, lsl #2]
 800a592:	0090      	lsls	r0, r2, #2
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a594:	f8b1 7005 	ldrh.w	r7, [r1, #5]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a598:	1c9a      	adds	r2, r3, #2
		if (wc) {
 800a59a:	f1bc 0f00 	cmp.w	ip, #0
 800a59e:	f000 8134 	beq.w	800a80a <dir_read.constprop.0+0x3ea>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a5a2:	2aff      	cmp	r2, #255	; 0xff
 800a5a4:	f000 821a 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a5a8:	4430      	add	r0, r6
 800a5aa:	1cda      	adds	r2, r3, #3
 800a5ac:	6047      	str	r7, [r0, #4]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a5ae:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 800a5b2:	2f00      	cmp	r7, #0
 800a5b4:	f000 8130 	beq.w	800a818 <dir_read.constprop.0+0x3f8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a5b8:	2aff      	cmp	r2, #255	; 0xff
 800a5ba:	f000 820f 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a5be:	f8c0 c008 	str.w	ip, [r0, #8]
 800a5c2:	1d1a      	adds	r2, r3, #4
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a5c4:	f8b1 7009 	ldrh.w	r7, [r1, #9]
		if (wc) {
 800a5c8:	f1bc 0f00 	cmp.w	ip, #0
 800a5cc:	f000 812b 	beq.w	800a826 <dir_read.constprop.0+0x406>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a5d0:	2aff      	cmp	r2, #255	; 0xff
 800a5d2:	f000 8203 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a5d6:	60c7      	str	r7, [r0, #12]
 800a5d8:	1d5a      	adds	r2, r3, #5
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a5da:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 800a5de:	2f00      	cmp	r7, #0
 800a5e0:	f000 8128 	beq.w	800a834 <dir_read.constprop.0+0x414>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a5e4:	2aff      	cmp	r2, #255	; 0xff
 800a5e6:	f000 81f9 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a5ea:	f8c0 c010 	str.w	ip, [r0, #16]
 800a5ee:	1d9a      	adds	r2, r3, #6
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a5f0:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 800a5f4:	f1bc 0f00 	cmp.w	ip, #0
 800a5f8:	f000 8123 	beq.w	800a842 <dir_read.constprop.0+0x422>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a5fc:	2aff      	cmp	r2, #255	; 0xff
 800a5fe:	f000 81ed 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a602:	f8c0 e014 	str.w	lr, [r0, #20]
 800a606:	1dda      	adds	r2, r3, #7
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a608:	8a4f      	ldrh	r7, [r1, #18]
		if (wc) {
 800a60a:	f1be 0f00 	cmp.w	lr, #0
 800a60e:	f000 811e 	beq.w	800a84e <dir_read.constprop.0+0x42e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a612:	2aff      	cmp	r2, #255	; 0xff
 800a614:	f000 81e2 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a618:	6187      	str	r7, [r0, #24]
 800a61a:	f103 0208 	add.w	r2, r3, #8
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a61e:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 800a622:	2f00      	cmp	r7, #0
 800a624:	f000 811a 	beq.w	800a85c <dir_read.constprop.0+0x43c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a628:	2aff      	cmp	r2, #255	; 0xff
 800a62a:	f000 81d7 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a62e:	f8c0 c01c 	str.w	ip, [r0, #28]
 800a632:	f103 0209 	add.w	r2, r3, #9
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a636:	8acf      	ldrh	r7, [r1, #22]
		if (wc) {
 800a638:	f1bc 0f00 	cmp.w	ip, #0
 800a63c:	f000 8114 	beq.w	800a868 <dir_read.constprop.0+0x448>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a640:	2aff      	cmp	r2, #255	; 0xff
 800a642:	f43f af1f 	beq.w	800a484 <dir_read.constprop.0+0x64>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a646:	6207      	str	r7, [r0, #32]
 800a648:	f103 020a 	add.w	r2, r3, #10
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a64c:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 800a650:	2f00      	cmp	r7, #0
 800a652:	f000 8110 	beq.w	800a876 <dir_read.constprop.0+0x456>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a656:	2aff      	cmp	r2, #255	; 0xff
 800a658:	f000 81c0 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a65c:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 800a660:	f103 020b 	add.w	r2, r3, #11
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a664:	8b8f      	ldrh	r7, [r1, #28]
		if (wc) {
 800a666:	f1bc 0f00 	cmp.w	ip, #0
 800a66a:	f000 810a 	beq.w	800a882 <dir_read.constprop.0+0x462>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a66e:	2aff      	cmp	r2, #255	; 0xff
 800a670:	f000 81b4 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a674:	6287      	str	r7, [r0, #40]	; 0x28
 800a676:	f103 020c 	add.w	r2, r3, #12
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a67a:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 800a67e:	2f00      	cmp	r7, #0
 800a680:	f000 8106 	beq.w	800a890 <dir_read.constprop.0+0x470>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a684:	2aff      	cmp	r2, #255	; 0xff
 800a686:	f000 81a9 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a68a:	f103 020d 	add.w	r2, r3, #13
 800a68e:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a692:	780b      	ldrb	r3, [r1, #0]
 800a694:	0659      	lsls	r1, r3, #25
 800a696:	d505      	bpl.n	800a6a4 <dir_read.constprop.0+0x284>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a698:	2aff      	cmp	r2, #255	; 0xff
 800a69a:	f000 819f 	beq.w	800a9dc <dir_read.constprop.0+0x5bc>
		lfnbuf[i] = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a6a4:	f109 39ff 	add.w	r9, r9, #4294967295
 800a6a8:	fa5f f989 	uxtb.w	r9, r9
 800a6ac:	e6ec      	b.n	800a488 <dir_read.constprop.0+0x68>
 800a6ae:	454b      	cmp	r3, r9
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800a6b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a6b2:	f47f aee7 	bne.w	800a484 <dir_read.constprop.0+0x64>
 800a6b6:	e74b      	b.n	800a550 <dir_read.constprop.0+0x130>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a6b8:	2501      	movs	r5, #1
 800a6ba:	e708      	b.n	800a4ce <dir_read.constprop.0+0xae>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a6bc:	2502      	movs	r5, #2
 800a6be:	e706      	b.n	800a4ce <dir_read.constprop.0+0xae>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a6c0:	3730      	adds	r7, #48	; 0x30
	dp->dptr = ofs;						/* Current entry */
 800a6c2:	6325      	str	r5, [r4, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
 800a6c4:	63a3      	str	r3, [r4, #56]	; 0x38
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a6c6:	2500      	movs	r5, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a6c8:	63e7      	str	r7, [r4, #60]	; 0x3c
	while (dp->sect) {
 800a6ca:	e6fb      	b.n	800a4c4 <dir_read.constprop.0+0xa4>
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a6cc:	6827      	ldr	r7, [r4, #0]
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800a6ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
	res = move_window(dp->obj.fs, dp->sect);
 800a6d0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800a6d2:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a6d6:	693e      	ldr	r6, [r7, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6d8:	429d      	cmp	r5, r3
 800a6da:	f040 8082 	bne.w	800a7e2 <dir_read.constprop.0+0x3c2>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a6de:	780b      	ldrb	r3, [r1, #0]
 800a6e0:	2b85      	cmp	r3, #133	; 0x85
 800a6e2:	d1eb      	bne.n	800a6bc <dir_read.constprop.0+0x29c>
 800a6e4:	1c4b      	adds	r3, r1, #1
 800a6e6:	1af2      	subs	r2, r6, r3
 800a6e8:	2a02      	cmp	r2, #2
 800a6ea:	f240 80d7 	bls.w	800a89c <dir_read.constprop.0+0x47c>
			*d++ = *s++;
 800a6ee:	680b      	ldr	r3, [r1, #0]
 800a6f0:	6033      	str	r3, [r6, #0]
 800a6f2:	684b      	ldr	r3, [r1, #4]
 800a6f4:	6073      	str	r3, [r6, #4]
 800a6f6:	688b      	ldr	r3, [r1, #8]
 800a6f8:	60b3      	str	r3, [r6, #8]
 800a6fa:	68cb      	ldr	r3, [r1, #12]
 800a6fc:	60f3      	str	r3, [r6, #12]
 800a6fe:	690b      	ldr	r3, [r1, #16]
 800a700:	6133      	str	r3, [r6, #16]
 800a702:	694b      	ldr	r3, [r1, #20]
 800a704:	6173      	str	r3, [r6, #20]
 800a706:	698b      	ldr	r3, [r1, #24]
 800a708:	61b3      	str	r3, [r6, #24]
 800a70a:	69cb      	ldr	r3, [r1, #28]
 800a70c:	61f3      	str	r3, [r6, #28]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a70e:	f896 9001 	ldrb.w	r9, [r6, #1]
 800a712:	f109 0901 	add.w	r9, r9, #1
 800a716:	ea4f 1949 	mov.w	r9, r9, lsl #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a71a:	f1a9 0360 	sub.w	r3, r9, #96	; 0x60
 800a71e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a722:	d8cb      	bhi.n	800a6bc <dir_read.constprop.0+0x29c>
	res = dir_next(dp, 0);
 800a724:	4620      	mov	r0, r4
 800a726:	f7ff fe31 	bl	800a38c <dir_next.constprop.0>
	if (res != FR_OK) return res;
 800a72a:	4605      	mov	r5, r0
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f47f aece 	bne.w	800a4ce <dir_read.constprop.0+0xae>
	res = move_window(dp->obj.fs, dp->sect);
 800a732:	6827      	ldr	r7, [r4, #0]
 800a734:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	429d      	cmp	r5, r3
 800a73a:	d00a      	beq.n	800a752 <dir_read.constprop.0+0x332>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a73c:	2301      	movs	r3, #1
 800a73e:	462a      	mov	r2, r5
 800a740:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a744:	7878      	ldrb	r0, [r7, #1]
 800a746:	f7ff f9ff 	bl	8009b48 <disk_read>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f040 8141 	bne.w	800a9d2 <dir_read.constprop.0+0x5b2>
			fs->winsect = sector;
 800a750:	62fd      	str	r5, [r7, #44]	; 0x2c
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800a752:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a754:	781a      	ldrb	r2, [r3, #0]
 800a756:	2ac0      	cmp	r2, #192	; 0xc0
 800a758:	d1b0      	bne.n	800a6bc <dir_read.constprop.0+0x29c>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800a75a:	f106 0120 	add.w	r1, r6, #32
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	1a89      	subs	r1, r1, r2
 800a762:	2902      	cmp	r1, #2
 800a764:	f240 8164 	bls.w	800aa30 <dir_read.constprop.0+0x610>
			*d++ = *s++;
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	6232      	str	r2, [r6, #32]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	6272      	str	r2, [r6, #36]	; 0x24
 800a770:	689a      	ldr	r2, [r3, #8]
 800a772:	62b2      	str	r2, [r6, #40]	; 0x28
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	62f2      	str	r2, [r6, #44]	; 0x2c
 800a778:	691a      	ldr	r2, [r3, #16]
 800a77a:	6332      	str	r2, [r6, #48]	; 0x30
 800a77c:	695a      	ldr	r2, [r3, #20]
 800a77e:	6372      	str	r2, [r6, #52]	; 0x34
 800a780:	699a      	ldr	r2, [r3, #24]
 800a782:	63b2      	str	r2, [r6, #56]	; 0x38
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	63f3      	str	r3, [r6, #60]	; 0x3c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800a788:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800a78c:	4aae      	ldr	r2, [pc, #696]	; (800aa48 <dir_read.constprop.0+0x628>)
 800a78e:	332c      	adds	r3, #44	; 0x2c
 800a790:	fba2 2303 	umull	r2, r3, r2, r3
 800a794:	08db      	lsrs	r3, r3, #3
 800a796:	ebb9 1f43 	cmp.w	r9, r3, lsl #5
 800a79a:	d38f      	bcc.n	800a6bc <dir_read.constprop.0+0x29c>
 800a79c:	f106 073f 	add.w	r7, r6, #63	; 0x3f
	i = SZDIRE * 2;	/* C1 offset */
 800a7a0:	f04f 0a40 	mov.w	sl, #64	; 0x40
		res = dir_next(dp, 0);
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f7ff fdf1 	bl	800a38c <dir_next.constprop.0>
		if (res != FR_OK) return res;
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f47f ae8e 	bne.w	800a4ce <dir_read.constprop.0+0xae>
		res = move_window(dp->obj.fs, dp->sect);
 800a7b2:	f8d4 b000 	ldr.w	fp, [r4]
 800a7b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a7b8:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d07a      	beq.n	800a8b6 <dir_read.constprop.0+0x496>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f10b 0130 	add.w	r1, fp, #48	; 0x30
 800a7c6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800a7ca:	9201      	str	r2, [sp, #4]
 800a7cc:	f7ff f9bc 	bl	8009b48 <disk_read>
 800a7d0:	9a01      	ldr	r2, [sp, #4]
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d06d      	beq.n	800a8b2 <dir_read.constprop.0+0x492>
			fs->winsect = sector;
 800a7d6:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800a7da:	2501      	movs	r5, #1
			fs->winsect = sector;
 800a7dc:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
		if (res != FR_OK) return res;
 800a7e0:	e675      	b.n	800a4ce <dir_read.constprop.0+0xae>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a7ea:	7878      	ldrb	r0, [r7, #1]
 800a7ec:	f7ff f9ac 	bl	8009b48 <disk_read>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	f040 80ee 	bne.w	800a9d2 <dir_read.constprop.0+0x5b2>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a7f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
			fs->winsect = sector;
 800a7f8:	62fd      	str	r5, [r7, #44]	; 0x2c
	if (res != FR_OK) return res;
 800a7fa:	e770      	b.n	800a6de <dir_read.constprop.0+0x2be>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a7fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a800:	459c      	cmp	ip, r3
 800a802:	f47f ae3f 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a806:	f8b1 7005 	ldrh.w	r7, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a80a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a80e:	429f      	cmp	r7, r3
 800a810:	f47f ae38 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a814:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a81c:	459c      	cmp	ip, r3
 800a81e:	f47f ae31 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a822:	f8b1 7009 	ldrh.w	r7, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a82a:	429f      	cmp	r7, r3
 800a82c:	f47f ae2a 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a830:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a838:	459c      	cmp	ip, r3
 800a83a:	f47f ae23 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a83e:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a846:	459e      	cmp	lr, r3
 800a848:	f47f ae1c 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a84c:	8a4f      	ldrh	r7, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a84e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a852:	429f      	cmp	r7, r3
 800a854:	f47f ae16 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a858:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a85c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a860:	459c      	cmp	ip, r3
 800a862:	f47f ae0f 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a866:	8acf      	ldrh	r7, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a86c:	429f      	cmp	r7, r3
 800a86e:	f47f ae09 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a872:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a87a:	459c      	cmp	ip, r3
 800a87c:	f47f ae02 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a880:	8b8f      	ldrh	r7, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a886:	429f      	cmp	r7, r3
 800a888:	f47f adfc 	bne.w	800a484 <dir_read.constprop.0+0x64>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a88c:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a894:	459c      	cmp	ip, r3
 800a896:	f43f aefc 	beq.w	800a692 <dir_read.constprop.0+0x272>
 800a89a:	e5f3      	b.n	800a484 <dir_read.constprop.0+0x64>
 800a89c:	3120      	adds	r1, #32
 800a89e:	1e72      	subs	r2, r6, #1
			*d++ = *s++;
 800a8a0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
		} while (--cnt);
 800a8a4:	428b      	cmp	r3, r1
 800a8a6:	f103 0301 	add.w	r3, r3, #1
			*d++ = *s++;
 800a8aa:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800a8ae:	d1f7      	bne.n	800a8a0 <dir_read.constprop.0+0x480>
 800a8b0:	e72d      	b.n	800a70e <dir_read.constprop.0+0x2ee>
			fs->winsect = sector;
 800a8b2:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800a8b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a8b8:	781a      	ldrb	r2, [r3, #0]
 800a8ba:	2ac1      	cmp	r2, #193	; 0xc1
 800a8bc:	f47f aefe 	bne.w	800a6bc <dir_read.constprop.0+0x29c>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800a8c0:	f5ba 7f18 	cmp.w	sl, #608	; 0x260
 800a8c4:	f0c0 808c 	bcc.w	800a9e0 <dir_read.constprop.0+0x5c0>
	} while ((i += SZDIRE) < sz_ent);
 800a8c8:	f10a 0a20 	add.w	sl, sl, #32
 800a8cc:	3720      	adds	r7, #32
 800a8ce:	45d1      	cmp	r9, sl
 800a8d0:	f63f af68 	bhi.w	800a7a4 <dir_read.constprop.0+0x384>
	if (i <= MAXDIRB(_MAX_LFN)) {
 800a8d4:	f5ba 7f18 	cmp.w	sl, #608	; 0x260
 800a8d8:	d823      	bhi.n	800a922 <dir_read.constprop.0+0x502>
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a8da:	7871      	ldrb	r1, [r6, #1]
	for (i = sum = 0; i < szblk; i++) {
 800a8dc:	2300      	movs	r3, #0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a8de:	3101      	adds	r1, #1
	for (i = sum = 0; i < szblk; i++) {
 800a8e0:	4618      	mov	r0, r3
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a8e2:	0149      	lsls	r1, r1, #5
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a8e4:	2802      	cmp	r0, #2
 800a8e6:	d10e      	bne.n	800a906 <dir_read.constprop.0+0x4e6>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a8e8:	7932      	ldrb	r2, [r6, #4]
	for (i = sum = 0; i < szblk; i++) {
 800a8ea:	2006      	movs	r0, #6
 800a8ec:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800a8f0:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a8f2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800a8f6:	7973      	ldrb	r3, [r6, #5]
 800a8f8:	f3c2 074e 	ubfx	r7, r2, #1, #15
 800a8fc:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800a900:	fa17 f383 	uxtah	r3, r7, r3
 800a904:	b29b      	uxth	r3, r3
 800a906:	5c32      	ldrb	r2, [r6, r0]
	for (i = sum = 0; i < szblk; i++) {
 800a908:	3001      	adds	r0, #1
 800a90a:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 800a90e:	4281      	cmp	r1, r0
 800a910:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a912:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 800a916:	b29b      	uxth	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 800a918:	d8e4      	bhi.n	800a8e4 <dir_read.constprop.0+0x4c4>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800a91a:	8872      	ldrh	r2, [r6, #2]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	f47f aecd 	bne.w	800a6bc <dir_read.constprop.0+0x29c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800a922:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a926:	791b      	ldrb	r3, [r3, #4]
 800a928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a92c:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a92e:	e5d0      	b.n	800a4d2 <dir_read.constprop.0+0xb2>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800a930:	f1b9 0f00 	cmp.w	r9, #0
 800a934:	d148      	bne.n	800a9c8 <dir_read.constprop.0+0x5a8>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a936:	780a      	ldrb	r2, [r1, #0]
 800a938:	01d3      	lsls	r3, r2, #7
 800a93a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800a93e:	784a      	ldrb	r2, [r1, #1]
 800a940:	441a      	add	r2, r3
 800a942:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800a946:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a94a:	788a      	ldrb	r2, [r1, #2]
 800a94c:	fa52 f283 	uxtab	r2, r2, r3
 800a950:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800a954:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a958:	78ca      	ldrb	r2, [r1, #3]
 800a95a:	fa52 f283 	uxtab	r2, r2, r3
 800a95e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800a962:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a966:	790a      	ldrb	r2, [r1, #4]
 800a968:	fa52 f283 	uxtab	r2, r2, r3
 800a96c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800a970:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a974:	794a      	ldrb	r2, [r1, #5]
 800a976:	fa52 f283 	uxtab	r2, r2, r3
 800a97a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800a97e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a982:	798a      	ldrb	r2, [r1, #6]
 800a984:	fa52 f283 	uxtab	r2, r2, r3
 800a988:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800a98c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a990:	79ca      	ldrb	r2, [r1, #7]
 800a992:	fa52 f283 	uxtab	r2, r2, r3
 800a996:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800a99a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a99e:	7a0a      	ldrb	r2, [r1, #8]
 800a9a0:	fa52 f283 	uxtab	r2, r2, r3
 800a9a4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800a9a8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a9ac:	7a4a      	ldrb	r2, [r1, #9]
 800a9ae:	7a89      	ldrb	r1, [r1, #10]
 800a9b0:	fa52 f283 	uxtab	r2, r2, r3
 800a9b4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800a9b8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800a9bc:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	455b      	cmp	r3, fp
 800a9c4:	f43f ad7d 	beq.w	800a4c2 <dir_read.constprop.0+0xa2>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9cc:	2500      	movs	r5, #0
 800a9ce:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a9d0:	e57f      	b.n	800a4d2 <dir_read.constprop.0+0xb2>
			fs->winsect = sector;
 800a9d2:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800a9d6:	2501      	movs	r5, #1
			fs->winsect = sector;
 800a9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (res != FR_OK) return res;
 800a9da:	e578      	b.n	800a4ce <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a9dc:	4691      	mov	r9, r2
 800a9de:	e553      	b.n	800a488 <dir_read.constprop.0+0x68>
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a9e0:	1af9      	subs	r1, r7, r3
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	2902      	cmp	r1, #2
 800a9e6:	d918      	bls.n	800aa1a <dir_read.constprop.0+0x5fa>
			*d++ = *s++;
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	f8c7 2001 	str.w	r2, [r7, #1]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	f8c7 2005 	str.w	r2, [r7, #5]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	f8c7 2009 	str.w	r2, [r7, #9]
 800a9fa:	68da      	ldr	r2, [r3, #12]
 800a9fc:	f8c7 200d 	str.w	r2, [r7, #13]
 800aa00:	691a      	ldr	r2, [r3, #16]
 800aa02:	f8c7 2011 	str.w	r2, [r7, #17]
 800aa06:	695a      	ldr	r2, [r3, #20]
 800aa08:	f8c7 2015 	str.w	r2, [r7, #21]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	f8c7 2019 	str.w	r2, [r7, #25]
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	f8c7 301d 	str.w	r3, [r7, #29]
		} while (--cnt);
 800aa18:	e756      	b.n	800a8c8 <dir_read.constprop.0+0x4a8>
 800aa1a:	3320      	adds	r3, #32
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800aa1c:	4639      	mov	r1, r7
			*d++ = *s++;
 800aa1e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
		} while (--cnt);
 800aa22:	429a      	cmp	r2, r3
 800aa24:	f102 0201 	add.w	r2, r2, #1
			*d++ = *s++;
 800aa28:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800aa2c:	d1f7      	bne.n	800aa1e <dir_read.constprop.0+0x5fe>
 800aa2e:	e74b      	b.n	800a8c8 <dir_read.constprop.0+0x4a8>
 800aa30:	3320      	adds	r3, #32
 800aa32:	f106 011f 	add.w	r1, r6, #31
			*d++ = *s++;
 800aa36:	f812 0c01 	ldrb.w	r0, [r2, #-1]
		} while (--cnt);
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	f102 0201 	add.w	r2, r2, #1
			*d++ = *s++;
 800aa40:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800aa44:	d1f7      	bne.n	800aa36 <dir_read.constprop.0+0x616>
 800aa46:	e69f      	b.n	800a788 <dir_read.constprop.0+0x368>
 800aa48:	88888889 	.word	0x88888889

0800aa4c <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800aa4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dp->dptr = ofs;				/* Set current offset */
 800aa50:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 800aa52:	6807      	ldr	r7, [r0, #0]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aa54:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800aa56:	4605      	mov	r5, r0
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aa58:	783a      	ldrb	r2, [r7, #0]
	dp->dptr = ofs;				/* Set current offset */
 800aa5a:	6303      	str	r3, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aa5c:	2c00      	cmp	r4, #0
 800aa5e:	d136      	bne.n	800aace <dir_sdi.constprop.0+0x82>
 800aa60:	2a02      	cmp	r2, #2
 800aa62:	d82f      	bhi.n	800aac4 <dir_sdi.constprop.0+0x78>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aa64:	893b      	ldrh	r3, [r7, #8]
 800aa66:	b343      	cbz	r3, 800aaba <dir_sdi.constprop.0+0x6e>
		dp->sect = fs->dirbase;
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	63ab      	str	r3, [r5, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 800aa6c:	636c      	str	r4, [r5, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800aa6e:	b323      	cbz	r3, 800aaba <dir_sdi.constprop.0+0x6e>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aa70:	3730      	adds	r7, #48	; 0x30
	return FR_OK;
 800aa72:	f04f 0800 	mov.w	r8, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aa76:	63ef      	str	r7, [r5, #60]	; 0x3c
}
 800aa78:	4640      	mov	r0, r8
 800aa7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa7e:	6a32      	ldr	r2, [r6, #32]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aa80:	f106 0930 	add.w	r9, r6, #48	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa84:	6af3      	ldr	r3, [r6, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa86:	eb02 18d4 	add.w	r8, r2, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa8a:	4598      	cmp	r8, r3
 800aa8c:	d009      	beq.n	800aaa2 <dir_sdi.constprop.0+0x56>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aa8e:	2301      	movs	r3, #1
 800aa90:	4642      	mov	r2, r8
 800aa92:	7870      	ldrb	r0, [r6, #1]
 800aa94:	4649      	mov	r1, r9
 800aa96:	f7ff f857 	bl	8009b48 <disk_read>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d16e      	bne.n	800ab7c <dir_sdi.constprop.0+0x130>
			fs->winsect = sector;
 800aa9e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800aaa2:	00a4      	lsls	r4, r4, #2
 800aaa4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800aaa8:	f859 4004 	ldr.w	r4, [r9, r4]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800aaac:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aab0:	2c01      	cmp	r4, #1
 800aab2:	d902      	bls.n	800aaba <dir_sdi.constprop.0+0x6e>
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	42a3      	cmp	r3, r4
 800aab8:	d80d      	bhi.n	800aad6 <dir_sdi.constprop.0+0x8a>
		switch (fs->fs_type) {
 800aaba:	f04f 0802 	mov.w	r8, #2
}
 800aabe:	4640      	mov	r0, r8
 800aac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800aac6:	71c4      	strb	r4, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d0cb      	beq.n	800aa64 <dir_sdi.constprop.0+0x18>
 800aacc:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aace:	897a      	ldrh	r2, [r7, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aad0:	2a00      	cmp	r2, #0
 800aad2:	f040 809d 	bne.w	800ac10 <dir_sdi.constprop.0+0x1c4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aad6:	2c01      	cmp	r4, #1
 800aad8:	d9ef      	bls.n	800aaba <dir_sdi.constprop.0+0x6e>
	FATFS *fs = obj->fs;
 800aada:	682e      	ldr	r6, [r5, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aadc:	6973      	ldr	r3, [r6, #20]
 800aade:	42a3      	cmp	r3, r4
 800aae0:	d9eb      	bls.n	800aaba <dir_sdi.constprop.0+0x6e>
		switch (fs->fs_type) {
 800aae2:	f896 8000 	ldrb.w	r8, [r6]
 800aae6:	f108 32ff 	add.w	r2, r8, #4294967295
 800aaea:	2a03      	cmp	r2, #3
 800aaec:	d8e5      	bhi.n	800aaba <dir_sdi.constprop.0+0x6e>
 800aaee:	a101      	add	r1, pc, #4	; (adr r1, 800aaf4 <dir_sdi.constprop.0+0xa8>)
 800aaf0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aaf4:	0800ab89 	.word	0x0800ab89
 800aaf8:	0800ab5d 	.word	0x0800ab5d
 800aafc:	0800aa7f 	.word	0x0800aa7f
 800ab00:	0800ab05 	.word	0x0800ab05
			if (obj->objsize) {
 800ab04:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 800ab08:	ea52 0001 	orrs.w	r0, r2, r1
 800ab0c:	d0d5      	beq.n	800aaba <dir_sdi.constprop.0+0x6e>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ab0e:	68a8      	ldr	r0, [r5, #8]
 800ab10:	eba4 0c00 	sub.w	ip, r4, r0
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800ab14:	79e8      	ldrb	r0, [r5, #7]
 800ab16:	2802      	cmp	r0, #2
 800ab18:	f000 808f 	beq.w	800ac3a <dir_sdi.constprop.0+0x1ee>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ab1c:	2803      	cmp	r0, #3
 800ab1e:	f000 8081 	beq.w	800ac24 <dir_sdi.constprop.0+0x1d8>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ab22:	69ea      	ldr	r2, [r5, #28]
 800ab24:	2a00      	cmp	r2, #0
 800ab26:	f040 8095 	bne.w	800ac54 <dir_sdi.constprop.0+0x208>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab2a:	6a33      	ldr	r3, [r6, #32]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ab2c:	f106 0930 	add.w	r9, r6, #48	; 0x30
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab30:	eb03 18d4 	add.w	r8, r3, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ab34:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ab36:	4598      	cmp	r8, r3
 800ab38:	d008      	beq.n	800ab4c <dir_sdi.constprop.0+0x100>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4642      	mov	r2, r8
 800ab3e:	7870      	ldrb	r0, [r6, #1]
 800ab40:	4649      	mov	r1, r9
 800ab42:	f7ff f801 	bl	8009b48 <disk_read>
 800ab46:	b9c8      	cbnz	r0, 800ab7c <dir_sdi.constprop.0+0x130>
			fs->winsect = sector;
 800ab48:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ab4c:	00a3      	lsls	r3, r4, #2
 800ab4e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800ab52:	f859 4003 	ldr.w	r4, [r9, r3]
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ab56:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ab5a:	e7a9      	b.n	800aab0 <dir_sdi.constprop.0+0x64>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab5c:	6a32      	ldr	r2, [r6, #32]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ab5e:	f106 0930 	add.w	r9, r6, #48	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ab62:	6af3      	ldr	r3, [r6, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab64:	eb02 2814 	add.w	r8, r2, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ab68:	4598      	cmp	r8, r3
 800ab6a:	d04b      	beq.n	800ac04 <dir_sdi.constprop.0+0x1b8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	4642      	mov	r2, r8
 800ab70:	7870      	ldrb	r0, [r6, #1]
 800ab72:	4649      	mov	r1, r9
 800ab74:	f7fe ffe8 	bl	8009b48 <disk_read>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d041      	beq.n	800ac00 <dir_sdi.constprop.0+0x1b4>
			fs->winsect = sector;
 800ab7c:	f04f 33ff 	mov.w	r3, #4294967295
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab80:	f04f 0801 	mov.w	r8, #1
			fs->winsect = sector;
 800ab84:	62f3      	str	r3, [r6, #44]	; 0x2c
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab86:	e777      	b.n	800aa78 <dir_sdi.constprop.0+0x2c>
			bc = (UINT)clst; bc += bc / 2;
 800ab88:	eb04 0954 	add.w	r9, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab8c:	6a31      	ldr	r1, [r6, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ab8e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab90:	eb01 2a59 	add.w	sl, r1, r9, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ab94:	459a      	cmp	sl, r3
 800ab96:	d00f      	beq.n	800abb8 <dir_sdi.constprop.0+0x16c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ab98:	2301      	movs	r3, #1
 800ab9a:	4652      	mov	r2, sl
 800ab9c:	f106 0130 	add.w	r1, r6, #48	; 0x30
 800aba0:	7870      	ldrb	r0, [r6, #1]
 800aba2:	f7fe ffd1 	bl	8009b48 <disk_read>
 800aba6:	b118      	cbz	r0, 800abb0 <dir_sdi.constprop.0+0x164>
			fs->winsect = sector;
 800aba8:	f04f 33ff 	mov.w	r3, #4294967295
 800abac:	62f3      	str	r3, [r6, #44]	; 0x2c
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800abae:	e763      	b.n	800aa78 <dir_sdi.constprop.0+0x2c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abb0:	4653      	mov	r3, sl
 800abb2:	6a31      	ldr	r1, [r6, #32]
			fs->winsect = sector;
 800abb4:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
			wc = fs->win[bc++ % SS(fs)];
 800abb8:	f109 0a01 	add.w	sl, r9, #1
 800abbc:	f3c9 0908 	ubfx	r9, r9, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abc0:	eb01 2b5a 	add.w	fp, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800abc4:	44b1      	add	r9, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 800abc6:	459b      	cmp	fp, r3
			wc = fs->win[bc++ % SS(fs)];
 800abc8:	f899 9030 	ldrb.w	r9, [r9, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800abcc:	d00a      	beq.n	800abe4 <dir_sdi.constprop.0+0x198>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800abce:	2301      	movs	r3, #1
 800abd0:	465a      	mov	r2, fp
 800abd2:	f106 0130 	add.w	r1, r6, #48	; 0x30
 800abd6:	7870      	ldrb	r0, [r6, #1]
 800abd8:	f7fe ffb6 	bl	8009b48 <disk_read>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d1e3      	bne.n	800aba8 <dir_sdi.constprop.0+0x15c>
			fs->winsect = sector;
 800abe0:	f8c6 b02c 	str.w	fp, [r6, #44]	; 0x2c
			wc |= fs->win[bc % SS(fs)] << 8;
 800abe4:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800abe8:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800abea:	4456      	add	r6, sl
 800abec:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800abf0:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800abf4:	bf4c      	ite	mi
 800abf6:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 800abfa:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
 800abfe:	e757      	b.n	800aab0 <dir_sdi.constprop.0+0x64>
			fs->winsect = sector;
 800ac00:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ac04:	0064      	lsls	r4, r4, #1
 800ac06:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800ac0a:	f839 4004 	ldrh.w	r4, [r9, r4]
			break;
 800ac0e:	e74f      	b.n	800aab0 <dir_sdi.constprop.0+0x64>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ac10:	6979      	ldr	r1, [r7, #20]
	clst -= 2;
 800ac12:	1ea0      	subs	r0, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ac14:	3902      	subs	r1, #2
 800ac16:	4288      	cmp	r0, r1
 800ac18:	d223      	bcs.n	800ac62 <dir_sdi.constprop.0+0x216>
	return clst * fs->csize + fs->database;
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	fb00 3302 	mla	r3, r0, r2, r3
		dp->sect = clust2sect(fs, clst);
 800ac20:	63ab      	str	r3, [r5, #56]	; 0x38
 800ac22:	e723      	b.n	800aa6c <dir_sdi.constprop.0+0x20>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ac24:	69aa      	ldr	r2, [r5, #24]
 800ac26:	4594      	cmp	ip, r2
 800ac28:	f4bf af7b 	bcs.w	800ab22 <dir_sdi.constprop.0+0xd6>
					val = clst + 1; 	/* Generate the value */
 800ac2c:	3401      	adds	r4, #1
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac2e:	1c63      	adds	r3, r4, #1
 800ac30:	f47f af3e 	bne.w	800aab0 <dir_sdi.constprop.0+0x64>
 800ac34:	f04f 0801 	mov.w	r8, #1
 800ac38:	e71e      	b.n	800aa78 <dir_sdi.constprop.0+0x2c>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800ac3a:	3a01      	subs	r2, #1
 800ac3c:	f141 31ff 	adc.w	r1, r1, #4294967295
 800ac40:	0a52      	lsrs	r2, r2, #9
 800ac42:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ac46:	8971      	ldrh	r1, [r6, #10]
 800ac48:	fbb2 f2f1 	udiv	r2, r2, r1
					if (cofs <= clen) {
 800ac4c:	4594      	cmp	ip, r2
 800ac4e:	f63f af34 	bhi.w	800aaba <dir_sdi.constprop.0+0x6e>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ac52:	d1eb      	bne.n	800ac2c <dir_sdi.constprop.0+0x1e0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800ac5a:	2a00      	cmp	r2, #0
 800ac5c:	f6ff af3f 	blt.w	800aade <dir_sdi.constprop.0+0x92>
 800ac60:	e72b      	b.n	800aaba <dir_sdi.constprop.0+0x6e>
		dp->sect = clust2sect(fs, clst);
 800ac62:	2300      	movs	r3, #0
 800ac64:	e9c5 430d 	strd	r4, r3, [r5, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800ac68:	e727      	b.n	800aaba <dir_sdi.constprop.0+0x6e>
 800ac6a:	bf00      	nop

0800ac6c <follow_path>:
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac6c:	680b      	ldr	r3, [r1, #0]
{
 800ac6e:	460a      	mov	r2, r1
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac74:	2b2f      	cmp	r3, #47	; 0x2f
{
 800ac76:	460d      	mov	r5, r1
	FATFS *fs = obj->fs;
 800ac78:	6801      	ldr	r1, [r0, #0]
{
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	ed2d 8b02 	vpush	{d8}
 800ac80:	b087      	sub	sp, #28
	FATFS *fs = obj->fs;
 800ac82:	9100      	str	r1, [sp, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac84:	d001      	beq.n	800ac8a <follow_path+0x1e>
 800ac86:	2b5c      	cmp	r3, #92	; 0x5c
 800ac88:	d106      	bne.n	800ac98 <follow_path+0x2c>
 800ac8a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ac8e:	2b2f      	cmp	r3, #47	; 0x2f
 800ac90:	d0fb      	beq.n	800ac8a <follow_path+0x1e>
 800ac92:	2b5c      	cmp	r3, #92	; 0x5c
 800ac94:	d0f9      	beq.n	800ac8a <follow_path+0x1e>
 800ac96:	4615      	mov	r5, r2
		obj->sclust = 0;					/* Start from root directory */
 800ac98:	2200      	movs	r2, #0
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ac9a:	2b1f      	cmp	r3, #31
		obj->sclust = 0;					/* Start from root directory */
 800ac9c:	60a2      	str	r2, [r4, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ac9e:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aca0:	f240 82c1 	bls.w	800b226 <follow_path+0x5ba>
	FATFS *fs = obj->fs;
 800aca4:	9e00      	ldr	r6, [sp, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800aca6:	46ab      	mov	fp, r5
		if (w < ' ') break;				/* Break if end of the path name */
 800aca8:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800acaa:	68f7      	ldr	r7, [r6, #12]
		if (w < ' ') break;				/* Break if end of the path name */
 800acac:	d929      	bls.n	800ad02 <follow_path+0x96>
 800acae:	f1a7 0e04 	sub.w	lr, r7, #4
 800acb2:	46dc      	mov	ip, fp
		w = p[si++];					/* Get a character */
 800acb4:	2001      	movs	r0, #1
 800acb6:	e008      	b.n	800acca <follow_path+0x5e>
		lfn[di++] = w;					/* Store the Unicode character */
 800acb8:	f84e 3f04 	str.w	r3, [lr, #4]!
		w = p[si++];					/* Get a character */
 800acbc:	1c42      	adds	r2, r0, #1
 800acbe:	f85c 3f04 	ldr.w	r3, [ip, #4]!
		if (w < ' ') break;				/* Break if end of the path name */
 800acc2:	2b1f      	cmp	r3, #31
 800acc4:	f240 81fd 	bls.w	800b0c2 <follow_path+0x456>
		w = p[si++];					/* Get a character */
 800acc8:	4610      	mov	r0, r2
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800acca:	2b2f      	cmp	r3, #47	; 0x2f
 800accc:	f100 35ff 	add.w	r5, r0, #4294967295
 800acd0:	d021      	beq.n	800ad16 <follow_path+0xaa>
 800acd2:	2b5c      	cmp	r3, #92	; 0x5c
 800acd4:	d01f      	beq.n	800ad16 <follow_path+0xaa>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800acd6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800acda:	d00a      	beq.n	800acf2 <follow_path+0x86>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800acdc:	2b7f      	cmp	r3, #127	; 0x7f
 800acde:	d8eb      	bhi.n	800acb8 <follow_path+0x4c>
	while (*str && *str != chr) str++;
 800ace0:	2222      	movs	r2, #34	; 0x22
 800ace2:	49af      	ldr	r1, [pc, #700]	; (800afa0 <follow_path+0x334>)
 800ace4:	e003      	b.n	800acee <follow_path+0x82>
 800ace6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800acea:	2a00      	cmp	r2, #0
 800acec:	d0e4      	beq.n	800acb8 <follow_path+0x4c>
 800acee:	429a      	cmp	r2, r3
 800acf0:	d1f9      	bne.n	800ace6 <follow_path+0x7a>
 800acf2:	f04f 0b06 	mov.w	fp, #6
}
 800acf6:	4658      	mov	r0, fp
 800acf8:	b007      	add	sp, #28
 800acfa:	ecbd 8b02 	vpop	{d8}
 800acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ad02:	f04f 0b06 	mov.w	fp, #6
	lfn[di] = 0;						/* LFN is created */
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4658      	mov	r0, fp
	lfn[di] = 0;						/* LFN is created */
 800ad0a:	603b      	str	r3, [r7, #0]
}
 800ad0c:	b007      	add	sp, #28
 800ad0e:	ecbd 8b02 	vpop	{d8}
 800ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ad16:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
 800ad1a:	0083      	lsls	r3, r0, #2
 800ad1c:	eb0b 0180 	add.w	r1, fp, r0, lsl #2
 800ad20:	2a5c      	cmp	r2, #92	; 0x5c
 800ad22:	d002      	beq.n	800ad2a <follow_path+0xbe>
 800ad24:	2a2f      	cmp	r2, #47	; 0x2f
 800ad26:	f040 82cc 	bne.w	800b2c2 <follow_path+0x656>
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	445b      	add	r3, fp
 800ad2e:	469b      	mov	fp, r3
 800ad30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad34:	2a2f      	cmp	r2, #47	; 0x2f
 800ad36:	d0fa      	beq.n	800ad2e <follow_path+0xc2>
 800ad38:	2a5c      	cmp	r2, #92	; 0x5c
 800ad3a:	d0f8      	beq.n	800ad2e <follow_path+0xc2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	d0e0      	beq.n	800ad02 <follow_path+0x96>
 800ad40:	f04f 0903 	mov.w	r9, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ad44:	f04f 0c00 	mov.w	ip, #0
 800ad48:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 800ad4c:	e001      	b.n	800ad52 <follow_path+0xe6>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ad4e:	3d01      	subs	r5, #1
 800ad50:	d0d7      	beq.n	800ad02 <follow_path+0x96>
		w = lfn[di - 1];
 800ad52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
		if (w != ' ' && w != '.') break;
 800ad56:	2b20      	cmp	r3, #32
 800ad58:	d0f9      	beq.n	800ad4e <follow_path+0xe2>
 800ad5a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad5c:	d0f7      	beq.n	800ad4e <follow_path+0xe2>
		*d++ = (BYTE)val;
 800ad5e:	2320      	movs	r3, #32
 800ad60:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 800ad64:	2100      	movs	r1, #0
 800ad66:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
		*d++ = (BYTE)val;
 800ad6a:	6422      	str	r2, [r4, #64]	; 0x40
 800ad6c:	6462      	str	r2, [r4, #68]	; 0x44
 800ad6e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 800ad72:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 800ad76:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ad7a:	6838      	ldr	r0, [r7, #0]
 800ad7c:	4298      	cmp	r0, r3
 800ad7e:	d002      	beq.n	800ad86 <follow_path+0x11a>
 800ad80:	282e      	cmp	r0, #46	; 0x2e
 800ad82:	f040 824c 	bne.w	800b21e <follow_path+0x5b2>
 800ad86:	463a      	mov	r2, r7
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800ad8e:	4698      	mov	r8, r3
 800ad90:	3301      	adds	r3, #1
 800ad92:	2820      	cmp	r0, #32
 800ad94:	d0f9      	beq.n	800ad8a <follow_path+0x11e>
 800ad96:	282e      	cmp	r0, #46	; 0x2e
 800ad98:	d0f7      	beq.n	800ad8a <follow_path+0x11e>
		w = lfn[si++];					/* Get an LFN character */
 800ad9a:	f108 0802 	add.w	r8, r8, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ad9e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 800ada2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ada6:	2a2e      	cmp	r2, #46	; 0x2e
 800ada8:	d001      	beq.n	800adae <follow_path+0x142>
 800adaa:	3d01      	subs	r5, #1
 800adac:	d1f9      	bne.n	800ada2 <follow_path+0x136>
		if (!w) break;					/* Break on end of the LFN */
 800adae:	2800      	cmp	r0, #0
 800adb0:	d03e      	beq.n	800ae30 <follow_path+0x1c4>
 800adb2:	2300      	movs	r3, #0
 800adb4:	f04f 0a08 	mov.w	sl, #8
 800adb8:	461e      	mov	r6, r3
 800adba:	9301      	str	r3, [sp, #4]
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800adbc:	2820      	cmp	r0, #32
 800adbe:	d005      	beq.n	800adcc <follow_path+0x160>
 800adc0:	282e      	cmp	r0, #46	; 0x2e
 800adc2:	f040 80dd 	bne.w	800af80 <follow_path+0x314>
 800adc6:	4545      	cmp	r5, r8
 800adc8:	f000 80da 	beq.w	800af80 <follow_path+0x314>
			cf |= NS_LOSS | NS_LFN; continue;
 800adcc:	f049 0903 	orr.w	r9, r9, #3
 800add0:	fa5f f989 	uxtb.w	r9, r9
		w = lfn[si++];					/* Get an LFN character */
 800add4:	f857 0028 	ldr.w	r0, [r7, r8, lsl #2]
 800add8:	f108 0801 	add.w	r8, r8, #1
		if (!w) break;					/* Break on end of the LFN */
 800addc:	2800      	cmp	r0, #0
 800adde:	d1ed      	bne.n	800adbc <follow_path+0x150>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ade0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ade4:	2be5      	cmp	r3, #229	; 0xe5
 800ade6:	d102      	bne.n	800adee <follow_path+0x182>
 800ade8:	2305      	movs	r3, #5
 800adea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	if (ni == 8) b <<= 2;
 800adee:	f1ba 0f08 	cmp.w	sl, #8
 800adf2:	f000 81aa 	beq.w	800b14a <follow_path+0x4de>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800adf6:	9a01      	ldr	r2, [sp, #4]
 800adf8:	f002 030c 	and.w	r3, r2, #12
 800adfc:	2b0c      	cmp	r3, #12
 800adfe:	f000 8168 	beq.w	800b0d2 <follow_path+0x466>
 800ae02:	f002 0a03 	and.w	sl, r2, #3
 800ae06:	f1ba 0f03 	cmp.w	sl, #3
 800ae0a:	f000 8162 	beq.w	800b0d2 <follow_path+0x466>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ae0e:	f019 0f02 	tst.w	r9, #2
	FATFS *fs = dp->obj.fs;
 800ae12:	6826      	ldr	r6, [r4, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ae14:	d10c      	bne.n	800ae30 <follow_path+0x1c4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ae16:	f1ba 0f01 	cmp.w	sl, #1
 800ae1a:	d103      	bne.n	800ae24 <follow_path+0x1b8>
 800ae1c:	f049 0910 	orr.w	r9, r9, #16
 800ae20:	fa5f f989 	uxtb.w	r9, r9
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d103      	bne.n	800ae30 <follow_path+0x1c4>
 800ae28:	f049 0908 	orr.w	r9, r9, #8
 800ae2c:	fa5f f989 	uxtb.w	r9, r9
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae30:	4620      	mov	r0, r4
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ae32:	f884 904b 	strb.w	r9, [r4, #75]	; 0x4b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae36:	f7ff fe09 	bl	800aa4c <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800ae3a:	9001      	str	r0, [sp, #4]
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f040 8156 	bne.w	800b0ee <follow_path+0x482>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ae42:	7833      	ldrb	r3, [r6, #0]
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	f000 81a1 	beq.w	800b18c <follow_path+0x520>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae4a:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800ae4e:	f04f 33ff 	mov.w	r3, #4294967295
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae52:	f106 0830 	add.w	r8, r6, #48	; 0x30
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae56:	4657      	mov	r7, sl
 800ae58:	64e3      	str	r3, [r4, #76]	; 0x4c
		res = move_window(fs, dp->sect);
 800ae5a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae5c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ae5e:	429d      	cmp	r5, r3
 800ae60:	d00d      	beq.n	800ae7e <follow_path+0x212>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae62:	2301      	movs	r3, #1
 800ae64:	462a      	mov	r2, r5
 800ae66:	4641      	mov	r1, r8
 800ae68:	7870      	ldrb	r0, [r6, #1]
 800ae6a:	f7fe fe6d 	bl	8009b48 <disk_read>
 800ae6e:	b128      	cbz	r0, 800ae7c <follow_path+0x210>
			fs->winsect = sector;
 800ae70:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800ae74:	f04f 0b01 	mov.w	fp, #1
			fs->winsect = sector;
 800ae78:	62f3      	str	r3, [r6, #44]	; 0x2c
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae7a:	e73c      	b.n	800acf6 <follow_path+0x8a>
			fs->winsect = sector;
 800ae7c:	62f5      	str	r5, [r6, #44]	; 0x2c
		c = dp->dir[DIR_Name];
 800ae7e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800ae80:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 8245 	beq.w	800b312 <follow_path+0x6a6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ae88:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ae8a:	2be5      	cmp	r3, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ae8c:	f002 013f 	and.w	r1, r2, #63	; 0x3f
 800ae90:	71a1      	strb	r1, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ae92:	d004      	beq.n	800ae9e <follow_path+0x232>
 800ae94:	0710      	lsls	r0, r2, #28
 800ae96:	d518      	bpl.n	800aeca <follow_path+0x25e>
 800ae98:	290f      	cmp	r1, #15
 800ae9a:	f000 8096 	beq.w	800afca <follow_path+0x35e>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aea2:	27ff      	movs	r7, #255	; 0xff
 800aea4:	64e3      	str	r3, [r4, #76]	; 0x4c
		res = dir_next(dp, 0);	/* Next entry */
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff fa70 	bl	800a38c <dir_next.constprop.0>
	} while (res == FR_OK);
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d0d4      	beq.n	800ae5a <follow_path+0x1ee>
 800aeb0:	4683      	mov	fp, r0
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aeb2:	f1bb 0f04 	cmp.w	fp, #4
			ns = dp->fn[NSFLAG];
 800aeb6:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aeba:	f47f af1c 	bne.w	800acf6 <follow_path+0x8a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aebe:	0759      	lsls	r1, r3, #29
 800aec0:	f100 821e 	bmi.w	800b300 <follow_path+0x694>
 800aec4:	f04f 0b05 	mov.w	fp, #5
 800aec8:	e715      	b.n	800acf6 <follow_path+0x8a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800aeca:	290f      	cmp	r1, #15
 800aecc:	d07d      	beq.n	800afca <follow_path+0x35e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aece:	2f00      	cmp	r7, #0
 800aed0:	f000 808e 	beq.w	800aff0 <follow_path+0x384>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aed4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800aed8:	07d8      	lsls	r0, r3, #31
 800aeda:	d4e0      	bmi.n	800ae9e <follow_path+0x232>
	} while (--cnt && r == 0);
 800aedc:	7829      	ldrb	r1, [r5, #0]
 800aede:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800aee2:	4291      	cmp	r1, r2
 800aee4:	d1db      	bne.n	800ae9e <follow_path+0x232>
 800aee6:	7869      	ldrb	r1, [r5, #1]
 800aee8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800aeec:	4291      	cmp	r1, r2
 800aeee:	d1d6      	bne.n	800ae9e <follow_path+0x232>
 800aef0:	78a9      	ldrb	r1, [r5, #2]
 800aef2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800aef6:	4291      	cmp	r1, r2
 800aef8:	d1d1      	bne.n	800ae9e <follow_path+0x232>
 800aefa:	78e9      	ldrb	r1, [r5, #3]
 800aefc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af00:	4291      	cmp	r1, r2
 800af02:	d1cc      	bne.n	800ae9e <follow_path+0x232>
 800af04:	7929      	ldrb	r1, [r5, #4]
 800af06:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800af0a:	4291      	cmp	r1, r2
 800af0c:	d1c7      	bne.n	800ae9e <follow_path+0x232>
 800af0e:	7969      	ldrb	r1, [r5, #5]
 800af10:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800af14:	4291      	cmp	r1, r2
 800af16:	d1c2      	bne.n	800ae9e <follow_path+0x232>
 800af18:	79a9      	ldrb	r1, [r5, #6]
 800af1a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800af1e:	4291      	cmp	r1, r2
 800af20:	d1bd      	bne.n	800ae9e <follow_path+0x232>
 800af22:	79e9      	ldrb	r1, [r5, #7]
 800af24:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800af28:	4291      	cmp	r1, r2
 800af2a:	d1b8      	bne.n	800ae9e <follow_path+0x232>
 800af2c:	7a29      	ldrb	r1, [r5, #8]
 800af2e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800af32:	4291      	cmp	r1, r2
 800af34:	d1b3      	bne.n	800ae9e <follow_path+0x232>
 800af36:	7a69      	ldrb	r1, [r5, #9]
 800af38:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
 800af3c:	4291      	cmp	r1, r2
 800af3e:	d1ae      	bne.n	800ae9e <follow_path+0x232>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af40:	7aa9      	ldrb	r1, [r5, #10]
 800af42:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 800af46:	4291      	cmp	r1, r2
 800af48:	d1a9      	bne.n	800ae9e <follow_path+0x232>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af4a:	075b      	lsls	r3, r3, #29
 800af4c:	f100 809e 	bmi.w	800b08c <follow_path+0x420>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800af50:	79a3      	ldrb	r3, [r4, #6]
 800af52:	06da      	lsls	r2, r3, #27
 800af54:	d5b6      	bpl.n	800aec4 <follow_path+0x258>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800af56:	9b00      	ldr	r3, [sp, #0]
 800af58:	781a      	ldrb	r2, [r3, #0]
 800af5a:	2a04      	cmp	r2, #4
 800af5c:	f000 80c9 	beq.w	800b0f2 <follow_path+0x486>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af60:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800af62:	3330      	adds	r3, #48	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800af64:	2a03      	cmp	r2, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af66:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800af6a:	440b      	add	r3, r1
	cl = ld_word(dir + DIR_FstClusLO);
 800af6c:	8b59      	ldrh	r1, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800af6e:	d102      	bne.n	800af76 <follow_path+0x30a>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af70:	8a9b      	ldrh	r3, [r3, #20]
 800af72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800af76:	60a1      	str	r1, [r4, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800af78:	6826      	ldr	r6, [r4, #0]
		w = p[si++];					/* Get a character */
 800af7a:	f8db 3000 	ldr.w	r3, [fp]
 800af7e:	e693      	b.n	800aca8 <follow_path+0x3c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800af80:	45b2      	cmp	sl, r6
 800af82:	f240 8086 	bls.w	800b092 <follow_path+0x426>
 800af86:	eba5 0108 	sub.w	r1, r5, r8
 800af8a:	fab1 f181 	clz	r1, r1
 800af8e:	0949      	lsrs	r1, r1, #5
 800af90:	2900      	cmp	r1, #0
 800af92:	d17e      	bne.n	800b092 <follow_path+0x426>
		if (w >= 0x80) {				/* Non ASCII character */
 800af94:	287f      	cmp	r0, #127	; 0x7f
 800af96:	f200 80c4 	bhi.w	800b122 <follow_path+0x4b6>
	while (*str && *str != chr) str++;
 800af9a:	232b      	movs	r3, #43	; 0x2b
 800af9c:	4a01      	ldr	r2, [pc, #4]	; (800afa4 <follow_path+0x338>)
 800af9e:	e008      	b.n	800afb2 <follow_path+0x346>
 800afa0:	0801fe14 	.word	0x0801fe14
 800afa4:	0801fe20 	.word	0x0801fe20
 800afa8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 80d8 	beq.w	800b162 <follow_path+0x4f6>
 800afb2:	4283      	cmp	r3, r0
 800afb4:	d1f8      	bne.n	800afa8 <follow_path+0x33c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800afb6:	f049 0903 	orr.w	r9, r9, #3
 800afba:	205f      	movs	r0, #95	; 0x5f
 800afbc:	fa5f f989 	uxtb.w	r9, r9
		dp->fn[i++] = (BYTE)w;
 800afc0:	19a3      	adds	r3, r4, r6
 800afc2:	3601      	adds	r6, #1
 800afc4:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 800afc8:	e704      	b.n	800add4 <follow_path+0x168>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800afca:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800afce:	0651      	lsls	r1, r2, #25
 800afd0:	f53f af69 	bmi.w	800aea6 <follow_path+0x23a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800afd4:	065a      	lsls	r2, r3, #25
 800afd6:	d571      	bpl.n	800b0bc <follow_path+0x450>
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800afd8:	f003 07bf 	and.w	r7, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800afdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 800afde:	f895 a00d 	ldrb.w	sl, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800afe2:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800afe4:	7b6b      	ldrb	r3, [r5, #13]
 800afe6:	4553      	cmp	r3, sl
 800afe8:	f000 8128 	beq.w	800b23c <follow_path+0x5d0>
 800afec:	27ff      	movs	r7, #255	; 0xff
 800afee:	e75a      	b.n	800aea6 <follow_path+0x23a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800aff0:	782a      	ldrb	r2, [r5, #0]
 800aff2:	01d3      	lsls	r3, r2, #7
 800aff4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800aff8:	786a      	ldrb	r2, [r5, #1]
 800affa:	441a      	add	r2, r3
 800affc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b000:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b004:	78aa      	ldrb	r2, [r5, #2]
 800b006:	fa52 f383 	uxtab	r3, r2, r3
 800b00a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800b00e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800b012:	78eb      	ldrb	r3, [r5, #3]
 800b014:	fa53 f382 	uxtab	r3, r3, r2
 800b018:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800b01c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800b020:	792b      	ldrb	r3, [r5, #4]
 800b022:	fa53 f282 	uxtab	r2, r3, r2
 800b026:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b02a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b02e:	796a      	ldrb	r2, [r5, #5]
 800b030:	fa52 f283 	uxtab	r2, r2, r3
 800b034:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b038:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b03c:	79aa      	ldrb	r2, [r5, #6]
 800b03e:	fa52 f383 	uxtab	r3, r2, r3
 800b042:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800b046:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800b04a:	79eb      	ldrb	r3, [r5, #7]
 800b04c:	fa53 f382 	uxtab	r3, r3, r2
 800b050:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800b054:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800b058:	7a2b      	ldrb	r3, [r5, #8]
 800b05a:	fa53 f282 	uxtab	r2, r3, r2
 800b05e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b062:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b066:	7a6a      	ldrb	r2, [r5, #9]
 800b068:	fa52 f283 	uxtab	r2, r2, r3
 800b06c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b070:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b074:	7aaa      	ldrb	r2, [r5, #10]
 800b076:	fa52 f383 	uxtab	r3, r2, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	4553      	cmp	r3, sl
 800b07e:	f47f af29 	bne.w	800aed4 <follow_path+0x268>
			ns = dp->fn[NSFLAG];
 800b082:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b086:	075b      	lsls	r3, r3, #29
 800b088:	f57f af62 	bpl.w	800af50 <follow_path+0x2e4>
 800b08c:	f8dd b004 	ldr.w	fp, [sp, #4]
 800b090:	e631      	b.n	800acf6 <follow_path+0x8a>
			if (ni == 11) {				/* Long extension */
 800b092:	f1ba 0f0b 	cmp.w	sl, #11
 800b096:	f000 8116 	beq.w	800b2c6 <follow_path+0x65a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b09a:	4545      	cmp	r5, r8
 800b09c:	d005      	beq.n	800b0aa <follow_path+0x43e>
 800b09e:	f049 0903 	orr.w	r9, r9, #3
 800b0a2:	fa5f f989 	uxtb.w	r9, r9
			if (si > di) break;			/* No extension */
 800b0a6:	f4ff ae9b 	bcc.w	800ade0 <follow_path+0x174>
			b <<= 2; continue;
 800b0aa:	9b01      	ldr	r3, [sp, #4]
 800b0ac:	46a8      	mov	r8, r5
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b0ae:	f04f 0a0b 	mov.w	sl, #11
 800b0b2:	2608      	movs	r6, #8
			b <<= 2; continue;
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	e68b      	b.n	800add4 <follow_path+0x168>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b0bc:	42bb      	cmp	r3, r7
 800b0be:	d195      	bne.n	800afec <follow_path+0x380>
 800b0c0:	e790      	b.n	800afe4 <follow_path+0x378>
	*path = &p[si];						/* Return pointer to the next segment */
 800b0c2:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	f04f 0907 	mov.w	r9, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b0cc:	f04f 0c04 	mov.w	ip, #4
 800b0d0:	e63a      	b.n	800ad48 <follow_path+0xdc>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b0d2:	f049 0902 	orr.w	r9, r9, #2
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b0d6:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800b0d8:	6826      	ldr	r6, [r4, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b0da:	fa5f f989 	uxtb.w	r9, r9
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b0de:	f884 904b 	strb.w	r9, [r4, #75]	; 0x4b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b0e2:	f7ff fcb3 	bl	800aa4c <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800b0e6:	9001      	str	r0, [sp, #4]
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f43f aeaa 	beq.w	800ae42 <follow_path+0x1d6>
 800b0ee:	4683      	mov	fp, r0
 800b0f0:	e6df      	b.n	800aeb2 <follow_path+0x246>
 800b0f2:	461a      	mov	r2, r3
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b0f4:	6923      	ldr	r3, [r4, #16]
 800b0f6:	79e5      	ldrb	r5, [r4, #7]
 800b0f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800b0fc:	6912      	ldr	r2, [r2, #16]
				obj->c_scl = obj->sclust;
 800b0fe:	68a0      	ldr	r0, [r4, #8]
				obj->c_ofs = dp->blk_ofs;
 800b100:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b102:	432b      	orrs	r3, r5
				obj->c_scl = obj->sclust;
 800b104:	6220      	str	r0, [r4, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b106:	e9c4 3109 	strd	r3, r1, [r4, #36]	; 0x24
	rv = rv << 8 | ptr[0];
 800b10a:	6b53      	ldr	r3, [r2, #52]	; 0x34
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800b10c:	60a3      	str	r3, [r4, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b10e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800b112:	f003 0302 	and.w	r3, r3, #2
 800b116:	71e3      	strb	r3, [r4, #7]
	rv = rv << 8 | ptr[0];
 800b118:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800b11a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b11c:	e9c4 1304 	strd	r1, r3, [r4, #16]
 800b120:	e72a      	b.n	800af78 <follow_path+0x30c>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b122:	f000 fdeb 	bl	800bcfc <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b126:	b920      	cbnz	r0, 800b132 <follow_path+0x4c6>
			cf |= NS_LFN;				/* Force create LFN entry */
 800b128:	f049 0902 	orr.w	r9, r9, #2
 800b12c:	fa5f f989 	uxtb.w	r9, r9
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b130:	e741      	b.n	800afb6 <follow_path+0x34a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b132:	4b79      	ldr	r3, [pc, #484]	; (800b318 <follow_path+0x6ac>)
			cf |= NS_LFN;				/* Force create LFN entry */
 800b134:	f049 0902 	orr.w	r9, r9, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b138:	4418      	add	r0, r3
			cf |= NS_LFN;				/* Force create LFN entry */
 800b13a:	fa5f f989 	uxtb.w	r9, r9
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b13e:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b142:	2800      	cmp	r0, #0
 800b144:	f43f af37 	beq.w	800afb6 <follow_path+0x34a>
 800b148:	e727      	b.n	800af9a <follow_path+0x32e>
	if (ni == 8) b <<= 2;
 800b14a:	9b01      	ldr	r3, [sp, #4]
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	f003 030c 	and.w	r3, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b152:	2b0c      	cmp	r3, #12
 800b154:	d0bd      	beq.n	800b0d2 <follow_path+0x466>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b156:	f019 0f02 	tst.w	r9, #2
	FATFS *fs = dp->obj.fs;
 800b15a:	6826      	ldr	r6, [r4, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b15c:	f43f ae62 	beq.w	800ae24 <follow_path+0x1b8>
 800b160:	e666      	b.n	800ae30 <follow_path+0x1c4>
				if (IsUpper(w)) {		/* ASCII large capital */
 800b162:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b166:	2b19      	cmp	r3, #25
 800b168:	d805      	bhi.n	800b176 <follow_path+0x50a>
					b |= 2;
 800b16a:	9b01      	ldr	r3, [sp, #4]
		dp->fn[i++] = (BYTE)w;
 800b16c:	b2c0      	uxtb	r0, r0
					b |= 2;
 800b16e:	f043 0302 	orr.w	r3, r3, #2
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	e724      	b.n	800afc0 <follow_path+0x354>
					if (IsLower(w)) {	/* ASCII small capital */
 800b176:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b17a:	2b19      	cmp	r3, #25
 800b17c:	d804      	bhi.n	800b188 <follow_path+0x51c>
						b |= 1; w -= 0x20;
 800b17e:	9b01      	ldr	r3, [sp, #4]
 800b180:	3820      	subs	r0, #32
 800b182:	f043 0301 	orr.w	r3, r3, #1
 800b186:	9301      	str	r3, [sp, #4]
		dp->fn[i++] = (BYTE)w;
 800b188:	b2c0      	uxtb	r0, r0
 800b18a:	e719      	b.n	800afc0 <follow_path+0x354>
	while ((chr = *name++) != 0) {
 800b18c:	68f5      	ldr	r5, [r6, #12]
	WORD sum = 0;
 800b18e:	9f01      	ldr	r7, [sp, #4]
	while ((chr = *name++) != 0) {
 800b190:	f855 0b04 	ldr.w	r0, [r5], #4
 800b194:	b188      	cbz	r0, 800b1ba <follow_path+0x54e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800b196:	f000 fdcb 	bl	800bd30 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b19a:	b2c2      	uxtb	r2, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b19c:	0a03      	lsrs	r3, r0, #8
	while ((chr = *name++) != 0) {
 800b19e:	f855 0b04 	ldr.w	r0, [r5], #4
 800b1a2:	eb02 0257 	add.w	r2, r2, r7, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b1a6:	eb02 32c7 	add.w	r2, r2, r7, lsl #15
 800b1aa:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b1ac:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800b1b0:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800b1b4:	b29f      	uxth	r7, r3
	while ((chr = *name++) != 0) {
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d1ed      	bne.n	800b196 <follow_path+0x52a>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f7ff f930 	bl	800a420 <dir_read.constprop.0>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	f47f ae75 	bne.w	800aeb0 <follow_path+0x244>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800b1c6:	6933      	ldr	r3, [r6, #16]
 800b1c8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800b1ca:	42ba      	cmp	r2, r7
 800b1cc:	d1f5      	bne.n	800b1ba <follow_path+0x54e>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b1ce:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 800b1d2:	f1b9 0f00 	cmp.w	r9, #0
 800b1d6:	f000 8091 	beq.w	800b2fc <follow_path+0x690>
 800b1da:	4605      	mov	r5, r0
 800b1dc:	f04f 0840 	mov.w	r8, #64	; 0x40
 800b1e0:	e002      	b.n	800b1e8 <follow_path+0x57c>
 800b1e2:	454d      	cmp	r5, r9
 800b1e4:	d015      	beq.n	800b212 <follow_path+0x5a6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b1e6:	6933      	ldr	r3, [r6, #16]
				if ((di % SZDIRE) == 0) di += 2;
 800b1e8:	f018 0f1f 	tst.w	r8, #31
 800b1ec:	bf08      	it	eq
 800b1ee:	f108 0802 	addeq.w	r8, r8, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b1f2:	f833 0008 	ldrh.w	r0, [r3, r8]
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b1f6:	f108 0802 	add.w	r8, r8, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b1fa:	f000 fd99 	bl	800bd30 <ff_wtoupper>
 800b1fe:	68f3      	ldr	r3, [r6, #12]
 800b200:	4682      	mov	sl, r0
 800b202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b206:	3501      	adds	r5, #1
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b208:	f000 fd92 	bl	800bd30 <ff_wtoupper>
 800b20c:	4582      	cmp	sl, r0
 800b20e:	d0e8      	beq.n	800b1e2 <follow_path+0x576>
 800b210:	e7d3      	b.n	800b1ba <follow_path+0x54e>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b212:	00ad      	lsls	r5, r5, #2
 800b214:	68f3      	ldr	r3, [r6, #12]
 800b216:	595b      	ldr	r3, [r3, r5]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1ce      	bne.n	800b1ba <follow_path+0x54e>
 800b21c:	e731      	b.n	800b082 <follow_path+0x416>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b21e:	46e1      	mov	r9, ip
 800b220:	f04f 0801 	mov.w	r8, #1
 800b224:	e5bb      	b.n	800ad9e <follow_path+0x132>
		dp->fn[NSFLAG] = NS_NONAME;
 800b226:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800b228:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800b22a:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
}
 800b22e:	b007      	add	sp, #28
 800b230:	ecbd 8b02 	vpop	{d8}
 800b234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800b238:	f7ff bc08 	b.w	800aa4c <dir_sdi.constprop.0>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b23c:	8b6b      	ldrh	r3, [r5, #26]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f47f aed4 	bne.w	800afec <follow_path+0x380>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b244:	f895 9000 	ldrb.w	r9, [r5]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b248:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b24a:	68f2      	ldr	r2, [r6, #12]
 800b24c:	ee08 8a10 	vmov	s16, r8
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b250:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 800b254:	4b31      	ldr	r3, [pc, #196]	; (800b31c <follow_path+0x6b0>)
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b256:	9202      	str	r2, [sp, #8]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b258:	4608      	mov	r0, r1
 800b25a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b25e:	f8cd b010 	str.w	fp, [sp, #16]
 800b262:	9603      	str	r6, [sp, #12]
 800b264:	46a3      	mov	fp, r4
 800b266:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 800b26a:	461c      	mov	r4, r3
 800b26c:	9705      	str	r7, [sp, #20]
 800b26e:	eb09 0982 	add.w	r9, r9, r2, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b272:	e012      	b.n	800b29a <follow_path+0x62e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b274:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 800b278:	4640      	mov	r0, r8
 800b27a:	d81a      	bhi.n	800b2b2 <follow_path+0x646>
 800b27c:	f000 fd58 	bl	800bd30 <ff_wtoupper>
 800b280:	9b02      	ldr	r3, [sp, #8]
 800b282:	4606      	mov	r6, r0
 800b284:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800b288:	46b9      	mov	r9, r7
 800b28a:	f000 fd51 	bl	800bd30 <ff_wtoupper>
 800b28e:	4286      	cmp	r6, r0
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b290:	4640      	mov	r0, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b292:	d10e      	bne.n	800b2b2 <follow_path+0x646>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b294:	4b22      	ldr	r3, [pc, #136]	; (800b320 <follow_path+0x6b4>)
 800b296:	42a3      	cmp	r3, r4
 800b298:	d022      	beq.n	800b2e0 <follow_path+0x674>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b29a:	f814 3b01 	ldrb.w	r3, [r4], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b29e:	f109 0701 	add.w	r7, r9, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b2a2:	f835 8003 	ldrh.w	r8, [r5, r3]
		if (wc) {
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d1e4      	bne.n	800b274 <follow_path+0x608>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b2aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2ae:	4598      	cmp	r8, r3
 800b2b0:	d0f0      	beq.n	800b294 <follow_path+0x628>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b2b2:	465c      	mov	r4, fp
 800b2b4:	9e03      	ldr	r6, [sp, #12]
 800b2b6:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b2ba:	ee18 8a10 	vmov	r8, s16
 800b2be:	27ff      	movs	r7, #255	; 0xff
 800b2c0:	e5f1      	b.n	800aea6 <follow_path+0x23a>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b2c2:	468b      	mov	fp, r1
 800b2c4:	e53a      	b.n	800ad3c <follow_path+0xd0>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b2c6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				cf |= NS_LOSS | NS_LFN; break;
 800b2ca:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b2ce:	2be5      	cmp	r3, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 800b2d0:	fa5f f989 	uxtb.w	r9, r9
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b2d4:	f47f ad8f 	bne.w	800adf6 <follow_path+0x18a>
 800b2d8:	2305      	movs	r3, #5
 800b2da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	if (ni == 8) b <<= 2;
 800b2de:	e58a      	b.n	800adf6 <follow_path+0x18a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b2e0:	782b      	ldrb	r3, [r5, #0]
 800b2e2:	465c      	mov	r4, fp
 800b2e4:	9e03      	ldr	r6, [sp, #12]
 800b2e6:	ee18 8a10 	vmov	r8, s16
 800b2ea:	065d      	lsls	r5, r3, #25
 800b2ec:	9f05      	ldr	r7, [sp, #20]
 800b2ee:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b2f2:	d500      	bpl.n	800b2f6 <follow_path+0x68a>
 800b2f4:	b938      	cbnz	r0, 800b306 <follow_path+0x69a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b2f6:	3f01      	subs	r7, #1
 800b2f8:	b2ff      	uxtb	r7, r7
 800b2fa:	e5d4      	b.n	800aea6 <follow_path+0x23a>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b2fc:	464d      	mov	r5, r9
 800b2fe:	e789      	b.n	800b214 <follow_path+0x5a8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b300:	f04f 0b04 	mov.w	fp, #4
 800b304:	e4f7      	b.n	800acf6 <follow_path+0x8a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b306:	9b02      	ldr	r3, [sp, #8]
 800b308:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d0f2      	beq.n	800b2f6 <follow_path+0x68a>
 800b310:	e66c      	b.n	800afec <follow_path+0x380>
			ns = dp->fn[NSFLAG];
 800b312:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b316:	e5d2      	b.n	800aebe <follow_path+0x252>
 800b318:	0801fe28 	.word	0x0801fe28
 800b31c:	0801fea8 	.word	0x0801fea8
 800b320:	0801feb5 	.word	0x0801feb5

0800b324 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b324:	b510      	push	{r4, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800b32c:	b189      	cbz	r1, 800b352 <f_mount+0x2e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b32e:	680c      	ldr	r4, [r1, #0]
 800b330:	2c1f      	cmp	r4, #31
 800b332:	d911      	bls.n	800b358 <f_mount+0x34>
 800b334:	2c3a      	cmp	r4, #58	; 0x3a
 800b336:	d00f      	beq.n	800b358 <f_mount+0x34>
 800b338:	4608      	mov	r0, r1
 800b33a:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800b33e:	2b1f      	cmp	r3, #31
 800b340:	d90c      	bls.n	800b35c <f_mount+0x38>
 800b342:	2b3a      	cmp	r3, #58	; 0x3a
 800b344:	d1f9      	bne.n	800b33a <f_mount+0x16>
			i = *tp++ - '0';
 800b346:	3104      	adds	r1, #4
 800b348:	3c30      	subs	r4, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b34a:	4288      	cmp	r0, r1
 800b34c:	d101      	bne.n	800b352 <f_mount+0x2e>
 800b34e:	2c01      	cmp	r4, #1
 800b350:	d907      	bls.n	800b362 <f_mount+0x3e>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800b352:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800b354:	b002      	add	sp, #8
 800b356:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b358:	4623      	mov	r3, r4
 800b35a:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b35c:	2b3a      	cmp	r3, #58	; 0x3a
 800b35e:	d0f2      	beq.n	800b346 <f_mount+0x22>
		vol = 0;		/* Drive 0 */
 800b360:	2400      	movs	r4, #0
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b362:	490c      	ldr	r1, [pc, #48]	; (800b394 <f_mount+0x70>)
 800b364:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
	if (cfs) {
 800b368:	b10b      	cbz	r3, 800b36e <f_mount+0x4a>
		cfs->fs_type = 0;				/* Clear old fs object */
 800b36a:	2000      	movs	r0, #0
 800b36c:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800b36e:	9b01      	ldr	r3, [sp, #4]
 800b370:	b15b      	cbz	r3, 800b38a <f_mount+0x66>
		fs->fs_type = 0;				/* Clear new fs object */
 800b372:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b374:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800b376:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 800b37a:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b37c:	d1ea      	bne.n	800b354 <f_mount+0x30>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b37e:	a901      	add	r1, sp, #4
 800b380:	4668      	mov	r0, sp
 800b382:	f7fe fd25 	bl	8009dd0 <find_volume.constprop.0>
}
 800b386:	b002      	add	sp, #8
 800b388:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b38a:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 800b38c:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
}
 800b390:	b002      	add	sp, #8
 800b392:	bd10      	pop	{r4, pc}
 800b394:	20000394 	.word	0x20000394

0800b398 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	b098      	sub	sp, #96	; 0x60
 800b39c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d039      	beq.n	800b416 <f_open+0x7e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b3a2:	4604      	mov	r4, r0
	res = find_volume(&path, &fs, mode);
 800b3a4:	a903      	add	r1, sp, #12
 800b3a6:	a801      	add	r0, sp, #4
 800b3a8:	4615      	mov	r5, r2
 800b3aa:	f7fe fd11 	bl	8009dd0 <find_volume.constprop.0>
	if (res == FR_OK) {
 800b3ae:	b118      	cbz	r0, 800b3b8 <f_open+0x20>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800b3b4:	b018      	add	sp, #96	; 0x60
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
		dj.obj.fs = fs;
 800b3b8:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b3ba:	a804      	add	r0, sp, #16
 800b3bc:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800b3be:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b3c0:	f7ff fc54 	bl	800ac6c <follow_path>
		if (res == FR_OK) {
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d1f3      	bne.n	800b3b0 <f_open+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b3c8:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	db25      	blt.n	800b41c <f_open+0x84>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b3d0:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800b3d4:	f010 0010 	ands.w	r0, r0, #16
 800b3d8:	d122      	bne.n	800b420 <f_open+0x88>
			if (fs->fs_type == FS_EXFAT) {
 800b3da:	9b03      	ldr	r3, [sp, #12]
 800b3dc:	781a      	ldrb	r2, [r3, #0]
 800b3de:	2a04      	cmp	r2, #4
 800b3e0:	d024      	beq.n	800b42c <f_open+0x94>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b3e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
	if (fs->fs_type == FS_FAT32) {
 800b3e4:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800b3e6:	8b4e      	ldrh	r6, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 800b3e8:	d01c      	beq.n	800b424 <f_open+0x8c>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b3ea:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 800b3ec:	69ca      	ldr	r2, [r1, #28]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b3ee:	6122      	str	r2, [r4, #16]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	6162      	str	r2, [r4, #20]
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b3f4:	f005 0201 	and.w	r2, r5, #1
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b3f8:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
 800b3fa:	88db      	ldrh	r3, [r3, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b3fc:	2100      	movs	r1, #0
			fp->flag = mode;		/* Set file access mode */
 800b3fe:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b402:	2200      	movs	r2, #0
			fp->obj.id = fs->id;
 800b404:	80a3      	strh	r3, [r4, #4]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b406:	2300      	movs	r3, #0
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b408:	64a1      	str	r1, [r4, #72]	; 0x48
			fp->err = 0;			/* Clear error flag */
 800b40a:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800b40e:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b410:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b414:	e7ce      	b.n	800b3b4 <f_open+0x1c>
	if (!fp) return FR_INVALID_OBJECT;
 800b416:	2009      	movs	r0, #9
}
 800b418:	b018      	add	sp, #96	; 0x60
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
				res = FR_INVALID_NAME;
 800b41c:	2006      	movs	r0, #6
 800b41e:	e7c7      	b.n	800b3b0 <f_open+0x18>
					res = FR_NO_FILE;
 800b420:	2004      	movs	r0, #4
 800b422:	e7c5      	b.n	800b3b0 <f_open+0x18>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b424:	8a8a      	ldrh	r2, [r1, #20]
 800b426:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800b42a:	e7de      	b.n	800b3ea <f_open+0x52>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800b42c:	9a06      	ldr	r2, [sp, #24]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800b42e:	f89d 1017 	ldrb.w	r1, [sp, #23]
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800b432:	6222      	str	r2, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800b434:	9a08      	ldr	r2, [sp, #32]
 800b436:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b43a:	430a      	orrs	r2, r1
 800b43c:	6262      	str	r2, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800b43e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b440:	62a2      	str	r2, [r4, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b442:	691a      	ldr	r2, [r3, #16]
	rv = rv << 8 | ptr[0];
 800b444:	6b51      	ldr	r1, [r2, #52]	; 0x34
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b446:	60a1      	str	r1, [r4, #8]
	rv = rv << 8 | ptr[0];
 800b448:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800b44a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b44c:	e9c4 6104 	strd	r6, r1, [r4, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b450:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b454:	f002 0202 	and.w	r2, r2, #2
 800b458:	71e2      	strb	r2, [r4, #7]
 800b45a:	e7cb      	b.n	800b3f4 <f_open+0x5c>

0800b45c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800b462:	2300      	movs	r3, #0
{
 800b464:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 800b466:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b468:	b150      	cbz	r0, 800b480 <f_read+0x24>
 800b46a:	6803      	ldr	r3, [r0, #0]
 800b46c:	4604      	mov	r4, r0
 800b46e:	b13b      	cbz	r3, 800b480 <f_read+0x24>
 800b470:	4615      	mov	r5, r2
 800b472:	781a      	ldrb	r2, [r3, #0]
 800b474:	b122      	cbz	r2, 800b480 <f_read+0x24>
 800b476:	460e      	mov	r6, r1
 800b478:	88da      	ldrh	r2, [r3, #6]
 800b47a:	8881      	ldrh	r1, [r0, #4]
 800b47c:	4291      	cmp	r1, r2
 800b47e:	d005      	beq.n	800b48c <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800b480:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800b484:	4640      	mov	r0, r8
 800b486:	b003      	add	sp, #12
 800b488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b48c:	7858      	ldrb	r0, [r3, #1]
 800b48e:	f7fe fb3f 	bl	8009b10 <disk_status>
 800b492:	07c1      	lsls	r1, r0, #31
 800b494:	d4f4      	bmi.n	800b480 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b496:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
 800b49a:	f1b8 0f00 	cmp.w	r8, #0
 800b49e:	d1f1      	bne.n	800b484 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b4a0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800b4a4:	f013 0301 	ands.w	r3, r3, #1
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	f000 80e0 	beq.w	800b66e <f_read+0x212>
	remain = fp->obj.objsize - fp->fptr;
 800b4ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b4b0:	6923      	ldr	r3, [r4, #16]
 800b4b2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b4b4:	1a9b      	subs	r3, r3, r2
 800b4b6:	6960      	ldr	r0, [r4, #20]
 800b4b8:	eb60 0001 	sbc.w	r0, r0, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b4bc:	42ab      	cmp	r3, r5
 800b4be:	f170 0000 	sbcs.w	r0, r0, #0
 800b4c2:	bf38      	it	cc
 800b4c4:	461d      	movcc	r5, r3
	for ( ;  btr;								/* Repeat until all data read */
 800b4c6:	2d00      	cmp	r5, #0
 800b4c8:	d0dc      	beq.n	800b484 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4ca:	46a2      	mov	sl, r4
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b4cc:	f3c2 0008 	ubfx	r0, r2, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4d0:	f85a 9b4c 	ldr.w	r9, [sl], #76
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d140      	bne.n	800b55a <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b4d8:	0a50      	lsrs	r0, r2, #9
 800b4da:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800b4de:	ea4f 2c51 	mov.w	ip, r1, lsr #9
 800b4e2:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 800b4e6:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800b4e8:	4003      	ands	r3, r0
 800b4ea:	d069      	beq.n	800b5c0 <f_read+0x164>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b4ec:	6c20      	ldr	r0, [r4, #64]	; 0x40
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b4ee:	f8d9 2014 	ldr.w	r2, [r9, #20]
	clst -= 2;
 800b4f2:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b4f4:	3a02      	subs	r2, #2
 800b4f6:	4290      	cmp	r0, r2
 800b4f8:	d270      	bcs.n	800b5dc <f_read+0x180>
	return clst * fs->csize + fs->database;
 800b4fa:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800b4fe:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800b502:	fb01 2200 	mla	r2, r1, r0, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b506:	2a00      	cmp	r2, #0
 800b508:	d068      	beq.n	800b5dc <f_read+0x180>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b50a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
			sect += csect;
 800b50e:	441a      	add	r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b510:	d36c      	bcc.n	800b5ec <f_read+0x190>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b512:	eb03 2055 	add.w	r0, r3, r5, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b516:	ea4f 2b55 	mov.w	fp, r5, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b51a:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b51c:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800b520:	bf88      	it	hi
 800b522:	eba1 0b03 	subhi.w	fp, r1, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b526:	4631      	mov	r1, r6
 800b528:	465b      	mov	r3, fp
 800b52a:	f7fe fb0d 	bl	8009b48 <disk_read>
 800b52e:	2800      	cmp	r0, #0
 800b530:	f040 808a 	bne.w	800b648 <f_read+0x1ec>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b534:	ea4f 234b 	mov.w	r3, fp, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b538:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b53a:	441e      	add	r6, r3
 800b53c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b53e:	189a      	adds	r2, r3, r2
 800b540:	6838      	ldr	r0, [r7, #0]
 800b542:	f141 0100 	adc.w	r1, r1, #0
 800b546:	4418      	add	r0, r3
	for ( ;  btr;								/* Repeat until all data read */
 800b548:	1aed      	subs	r5, r5, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b54a:	63a2      	str	r2, [r4, #56]	; 0x38
 800b54c:	63e1      	str	r1, [r4, #60]	; 0x3c
 800b54e:	6038      	str	r0, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800b550:	d098      	beq.n	800b484 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b552:	f3c2 0008 	ubfx	r0, r2, #0, #9
 800b556:	2800      	cmp	r0, #0
 800b558:	d0be      	beq.n	800b4d8 <f_read+0x7c>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b55a:	1c41      	adds	r1, r0, #1
 800b55c:	f5c0 7300 	rsb	r3, r0, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b560:	eb0a 0200 	add.w	r2, sl, r0
 800b564:	4451      	add	r1, sl
 800b566:	42ab      	cmp	r3, r5
 800b568:	eba6 0101 	sub.w	r1, r6, r1
 800b56c:	bf28      	it	cs
 800b56e:	462b      	movcs	r3, r5
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b570:	2902      	cmp	r1, #2
 800b572:	f103 3bff 	add.w	fp, r3, #4294967295
 800b576:	d970      	bls.n	800b65a <f_read+0x1fe>
 800b578:	f1bb 0f07 	cmp.w	fp, #7
 800b57c:	d96d      	bls.n	800b65a <f_read+0x1fe>
 800b57e:	f023 0e03 	bic.w	lr, r3, #3
 800b582:	4631      	mov	r1, r6
 800b584:	4610      	mov	r0, r2
 800b586:	44b6      	add	lr, r6
			*d++ = *s++;
 800b588:	f850 cb04 	ldr.w	ip, [r0], #4
 800b58c:	f841 cb04 	str.w	ip, [r1], #4
		} while (--cnt);
 800b590:	458e      	cmp	lr, r1
 800b592:	d1f9      	bne.n	800b588 <f_read+0x12c>
 800b594:	f023 0103 	bic.w	r1, r3, #3
 800b598:	428b      	cmp	r3, r1
 800b59a:	eb06 0001 	add.w	r0, r6, r1
 800b59e:	eb02 0c01 	add.w	ip, r2, r1
 800b5a2:	d0c9      	beq.n	800b538 <f_read+0xdc>
			*d++ = *s++;
 800b5a4:	5c52      	ldrb	r2, [r2, r1]
 800b5a6:	5472      	strb	r2, [r6, r1]
		} while (--cnt);
 800b5a8:	ebbb 0101 	subs.w	r1, fp, r1
 800b5ac:	d0c4      	beq.n	800b538 <f_read+0xdc>
			*d++ = *s++;
 800b5ae:	f89c 2001 	ldrb.w	r2, [ip, #1]
		} while (--cnt);
 800b5b2:	2901      	cmp	r1, #1
			*d++ = *s++;
 800b5b4:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 800b5b6:	d0bf      	beq.n	800b538 <f_read+0xdc>
			*d++ = *s++;
 800b5b8:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800b5bc:	7082      	strb	r2, [r0, #2]
		} while (--cnt);
 800b5be:	e7bb      	b.n	800b538 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	d124      	bne.n	800b60e <f_read+0x1b2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b5c4:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b5c6:	2801      	cmp	r0, #1
 800b5c8:	d908      	bls.n	800b5dc <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b5ca:	1c42      	adds	r2, r0, #1
 800b5cc:	d03c      	beq.n	800b648 <f_read+0x1ec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b5ce:	f8d9 2014 	ldr.w	r2, [r9, #20]
				fp->clust = clst;				/* Update current cluster */
 800b5d2:	6420      	str	r0, [r4, #64]	; 0x40
	clst -= 2;
 800b5d4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b5d6:	3a02      	subs	r2, #2
 800b5d8:	4290      	cmp	r0, r2
 800b5da:	d38e      	bcc.n	800b4fa <f_read+0x9e>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b5dc:	2302      	movs	r3, #2
 800b5de:	4698      	mov	r8, r3
 800b5e0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800b5e4:	4640      	mov	r0, r8
 800b5e6:	b003      	add	sp, #12
 800b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b5ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d008      	beq.n	800b604 <f_read+0x1a8>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	4651      	mov	r1, sl
 800b5f6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b5fa:	9201      	str	r2, [sp, #4]
 800b5fc:	f7fe faa4 	bl	8009b48 <disk_read>
 800b600:	9a01      	ldr	r2, [sp, #4]
 800b602:	bb08      	cbnz	r0, 800b648 <f_read+0x1ec>
			fp->sect = sect;
 800b604:	6462      	str	r2, [r4, #68]	; 0x44
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b606:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b608:	f3c2 0008 	ubfx	r0, r2, #0, #9
 800b60c:	e7a5      	b.n	800b55a <f_read+0xfe>
					if (fp->cltbl) {
 800b60e:	f8d4 b048 	ldr.w	fp, [r4, #72]	; 0x48
 800b612:	f1bb 0f00 	cmp.w	fp, #0
 800b616:	d02d      	beq.n	800b674 <f_read+0x218>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b618:	6822      	ldr	r2, [r4, #0]
 800b61a:	4661      	mov	r1, ip
 800b61c:	9301      	str	r3, [sp, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b61e:	f10b 0b04 	add.w	fp, fp, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b622:	8952      	ldrh	r2, [r2, #10]
 800b624:	f7f5 fb40 	bl	8000ca8 <__aeabi_uldivmod>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b628:	f8db 2000 	ldr.w	r2, [fp]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b62c:	9b01      	ldr	r3, [sp, #4]
 800b62e:	b92a      	cbnz	r2, 800b63c <f_read+0x1e0>
 800b630:	e7d4      	b.n	800b5dc <f_read+0x180>
		cl -= ncl; tbl++;		/* Next fragment */
 800b632:	1a80      	subs	r0, r0, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b634:	f85b 2f08 	ldr.w	r2, [fp, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b638:	2a00      	cmp	r2, #0
 800b63a:	d0cf      	beq.n	800b5dc <f_read+0x180>
		if (cl < ncl) break;	/* In this fragment? */
 800b63c:	4282      	cmp	r2, r0
 800b63e:	d9f8      	bls.n	800b632 <f_read+0x1d6>
	return cl + *tbl;	/* Return the cluster number */
 800b640:	f8db 2004 	ldr.w	r2, [fp, #4]
 800b644:	4410      	add	r0, r2
 800b646:	e7be      	b.n	800b5c6 <f_read+0x16a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b648:	f8dd 8000 	ldr.w	r8, [sp]
 800b64c:	2301      	movs	r3, #1
}
 800b64e:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b650:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800b654:	b003      	add	sp, #12
 800b656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65a:	1e71      	subs	r1, r6, #1
 800b65c:	eb02 0c03 	add.w	ip, r2, r3
			*d++ = *s++;
 800b660:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 800b664:	4594      	cmp	ip, r2
			*d++ = *s++;
 800b666:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800b66a:	d1f9      	bne.n	800b660 <f_read+0x204>
 800b66c:	e764      	b.n	800b538 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b66e:	f04f 0807 	mov.w	r8, #7
 800b672:	e707      	b.n	800b484 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b674:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b676:	4620      	mov	r0, r4
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	f7fe fdc7 	bl	800a20c <get_fat>
 800b67e:	9b01      	ldr	r3, [sp, #4]
 800b680:	e7a1      	b.n	800b5c6 <f_read+0x16a>
 800b682:	bf00      	nop

0800b684 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b684:	b198      	cbz	r0, 800b6ae <f_close+0x2a>
 800b686:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b688:	b510      	push	{r4, lr}
 800b68a:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b68c:	b12b      	cbz	r3, 800b69a <f_close+0x16>
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	b11a      	cbz	r2, 800b69a <f_close+0x16>
 800b692:	8881      	ldrh	r1, [r0, #4]
 800b694:	88da      	ldrh	r2, [r3, #6]
 800b696:	4291      	cmp	r1, r2
 800b698:	d001      	beq.n	800b69e <f_close+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 800b69a:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800b69c:	bd10      	pop	{r4, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b69e:	7858      	ldrb	r0, [r3, #1]
 800b6a0:	f7fe fa36 	bl	8009b10 <disk_status>
 800b6a4:	f010 0001 	ands.w	r0, r0, #1
 800b6a8:	d1f7      	bne.n	800b69a <f_close+0x16>
				fp->obj.fs = 0;			/* Invalidate file object */
 800b6aa:	6020      	str	r0, [r4, #0]
}
 800b6ac:	bd10      	pop	{r4, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800b6ae:	2009      	movs	r0, #9
}
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop

0800b6b4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b8:	b087      	sub	sp, #28
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b6ba:	b140      	cbz	r0, 800b6ce <f_lseek+0x1a>
 800b6bc:	6801      	ldr	r1, [r0, #0]
 800b6be:	4604      	mov	r4, r0
 800b6c0:	b129      	cbz	r1, 800b6ce <f_lseek+0x1a>
 800b6c2:	7808      	ldrb	r0, [r1, #0]
 800b6c4:	b118      	cbz	r0, 800b6ce <f_lseek+0x1a>
 800b6c6:	88a5      	ldrh	r5, [r4, #4]
 800b6c8:	88c8      	ldrh	r0, [r1, #6]
 800b6ca:	4285      	cmp	r5, r0
 800b6cc:	d004      	beq.n	800b6d8 <f_lseek+0x24>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 800b6ce:	2609      	movs	r6, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	b007      	add	sp, #28
 800b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b6d8:	7848      	ldrb	r0, [r1, #1]
 800b6da:	4693      	mov	fp, r2
 800b6dc:	4698      	mov	r8, r3
 800b6de:	f7fe fa17 	bl	8009b10 <disk_status>
 800b6e2:	07c1      	lsls	r1, r0, #31
 800b6e4:	d4f3      	bmi.n	800b6ce <f_lseek+0x1a>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b6e6:	6825      	ldr	r5, [r4, #0]
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b6e8:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b6ec:	46aa      	mov	sl, r5
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	d1ee      	bne.n	800b6d0 <f_lseek+0x1c>
	if (fp->cltbl) {	/* Fast seek */
 800b6f2:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800b6f4:	2f00      	cmp	r7, #0
 800b6f6:	d04e      	beq.n	800b796 <f_lseek+0xe2>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b6f8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b6fc:	bf08      	it	eq
 800b6fe:	f1bb 3fff 	cmpeq.w	fp, #4294967295
 800b702:	f000 80de 	beq.w	800b8c2 <f_lseek+0x20e>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b706:	e9d4 9104 	ldrd	r9, r1, [r4, #16]
 800b70a:	45cb      	cmp	fp, r9
 800b70c:	eb78 0301 	sbcs.w	r3, r8, r1
 800b710:	d201      	bcs.n	800b716 <f_lseek+0x62>
 800b712:	46d9      	mov	r9, fp
 800b714:	4641      	mov	r1, r8
			if (ofs) {
 800b716:	ea59 0301 	orrs.w	r3, r9, r1
			fp->fptr = ofs;				/* Set file pointer */
 800b71a:	e9c4 910e 	strd	r9, r1, [r4, #56]	; 0x38
			if (ofs) {
 800b71e:	d0d7      	beq.n	800b6d0 <f_lseek+0x1c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b720:	f119 3aff 	adds.w	sl, r9, #4294967295
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b724:	f8b5 b00a 	ldrh.w	fp, [r5, #10]
 800b728:	f04f 0300 	mov.w	r3, #0
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b72c:	f107 0804 	add.w	r8, r7, #4
				fp->clust = clmt_clust(fp, ofs - 1);
 800b730:	f141 31ff 	adc.w	r1, r1, #4294967295
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b734:	ea4f 2a5a 	mov.w	sl, sl, lsr #9
 800b738:	465a      	mov	r2, fp
 800b73a:	ea4a 5ac1 	orr.w	sl, sl, r1, lsl #23
 800b73e:	0a49      	lsrs	r1, r1, #9
 800b740:	4650      	mov	r0, sl
 800b742:	f7f5 fab1 	bl	8000ca8 <__aeabi_uldivmod>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b746:	687b      	ldr	r3, [r7, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b748:	b933      	cbnz	r3, 800b758 <f_lseek+0xa4>
 800b74a:	e168      	b.n	800ba1e <f_lseek+0x36a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b74c:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b74e:	f858 3f08 	ldr.w	r3, [r8, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 8163 	beq.w	800ba1e <f_lseek+0x36a>
		if (cl < ncl) break;	/* In this fragment? */
 800b758:	4283      	cmp	r3, r0
 800b75a:	d9f7      	bls.n	800b74c <f_lseek+0x98>
	return cl + *tbl;	/* Return the cluster number */
 800b75c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b760:	4403      	add	r3, r0
	clst -= 2;
 800b762:	1e9a      	subs	r2, r3, #2
				fp->clust = clmt_clust(fp, ofs - 1);
 800b764:	6423      	str	r3, [r4, #64]	; 0x40
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b766:	696b      	ldr	r3, [r5, #20]
 800b768:	3b02      	subs	r3, #2
 800b76a:	4293      	cmp	r3, r2
 800b76c:	f240 80c5 	bls.w	800b8fa <f_lseek+0x246>
	return clst * fs->csize + fs->database;
 800b770:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800b772:	fb02 770b 	mla	r7, r2, fp, r7
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b776:	2f00      	cmp	r7, #0
 800b778:	f000 80bf 	beq.w	800b8fa <f_lseek+0x246>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b77c:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800b780:	2b00      	cmp	r3, #0
 800b782:	d0a5      	beq.n	800b6d0 <f_lseek+0x1c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b784:	f10b 3bff 	add.w	fp, fp, #4294967295
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b788:	6c63      	ldr	r3, [r4, #68]	; 0x44
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b78a:	ea0b 0a0a 	and.w	sl, fp, sl
 800b78e:	4457      	add	r7, sl
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b790:	42bb      	cmp	r3, r7
 800b792:	d09d      	beq.n	800b6d0 <f_lseek+0x1c>
 800b794:	e053      	b.n	800b83e <f_lseek+0x18a>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800b796:	7829      	ldrb	r1, [r5, #0]
 800b798:	2904      	cmp	r1, #4
 800b79a:	d007      	beq.n	800b7ac <f_lseek+0xf8>
 800b79c:	f04f 31ff 	mov.w	r1, #4294967295
 800b7a0:	4559      	cmp	r1, fp
 800b7a2:	eb76 0308 	sbcs.w	r3, r6, r8
 800b7a6:	d201      	bcs.n	800b7ac <f_lseek+0xf8>
 800b7a8:	468b      	mov	fp, r1
 800b7aa:	46b0      	mov	r8, r6
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b7ac:	6923      	ldr	r3, [r4, #16]
 800b7ae:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800b7b2:	459b      	cmp	fp, r3
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	eb78 0309 	sbcs.w	r3, r8, r9
 800b7ba:	d202      	bcs.n	800b7c2 <f_lseek+0x10e>
 800b7bc:	46c1      	mov	r9, r8
 800b7be:	f8cd b004 	str.w	fp, [sp, #4]
		fp->fptr = nsect = 0;
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	2000      	movs	r0, #0
		ifptr = fp->fptr;
 800b7c6:	e9d4 370e 	ldrd	r3, r7, [r4, #56]	; 0x38
		fp->fptr = nsect = 0;
 800b7ca:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs) {
 800b7ce:	9901      	ldr	r1, [sp, #4]
 800b7d0:	ea51 0209 	orrs.w	r2, r1, r9
 800b7d4:	f43f af7c 	beq.w	800b6d0 <f_lseek+0x1c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b7d8:	896a      	ldrh	r2, [r5, #10]
 800b7da:	ea4f 2842 	mov.w	r8, r2, lsl #9
			if (ifptr > 0 &&
 800b7de:	ea53 0207 	orrs.w	r2, r3, r7
 800b7e2:	d037      	beq.n	800b854 <f_lseek+0x1a0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b7e4:	f113 3aff 	adds.w	sl, r3, #4294967295
 800b7e8:	4642      	mov	r2, r8
 800b7ea:	f04f 0300 	mov.w	r3, #0
 800b7ee:	f147 37ff 	adc.w	r7, r7, #4294967295
 800b7f2:	1e48      	subs	r0, r1, #1
 800b7f4:	f169 0100 	sbc.w	r1, r9, #0
 800b7f8:	f7f5 fa56 	bl	8000ca8 <__aeabi_uldivmod>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	468b      	mov	fp, r1
 800b800:	9002      	str	r0, [sp, #8]
 800b802:	4642      	mov	r2, r8
 800b804:	4650      	mov	r0, sl
 800b806:	4639      	mov	r1, r7
 800b808:	f7f5 fa4e 	bl	8000ca8 <__aeabi_uldivmod>
			if (ifptr > 0 &&
 800b80c:	9b02      	ldr	r3, [sp, #8]
 800b80e:	4283      	cmp	r3, r0
 800b810:	eb7b 0301 	sbcs.w	r3, fp, r1
 800b814:	d31e      	bcc.n	800b854 <f_lseek+0x1a0>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b816:	f1c8 0000 	rsb	r0, r8, #0
 800b81a:	463b      	mov	r3, r7
 800b81c:	63e7      	str	r7, [r4, #60]	; 0x3c
 800b81e:	ea00 000a 	and.w	r0, r0, sl
				clst = fp->clust;
 800b822:	6c27      	ldr	r7, [r4, #64]	; 0x40
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b824:	63a0      	str	r0, [r4, #56]	; 0x38
			if (clst != 0) {
 800b826:	2f00      	cmp	r7, #0
 800b828:	f040 819b 	bne.w	800bb62 <f_lseek+0x4ae>
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b82c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800b830:	2800      	cmp	r0, #0
 800b832:	f43f af4d 	beq.w	800b6d0 <f_lseek+0x1c>
 800b836:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b838:	42bb      	cmp	r3, r7
 800b83a:	f43f af49 	beq.w	800b6d0 <f_lseek+0x1c>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b83e:	2301      	movs	r3, #1
 800b840:	463a      	mov	r2, r7
 800b842:	7868      	ldrb	r0, [r5, #1]
 800b844:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800b848:	f7fe f97e 	bl	8009b48 <disk_read>
 800b84c:	4606      	mov	r6, r0
 800b84e:	bb98      	cbnz	r0, 800b8b8 <f_lseek+0x204>
			fp->sect = nsect;
 800b850:	6467      	str	r7, [r4, #68]	; 0x44
 800b852:	e73d      	b.n	800b6d0 <f_lseek+0x1c>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b854:	68a7      	ldr	r7, [r4, #8]
				fp->clust = clst;
 800b856:	6427      	str	r7, [r4, #64]	; 0x40
			if (clst != 0) {
 800b858:	2f00      	cmp	r7, #0
 800b85a:	f43f af39 	beq.w	800b6d0 <f_lseek+0x1c>
 800b85e:	2000      	movs	r0, #0
 800b860:	f8dd a004 	ldr.w	sl, [sp, #4]
 800b864:	46cb      	mov	fp, r9
 800b866:	4603      	mov	r3, r0
				while (ofs > bcs) {						/* Cluster following loop */
 800b868:	45d0      	cmp	r8, sl
 800b86a:	f04f 0200 	mov.w	r2, #0
 800b86e:	eb72 020b 	sbcs.w	r2, r2, fp
 800b872:	f080 8105 	bcs.w	800ba80 <f_lseek+0x3cc>
 800b876:	4639      	mov	r1, r7
 800b878:	e00e      	b.n	800b898 <f_lseek+0x1e4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b87a:	2801      	cmp	r0, #1
 800b87c:	d93d      	bls.n	800b8fa <f_lseek+0x246>
 800b87e:	696b      	ldr	r3, [r5, #20]
 800b880:	4283      	cmp	r3, r0
 800b882:	d93a      	bls.n	800b8fa <f_lseek+0x246>
				while (ofs > bcs) {						/* Cluster following loop */
 800b884:	45d0      	cmp	r8, sl
 800b886:	f04f 0300 	mov.w	r3, #0
					fp->clust = clst;
 800b88a:	6420      	str	r0, [r4, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800b88c:	eb73 030b 	sbcs.w	r3, r3, fp
 800b890:	f080 8135 	bcs.w	800bafe <f_lseek+0x44a>
					ofs -= bcs; fp->fptr += bcs;
 800b894:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
 800b898:	ebba 0a08 	subs.w	sl, sl, r8
 800b89c:	f16b 0b00 	sbc.w	fp, fp, #0
 800b8a0:	eb18 0000 	adds.w	r0, r8, r0
 800b8a4:	f143 0300 	adc.w	r3, r3, #0
 800b8a8:	63a0      	str	r0, [r4, #56]	; 0x38
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b8aa:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 800b8ac:	63e3      	str	r3, [r4, #60]	; 0x3c
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b8ae:	f7fe fcad 	bl	800a20c <get_fat>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b8b2:	1c43      	adds	r3, r0, #1
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b8b4:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b8b6:	d1e0      	bne.n	800b87a <f_lseek+0x1c6>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	461e      	mov	r6, r3
 800b8bc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800b8c0:	e706      	b.n	800b6d0 <f_lseek+0x1c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b8c2:	463b      	mov	r3, r7
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b8c4:	68a2      	ldr	r2, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b8c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8ca:	e9cd 1302 	strd	r1, r3, [sp, #8]
			if (cl) {
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	f000 809a 	beq.w	800ba0a <f_lseek+0x356>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b8d6:	2202      	movs	r2, #2
					} while (cl == pcl + 1);
 800b8d8:	9604      	str	r6, [sp, #16]
 800b8da:	461e      	mov	r6, r3
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b8dc:	9201      	str	r2, [sp, #4]
 800b8de:	46b0      	mov	r8, r6
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b8e0:	f04f 0b00 	mov.w	fp, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b8e4:	f1b8 0f01 	cmp.w	r8, #1
 800b8e8:	d907      	bls.n	800b8fa <f_lseek+0x246>
 800b8ea:	f10b 0202 	add.w	r2, fp, #2
 800b8ee:	4647      	mov	r7, r8
 800b8f0:	6969      	ldr	r1, [r5, #20]
 800b8f2:	42b9      	cmp	r1, r7
 800b8f4:	f102 3bff 	add.w	fp, r2, #4294967295
 800b8f8:	d807      	bhi.n	800b90a <f_lseek+0x256>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	461e      	mov	r6, r3
 800b8fe:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800b902:	4630      	mov	r0, r6
 800b904:	b007      	add	sp, #28
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (fs->fs_type) {
 800b90a:	782b      	ldrb	r3, [r5, #0]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	2b03      	cmp	r3, #3
 800b910:	d8f3      	bhi.n	800b8fa <f_lseek+0x246>
 800b912:	e8df f003 	tbb	[pc, r3]
 800b916:	4b59      	.short	0x4b59
 800b918:	0233      	.short	0x0233
			if (obj->objsize) {
 800b91a:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
 800b91e:	ea53 000c 	orrs.w	r0, r3, ip
 800b922:	d0ea      	beq.n	800b8fa <f_lseek+0x246>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800b924:	f894 e007 	ldrb.w	lr, [r4, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b928:	68a0      	ldr	r0, [r4, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800b92a:	f1be 0f02 	cmp.w	lr, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b92e:	eba7 0000 	sub.w	r0, r7, r0
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800b932:	f000 80ec 	beq.w	800bb0e <f_lseek+0x45a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b936:	f1be 0f03 	cmp.w	lr, #3
 800b93a:	f000 8101 	beq.w	800bb40 <f_lseek+0x48c>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b93e:	69e3      	ldr	r3, [r4, #28]
 800b940:	2b00      	cmp	r3, #0
 800b942:	f040 8104 	bne.w	800bb4e <f_lseek+0x49a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b946:	6a2b      	ldr	r3, [r5, #32]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b948:	f105 0930 	add.w	r9, r5, #48	; 0x30
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b94c:	eb03 18d7 	add.w	r8, r3, r7, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b950:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b952:	4598      	cmp	r8, r3
 800b954:	d00a      	beq.n	800b96c <f_lseek+0x2b8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b956:	2301      	movs	r3, #1
 800b958:	4642      	mov	r2, r8
 800b95a:	7868      	ldrb	r0, [r5, #1]
 800b95c:	4649      	mov	r1, r9
 800b95e:	f7fe f8f3 	bl	8009b48 <disk_read>
 800b962:	2800      	cmp	r0, #0
 800b964:	f040 80a7 	bne.w	800bab6 <f_lseek+0x402>
			fs->winsect = sector;
 800b968:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b96c:	00bb      	lsls	r3, r7, #2
 800b96e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800b972:	f859 8003 	ldr.w	r8, [r9, r3]
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b976:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
 800b97a:	e00e      	b.n	800b99a <f_lseek+0x2e6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b97c:	6a2a      	ldr	r2, [r5, #32]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b97e:	f105 0930 	add.w	r9, r5, #48	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b982:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b984:	eb02 18d7 	add.w	r8, r2, r7, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b988:	4598      	cmp	r8, r3
 800b98a:	d14b      	bne.n	800ba24 <f_lseek+0x370>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b98c:	00bb      	lsls	r3, r7, #2
 800b98e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800b992:	f859 8003 	ldr.w	r8, [r9, r3]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b996:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b99a:	f1b8 0f01 	cmp.w	r8, #1
 800b99e:	d9ac      	bls.n	800b8fa <f_lseek+0x246>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800b9a0:	3701      	adds	r7, #1
					} while (cl == pcl + 1);
 800b9a2:	4547      	cmp	r7, r8
 800b9a4:	f040 808d 	bne.w	800bac2 <f_lseek+0x40e>
 800b9a8:	6825      	ldr	r5, [r4, #0]
 800b9aa:	e79b      	b.n	800b8e4 <f_lseek+0x230>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b9ac:	6a2a      	ldr	r2, [r5, #32]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b9ae:	f105 0930 	add.w	r9, r5, #48	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b9b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b9b4:	eb02 2817 	add.w	r8, r2, r7, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b9b8:	4598      	cmp	r8, r3
 800b9ba:	d14c      	bne.n	800ba56 <f_lseek+0x3a2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b9bc:	007b      	lsls	r3, r7, #1
 800b9be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b9c2:	f839 8003 	ldrh.w	r8, [r9, r3]
			break;
 800b9c6:	e7e8      	b.n	800b99a <f_lseek+0x2e6>
			bc = (UINT)clst; bc += bc / 2;
 800b9c8:	eb07 0857 	add.w	r8, r7, r7, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9cc:	6a2a      	ldr	r2, [r5, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b9ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9d0:	eb02 2958 	add.w	r9, r2, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b9d4:	4599      	cmp	r9, r3
 800b9d6:	d130      	bne.n	800ba3a <f_lseek+0x386>
			wc = fs->win[bc++ % SS(fs)];
 800b9d8:	f108 0901 	add.w	r9, r8, #1
 800b9dc:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9e0:	eb02 2259 	add.w	r2, r2, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b9e4:	44a8      	add	r8, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b9e6:	429a      	cmp	r2, r3
			wc = fs->win[bc++ % SS(fs)];
 800b9e8:	f898 8030 	ldrb.w	r8, [r8, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b9ec:	d13d      	bne.n	800ba6a <f_lseek+0x3b6>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b9ee:	f3c9 0908 	ubfx	r9, r9, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b9f2:	07fa      	lsls	r2, r7, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800b9f4:	444d      	add	r5, r9
 800b9f6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800b9fa:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b9fe:	bf4c      	ite	mi
 800ba00:	ea4f 1818 	movmi.w	r8, r8, lsr #4
 800ba04:	f3c8 080b 	ubfxpl	r8, r8, #0, #12
 800ba08:	e7c7      	b.n	800b99a <f_lseek+0x2e6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ba0a:	2302      	movs	r3, #2
 800ba0c:	460a      	mov	r2, r1
 800ba0e:	9301      	str	r3, [sp, #4]
			if (ulen <= tlen) {
 800ba10:	4293      	cmp	r3, r2
			*fp->cltbl = ulen;	/* Number of items used */
 800ba12:	603b      	str	r3, [r7, #0]
			if (ulen <= tlen) {
 800ba14:	d868      	bhi.n	800bae8 <f_lseek+0x434>
				*tbl = 0;		/* Terminate table */
 800ba16:	2300      	movs	r3, #0
 800ba18:	9a03      	ldr	r2, [sp, #12]
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	e658      	b.n	800b6d0 <f_lseek+0x1c>
 800ba1e:	f06f 0201 	mvn.w	r2, #1
 800ba22:	e69f      	b.n	800b764 <f_lseek+0xb0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba24:	2301      	movs	r3, #1
 800ba26:	4642      	mov	r2, r8
 800ba28:	7868      	ldrb	r0, [r5, #1]
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	f7fe f88c 	bl	8009b48 <disk_read>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d140      	bne.n	800bab6 <f_lseek+0x402>
			fs->winsect = sector;
 800ba34:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	return res;
 800ba38:	e7a8      	b.n	800b98c <f_lseek+0x2d8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	464a      	mov	r2, r9
 800ba3e:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800ba42:	7868      	ldrb	r0, [r5, #1]
 800ba44:	f7fe f880 	bl	8009b48 <disk_read>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d134      	bne.n	800bab6 <f_lseek+0x402>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba4c:	464b      	mov	r3, r9
 800ba4e:	6a2a      	ldr	r2, [r5, #32]
			fs->winsect = sector;
 800ba50:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
	return res;
 800ba54:	e7c0      	b.n	800b9d8 <f_lseek+0x324>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba56:	2301      	movs	r3, #1
 800ba58:	4642      	mov	r2, r8
 800ba5a:	7868      	ldrb	r0, [r5, #1]
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	f7fe f873 	bl	8009b48 <disk_read>
 800ba62:	bb40      	cbnz	r0, 800bab6 <f_lseek+0x402>
			fs->winsect = sector;
 800ba64:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	return res;
 800ba68:	e7a8      	b.n	800b9bc <f_lseek+0x308>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800ba70:	7868      	ldrb	r0, [r5, #1]
 800ba72:	9205      	str	r2, [sp, #20]
 800ba74:	f7fe f868 	bl	8009b48 <disk_read>
 800ba78:	9a05      	ldr	r2, [sp, #20]
 800ba7a:	b9e0      	cbnz	r0, 800bab6 <f_lseek+0x402>
			fs->winsect = sector;
 800ba7c:	62ea      	str	r2, [r5, #44]	; 0x2c
	return res;
 800ba7e:	e7b6      	b.n	800b9ee <f_lseek+0x33a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ba80:	9801      	ldr	r0, [sp, #4]
 800ba82:	464b      	mov	r3, r9
				if (ofs % SS(fs)) {
 800ba84:	f3ca 0208 	ubfx	r2, sl, #0, #9
				fp->fptr += ofs;
 800ba88:	e9c4 030e 	strd	r0, r3, [r4, #56]	; 0x38
				if (ofs % SS(fs)) {
 800ba8c:	2a00      	cmp	r2, #0
 800ba8e:	d05c      	beq.n	800bb4a <f_lseek+0x496>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba90:	696a      	ldr	r2, [r5, #20]
	clst -= 2;
 800ba92:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba94:	3a02      	subs	r2, #2
 800ba96:	4291      	cmp	r1, r2
 800ba98:	f4bf af2f 	bcs.w	800b8fa <f_lseek+0x246>
	return clst * fs->csize + fs->database;
 800ba9c:	896a      	ldrh	r2, [r5, #10]
 800ba9e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800baa0:	fb01 7702 	mla	r7, r1, r2, r7
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800baa4:	2f00      	cmp	r7, #0
 800baa6:	f43f af28 	beq.w	800b8fa <f_lseek+0x246>
					nsect += (DWORD)(ofs / SS(fs));
 800baaa:	ea4f 2a5a 	mov.w	sl, sl, lsr #9
 800baae:	ea4a 5acb 	orr.w	sl, sl, fp, lsl #23
 800bab2:	4457      	add	r7, sl
 800bab4:	e6ba      	b.n	800b82c <f_lseek+0x178>
			fs->winsect = sector;
 800bab6:	f04f 33ff 	mov.w	r3, #4294967295
 800baba:	62eb      	str	r3, [r5, #44]	; 0x2c
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800babc:	e6fc      	b.n	800b8b8 <f_lseek+0x204>
					} while (cl == pcl + 1);
 800babe:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bac2:	9b01      	ldr	r3, [sp, #4]
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bac4:	9a02      	ldr	r2, [sp, #8]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bac6:	3302      	adds	r3, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bac8:	429a      	cmp	r2, r3
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800baca:	9301      	str	r3, [sp, #4]
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bacc:	d30e      	bcc.n	800baec <f_lseek+0x438>
						*tbl++ = ncl; *tbl++ = tcl;
 800bace:	9a03      	ldr	r2, [sp, #12]
 800bad0:	4613      	mov	r3, r2
 800bad2:	f843 bb08 	str.w	fp, [r3], #8
 800bad6:	6056      	str	r6, [r2, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bad8:	f8da 2014 	ldr.w	r2, [sl, #20]
 800badc:	4542      	cmp	r2, r8
 800bade:	d93d      	bls.n	800bb5c <f_lseek+0x4a8>
						*tbl++ = ncl; *tbl++ = tcl;
 800bae0:	9303      	str	r3, [sp, #12]
	FATFS *fs = obj->fs;
 800bae2:	4646      	mov	r6, r8
 800bae4:	6825      	ldr	r5, [r4, #0]
 800bae6:	e6fa      	b.n	800b8de <f_lseek+0x22a>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bae8:	2611      	movs	r6, #17
 800baea:	e5f1      	b.n	800b6d0 <f_lseek+0x1c>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800baec:	f8da 3014 	ldr.w	r3, [sl, #20]
 800baf0:	4543      	cmp	r3, r8
 800baf2:	d8f6      	bhi.n	800bae2 <f_lseek+0x42e>
 800baf4:	9e04      	ldr	r6, [sp, #16]
			*fp->cltbl = ulen;	/* Number of items used */
 800baf6:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800baf8:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800bafc:	e788      	b.n	800ba10 <f_lseek+0x35c>
				fp->fptr += ofs;
 800bafe:	4607      	mov	r7, r0
 800bb00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bb02:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bb04:	eb1a 0000 	adds.w	r0, sl, r0
 800bb08:	eb4b 0302 	adc.w	r3, fp, r2
 800bb0c:	e7ba      	b.n	800ba84 <f_lseek+0x3d0>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	f14c 3cff 	adc.w	ip, ip, #4294967295
 800bb14:	0a5b      	lsrs	r3, r3, #9
 800bb16:	ea43 53cc 	orr.w	r3, r3, ip, lsl #23
 800bb1a:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800bb1e:	fbb3 f3fc 	udiv	r3, r3, ip
					if (cofs <= clen) {
 800bb22:	4298      	cmp	r0, r3
 800bb24:	f63f aee9 	bhi.w	800b8fa <f_lseek+0x246>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800bb28:	d011      	beq.n	800bb4e <f_lseek+0x49a>
					val = clst + 1; 	/* Generate the value */
 800bb2a:	f107 0801 	add.w	r8, r7, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bb2e:	f1b8 0f01 	cmp.w	r8, #1
 800bb32:	f67f aee2 	bls.w	800b8fa <f_lseek+0x246>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bb36:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bb3a:	f47f aed3 	bne.w	800b8e4 <f_lseek+0x230>
 800bb3e:	e6bb      	b.n	800b8b8 <f_lseek+0x204>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800bb40:	69a3      	ldr	r3, [r4, #24]
 800bb42:	4298      	cmp	r0, r3
 800bb44:	f4bf aefb 	bcs.w	800b93e <f_lseek+0x28a>
 800bb48:	e7ef      	b.n	800bb2a <f_lseek+0x476>
		fp->fptr = nsect = 0;
 800bb4a:	4617      	mov	r7, r2
 800bb4c:	e66e      	b.n	800b82c <f_lseek+0x178>
					} while (cl == pcl + 1);
 800bb4e:	4b08      	ldr	r3, [pc, #32]	; (800bb70 <f_lseek+0x4bc>)
 800bb50:	429f      	cmp	r7, r3
 800bb52:	d1b4      	bne.n	800babe <f_lseek+0x40a>
 800bb54:	3201      	adds	r2, #1
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bb56:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800bb5a:	e6ca      	b.n	800b8f2 <f_lseek+0x23e>
						*tbl++ = ncl; *tbl++ = tcl;
 800bb5c:	9e04      	ldr	r6, [sp, #16]
 800bb5e:	9303      	str	r3, [sp, #12]
 800bb60:	e7c9      	b.n	800baf6 <f_lseek+0x442>
				ofs -= fp->fptr;
 800bb62:	9a01      	ldr	r2, [sp, #4]
 800bb64:	ebb2 0a00 	subs.w	sl, r2, r0
 800bb68:	eb69 0b03 	sbc.w	fp, r9, r3
 800bb6c:	e67c      	b.n	800b868 <f_lseek+0x1b4>
 800bb6e:	bf00      	nop
 800bb70:	7ffffffe 	.word	0x7ffffffe

0800bb74 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800bb74:	b530      	push	{r4, r5, lr}
 800bb76:	b085      	sub	sp, #20
 800bb78:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d032      	beq.n	800bbe4 <f_opendir+0x70>

	/* Get logical drive */
	obj = &dp->obj;
 800bb7e:	4604      	mov	r4, r0
	res = find_volume(&path, &fs, 0);
 800bb80:	a903      	add	r1, sp, #12
 800bb82:	a801      	add	r0, sp, #4
 800bb84:	f7fe f924 	bl	8009dd0 <find_volume.constprop.0>
	if (res == FR_OK) {
 800bb88:	b118      	cbz	r0, 800bb92 <f_opendir+0x1e>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800bb8e:	b005      	add	sp, #20
 800bb90:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800bb92:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800bb94:	4620      	mov	r0, r4
 800bb96:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 800bb98:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800bb9a:	f7ff f867 	bl	800ac6c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800bb9e:	b9e8      	cbnz	r0, 800bbdc <f_opendir+0x68>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800bba0:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	db20      	blt.n	800bbea <f_opendir+0x76>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800bba8:	79a3      	ldrb	r3, [r4, #6]
 800bbaa:	06db      	lsls	r3, r3, #27
 800bbac:	d518      	bpl.n	800bbe0 <f_opendir+0x6c>
					if (fs->fs_type == FS_EXFAT) {
 800bbae:	9b03      	ldr	r3, [sp, #12]
 800bbb0:	781a      	ldrb	r2, [r3, #0]
 800bbb2:	2a04      	cmp	r2, #4
 800bbb4:	d01b      	beq.n	800bbee <f_opendir+0x7a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800bbb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	if (fs->fs_type == FS_FAT32) {
 800bbb8:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800bbba:	8b41      	ldrh	r1, [r0, #26]
	if (fs->fs_type == FS_FAT32) {
 800bbbc:	d102      	bne.n	800bbc4 <f_opendir+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bbbe:	8a82      	ldrh	r2, [r0, #20]
 800bbc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800bbc4:	60a1      	str	r1, [r4, #8]
				obj->id = fs->id;
 800bbc6:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800bbc8:	4620      	mov	r0, r4
				obj->id = fs->id;
 800bbca:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800bbcc:	f7fe ff3e 	bl	800aa4c <dir_sdi.constprop.0>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800bbd0:	2804      	cmp	r0, #4
 800bbd2:	d005      	beq.n	800bbe0 <f_opendir+0x6c>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d1d8      	bne.n	800bb8a <f_opendir+0x16>
}
 800bbd8:	b005      	add	sp, #20
 800bbda:	bd30      	pop	{r4, r5, pc}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800bbdc:	2804      	cmp	r0, #4
 800bbde:	d1d4      	bne.n	800bb8a <f_opendir+0x16>
					res = FR_NO_PATH;
 800bbe0:	2005      	movs	r0, #5
 800bbe2:	e7d2      	b.n	800bb8a <f_opendir+0x16>
	if (!dp) return FR_INVALID_OBJECT;
 800bbe4:	2009      	movs	r0, #9
}
 800bbe6:	b005      	add	sp, #20
 800bbe8:	bd30      	pop	{r4, r5, pc}
					if (fs->fs_type == FS_EXFAT) {
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	e7eb      	b.n	800bbc6 <f_opendir+0x52>
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800bbee:	6922      	ldr	r2, [r4, #16]
 800bbf0:	79e0      	ldrb	r0, [r4, #7]
 800bbf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800bbf6:	6919      	ldr	r1, [r3, #16]
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800bbf8:	68a5      	ldr	r5, [r4, #8]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800bbfa:	4302      	orrs	r2, r0
						obj->c_ofs = dp->blk_ofs;
 800bbfc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800bbfe:	6225      	str	r5, [r4, #32]
						obj->c_ofs = dp->blk_ofs;
 800bc00:	e9c4 2009 	strd	r2, r0, [r4, #36]	; 0x24
	rv = rv << 8 | ptr[0];
 800bc04:	6b4a      	ldr	r2, [r1, #52]	; 0x34
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800bc06:	60a2      	str	r2, [r4, #8]
	rv = rv << 8 | ptr[0];
 800bc08:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800bc0a:	6b88      	ldr	r0, [r1, #56]	; 0x38
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800bc0c:	e9c4 0204 	strd	r0, r2, [r4, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bc10:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
 800bc14:	f002 0202 	and.w	r2, r2, #2
 800bc18:	71e2      	strb	r2, [r4, #7]
 800bc1a:	e7d4      	b.n	800bbc6 <f_opendir+0x52>

0800bc1c <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc1c:	b198      	cbz	r0, 800bc46 <f_closedir+0x2a>
 800bc1e:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800bc20:	b510      	push	{r4, lr}
 800bc22:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc24:	b12b      	cbz	r3, 800bc32 <f_closedir+0x16>
 800bc26:	781a      	ldrb	r2, [r3, #0]
 800bc28:	b11a      	cbz	r2, 800bc32 <f_closedir+0x16>
 800bc2a:	8881      	ldrh	r1, [r0, #4]
 800bc2c:	88da      	ldrh	r2, [r3, #6]
 800bc2e:	4291      	cmp	r1, r2
 800bc30:	d001      	beq.n	800bc36 <f_closedir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 800bc32:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 800bc34:	bd10      	pop	{r4, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bc36:	7858      	ldrb	r0, [r3, #1]
 800bc38:	f7fd ff6a 	bl	8009b10 <disk_status>
 800bc3c:	f010 0001 	ands.w	r0, r0, #1
 800bc40:	d1f7      	bne.n	800bc32 <f_closedir+0x16>
			dp->obj.fs = 0;			/* Invalidate directory object */
 800bc42:	6020      	str	r0, [r4, #0]
}
 800bc44:	bd10      	pop	{r4, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800bc46:	2009      	movs	r0, #9
}
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop

0800bc4c <f_readdir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc4c:	b318      	cbz	r0, 800bc96 <f_readdir+0x4a>

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800bc4e:	b538      	push	{r3, r4, r5, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc50:	6803      	ldr	r3, [r0, #0]
 800bc52:	4604      	mov	r4, r0
 800bc54:	b133      	cbz	r3, 800bc64 <f_readdir+0x18>
 800bc56:	781a      	ldrb	r2, [r3, #0]
 800bc58:	b122      	cbz	r2, 800bc64 <f_readdir+0x18>
 800bc5a:	460d      	mov	r5, r1
 800bc5c:	88da      	ldrh	r2, [r3, #6]
 800bc5e:	8881      	ldrh	r1, [r0, #4]
 800bc60:	4291      	cmp	r1, r2
 800bc62:	d001      	beq.n	800bc68 <f_readdir+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800bc64:	2009      	movs	r0, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800bc66:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bc68:	7858      	ldrb	r0, [r3, #1]
 800bc6a:	f7fd ff51 	bl	8009b10 <disk_status>
 800bc6e:	07c3      	lsls	r3, r0, #31
 800bc70:	d4f8      	bmi.n	800bc64 <f_readdir+0x18>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800bc72:	4620      	mov	r0, r4
		if (!fno) {
 800bc74:	b18d      	cbz	r5, 800bc9a <f_readdir+0x4e>
			res = dir_read(dp, 0);			/* Read an item */
 800bc76:	f7fe fbd3 	bl	800a420 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 800bc7a:	f010 0ffb 	tst.w	r0, #251	; 0xfb
 800bc7e:	d1f2      	bne.n	800bc66 <f_readdir+0x1a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800bc80:	4629      	mov	r1, r5
 800bc82:	4620      	mov	r0, r4
 800bc84:	f7fd ff6e 	bl	8009b64 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f7fe fb7f 	bl	800a38c <dir_next.constprop.0>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800bc8e:	2804      	cmp	r0, #4
 800bc90:	bf08      	it	eq
 800bc92:	2000      	moveq	r0, #0
}
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800bc96:	2009      	movs	r0, #9
}
 800bc98:	4770      	bx	lr
 800bc9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800bc9e:	f7fe bed5 	b.w	800aa4c <dir_sdi.constprop.0>
 800bca2:	bf00      	nop

0800bca4 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800bca4:	4b14      	ldr	r3, [pc, #80]	; (800bcf8 <FATFS_LinkDriver+0x54>)
 800bca6:	7b9a      	ldrb	r2, [r3, #14]
 800bca8:	2a01      	cmp	r2, #1
 800bcaa:	d901      	bls.n	800bcb0 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 800bcac:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800bcae:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 800bcb0:	f893 c00e 	ldrb.w	ip, [r3, #14]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	fa5f fc8c 	uxtb.w	ip, ip
 800bcba:	f803 200c 	strb.w	r2, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800bcbe:	f893 c00e 	ldrb.w	ip, [r3, #14]
 800bcc2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800bcc6:	f8cc 0004 	str.w	r0, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800bcca:	f893 c00e 	ldrb.w	ip, [r3, #14]
    DiskNum = disk.nbr++;
 800bcce:	7b98      	ldrb	r0, [r3, #14]
    disk.lun[disk.nbr] = lun;
 800bcd0:	449c      	add	ip, r3
 800bcd2:	f88c 200c 	strb.w	r2, [ip, #12]
    DiskNum = disk.nbr++;
 800bcd6:	f100 0c01 	add.w	ip, r0, #1
    path[0] = DiskNum + '0';
 800bcda:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 800bcdc:	fa5f fc8c 	uxtb.w	ip, ip
 800bce0:	f883 c00e 	strb.w	ip, [r3, #14]
    path[1] = ':';
 800bce4:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    path[2] = '/';
 800bce8:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800bcea:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800bcec:	f881 c001 	strb.w	ip, [r1, #1]
    path[3] = 0;
 800bcf0:	4610      	mov	r0, r2
    path[2] = '/';
 800bcf2:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800bcf4:	70ca      	strb	r2, [r1, #3]
  return ret;
 800bcf6:	4770      	bx	lr
 800bcf8:	200007a0 	.word	0x200007a0

0800bcfc <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bcfc:	287f      	cmp	r0, #127	; 0x7f
 800bcfe:	d90f      	bls.n	800bd20 <ff_convert+0x24>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bd00:	b959      	cbnz	r1, 800bd1a <ff_convert+0x1e>
 800bd02:	4b0a      	ldr	r3, [pc, #40]	; (800bd2c <ff_convert+0x30>)
 800bd04:	e002      	b.n	800bd0c <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bd06:	3101      	adds	r1, #1
 800bd08:	2980      	cmp	r1, #128	; 0x80
 800bd0a:	d008      	beq.n	800bd1e <ff_convert+0x22>
				if (chr == Tbl[c]) break;
 800bd0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd10:	4282      	cmp	r2, r0
 800bd12:	d1f8      	bne.n	800bd06 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 800bd14:	f101 0080 	add.w	r0, r1, #128	; 0x80
 800bd18:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bd1a:	28ff      	cmp	r0, #255	; 0xff
 800bd1c:	d901      	bls.n	800bd22 <ff_convert+0x26>
 800bd1e:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800bd20:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bd22:	4b02      	ldr	r3, [pc, #8]	; (800bd2c <ff_convert+0x30>)
 800bd24:	3880      	subs	r0, #128	; 0x80
 800bd26:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800bd2a:	4770      	bx	lr
 800bd2c:	0801feb8 	.word	0x0801feb8

0800bd30 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bd30:	4b1e      	ldr	r3, [pc, #120]	; (800bdac <ff_wtoupper+0x7c>)
 800bd32:	4a1f      	ldr	r2, [pc, #124]	; (800bdb0 <ff_wtoupper+0x80>)
 800bd34:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800bd38:	bf28      	it	cs
 800bd3a:	4613      	movcs	r3, r2
{
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	3308      	adds	r3, #8
 800bd40:	e001      	b.n	800bd46 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800bd42:	3308      	adds	r3, #8
 800bd44:	b1da      	cbz	r2, 800bd7e <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
 800bd46:	f853 1c08 	ldr.w	r1, [r3, #-8]
		if (!bc || chr < bc) break;
 800bd4a:	461c      	mov	r4, r3
 800bd4c:	b1b1      	cbz	r1, 800bd7c <ff_wtoupper+0x4c>
 800bd4e:	4288      	cmp	r0, r1
 800bd50:	d314      	bcc.n	800bd7c <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bd52:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800bd56:	fa5f fc82 	uxtb.w	ip, r2
 800bd5a:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 800bd5c:	eb01 0e0c 	add.w	lr, r1, ip
 800bd60:	4586      	cmp	lr, r0
 800bd62:	d9ee      	bls.n	800bd42 <ff_wtoupper+0x12>
			switch (cmd) {
 800bd64:	2a08      	cmp	r2, #8
 800bd66:	d809      	bhi.n	800bd7c <ff_wtoupper+0x4c>
 800bd68:	e8df f002 	tbb	[pc, r2]
 800bd6c:	16140f05 	.word	0x16140f05
 800bd70:	1e1c1a18 	.word	0x1e1c1a18
 800bd74:	0c          	.byte	0x0c
 800bd75:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bd76:	1a41      	subs	r1, r0, r1
 800bd78:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	}

	return chr;
}
 800bd7c:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
 800bd7e:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 800bd82:	e7dc      	b.n	800bd3e <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bd84:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
}
 800bd88:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bd8a:	1a43      	subs	r3, r0, r1
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	1ac0      	subs	r0, r0, r3
}
 800bd92:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 800bd94:	3810      	subs	r0, #16
}
 800bd96:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bd98:	3820      	subs	r0, #32
}
 800bd9a:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bd9c:	3830      	subs	r0, #48	; 0x30
}
 800bd9e:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bda0:	381a      	subs	r0, #26
}
 800bda2:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 800bda4:	3008      	adds	r0, #8
}
 800bda6:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 800bda8:	3850      	subs	r0, #80	; 0x50
}
 800bdaa:	bd10      	pop	{r4, pc}
 800bdac:	080200b8 	.word	0x080200b8
 800bdb0:	0802049c 	.word	0x0802049c

0800bdb4 <MP3InitDecoder>:
 **************************************************************************************/
HMP3Decoder MP3InitDecoder(void)
{
	MP3DecInfo *mp3DecInfo;

	mp3DecInfo = AllocateBuffers();
 800bdb4:	f001 bcc0 	b.w	800d738 <xmp3fixpt_AllocateBuffers>

0800bdb8 <MP3FindSyncWord>:
int MP3FindSyncWord(unsigned char *buf, int nBytes)
{
	int i;

	/* find byte-aligned syncword - need 12 (MPEG 1,2) or 11 (MPEG 2.5) matching bits */
	for (i = 0; i < nBytes - 1; i++) {
 800bdb8:	2901      	cmp	r1, #1
 800bdba:	dd13      	ble.n	800bde4 <MP3FindSyncWord+0x2c>
 800bdbc:	1e82      	subs	r2, r0, #2
 800bdbe:	1e43      	subs	r3, r0, #1
 800bdc0:	f1c0 0c01 	rsb	ip, r0, #1
 800bdc4:	4411      	add	r1, r2
 800bdc6:	e001      	b.n	800bdcc <MP3FindSyncWord+0x14>
 800bdc8:	428b      	cmp	r3, r1
 800bdca:	d00b      	beq.n	800bde4 <MP3FindSyncWord+0x2c>
 800bdcc:	eb0c 0003 	add.w	r0, ip, r3
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 800bdd0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800bdd4:	2aff      	cmp	r2, #255	; 0xff
 800bdd6:	d1f7      	bne.n	800bdc8 <MP3FindSyncWord+0x10>
 800bdd8:	785a      	ldrb	r2, [r3, #1]
 800bdda:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800bdde:	2ae0      	cmp	r2, #224	; 0xe0
 800bde0:	d1f2      	bne.n	800bdc8 <MP3FindSyncWord+0x10>
			return i;
	}
	
	return -1;
}
 800bde2:	4770      	bx	lr
	return -1;
 800bde4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop

0800bdec <MP3GetLastFrameInfo>:
 **************************************************************************************/
void MP3GetLastFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo)
{
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;

	if (!mp3DecInfo || mp3DecInfo->layer != 3) {
 800bdec:	b118      	cbz	r0, 800bdf6 <MP3GetLastFrameInfo+0xa>
 800bdee:	f8d0 37d0 	ldr.w	r3, [r0, #2000]	; 0x7d0
 800bdf2:	2b03      	cmp	r3, #3
 800bdf4:	d008      	beq.n	800be08 <MP3GetLastFrameInfo+0x1c>
		mp3FrameInfo->bitrate = 0;
 800bdf6:	2300      	movs	r3, #0
		mp3FrameInfo->nChans = 0;
 800bdf8:	e9c1 3300 	strd	r3, r3, [r1]
		mp3FrameInfo->samprate = 0;
		mp3FrameInfo->bitsPerSample = 0;
 800bdfc:	e9c1 3302 	strd	r3, r3, [r1, #8]
		mp3FrameInfo->outputSamps = 0;
		mp3FrameInfo->layer = 0;
 800be00:	e9c1 3304 	strd	r3, r3, [r1, #16]
		mp3FrameInfo->version = 0;
 800be04:	618b      	str	r3, [r1, #24]
 800be06:	4770      	bx	lr
	} else {
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 800be08:	f8d0 27b8 	ldr.w	r2, [r0, #1976]	; 0x7b8
{
 800be0c:	b410      	push	{r4}
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 800be0e:	f8d0 47bc 	ldr.w	r4, [r0, #1980]	; 0x7bc
 800be12:	e9c1 2400 	strd	r2, r4, [r1]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 800be16:	f8d0 27c0 	ldr.w	r2, [r0, #1984]	; 0x7c0
 800be1a:	608a      	str	r2, [r1, #8]
		mp3FrameInfo->bitsPerSample = 16;
 800be1c:	2210      	movs	r2, #16
 800be1e:	60ca      	str	r2, [r1, #12]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800be20:	f890 07d4 	ldrb.w	r0, [r0, #2004]	; 0x7d4
 800be24:	4a07      	ldr	r2, [pc, #28]	; (800be44 <MP3GetLastFrameInfo+0x58>)
		mp3FrameInfo->layer = mp3DecInfo->layer;
 800be26:	614b      	str	r3, [r1, #20]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800be28:	eb00 0340 	add.w	r3, r0, r0, lsl #1
		mp3FrameInfo->version = mp3DecInfo->version;
 800be2c:	6188      	str	r0, [r1, #24]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800be2e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800be32:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800be36:	fb04 f303 	mul.w	r3, r4, r3
	}
}
 800be3a:	f85d 4b04 	ldr.w	r4, [sp], #4
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800be3e:	610b      	str	r3, [r1, #16]
}
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	08020748 	.word	0x08020748

0800be48 <MP3Decode>:
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
//mw	ULONG32 ulTime;
//mw	StartYield(&ulTime); 
	if (!mp3DecInfo)
 800be48:	2800      	cmp	r0, #0
 800be4a:	f000 8223 	beq.w	800c294 <MP3Decode+0x44c>
{
 800be4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be52:	4689      	mov	r9, r1
		return ERR_MP3_NULL_POINTER;

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 800be54:	6809      	ldr	r1, [r1, #0]
 800be56:	4692      	mov	sl, r2
 800be58:	4680      	mov	r8, r0
{
 800be5a:	ed2d 8b02 	vpush	{d8}
 800be5e:	b087      	sub	sp, #28
 800be60:	ee08 3a10 	vmov	s16, r3
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 800be64:	f000 fadc 	bl	800c420 <xmp3fixpt_UnpackFrameHeader>
	if (fhBytes < 0)	
 800be68:	1e07      	subs	r7, r0, #0
 800be6a:	f2c0 81cd 	blt.w	800c208 <MP3Decode+0x3c0>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
	*inbuf += fhBytes;
 800be6e:	f8d9 1000 	ldr.w	r1, [r9]
	
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 800be72:	4640      	mov	r0, r8
	*inbuf += fhBytes;
 800be74:	4439      	add	r1, r7
 800be76:	f8c9 1000 	str.w	r1, [r9]
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 800be7a:	f000 fbbf 	bl	800c5fc <xmp3fixpt_UnpackSideInfo>
	if (siBytes < 0) {
 800be7e:	2800      	cmp	r0, #0
 800be80:	f2c0 8220 	blt.w	800c2c4 <MP3Decode+0x47c>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
		return ERR_MP3_INVALID_SIDEINFO;
	}
	*inbuf += siBytes;
	*bytesLeft -= (fhBytes + siBytes);
 800be84:	f8da 3000 	ldr.w	r3, [sl]
 800be88:	1839      	adds	r1, r7, r0
	*inbuf += siBytes;
 800be8a:	f8d9 2000 	ldr.w	r2, [r9]
	*bytesLeft -= (fhBytes + siBytes);
 800be8e:	1a59      	subs	r1, r3, r1
	*inbuf += siBytes;
 800be90:	eb02 0e00 	add.w	lr, r2, r0
 800be94:	f8c9 e000 	str.w	lr, [r9]
	*bytesLeft -= (fhBytes + siBytes);
 800be98:	f8ca 1000 	str.w	r1, [sl]
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 800be9c:	f8d8 37b8 	ldr.w	r3, [r8, #1976]	; 0x7b8
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 8095 	beq.w	800bfd0 <MP3Decode+0x188>
 800bea6:	f8d8 37b0 	ldr.w	r3, [r8, #1968]	; 0x7b0
 800beaa:	b14b      	cbz	r3, 800bec0 <MP3Decode+0x78>
				return ERR_MP3_FREE_BITRATE_SYNC;
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 800beac:	f8d8 47b4 	ldr.w	r4, [r8, #1972]	; 0x7b4
 800beb0:	4640      	mov	r0, r8
 800beb2:	f000 faa9 	bl	800c408 <xmp3fixpt_CheckPadBit>
 800beb6:	4404      	add	r4, r0
 800beb8:	f8c8 47cc 	str.w	r4, [r8, #1996]	; 0x7cc
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
		mp3DecInfo->nSlots = *bytesLeft;
 800bebc:	f8da 1000 	ldr.w	r1, [sl]
	if (useSize) {
 800bec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 80f3 	beq.w	800c0ae <MP3Decode+0x266>
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 800bec8:	f8d8 37d8 	ldr.w	r3, [r8, #2008]	; 0x7d8
		mp3DecInfo->nSlots = *bytesLeft;
 800becc:	f8c8 17cc 	str.w	r1, [r8, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f040 8187 	bne.w	800c1e4 <MP3Decode+0x39c>
 800bed6:	2900      	cmp	r1, #0
 800bed8:	f340 8184 	ble.w	800c1e4 <MP3Decode+0x39c>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_FRAMEHEADER;
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 800bedc:	f8c8 17dc 	str.w	r1, [r8, #2012]	; 0x7dc
		mainPtr = *inbuf;
 800bee0:	f8d9 7000 	ldr.w	r7, [r9]
		*inbuf += mp3DecInfo->nSlots;
		*bytesLeft -= (mp3DecInfo->nSlots);
 800bee4:	f8da 3000 	ldr.w	r3, [sl]
 800bee8:	1a5b      	subs	r3, r3, r1
		*inbuf += mp3DecInfo->nSlots;
 800beea:	4439      	add	r1, r7
 800beec:	f8c9 1000 	str.w	r1, [r9]
		*bytesLeft -= (mp3DecInfo->nSlots);
 800bef0:	f8ca 3000 	str.w	r3, [sl]
			*bytesLeft -= (mp3DecInfo->nSlots);
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_MAINDATA_UNDERFLOW;
		}
	}
	bitOffset = 0;
 800bef4:	2000      	movs	r0, #0
	mainBits = mp3DecInfo->mainDataBytes * 8;

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800bef6:	f8d8 37c4 	ldr.w	r3, [r8, #1988]	; 0x7c4
	mainBits = mp3DecInfo->mainDataBytes * 8;
 800befa:	f8d8 57dc 	ldr.w	r5, [r8, #2012]	; 0x7dc
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800befe:	4283      	cmp	r3, r0
	bitOffset = 0;
 800bf00:	9005      	str	r0, [sp, #20]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 800bf02:	ea4f 05c5 	mov.w	r5, r5, lsl #3
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800bf06:	dd5e      	ble.n	800bfc6 <MP3Decode+0x17e>
 800bf08:	f508 63fc 	add.w	r3, r8, #2016	; 0x7e0
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	46b9      	mov	r9, r7
 800bf10:	9303      	str	r3, [sp, #12]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800bf12:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f340 80fa 	ble.w	800c110 <MP3Decode+0x2c8>
 800bf1c:	f04f 0b00 	mov.w	fp, #0
			/* unpack scale factors and compute size of scale factor block */
			prevBitOffset = bitOffset;
 800bf20:	9b03      	ldr	r3, [sp, #12]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800bf22:	f8cd a008 	str.w	sl, [sp, #8]
 800bf26:	46ca      	mov	sl, r9
 800bf28:	465f      	mov	r7, fp
			prevBitOffset = bitOffset;
 800bf2a:	9c05      	ldr	r4, [sp, #20]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800bf2c:	469b      	mov	fp, r3
 800bf2e:	e008      	b.n	800bf42 <MP3Decode+0xfa>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_INVALID_HUFFCODES;
			}

			mainPtr += offset;
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800bf30:	9c05      	ldr	r4, [sp, #20]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800bf32:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800bf36:	4426      	add	r6, r4
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800bf38:	42bb      	cmp	r3, r7
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800bf3a:	eba9 0506 	sub.w	r5, r9, r6
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800bf3e:	f340 80e4 	ble.w	800c10a <MP3Decode+0x2c2>
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 800bf42:	9e02      	ldr	r6, [sp, #8]
 800bf44:	4651      	mov	r1, sl
 800bf46:	462b      	mov	r3, r5
 800bf48:	aa05      	add	r2, sp, #20
 800bf4a:	9600      	str	r6, [sp, #0]
 800bf4c:	4640      	mov	r0, r8
 800bf4e:	9701      	str	r7, [sp, #4]
 800bf50:	f006 f8ca 	bl	80120e8 <xmp3fixpt_UnpackScaleFactors>
 800bf54:	4686      	mov	lr, r0
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 800bf56:	9e05      	ldr	r6, [sp, #20]
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800bf58:	aa05      	add	r2, sp, #20
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 800bf5a:	ebc4 09ce 	rsb	r9, r4, lr, lsl #3
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 800bf5e:	f85b cb04 	ldr.w	ip, [fp], #4
			mainPtr += offset;
 800bf62:	44f2      	add	sl, lr
			if (offset < 0 || mainBits < huffBlockBits) {
 800bf64:	f1be 0f00 	cmp.w	lr, #0
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 800bf68:	44b1      	add	r9, r6
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800bf6a:	4640      	mov	r0, r8
 800bf6c:	4651      	mov	r1, sl
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 800bf6e:	ebac 0309 	sub.w	r3, ip, r9
			mainBits -= sfBlockBits;
 800bf72:	eba5 0909 	sub.w	r9, r5, r9
			if (offset < 0 || mainBits < huffBlockBits) {
 800bf76:	f2c0 80fd 	blt.w	800c174 <MP3Decode+0x32c>
 800bf7a:	45ac      	cmp	ip, r5
 800bf7c:	bfd4      	ite	le
 800bf7e:	2500      	movle	r5, #0
 800bf80:	2501      	movgt	r5, #1
 800bf82:	2d00      	cmp	r5, #0
 800bf84:	f040 80f6 	bne.w	800c174 <MP3Decode+0x32c>
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800bf88:	9c02      	ldr	r4, [sp, #8]
 800bf8a:	9701      	str	r7, [sp, #4]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800bf8c:	3701      	adds	r7, #1
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800bf8e:	9400      	str	r4, [sp, #0]
 800bf90:	f002 fd0a 	bl	800e9a8 <xmp3fixpt_DecodeHuffman>
			if (offset < 0) {
 800bf94:	2800      	cmp	r0, #0
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800bf96:	ebc6 06c0 	rsb	r6, r6, r0, lsl #3
			mainPtr += offset;
 800bf9a:	4482      	add	sl, r0
			if (offset < 0) {
 800bf9c:	dac8      	bge.n	800bf30 <MP3Decode+0xe8>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800bf9e:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
 800bfa2:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 800bfa6:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800bfaa:	fb01 f202 	mul.w	r2, r1, r2
 800bfae:	fb03 f202 	mul.w	r2, r3, r2
 800bfb2:	2a00      	cmp	r2, #0
 800bfb4:	dd05      	ble.n	800bfc2 <MP3Decode+0x17a>
		outbuf[i] = 0;
 800bfb6:	0052      	lsls	r2, r2, #1
 800bfb8:	4629      	mov	r1, r5
 800bfba:	ee18 0a10 	vmov	r0, s16
 800bfbe:	f013 f8c9 	bl	801f154 <memset>
				return ERR_MP3_INVALID_HUFFCODES;
 800bfc2:	f06f 0008 	mvn.w	r0, #8
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_SUBBAND;			
		}
	}
	return ERR_MP3_NONE;
}
 800bfc6:	b007      	add	sp, #28
 800bfc8:	ecbd 8b02 	vpop	{d8}
 800bfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!mp3DecInfo->freeBitrateFlag) {
 800bfd0:	f8d8 37b0 	ldr.w	r3, [r8, #1968]	; 0x7b0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f47f af69 	bne.w	800beac <MP3Decode+0x64>
			mp3DecInfo->freeBitrateFlag = 1;
 800bfda:	2301      	movs	r3, #1
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800bfdc:	eba2 0c07 	sub.w	ip, r2, r7
			mp3DecInfo->freeBitrateFlag = 1;
 800bfe0:	f8c8 37b0 	str.w	r3, [r8, #1968]	; 0x7b0
	unsigned char *bufPtr = buf;
 800bfe4:	4673      	mov	r3, lr
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800bfe6:	f8da 1000 	ldr.w	r1, [sl]
	for (i = 0; i < nBytes - 1; i++) {
 800bfea:	1e4e      	subs	r6, r1, #1
 800bfec:	2e00      	cmp	r6, #0
 800bfee:	dd18      	ble.n	800c022 <MP3Decode+0x1da>
 800bff0:	2500      	movs	r5, #0
 800bff2:	e002      	b.n	800bffa <MP3Decode+0x1b2>
 800bff4:	3501      	adds	r5, #1
 800bff6:	42b5      	cmp	r5, r6
 800bff8:	d013      	beq.n	800c022 <MP3Decode+0x1da>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 800bffa:	461c      	mov	r4, r3
 800bffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c000:	2aff      	cmp	r2, #255	; 0xff
 800c002:	d1f7      	bne.n	800bff4 <MP3Decode+0x1ac>
 800c004:	7862      	ldrb	r2, [r4, #1]
 800c006:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800c00a:	2ae0      	cmp	r2, #224	; 0xe0
 800c00c:	d1f2      	bne.n	800bff4 <MP3Decode+0x1ac>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 800c00e:	f89c 3000 	ldrb.w	r3, [ip]
 800c012:	2bff      	cmp	r3, #255	; 0xff
 800c014:	d023      	beq.n	800c05e <MP3Decode+0x216>
		nBytes -= (offset + 3);
 800c016:	3503      	adds	r5, #3
		bufPtr += 3;
 800c018:	1ce3      	adds	r3, r4, #3
		nBytes -= (offset + 3);
 800c01a:	1b49      	subs	r1, r1, r5
	for (i = 0; i < nBytes - 1; i++) {
 800c01c:	1e4e      	subs	r6, r1, #1
 800c01e:	2e00      	cmp	r6, #0
 800c020:	dce6      	bgt.n	800bff0 <MP3Decode+0x1a8>
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800c022:	f04f 33ff 	mov.w	r3, #4294967295
 800c026:	f8c8 37b4 	str.w	r3, [r8, #1972]	; 0x7b4
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c02a:	f8d8 27c8 	ldr.w	r2, [r8, #1992]	; 0x7c8
 800c02e:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 800c032:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c036:	fb01 f202 	mul.w	r2, r1, r2
 800c03a:	fb03 f202 	mul.w	r2, r3, r2
 800c03e:	2a00      	cmp	r2, #0
 800c040:	f340 80cd 	ble.w	800c1de <MP3Decode+0x396>
		outbuf[i] = 0;
 800c044:	0052      	lsls	r2, r2, #1
 800c046:	2100      	movs	r1, #0
 800c048:	ee18 0a10 	vmov	r0, s16
 800c04c:	f013 f882 	bl	801f154 <memset>
				return ERR_MP3_FREE_BITRATE_SYNC;
 800c050:	f06f 0002 	mvn.w	r0, #2
}
 800c054:	b007      	add	sp, #28
 800c056:	ecbd 8b02 	vpop	{d8}
 800c05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 800c05e:	7862      	ldrb	r2, [r4, #1]
 800c060:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800c064:	429a      	cmp	r2, r3
 800c066:	d1d6      	bne.n	800c016 <MP3Decode+0x1ce>
 800c068:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800c06c:	78a3      	ldrb	r3, [r4, #2]
 800c06e:	4053      	eors	r3, r2
 800c070:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 800c074:	d1cf      	bne.n	800c016 <MP3Decode+0x1ce>
			if ((firstFH[2] >> 1) & 0x01)
 800c076:	0793      	lsls	r3, r2, #30
				bufPtr--;
 800c078:	bf48      	it	mi
 800c07a:	f104 34ff 	addmi.w	r4, r4, #4294967295
			return bufPtr - buf;
 800c07e:	eba4 040e 	sub.w	r4, r4, lr
			if (mp3DecInfo->freeBitrateSlots < 0) {
 800c082:	2c00      	cmp	r4, #0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800c084:	f8c8 47b4 	str.w	r4, [r8, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 800c088:	dbcf      	blt.n	800c02a <MP3Decode+0x1e2>
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 800c08a:	193b      	adds	r3, r7, r4
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 800c08c:	f8d8 27c0 	ldr.w	r2, [r8, #1984]	; 0x7c0
 800c090:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 800c094:	4403      	add	r3, r0
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 800c096:	fb02 f303 	mul.w	r3, r2, r3
 800c09a:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	fb01 f202 	mul.w	r2, r1, r2
 800c0a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0a8:	f8c8 37b8 	str.w	r3, [r8, #1976]	; 0x7b8
 800c0ac:	e700      	b.n	800beb0 <MP3Decode+0x68>
		if (mp3DecInfo->nSlots > *bytesLeft) {
 800c0ae:	f8d8 07cc 	ldr.w	r0, [r8, #1996]	; 0x7cc
 800c0b2:	4288      	cmp	r0, r1
 800c0b4:	f300 80f1 	bgt.w	800c29a <MP3Decode+0x452>
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 800c0b8:	f8d8 37dc 	ldr.w	r3, [r8, #2012]	; 0x7dc
 800c0bc:	f8d8 27d8 	ldr.w	r2, [r8, #2008]	; 0x7d8
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	f2c0 80a4 	blt.w	800c20e <MP3Decode+0x3c6>
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 800c0c6:	1a9b      	subs	r3, r3, r2
 800c0c8:	f108 071c 	add.w	r7, r8, #28
 800c0cc:	18f9      	adds	r1, r7, r3
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	f013 f826 	bl	801f120 <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 800c0d4:	f8d8 07d8 	ldr.w	r0, [r8, #2008]	; 0x7d8
 800c0d8:	f8d8 27cc 	ldr.w	r2, [r8, #1996]	; 0x7cc
 800c0dc:	4438      	add	r0, r7
 800c0de:	f8d9 1000 	ldr.w	r1, [r9]
 800c0e2:	f013 f80f 	bl	801f104 <memcpy>
			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 800c0e6:	f8d8 27cc 	ldr.w	r2, [r8, #1996]	; 0x7cc
 800c0ea:	f8d8 37d8 	ldr.w	r3, [r8, #2008]	; 0x7d8
 800c0ee:	4413      	add	r3, r2
 800c0f0:	f8c8 37dc 	str.w	r3, [r8, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 800c0f4:	f8d9 3000 	ldr.w	r3, [r9]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	f8c9 3000 	str.w	r3, [r9]
			*bytesLeft -= (mp3DecInfo->nSlots);
 800c0fe:	f8da 3000 	ldr.w	r3, [sl]
 800c102:	1a9b      	subs	r3, r3, r2
 800c104:	f8ca 3000 	str.w	r3, [sl]
			mainPtr = mp3DecInfo->mainBuf;
 800c108:	e6f4      	b.n	800bef4 <MP3Decode+0xac>
 800c10a:	46d1      	mov	r9, sl
 800c10c:	f8dd a008 	ldr.w	sl, [sp, #8]
		if (Dequantize(mp3DecInfo, gr) < 0) {
 800c110:	4651      	mov	r1, sl
 800c112:	4640      	mov	r0, r8
 800c114:	f002 f83e 	bl	800e194 <xmp3fixpt_Dequantize>
 800c118:	2800      	cmp	r0, #0
 800c11a:	f2c0 80a6 	blt.w	800c26a <MP3Decode+0x422>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c11e:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c122:	2b00      	cmp	r3, #0
 800c124:	dd3f      	ble.n	800c1a6 <MP3Decode+0x35e>
 800c126:	2400      	movs	r4, #0
 800c128:	e003      	b.n	800c132 <MP3Decode+0x2ea>
 800c12a:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c12e:	42a3      	cmp	r3, r4
 800c130:	dd39      	ble.n	800c1a6 <MP3Decode+0x35e>
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 800c132:	4622      	mov	r2, r4
 800c134:	4651      	mov	r1, sl
 800c136:	4640      	mov	r0, r8
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c138:	3401      	adds	r4, #1
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 800c13a:	f003 fad1 	bl	800f6e0 <xmp3fixpt_IMDCT>
 800c13e:	2800      	cmp	r0, #0
 800c140:	daf3      	bge.n	800c12a <MP3Decode+0x2e2>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c142:	f8d8 27c8 	ldr.w	r2, [r8, #1992]	; 0x7c8
 800c146:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 800c14a:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c14e:	fb01 f202 	mul.w	r2, r1, r2
 800c152:	fb03 f202 	mul.w	r2, r3, r2
 800c156:	2a00      	cmp	r2, #0
 800c158:	dd05      	ble.n	800c166 <MP3Decode+0x31e>
		outbuf[i] = 0;
 800c15a:	0052      	lsls	r2, r2, #1
 800c15c:	2100      	movs	r1, #0
 800c15e:	ee18 0a10 	vmov	r0, s16
 800c162:	f012 fff7 	bl	801f154 <memset>
				return ERR_MP3_INVALID_IMDCT;			
 800c166:	f06f 000a 	mvn.w	r0, #10
}
 800c16a:	b007      	add	sp, #28
 800c16c:	ecbd 8b02 	vpop	{d8}
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c174:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
 800c178:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 800c17c:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c180:	fb01 f202 	mul.w	r2, r1, r2
 800c184:	fb03 f202 	mul.w	r2, r3, r2
 800c188:	2a00      	cmp	r2, #0
 800c18a:	dd05      	ble.n	800c198 <MP3Decode+0x350>
		outbuf[i] = 0;
 800c18c:	0052      	lsls	r2, r2, #1
 800c18e:	2100      	movs	r1, #0
 800c190:	ee18 0a10 	vmov	r0, s16
 800c194:	f012 ffde 	bl	801f154 <memset>
				return ERR_MP3_INVALID_SCALEFACT;
 800c198:	f06f 0007 	mvn.w	r0, #7
}
 800c19c:	b007      	add	sp, #28
 800c19e:	ecbd 8b02 	vpop	{d8}
 800c1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 800c1a6:	f8d8 27c8 	ldr.w	r2, [r8, #1992]	; 0x7c8
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	fb02 f20a 	mul.w	r2, r2, sl
 800c1b0:	fb02 f303 	mul.w	r3, r2, r3
 800c1b4:	ee18 2a10 	vmov	r2, s16
 800c1b8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800c1bc:	f006 ff32 	bl	8013024 <xmp3fixpt_Subband>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	f2c0 8094 	blt.w	800c2ee <MP3Decode+0x4a6>
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	f10a 0a01 	add.w	sl, sl, #1
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	9303      	str	r3, [sp, #12]
 800c1d0:	f8d8 37c4 	ldr.w	r3, [r8, #1988]	; 0x7c4
 800c1d4:	4553      	cmp	r3, sl
 800c1d6:	f73f ae9c 	bgt.w	800bf12 <MP3Decode+0xca>
	return ERR_MP3_NONE;
 800c1da:	2000      	movs	r0, #0
 800c1dc:	e6f3      	b.n	800bfc6 <MP3Decode+0x17e>
				return ERR_MP3_FREE_BITRATE_SYNC;
 800c1de:	f06f 0002 	mvn.w	r0, #2
 800c1e2:	e6f0      	b.n	800bfc6 <MP3Decode+0x17e>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c1e4:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
 800c1e8:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 800c1ec:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c1f0:	fb01 f202 	mul.w	r2, r1, r2
 800c1f4:	fb03 f202 	mul.w	r2, r3, r2
 800c1f8:	2a00      	cmp	r2, #0
 800c1fa:	dd05      	ble.n	800c208 <MP3Decode+0x3c0>
		outbuf[i] = 0;
 800c1fc:	0052      	lsls	r2, r2, #1
 800c1fe:	2100      	movs	r1, #0
 800c200:	ee18 0a10 	vmov	r0, s16
 800c204:	f012 ffa6 	bl	801f154 <memset>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 800c208:	f06f 0005 	mvn.w	r0, #5
 800c20c:	e6db      	b.n	800bfc6 <MP3Decode+0x17e>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 800c20e:	4602      	mov	r2, r0
 800c210:	f108 001c 	add.w	r0, r8, #28
 800c214:	f8d9 1000 	ldr.w	r1, [r9]
 800c218:	4418      	add	r0, r3
 800c21a:	f012 ff73 	bl	801f104 <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 800c21e:	f8d8 27cc 	ldr.w	r2, [r8, #1996]	; 0x7cc
 800c222:	f8d8 37dc 	ldr.w	r3, [r8, #2012]	; 0x7dc
 800c226:	4413      	add	r3, r2
 800c228:	f8c8 37dc 	str.w	r3, [r8, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 800c22c:	f8d9 3000 	ldr.w	r3, [r9]
 800c230:	4413      	add	r3, r2
 800c232:	f8c9 3000 	str.w	r3, [r9]
			*bytesLeft -= (mp3DecInfo->nSlots);
 800c236:	f8da 3000 	ldr.w	r3, [sl]
 800c23a:	1a9b      	subs	r3, r3, r2
 800c23c:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c240:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
 800c244:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 800c248:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c24c:	fb01 f202 	mul.w	r2, r1, r2
 800c250:	fb03 f202 	mul.w	r2, r3, r2
 800c254:	2a00      	cmp	r2, #0
 800c256:	dd05      	ble.n	800c264 <MP3Decode+0x41c>
		outbuf[i] = 0;
 800c258:	0052      	lsls	r2, r2, #1
 800c25a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c25c:	ee18 0a10 	vmov	r0, s16
 800c260:	f012 ff78 	bl	801f154 <memset>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 800c264:	f06f 0001 	mvn.w	r0, #1
 800c268:	e6ad      	b.n	800bfc6 <MP3Decode+0x17e>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c26a:	f8d8 27c8 	ldr.w	r2, [r8, #1992]	; 0x7c8
 800c26e:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 800c272:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c276:	fb01 f202 	mul.w	r2, r1, r2
 800c27a:	fb03 f202 	mul.w	r2, r3, r2
 800c27e:	2a00      	cmp	r2, #0
 800c280:	dd05      	ble.n	800c28e <MP3Decode+0x446>
		outbuf[i] = 0;
 800c282:	0052      	lsls	r2, r2, #1
 800c284:	2100      	movs	r1, #0
 800c286:	ee18 0a10 	vmov	r0, s16
 800c28a:	f012 ff63 	bl	801f154 <memset>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 800c28e:	f06f 0009 	mvn.w	r0, #9
 800c292:	e698      	b.n	800bfc6 <MP3Decode+0x17e>
		return ERR_MP3_NULL_POINTER;
 800c294:	f06f 0004 	mvn.w	r0, #4
}
 800c298:	4770      	bx	lr
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c29a:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
 800c29e:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 800c2a2:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c2a6:	fb01 f202 	mul.w	r2, r1, r2
 800c2aa:	fb03 f202 	mul.w	r2, r3, r2
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	dd05      	ble.n	800c2be <MP3Decode+0x476>
		outbuf[i] = 0;
 800c2b2:	0052      	lsls	r2, r2, #1
 800c2b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c2b6:	ee18 0a10 	vmov	r0, s16
 800c2ba:	f012 ff4b 	bl	801f154 <memset>
			return ERR_MP3_INDATA_UNDERFLOW;	
 800c2be:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c2:	e680      	b.n	800bfc6 <MP3Decode+0x17e>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c2c4:	f8d8 27c4 	ldr.w	r2, [r8, #1988]	; 0x7c4
 800c2c8:	f8d8 17c8 	ldr.w	r1, [r8, #1992]	; 0x7c8
 800c2cc:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c2d0:	fb01 f202 	mul.w	r2, r1, r2
 800c2d4:	fb03 f202 	mul.w	r2, r3, r2
 800c2d8:	2a00      	cmp	r2, #0
 800c2da:	dd05      	ble.n	800c2e8 <MP3Decode+0x4a0>
		outbuf[i] = 0;
 800c2dc:	0052      	lsls	r2, r2, #1
 800c2de:	2100      	movs	r1, #0
 800c2e0:	ee18 0a10 	vmov	r0, s16
 800c2e4:	f012 ff36 	bl	801f154 <memset>
		return ERR_MP3_INVALID_SIDEINFO;
 800c2e8:	f06f 0006 	mvn.w	r0, #6
 800c2ec:	e66b      	b.n	800bfc6 <MP3Decode+0x17e>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800c2ee:	f8d8 27c8 	ldr.w	r2, [r8, #1992]	; 0x7c8
 800c2f2:	f8d8 17c4 	ldr.w	r1, [r8, #1988]	; 0x7c4
 800c2f6:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c2fa:	fb01 f202 	mul.w	r2, r1, r2
 800c2fe:	fb03 f202 	mul.w	r2, r3, r2
 800c302:	2a00      	cmp	r2, #0
 800c304:	dd05      	ble.n	800c312 <MP3Decode+0x4ca>
		outbuf[i] = 0;
 800c306:	0052      	lsls	r2, r2, #1
 800c308:	2100      	movs	r1, #0
 800c30a:	ee18 0a10 	vmov	r0, s16
 800c30e:	f012 ff21 	bl	801f154 <memset>
			return ERR_MP3_INVALID_SUBBAND;			
 800c312:	f06f 000b 	mvn.w	r0, #11
 800c316:	e656      	b.n	800bfc6 <MP3Decode+0x17e>

0800c318 <xmp3fixpt_SetBitstreamPointer>:
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
	/* init bitstream */
	bsi->bytePtr = buf;
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800c318:	2300      	movs	r3, #0
 800c31a:	e9c0 2300 	strd	r2, r3, [r0]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
	bsi->nBytes = nBytes;
 800c31e:	e9c0 3102 	strd	r3, r1, [r0, #8]
}
 800c322:	4770      	bx	lr

0800c324 <xmp3fixpt_GetBits>:
 **************************************************************************************/
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 800c324:	f001 011f 	and.w	r1, r1, #31
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800c328:	6843      	ldr	r3, [r0, #4]
{
 800c32a:	b4f0      	push	{r4, r5, r6, r7}
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800c32c:	f1c1 041f 	rsb	r4, r1, #31
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c330:	fa03 f201 	lsl.w	r2, r3, r1
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800c334:	40e3      	lsrs	r3, r4
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c336:	6884      	ldr	r4, [r0, #8]
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c338:	6042      	str	r2, [r0, #4]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c33a:	1a62      	subs	r2, r4, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c33c:	085b      	lsrs	r3, r3, #1

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 800c33e:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c340:	6082      	str	r2, [r0, #8]
	if (bsi->cachedBits < 0) {
 800c342:	db02      	blt.n	800c34a <xmp3fixpt_GetBits+0x26>
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
		bsi->iCache <<= lowBits;			/* left-justify cache */
	}

	return data;
}
 800c344:	4618      	mov	r0, r3
 800c346:	bcf0      	pop	{r4, r5, r6, r7}
 800c348:	4770      	bx	lr
	int nBytes = bsi->nBytes;
 800c34a:	68c5      	ldr	r5, [r0, #12]
		lowBits = -bsi->cachedBits;
 800c34c:	1b09      	subs	r1, r1, r4
	if (nBytes >= 4) {
 800c34e:	2d03      	cmp	r5, #3
 800c350:	dc2f      	bgt.n	800c3b2 <xmp3fixpt_GetBits+0x8e>
		bsi->iCache = 0;
 800c352:	2400      	movs	r4, #0
 800c354:	6044      	str	r4, [r0, #4]
		while (nBytes--) {
 800c356:	2d00      	cmp	r5, #0
 800c358:	d04a      	beq.n	800c3f0 <xmp3fixpt_GetBits+0xcc>
			bsi->iCache |= (*bsi->bytePtr++);
 800c35a:	6806      	ldr	r6, [r0, #0]
		while (nBytes--) {
 800c35c:	2d01      	cmp	r5, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800c35e:	f106 0401 	add.w	r4, r6, #1
 800c362:	6004      	str	r4, [r0, #0]
 800c364:	7834      	ldrb	r4, [r6, #0]
			bsi->iCache <<= 8;
 800c366:	ea4f 2404 	mov.w	r4, r4, lsl #8
 800c36a:	6044      	str	r4, [r0, #4]
		while (nBytes--) {
 800c36c:	d00e      	beq.n	800c38c <xmp3fixpt_GetBits+0x68>
			bsi->iCache |= (*bsi->bytePtr++);
 800c36e:	1cb7      	adds	r7, r6, #2
		while (nBytes--) {
 800c370:	2d02      	cmp	r5, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800c372:	6007      	str	r7, [r0, #0]
 800c374:	7877      	ldrb	r7, [r6, #1]
 800c376:	ea44 0407 	orr.w	r4, r4, r7
			bsi->iCache <<= 8;
 800c37a:	ea4f 2404 	mov.w	r4, r4, lsl #8
 800c37e:	6044      	str	r4, [r0, #4]
		while (nBytes--) {
 800c380:	d004      	beq.n	800c38c <xmp3fixpt_GetBits+0x68>
			bsi->iCache |= (*bsi->bytePtr++);
 800c382:	1cf7      	adds	r7, r6, #3
 800c384:	6007      	str	r7, [r0, #0]
 800c386:	78b6      	ldrb	r6, [r6, #2]
 800c388:	4334      	orrs	r4, r6
			bsi->iCache <<= 8;
 800c38a:	0224      	lsls	r4, r4, #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800c38c:	f1c5 0603 	rsb	r6, r5, #3
 800c390:	00f6      	lsls	r6, r6, #3
 800c392:	40b4      	lsls	r4, r6
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800c394:	f102 0620 	add.w	r6, r2, #32
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800c398:	fa04 f101 	lsl.w	r1, r4, r1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800c39c:	40f4      	lsrs	r4, r6
 800c39e:	4323      	orrs	r3, r4
		bsi->nBytes = 0;
 800c3a0:	2400      	movs	r4, #0
 800c3a2:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800c3a6:	60c4      	str	r4, [r0, #12]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800c3a8:	e9c0 1201 	strd	r1, r2, [r0, #4]
}
 800c3ac:	bcf0      	pop	{r4, r5, r6, r7}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	4770      	bx	lr
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c3b2:	6806      	ldr	r6, [r0, #0]
 800c3b4:	3220      	adds	r2, #32
		bsi->nBytes -= 4;
 800c3b6:	3d04      	subs	r5, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c3b8:	4637      	mov	r7, r6
 800c3ba:	1c74      	adds	r4, r6, #1
 800c3bc:	6004      	str	r4, [r0, #0]
 800c3be:	f817 4b02 	ldrb.w	r4, [r7], #2
 800c3c2:	0624      	lsls	r4, r4, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c3c4:	6007      	str	r7, [r0, #0]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c3c6:	6044      	str	r4, [r0, #4]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c3c8:	7877      	ldrb	r7, [r6, #1]
 800c3ca:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c3ce:	1cf7      	adds	r7, r6, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c3d0:	6044      	str	r4, [r0, #4]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c3d2:	6007      	str	r7, [r0, #0]
 800c3d4:	78b7      	ldrb	r7, [r6, #2]
 800c3d6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800c3da:	1d37      	adds	r7, r6, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c3dc:	6044      	str	r4, [r0, #4]
		bsi->iCache |= (*bsi->bytePtr++);
 800c3de:	6007      	str	r7, [r0, #0]
 800c3e0:	78f6      	ldrb	r6, [r6, #3]
		bsi->nBytes -= 4;
 800c3e2:	60c5      	str	r5, [r0, #12]
		bsi->iCache |= (*bsi->bytePtr++);
 800c3e4:	4334      	orrs	r4, r6
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800c3e6:	fa04 f101 	lsl.w	r1, r4, r1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800c3ea:	40d4      	lsrs	r4, r2
 800c3ec:	4323      	orrs	r3, r4
 800c3ee:	e7db      	b.n	800c3a8 <xmp3fixpt_GetBits+0x84>
		while (nBytes--) {
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	e7d5      	b.n	800c3a0 <xmp3fixpt_GetBits+0x7c>

0800c3f4 <xmp3fixpt_CalcBitsUsed>:
 * Outputs:     none
 *
 * Return:      number of bits read from bitstream, as offset from startBuf:startOffset
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
 800c3f4:	b410      	push	{r4}
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 800c3f6:	6804      	ldr	r4, [r0, #0]
	bitsUsed -= bsi->cachedBits;
 800c3f8:	6883      	ldr	r3, [r0, #8]
	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 800c3fa:	1a61      	subs	r1, r4, r1
	bitsUsed -= startOffset;

	return bitsUsed;
}
 800c3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	bitsUsed -= bsi->cachedBits;
 800c400:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
}
 800c404:	1a98      	subs	r0, r3, r2
 800c406:	4770      	bx	lr

0800c408 <xmp3fixpt_CheckPadBit>:
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 800c408:	b130      	cbz	r0, 800c418 <xmp3fixpt_CheckPadBit+0x10>
 800c40a:	6803      	ldr	r3, [r0, #0]
 800c40c:	b123      	cbz	r3, 800c418 <xmp3fixpt_CheckPadBit+0x10>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	return (fh->paddingBit ? 1 : 0);
 800c40e:	6958      	ldr	r0, [r3, #20]
 800c410:	3800      	subs	r0, #0
 800c412:	bf18      	it	ne
 800c414:	2001      	movne	r0, #1
 800c416:	4770      	bx	lr
		return -1;
 800c418:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop

0800c420 <xmp3fixpt_UnpackFrameHeader>:

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 800c420:	2800      	cmp	r0, #0
 800c422:	f000 80db 	beq.w	800c5dc <xmp3fixpt_UnpackFrameHeader+0x1bc>
 800c426:	6803      	ldr	r3, [r0, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 80d7 	beq.w	800c5dc <xmp3fixpt_UnpackFrameHeader+0x1bc>
 800c42e:	780a      	ldrb	r2, [r1, #0]
 800c430:	2aff      	cmp	r2, #255	; 0xff
 800c432:	f040 80d3 	bne.w	800c5dc <xmp3fixpt_UnpackFrameHeader+0x1bc>
{
 800c436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 800c43a:	784c      	ldrb	r4, [r1, #1]
 800c43c:	f004 02e0 	and.w	r2, r4, #224	; 0xe0
 800c440:	2ae0      	cmp	r2, #224	; 0xe0
 800c442:	f040 80c8 	bne.w	800c5d6 <xmp3fixpt_UnpackFrameHeader+0x1b6>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800c446:	f014 0f18 	tst.w	r4, #24
	verIdx =         (buf[1] >> 3) & 0x03;
 800c44a:	ea4f 02d4 	mov.w	r2, r4, lsr #3
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800c44e:	f040 80b7 	bne.w	800c5c0 <xmp3fixpt_UnpackFrameHeader+0x1a0>
 800c452:	2202      	movs	r2, #2
 800c454:	701a      	strb	r2, [r3, #0]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 800c456:	f891 c001 	ldrb.w	ip, [r1, #1]
 800c45a:	f3cc 0c41 	ubfx	ip, ip, #1, #2
 800c45e:	f1cc 0904 	rsb	r9, ip, #4
 800c462:	f8c3 9004 	str.w	r9, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 800c466:	784d      	ldrb	r5, [r1, #1]
 800c468:	43ed      	mvns	r5, r5
 800c46a:	f005 0501 	and.w	r5, r5, #1
 800c46e:	609d      	str	r5, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 800c470:	788c      	ldrb	r4, [r1, #2]
 800c472:	0927      	lsrs	r7, r4, #4
 800c474:	60df      	str	r7, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 800c476:	788c      	ldrb	r4, [r1, #2]
 800c478:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800c47c:	611c      	str	r4, [r3, #16]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
	fh->origFlag =   (buf[3] >> 2) & 0x01;
	fh->emphasis =   (buf[3] >> 0) & 0x03;

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 800c47e:	2c03      	cmp	r4, #3
 800c480:	bf18      	it	ne
 800c482:	2f0f      	cmpne	r7, #15
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 800c484:	788e      	ldrb	r6, [r1, #2]
 800c486:	f3c6 0640 	ubfx	r6, r6, #1, #1
 800c48a:	615e      	str	r6, [r3, #20]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 800c48c:	f891 e002 	ldrb.w	lr, [r1, #2]
 800c490:	f00e 0e01 	and.w	lr, lr, #1
 800c494:	f8c3 e018 	str.w	lr, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 800c498:	f891 e003 	ldrb.w	lr, [r1, #3]
 800c49c:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 800c4a0:	f883 e01c 	strb.w	lr, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 800c4a4:	f891 8003 	ldrb.w	r8, [r1, #3]
 800c4a8:	f3c8 1801 	ubfx	r8, r8, #4, #2
 800c4ac:	f8c3 8020 	str.w	r8, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 800c4b0:	f891 8003 	ldrb.w	r8, [r1, #3]
 800c4b4:	f3c8 08c0 	ubfx	r8, r8, #3, #1
 800c4b8:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 800c4bc:	f891 8003 	ldrb.w	r8, [r1, #3]
 800c4c0:	f3c8 0880 	ubfx	r8, r8, #2, #1
 800c4c4:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 800c4c8:	f891 8003 	ldrb.w	r8, [r1, #3]
 800c4cc:	f008 0803 	and.w	r8, r8, #3
 800c4d0:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 800c4d4:	d07f      	beq.n	800c5d6 <xmp3fixpt_UnpackFrameHeader+0x1b6>
 800c4d6:	f1a9 0a04 	sub.w	sl, r9, #4
 800c4da:	faba fa8a 	clz	sl, sl
 800c4de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800c4e2:	f1ba 0f00 	cmp.w	sl, #0
 800c4e6:	d176      	bne.n	800c5d6 <xmp3fixpt_UnpackFrameHeader+0x1b6>
		return -1;

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 800c4e8:	f04f 08de 	mov.w	r8, #222	; 0xde
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 800c4ec:	f1be 0f01 	cmp.w	lr, #1
	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 800c4f0:	fb08 fb02 	mul.w	fp, r8, r2
 800c4f4:	f04f 084a 	mov.w	r8, #74	; 0x4a
 800c4f8:	fb18 b804 	smlabb	r8, r8, r4, fp
 800c4fc:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 800c5f4 <xmp3fixpt_UnpackFrameHeader+0x1d4>
 800c500:	44d8      	add	r8, fp
 800c502:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 800c506:	d05f      	beq.n	800c5c8 <xmp3fixpt_UnpackFrameHeader+0x1a8>
		fh->modeExt = 0;

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800c508:	f1be 0f03 	cmp.w	lr, #3
		fh->modeExt = 0;
 800c50c:	f8c3 a020 	str.w	sl, [r3, #32]
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800c510:	d15a      	bne.n	800c5c8 <xmp3fixpt_UnpackFrameHeader+0x1a8>
 800c512:	f04f 0801 	mov.w	r8, #1
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800c516:	f1cc 0c03 	rsb	ip, ip, #3
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800c51a:	f8c0 87bc 	str.w	r8, [r0, #1980]	; 0x7bc
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800c51e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800c522:	2a00      	cmp	r2, #0
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800c524:	ea4f 0a42 	mov.w	sl, r2, lsl #1
	mp3DecInfo->layer = fh->layer;
 800c528:	f8c0 97d0 	str.w	r9, [r0, #2000]	; 0x7d0
	mp3DecInfo->version = fh->ver;
 800c52c:	f880 27d4 	strb.w	r2, [r0, #2004]	; 0x7d4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800c530:	eb08 090c 	add.w	r9, r8, ip
 800c534:	4a2b      	ldr	r2, [pc, #172]	; (800c5e4 <xmp3fixpt_UnpackFrameHeader+0x1c4>)
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800c536:	bf0c      	ite	eq
 800c538:	f04f 0b02 	moveq.w	fp, #2
 800c53c:	f04f 0b01 	movne.w	fp, #1
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800c540:	f932 9019 	ldrsh.w	r9, [r2, r9, lsl #1]
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800c544:	f8c0 b7c4 	str.w	fp, [r0, #1988]	; 0x7c4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800c548:	fb99 f2fb 	sdiv	r2, r9, fp
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800c54c:	eb08 0904 	add.w	r9, r8, r4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800c550:	f8c0 27c8 	str.w	r2, [r0, #1992]	; 0x7c8
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800c554:	4a24      	ldr	r2, [pc, #144]	; (800c5e8 <xmp3fixpt_UnpackFrameHeader+0x1c8>)
 800c556:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 800c55a:	f8c0 27c0 	str.w	r2, [r0, #1984]	; 0x7c0
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 800c55e:	b33f      	cbz	r7, 800c5b0 <xmp3fixpt_UnpackFrameHeader+0x190>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800c560:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800c564:	f1be 0f03 	cmp.w	lr, #3
 800c568:	bf0c      	ite	eq
 800c56a:	4652      	moveq	r2, sl
 800c56c:	f10a 0201 	addne.w	r2, sl, #1
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800c570:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c574:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800c578:	44c4      	add	ip, r8
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c57a:	4444      	add	r4, r8
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800c57c:	44bc      	add	ip, r7
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c57e:	443c      	add	r4, r7
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800c580:	4f1a      	ldr	r7, [pc, #104]	; (800c5ec <xmp3fixpt_UnpackFrameHeader+0x1cc>)
 800c582:	f937 701c 	ldrsh.w	r7, [r7, ip, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c586:	f8df c070 	ldr.w	ip, [pc, #112]	; 800c5f8 <xmp3fixpt_UnpackFrameHeader+0x1d8>
 800c58a:	f93c 4014 	ldrsh.w	r4, [ip, r4, lsl #1]
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800c58e:	ebc7 1c47 	rsb	ip, r7, r7, lsl #5
 800c592:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 800c596:	00ff      	lsls	r7, r7, #3
 800c598:	f8c0 77b8 	str.w	r7, [r0, #1976]	; 0x7b8
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800c59c:	4f14      	ldr	r7, [pc, #80]	; (800c5f0 <xmp3fixpt_UnpackFrameHeader+0x1d0>)
 800c59e:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c5a2:	1aa2      	subs	r2, r4, r2
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800c5a4:	1f14      	subs	r4, r2, #4
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 800c5a6:	b105      	cbz	r5, 800c5aa <xmp3fixpt_UnpackFrameHeader+0x18a>
 800c5a8:	1f94      	subs	r4, r2, #6
 800c5aa:	4426      	add	r6, r4
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800c5ac:	f8c0 67cc 	str.w	r6, [r0, #1996]	; 0x7cc
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 800c5b0:	b16d      	cbz	r5, 800c5ce <xmp3fixpt_UnpackFrameHeader+0x1ae>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 800c5b2:	888a      	ldrh	r2, [r1, #4]
		return 6;
 800c5b4:	2006      	movs	r0, #6
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 800c5b6:	ba52      	rev16	r2, r2
 800c5b8:	b292      	uxth	r2, r2
 800c5ba:	631a      	str	r2, [r3, #48]	; 0x30
	} else {
		fh->CRCWord = 0;
		return 4;
	}
}
 800c5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c0:	43d2      	mvns	r2, r2
 800c5c2:	f002 0201 	and.w	r2, r2, #1
 800c5c6:	e745      	b.n	800c454 <xmp3fixpt_UnpackFrameHeader+0x34>
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800c5c8:	f04f 0802 	mov.w	r8, #2
 800c5cc:	e7a3      	b.n	800c516 <xmp3fixpt_UnpackFrameHeader+0xf6>
		return 4;
 800c5ce:	2004      	movs	r0, #4
		fh->CRCWord = 0;
 800c5d0:	631d      	str	r5, [r3, #48]	; 0x30
}
 800c5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 800c5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5da:	e7ef      	b.n	800c5bc <xmp3fixpt_UnpackFrameHeader+0x19c>
 800c5dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	08020748 	.word	0x08020748
 800c5e8:	08020724 	.word	0x08020724
 800c5ec:	08020614 	.word	0x08020614
 800c5f0:	080209f8 	.word	0x080209f8
 800c5f4:	0802075c 	.word	0x0802075c
 800c5f8:	08020a04 	.word	0x08020a04

0800c5fc <xmp3fixpt_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 800c5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c600:	b08b      	sub	sp, #44	; 0x2c
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 800c602:	2800      	cmp	r0, #0
 800c604:	f001 806d 	beq.w	800d6e2 <xmp3fixpt_UnpackSideInfo+0x10e6>
 800c608:	f8d0 b000 	ldr.w	fp, [r0]
 800c60c:	4606      	mov	r6, r0
 800c60e:	f1bb 0f00 	cmp.w	fp, #0
 800c612:	f001 8066 	beq.w	800d6e2 <xmp3fixpt_UnpackSideInfo+0x10e6>
 800c616:	6844      	ldr	r4, [r0, #4]
 800c618:	9404      	str	r4, [sp, #16]
 800c61a:	2c00      	cmp	r4, #0
 800c61c:	f001 8061 	beq.w	800d6e2 <xmp3fixpt_UnpackSideInfo+0x10e6>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));

	bsi = &bitStreamInfo;
	if (fh->ver == MPEG1) {
 800c620:	f89b 8000 	ldrb.w	r8, [fp]
 800c624:	f1b8 0f00 	cmp.w	r8, #0
 800c628:	f000 80eb 	beq.w	800c802 <xmp3fixpt_UnpackSideInfo+0x206>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
			for (bd = 0; bd < MAX_SCFBD; bd++)
				si->scfsi[ch][bd] = GetBits(bsi, 1);
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800c62c:	f89b 201c 	ldrb.w	r2, [fp, #28]
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800c630:	2300      	movs	r3, #0
		SetBitstreamPointer(bsi, nBytes, buf);
		si->mainDataBegin = GetBits(bsi, 8);
 800c632:	ad06      	add	r5, sp, #24
	bsi->bytePtr = buf;
 800c634:	9106      	str	r1, [sp, #24]
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800c636:	2a03      	cmp	r2, #3
		si->mainDataBegin = GetBits(bsi, 8);
 800c638:	f04f 0108 	mov.w	r1, #8
 800c63c:	4628      	mov	r0, r5
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800c63e:	e9cd 3307 	strd	r3, r3, [sp, #28]
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800c642:	bf0c      	ite	eq
 800c644:	2309      	moveq	r3, #9
 800c646:	2311      	movne	r3, #17
 800c648:	9305      	str	r3, [sp, #20]
	bsi->nBytes = nBytes;
 800c64a:	9309      	str	r3, [sp, #36]	; 0x24
		si->mainDataBegin = GetBits(bsi, 8);
 800c64c:	f7ff fe6a 	bl	800c324 <xmp3fixpt_GetBits>
 800c650:	9c04      	ldr	r4, [sp, #16]
 800c652:	6020      	str	r0, [r4, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800c654:	4628      	mov	r0, r5
 800c656:	f89b 301c 	ldrb.w	r3, [fp, #28]
 800c65a:	2b03      	cmp	r3, #3
 800c65c:	bf0c      	ite	eq
 800c65e:	2101      	moveq	r1, #1
 800c660:	2102      	movne	r1, #2
 800c662:	f7ff fe5f 	bl	800c324 <xmp3fixpt_GetBits>
 800c666:	6060      	str	r0, [r4, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800c668:	f8d6 37c4 	ldr.w	r3, [r6, #1988]	; 0x7c4
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f340 80c0 	ble.w	800c7f2 <xmp3fixpt_UnpackSideInfo+0x1f6>
 800c672:	9a04      	ldr	r2, [sp, #16]
 800c674:	46b2      	mov	sl, r6
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c676:	f8d6 37bc 	ldr.w	r3, [r6, #1980]	; 0x7bc
 800c67a:	9202      	str	r2, [sp, #8]
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800c67c:	2200      	movs	r2, #0
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c67e:	2b00      	cmp	r3, #0
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800c680:	9203      	str	r2, [sp, #12]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c682:	f340 80b5 	ble.w	800c7f0 <xmp3fixpt_UnpackSideInfo+0x1f4>
 800c686:	9c02      	ldr	r4, [sp, #8]
 800c688:	2600      	movs	r6, #0
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */

			sis->part23Length =    GetBits(bsi, 12);
 800c68a:	210c      	movs	r1, #12
 800c68c:	4628      	mov	r0, r5
 800c68e:	f7ff fe49 	bl	800c324 <xmp3fixpt_GetBits>
			sis->nBigvals =        GetBits(bsi, 9);
 800c692:	2109      	movs	r1, #9
			sis->part23Length =    GetBits(bsi, 12);
 800c694:	62a0      	str	r0, [r4, #40]	; 0x28
			sis->nBigvals =        GetBits(bsi, 9);
 800c696:	4628      	mov	r0, r5
 800c698:	f7ff fe44 	bl	800c324 <xmp3fixpt_GetBits>
			sis->globalGain =      GetBits(bsi, 8);
 800c69c:	2108      	movs	r1, #8
			sis->nBigvals =        GetBits(bsi, 9);
 800c69e:	62e0      	str	r0, [r4, #44]	; 0x2c
			sis->globalGain =      GetBits(bsi, 8);
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f7ff fe3f 	bl	800c324 <xmp3fixpt_GetBits>
 800c6a6:	6320      	str	r0, [r4, #48]	; 0x30
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800c6a8:	f89b 3000 	ldrb.w	r3, [fp]
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	bf0c      	ite	eq
 800c6b2:	2104      	moveq	r1, #4
 800c6b4:	2109      	movne	r1, #9
 800c6b6:	f7ff fe35 	bl	800c324 <xmp3fixpt_GetBits>
 800c6ba:	6360      	str	r0, [r4, #52]	; 0x34
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c6bc:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 800c6c0:	f101 3eff 	add.w	lr, r1, #4294967295
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c6c4:	0043      	lsls	r3, r0, #1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c6c6:	0fc0      	lsrs	r0, r0, #31
	if (bsi->cachedBits < 0) {
 800c6c8:	f1be 0f00 	cmp.w	lr, #0
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c6cc:	9307      	str	r3, [sp, #28]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c6ce:	f8cd e020 	str.w	lr, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c6d2:	f2c0 8155 	blt.w	800c980 <xmp3fixpt_UnpackSideInfo+0x384>
			sis->winSwitchFlag =   GetBits(bsi, 1);
 800c6d6:	63a0      	str	r0, [r4, #56]	; 0x38

			if(sis->winSwitchFlag) {
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	f000 80d1 	beq.w	800c880 <xmp3fixpt_UnpackSideInfo+0x284>
				/* this is a start, stop, short, or mixed block */
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 800c6de:	2102      	movs	r1, #2
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f7ff fe1f 	bl	800c324 <xmp3fixpt_GetBits>
 800c6e6:	63e0      	str	r0, [r4, #60]	; 0x3c
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c6e8:	e9dd 3e07 	ldrd	r3, lr, [sp, #28]
 800c6ec:	f10e 31ff 	add.w	r1, lr, #4294967295
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c6f0:	005a      	lsls	r2, r3, #1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c6f2:	0fdf      	lsrs	r7, r3, #31
	if (bsi->cachedBits < 0) {
 800c6f4:	2900      	cmp	r1, #0
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c6f6:	9207      	str	r2, [sp, #28]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c6f8:	9108      	str	r1, [sp, #32]
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c6fa:	9701      	str	r7, [sp, #4]
	if (bsi->cachedBits < 0) {
 800c6fc:	f2c0 821a 	blt.w	800cb34 <xmp3fixpt_UnpackSideInfo+0x538>
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c700:	ea4f 6cd2 	mov.w	ip, r2, lsr #27
 800c704:	463a      	mov	r2, r7
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c706:	019b      	lsls	r3, r3, #6
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800c708:	6422      	str	r2, [r4, #64]	; 0x40
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c70a:	1f4a      	subs	r2, r1, #5
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c70c:	9307      	str	r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 800c70e:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c710:	9208      	str	r2, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c712:	f2c0 81d8 	blt.w	800cac6 <xmp3fixpt_UnpackSideInfo+0x4ca>
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c716:	ea4f 6ed3 	mov.w	lr, r3, lsr #27
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c71a:	015b      	lsls	r3, r3, #5
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c71c:	1f51      	subs	r1, r2, #5
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800c71e:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c722:	9307      	str	r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 800c724:	2900      	cmp	r1, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c726:	9108      	str	r1, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c728:	f2c0 83c9 	blt.w	800cebe <xmp3fixpt_UnpackSideInfo+0x8c2>
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c72c:	0f5a      	lsrs	r2, r3, #29
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c72e:	00db      	lsls	r3, r3, #3
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800c730:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c734:	f1a1 0c03 	sub.w	ip, r1, #3
				sis->tableSelect[2] =  0;					/* unused */
 800c738:	f04f 0e00 	mov.w	lr, #0
	if (bsi->cachedBits < 0) {
 800c73c:	45f4      	cmp	ip, lr
				sis->tableSelect[2] =  0;					/* unused */
 800c73e:	f8c4 e04c 	str.w	lr, [r4, #76]	; 0x4c
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c742:	9307      	str	r3, [sp, #28]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c744:	f8cd c020 	str.w	ip, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c748:	f2c0 8382 	blt.w	800ce50 <xmp3fixpt_UnpackSideInfo+0x854>
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c74c:	ea4f 7e53 	mov.w	lr, r3, lsr #29
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c750:	00db      	lsls	r3, r3, #3
				sis->subBlockGain[0] = GetBits(bsi, 3);
 800c752:	6522      	str	r2, [r4, #80]	; 0x50
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c754:	f1ac 0203 	sub.w	r2, ip, #3
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c758:	9307      	str	r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 800c75a:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c75c:	9208      	str	r2, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c75e:	f2c0 8341 	blt.w	800cde4 <xmp3fixpt_UnpackSideInfo+0x7e8>
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c762:	0f59      	lsrs	r1, r3, #29
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c764:	00db      	lsls	r3, r3, #3
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800c766:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c76a:	9307      	str	r3, [sp, #28]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c76c:	1ed3      	subs	r3, r2, #3
	if (bsi->cachedBits < 0) {
 800c76e:	2b00      	cmp	r3, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c770:	9308      	str	r3, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c772:	f2c0 82fe 	blt.w	800cd72 <xmp3fixpt_UnpackSideInfo+0x776>
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800c776:	65a1      	str	r1, [r4, #88]	; 0x58

				/* TODO - check logic */
				if (sis->blockType == 0) {
 800c778:	2800      	cmp	r0, #0
 800c77a:	f040 819a 	bne.w	800cab2 <xmp3fixpt_UnpackSideInfo+0x4b6>
					sis->region0Count = 8;
				} else {
					/* start, stop, or short-mixed */
					sis->region0Count = 7;
				}
				sis->region1Count = 20 - sis->region0Count;
 800c77e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
					sis->sfCompress = 0;
 800c780:	6360      	str	r0, [r4, #52]	; 0x34
				sis->region1Count = 20 - sis->region0Count;
 800c782:	f1c3 0314 	rsb	r3, r3, #20
					sis->part23Length = 0;
 800c786:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
				sis->region1Count = 20 - sis->region0Count;
 800c78a:	6623      	str	r3, [r4, #96]	; 0x60
				sis->tableSelect[1] =  GetBits(bsi, 5);
				sis->tableSelect[2] =  GetBits(bsi, 5);
				sis->region0Count =    GetBits(bsi, 4);
				sis->region1Count =    GetBits(bsi, 3);
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800c78c:	f89b 2000 	ldrb.w	r2, [fp]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c790:	e9dd 3c07 	ldrd	r3, ip, [sp, #28]
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c794:	0fd9      	lsrs	r1, r3, #31
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c796:	005b      	lsls	r3, r3, #1
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800c798:	2a00      	cmp	r2, #0
 800c79a:	f000 80ae 	beq.w	800c8fa <xmp3fixpt_UnpackSideInfo+0x2fe>
 800c79e:	2200      	movs	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c7a0:	f10c 37ff 	add.w	r7, ip, #4294967295
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800c7a4:	6662      	str	r2, [r4, #100]	; 0x64
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c7a6:	9307      	str	r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 800c7a8:	2f00      	cmp	r7, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c7aa:	9708      	str	r7, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c7ac:	f2c0 8147 	blt.w	800ca3e <xmp3fixpt_UnpackSideInfo+0x442>
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c7b0:	0fd8      	lsrs	r0, r3, #31
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c7b2:	005b      	lsls	r3, r3, #1
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c7b4:	1e7a      	subs	r2, r7, #1
			sis->sfactScale =        GetBits(bsi, 1);
 800c7b6:	66a1      	str	r1, [r4, #104]	; 0x68
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c7b8:	9307      	str	r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 800c7ba:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c7bc:	9208      	str	r2, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c7be:	f2c0 810f 	blt.w	800c9e0 <xmp3fixpt_UnpackSideInfo+0x3e4>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c7c2:	3601      	adds	r6, #1
 800c7c4:	f8da 37bc 	ldr.w	r3, [sl, #1980]	; 0x7bc
			sis->count1TableSelect = GetBits(bsi, 1);
 800c7c8:	66e0      	str	r0, [r4, #108]	; 0x6c
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c7ca:	3448      	adds	r4, #72	; 0x48
 800c7cc:	42b3      	cmp	r3, r6
 800c7ce:	f73f af5c 	bgt.w	800c68a <xmp3fixpt_UnpackSideInfo+0x8e>
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800c7d2:	9a03      	ldr	r2, [sp, #12]
 800c7d4:	3201      	adds	r2, #1
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	9203      	str	r2, [sp, #12]
 800c7da:	f8da 27c4 	ldr.w	r2, [sl, #1988]	; 0x7c4
 800c7de:	4291      	cmp	r1, r2
 800c7e0:	da06      	bge.n	800c7f0 <xmp3fixpt_UnpackSideInfo+0x1f4>
 800c7e2:	9a02      	ldr	r2, [sp, #8]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f102 0290 	add.w	r2, r2, #144	; 0x90
 800c7ea:	9202      	str	r2, [sp, #8]
 800c7ec:	f73f af4b 	bgt.w	800c686 <xmp3fixpt_UnpackSideInfo+0x8a>
 800c7f0:	4656      	mov	r6, sl
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 800c7f2:	9b04      	ldr	r3, [sp, #16]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f8c6 37d8 	str.w	r3, [r6, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
}
 800c7fa:	9805      	ldr	r0, [sp, #20]
 800c7fc:	b00b      	add	sp, #44	; 0x2c
 800c7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800c802:	f89b 301c 	ldrb.w	r3, [fp, #28]
		si->mainDataBegin = GetBits(bsi, 9);
 800c806:	ad06      	add	r5, sp, #24
	bsi->bytePtr = buf;
 800c808:	9106      	str	r1, [sp, #24]
		si->mainDataBegin = GetBits(bsi, 9);
 800c80a:	2109      	movs	r1, #9
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800c80c:	2b03      	cmp	r3, #3
		si->mainDataBegin = GetBits(bsi, 9);
 800c80e:	4628      	mov	r0, r5
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800c810:	bf0c      	ite	eq
 800c812:	2311      	moveq	r3, #17
 800c814:	2320      	movne	r3, #32
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800c816:	e9cd 8807 	strd	r8, r8, [sp, #28]
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800c81a:	9305      	str	r3, [sp, #20]
	bsi->nBytes = nBytes;
 800c81c:	9309      	str	r3, [sp, #36]	; 0x24
		si->mainDataBegin = GetBits(bsi, 9);
 800c81e:	f7ff fd81 	bl	800c324 <xmp3fixpt_GetBits>
 800c822:	6020      	str	r0, [r4, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800c824:	4628      	mov	r0, r5
 800c826:	f89b 301c 	ldrb.w	r3, [fp, #28]
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	bf0c      	ite	eq
 800c82e:	2105      	moveq	r1, #5
 800c830:	2103      	movne	r1, #3
 800c832:	f7ff fd77 	bl	800c324 <xmp3fixpt_GetBits>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c836:	f8d6 37bc 	ldr.w	r3, [r6, #1980]	; 0x7bc
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800c83a:	6060      	str	r0, [r4, #4]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f77f af13 	ble.w	800c668 <xmp3fixpt_UnpackSideInfo+0x6c>
 800c842:	3418      	adds	r4, #24
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c844:	46b4      	mov	ip, r6
 800c846:	4646      	mov	r6, r8
 800c848:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
 800c84c:	e9dd a207 	ldrd	sl, r2, [sp, #28]
 800c850:	4653      	mov	r3, sl
 800c852:	f1a4 0010 	sub.w	r0, r4, #16
 800c856:	ee07 5a90 	vmov	s15, r5
 800c85a:	1e51      	subs	r1, r2, #1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c85c:	0fdf      	lsrs	r7, r3, #31
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c85e:	005b      	lsls	r3, r3, #1
	if (bsi->cachedBits < 0) {
 800c860:	2900      	cmp	r1, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c862:	9108      	str	r1, [sp, #32]
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c864:	9307      	str	r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 800c866:	db56      	blt.n	800c916 <xmp3fixpt_UnpackSideInfo+0x31a>
 800c868:	460a      	mov	r2, r1
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 800c86a:	f840 7b04 	str.w	r7, [r0], #4
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800c86e:	4284      	cmp	r4, r0
 800c870:	d1f3      	bne.n	800c85a <xmp3fixpt_UnpackSideInfo+0x25e>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c872:	3410      	adds	r4, #16
 800c874:	ee17 5a90 	vmov	r5, s15
 800c878:	4574      	cmp	r4, lr
 800c87a:	d1ea      	bne.n	800c852 <xmp3fixpt_UnpackSideInfo+0x256>
 800c87c:	4666      	mov	r6, ip
 800c87e:	e6f3      	b.n	800c668 <xmp3fixpt_UnpackSideInfo+0x6c>
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c880:	f1ae 0705 	sub.w	r7, lr, #5
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c884:	0159      	lsls	r1, r3, #5
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c886:	ea4f 6cd3 	mov.w	ip, r3, lsr #27
	if (bsi->cachedBits < 0) {
 800c88a:	2f00      	cmp	r7, #0
				sis->mixedBlock = 0;
 800c88c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c890:	9107      	str	r1, [sp, #28]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c892:	9708      	str	r7, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c894:	f2c0 83e3 	blt.w	800d05e <xmp3fixpt_UnpackSideInfo+0xa62>
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c898:	0ec9      	lsrs	r1, r1, #27
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c89a:	029b      	lsls	r3, r3, #10
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c89c:	1f7a      	subs	r2, r7, #5
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800c89e:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c8a2:	9307      	str	r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 800c8a4:	2a00      	cmp	r2, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c8a6:	9208      	str	r2, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c8a8:	f2c0 8375 	blt.w	800cf96 <xmp3fixpt_UnpackSideInfo+0x99a>
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c8ac:	0ed8      	lsrs	r0, r3, #27
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c8ae:	015b      	lsls	r3, r3, #5
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c8b0:	f1a2 0e05 	sub.w	lr, r2, #5
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800c8b4:	64a1      	str	r1, [r4, #72]	; 0x48
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c8b6:	9307      	str	r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 800c8b8:	f1be 0f00 	cmp.w	lr, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c8bc:	f8cd e020 	str.w	lr, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c8c0:	f2c0 839a 	blt.w	800cff8 <xmp3fixpt_UnpackSideInfo+0x9fc>
				sis->region0Count =    GetBits(bsi, 4);
 800c8c4:	2104      	movs	r1, #4
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800c8c6:	64e0      	str	r0, [r4, #76]	; 0x4c
				sis->region0Count =    GetBits(bsi, 4);
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	f7ff fd2b 	bl	800c324 <xmp3fixpt_GetBits>
 800c8ce:	65e0      	str	r0, [r4, #92]	; 0x5c
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c8d0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c8d4:	f1a2 0c03 	sub.w	ip, r2, #3
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c8d8:	00d9      	lsls	r1, r3, #3
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c8da:	0f58      	lsrs	r0, r3, #29
	if (bsi->cachedBits < 0) {
 800c8dc:	f1bc 0f00 	cmp.w	ip, #0
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c8e0:	9107      	str	r1, [sp, #28]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c8e2:	f8cd c020 	str.w	ip, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c8e6:	f2c0 8322 	blt.w	800cf2e <xmp3fixpt_UnpackSideInfo+0x932>
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c8ea:	0fc9      	lsrs	r1, r1, #31
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c8ec:	011b      	lsls	r3, r3, #4
				sis->region1Count =    GetBits(bsi, 3);
 800c8ee:	6620      	str	r0, [r4, #96]	; 0x60
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800c8f0:	f89b 2000 	ldrb.w	r2, [fp]
 800c8f4:	2a00      	cmp	r2, #0
 800c8f6:	f47f af52 	bne.w	800c79e <xmp3fixpt_UnpackSideInfo+0x1a2>
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c8fa:	f10c 3eff 	add.w	lr, ip, #4294967295
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c8fe:	9307      	str	r3, [sp, #28]
	if (bsi->cachedBits < 0) {
 800c900:	f1be 0f00 	cmp.w	lr, #0
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800c904:	f8cd e020 	str.w	lr, [sp, #32]
	if (bsi->cachedBits < 0) {
 800c908:	f2c0 83dd 	blt.w	800d0c6 <xmp3fixpt_UnpackSideInfo+0xaca>
	bsi->iCache <<= nBits;					/* left-justify cache */
 800c90c:	460a      	mov	r2, r1
 800c90e:	46f4      	mov	ip, lr
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800c910:	0fd9      	lsrs	r1, r3, #31
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	e744      	b.n	800c7a0 <xmp3fixpt_UnpackSideInfo+0x1a4>
	int nBytes = bsi->nBytes;
 800c916:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800c91a:	f1c2 0801 	rsb	r8, r2, #1
	if (nBytes >= 4) {
 800c91e:	f1b9 0f03 	cmp.w	r9, #3
 800c922:	f340 81f1 	ble.w	800cd08 <xmp3fixpt_UnpackSideInfo+0x70c>
		bsi->nBytes -= 4;
 800c926:	f1a9 0304 	sub.w	r3, r9, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c92a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800c92e:	321f      	adds	r2, #31
 800c930:	46ca      	mov	sl, r9
 800c932:	f109 0101 	add.w	r1, r9, #1
 800c936:	9106      	str	r1, [sp, #24]
 800c938:	f81a 1b02 	ldrb.w	r1, [sl], #2
 800c93c:	0609      	lsls	r1, r1, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c93e:	f8cd a018 	str.w	sl, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c942:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c944:	f899 a001 	ldrb.w	sl, [r9, #1]
 800c948:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c94c:	f109 0a03 	add.w	sl, r9, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c950:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c952:	f8cd a018 	str.w	sl, [sp, #24]
 800c956:	f899 a002 	ldrb.w	sl, [r9, #2]
 800c95a:	ea41 2a0a 	orr.w	sl, r1, sl, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800c95e:	f109 0104 	add.w	r1, r9, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c962:	f8cd a01c 	str.w	sl, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800c966:	9106      	str	r1, [sp, #24]
 800c968:	f899 1003 	ldrb.w	r1, [r9, #3]
		bsi->nBytes -= 4;
 800c96c:	9309      	str	r3, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800c96e:	ea41 010a 	orr.w	r1, r1, sl
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800c972:	fa01 f308 	lsl.w	r3, r1, r8
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800c976:	40d1      	lsrs	r1, r2
 800c978:	430f      	orrs	r7, r1
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800c97a:	e9cd 3207 	strd	r3, r2, [sp, #28]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800c97e:	e774      	b.n	800c86a <xmp3fixpt_UnpackSideInfo+0x26e>
	int nBytes = bsi->nBytes;
 800c980:	9a09      	ldr	r2, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800c982:	f1c1 0301 	rsb	r3, r1, #1
	if (nBytes >= 4) {
 800c986:	2a03      	cmp	r2, #3
 800c988:	f340 814c 	ble.w	800cc24 <xmp3fixpt_UnpackSideInfo+0x628>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c98c:	9f06      	ldr	r7, [sp, #24]
 800c98e:	f101 0e1f 	add.w	lr, r1, #31
		bsi->nBytes -= 4;
 800c992:	1f11      	subs	r1, r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c994:	46bc      	mov	ip, r7
 800c996:	1c7a      	adds	r2, r7, #1
 800c998:	9206      	str	r2, [sp, #24]
 800c99a:	f81c 2b02 	ldrb.w	r2, [ip], #2
 800c99e:	0612      	lsls	r2, r2, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c9a0:	f8cd c018 	str.w	ip, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c9a4:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c9a6:	f897 c001 	ldrb.w	ip, [r7, #1]
 800c9aa:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c9ae:	f107 0c03 	add.w	ip, r7, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800c9b2:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c9b4:	f8cd c018 	str.w	ip, [sp, #24]
 800c9b8:	f897 c002 	ldrb.w	ip, [r7, #2]
 800c9bc:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800c9c0:	f107 0c04 	add.w	ip, r7, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800c9c4:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800c9c6:	f8cd c018 	str.w	ip, [sp, #24]
 800c9ca:	78ff      	ldrb	r7, [r7, #3]
		bsi->nBytes -= 4;
 800c9cc:	9109      	str	r1, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800c9ce:	433a      	orrs	r2, r7
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800c9d0:	fa02 f303 	lsl.w	r3, r2, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800c9d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9d8:	4310      	orrs	r0, r2
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800c9da:	e9cd 3e07 	strd	r3, lr, [sp, #28]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800c9de:	e67a      	b.n	800c6d6 <xmp3fixpt_UnpackSideInfo+0xda>
	int nBytes = bsi->nBytes;
 800c9e0:	9909      	ldr	r1, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800c9e2:	f1c7 0c01 	rsb	ip, r7, #1
	if (nBytes >= 4) {
 800c9e6:	2903      	cmp	r1, #3
 800c9e8:	f340 8154 	ble.w	800cc94 <xmp3fixpt_UnpackSideInfo+0x698>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c9ec:	f107 021f 	add.w	r2, r7, #31
 800c9f0:	9f06      	ldr	r7, [sp, #24]
		bsi->nBytes -= 4;
 800c9f2:	3904      	subs	r1, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800c9f4:	46be      	mov	lr, r7
 800c9f6:	1c7b      	adds	r3, r7, #1
 800c9f8:	9306      	str	r3, [sp, #24]
 800c9fa:	f81e 3b02 	ldrb.w	r3, [lr], #2
 800c9fe:	061b      	lsls	r3, r3, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ca00:	f8cd e018 	str.w	lr, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ca04:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ca06:	f897 e001 	ldrb.w	lr, [r7, #1]
 800ca0a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ca0e:	f107 0e03 	add.w	lr, r7, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ca12:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ca14:	f8cd e018 	str.w	lr, [sp, #24]
 800ca18:	f897 e002 	ldrb.w	lr, [r7, #2]
 800ca1c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800ca20:	f107 0e04 	add.w	lr, r7, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ca24:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800ca26:	f8cd e018 	str.w	lr, [sp, #24]
 800ca2a:	78ff      	ldrb	r7, [r7, #3]
		bsi->nBytes -= 4;
 800ca2c:	9109      	str	r1, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800ca2e:	433b      	orrs	r3, r7
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800ca30:	fa03 f70c 	lsl.w	r7, r3, ip
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800ca34:	40d3      	lsrs	r3, r2
 800ca36:	4318      	orrs	r0, r3
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800ca38:	e9cd 7207 	strd	r7, r2, [sp, #28]
 800ca3c:	e6c1      	b.n	800c7c2 <xmp3fixpt_UnpackSideInfo+0x1c6>
	int nBytes = bsi->nBytes;
 800ca3e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800ca42:	f1cc 0001 	rsb	r0, ip, #1
	if (nBytes >= 4) {
 800ca46:	f1be 0f03 	cmp.w	lr, #3
 800ca4a:	f340 80b0 	ble.w	800cbae <xmp3fixpt_UnpackSideInfo+0x5b2>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ca4e:	f10c 021f 	add.w	r2, ip, #31
 800ca52:	f8dd c018 	ldr.w	ip, [sp, #24]
		bsi->nBytes -= 4;
 800ca56:	f1ae 0704 	sub.w	r7, lr, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ca5a:	4663      	mov	r3, ip
 800ca5c:	f10c 0e01 	add.w	lr, ip, #1
 800ca60:	f8cd e018 	str.w	lr, [sp, #24]
 800ca64:	f813 8b02 	ldrb.w	r8, [r3], #2
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ca68:	9306      	str	r3, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ca6a:	ea4f 6308 	mov.w	r3, r8, lsl #24
 800ca6e:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ca70:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800ca74:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ca78:	f10c 0303 	add.w	r3, ip, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ca7c:	f8cd 801c 	str.w	r8, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ca80:	9306      	str	r3, [sp, #24]
 800ca82:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800ca86:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800ca8a:	f10c 0304 	add.w	r3, ip, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ca8e:	f8cd 801c 	str.w	r8, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800ca92:	9306      	str	r3, [sp, #24]
 800ca94:	f89c 3003 	ldrb.w	r3, [ip, #3]
		bsi->nBytes -= 4;
 800ca98:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800ca9a:	4617      	mov	r7, r2
		bsi->iCache |= (*bsi->bytePtr++);
 800ca9c:	ea43 0808 	orr.w	r8, r3, r8
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800caa0:	fa08 f300 	lsl.w	r3, r8, r0
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800caa4:	fa28 f802 	lsr.w	r8, r8, r2
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800caa8:	0fd8      	lsrs	r0, r3, #31
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800caaa:	ea41 0108 	orr.w	r1, r1, r8
	bsi->iCache <<= nBits;					/* left-justify cache */
 800caae:	005b      	lsls	r3, r3, #1
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cab0:	e680      	b.n	800c7b4 <xmp3fixpt_UnpackSideInfo+0x1b8>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800cab2:	2802      	cmp	r0, #2
 800cab4:	d103      	bne.n	800cabe <xmp3fixpt_UnpackSideInfo+0x4c2>
 800cab6:	9b01      	ldr	r3, [sp, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f000 85fc 	beq.w	800d6b6 <xmp3fixpt_UnpackSideInfo+0x10ba>
					sis->region0Count = 7;
 800cabe:	2307      	movs	r3, #7
 800cac0:	65e3      	str	r3, [r4, #92]	; 0x5c
 800cac2:	230d      	movs	r3, #13
 800cac4:	e661      	b.n	800c78a <xmp3fixpt_UnpackSideInfo+0x18e>
	int nBytes = bsi->nBytes;
 800cac6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800caca:	f1c1 0305 	rsb	r3, r1, #5
	if (nBytes >= 4) {
 800cace:	f1b8 0f03 	cmp.w	r8, #3
 800cad2:	f340 84eb 	ble.w	800d4ac <xmp3fixpt_UnpackSideInfo+0xeb0>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cad6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800cada:	f101 021b 	add.w	r2, r1, #27
		bsi->nBytes -= 4;
 800cade:	f1a8 0804 	sub.w	r8, r8, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cae2:	46ce      	mov	lr, r9
 800cae4:	f109 0101 	add.w	r1, r9, #1
 800cae8:	9106      	str	r1, [sp, #24]
 800caea:	f81e 1b02 	ldrb.w	r1, [lr], #2
 800caee:	0609      	lsls	r1, r1, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800caf0:	f8cd e018 	str.w	lr, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800caf4:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800caf6:	f899 e001 	ldrb.w	lr, [r9, #1]
 800cafa:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cafe:	f109 0e03 	add.w	lr, r9, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cb02:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cb04:	f8cd e018 	str.w	lr, [sp, #24]
 800cb08:	f899 e002 	ldrb.w	lr, [r9, #2]
 800cb0c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800cb10:	f109 0e04 	add.w	lr, r9, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cb14:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800cb16:	f8cd e018 	str.w	lr, [sp, #24]
 800cb1a:	f899 e003 	ldrb.w	lr, [r9, #3]
		bsi->nBytes -= 4;
 800cb1e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800cb22:	ea4e 0e01 	orr.w	lr, lr, r1
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cb26:	fa0e f303 	lsl.w	r3, lr, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cb2a:	fa2e fe02 	lsr.w	lr, lr, r2
 800cb2e:	ea4c 0c0e 	orr.w	ip, ip, lr
 800cb32:	e5f0      	b.n	800c716 <xmp3fixpt_UnpackSideInfo+0x11a>
	int nBytes = bsi->nBytes;
 800cb34:	9a09      	ldr	r2, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800cb36:	f1ce 0301 	rsb	r3, lr, #1
	if (nBytes >= 4) {
 800cb3a:	2a03      	cmp	r2, #3
 800cb3c:	f340 84fa 	ble.w	800d534 <xmp3fixpt_UnpackSideInfo+0xf38>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cb40:	f10e 011f 	add.w	r1, lr, #31
 800cb44:	f8dd e018 	ldr.w	lr, [sp, #24]
		bsi->nBytes -= 4;
 800cb48:	3a04      	subs	r2, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cb4a:	46f0      	mov	r8, lr
 800cb4c:	f10e 0c01 	add.w	ip, lr, #1
 800cb50:	f8cd c018 	str.w	ip, [sp, #24]
 800cb54:	f818 cb02 	ldrb.w	ip, [r8], #2
 800cb58:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cb5c:	f8cd 8018 	str.w	r8, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cb60:	f8cd c01c 	str.w	ip, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cb64:	f89e 8001 	ldrb.w	r8, [lr, #1]
 800cb68:	ea4c 4c08 	orr.w	ip, ip, r8, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cb6c:	f10e 0803 	add.w	r8, lr, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cb70:	f8cd c01c 	str.w	ip, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cb74:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb78:	f89e 8002 	ldrb.w	r8, [lr, #2]
 800cb7c:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800cb80:	f10e 0804 	add.w	r8, lr, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cb84:	f8cd c01c 	str.w	ip, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800cb88:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb8c:	f89e e003 	ldrb.w	lr, [lr, #3]
		bsi->nBytes -= 4;
 800cb90:	9209      	str	r2, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800cb92:	ea4e 0c0c 	orr.w	ip, lr, ip
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cb96:	9a01      	ldr	r2, [sp, #4]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cb98:	fa0c f303 	lsl.w	r3, ip, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cb9c:	fa2c fc01 	lsr.w	ip, ip, r1
 800cba0:	ea42 020c 	orr.w	r2, r2, ip
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800cba4:	ea4f 6cd3 	mov.w	ip, r3, lsr #27
	bsi->iCache <<= nBits;					/* left-justify cache */
 800cba8:	015b      	lsls	r3, r3, #5
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cbaa:	9201      	str	r2, [sp, #4]
 800cbac:	e5ac      	b.n	800c708 <xmp3fixpt_UnpackSideInfo+0x10c>
		bsi->iCache = 0;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 800cbb2:	f1be 0f00 	cmp.w	lr, #0
 800cbb6:	f000 8583 	beq.w	800d6c0 <xmp3fixpt_UnpackSideInfo+0x10c4>
			bsi->iCache |= (*bsi->bytePtr++);
 800cbba:	9b06      	ldr	r3, [sp, #24]
		while (nBytes--) {
 800cbbc:	f1be 0f01 	cmp.w	lr, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800cbc0:	f103 0201 	add.w	r2, r3, #1
 800cbc4:	9206      	str	r2, [sp, #24]
 800cbc6:	f893 8000 	ldrb.w	r8, [r3]
			bsi->iCache <<= 8;
 800cbca:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800cbce:	f8cd 801c 	str.w	r8, [sp, #28]
		while (nBytes--) {
 800cbd2:	d012      	beq.n	800cbfa <xmp3fixpt_UnpackSideInfo+0x5fe>
			bsi->iCache |= (*bsi->bytePtr++);
 800cbd4:	1c9a      	adds	r2, r3, #2
		while (nBytes--) {
 800cbd6:	f1be 0f02 	cmp.w	lr, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800cbda:	9206      	str	r2, [sp, #24]
 800cbdc:	785a      	ldrb	r2, [r3, #1]
 800cbde:	ea42 0808 	orr.w	r8, r2, r8
			bsi->iCache <<= 8;
 800cbe2:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800cbe6:	f8cd 801c 	str.w	r8, [sp, #28]
		while (nBytes--) {
 800cbea:	d006      	beq.n	800cbfa <xmp3fixpt_UnpackSideInfo+0x5fe>
			bsi->iCache |= (*bsi->bytePtr++);
 800cbec:	1cda      	adds	r2, r3, #3
 800cbee:	9206      	str	r2, [sp, #24]
 800cbf0:	789b      	ldrb	r3, [r3, #2]
 800cbf2:	ea43 0808 	orr.w	r8, r3, r8
			bsi->iCache <<= 8;
 800cbf6:	ea4f 2808 	mov.w	r8, r8, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800cbfa:	f1ce 0303 	rsb	r3, lr, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cbfe:	f10c 021f 	add.w	r2, ip, #31
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	fa08 f803 	lsl.w	r8, r8, r3
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cc08:	fa08 f300 	lsl.w	r3, r8, r0
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cc0c:	fa28 f802 	lsr.w	r8, r8, r2
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800cc10:	0fd8      	lsrs	r0, r3, #31
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cc12:	ea41 0108 	orr.w	r1, r1, r8
	bsi->iCache <<= nBits;					/* left-justify cache */
 800cc16:	005b      	lsls	r3, r3, #1
		bsi->nBytes = 0;
 800cc18:	eb07 02ce 	add.w	r2, r7, lr, lsl #3
 800cc1c:	2700      	movs	r7, #0
 800cc1e:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800cc20:	4617      	mov	r7, r2
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cc22:	e5c7      	b.n	800c7b4 <xmp3fixpt_UnpackSideInfo+0x1b8>
		bsi->iCache = 0;
 800cc24:	2700      	movs	r7, #0
 800cc26:	9707      	str	r7, [sp, #28]
		while (nBytes--) {
 800cc28:	2a00      	cmp	r2, #0
 800cc2a:	f000 8550 	beq.w	800d6ce <xmp3fixpt_UnpackSideInfo+0x10d2>
			bsi->iCache |= (*bsi->bytePtr++);
 800cc2e:	f8dd 8018 	ldr.w	r8, [sp, #24]
		while (nBytes--) {
 800cc32:	2a01      	cmp	r2, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800cc34:	f108 0701 	add.w	r7, r8, #1
 800cc38:	9706      	str	r7, [sp, #24]
 800cc3a:	f898 7000 	ldrb.w	r7, [r8]
			bsi->iCache <<= 8;
 800cc3e:	ea4f 2c07 	mov.w	ip, r7, lsl #8
 800cc42:	f8cd c01c 	str.w	ip, [sp, #28]
		while (nBytes--) {
 800cc46:	d015      	beq.n	800cc74 <xmp3fixpt_UnpackSideInfo+0x678>
			bsi->iCache |= (*bsi->bytePtr++);
 800cc48:	f108 0702 	add.w	r7, r8, #2
		while (nBytes--) {
 800cc4c:	2a02      	cmp	r2, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800cc4e:	9706      	str	r7, [sp, #24]
 800cc50:	f898 7001 	ldrb.w	r7, [r8, #1]
 800cc54:	ea47 070c 	orr.w	r7, r7, ip
			bsi->iCache <<= 8;
 800cc58:	ea4f 2c07 	mov.w	ip, r7, lsl #8
 800cc5c:	f8cd c01c 	str.w	ip, [sp, #28]
		while (nBytes--) {
 800cc60:	d008      	beq.n	800cc74 <xmp3fixpt_UnpackSideInfo+0x678>
			bsi->iCache |= (*bsi->bytePtr++);
 800cc62:	f108 0703 	add.w	r7, r8, #3
 800cc66:	9706      	str	r7, [sp, #24]
 800cc68:	f898 7002 	ldrb.w	r7, [r8, #2]
 800cc6c:	ea47 070c 	orr.w	r7, r7, ip
			bsi->iCache <<= 8;
 800cc70:	ea4f 2c07 	mov.w	ip, r7, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800cc74:	f1c2 0703 	rsb	r7, r2, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cc78:	311f      	adds	r1, #31
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800cc7a:	00ff      	lsls	r7, r7, #3
 800cc7c:	fa0c f707 	lsl.w	r7, ip, r7
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cc80:	fa27 f101 	lsr.w	r1, r7, r1
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cc84:	fa07 f303 	lsl.w	r3, r7, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cc88:	4308      	orrs	r0, r1
		bsi->nBytes = 0;
 800cc8a:	eb0e 0ec2 	add.w	lr, lr, r2, lsl #3
 800cc8e:	2200      	movs	r2, #0
 800cc90:	9209      	str	r2, [sp, #36]	; 0x24
 800cc92:	e6a2      	b.n	800c9da <xmp3fixpt_UnpackSideInfo+0x3de>
		bsi->iCache = 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 800cc98:	2900      	cmp	r1, #0
 800cc9a:	f000 8515 	beq.w	800d6c8 <xmp3fixpt_UnpackSideInfo+0x10cc>
			bsi->iCache |= (*bsi->bytePtr++);
 800cc9e:	9b06      	ldr	r3, [sp, #24]
		while (nBytes--) {
 800cca0:	2901      	cmp	r1, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800cca2:	f103 0e01 	add.w	lr, r3, #1
 800cca6:	f8cd e018 	str.w	lr, [sp, #24]
 800ccaa:	f893 e000 	ldrb.w	lr, [r3]
			bsi->iCache <<= 8;
 800ccae:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800ccb2:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800ccb6:	d016      	beq.n	800cce6 <xmp3fixpt_UnpackSideInfo+0x6ea>
			bsi->iCache |= (*bsi->bytePtr++);
 800ccb8:	f103 0802 	add.w	r8, r3, #2
		while (nBytes--) {
 800ccbc:	2902      	cmp	r1, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800ccbe:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccc2:	f893 8001 	ldrb.w	r8, [r3, #1]
 800ccc6:	ea48 0e0e 	orr.w	lr, r8, lr
			bsi->iCache <<= 8;
 800ccca:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800ccce:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800ccd2:	d008      	beq.n	800cce6 <xmp3fixpt_UnpackSideInfo+0x6ea>
			bsi->iCache |= (*bsi->bytePtr++);
 800ccd4:	f103 0803 	add.w	r8, r3, #3
 800ccd8:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccdc:	789b      	ldrb	r3, [r3, #2]
 800ccde:	ea43 0e0e 	orr.w	lr, r3, lr
			bsi->iCache <<= 8;
 800cce2:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cce6:	f107 031f 	add.w	r3, r7, #31
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800ccea:	f1c1 0703 	rsb	r7, r1, #3
 800ccee:	00ff      	lsls	r7, r7, #3
 800ccf0:	fa0e f707 	lsl.w	r7, lr, r7
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800ccf4:	fa27 f303 	lsr.w	r3, r7, r3
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800ccf8:	fa07 f70c 	lsl.w	r7, r7, ip
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800ccfc:	4318      	orrs	r0, r3
		bsi->nBytes = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cd04:	9309      	str	r3, [sp, #36]	; 0x24
 800cd06:	e697      	b.n	800ca38 <xmp3fixpt_UnpackSideInfo+0x43c>
		bsi->iCache = 0;
 800cd08:	9607      	str	r6, [sp, #28]
		while (nBytes--) {
 800cd0a:	f1b9 0f00 	cmp.w	r9, #0
 800cd0e:	f000 84e1 	beq.w	800d6d4 <xmp3fixpt_UnpackSideInfo+0x10d8>
			bsi->iCache |= (*bsi->bytePtr++);
 800cd12:	9b06      	ldr	r3, [sp, #24]
		while (nBytes--) {
 800cd14:	f1b9 0f01 	cmp.w	r9, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800cd18:	f103 0a01 	add.w	sl, r3, #1
 800cd1c:	f8cd a018 	str.w	sl, [sp, #24]
 800cd20:	f893 a000 	ldrb.w	sl, [r3]
			bsi->iCache <<= 8;
 800cd24:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 800cd28:	f8cd a01c 	str.w	sl, [sp, #28]
		while (nBytes--) {
 800cd2c:	d012      	beq.n	800cd54 <xmp3fixpt_UnpackSideInfo+0x758>
			bsi->iCache |= (*bsi->bytePtr++);
 800cd2e:	1c9d      	adds	r5, r3, #2
		while (nBytes--) {
 800cd30:	f1b9 0f02 	cmp.w	r9, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800cd34:	9506      	str	r5, [sp, #24]
 800cd36:	785d      	ldrb	r5, [r3, #1]
 800cd38:	ea45 0a0a 	orr.w	sl, r5, sl
			bsi->iCache <<= 8;
 800cd3c:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 800cd40:	f8cd a01c 	str.w	sl, [sp, #28]
		while (nBytes--) {
 800cd44:	d006      	beq.n	800cd54 <xmp3fixpt_UnpackSideInfo+0x758>
			bsi->iCache |= (*bsi->bytePtr++);
 800cd46:	1cdd      	adds	r5, r3, #3
 800cd48:	9506      	str	r5, [sp, #24]
 800cd4a:	789b      	ldrb	r3, [r3, #2]
 800cd4c:	ea43 030a 	orr.w	r3, r3, sl
			bsi->iCache <<= 8;
 800cd50:	ea4f 2a03 	mov.w	sl, r3, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800cd54:	f1c9 0303 	rsb	r3, r9, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cd58:	321f      	adds	r2, #31
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	fa0a f303 	lsl.w	r3, sl, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cd60:	fa23 f202 	lsr.w	r2, r3, r2
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cd64:	fa03 f308 	lsl.w	r3, r3, r8
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cd68:	4317      	orrs	r7, r2
		bsi->nBytes = 0;
 800cd6a:	eb01 02c9 	add.w	r2, r1, r9, lsl #3
 800cd6e:	9609      	str	r6, [sp, #36]	; 0x24
 800cd70:	e603      	b.n	800c97a <xmp3fixpt_UnpackSideInfo+0x37e>
	int nBytes = bsi->nBytes;
 800cd72:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800cd76:	f1c2 0903 	rsb	r9, r2, #3
	if (nBytes >= 4) {
 800cd7a:	f1be 0f03 	cmp.w	lr, #3
 800cd7e:	f340 81df 	ble.w	800d140 <xmp3fixpt_UnpackSideInfo+0xb44>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cd82:	f8dd c018 	ldr.w	ip, [sp, #24]
 800cd86:	f102 031d 	add.w	r3, r2, #29
		bsi->nBytes -= 4;
 800cd8a:	f1ae 0e04 	sub.w	lr, lr, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cd8e:	46e0      	mov	r8, ip
 800cd90:	f10c 0201 	add.w	r2, ip, #1
 800cd94:	9206      	str	r2, [sp, #24]
 800cd96:	f818 2b02 	ldrb.w	r2, [r8], #2
 800cd9a:	0612      	lsls	r2, r2, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cd9c:	f8cd 8018 	str.w	r8, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cda0:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cda2:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800cda6:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cdaa:	f10c 0803 	add.w	r8, ip, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cdae:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cdb0:	f8cd 8018 	str.w	r8, [sp, #24]
 800cdb4:	f89c 8002 	ldrb.w	r8, [ip, #2]
 800cdb8:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800cdbc:	f10c 0804 	add.w	r8, ip, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cdc0:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800cdc2:	f8cd 8018 	str.w	r8, [sp, #24]
 800cdc6:	f89c c003 	ldrb.w	ip, [ip, #3]
		bsi->nBytes -= 4;
 800cdca:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800cdce:	ea4c 0e02 	orr.w	lr, ip, r2
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cdd2:	fa0e f209 	lsl.w	r2, lr, r9
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cdd6:	fa2e fe03 	lsr.w	lr, lr, r3
 800cdda:	ea41 010e 	orr.w	r1, r1, lr
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cdde:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800cde2:	e4c8      	b.n	800c776 <xmp3fixpt_UnpackSideInfo+0x17a>
	int nBytes = bsi->nBytes;
 800cde4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800cde8:	f1cc 0303 	rsb	r3, ip, #3
	if (nBytes >= 4) {
 800cdec:	f1b8 0f03 	cmp.w	r8, #3
 800cdf0:	f340 81e8 	ble.w	800d1c4 <xmp3fixpt_UnpackSideInfo+0xbc8>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cdf4:	f10c 021d 	add.w	r2, ip, #29
 800cdf8:	f8dd c018 	ldr.w	ip, [sp, #24]
		bsi->nBytes -= 4;
 800cdfc:	f1a8 0804 	sub.w	r8, r8, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ce00:	46e1      	mov	r9, ip
 800ce02:	f10c 0101 	add.w	r1, ip, #1
 800ce06:	9106      	str	r1, [sp, #24]
 800ce08:	f819 1b02 	ldrb.w	r1, [r9], #2
 800ce0c:	0609      	lsls	r1, r1, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ce0e:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ce12:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ce14:	f89c 9001 	ldrb.w	r9, [ip, #1]
 800ce18:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ce1c:	f10c 0903 	add.w	r9, ip, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ce20:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ce22:	f8cd 9018 	str.w	r9, [sp, #24]
 800ce26:	f89c 9002 	ldrb.w	r9, [ip, #2]
 800ce2a:	ea41 2909 	orr.w	r9, r1, r9, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800ce2e:	f10c 0104 	add.w	r1, ip, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ce32:	f8cd 901c 	str.w	r9, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800ce36:	9106      	str	r1, [sp, #24]
 800ce38:	f89c 1003 	ldrb.w	r1, [ip, #3]
		bsi->nBytes -= 4;
 800ce3c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800ce40:	ea41 0109 	orr.w	r1, r1, r9
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800ce44:	fa01 f303 	lsl.w	r3, r1, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800ce48:	40d1      	lsrs	r1, r2
 800ce4a:	ea4e 0e01 	orr.w	lr, lr, r1
 800ce4e:	e488      	b.n	800c762 <xmp3fixpt_UnpackSideInfo+0x166>
	int nBytes = bsi->nBytes;
 800ce50:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800ce54:	f1c1 0303 	rsb	r3, r1, #3
	if (nBytes >= 4) {
 800ce58:	f1b8 0f03 	cmp.w	r8, #3
 800ce5c:	f340 81f2 	ble.w	800d244 <xmp3fixpt_UnpackSideInfo+0xc48>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ce60:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800ce64:	f101 0c1d 	add.w	ip, r1, #29
		bsi->nBytes -= 4;
 800ce68:	f1a8 0804 	sub.w	r8, r8, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ce6c:	46ce      	mov	lr, r9
 800ce6e:	f109 0101 	add.w	r1, r9, #1
 800ce72:	9106      	str	r1, [sp, #24]
 800ce74:	f81e 1b02 	ldrb.w	r1, [lr], #2
 800ce78:	0609      	lsls	r1, r1, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ce7a:	f8cd e018 	str.w	lr, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ce7e:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ce80:	f899 e001 	ldrb.w	lr, [r9, #1]
 800ce84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ce88:	f109 0e03 	add.w	lr, r9, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ce8c:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ce8e:	f8cd e018 	str.w	lr, [sp, #24]
 800ce92:	f899 e002 	ldrb.w	lr, [r9, #2]
 800ce96:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800ce9a:	f109 0e04 	add.w	lr, r9, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800ce9e:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800cea0:	f8cd e018 	str.w	lr, [sp, #24]
 800cea4:	f899 e003 	ldrb.w	lr, [r9, #3]
		bsi->nBytes -= 4;
 800cea8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800ceac:	ea4e 0e01 	orr.w	lr, lr, r1
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800ceb0:	fa0e f303 	lsl.w	r3, lr, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800ceb4:	fa2e fe0c 	lsr.w	lr, lr, ip
 800ceb8:	ea42 020e 	orr.w	r2, r2, lr
 800cebc:	e446      	b.n	800c74c <xmp3fixpt_UnpackSideInfo+0x150>
	int nBytes = bsi->nBytes;
 800cebe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800cec2:	f1c2 0305 	rsb	r3, r2, #5
	if (nBytes >= 4) {
 800cec6:	f1bc 0f03 	cmp.w	ip, #3
 800ceca:	f340 81fc 	ble.w	800d2c6 <xmp3fixpt_UnpackSideInfo+0xcca>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cece:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ced2:	f102 011b 	add.w	r1, r2, #27
		bsi->nBytes -= 4;
 800ced6:	f1ac 0c04 	sub.w	ip, ip, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ceda:	46c1      	mov	r9, r8
 800cedc:	f108 0201 	add.w	r2, r8, #1
 800cee0:	9206      	str	r2, [sp, #24]
 800cee2:	f819 2b02 	ldrb.w	r2, [r9], #2
 800cee6:	0612      	lsls	r2, r2, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cee8:	f8cd 9018 	str.w	r9, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800ceec:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800ceee:	f898 9001 	ldrb.w	r9, [r8, #1]
 800cef2:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cef6:	f108 0903 	add.w	r9, r8, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cefa:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cefc:	f8cd 9018 	str.w	r9, [sp, #24]
 800cf00:	f898 9002 	ldrb.w	r9, [r8, #2]
 800cf04:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800cf08:	f108 0204 	add.w	r2, r8, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cf0c:	f8cd 901c 	str.w	r9, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800cf10:	9206      	str	r2, [sp, #24]
 800cf12:	f898 2003 	ldrb.w	r2, [r8, #3]
		bsi->nBytes -= 4;
 800cf16:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800cf1a:	ea42 0c09 	orr.w	ip, r2, r9
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cf1e:	fa0c f303 	lsl.w	r3, ip, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cf22:	fa2c fc01 	lsr.w	ip, ip, r1
 800cf26:	ea4e 0e0c 	orr.w	lr, lr, ip
 800cf2a:	f7ff bbff 	b.w	800c72c <xmp3fixpt_UnpackSideInfo+0x130>
	int nBytes = bsi->nBytes;
 800cf2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800cf30:	f1c2 0303 	rsb	r3, r2, #3
	if (nBytes >= 4) {
 800cf34:	2f03      	cmp	r7, #3
 800cf36:	f340 8249 	ble.w	800d3cc <xmp3fixpt_UnpackSideInfo+0xdd0>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cf3a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800cf3e:	321d      	adds	r2, #29
		bsi->nBytes -= 4;
 800cf40:	3f04      	subs	r7, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cf42:	46e6      	mov	lr, ip
 800cf44:	f10c 0101 	add.w	r1, ip, #1
 800cf48:	9106      	str	r1, [sp, #24]
 800cf4a:	f81e 1b02 	ldrb.w	r1, [lr], #2
 800cf4e:	0609      	lsls	r1, r1, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cf50:	f8cd e018 	str.w	lr, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cf54:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cf56:	f89c e001 	ldrb.w	lr, [ip, #1]
 800cf5a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cf5e:	f10c 0e03 	add.w	lr, ip, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cf62:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cf64:	f8cd e018 	str.w	lr, [sp, #24]
 800cf68:	f89c e002 	ldrb.w	lr, [ip, #2]
 800cf6c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800cf70:	f10c 0e04 	add.w	lr, ip, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cf74:	9107      	str	r1, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800cf76:	f8cd e018 	str.w	lr, [sp, #24]
 800cf7a:	f89c c003 	ldrb.w	ip, [ip, #3]
		bsi->nBytes -= 4;
 800cf7e:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800cf80:	ea4c 0101 	orr.w	r1, ip, r1
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cf84:	fa01 f303 	lsl.w	r3, r1, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cf88:	40d1      	lsrs	r1, r2
 800cf8a:	4308      	orrs	r0, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800cf8c:	0fd9      	lsrs	r1, r3, #31
	bsi->iCache <<= nBits;					/* left-justify cache */
 800cf8e:	005b      	lsls	r3, r3, #1
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800cf90:	4694      	mov	ip, r2
 800cf92:	9208      	str	r2, [sp, #32]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cf94:	e4ab      	b.n	800c8ee <xmp3fixpt_UnpackSideInfo+0x2f2>
	int nBytes = bsi->nBytes;
 800cf96:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800cf9a:	f1c7 0305 	rsb	r3, r7, #5
	if (nBytes >= 4) {
 800cf9e:	f1bc 0f03 	cmp.w	ip, #3
 800cfa2:	f340 81d5 	ble.w	800d350 <xmp3fixpt_UnpackSideInfo+0xd54>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cfa6:	f107 021b 	add.w	r2, r7, #27
 800cfaa:	9f06      	ldr	r7, [sp, #24]
		bsi->nBytes -= 4;
 800cfac:	f1ac 0c04 	sub.w	ip, ip, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cfb0:	46be      	mov	lr, r7
 800cfb2:	1c78      	adds	r0, r7, #1
 800cfb4:	9006      	str	r0, [sp, #24]
 800cfb6:	f81e 0b02 	ldrb.w	r0, [lr], #2
 800cfba:	0600      	lsls	r0, r0, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cfbc:	f8cd e018 	str.w	lr, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800cfc0:	9007      	str	r0, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cfc2:	f897 e001 	ldrb.w	lr, [r7, #1]
 800cfc6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cfca:	f107 0e03 	add.w	lr, r7, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800cfce:	9007      	str	r0, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cfd0:	f8cd e018 	str.w	lr, [sp, #24]
 800cfd4:	f897 e002 	ldrb.w	lr, [r7, #2]
 800cfd8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800cfdc:	f107 0e04 	add.w	lr, r7, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800cfe0:	9007      	str	r0, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800cfe2:	f8cd e018 	str.w	lr, [sp, #24]
 800cfe6:	78ff      	ldrb	r7, [r7, #3]
		bsi->nBytes -= 4;
 800cfe8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800cfec:	4338      	orrs	r0, r7
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800cfee:	fa00 f303 	lsl.w	r3, r0, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800cff2:	40d0      	lsrs	r0, r2
 800cff4:	4301      	orrs	r1, r0
 800cff6:	e459      	b.n	800c8ac <xmp3fixpt_UnpackSideInfo+0x2b0>
	int nBytes = bsi->nBytes;
 800cff8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800cffc:	f1c2 0105 	rsb	r1, r2, #5
	if (nBytes >= 4) {
 800d000:	f1bc 0f03 	cmp.w	ip, #3
 800d004:	f340 821c 	ble.w	800d440 <xmp3fixpt_UnpackSideInfo+0xe44>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d008:	9f06      	ldr	r7, [sp, #24]
 800d00a:	f102 031b 	add.w	r3, r2, #27
		bsi->nBytes -= 4;
 800d00e:	f1ac 0c04 	sub.w	ip, ip, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d012:	46be      	mov	lr, r7
 800d014:	1c7a      	adds	r2, r7, #1
 800d016:	9206      	str	r2, [sp, #24]
 800d018:	f81e 2b02 	ldrb.w	r2, [lr], #2
 800d01c:	0612      	lsls	r2, r2, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d01e:	f8cd e018 	str.w	lr, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d022:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d024:	f897 e001 	ldrb.w	lr, [r7, #1]
 800d028:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d02c:	f107 0e03 	add.w	lr, r7, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d030:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d032:	f8cd e018 	str.w	lr, [sp, #24]
 800d036:	f897 e002 	ldrb.w	lr, [r7, #2]
 800d03a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800d03e:	f107 0e04 	add.w	lr, r7, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d042:	9207      	str	r2, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800d044:	f8cd e018 	str.w	lr, [sp, #24]
 800d048:	78ff      	ldrb	r7, [r7, #3]
		bsi->nBytes -= 4;
 800d04a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800d04e:	433a      	orrs	r2, r7
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d050:	fa02 f101 	lsl.w	r1, r2, r1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d054:	40da      	lsrs	r2, r3
 800d056:	4310      	orrs	r0, r2
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d058:	e9cd 1307 	strd	r1, r3, [sp, #28]
 800d05c:	e432      	b.n	800c8c4 <xmp3fixpt_UnpackSideInfo+0x2c8>
	int nBytes = bsi->nBytes;
 800d05e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800d062:	f1ce 0205 	rsb	r2, lr, #5
	if (nBytes >= 4) {
 800d066:	f1b8 0f03 	cmp.w	r8, #3
 800d06a:	f340 82aa 	ble.w	800d5c2 <xmp3fixpt_UnpackSideInfo+0xfc6>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d06e:	9906      	ldr	r1, [sp, #24]
 800d070:	f10e 071b 	add.w	r7, lr, #27
		bsi->nBytes -= 4;
 800d074:	f1a8 0004 	sub.w	r0, r8, #4
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d078:	468e      	mov	lr, r1
 800d07a:	1c4b      	adds	r3, r1, #1
 800d07c:	9306      	str	r3, [sp, #24]
 800d07e:	f81e 3b02 	ldrb.w	r3, [lr], #2
 800d082:	061b      	lsls	r3, r3, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d084:	f8cd e018 	str.w	lr, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d088:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d08a:	f891 e001 	ldrb.w	lr, [r1, #1]
 800d08e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d092:	f101 0e03 	add.w	lr, r1, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d096:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d098:	f8cd e018 	str.w	lr, [sp, #24]
 800d09c:	f891 e002 	ldrb.w	lr, [r1, #2]
 800d0a0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800d0a4:	f101 0e04 	add.w	lr, r1, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d0a8:	9307      	str	r3, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800d0aa:	f8cd e018 	str.w	lr, [sp, #24]
 800d0ae:	78c9      	ldrb	r1, [r1, #3]
		bsi->nBytes -= 4;
 800d0b0:	9009      	str	r0, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800d0b2:	4319      	orrs	r1, r3
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d0b4:	fa01 f302 	lsl.w	r3, r1, r2
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d0b8:	40f9      	lsrs	r1, r7
 800d0ba:	ea4c 0c01 	orr.w	ip, ip, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d0be:	0ed9      	lsrs	r1, r3, #27
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d0c0:	015b      	lsls	r3, r3, #5
 800d0c2:	f7ff bbeb 	b.w	800c89c <xmp3fixpt_UnpackSideInfo+0x2a0>
	int nBytes = bsi->nBytes;
 800d0c6:	9809      	ldr	r0, [sp, #36]	; 0x24
		lowBits = -bsi->cachedBits;
 800d0c8:	f1cc 0701 	rsb	r7, ip, #1
	if (nBytes >= 4) {
 800d0cc:	2803      	cmp	r0, #3
 800d0ce:	f300 82ab 	bgt.w	800d628 <xmp3fixpt_UnpackSideInfo+0x102c>
		bsi->iCache = 0;
 800d0d2:	9207      	str	r2, [sp, #28]
		while (nBytes--) {
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	f000 8300 	beq.w	800d6da <xmp3fixpt_UnpackSideInfo+0x10de>
			bsi->iCache |= (*bsi->bytePtr++);
 800d0da:	9a06      	ldr	r2, [sp, #24]
		while (nBytes--) {
 800d0dc:	2801      	cmp	r0, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d0de:	f102 0301 	add.w	r3, r2, #1
 800d0e2:	9306      	str	r3, [sp, #24]
 800d0e4:	7813      	ldrb	r3, [r2, #0]
			bsi->iCache <<= 8;
 800d0e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d0ea:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 800d0ec:	d013      	beq.n	800d116 <xmp3fixpt_UnpackSideInfo+0xb1a>
			bsi->iCache |= (*bsi->bytePtr++);
 800d0ee:	f102 0802 	add.w	r8, r2, #2
		while (nBytes--) {
 800d0f2:	2802      	cmp	r0, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d0f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d0f8:	f892 8001 	ldrb.w	r8, [r2, #1]
 800d0fc:	ea48 0303 	orr.w	r3, r8, r3
			bsi->iCache <<= 8;
 800d100:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d104:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 800d106:	d006      	beq.n	800d116 <xmp3fixpt_UnpackSideInfo+0xb1a>
			bsi->iCache |= (*bsi->bytePtr++);
 800d108:	f102 0803 	add.w	r8, r2, #3
 800d10c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d110:	7892      	ldrb	r2, [r2, #2]
 800d112:	4313      	orrs	r3, r2
			bsi->iCache <<= 8;
 800d114:	021b      	lsls	r3, r3, #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d116:	f1c0 0803 	rsb	r8, r0, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d11a:	f10c 021f 	add.w	r2, ip, #31
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d11e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800d122:	fa03 f308 	lsl.w	r3, r3, r8
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d126:	fa03 f707 	lsl.w	r7, r3, r7
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d12a:	fa23 f202 	lsr.w	r2, r3, r2
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d12e:	007b      	lsls	r3, r7, #1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d130:	430a      	orrs	r2, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d132:	0ff9      	lsrs	r1, r7, #31
		bsi->nBytes = 0;
 800d134:	eb0e 0cc0 	add.w	ip, lr, r0, lsl #3
 800d138:	2000      	movs	r0, #0
 800d13a:	9009      	str	r0, [sp, #36]	; 0x24
	return data;
 800d13c:	f7ff bb30 	b.w	800c7a0 <xmp3fixpt_UnpackSideInfo+0x1a4>
		bsi->iCache = 0;
 800d140:	f04f 0c00 	mov.w	ip, #0
 800d144:	f8cd c01c 	str.w	ip, [sp, #28]
		while (nBytes--) {
 800d148:	f1be 0f00 	cmp.w	lr, #0
 800d14c:	f000 8297 	beq.w	800d67e <xmp3fixpt_UnpackSideInfo+0x1082>
			bsi->iCache |= (*bsi->bytePtr++);
 800d150:	f8dd 8018 	ldr.w	r8, [sp, #24]
		while (nBytes--) {
 800d154:	f1be 0f01 	cmp.w	lr, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d158:	f108 0c01 	add.w	ip, r8, #1
 800d15c:	f8cd c018 	str.w	ip, [sp, #24]
 800d160:	f898 c000 	ldrb.w	ip, [r8]
			bsi->iCache <<= 8;
 800d164:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800d168:	f8cd c01c 	str.w	ip, [sp, #28]
		while (nBytes--) {
 800d16c:	d016      	beq.n	800d19c <xmp3fixpt_UnpackSideInfo+0xba0>
			bsi->iCache |= (*bsi->bytePtr++);
 800d16e:	f108 0702 	add.w	r7, r8, #2
		while (nBytes--) {
 800d172:	f1be 0f02 	cmp.w	lr, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d176:	9706      	str	r7, [sp, #24]
 800d178:	f898 7001 	ldrb.w	r7, [r8, #1]
 800d17c:	ea47 0c0c 	orr.w	ip, r7, ip
			bsi->iCache <<= 8;
 800d180:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800d184:	f8cd c01c 	str.w	ip, [sp, #28]
		while (nBytes--) {
 800d188:	d008      	beq.n	800d19c <xmp3fixpt_UnpackSideInfo+0xba0>
			bsi->iCache |= (*bsi->bytePtr++);
 800d18a:	f108 0703 	add.w	r7, r8, #3
 800d18e:	9706      	str	r7, [sp, #24]
 800d190:	f898 8002 	ldrb.w	r8, [r8, #2]
 800d194:	ea48 0c0c 	orr.w	ip, r8, ip
			bsi->iCache <<= 8;
 800d198:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d19c:	f1ce 0803 	rsb	r8, lr, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d1a0:	321d      	adds	r2, #29
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d1a2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800d1a6:	fa0c fc08 	lsl.w	ip, ip, r8
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d1aa:	fa2c f802 	lsr.w	r8, ip, r2
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d1ae:	fa0c f209 	lsl.w	r2, ip, r9
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d1b2:	ea41 0108 	orr.w	r1, r1, r8
		bsi->nBytes = 0;
 800d1b6:	f04f 0c00 	mov.w	ip, #0
 800d1ba:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 800d1be:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d1c2:	e60c      	b.n	800cdde <xmp3fixpt_UnpackSideInfo+0x7e2>
		bsi->iCache = 0;
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	9107      	str	r1, [sp, #28]
		while (nBytes--) {
 800d1c8:	f1b8 0f00 	cmp.w	r8, #0
 800d1cc:	f000 826a 	beq.w	800d6a4 <xmp3fixpt_UnpackSideInfo+0x10a8>
			bsi->iCache |= (*bsi->bytePtr++);
 800d1d0:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 800d1d4:	f1b8 0f01 	cmp.w	r8, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d1d8:	f109 0101 	add.w	r1, r9, #1
 800d1dc:	9106      	str	r1, [sp, #24]
 800d1de:	f899 1000 	ldrb.w	r1, [r9]
			bsi->iCache <<= 8;
 800d1e2:	ea4f 2101 	mov.w	r1, r1, lsl #8
 800d1e6:	9107      	str	r1, [sp, #28]
		while (nBytes--) {
 800d1e8:	d014      	beq.n	800d214 <xmp3fixpt_UnpackSideInfo+0xc18>
			bsi->iCache |= (*bsi->bytePtr++);
 800d1ea:	f109 0702 	add.w	r7, r9, #2
		while (nBytes--) {
 800d1ee:	f1b8 0f02 	cmp.w	r8, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d1f2:	9706      	str	r7, [sp, #24]
 800d1f4:	f899 7001 	ldrb.w	r7, [r9, #1]
 800d1f8:	ea41 0107 	orr.w	r1, r1, r7
			bsi->iCache <<= 8;
 800d1fc:	ea4f 2101 	mov.w	r1, r1, lsl #8
 800d200:	9107      	str	r1, [sp, #28]
		while (nBytes--) {
 800d202:	d007      	beq.n	800d214 <xmp3fixpt_UnpackSideInfo+0xc18>
			bsi->iCache |= (*bsi->bytePtr++);
 800d204:	f109 0703 	add.w	r7, r9, #3
 800d208:	9706      	str	r7, [sp, #24]
 800d20a:	f899 9002 	ldrb.w	r9, [r9, #2]
 800d20e:	ea49 0101 	orr.w	r1, r9, r1
			bsi->iCache <<= 8;
 800d212:	0209      	lsls	r1, r1, #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d214:	f1c8 0903 	rsb	r9, r8, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d218:	f10c 0c1d 	add.w	ip, ip, #29
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d21c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800d220:	fa01 f109 	lsl.w	r1, r1, r9
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d224:	fa01 f303 	lsl.w	r3, r1, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d228:	fa21 f10c 	lsr.w	r1, r1, ip
 800d22c:	ea4e 0e01 	orr.w	lr, lr, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d230:	0f59      	lsrs	r1, r3, #29
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d232:	00db      	lsls	r3, r3, #3
		bsi->nBytes = 0;
 800d234:	f04f 0c00 	mov.w	ip, #0
 800d238:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800d23c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d240:	f7ff ba91 	b.w	800c766 <xmp3fixpt_UnpackSideInfo+0x16a>
		bsi->iCache = 0;
 800d244:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d248:	f1b8 0f00 	cmp.w	r8, #0
 800d24c:	f000 8227 	beq.w	800d69e <xmp3fixpt_UnpackSideInfo+0x10a2>
			bsi->iCache |= (*bsi->bytePtr++);
 800d250:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 800d254:	f1b8 0f01 	cmp.w	r8, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d258:	f109 0e01 	add.w	lr, r9, #1
 800d25c:	f8cd e018 	str.w	lr, [sp, #24]
 800d260:	f899 e000 	ldrb.w	lr, [r9]
			bsi->iCache <<= 8;
 800d264:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800d268:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d26c:	d016      	beq.n	800d29c <xmp3fixpt_UnpackSideInfo+0xca0>
			bsi->iCache |= (*bsi->bytePtr++);
 800d26e:	f109 0702 	add.w	r7, r9, #2
		while (nBytes--) {
 800d272:	f1b8 0f02 	cmp.w	r8, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d276:	9706      	str	r7, [sp, #24]
 800d278:	f899 7001 	ldrb.w	r7, [r9, #1]
 800d27c:	ea47 0e0e 	orr.w	lr, r7, lr
			bsi->iCache <<= 8;
 800d280:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800d284:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d288:	d008      	beq.n	800d29c <xmp3fixpt_UnpackSideInfo+0xca0>
			bsi->iCache |= (*bsi->bytePtr++);
 800d28a:	f109 0703 	add.w	r7, r9, #3
 800d28e:	9706      	str	r7, [sp, #24]
 800d290:	f899 9002 	ldrb.w	r9, [r9, #2]
 800d294:	ea49 0e0e 	orr.w	lr, r9, lr
			bsi->iCache <<= 8;
 800d298:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d29c:	f1c8 0903 	rsb	r9, r8, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d2a0:	311d      	adds	r1, #29
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d2a2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800d2a6:	fa0e fe09 	lsl.w	lr, lr, r9
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d2aa:	fa0e f303 	lsl.w	r3, lr, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d2ae:	fa2e f101 	lsr.w	r1, lr, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d2b2:	ea4f 7e53 	mov.w	lr, r3, lsr #29
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d2b6:	430a      	orrs	r2, r1
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d2b8:	00db      	lsls	r3, r3, #3
		bsi->nBytes = 0;
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800d2c0:	9109      	str	r1, [sp, #36]	; 0x24
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d2c2:	f7ff ba46 	b.w	800c752 <xmp3fixpt_UnpackSideInfo+0x156>
		bsi->iCache = 0;
 800d2c6:	f04f 0800 	mov.w	r8, #0
 800d2ca:	f8cd 801c 	str.w	r8, [sp, #28]
		while (nBytes--) {
 800d2ce:	f1bc 0f00 	cmp.w	ip, #0
 800d2d2:	f000 81ed 	beq.w	800d6b0 <xmp3fixpt_UnpackSideInfo+0x10b4>
			bsi->iCache |= (*bsi->bytePtr++);
 800d2d6:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 800d2da:	f1bc 0f01 	cmp.w	ip, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d2de:	f109 0801 	add.w	r8, r9, #1
 800d2e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2e6:	f899 8000 	ldrb.w	r8, [r9]
			bsi->iCache <<= 8;
 800d2ea:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800d2ee:	f8cd 801c 	str.w	r8, [sp, #28]
		while (nBytes--) {
 800d2f2:	d016      	beq.n	800d322 <xmp3fixpt_UnpackSideInfo+0xd26>
			bsi->iCache |= (*bsi->bytePtr++);
 800d2f4:	f109 0702 	add.w	r7, r9, #2
		while (nBytes--) {
 800d2f8:	f1bc 0f02 	cmp.w	ip, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d2fc:	9706      	str	r7, [sp, #24]
 800d2fe:	f899 7001 	ldrb.w	r7, [r9, #1]
 800d302:	ea47 0808 	orr.w	r8, r7, r8
			bsi->iCache <<= 8;
 800d306:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800d30a:	f8cd 801c 	str.w	r8, [sp, #28]
		while (nBytes--) {
 800d30e:	d008      	beq.n	800d322 <xmp3fixpt_UnpackSideInfo+0xd26>
			bsi->iCache |= (*bsi->bytePtr++);
 800d310:	f109 0703 	add.w	r7, r9, #3
 800d314:	9706      	str	r7, [sp, #24]
 800d316:	f899 9002 	ldrb.w	r9, [r9, #2]
 800d31a:	ea49 0808 	orr.w	r8, r9, r8
			bsi->iCache <<= 8;
 800d31e:	ea4f 2808 	mov.w	r8, r8, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d322:	f1cc 0903 	rsb	r9, ip, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d326:	321b      	adds	r2, #27
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d328:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800d32c:	fa08 f809 	lsl.w	r8, r8, r9
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d330:	fa08 f303 	lsl.w	r3, r8, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d334:	fa28 f202 	lsr.w	r2, r8, r2
 800d338:	ea4e 0e02 	orr.w	lr, lr, r2
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d33c:	0f5a      	lsrs	r2, r3, #29
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d33e:	00db      	lsls	r3, r3, #3
		bsi->nBytes = 0;
 800d340:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 800d344:	f04f 0c00 	mov.w	ip, #0
 800d348:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d34c:	f7ff b9f0 	b.w	800c730 <xmp3fixpt_UnpackSideInfo+0x134>
		bsi->iCache = 0;
 800d350:	2000      	movs	r0, #0
 800d352:	9007      	str	r0, [sp, #28]
		while (nBytes--) {
 800d354:	f1bc 0f00 	cmp.w	ip, #0
 800d358:	f000 81a7 	beq.w	800d6aa <xmp3fixpt_UnpackSideInfo+0x10ae>
			bsi->iCache |= (*bsi->bytePtr++);
 800d35c:	9806      	ldr	r0, [sp, #24]
		while (nBytes--) {
 800d35e:	f1bc 0f01 	cmp.w	ip, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d362:	f100 0e01 	add.w	lr, r0, #1
 800d366:	f8cd e018 	str.w	lr, [sp, #24]
 800d36a:	f890 e000 	ldrb.w	lr, [r0]
			bsi->iCache <<= 8;
 800d36e:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800d372:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d376:	d017      	beq.n	800d3a8 <xmp3fixpt_UnpackSideInfo+0xdac>
			bsi->iCache |= (*bsi->bytePtr++);
 800d378:	f100 0802 	add.w	r8, r0, #2
		while (nBytes--) {
 800d37c:	f1bc 0f02 	cmp.w	ip, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d380:	f8cd 8018 	str.w	r8, [sp, #24]
 800d384:	f890 8001 	ldrb.w	r8, [r0, #1]
 800d388:	ea48 0e0e 	orr.w	lr, r8, lr
			bsi->iCache <<= 8;
 800d38c:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800d390:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d394:	d008      	beq.n	800d3a8 <xmp3fixpt_UnpackSideInfo+0xdac>
			bsi->iCache |= (*bsi->bytePtr++);
 800d396:	f100 0803 	add.w	r8, r0, #3
 800d39a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d39e:	7880      	ldrb	r0, [r0, #2]
 800d3a0:	ea40 000e 	orr.w	r0, r0, lr
			bsi->iCache <<= 8;
 800d3a4:	ea4f 2e00 	mov.w	lr, r0, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d3a8:	f1cc 0003 	rsb	r0, ip, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d3ac:	371b      	adds	r7, #27
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d3ae:	00c0      	lsls	r0, r0, #3
 800d3b0:	fa0e f000 	lsl.w	r0, lr, r0
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d3b4:	fa00 f303 	lsl.w	r3, r0, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d3b8:	40f8      	lsrs	r0, r7
 800d3ba:	4301      	orrs	r1, r0
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d3bc:	0ed8      	lsrs	r0, r3, #27
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d3be:	015b      	lsls	r3, r3, #5
		bsi->nBytes = 0;
 800d3c0:	2700      	movs	r7, #0
 800d3c2:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800d3c6:	9709      	str	r7, [sp, #36]	; 0x24
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d3c8:	f7ff ba72 	b.w	800c8b0 <xmp3fixpt_UnpackSideInfo+0x2b4>
		bsi->iCache = 0;
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	9107      	str	r1, [sp, #28]
		while (nBytes--) {
 800d3d0:	2f00      	cmp	r7, #0
 800d3d2:	f000 815b 	beq.w	800d68c <xmp3fixpt_UnpackSideInfo+0x1090>
			bsi->iCache |= (*bsi->bytePtr++);
 800d3d6:	9906      	ldr	r1, [sp, #24]
		while (nBytes--) {
 800d3d8:	2f01      	cmp	r7, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d3da:	f101 0e01 	add.w	lr, r1, #1
 800d3de:	f8cd e018 	str.w	lr, [sp, #24]
 800d3e2:	f891 e000 	ldrb.w	lr, [r1]
			bsi->iCache <<= 8;
 800d3e6:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800d3ea:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d3ee:	d016      	beq.n	800d41e <xmp3fixpt_UnpackSideInfo+0xe22>
			bsi->iCache |= (*bsi->bytePtr++);
 800d3f0:	f101 0802 	add.w	r8, r1, #2
		while (nBytes--) {
 800d3f4:	2f02      	cmp	r7, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d3f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d3fa:	f891 8001 	ldrb.w	r8, [r1, #1]
 800d3fe:	ea48 0e0e 	orr.w	lr, r8, lr
			bsi->iCache <<= 8;
 800d402:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800d406:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d40a:	d008      	beq.n	800d41e <xmp3fixpt_UnpackSideInfo+0xe22>
			bsi->iCache |= (*bsi->bytePtr++);
 800d40c:	f101 0803 	add.w	r8, r1, #3
 800d410:	f8cd 8018 	str.w	r8, [sp, #24]
 800d414:	7889      	ldrb	r1, [r1, #2]
 800d416:	ea41 010e 	orr.w	r1, r1, lr
			bsi->iCache <<= 8;
 800d41a:	ea4f 2e01 	mov.w	lr, r1, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d41e:	f1c7 0103 	rsb	r1, r7, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d422:	321d      	adds	r2, #29
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d424:	00c9      	lsls	r1, r1, #3
 800d426:	fa0e f101 	lsl.w	r1, lr, r1
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d42a:	fa01 f303 	lsl.w	r3, r1, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d42e:	40d1      	lsrs	r1, r2
 800d430:	4308      	orrs	r0, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d432:	0fd9      	lsrs	r1, r3, #31
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d434:	005b      	lsls	r3, r3, #1
		bsi->nBytes = 0;
 800d436:	eb0c 02c7 	add.w	r2, ip, r7, lsl #3
 800d43a:	2700      	movs	r7, #0
 800d43c:	9709      	str	r7, [sp, #36]	; 0x24
 800d43e:	e5a7      	b.n	800cf90 <xmp3fixpt_UnpackSideInfo+0x994>
		bsi->iCache = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	9307      	str	r3, [sp, #28]
		while (nBytes--) {
 800d444:	f1bc 0f00 	cmp.w	ip, #0
 800d448:	f000 811e 	beq.w	800d688 <xmp3fixpt_UnpackSideInfo+0x108c>
			bsi->iCache |= (*bsi->bytePtr++);
 800d44c:	9b06      	ldr	r3, [sp, #24]
		while (nBytes--) {
 800d44e:	f1bc 0f01 	cmp.w	ip, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d452:	f103 0701 	add.w	r7, r3, #1
 800d456:	9706      	str	r7, [sp, #24]
 800d458:	781f      	ldrb	r7, [r3, #0]
			bsi->iCache <<= 8;
 800d45a:	ea4f 2707 	mov.w	r7, r7, lsl #8
 800d45e:	9707      	str	r7, [sp, #28]
		while (nBytes--) {
 800d460:	d014      	beq.n	800d48c <xmp3fixpt_UnpackSideInfo+0xe90>
			bsi->iCache |= (*bsi->bytePtr++);
 800d462:	f103 0802 	add.w	r8, r3, #2
		while (nBytes--) {
 800d466:	f1bc 0f02 	cmp.w	ip, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d46a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d46e:	f893 8001 	ldrb.w	r8, [r3, #1]
 800d472:	ea48 0707 	orr.w	r7, r8, r7
			bsi->iCache <<= 8;
 800d476:	ea4f 2707 	mov.w	r7, r7, lsl #8
 800d47a:	9707      	str	r7, [sp, #28]
		while (nBytes--) {
 800d47c:	d006      	beq.n	800d48c <xmp3fixpt_UnpackSideInfo+0xe90>
			bsi->iCache |= (*bsi->bytePtr++);
 800d47e:	f103 0803 	add.w	r8, r3, #3
 800d482:	f8cd 8018 	str.w	r8, [sp, #24]
 800d486:	789b      	ldrb	r3, [r3, #2]
 800d488:	431f      	orrs	r7, r3
			bsi->iCache <<= 8;
 800d48a:	023f      	lsls	r7, r7, #8
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d48c:	f102 031b 	add.w	r3, r2, #27
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d490:	f1cc 0203 	rsb	r2, ip, #3
 800d494:	00d2      	lsls	r2, r2, #3
 800d496:	4097      	lsls	r7, r2
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d498:	fa27 f303 	lsr.w	r3, r7, r3
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d49c:	fa07 f101 	lsl.w	r1, r7, r1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d4a0:	4318      	orrs	r0, r3
		bsi->nBytes = 0;
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	eb0e 03cc 	add.w	r3, lr, ip, lsl #3
 800d4a8:	9209      	str	r2, [sp, #36]	; 0x24
 800d4aa:	e5d5      	b.n	800d058 <xmp3fixpt_UnpackSideInfo+0xa5c>
		bsi->iCache = 0;
 800d4ac:	f04f 0e00 	mov.w	lr, #0
 800d4b0:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d4b4:	f1b8 0f00 	cmp.w	r8, #0
 800d4b8:	f000 80ee 	beq.w	800d698 <xmp3fixpt_UnpackSideInfo+0x109c>
			bsi->iCache |= (*bsi->bytePtr++);
 800d4bc:	f8dd 9018 	ldr.w	r9, [sp, #24]
		while (nBytes--) {
 800d4c0:	f1b8 0f01 	cmp.w	r8, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d4c4:	f109 0e01 	add.w	lr, r9, #1
 800d4c8:	f8cd e018 	str.w	lr, [sp, #24]
 800d4cc:	f899 e000 	ldrb.w	lr, [r9]
			bsi->iCache <<= 8;
 800d4d0:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800d4d4:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d4d8:	d016      	beq.n	800d508 <xmp3fixpt_UnpackSideInfo+0xf0c>
			bsi->iCache |= (*bsi->bytePtr++);
 800d4da:	f109 0702 	add.w	r7, r9, #2
		while (nBytes--) {
 800d4de:	f1b8 0f02 	cmp.w	r8, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d4e2:	9706      	str	r7, [sp, #24]
 800d4e4:	f899 7001 	ldrb.w	r7, [r9, #1]
 800d4e8:	ea47 0e0e 	orr.w	lr, r7, lr
			bsi->iCache <<= 8;
 800d4ec:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800d4f0:	f8cd e01c 	str.w	lr, [sp, #28]
		while (nBytes--) {
 800d4f4:	d008      	beq.n	800d508 <xmp3fixpt_UnpackSideInfo+0xf0c>
			bsi->iCache |= (*bsi->bytePtr++);
 800d4f6:	f109 0703 	add.w	r7, r9, #3
 800d4fa:	9706      	str	r7, [sp, #24]
 800d4fc:	f899 9002 	ldrb.w	r9, [r9, #2]
 800d500:	ea49 0e0e 	orr.w	lr, r9, lr
			bsi->iCache <<= 8;
 800d504:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d508:	f1c8 0903 	rsb	r9, r8, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d50c:	311b      	adds	r1, #27
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d50e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800d512:	fa0e fe09 	lsl.w	lr, lr, r9
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d516:	fa0e f303 	lsl.w	r3, lr, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d51a:	fa2e f101 	lsr.w	r1, lr, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d51e:	ea4f 6ed3 	mov.w	lr, r3, lsr #27
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d522:	ea4c 0c01 	orr.w	ip, ip, r1
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d526:	015b      	lsls	r3, r3, #5
		bsi->nBytes = 0;
 800d528:	2100      	movs	r1, #0
 800d52a:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800d52e:	9109      	str	r1, [sp, #36]	; 0x24
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d530:	f7ff b8f4 	b.w	800c71c <xmp3fixpt_UnpackSideInfo+0x120>
		bsi->iCache = 0;
 800d534:	f04f 0c00 	mov.w	ip, #0
 800d538:	f8cd c01c 	str.w	ip, [sp, #28]
		while (nBytes--) {
 800d53c:	2a00      	cmp	r2, #0
 800d53e:	f000 80a8 	beq.w	800d692 <xmp3fixpt_UnpackSideInfo+0x1096>
			bsi->iCache |= (*bsi->bytePtr++);
 800d542:	f8dd 8018 	ldr.w	r8, [sp, #24]
		while (nBytes--) {
 800d546:	2a01      	cmp	r2, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d548:	f108 0c01 	add.w	ip, r8, #1
 800d54c:	f8cd c018 	str.w	ip, [sp, #24]
 800d550:	f898 c000 	ldrb.w	ip, [r8]
			bsi->iCache <<= 8;
 800d554:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800d558:	f8cd c01c 	str.w	ip, [sp, #28]
		while (nBytes--) {
 800d55c:	d017      	beq.n	800d58e <xmp3fixpt_UnpackSideInfo+0xf92>
			bsi->iCache |= (*bsi->bytePtr++);
 800d55e:	f108 0902 	add.w	r9, r8, #2
		while (nBytes--) {
 800d562:	2a02      	cmp	r2, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d564:	f8cd 9018 	str.w	r9, [sp, #24]
 800d568:	f898 9001 	ldrb.w	r9, [r8, #1]
 800d56c:	ea49 0c0c 	orr.w	ip, r9, ip
			bsi->iCache <<= 8;
 800d570:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 800d574:	f8cd c01c 	str.w	ip, [sp, #28]
		while (nBytes--) {
 800d578:	d009      	beq.n	800d58e <xmp3fixpt_UnpackSideInfo+0xf92>
			bsi->iCache |= (*bsi->bytePtr++);
 800d57a:	f108 0903 	add.w	r9, r8, #3
 800d57e:	f8cd 9018 	str.w	r9, [sp, #24]
 800d582:	f898 8002 	ldrb.w	r8, [r8, #2]
 800d586:	ea48 0c0c 	orr.w	ip, r8, ip
			bsi->iCache <<= 8;
 800d58a:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d58e:	f1c2 0803 	rsb	r8, r2, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d592:	f10e 0e1f 	add.w	lr, lr, #31
 800d596:	9f01      	ldr	r7, [sp, #4]
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d598:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800d59c:	fa0c fc08 	lsl.w	ip, ip, r8
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d5a0:	fa0c f303 	lsl.w	r3, ip, r3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d5a4:	fa2c fc0e 	lsr.w	ip, ip, lr
 800d5a8:	ea47 070c 	orr.w	r7, r7, ip
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d5ac:	ea4f 6cd3 	mov.w	ip, r3, lsr #27
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d5b0:	015b      	lsls	r3, r3, #5
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d5b2:	9701      	str	r7, [sp, #4]
		bsi->nBytes = 0;
 800d5b4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	9209      	str	r2, [sp, #36]	; 0x24
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d5bc:	9a01      	ldr	r2, [sp, #4]
 800d5be:	f7ff b8a3 	b.w	800c708 <xmp3fixpt_UnpackSideInfo+0x10c>
		bsi->iCache = 0;
 800d5c2:	9007      	str	r0, [sp, #28]
		while (nBytes--) {
 800d5c4:	f1b8 0f00 	cmp.w	r8, #0
 800d5c8:	d05b      	beq.n	800d682 <xmp3fixpt_UnpackSideInfo+0x1086>
			bsi->iCache |= (*bsi->bytePtr++);
 800d5ca:	9b06      	ldr	r3, [sp, #24]
		while (nBytes--) {
 800d5cc:	f1b8 0f01 	cmp.w	r8, #1
			bsi->iCache |= (*bsi->bytePtr++);
 800d5d0:	f103 0101 	add.w	r1, r3, #1
 800d5d4:	9106      	str	r1, [sp, #24]
 800d5d6:	7819      	ldrb	r1, [r3, #0]
			bsi->iCache <<= 8;
 800d5d8:	ea4f 2101 	mov.w	r1, r1, lsl #8
 800d5dc:	9107      	str	r1, [sp, #28]
		while (nBytes--) {
 800d5de:	d00f      	beq.n	800d600 <xmp3fixpt_UnpackSideInfo+0x1004>
			bsi->iCache |= (*bsi->bytePtr++);
 800d5e0:	1c98      	adds	r0, r3, #2
		while (nBytes--) {
 800d5e2:	f1b8 0f02 	cmp.w	r8, #2
			bsi->iCache |= (*bsi->bytePtr++);
 800d5e6:	9006      	str	r0, [sp, #24]
 800d5e8:	7858      	ldrb	r0, [r3, #1]
 800d5ea:	ea41 0100 	orr.w	r1, r1, r0
			bsi->iCache <<= 8;
 800d5ee:	ea4f 2101 	mov.w	r1, r1, lsl #8
 800d5f2:	9107      	str	r1, [sp, #28]
		while (nBytes--) {
 800d5f4:	d004      	beq.n	800d600 <xmp3fixpt_UnpackSideInfo+0x1004>
			bsi->iCache |= (*bsi->bytePtr++);
 800d5f6:	1cd8      	adds	r0, r3, #3
 800d5f8:	9006      	str	r0, [sp, #24]
 800d5fa:	789b      	ldrb	r3, [r3, #2]
 800d5fc:	4319      	orrs	r1, r3
			bsi->iCache <<= 8;
 800d5fe:	0209      	lsls	r1, r1, #8
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d600:	f1c8 0303 	rsb	r3, r8, #3
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d604:	f10e 0e1b 	add.w	lr, lr, #27
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d608:	00db      	lsls	r3, r3, #3
 800d60a:	4099      	lsls	r1, r3
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d60c:	fa01 f302 	lsl.w	r3, r1, r2
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d610:	fa21 f10e 	lsr.w	r1, r1, lr
 800d614:	ea4c 0c01 	orr.w	ip, ip, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d618:	0ed9      	lsrs	r1, r3, #27
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d61a:	015b      	lsls	r3, r3, #5
		bsi->nBytes = 0;
 800d61c:	2200      	movs	r2, #0
 800d61e:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800d622:	9209      	str	r2, [sp, #36]	; 0x24
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d624:	f7ff b93a 	b.w	800c89c <xmp3fixpt_UnpackSideInfo+0x2a0>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d628:	9a06      	ldr	r2, [sp, #24]
		bsi->nBytes -= 4;
 800d62a:	1f03      	subs	r3, r0, #4
 800d62c:	f10c 0c1f 	add.w	ip, ip, #31
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d630:	4696      	mov	lr, r2
 800d632:	1c50      	adds	r0, r2, #1
 800d634:	9006      	str	r0, [sp, #24]
 800d636:	f81e 0b02 	ldrb.w	r0, [lr], #2
 800d63a:	0600      	lsls	r0, r0, #24
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d63c:	f8cd e018 	str.w	lr, [sp, #24]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d640:	9007      	str	r0, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d642:	f892 e001 	ldrb.w	lr, [r2, #1]
 800d646:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d64a:	f102 0e03 	add.w	lr, r2, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d64e:	9007      	str	r0, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d650:	f8cd e018 	str.w	lr, [sp, #24]
 800d654:	f892 e002 	ldrb.w	lr, [r2, #2]
 800d658:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800d65c:	f102 0e04 	add.w	lr, r2, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d660:	9007      	str	r0, [sp, #28]
		bsi->iCache |= (*bsi->bytePtr++);
 800d662:	f8cd e018 	str.w	lr, [sp, #24]
 800d666:	78d2      	ldrb	r2, [r2, #3]
		bsi->nBytes -= 4;
 800d668:	9309      	str	r3, [sp, #36]	; 0x24
		bsi->iCache |= (*bsi->bytePtr++);
 800d66a:	4310      	orrs	r0, r2
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d66c:	fa00 f707 	lsl.w	r7, r0, r7
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d670:	fa20 f20c 	lsr.w	r2, r0, ip
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d674:	007b      	lsls	r3, r7, #1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d676:	430a      	orrs	r2, r1
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d678:	0ff9      	lsrs	r1, r7, #31
 800d67a:	f7ff b891 	b.w	800c7a0 <xmp3fixpt_UnpackSideInfo+0x1a4>
		while (nBytes--) {
 800d67e:	4672      	mov	r2, lr
 800d680:	e599      	b.n	800d1b6 <xmp3fixpt_UnpackSideInfo+0xbba>
 800d682:	4603      	mov	r3, r0
 800d684:	4601      	mov	r1, r0
 800d686:	e7c9      	b.n	800d61c <xmp3fixpt_UnpackSideInfo+0x1020>
 800d688:	4661      	mov	r1, ip
 800d68a:	e70a      	b.n	800d4a2 <xmp3fixpt_UnpackSideInfo+0xea6>
 800d68c:	463b      	mov	r3, r7
 800d68e:	4639      	mov	r1, r7
 800d690:	e6d1      	b.n	800d436 <xmp3fixpt_UnpackSideInfo+0xe3a>
 800d692:	4613      	mov	r3, r2
 800d694:	4694      	mov	ip, r2
 800d696:	e78d      	b.n	800d5b4 <xmp3fixpt_UnpackSideInfo+0xfb8>
 800d698:	4643      	mov	r3, r8
 800d69a:	46c6      	mov	lr, r8
 800d69c:	e744      	b.n	800d528 <xmp3fixpt_UnpackSideInfo+0xf2c>
 800d69e:	4643      	mov	r3, r8
 800d6a0:	46c6      	mov	lr, r8
 800d6a2:	e60a      	b.n	800d2ba <xmp3fixpt_UnpackSideInfo+0xcbe>
 800d6a4:	4643      	mov	r3, r8
 800d6a6:	4641      	mov	r1, r8
 800d6a8:	e5c4      	b.n	800d234 <xmp3fixpt_UnpackSideInfo+0xc38>
 800d6aa:	4663      	mov	r3, ip
 800d6ac:	4660      	mov	r0, ip
 800d6ae:	e687      	b.n	800d3c0 <xmp3fixpt_UnpackSideInfo+0xdc4>
 800d6b0:	4663      	mov	r3, ip
 800d6b2:	4662      	mov	r2, ip
 800d6b4:	e644      	b.n	800d340 <xmp3fixpt_UnpackSideInfo+0xd44>
					sis->region0Count = 8;
 800d6b6:	2308      	movs	r3, #8
 800d6b8:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d6ba:	230c      	movs	r3, #12
 800d6bc:	f7ff b865 	b.w	800c78a <xmp3fixpt_UnpackSideInfo+0x18e>
		while (nBytes--) {
 800d6c0:	4673      	mov	r3, lr
 800d6c2:	4670      	mov	r0, lr
 800d6c4:	f7ff baa8 	b.w	800cc18 <xmp3fixpt_UnpackSideInfo+0x61c>
 800d6c8:	460f      	mov	r7, r1
 800d6ca:	f7ff bb18 	b.w	800ccfe <xmp3fixpt_UnpackSideInfo+0x702>
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	f7ff badb 	b.w	800cc8a <xmp3fixpt_UnpackSideInfo+0x68e>
 800d6d4:	464b      	mov	r3, r9
 800d6d6:	f7ff bb48 	b.w	800cd6a <xmp3fixpt_UnpackSideInfo+0x76e>
 800d6da:	460a      	mov	r2, r1
 800d6dc:	4603      	mov	r3, r0
 800d6de:	4601      	mov	r1, r0
 800d6e0:	e528      	b.n	800d134 <xmp3fixpt_UnpackSideInfo+0xb38>
		return -1;
 800d6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e6:	9305      	str	r3, [sp, #20]
 800d6e8:	f7ff b887 	b.w	800c7fa <xmp3fixpt_UnpackSideInfo+0x1fe>

0800d6ec <xmp3fixpt_FreeBuffers>:
 *
 * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
 **************************************************************************************/
void FreeBuffers(MP3DecInfo *mp3DecInfo)
{
	if (!mp3DecInfo)
 800d6ec:	b310      	cbz	r0, 800d734 <xmp3fixpt_FreeBuffers+0x48>
{
 800d6ee:	b510      	push	{r4, lr}
 800d6f0:	4604      	mov	r4, r0
		return;

	SAFE_FREE(mp3DecInfo->FrameHeaderPS);
 800d6f2:	6800      	ldr	r0, [r0, #0]
 800d6f4:	b108      	cbz	r0, 800d6fa <xmp3fixpt_FreeBuffers+0xe>
 800d6f6:	f011 fcfd 	bl	801f0f4 <free>
	SAFE_FREE(mp3DecInfo->SideInfoPS);
 800d6fa:	6860      	ldr	r0, [r4, #4]
 800d6fc:	b108      	cbz	r0, 800d702 <xmp3fixpt_FreeBuffers+0x16>
 800d6fe:	f011 fcf9 	bl	801f0f4 <free>
	SAFE_FREE(mp3DecInfo->ScaleFactorInfoPS);
 800d702:	68a0      	ldr	r0, [r4, #8]
 800d704:	b108      	cbz	r0, 800d70a <xmp3fixpt_FreeBuffers+0x1e>
 800d706:	f011 fcf5 	bl	801f0f4 <free>
	SAFE_FREE(mp3DecInfo->HuffmanInfoPS);
 800d70a:	68e0      	ldr	r0, [r4, #12]
 800d70c:	b108      	cbz	r0, 800d712 <xmp3fixpt_FreeBuffers+0x26>
 800d70e:	f011 fcf1 	bl	801f0f4 <free>
	SAFE_FREE(mp3DecInfo->DequantInfoPS);
 800d712:	6920      	ldr	r0, [r4, #16]
 800d714:	b108      	cbz	r0, 800d71a <xmp3fixpt_FreeBuffers+0x2e>
 800d716:	f011 fced 	bl	801f0f4 <free>
	SAFE_FREE(mp3DecInfo->IMDCTInfoPS);
 800d71a:	6960      	ldr	r0, [r4, #20]
 800d71c:	b108      	cbz	r0, 800d722 <xmp3fixpt_FreeBuffers+0x36>
 800d71e:	f011 fce9 	bl	801f0f4 <free>
	SAFE_FREE(mp3DecInfo->SubbandInfoPS);
 800d722:	69a0      	ldr	r0, [r4, #24]
 800d724:	b108      	cbz	r0, 800d72a <xmp3fixpt_FreeBuffers+0x3e>
 800d726:	f011 fce5 	bl	801f0f4 <free>

	SAFE_FREE(mp3DecInfo);
 800d72a:	4620      	mov	r0, r4
}
 800d72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SAFE_FREE(mp3DecInfo);
 800d730:	f011 bce0 	b.w	801f0f4 <free>
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop

0800d738 <xmp3fixpt_AllocateBuffers>:
{
 800d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mp3DecInfo = (MP3DecInfo *)malloc(sizeof(MP3DecInfo));
 800d73c:	2101      	movs	r1, #1
 800d73e:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
 800d742:	f011 fc9d 	bl	801f080 <calloc>
	if (!mp3DecInfo)
 800d746:	4604      	mov	r4, r0
 800d748:	b3d8      	cbz	r0, 800d7c2 <xmp3fixpt_AllocateBuffers+0x8a>
	fh =  (FrameHeader *)     malloc(sizeof(FrameHeader));
 800d74a:	2101      	movs	r1, #1
 800d74c:	2038      	movs	r0, #56	; 0x38
 800d74e:	f011 fc97 	bl	801f080 <calloc>
	si =  (SideInfo *)        malloc(sizeof(SideInfo));
 800d752:	2101      	movs	r1, #1
	fh =  (FrameHeader *)     malloc(sizeof(FrameHeader));
 800d754:	4607      	mov	r7, r0
	si =  (SideInfo *)        malloc(sizeof(SideInfo));
 800d756:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800d75a:	f011 fc91 	bl	801f080 <calloc>
	sfi = (ScaleFactorInfo *) malloc(sizeof(ScaleFactorInfo));
 800d75e:	2101      	movs	r1, #1
	si =  (SideInfo *)        malloc(sizeof(SideInfo));
 800d760:	4606      	mov	r6, r0
	sfi = (ScaleFactorInfo *) malloc(sizeof(ScaleFactorInfo));
 800d762:	f44f 708e 	mov.w	r0, #284	; 0x11c
 800d766:	f011 fc8b 	bl	801f080 <calloc>
	hi =  (HuffmanInfo *)     malloc(sizeof(HuffmanInfo));
 800d76a:	2101      	movs	r1, #1
	sfi = (ScaleFactorInfo *) malloc(sizeof(ScaleFactorInfo));
 800d76c:	4605      	mov	r5, r0
	hi =  (HuffmanInfo *)     malloc(sizeof(HuffmanInfo));
 800d76e:	f241 2010 	movw	r0, #4624	; 0x1210
 800d772:	f011 fc85 	bl	801f080 <calloc>
	di =  (DequantInfo *)     malloc(sizeof(DequantInfo));
 800d776:	2101      	movs	r1, #1
	hi =  (HuffmanInfo *)     malloc(sizeof(HuffmanInfo));
 800d778:	4682      	mov	sl, r0
	di =  (DequantInfo *)     malloc(sizeof(DequantInfo));
 800d77a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800d77e:	f011 fc7f 	bl	801f080 <calloc>
	mi =  (IMDCTInfo *)       malloc(sizeof(IMDCTInfo));
 800d782:	2101      	movs	r1, #1
	di =  (DequantInfo *)     malloc(sizeof(DequantInfo));
 800d784:	4681      	mov	r9, r0
	mi =  (IMDCTInfo *)       malloc(sizeof(IMDCTInfo));
 800d786:	f44f 50d9 	mov.w	r0, #6944	; 0x1b20
 800d78a:	f011 fc79 	bl	801f080 <calloc>
 800d78e:	4680      	mov	r8, r0
	sbi = (SubbandInfo *)     malloc(sizeof(SubbandInfo));
 800d790:	2101      	movs	r1, #1
 800d792:	f242 2004 	movw	r0, #8708	; 0x2204
 800d796:	f011 fc73 	bl	801f080 <calloc>
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 800d79a:	61a0      	str	r0, [r4, #24]
	mp3DecInfo->SideInfoPS =        (void *)si;
 800d79c:	e9c4 7600 	strd	r7, r6, [r4]
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 800d7a0:	e9c4 5a02 	strd	r5, sl, [r4, #8]
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 800d7a4:	e9c4 9804 	strd	r9, r8, [r4, #16]
	if (!fh || !si || !sfi || !hi || !di || !mi || !sbi) {
 800d7a8:	b177      	cbz	r7, 800d7c8 <xmp3fixpt_AllocateBuffers+0x90>
 800d7aa:	b16e      	cbz	r6, 800d7c8 <xmp3fixpt_AllocateBuffers+0x90>
 800d7ac:	b165      	cbz	r5, 800d7c8 <xmp3fixpt_AllocateBuffers+0x90>
 800d7ae:	f1ba 0f00 	cmp.w	sl, #0
 800d7b2:	d009      	beq.n	800d7c8 <xmp3fixpt_AllocateBuffers+0x90>
 800d7b4:	f1b8 0f00 	cmp.w	r8, #0
 800d7b8:	bf18      	it	ne
 800d7ba:	f1b9 0f00 	cmpne.w	r9, #0
 800d7be:	d003      	beq.n	800d7c8 <xmp3fixpt_AllocateBuffers+0x90>
 800d7c0:	b110      	cbz	r0, 800d7c8 <xmp3fixpt_AllocateBuffers+0x90>
}
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FreeBuffers(mp3DecInfo);	/* safe to call - only frees memory that was successfully allocated */
 800d7c8:	4620      	mov	r0, r4
		return 0;
 800d7ca:	2400      	movs	r4, #0
		FreeBuffers(mp3DecInfo);	/* safe to call - only frees memory that was successfully allocated */
 800d7cc:	f7ff ff8e 	bl	800d6ec <xmp3fixpt_FreeBuffers>
		return 0;
 800d7d0:	e7f7      	b.n	800d7c2 <xmp3fixpt_AllocateBuffers+0x8a>
 800d7d2:	bf00      	nop

0800d7d4 <xmp3fixpt_FDCT32>:
 * TODO:        code organization and optimization for ARM
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	b087      	sub	sp, #28
 800d7da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d7dc:	9303      	str	r3, [sp, #12]
	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
	if (gb < 6) {
 800d7de:	2c05      	cmp	r4, #5
{
 800d7e0:	e9cd 1201 	strd	r1, r2, [sp, #4]
	if (gb < 6) {
 800d7e4:	f300 84d1 	bgt.w	800e18a <xmp3fixpt_FDCT32+0x9b6>
		es = 6 - gb;
 800d7e8:	f1c4 0b06 	rsb	fp, r4, #6
		for (i = 0; i < 32; i++)
 800d7ec:	1f03      	subs	r3, r0, #4
 800d7ee:	f100 017c 	add.w	r1, r0, #124	; 0x7c
			buf[i] >>= es;
 800d7f2:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800d7f6:	fa42 f20b 	asr.w	r2, r2, fp
		for (i = 0; i < 32; i++)
 800d7fa:	4299      	cmp	r1, r3
			buf[i] >>= es;
 800d7fc:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 32; i++)
 800d7fe:	d1f8      	bne.n	800d7f2 <xmp3fixpt_FDCT32+0x1e>
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 800d800:	6801      	ldr	r1, [r0, #0]
 800d802:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800d804:	e9d0 450f 	ldrd	r4, r5, [r0, #60]	; 0x3c
 800d808:	1a8b      	subs	r3, r1, r2
 800d80a:	440a      	add	r2, r1
	 * For inline assembly, x and y are not assumed to be R0, R1 so it shouldn't matter
	 *   which one is returned. (If this were a function call, returning y (R1) would 
	 *   require an extra "mov r0, r1")
     */
    int zlow;
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800d80c:	49c9      	ldr	r1, [pc, #804]	; (800db34 <xmp3fixpt_FDCT32+0x360>)
 800d80e:	fb81 6303 	smull	r6, r3, r1, r3
 800d812:	1b61      	subs	r1, r4, r5
 800d814:	005b      	lsls	r3, r3, #1
 800d816:	442c      	add	r4, r5
 800d818:	4dc7      	ldr	r5, [pc, #796]	; (800db38 <xmp3fixpt_FDCT32+0x364>)
 800d81a:	fb85 6101 	smull	r6, r1, r5, r1
 800d81e:	1915      	adds	r5, r2, r4
 800d820:	0149      	lsls	r1, r1, #5
 800d822:	1b12      	subs	r2, r2, r4
 800d824:	4cc5      	ldr	r4, [pc, #788]	; (800db3c <xmp3fixpt_FDCT32+0x368>)
 800d826:	6005      	str	r5, [r0, #0]
 800d828:	fb84 5202 	smull	r5, r2, r4, r2
 800d82c:	0052      	lsls	r2, r2, #1
 800d82e:	63c2      	str	r2, [r0, #60]	; 0x3c
 800d830:	185a      	adds	r2, r3, r1
 800d832:	1a5b      	subs	r3, r3, r1
 800d834:	6402      	str	r2, [r0, #64]	; 0x40
 800d836:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(1, 1, 3, 1);
 800d83a:	6846      	ldr	r6, [r0, #4]
	D32FP(0, 1, 5, 1);
 800d83c:	005b      	lsls	r3, r3, #1
	D32FP(1, 1, 3, 1);
 800d83e:	6f82      	ldr	r2, [r0, #120]	; 0x78
	D32FP(0, 1, 5, 1);
 800d840:	67c3      	str	r3, [r0, #124]	; 0x7c
	D32FP(1, 1, 3, 1);
 800d842:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800d844:	1ab3      	subs	r3, r6, r2
 800d846:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800d848:	4432      	add	r2, r6
 800d84a:	49bd      	ldr	r1, [pc, #756]	; (800db40 <xmp3fixpt_FDCT32+0x36c>)
 800d84c:	fb81 6303 	smull	r6, r3, r1, r3
 800d850:	1b61      	subs	r1, r4, r5
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	442c      	add	r4, r5
 800d856:	4dbb      	ldr	r5, [pc, #748]	; (800db44 <xmp3fixpt_FDCT32+0x370>)
 800d858:	fb85 6101 	smull	r6, r1, r5, r1
 800d85c:	1915      	adds	r5, r2, r4
 800d85e:	00c9      	lsls	r1, r1, #3
 800d860:	1b12      	subs	r2, r2, r4
 800d862:	4cb9      	ldr	r4, [pc, #740]	; (800db48 <xmp3fixpt_FDCT32+0x374>)
 800d864:	6045      	str	r5, [r0, #4]
 800d866:	fb84 5202 	smull	r5, r2, r4, r2
 800d86a:	0052      	lsls	r2, r2, #1
 800d86c:	6382      	str	r2, [r0, #56]	; 0x38
 800d86e:	185a      	adds	r2, r3, r1
 800d870:	1a5b      	subs	r3, r3, r1
 800d872:	6442      	str	r2, [r0, #68]	; 0x44
 800d874:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(2, 1, 3, 1);
 800d878:	6886      	ldr	r6, [r0, #8]
	D32FP(1, 1, 3, 1);
 800d87a:	005b      	lsls	r3, r3, #1
	D32FP(2, 1, 3, 1);
 800d87c:	6f42      	ldr	r2, [r0, #116]	; 0x74
	D32FP(1, 1, 3, 1);
 800d87e:	6783      	str	r3, [r0, #120]	; 0x78
	D32FP(2, 1, 3, 1);
 800d880:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d882:	1ab3      	subs	r3, r6, r2
 800d884:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800d886:	4432      	add	r2, r6
 800d888:	49b0      	ldr	r1, [pc, #704]	; (800db4c <xmp3fixpt_FDCT32+0x378>)
 800d88a:	fb81 6303 	smull	r6, r3, r1, r3
 800d88e:	1b61      	subs	r1, r4, r5
 800d890:	005b      	lsls	r3, r3, #1
 800d892:	442c      	add	r4, r5
 800d894:	4dae      	ldr	r5, [pc, #696]	; (800db50 <xmp3fixpt_FDCT32+0x37c>)
 800d896:	fb85 6101 	smull	r6, r1, r5, r1
 800d89a:	1915      	adds	r5, r2, r4
 800d89c:	00c9      	lsls	r1, r1, #3
 800d89e:	1b12      	subs	r2, r2, r4
 800d8a0:	4cac      	ldr	r4, [pc, #688]	; (800db54 <xmp3fixpt_FDCT32+0x380>)
 800d8a2:	6085      	str	r5, [r0, #8]
 800d8a4:	fb84 5202 	smull	r5, r2, r4, r2
 800d8a8:	0052      	lsls	r2, r2, #1
 800d8aa:	6342      	str	r2, [r0, #52]	; 0x34
 800d8ac:	185a      	adds	r2, r3, r1
 800d8ae:	1a5b      	subs	r3, r3, r1
 800d8b0:	6482      	str	r2, [r0, #72]	; 0x48
 800d8b2:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(3, 1, 2, 1);
 800d8b6:	68c6      	ldr	r6, [r0, #12]
	D32FP(2, 1, 3, 1);
 800d8b8:	005b      	lsls	r3, r3, #1
	D32FP(3, 1, 2, 1);
 800d8ba:	6f02      	ldr	r2, [r0, #112]	; 0x70
	D32FP(2, 1, 3, 1);
 800d8bc:	6743      	str	r3, [r0, #116]	; 0x74
	D32FP(3, 1, 2, 1);
 800d8be:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800d8c0:	1ab3      	subs	r3, r6, r2
 800d8c2:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800d8c4:	4432      	add	r2, r6
 800d8c6:	49a4      	ldr	r1, [pc, #656]	; (800db58 <xmp3fixpt_FDCT32+0x384>)
 800d8c8:	fb81 6303 	smull	r6, r3, r1, r3
 800d8cc:	1b61      	subs	r1, r4, r5
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	442c      	add	r4, r5
 800d8d2:	4da2      	ldr	r5, [pc, #648]	; (800db5c <xmp3fixpt_FDCT32+0x388>)
 800d8d4:	fb85 6101 	smull	r6, r1, r5, r1
 800d8d8:	1915      	adds	r5, r2, r4
 800d8da:	0089      	lsls	r1, r1, #2
 800d8dc:	1b12      	subs	r2, r2, r4
 800d8de:	4ca0      	ldr	r4, [pc, #640]	; (800db60 <xmp3fixpt_FDCT32+0x38c>)
 800d8e0:	60c5      	str	r5, [r0, #12]
 800d8e2:	fb84 5202 	smull	r5, r2, r4, r2
 800d8e6:	0052      	lsls	r2, r2, #1
 800d8e8:	6302      	str	r2, [r0, #48]	; 0x30
 800d8ea:	185a      	adds	r2, r3, r1
 800d8ec:	1a5b      	subs	r3, r3, r1
 800d8ee:	64c2      	str	r2, [r0, #76]	; 0x4c
 800d8f0:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(4, 1, 2, 1);
 800d8f4:	6906      	ldr	r6, [r0, #16]
	D32FP(3, 1, 2, 1);
 800d8f6:	005b      	lsls	r3, r3, #1
	D32FP(4, 1, 2, 1);
 800d8f8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	D32FP(3, 1, 2, 1);
 800d8fa:	6703      	str	r3, [r0, #112]	; 0x70
	D32FP(4, 1, 2, 1);
 800d8fc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800d8fe:	1ab3      	subs	r3, r6, r2
 800d900:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800d902:	4432      	add	r2, r6
 800d904:	4997      	ldr	r1, [pc, #604]	; (800db64 <xmp3fixpt_FDCT32+0x390>)
 800d906:	fb81 6303 	smull	r6, r3, r1, r3
 800d90a:	1b61      	subs	r1, r4, r5
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	442c      	add	r4, r5
 800d910:	4d95      	ldr	r5, [pc, #596]	; (800db68 <xmp3fixpt_FDCT32+0x394>)
 800d912:	fb85 6101 	smull	r6, r1, r5, r1
 800d916:	1915      	adds	r5, r2, r4
 800d918:	0089      	lsls	r1, r1, #2
 800d91a:	1b12      	subs	r2, r2, r4
 800d91c:	4c93      	ldr	r4, [pc, #588]	; (800db6c <xmp3fixpt_FDCT32+0x398>)
 800d91e:	6105      	str	r5, [r0, #16]
 800d920:	fb84 5202 	smull	r5, r2, r4, r2
 800d924:	0052      	lsls	r2, r2, #1
 800d926:	62c2      	str	r2, [r0, #44]	; 0x2c
 800d928:	185a      	adds	r2, r3, r1
 800d92a:	1a5b      	subs	r3, r3, r1
 800d92c:	6502      	str	r2, [r0, #80]	; 0x50
 800d92e:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(5, 1, 1, 2);
 800d932:	6946      	ldr	r6, [r0, #20]
	D32FP(4, 1, 2, 1);
 800d934:	005b      	lsls	r3, r3, #1
	D32FP(5, 1, 1, 2);
 800d936:	6e82      	ldr	r2, [r0, #104]	; 0x68
	D32FP(4, 1, 2, 1);
 800d938:	66c3      	str	r3, [r0, #108]	; 0x6c
	D32FP(5, 1, 1, 2);
 800d93a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d93c:	1ab3      	subs	r3, r6, r2
 800d93e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800d940:	4432      	add	r2, r6
 800d942:	498b      	ldr	r1, [pc, #556]	; (800db70 <xmp3fixpt_FDCT32+0x39c>)
 800d944:	fb81 6303 	smull	r6, r3, r1, r3
 800d948:	1b61      	subs	r1, r4, r5
 800d94a:	005b      	lsls	r3, r3, #1
 800d94c:	442c      	add	r4, r5
 800d94e:	4d89      	ldr	r5, [pc, #548]	; (800db74 <xmp3fixpt_FDCT32+0x3a0>)
 800d950:	fb85 6101 	smull	r6, r1, r5, r1
 800d954:	1915      	adds	r5, r2, r4
 800d956:	0049      	lsls	r1, r1, #1
 800d958:	1b12      	subs	r2, r2, r4
 800d95a:	4c87      	ldr	r4, [pc, #540]	; (800db78 <xmp3fixpt_FDCT32+0x3a4>)
 800d95c:	6145      	str	r5, [r0, #20]
 800d95e:	fb84 5202 	smull	r5, r2, r4, r2
 800d962:	0092      	lsls	r2, r2, #2
 800d964:	6282      	str	r2, [r0, #40]	; 0x28
 800d966:	185a      	adds	r2, r3, r1
 800d968:	1a5b      	subs	r3, r3, r1
 800d96a:	6542      	str	r2, [r0, #84]	; 0x54
 800d96c:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(6, 1, 1, 2);
 800d970:	6986      	ldr	r6, [r0, #24]
	D32FP(5, 1, 1, 2);
 800d972:	009b      	lsls	r3, r3, #2
	D32FP(6, 1, 1, 2);
 800d974:	6e42      	ldr	r2, [r0, #100]	; 0x64
	D32FP(5, 1, 1, 2);
 800d976:	6683      	str	r3, [r0, #104]	; 0x68
	D32FP(6, 1, 1, 2);
 800d978:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d97a:	1ab3      	subs	r3, r6, r2
 800d97c:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800d97e:	4432      	add	r2, r6
 800d980:	497e      	ldr	r1, [pc, #504]	; (800db7c <xmp3fixpt_FDCT32+0x3a8>)
 800d982:	fb81 6303 	smull	r6, r3, r1, r3
 800d986:	1b61      	subs	r1, r4, r5
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	442c      	add	r4, r5
 800d98c:	4d7c      	ldr	r5, [pc, #496]	; (800db80 <xmp3fixpt_FDCT32+0x3ac>)
 800d98e:	fb85 6101 	smull	r6, r1, r5, r1
 800d992:	1915      	adds	r5, r2, r4
 800d994:	0049      	lsls	r1, r1, #1
 800d996:	1b12      	subs	r2, r2, r4
 800d998:	4c7a      	ldr	r4, [pc, #488]	; (800db84 <xmp3fixpt_FDCT32+0x3b0>)
 800d99a:	6185      	str	r5, [r0, #24]
 800d99c:	fb84 5202 	smull	r5, r2, r4, r2
 800d9a0:	0092      	lsls	r2, r2, #2
 800d9a2:	6242      	str	r2, [r0, #36]	; 0x24
 800d9a4:	185a      	adds	r2, r3, r1
 800d9a6:	1a5b      	subs	r3, r3, r1
 800d9a8:	6582      	str	r2, [r0, #88]	; 0x58
 800d9aa:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(7, 1, 1, 4);
 800d9ae:	69c6      	ldr	r6, [r0, #28]
	D32FP(6, 1, 1, 2);
 800d9b0:	009b      	lsls	r3, r3, #2
	D32FP(7, 1, 1, 4);
 800d9b2:	6e02      	ldr	r2, [r0, #96]	; 0x60
	D32FP(6, 1, 1, 2);
 800d9b4:	6643      	str	r3, [r0, #100]	; 0x64
	D32FP(7, 1, 1, 4);
 800d9b6:	6a04      	ldr	r4, [r0, #32]
 800d9b8:	1ab3      	subs	r3, r6, r2
 800d9ba:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800d9bc:	4432      	add	r2, r6
 800d9be:	4972      	ldr	r1, [pc, #456]	; (800db88 <xmp3fixpt_FDCT32+0x3b4>)
 800d9c0:	fb81 6303 	smull	r6, r3, r1, r3
 800d9c4:	1b61      	subs	r1, r4, r5
 800d9c6:	005b      	lsls	r3, r3, #1
 800d9c8:	442c      	add	r4, r5
 800d9ca:	4d70      	ldr	r5, [pc, #448]	; (800db8c <xmp3fixpt_FDCT32+0x3b8>)
 800d9cc:	fb85 6101 	smull	r6, r1, r5, r1
 800d9d0:	1915      	adds	r5, r2, r4
 800d9d2:	0049      	lsls	r1, r1, #1
 800d9d4:	1b12      	subs	r2, r2, r4
 800d9d6:	4c6e      	ldr	r4, [pc, #440]	; (800db90 <xmp3fixpt_FDCT32+0x3bc>)
 800d9d8:	61c5      	str	r5, [r0, #28]
 800d9da:	fb84 5202 	smull	r5, r2, r4, r2
 800d9de:	0112      	lsls	r2, r2, #4
 800d9e0:	6202      	str	r2, [r0, #32]
 800d9e2:	185a      	adds	r2, r3, r1
 800d9e4:	1a5b      	subs	r3, r3, r1
 800d9e6:	65c2      	str	r2, [r0, #92]	; 0x5c
 800d9e8:	fb84 2303 	smull	r2, r3, r4, r3
 800d9ec:	011b      	lsls	r3, r3, #4
 800d9ee:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
 800d9f2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 800db98 <xmp3fixpt_FDCT32+0x3c4>
 800d9f6:	6603      	str	r3, [r0, #96]	; 0x60

	/* second pass */
	for (i = 4; i > 0; i--) {
 800d9f8:	f100 0320 	add.w	r3, r0, #32
 800d9fc:	9200      	str	r2, [sp, #0]
 800d9fe:	e9cd b004 	strd	fp, r0, [sp, #16]
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 800da02:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800da06:	f853 6c20 	ldr.w	r6, [r3, #-32]
 800da0a:	e953 5705 	ldrd	r5, r7, [r3, #-20]
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800da0e:	1ab1      	subs	r1, r6, r2
 800da10:	4416      	add	r6, r2
 800da12:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 800da16:	fb82 4101 	smull	r4, r1, r2, r1
 800da1a:	004c      	lsls	r4, r1, #1
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800da1c:	1bea      	subs	r2, r5, r7
 800da1e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 800da22:	443d      	add	r5, r7
 800da24:	fb81 7202 	smull	r7, r2, r1, r2
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800da28:	eba6 0e05 	sub.w	lr, r6, r5
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800da2c:	00d1      	lsls	r1, r2, #3
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800da2e:	442e      	add	r6, r5
 800da30:	f8da 5068 	ldr.w	r5, [sl, #104]	; 0x68
 800da34:	fb85 2e0e 	smull	r2, lr, r5, lr
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800da38:	1a62      	subs	r2, r4, r1
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800da3a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800da3e:	4421      	add	r1, r4
 800da40:	fb85 4202 	smull	r4, r2, r5, r2

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 800da44:	f853 9c1c 	ldr.w	r9, [r3, #-28]
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800da48:	0052      	lsls	r2, r2, #1
		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 800da4a:	f853 cc08 	ldr.w	ip, [r3, #-8]
 800da4e:	f853 4c18 	ldr.w	r4, [r3, #-24]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800da52:	eba9 050c 	sub.w	r5, r9, ip
		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 800da56:	f853 7c0c 	ldr.w	r7, [r3, #-12]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800da5a:	44e1      	add	r9, ip
 800da5c:	f8da 006c 	ldr.w	r0, [sl, #108]	; 0x6c
 800da60:	fb80 c505 	smull	ip, r5, r0, r5
 800da64:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800da68:	1be5      	subs	r5, r4, r7
 800da6a:	4427      	add	r7, r4
 800da6c:	f8da 4070 	ldr.w	r4, [sl, #112]	; 0x70
 800da70:	fb84 8505 	smull	r8, r5, r4, r5
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800da74:	eba9 0407 	sub.w	r4, r9, r7
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800da78:	006d      	lsls	r5, r5, #1
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800da7a:	44b9      	add	r9, r7
 800da7c:	f8da 8074 	ldr.w	r8, [sl, #116]	; 0x74
 800da80:	fb88 7404 	smull	r7, r4, r8, r4
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 800da84:	ebac 0705 	sub.w	r7, ip, r5
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800da88:	00a4      	lsls	r4, r4, #2
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 800da8a:	4465      	add	r5, ip
 800da8c:	fb88 c707 	smull	ip, r7, r8, r7
 800da90:	4840      	ldr	r0, [pc, #256]	; (800db94 <xmp3fixpt_FDCT32+0x3c0>)
 800da92:	00bf      	lsls	r7, r7, #2

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800da94:	eba6 0809 	sub.w	r8, r6, r9
 800da98:	fb80 c808 	smull	ip, r8, r0, r8
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800da9c:	ebae 0c04 	sub.w	ip, lr, r4
 800daa0:	fb80 bc0c 	smull	fp, ip, r0, ip
 800daa4:	4474      	add	r4, lr
		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800daa6:	444e      	add	r6, r9
		buf[0] = b0;	    buf[1] = b1;
		buf[2] = b2 + b3;	buf[3] = b3;
 800daa8:	eb04 044c 	add.w	r4, r4, ip, lsl #1
		buf[0] = b0;	    buf[1] = b1;
 800daac:	f843 6c20 	str.w	r6, [r3, #-32]
		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800dab0:	ea4f 0648 	mov.w	r6, r8, lsl #1
		buf[2] = b2 + b3;	buf[3] = b3;
 800dab4:	f843 4c18 	str.w	r4, [r3, #-24]
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800dab8:	ea4f 044c 	mov.w	r4, ip, lsl #1
		buf[0] = b0;	    buf[1] = b1;
 800dabc:	f843 6c1c 	str.w	r6, [r3, #-28]
		buf[2] = b2 + b3;	buf[3] = b3;
 800dac0:	f843 4c14 	str.w	r4, [r3, #-20]

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800dac4:	1b4c      	subs	r4, r1, r5
 800dac6:	fb80 6404 	smull	r6, r4, r0, r4
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800daca:	1bd6      	subs	r6, r2, r7
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800dacc:	0064      	lsls	r4, r4, #1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800dace:	443a      	add	r2, r7
 800dad0:	fb80 7606 	smull	r7, r6, r0, r6
		b6 += b7;
 800dad4:	eb02 0246 	add.w	r2, r2, r6, lsl #1
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800dad8:	4429      	add	r1, r5
	for (i = 4; i > 0; i--) {
 800dada:	3320      	adds	r3, #32
 800dadc:	f10a 0a18 	add.w	sl, sl, #24
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800dae0:	4411      	add	r1, r2
		buf[6] = b5 + b6;	buf[7] = b7;
 800dae2:	4422      	add	r2, r4
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800dae4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800dae8:	0076      	lsls	r6, r6, #1
		buf[6] = b5 + b6;	buf[7] = b7;
 800daea:	f843 2c28 	str.w	r2, [r3, #-40]
	for (i = 4; i > 0; i--) {
 800daee:	9a00      	ldr	r2, [sp, #0]
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800daf0:	f843 1c30 	str.w	r1, [r3, #-48]
 800daf4:	f843 4c2c 	str.w	r4, [r3, #-44]
		buf[6] = b5 + b6;	buf[7] = b7;
 800daf8:	f843 6c24 	str.w	r6, [r3, #-36]
	for (i = 4; i > 0; i--) {
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d180      	bne.n	800da02 <xmp3fixpt_FDCT32+0x22e>
		buf += 8;
	}
	buf -= 32;	/* reset */

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db00:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 800db04:	e9dd b004 	ldrd	fp, r0, [sp, #16]
 800db08:	1a5b      	subs	r3, r3, r1
 800db0a:	f003 0307 	and.w	r3, r3, #7
 800db0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db12:	009a      	lsls	r2, r3, #2
 800db14:	2900      	cmp	r1, #0
 800db16:	f000 832c 	beq.w	800e172 <xmp3fixpt_FDCT32+0x99e>
 800db1a:	9d01      	ldr	r5, [sp, #4]
	s = buf[ 0];				d[0] = d[8] = s;
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db1c:	9902      	ldr	r1, [sp, #8]
	s = buf[ 0];				d[0] = d[8] = s;
 800db1e:	6804      	ldr	r4, [r0, #0]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db20:	18ae      	adds	r6, r5, r2
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db22:	0089      	lsls	r1, r1, #2
 800db24:	462f      	mov	r7, r5
	s = buf[ 0];				d[0] = d[8] = s;
 800db26:	6234      	str	r4, [r6, #32]
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db28:	f501 5188 	add.w	r1, r1, #4352	; 0x1100
	s = buf[ 0];				d[0] = d[8] = s;
 800db2c:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db30:	2400      	movs	r4, #0
 800db32:	e033      	b.n	800db9c <xmp3fixpt_FDCT32+0x3c8>
 800db34:	4013c251 	.word	0x4013c251
 800db38:	518522fb 	.word	0x518522fb
 800db3c:	404f4672 	.word	0x404f4672
 800db40:	40b345bd 	.word	0x40b345bd
 800db44:	6d0b20cf 	.word	0x6d0b20cf
 800db48:	42e13c10 	.word	0x42e13c10
 800db4c:	41fa2d6d 	.word	0x41fa2d6d
 800db50:	41d95790 	.word	0x41d95790
 800db54:	48919f44 	.word	0x48919f44
 800db58:	43f93421 	.word	0x43f93421
 800db5c:	5efc8d96 	.word	0x5efc8d96
 800db60:	52cb0e63 	.word	0x52cb0e63
 800db64:	46cc1bc4 	.word	0x46cc1bc4
 800db68:	4ad81a97 	.word	0x4ad81a97
 800db6c:	64e2402e 	.word	0x64e2402e
 800db70:	4a9d9cf0 	.word	0x4a9d9cf0
 800db74:	7c7d1db3 	.word	0x7c7d1db3
 800db78:	43e224a9 	.word	0x43e224a9
 800db7c:	4fae3711 	.word	0x4fae3711
 800db80:	6b6fcf26 	.word	0x6b6fcf26
 800db84:	6e3c92c1 	.word	0x6e3c92c1
 800db88:	56601ea7 	.word	0x56601ea7
 800db8c:	5f4cf6eb 	.word	0x5f4cf6eb
 800db90:	519e4e04 	.word	0x519e4e04
 800db94:	5a82799a 	.word	0x5a82799a
 800db98:	08020b14 	.word	0x08020b14
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
	s = buf[15];				d[0] = d[8] = s;	d += 64;
	s = tmp;					d[0] = d[8] = s;

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db9c:	f5a2 627c 	sub.w	r2, r2, #4032	; 0xfc0
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800dba0:	187b      	adds	r3, r7, r1
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800dba2:	4414      	add	r4, r2
	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800dba4:	6842      	ldr	r2, [r0, #4]
 800dba6:	621a      	str	r2, [r3, #32]
 800dba8:	507a      	str	r2, [r7, r1]
	tmp = buf[25] + buf[29];
 800dbaa:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800dbac:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800dbae:	440a      	add	r2, r1
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbb0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800dbb2:	4411      	add	r1, r2
 800dbb4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
 800dbb8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 800dbbc:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800dbbe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800dbc0:	4429      	add	r1, r5
 800dbc2:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
 800dbc6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbca:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800dbcc:	440a      	add	r2, r1
 800dbce:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 800dbd2:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	tmp = buf[29] + buf[27];
 800dbd6:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800dbd8:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800dbda:	440a      	add	r2, r1
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 800dbdc:	6941      	ldr	r1, [r0, #20]
 800dbde:	f8c3 1420 	str.w	r1, [r3, #1056]	; 0x420
 800dbe2:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbe6:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800dbe8:	4411      	add	r1, r2
 800dbea:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
 800dbee:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 800dbf2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800dbf4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800dbf6:	4429      	add	r1, r5
 800dbf8:	f8c3 1620 	str.w	r1, [r3, #1568]	; 0x620
 800dbfc:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc00:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800dc02:	440a      	add	r2, r1
 800dc04:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
 800dc08:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
	tmp = buf[27] + buf[31];
 800dc0c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800dc0e:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800dc10:	440a      	add	r2, r1
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 800dc12:	68c1      	ldr	r1, [r0, #12]
 800dc14:	f8c3 1820 	str.w	r1, [r3, #2080]	; 0x820
 800dc18:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc1c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800dc1e:	4411      	add	r1, r2
 800dc20:	f8c3 1920 	str.w	r1, [r3, #2336]	; 0x920
 800dc24:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 800dc28:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800dc2a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800dc2c:	4429      	add	r1, r5
 800dc2e:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
 800dc32:	f8c3 1a00 	str.w	r1, [r3, #2560]	; 0xa00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc36:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800dc38:	440a      	add	r2, r1
 800dc3a:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20
 800dc3e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800dc42:	69c2      	ldr	r2, [r0, #28]
	tmp = buf[31];
 800dc44:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800dc46:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
 800dc4a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc4e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800dc50:	440a      	add	r2, r1
 800dc52:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800dc56:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800dc5a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	s = tmp;					d[0] = d[8] = s;
 800dc5c:	f8c3 1f20 	str.w	r1, [r3, #3872]	; 0xf20
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800dc60:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 800dc64:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800dc68:	193a      	adds	r2, r7, r4
	s = tmp;					d[0] = d[8] = s;
 800dc6a:	f8c3 1f00 	str.w	r1, [r3, #3840]	; 0xf00

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800dc6e:	6841      	ldr	r1, [r0, #4]
 800dc70:	6211      	str	r1, [r2, #32]
 800dc72:	5139      	str	r1, [r7, r4]

	tmp = buf[30] + buf[25];
 800dc74:	6e45      	ldr	r5, [r0, #100]	; 0x64
 800dc76:	6f81      	ldr	r1, [r0, #120]	; 0x78
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc78:	6c47      	ldr	r7, [r0, #68]	; 0x44
	tmp = buf[30] + buf[25];
 800dc7a:	4429      	add	r1, r5
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc7c:	440f      	add	r7, r1
 800dc7e:	f8c2 7120 	str.w	r7, [r2, #288]	; 0x120
 800dc82:	f8c2 7100 	str.w	r7, [r2, #256]	; 0x100
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 800dc86:	6a47      	ldr	r7, [r0, #36]	; 0x24
 800dc88:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800dc8a:	443d      	add	r5, r7
 800dc8c:	f8c2 5220 	str.w	r5, [r2, #544]	; 0x220
 800dc90:	f8c2 5200 	str.w	r5, [r2, #512]	; 0x200
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc94:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800dc96:	4439      	add	r1, r7
 800dc98:	f8c2 1320 	str.w	r1, [r2, #800]	; 0x320
 800dc9c:	f8c2 1300 	str.w	r1, [r2, #768]	; 0x300
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 800dca0:	6981      	ldr	r1, [r0, #24]
 800dca2:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 800dca6:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400

	tmp = buf[26] + buf[30];
 800dcaa:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800dcac:	6e81      	ldr	r1, [r0, #104]	; 0x68
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800dcae:	6d87      	ldr	r7, [r0, #88]	; 0x58
	tmp = buf[26] + buf[30];
 800dcb0:	4429      	add	r1, r5
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800dcb2:	440f      	add	r7, r1
 800dcb4:	f8c2 7520 	str.w	r7, [r2, #1312]	; 0x520
 800dcb8:	f8c2 7500 	str.w	r7, [r2, #1280]	; 0x500
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 800dcbc:	6b87      	ldr	r7, [r0, #56]	; 0x38
 800dcbe:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800dcc0:	443d      	add	r5, r7
 800dcc2:	f8c2 5620 	str.w	r5, [r2, #1568]	; 0x620
 800dcc6:	f8c2 5600 	str.w	r5, [r2, #1536]	; 0x600
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800dcca:	6c87      	ldr	r7, [r0, #72]	; 0x48
 800dccc:	4439      	add	r1, r7
 800dcce:	f8c2 1720 	str.w	r1, [r2, #1824]	; 0x720
 800dcd2:	f8c2 1700 	str.w	r1, [r2, #1792]	; 0x700
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 800dcd6:	6881      	ldr	r1, [r0, #8]
 800dcd8:	f8c2 1820 	str.w	r1, [r2, #2080]	; 0x820
 800dcdc:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800

	tmp = buf[28] + buf[26];
 800dce0:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800dce2:	6f01      	ldr	r1, [r0, #112]	; 0x70
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800dce4:	6c87      	ldr	r7, [r0, #72]	; 0x48
	tmp = buf[28] + buf[26];
 800dce6:	4429      	add	r1, r5
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800dce8:	440f      	add	r7, r1
 800dcea:	f8c2 7920 	str.w	r7, [r2, #2336]	; 0x920
 800dcee:	f8c2 7900 	str.w	r7, [r2, #2304]	; 0x900
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 800dcf2:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800dcf4:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800dcf6:	443d      	add	r5, r7
 800dcf8:	f8c2 5a20 	str.w	r5, [r2, #2592]	; 0xa20
 800dcfc:	f8c2 5a00 	str.w	r5, [r2, #2560]	; 0xa00
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800dd00:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800dd02:	4439      	add	r1, r7
 800dd04:	f8c2 1b20 	str.w	r1, [r2, #2848]	; 0xb20
 800dd08:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 800dd0c:	6901      	ldr	r1, [r0, #16]
 800dd0e:	f8c2 1c20 	str.w	r1, [r2, #3104]	; 0xc20
 800dd12:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00

	tmp = buf[24] + buf[28];
 800dd16:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800dd18:	6e01      	ldr	r1, [r0, #96]	; 0x60
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800dd1a:	6d07      	ldr	r7, [r0, #80]	; 0x50
	tmp = buf[24] + buf[28];
 800dd1c:	4429      	add	r1, r5
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800dd1e:	440f      	add	r7, r1
 800dd20:	f8c2 7d20 	str.w	r7, [r2, #3360]	; 0xd20
 800dd24:	f8c2 7d00 	str.w	r7, [r2, #3328]	; 0xd00
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 800dd28:	6a05      	ldr	r5, [r0, #32]
 800dd2a:	6b07      	ldr	r7, [r0, #48]	; 0x30
 800dd2c:	443d      	add	r5, r7
 800dd2e:	f8c2 5e20 	str.w	r5, [r2, #3616]	; 0xe20
 800dd32:	f8c2 5e00 	str.w	r5, [r2, #3584]	; 0xe00
	s = buf[16] + tmp;			d[0] = d[8] = s;
 800dd36:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800dd38:	4429      	add	r1, r5
 800dd3a:	f8c2 1f20 	str.w	r1, [r2, #3872]	; 0xf20
 800dd3e:	f8c2 1f00 	str.w	r1, [r2, #3840]	; 0xf00

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 800dd42:	f1bb 0f00 	cmp.w	fp, #0
 800dd46:	f000 8211 	beq.w	800e16c <xmp3fixpt_FDCT32+0x998>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 800dd4a:	f1cb 011f 	rsb	r1, fp, #31
 800dd4e:	6835      	ldr	r5, [r6, #0]
 800dd50:	fa45 f001 	asr.w	r0, r5, r1
 800dd54:	17ef      	asrs	r7, r5, #31
 800dd56:	ebb0 7fe5 	cmp.w	r0, r5, asr #31
 800dd5a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800dd5e:	fa20 f00b 	lsr.w	r0, r0, fp
 800dd62:	f100 30ff 	add.w	r0, r0, #4294967295
 800dd66:	bf18      	it	ne
 800dd68:	ea80 0507 	eorne.w	r5, r0, r7
 800dd6c:	fa05 f50b 	lsl.w	r5, r5, fp
 800dd70:	6235      	str	r5, [r6, #32]
 800dd72:	6035      	str	r5, [r6, #0]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
		for (i = 16; i <= 31; i++) {
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800dd74:	681d      	ldr	r5, [r3, #0]
 800dd76:	fa45 f601 	asr.w	r6, r5, r1
 800dd7a:	17ef      	asrs	r7, r5, #31
 800dd7c:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800dd80:	bf18      	it	ne
 800dd82:	ea80 0507 	eorne.w	r5, r0, r7
 800dd86:	fa05 f50b 	lsl.w	r5, r5, fp
 800dd8a:	621d      	str	r5, [r3, #32]
 800dd8c:	601d      	str	r5, [r3, #0]
 800dd8e:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
 800dd92:	fa45 f601 	asr.w	r6, r5, r1
 800dd96:	17ef      	asrs	r7, r5, #31
 800dd98:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800dd9c:	bf18      	it	ne
 800dd9e:	ea80 0507 	eorne.w	r5, r0, r7
 800dda2:	fa05 f50b 	lsl.w	r5, r5, fp
 800dda6:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
 800ddaa:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 800ddae:	f8d3 5200 	ldr.w	r5, [r3, #512]	; 0x200
 800ddb2:	fa45 f601 	asr.w	r6, r5, r1
 800ddb6:	17ef      	asrs	r7, r5, #31
 800ddb8:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800ddbc:	bf18      	it	ne
 800ddbe:	ea80 0507 	eorne.w	r5, r0, r7
 800ddc2:	fa05 f50b 	lsl.w	r5, r5, fp
 800ddc6:	f8c3 5220 	str.w	r5, [r3, #544]	; 0x220
 800ddca:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
 800ddce:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
 800ddd2:	fa45 f601 	asr.w	r6, r5, r1
 800ddd6:	17ef      	asrs	r7, r5, #31
 800ddd8:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800dddc:	bf18      	it	ne
 800ddde:	ea80 0507 	eorne.w	r5, r0, r7
 800dde2:	fa05 f50b 	lsl.w	r5, r5, fp
 800dde6:	f8c3 5320 	str.w	r5, [r3, #800]	; 0x320
 800ddea:	f8c3 5300 	str.w	r5, [r3, #768]	; 0x300
 800ddee:	f8d3 5400 	ldr.w	r5, [r3, #1024]	; 0x400
 800ddf2:	fa45 f601 	asr.w	r6, r5, r1
 800ddf6:	17ef      	asrs	r7, r5, #31
 800ddf8:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800ddfc:	bf18      	it	ne
 800ddfe:	ea80 0507 	eorne.w	r5, r0, r7
 800de02:	fa05 f50b 	lsl.w	r5, r5, fp
 800de06:	f8c3 5420 	str.w	r5, [r3, #1056]	; 0x420
 800de0a:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
 800de0e:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 800de12:	fa45 f601 	asr.w	r6, r5, r1
 800de16:	17ef      	asrs	r7, r5, #31
 800de18:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800de1c:	bf18      	it	ne
 800de1e:	ea80 0507 	eorne.w	r5, r0, r7
 800de22:	fa05 f50b 	lsl.w	r5, r5, fp
 800de26:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
 800de2a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
 800de2e:	f8d3 5600 	ldr.w	r5, [r3, #1536]	; 0x600
 800de32:	fa45 f601 	asr.w	r6, r5, r1
 800de36:	17ef      	asrs	r7, r5, #31
 800de38:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800de3c:	bf18      	it	ne
 800de3e:	ea80 0507 	eorne.w	r5, r0, r7
 800de42:	fa05 f50b 	lsl.w	r5, r5, fp
 800de46:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
 800de4a:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
 800de4e:	f8d3 5700 	ldr.w	r5, [r3, #1792]	; 0x700
 800de52:	fa45 f601 	asr.w	r6, r5, r1
 800de56:	17ef      	asrs	r7, r5, #31
 800de58:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800de5c:	bf18      	it	ne
 800de5e:	ea80 0507 	eorne.w	r5, r0, r7
 800de62:	fa05 f50b 	lsl.w	r5, r5, fp
 800de66:	f8c3 5720 	str.w	r5, [r3, #1824]	; 0x720
 800de6a:	f8c3 5700 	str.w	r5, [r3, #1792]	; 0x700
 800de6e:	f8d3 5800 	ldr.w	r5, [r3, #2048]	; 0x800
 800de72:	fa45 f601 	asr.w	r6, r5, r1
 800de76:	17ef      	asrs	r7, r5, #31
 800de78:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800de7c:	bf18      	it	ne
 800de7e:	ea80 0507 	eorne.w	r5, r0, r7
 800de82:	fa05 f50b 	lsl.w	r5, r5, fp
 800de86:	f8c3 5820 	str.w	r5, [r3, #2080]	; 0x820
 800de8a:	f8c3 5800 	str.w	r5, [r3, #2048]	; 0x800
 800de8e:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800de92:	fa45 f601 	asr.w	r6, r5, r1
 800de96:	17ef      	asrs	r7, r5, #31
 800de98:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800de9c:	bf18      	it	ne
 800de9e:	ea80 0507 	eorne.w	r5, r0, r7
 800dea2:	fa05 f50b 	lsl.w	r5, r5, fp
 800dea6:	f8c3 5920 	str.w	r5, [r3, #2336]	; 0x920
 800deaa:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
 800deae:	f8d3 5a00 	ldr.w	r5, [r3, #2560]	; 0xa00
 800deb2:	fa45 f601 	asr.w	r6, r5, r1
 800deb6:	17ef      	asrs	r7, r5, #31
 800deb8:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800debc:	bf18      	it	ne
 800debe:	ea80 0507 	eorne.w	r5, r0, r7
 800dec2:	fa05 f50b 	lsl.w	r5, r5, fp
 800dec6:	f8c3 5a20 	str.w	r5, [r3, #2592]	; 0xa20
 800deca:	f8c3 5a00 	str.w	r5, [r3, #2560]	; 0xa00
 800dece:	f8d3 5b00 	ldr.w	r5, [r3, #2816]	; 0xb00
 800ded2:	fa45 f601 	asr.w	r6, r5, r1
 800ded6:	17ef      	asrs	r7, r5, #31
 800ded8:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800dedc:	bf18      	it	ne
 800dede:	ea80 0507 	eorne.w	r5, r0, r7
 800dee2:	fa05 f50b 	lsl.w	r5, r5, fp
 800dee6:	f8c3 5b20 	str.w	r5, [r3, #2848]	; 0xb20
 800deea:	f8c3 5b00 	str.w	r5, [r3, #2816]	; 0xb00
 800deee:	f8d3 5c00 	ldr.w	r5, [r3, #3072]	; 0xc00
 800def2:	fa45 f601 	asr.w	r6, r5, r1
 800def6:	17ef      	asrs	r7, r5, #31
 800def8:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800defc:	bf18      	it	ne
 800defe:	ea80 0507 	eorne.w	r5, r0, r7
 800df02:	fa05 f50b 	lsl.w	r5, r5, fp
 800df06:	f8c3 5c20 	str.w	r5, [r3, #3104]	; 0xc20
 800df0a:	f8c3 5c00 	str.w	r5, [r3, #3072]	; 0xc00
 800df0e:	f8d3 5d00 	ldr.w	r5, [r3, #3328]	; 0xd00
 800df12:	fa45 f601 	asr.w	r6, r5, r1
 800df16:	17ef      	asrs	r7, r5, #31
 800df18:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800df1c:	bf18      	it	ne
 800df1e:	ea80 0507 	eorne.w	r5, r0, r7
 800df22:	fa05 f50b 	lsl.w	r5, r5, fp
 800df26:	f8c3 5d20 	str.w	r5, [r3, #3360]	; 0xd20
 800df2a:	f8c3 5d00 	str.w	r5, [r3, #3328]	; 0xd00
 800df2e:	f8d3 5e00 	ldr.w	r5, [r3, #3584]	; 0xe00
 800df32:	fa45 f601 	asr.w	r6, r5, r1
 800df36:	17ef      	asrs	r7, r5, #31
 800df38:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800df3c:	bf18      	it	ne
 800df3e:	ea80 0507 	eorne.w	r5, r0, r7
 800df42:	fa05 f50b 	lsl.w	r5, r5, fp
 800df46:	f8c3 5e20 	str.w	r5, [r3, #3616]	; 0xe20
 800df4a:	f8c3 5e00 	str.w	r5, [r3, #3584]	; 0xe00
 800df4e:	f8d3 5f00 	ldr.w	r5, [r3, #3840]	; 0xf00
 800df52:	fa45 f601 	asr.w	r6, r5, r1
 800df56:	17ef      	asrs	r7, r5, #31
 800df58:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800df5c:	bf18      	it	ne
 800df5e:	ea80 0507 	eorne.w	r5, r0, r7
 800df62:	fa05 f50b 	lsl.w	r5, r5, fp
 800df66:	f8c3 5f20 	str.w	r5, [r3, #3872]	; 0xf20
 800df6a:	f8c3 5f00 	str.w	r5, [r3, #3840]	; 0xf00
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		for (i = 15; i >= 0; i--) {
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800df6e:	9b01      	ldr	r3, [sp, #4]
 800df70:	591b      	ldr	r3, [r3, r4]
 800df72:	fa43 f501 	asr.w	r5, r3, r1
 800df76:	17de      	asrs	r6, r3, #31
 800df78:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800df7c:	9d01      	ldr	r5, [sp, #4]
 800df7e:	bf18      	it	ne
 800df80:	ea80 0306 	eorne.w	r3, r0, r6
 800df84:	fa03 f30b 	lsl.w	r3, r3, fp
 800df88:	6213      	str	r3, [r2, #32]
 800df8a:	512b      	str	r3, [r5, r4]
 800df8c:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 800df90:	fa43 f401 	asr.w	r4, r3, r1
 800df94:	17dd      	asrs	r5, r3, #31
 800df96:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800df9a:	bf18      	it	ne
 800df9c:	ea80 0305 	eorne.w	r3, r0, r5
 800dfa0:	fa03 f30b 	lsl.w	r3, r3, fp
 800dfa4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
 800dfa8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 800dfac:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800dfb0:	fa43 f401 	asr.w	r4, r3, r1
 800dfb4:	17dd      	asrs	r5, r3, #31
 800dfb6:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800dfba:	bf18      	it	ne
 800dfbc:	ea85 0300 	eorne.w	r3, r5, r0
 800dfc0:	fa03 f30b 	lsl.w	r3, r3, fp
 800dfc4:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 800dfc8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 800dfcc:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
 800dfd0:	fa43 f401 	asr.w	r4, r3, r1
 800dfd4:	17dd      	asrs	r5, r3, #31
 800dfd6:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800dfda:	bf18      	it	ne
 800dfdc:	ea80 0305 	eorne.w	r3, r0, r5
 800dfe0:	fa03 f30b 	lsl.w	r3, r3, fp
 800dfe4:	f8c2 3320 	str.w	r3, [r2, #800]	; 0x320
 800dfe8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
 800dfec:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 800dff0:	fa43 f401 	asr.w	r4, r3, r1
 800dff4:	17dd      	asrs	r5, r3, #31
 800dff6:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800dffa:	bf18      	it	ne
 800dffc:	ea80 0305 	eorne.w	r3, r0, r5
 800e000:	fa03 f30b 	lsl.w	r3, r3, fp
 800e004:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
 800e008:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 800e00c:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
 800e010:	fa43 f401 	asr.w	r4, r3, r1
 800e014:	17dd      	asrs	r5, r3, #31
 800e016:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e01a:	bf18      	it	ne
 800e01c:	ea80 0305 	eorne.w	r3, r0, r5
 800e020:	fa03 f30b 	lsl.w	r3, r3, fp
 800e024:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
 800e028:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
 800e02c:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800e030:	fa43 f401 	asr.w	r4, r3, r1
 800e034:	17dd      	asrs	r5, r3, #31
 800e036:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e03a:	bf18      	it	ne
 800e03c:	ea80 0305 	eorne.w	r3, r0, r5
 800e040:	fa03 f30b 	lsl.w	r3, r3, fp
 800e044:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
 800e048:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 800e04c:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
 800e050:	fa43 f401 	asr.w	r4, r3, r1
 800e054:	17dd      	asrs	r5, r3, #31
 800e056:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e05a:	bf18      	it	ne
 800e05c:	ea80 0305 	eorne.w	r3, r0, r5
 800e060:	fa03 f30b 	lsl.w	r3, r3, fp
 800e064:	f8c2 3720 	str.w	r3, [r2, #1824]	; 0x720
 800e068:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
 800e06c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800e070:	fa43 f401 	asr.w	r4, r3, r1
 800e074:	17dd      	asrs	r5, r3, #31
 800e076:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e07a:	bf18      	it	ne
 800e07c:	ea80 0305 	eorne.w	r3, r0, r5
 800e080:	fa03 f30b 	lsl.w	r3, r3, fp
 800e084:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
 800e088:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800e08c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800e090:	fa43 f401 	asr.w	r4, r3, r1
 800e094:	17dd      	asrs	r5, r3, #31
 800e096:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e09a:	bf18      	it	ne
 800e09c:	ea80 0305 	eorne.w	r3, r0, r5
 800e0a0:	fa03 f30b 	lsl.w	r3, r3, fp
 800e0a4:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
 800e0a8:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 800e0ac:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
 800e0b0:	fa43 f401 	asr.w	r4, r3, r1
 800e0b4:	17dd      	asrs	r5, r3, #31
 800e0b6:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e0ba:	bf18      	it	ne
 800e0bc:	ea80 0305 	eorne.w	r3, r0, r5
 800e0c0:	fa03 f30b 	lsl.w	r3, r3, fp
 800e0c4:	f8c2 3a20 	str.w	r3, [r2, #2592]	; 0xa20
 800e0c8:	f8c2 3a00 	str.w	r3, [r2, #2560]	; 0xa00
 800e0cc:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800e0d0:	fa43 f401 	asr.w	r4, r3, r1
 800e0d4:	17dd      	asrs	r5, r3, #31
 800e0d6:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e0da:	bf18      	it	ne
 800e0dc:	ea80 0305 	eorne.w	r3, r0, r5
 800e0e0:	fa03 f30b 	lsl.w	r3, r3, fp
 800e0e4:	f8c2 3b20 	str.w	r3, [r2, #2848]	; 0xb20
 800e0e8:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 800e0ec:	f8d2 3c00 	ldr.w	r3, [r2, #3072]	; 0xc00
 800e0f0:	fa43 f401 	asr.w	r4, r3, r1
 800e0f4:	17dd      	asrs	r5, r3, #31
 800e0f6:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e0fa:	bf18      	it	ne
 800e0fc:	ea85 0300 	eorne.w	r3, r5, r0
 800e100:	fa03 f30b 	lsl.w	r3, r3, fp
 800e104:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
 800e108:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e10c:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 800e110:	fa43 f401 	asr.w	r4, r3, r1
 800e114:	17dd      	asrs	r5, r3, #31
 800e116:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e11a:	bf18      	it	ne
 800e11c:	ea80 0305 	eorne.w	r3, r0, r5
 800e120:	fa03 f30b 	lsl.w	r3, r3, fp
 800e124:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
 800e128:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
 800e12c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800e130:	fa43 f401 	asr.w	r4, r3, r1
 800e134:	17dd      	asrs	r5, r3, #31
 800e136:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 800e13a:	bf18      	it	ne
 800e13c:	ea80 0305 	eorne.w	r3, r0, r5
 800e140:	fa03 f30b 	lsl.w	r3, r3, fp
 800e144:	f8c2 3e20 	str.w	r3, [r2, #3616]	; 0xe20
 800e148:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
 800e14c:	f8d2 3f00 	ldr.w	r3, [r2, #3840]	; 0xf00
 800e150:	fa43 f101 	asr.w	r1, r3, r1
 800e154:	17dc      	asrs	r4, r3, #31
 800e156:	ebb1 7fe3 	cmp.w	r1, r3, asr #31
 800e15a:	bf18      	it	ne
 800e15c:	ea80 0304 	eorne.w	r3, r0, r4
 800e160:	fa03 f30b 	lsl.w	r3, r3, fp
 800e164:	f8c2 3f20 	str.w	r3, [r2, #3872]	; 0xf20
 800e168:	f8c2 3f00 	str.w	r3, [r2, #3840]	; 0xf00
		}
	}
}
 800e16c:	b007      	add	sp, #28
 800e16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800e172:	9b02      	ldr	r3, [sp, #8]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800e174:	f44f 5488 	mov.w	r4, #4352	; 0x1100
 800e178:	9f01      	ldr	r7, [sp, #4]
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800e17a:	0099      	lsls	r1, r3, #2
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800e17c:	f502 5388 	add.w	r3, r2, #4352	; 0x1100
	s = buf[ 0];				d[0] = d[8] = s;
 800e180:	6805      	ldr	r5, [r0, #0]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800e182:	18fe      	adds	r6, r7, r3
	s = buf[ 0];				d[0] = d[8] = s;
 800e184:	6235      	str	r5, [r6, #32]
 800e186:	50fd      	str	r5, [r7, r3]
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800e188:	e508      	b.n	800db9c <xmp3fixpt_FDCT32+0x3c8>
	es = 0;
 800e18a:	f04f 0b00 	mov.w	fp, #0
 800e18e:	f7ff bb37 	b.w	800d800 <xmp3fixpt_FDCT32+0x2c>
 800e192:	bf00      	nop

0800e194 <xmp3fixpt_Dequantize>:
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800e194:	2800      	cmp	r0, #0
 800e196:	f000 819e 	beq.w	800e4d6 <xmp3fixpt_Dequantize+0x342>
{
 800e19a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800e19e:	6807      	ldr	r7, [r0, #0]
{
 800e1a0:	b08f      	sub	sp, #60	; 0x3c
 800e1a2:	4604      	mov	r4, r0
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800e1a4:	2f00      	cmp	r7, #0
 800e1a6:	f000 8193 	beq.w	800e4d0 <xmp3fixpt_Dequantize+0x33c>
 800e1aa:	6843      	ldr	r3, [r0, #4]
 800e1ac:	9306      	str	r3, [sp, #24]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f000 818e 	beq.w	800e4d0 <xmp3fixpt_Dequantize+0x33c>
 800e1b4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800e1b8:	f1ba 0f00 	cmp.w	sl, #0
 800e1bc:	f000 8188 	beq.w	800e4d0 <xmp3fixpt_Dequantize+0x33c>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800e1c0:	68c6      	ldr	r6, [r0, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800e1c2:	2e00      	cmp	r6, #0
 800e1c4:	f000 8184 	beq.w	800e4d0 <xmp3fixpt_Dequantize+0x33c>
 800e1c8:	460d      	mov	r5, r1
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800e1ca:	6901      	ldr	r1, [r0, #16]
 800e1cc:	2900      	cmp	r1, #0
 800e1ce:	f000 817f 	beq.w	800e4d0 <xmp3fixpt_Dequantize+0x33c>
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
	cbi = di->cbi;
	mOut[0] = mOut[1] = 0;

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e1d2:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
	cbi = di->cbi;
 800e1d6:	f501 7246 	add.w	r2, r1, #792	; 0x318
	mOut[0] = mOut[1] = 0;
 800e1da:	f04f 0800 	mov.w	r8, #0
 800e1de:	f04f 0900 	mov.w	r9, #0
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e1e2:	2b00      	cmp	r3, #0
	cbi = di->cbi;
 800e1e4:	9207      	str	r2, [sp, #28]
	mOut[0] = mOut[1] = 0;
 800e1e6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e1ea:	f340 8092 	ble.w	800e312 <xmp3fixpt_Dequantize+0x17e>
 800e1ee:	eb05 09c5 	add.w	r9, r5, r5, lsl #3
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800e1f2:	9806      	ldr	r0, [sp, #24]
 800e1f4:	9202      	str	r2, [sp, #8]
 800e1f6:	ebc5 1b45 	rsb	fp, r5, r5, lsl #5
 800e1fa:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800e1fe:	f506 5890 	add.w	r8, r6, #4608	; 0x1200
 800e202:	463b      	mov	r3, r7
 800e204:	9109      	str	r1, [sp, #36]	; 0x24
 800e206:	f109 0228 	add.w	r2, r9, #40	; 0x28
 800e20a:	4402      	add	r2, r0
 800e20c:	4630      	mov	r0, r6
 800e20e:	9200      	str	r2, [sp, #0]
 800e210:	eb0a 028b 	add.w	r2, sl, fp, lsl #2
 800e214:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800e218:	9201      	str	r2, [sp, #4]
 800e21a:	4642      	mov	r2, r8
 800e21c:	f000 fa58 	bl	800e6d0 <xmp3fixpt_DequantChannel>
 800e220:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e224:	9909      	ldr	r1, [sp, #36]	; 0x24
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800e226:	9308      	str	r3, [sp, #32]
 800e228:	f8c3 0208 	str.w	r0, [r3, #520]	; 0x208
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e22c:	f8d4 37bc 	ldr.w	r3, [r4, #1980]	; 0x7bc
 800e230:	2b01      	cmp	r3, #1
 800e232:	dd6e      	ble.n	800e312 <xmp3fixpt_Dequantize+0x17e>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800e234:	f10b 033e 	add.w	r3, fp, #62	; 0x3e
 800e238:	9806      	ldr	r0, [sp, #24]
 800e23a:	f241 2204 	movw	r2, #4612	; 0x1204
 800e23e:	4453      	add	r3, sl
 800e240:	4432      	add	r2, r6
 800e242:	9301      	str	r3, [sp, #4]
 800e244:	f109 0370 	add.w	r3, r9, #112	; 0x70
 800e248:	4403      	add	r3, r0
 800e24a:	f506 6010 	add.w	r0, r6, #2304	; 0x900
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	f501 734c 	add.w	r3, r1, #816	; 0x330
 800e254:	9302      	str	r3, [sp, #8]
 800e256:	463b      	mov	r3, r7
 800e258:	f000 fa3a 	bl	800e6d0 <xmp3fixpt_DequantChannel>
 800e25c:	9b08      	ldr	r3, [sp, #32]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e25e:	9909      	ldr	r1, [sp, #36]	; 0x24
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800e260:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e264:	f8d4 37bc 	ldr.w	r3, [r4, #1980]	; 0x7bc
 800e268:	2b02      	cmp	r3, #2
 800e26a:	dd52      	ble.n	800e312 <xmp3fixpt_Dequantize+0x17e>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800e26c:	f10b 037c 	add.w	r3, fp, #124	; 0x7c
 800e270:	9a06      	ldr	r2, [sp, #24]
 800e272:	4640      	mov	r0, r8
 800e274:	4453      	add	r3, sl
 800e276:	9301      	str	r3, [sp, #4]
 800e278:	f109 03b8 	add.w	r3, r9, #184	; 0xb8
 800e27c:	4413      	add	r3, r2
 800e27e:	f241 2208 	movw	r2, #4616	; 0x1208
 800e282:	9300      	str	r3, [sp, #0]
 800e284:	f501 7352 	add.w	r3, r1, #840	; 0x348
 800e288:	4432      	add	r2, r6
 800e28a:	9302      	str	r3, [sp, #8]
 800e28c:	463b      	mov	r3, r7
 800e28e:	f000 fa1f 	bl	800e6d0 <xmp3fixpt_DequantChannel>
 800e292:	9b08      	ldr	r3, [sp, #32]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e294:	9909      	ldr	r1, [sp, #36]	; 0x24
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800e296:	f8c3 0210 	str.w	r0, [r3, #528]	; 0x210
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e29a:	f8d4 37bc 	ldr.w	r3, [r4, #1980]	; 0x7bc
 800e29e:	2b03      	cmp	r3, #3
 800e2a0:	dd37      	ble.n	800e312 <xmp3fixpt_Dequantize+0x17e>
 800e2a2:	f10b 08ba 	add.w	r8, fp, #186	; 0xba
 800e2a6:	f509 7980 	add.w	r9, r9, #256	; 0x100
 800e2aa:	9a06      	ldr	r2, [sp, #24]
 800e2ac:	f506 5bd8 	add.w	fp, r6, #6912	; 0x1b00
 800e2b0:	950b      	str	r5, [sp, #44]	; 0x2c
 800e2b2:	4625      	mov	r5, r4
 800e2b4:	eb02 0309 	add.w	r3, r2, r9
 800e2b8:	eb0a 0208 	add.w	r2, sl, r8
 800e2bc:	f241 2914 	movw	r9, #4628	; 0x1214
 800e2c0:	f04f 0803 	mov.w	r8, #3
 800e2c4:	9208      	str	r2, [sp, #32]
 800e2c6:	f501 7258 	add.w	r2, r1, #864	; 0x360
 800e2ca:	44b1      	add	r9, r6
 800e2cc:	4614      	mov	r4, r2
 800e2ce:	e9cd a609 	strd	sl, r6, [sp, #36]	; 0x24
 800e2d2:	468a      	mov	sl, r1
 800e2d4:	461e      	mov	r6, r3
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800e2d6:	9b08      	ldr	r3, [sp, #32]
 800e2d8:	f1a9 0208 	sub.w	r2, r9, #8
 800e2dc:	4658      	mov	r0, fp
 800e2de:	9402      	str	r4, [sp, #8]
 800e2e0:	4651      	mov	r1, sl
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e2e2:	f108 0801 	add.w	r8, r8, #1
 800e2e6:	3418      	adds	r4, #24
 800e2e8:	f50b 6b10 	add.w	fp, fp, #2304	; 0x900
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800e2ec:	e9cd 6300 	strd	r6, r3, [sp]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e2f0:	333e      	adds	r3, #62	; 0x3e
 800e2f2:	3648      	adds	r6, #72	; 0x48
 800e2f4:	9308      	str	r3, [sp, #32]
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800e2f6:	463b      	mov	r3, r7
 800e2f8:	f000 f9ea 	bl	800e6d0 <xmp3fixpt_DequantChannel>
 800e2fc:	f849 0b04 	str.w	r0, [r9], #4
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800e300:	f8d5 27bc 	ldr.w	r2, [r5, #1980]	; 0x7bc
 800e304:	4542      	cmp	r2, r8
 800e306:	dce6      	bgt.n	800e2d6 <xmp3fixpt_Dequantize+0x142>
 800e308:	4651      	mov	r1, sl
 800e30a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e30c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e310:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 800e312:	6a38      	ldr	r0, [r7, #32]
 800e314:	2800      	cmp	r0, #0
 800e316:	d06a      	beq.n	800e3ee <xmp3fixpt_Dequantize+0x25a>
 800e318:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 800e31c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800e320:	2b00      	cmp	r3, #0
 800e322:	dd67      	ble.n	800e3f4 <xmp3fixpt_Dequantize+0x260>
 800e324:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800e328:	2b00      	cmp	r3, #0
 800e32a:	dd63      	ble.n	800e3f4 <xmp3fixpt_Dequantize+0x260>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 800e32c:	0843      	lsrs	r3, r0, #1
 800e32e:	f000 80d5 	beq.w	800e4dc <xmp3fixpt_Dequantize+0x348>
		if (fh->modeExt & 0x01) {
 800e332:	07c2      	lsls	r2, r0, #31
 800e334:	d50b      	bpl.n	800e34e <xmp3fixpt_Dequantize+0x1ba>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 800e336:	f8d1 3330 	ldr.w	r3, [r1, #816]	; 0x330
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f040 80b0 	bne.w	800e4a0 <xmp3fixpt_Dequantize+0x30c>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 800e340:	f8d1 3344 	ldr.w	r3, [r1, #836]	; 0x344
 800e344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e346:	3301      	adds	r3, #1
 800e348:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800e34c:	e004      	b.n	800e358 <xmp3fixpt_Dequantize+0x1c4>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800e34e:	e9d4 3180 	ldrd	r3, r1, [r4, #512]	; 0x200
 800e352:	4299      	cmp	r1, r3
 800e354:	bfb8      	it	lt
 800e356:	4619      	movlt	r1, r3
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 800e358:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e35c:	4630      	mov	r0, r6
 800e35e:	4642      	mov	r2, r8
 800e360:	f004 fb34 	bl	80129cc <xmp3fixpt_MidSideProc>
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 800e364:	6a38      	ldr	r0, [r7, #32]
 800e366:	07c3      	lsls	r3, r0, #31
 800e368:	d51e      	bpl.n	800e3a8 <xmp3fixpt_Dequantize+0x214>
		nSamps = hi->nonZeroBound[0];
		if (fh->ver == MPEG1) {
 800e36a:	783b      	ldrb	r3, [r7, #0]
		nSamps = hi->nonZeroBound[0];
 800e36c:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
		if (fh->ver == MPEG1) {
 800e370:	2b00      	cmp	r3, #0
 800e372:	d179      	bne.n	800e468 <xmp3fixpt_Dequantize+0x2d4>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800e374:	9b06      	ldr	r3, [sp, #24]
 800e376:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800e37a:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800e37e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e382:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800e386:	ea4f 0c60 	mov.w	ip, r0, asr #1
 800e38a:	4630      	mov	r0, r6
 800e38c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800e390:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 800e394:	9d07      	ldr	r5, [sp, #28]
 800e396:	9202      	str	r2, [sp, #8]
 800e398:	333e      	adds	r3, #62	; 0x3e
 800e39a:	463a      	mov	r2, r7
 800e39c:	f8cd c004 	str.w	ip, [sp, #4]
 800e3a0:	9500      	str	r5, [sp, #0]
 800e3a2:	f004 fb47 	bl	8012a34 <xmp3fixpt_IntensityProcMPEG1>
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 800e3a6:	6a38      	ldr	r0, [r7, #32]
 800e3a8:	b308      	cbz	r0, 800e3ee <xmp3fixpt_Dequantize+0x25a>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800e3aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30

static __inline int CLZ(int x)
{
	int numZeros;

	if (!x)
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f000 8081 	beq.w	800e4b4 <xmp3fixpt_Dequantize+0x320>
		return (sizeof(int) * 8);

	numZeros = 0;
	while (!(x & 0x80000000)) {
 800e3b2:	f2c0 8087 	blt.w	800e4c4 <xmp3fixpt_Dequantize+0x330>
	numZeros = 0;
 800e3b6:	2200      	movs	r2, #0
	while (!(x & 0x80000000)) {
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	4611      	mov	r1, r2
		numZeros++;
 800e3bc:	f102 0201 	add.w	r2, r2, #1
	while (!(x & 0x80000000)) {
 800e3c0:	d5fa      	bpl.n	800e3b8 <xmp3fixpt_Dequantize+0x224>
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800e3c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800e3c4:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
	if (!x)
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d079      	beq.n	800e4c0 <xmp3fixpt_Dequantize+0x32c>
	while (!(x & 0x80000000)) {
 800e3cc:	db7d      	blt.n	800e4ca <xmp3fixpt_Dequantize+0x336>
	numZeros = 0;
 800e3ce:	2200      	movs	r2, #0
	while (!(x & 0x80000000)) {
 800e3d0:	005b      	lsls	r3, r3, #1
 800e3d2:	4611      	mov	r1, r2
		numZeros++;
 800e3d4:	f102 0201 	add.w	r2, r2, #1
	while (!(x & 0x80000000)) {
 800e3d8:	d5fa      	bpl.n	800e3d0 <xmp3fixpt_Dequantize+0x23c>
		hi->nonZeroBound[0] = nSamps;
		hi->nonZeroBound[1] = nSamps;
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 800e3da:	2000      	movs	r0, #0
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800e3dc:	f8c4 120c 	str.w	r1, [r4, #524]	; 0x20c
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800e3e0:	e9d4 2380 	ldrd	r2, r3, [r4, #512]	; 0x200
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	bfb8      	it	lt
 800e3e8:	4613      	movlt	r3, r2
		hi->nonZeroBound[1] = nSamps;
 800e3ea:	e9c4 3380 	strd	r3, r3, [r4, #512]	; 0x200
}
 800e3ee:	b00f      	add	sp, #60	; 0x3c
 800e3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800e3f4:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800e3f8:	2a00      	cmp	r2, #0
 800e3fa:	dd17      	ble.n	800e42c <xmp3fixpt_Dequantize+0x298>
 800e3fc:	1f33      	subs	r3, r6, #4
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800e3fe:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800e402:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800e4e4 <xmp3fixpt_Dequantize+0x350>
 800e406:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800e40a:	e003      	b.n	800e414 <xmp3fixpt_Dequantize+0x280>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800e40c:	4563      	cmp	r3, ip
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800e40e:	f8c3 e000 	str.w	lr, [r3]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800e412:	d00b      	beq.n	800e42c <xmp3fixpt_Dequantize+0x298>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800e414:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800e418:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800e41c:	ddf6      	ble.n	800e40c <xmp3fixpt_Dequantize+0x278>
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800e41e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e422:	bfa8      	it	ge
 800e424:	f8c3 8000 	strge.w	r8, [r3]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800e428:	4563      	cmp	r3, ip
 800e42a:	d1f3      	bne.n	800e414 <xmp3fixpt_Dequantize+0x280>
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800e42c:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 800e430:	2a00      	cmp	r2, #0
 800e432:	f77f af7b 	ble.w	800e32c <xmp3fixpt_Dequantize+0x198>
 800e436:	f606 03fc 	addw	r3, r6, #2300	; 0x8fc
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800e43a:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800e43e:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 800e4e4 <xmp3fixpt_Dequantize+0x350>
 800e442:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800e446:	e004      	b.n	800e452 <xmp3fixpt_Dequantize+0x2be>
 800e448:	f8c3 e000 	str.w	lr, [r3]
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800e44c:	459c      	cmp	ip, r3
 800e44e:	f43f af6d 	beq.w	800e32c <xmp3fixpt_Dequantize+0x198>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800e452:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800e456:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800e45a:	ddf5      	ble.n	800e448 <xmp3fixpt_Dequantize+0x2b4>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800e45c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e460:	bfa8      	it	ge
 800e462:	f8c3 8000 	strge.w	r8, [r3]
 800e466:	e7f1      	b.n	800e44c <xmp3fixpt_Dequantize+0x2b8>
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800e468:	1042      	asrs	r2, r0, #1
 800e46a:	4630      	mov	r0, r6
 800e46c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800e470:	9e06      	ldr	r6, [sp, #24]
 800e472:	f8cd 8010 	str.w	r8, [sp, #16]
 800e476:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800e47a:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 800e47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e482:	9202      	str	r2, [sp, #8]
 800e484:	9a07      	ldr	r2, [sp, #28]
 800e486:	9303      	str	r3, [sp, #12]
 800e488:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 800e48c:	9200      	str	r2, [sp, #0]
 800e48e:	f10a 02f8 	add.w	r2, sl, #248	; 0xf8
 800e492:	333e      	adds	r3, #62	; 0x3e
 800e494:	9201      	str	r2, [sp, #4]
 800e496:	463a      	mov	r2, r7
 800e498:	f004 fc84 	bl	8012da4 <xmp3fixpt_IntensityProcMPEG2>
	if (fh->modeExt) {
 800e49c:	6a38      	ldr	r0, [r7, #32]
 800e49e:	e783      	b.n	800e3a8 <xmp3fixpt_Dequantize+0x214>
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 800e4a0:	f8d1 2340 	ldr.w	r2, [r1, #832]	; 0x340
 800e4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e4aa:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 800e4ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e4b2:	e751      	b.n	800e358 <xmp3fixpt_Dequantize+0x1c4>
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800e4b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4b6:	211f      	movs	r1, #31
	if (!x)
 800e4b8:	2b00      	cmp	r3, #0
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800e4ba:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
 800e4be:	d185      	bne.n	800e3cc <xmp3fixpt_Dequantize+0x238>
 800e4c0:	211f      	movs	r1, #31
 800e4c2:	e78a      	b.n	800e3da <xmp3fixpt_Dequantize+0x246>
	while (!(x & 0x80000000)) {
 800e4c4:	f04f 31ff 	mov.w	r1, #4294967295
 800e4c8:	e77b      	b.n	800e3c2 <xmp3fixpt_Dequantize+0x22e>
 800e4ca:	f04f 31ff 	mov.w	r1, #4294967295
 800e4ce:	e784      	b.n	800e3da <xmp3fixpt_Dequantize+0x246>
		return -1;
 800e4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d4:	e78b      	b.n	800e3ee <xmp3fixpt_Dequantize+0x25a>
 800e4d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e4da:	4770      	bx	lr
 800e4dc:	2001      	movs	r0, #1
 800e4de:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e4e2:	e742      	b.n	800e36a <xmp3fixpt_Dequantize+0x1d6>
 800e4e4:	c0000001 	.word	0xc0000001

0800e4e8 <DequantBlock>:
 * Outputs:     dequantized samples in Q25 format
 *
 * Return:      bitwise-OR of the unsigned outputs (for guard bit calculations)
 **************************************************************************************/
static int DequantBlock(int *inbuf, int *outbuf, int num, int scale)
{
 800e4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int mask = 0;
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
	scalef = pow14[scale & 0x3];
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e4ec:	ea4f 08a3 	mov.w	r8, r3, asr #2
	tab16 = pow43_14[scale & 0x3];
 800e4f0:	f003 0503 	and.w	r5, r3, #3
 800e4f4:	4b63      	ldr	r3, [pc, #396]	; (800e684 <DequantBlock+0x19c>)
{
 800e4f6:	b089      	sub	sp, #36	; 0x24

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 800e4f8:	4644      	mov	r4, r8
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e4fa:	46c3      	mov	fp, r8
	tab16 = pow43_14[scale & 0x3];
 800e4fc:	eb03 1985 	add.w	r9, r3, r5, lsl #6
	scalef = pow14[scale & 0x3];
 800e500:	4b61      	ldr	r3, [pc, #388]	; (800e688 <DequantBlock+0x1a0>)
	shift = MIN(scalei + 3, 31);
 800e502:	2c1c      	cmp	r4, #28
{
 800e504:	4686      	mov	lr, r0
	scalef = pow14[scale & 0x3];
 800e506:	f853 a025 	ldr.w	sl, [r3, r5, lsl #2]
	shift = MAX(shift, 0);
	tab4[0] = 0;
 800e50a:	f04f 0000 	mov.w	r0, #0
	shift = MIN(scalei + 3, 31);
 800e50e:	bfa8      	it	ge
 800e510:	241c      	movge	r4, #28
	tab4[1] = tab16[1] >> shift;
 800e512:	f8d9 3004 	ldr.w	r3, [r9, #4]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e516:	f1b8 0f1f 	cmp.w	r8, #31
	tab4[0] = 0;
 800e51a:	9004      	str	r0, [sp, #16]
	shift = MIN(scalei + 3, 31);
 800e51c:	f104 0403 	add.w	r4, r4, #3
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e520:	bfa8      	it	ge
 800e522:	f04f 0b1f 	movge.w	fp, #31
	shift = MAX(shift, 0);
 800e526:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	tab4[1] = tab16[1] >> shift;
 800e52a:	4123      	asrs	r3, r4
 800e52c:	9305      	str	r3, [sp, #20]
	tab4[2] = tab16[2] >> shift;
 800e52e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e532:	4123      	asrs	r3, r4
 800e534:	9306      	str	r3, [sp, #24]
	tab4[3] = tab16[3] >> shift;
 800e536:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e53a:	4123      	asrs	r3, r4
 800e53c:	9307      	str	r3, [sp, #28]
				if (x < 0x20000000)
					x <<= 2, shift += 2;
				if (x < 0x40000000)
					x <<= 1, shift += 1;

				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800e53e:	465b      	mov	r3, fp
 800e540:	46c3      	mov	fp, r8
 800e542:	46c8      	mov	r8, r9
 800e544:	46d1      	mov	r9, sl
 800e546:	469a      	mov	sl, r3
 800e548:	e00e      	b.n	800e568 <DequantBlock+0x80>
			y = tab4[x];
 800e54a:	ac08      	add	r4, sp, #32
 800e54c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e550:	f855 4c10 	ldr.w	r4, [r5, #-16]
			}
		}

		/* sign and store */
		mask |= y;
		*outbuf++ = (sx < 0) ? -y : y;
 800e554:	2b00      	cmp	r3, #0
		mask |= y;
 800e556:	ea40 0004 	orr.w	r0, r0, r4
		*outbuf++ = (sx < 0) ? -y : y;
 800e55a:	bfb8      	it	lt
 800e55c:	4264      	neglt	r4, r4

	} while (--num);
 800e55e:	3a01      	subs	r2, #1
		*outbuf++ = (sx < 0) ? -y : y;
 800e560:	f841 4b04 	str.w	r4, [r1], #4
	} while (--num);
 800e564:	f000 8083 	beq.w	800e66e <DequantBlock+0x186>
		sx = *inbuf++;
 800e568:	f85e 3b04 	ldr.w	r3, [lr], #4
		if (x < 4) {
 800e56c:	4c47      	ldr	r4, [pc, #284]	; (800e68c <DequantBlock+0x1a4>)
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 800e56e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
		if (x < 4) {
 800e572:	401c      	ands	r4, r3
 800e574:	2c00      	cmp	r4, #0
 800e576:	d0e8      	beq.n	800e54a <DequantBlock+0x62>
		} else if (x < 16) {
 800e578:	4c45      	ldr	r4, [pc, #276]	; (800e690 <DequantBlock+0x1a8>)
 800e57a:	401c      	ands	r4, r3
 800e57c:	b93c      	cbnz	r4, 800e58e <DequantBlock+0xa6>
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800e57e:	f1bb 0f00 	cmp.w	fp, #0
			y = tab16[x];
 800e582:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800e586:	db75      	blt.n	800e674 <DequantBlock+0x18c>
 800e588:	fa44 f40a 	asr.w	r4, r4, sl
 800e58c:	e7e2      	b.n	800e554 <DequantBlock+0x6c>
			if (x < 64) {
 800e58e:	4c41      	ldr	r4, [pc, #260]	; (800e694 <DequantBlock+0x1ac>)
 800e590:	401c      	ands	r4, r3
 800e592:	b974      	cbnz	r4, 800e5b2 <DequantBlock+0xca>
				y = pow43[x-16];
 800e594:	4c40      	ldr	r4, [pc, #256]	; (800e698 <DequantBlock+0x1b0>)
 800e596:	3d10      	subs	r5, #16
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e598:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800e59c:	464c      	mov	r4, r9
 800e59e:	fb85 6404 	smull	r6, r4, r5, r4
 800e5a2:	4625      	mov	r5, r4
				shift = scalei - 3;
 800e5a4:	f1aa 0403 	sub.w	r4, sl, #3
			if (shift < 0) {
 800e5a8:	2c00      	cmp	r4, #0
 800e5aa:	db55      	blt.n	800e658 <DequantBlock+0x170>
				y >>= shift;
 800e5ac:	fa45 f404 	asr.w	r4, r5, r4
 800e5b0:	e7d0      	b.n	800e554 <DequantBlock+0x6c>
				x <<= 17;
 800e5b2:	046c      	lsls	r4, r5, #17
				if (x < 0x08000000)
 800e5b4:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 800e5b8:	da60      	bge.n	800e67c <DequantBlock+0x194>
					x <<= 4, shift += 4;
 800e5ba:	056c      	lsls	r4, r5, #21
 800e5bc:	2604      	movs	r6, #4
 800e5be:	2506      	movs	r5, #6
 800e5c0:	9600      	str	r6, [sp, #0]
				if (x < 0x20000000)
 800e5c2:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800e5c6:	da01      	bge.n	800e5cc <DequantBlock+0xe4>
					x <<= 2, shift += 2;
 800e5c8:	00a4      	lsls	r4, r4, #2
 800e5ca:	9500      	str	r5, [sp, #0]
				if (x < 0x40000000)
 800e5cc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e5d0:	da03      	bge.n	800e5da <DequantBlock+0xf2>
					x <<= 1, shift += 1;
 800e5d2:	9d00      	ldr	r5, [sp, #0]
 800e5d4:	0064      	lsls	r4, r4, #1
 800e5d6:	3501      	adds	r5, #1
 800e5d8:	9500      	str	r5, [sp, #0]
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800e5da:	4d30      	ldr	r5, [pc, #192]	; (800e69c <DequantBlock+0x1b4>)
 800e5dc:	4e30      	ldr	r6, [pc, #192]	; (800e6a0 <DequantBlock+0x1b8>)
 800e5de:	42ac      	cmp	r4, r5
 800e5e0:	4d30      	ldr	r5, [pc, #192]	; (800e6a4 <DequantBlock+0x1bc>)
 800e5e2:	4f31      	ldr	r7, [pc, #196]	; (800e6a8 <DequantBlock+0x1c0>)
 800e5e4:	bfc8      	it	gt
 800e5e6:	46ac      	movgt	ip, r5
 800e5e8:	4d30      	ldr	r5, [pc, #192]	; (800e6ac <DequantBlock+0x1c4>)
 800e5ea:	bfd8      	it	le
 800e5ec:	46b4      	movle	ip, r6
 800e5ee:	4e30      	ldr	r6, [pc, #192]	; (800e6b0 <DequantBlock+0x1c8>)
 800e5f0:	bfd8      	it	le
 800e5f2:	462e      	movle	r6, r5
 800e5f4:	4d2f      	ldr	r5, [pc, #188]	; (800e6b4 <DequantBlock+0x1cc>)
 800e5f6:	bfd8      	it	le
 800e5f8:	462f      	movle	r7, r5
 800e5fa:	4d2f      	ldr	r5, [pc, #188]	; (800e6b8 <DequantBlock+0x1d0>)
 800e5fc:	9703      	str	r7, [sp, #12]
 800e5fe:	4f2f      	ldr	r7, [pc, #188]	; (800e6bc <DequantBlock+0x1d4>)
 800e600:	bfd8      	it	le
 800e602:	462f      	movle	r7, r5
 800e604:	4d2e      	ldr	r5, [pc, #184]	; (800e6c0 <DequantBlock+0x1d8>)
 800e606:	9702      	str	r7, [sp, #8]
 800e608:	4f2e      	ldr	r7, [pc, #184]	; (800e6c4 <DequantBlock+0x1dc>)
 800e60a:	bfd8      	it	le
 800e60c:	462f      	movle	r7, r5
 800e60e:	4625      	mov	r5, r4
 800e610:	9701      	str	r7, [sp, #4]
 800e612:	fb86 7505 	smull	r7, r5, r6, r5
				y = MULSHIFT32(y, x) + coef[1];
 800e616:	4465      	add	r5, ip
 800e618:	4626      	mov	r6, r4
 800e61a:	fb85 c606 	smull	ip, r6, r5, r6
				y = MULSHIFT32(y, x) + coef[2];
 800e61e:	9f01      	ldr	r7, [sp, #4]
 800e620:	4625      	mov	r5, r4
 800e622:	443e      	add	r6, r7
 800e624:	fb86 c505 	smull	ip, r5, r6, r5
				y = MULSHIFT32(y, x) + coef[3];
 800e628:	9f02      	ldr	r7, [sp, #8]
 800e62a:	443d      	add	r5, r7
 800e62c:	fb85 6404 	smull	r6, r4, r5, r4
				y = MULSHIFT32(y, x) + coef[4];
 800e630:	9f03      	ldr	r7, [sp, #12]
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800e632:	4d25      	ldr	r5, [pc, #148]	; (800e6c8 <DequantBlock+0x1e0>)
				y = MULSHIFT32(y, x) + coef[4];
 800e634:	443c      	add	r4, r7
 800e636:	9f00      	ldr	r7, [sp, #0]
 800e638:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 800e63c:	fb84 6505 	smull	r6, r5, r4, r5
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800e640:	00ed      	lsls	r5, r5, #3
 800e642:	464c      	mov	r4, r9
 800e644:	fb85 6404 	smull	r6, r4, r5, r4
 800e648:	4625      	mov	r5, r4
				shift = scalei - pow2exp[shift];
 800e64a:	4c20      	ldr	r4, [pc, #128]	; (800e6cc <DequantBlock+0x1e4>)
 800e64c:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 800e650:	ebaa 0404 	sub.w	r4, sl, r4
			if (shift < 0) {
 800e654:	2c00      	cmp	r4, #0
 800e656:	daa9      	bge.n	800e5ac <DequantBlock+0xc4>
				shift = -shift;
 800e658:	4266      	negs	r6, r4
				if (y > (0x7fffffff >> shift))
 800e65a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e65e:	fa44 f706 	asr.w	r7, r4, r6
 800e662:	42af      	cmp	r7, r5
 800e664:	f6ff af76 	blt.w	800e554 <DequantBlock+0x6c>
					y <<= shift;
 800e668:	fa05 f406 	lsl.w	r4, r5, r6
 800e66c:	e772      	b.n	800e554 <DequantBlock+0x6c>

	return mask;
}
 800e66e:	b009      	add	sp, #36	; 0x24
 800e670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800e674:	f1ca 0500 	rsb	r5, sl, #0
 800e678:	40ac      	lsls	r4, r5
 800e67a:	e76b      	b.n	800e554 <DequantBlock+0x6c>
				shift = 0;
 800e67c:	2600      	movs	r6, #0
 800e67e:	2502      	movs	r5, #2
 800e680:	9600      	str	r6, [sp, #0]
 800e682:	e79e      	b.n	800e5c2 <DequantBlock+0xda>
 800e684:	08020ce4 	.word	0x08020ce4
 800e688:	08020bd4 	.word	0x08020bd4
 800e68c:	7ffffffc 	.word	0x7ffffffc
 800e690:	7ffffff0 	.word	0x7ffffff0
 800e694:	7fffffc0 	.word	0x7fffffc0
 800e698:	08020c24 	.word	0x08020c24
 800e69c:	5a827999 	.word	0x5a827999
 800e6a0:	b02e4828 	.word	0xb02e4828
 800e6a4:	d333f6a4 	.word	0xd333f6a4
 800e6a8:	fef577b4 	.word	0xfef577b4
 800e6ac:	29a0bda9 	.word	0x29a0bda9
 800e6b0:	10852163 	.word	0x10852163
 800e6b4:	ff581859 	.word	0xff581859
 800e6b8:	236c498d 	.word	0x236c498d
 800e6bc:	27c2cef0 	.word	0x27c2cef0
 800e6c0:	5957aa1b 	.word	0x5957aa1b
 800e6c4:	46e9408b 	.word	0x46e9408b
 800e6c8:	08020c04 	.word	0x08020c04
 800e6cc:	08020be4 	.word	0x08020be4

0800e6d0 <xmp3fixpt_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 800e6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d4:	b091      	sub	sp, #68	; 0x44
 800e6d6:	930a      	str	r3, [sp, #40]	; 0x28
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 800e6d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
{
 800e6da:	9007      	str	r0, [sp, #28]
	if (sis->blockType == 2) {
 800e6dc:	695b      	ldr	r3, [r3, #20]
{
 800e6de:	9109      	str	r1, [sp, #36]	; 0x24
	if (sis->blockType == 2) {
 800e6e0:	2b02      	cmp	r3, #2
{
 800e6e2:	9206      	str	r2, [sp, #24]
	if (sis->blockType == 2) {
 800e6e4:	f000 8146 	beq.w	800e974 <xmp3fixpt_DequantChannel+0x2a4>
		cbEndS = 13;
	} else {
		/* long block */
		cbStartL = 0;
		cbEndL =   22;
		cbStartS = 13;
 800e6e8:	230d      	movs	r3, #13
		cbEndL =   22;
 800e6ea:	f04f 0a16 	mov.w	sl, #22
		cbStartS = 13;
 800e6ee:	9303      	str	r3, [sp, #12]

	/* sfactScale = 0 --> quantizer step size = 2
	 * sfactScale = 1 --> quantizer step size = sqrt(2)
	 *   so sfactMultiplier = 2 or 4 (jump through globalGain by powers of 2 or sqrt(2))
	 */
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e6f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68

	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
 800e6f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	globalGain = sis->globalGain;
 800e6f6:	6892      	ldr	r2, [r2, #8]
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e6f8:	3301      	adds	r3, #1
	globalGain = sis->globalGain;
 800e6fa:	9208      	str	r2, [sp, #32]
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e6fc:	005b      	lsls	r3, r3, #1
 800e6fe:	9301      	str	r3, [sp, #4]
	if (fh->modeExt >> 1)
 800e700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e702:	6a1b      	ldr	r3, [r3, #32]
 800e704:	085b      	lsrs	r3, r3, #1
 800e706:	d101      	bne.n	800e70c <xmp3fixpt_DequantChannel+0x3c>
		 globalGain -= 2;
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 800e708:	3202      	adds	r2, #2
 800e70a:	9208      	str	r2, [sp, #32]

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 800e70c:	2300      	movs	r3, #0
 800e70e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e710:	f8cd a010 	str.w	sl, [sp, #16]
 800e714:	461c      	mov	r4, r3
 800e716:	461e      	mov	r6, r3
 800e718:	f102 38ff 	add.w	r8, r2, #4294967295
 800e71c:	9305      	str	r3, [sp, #20]

		nonZero = 0;
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e71e:	9a08      	ldr	r2, [sp, #32]
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e720:	f104 0901 	add.w	r9, r4, #1
 800e724:	9302      	str	r3, [sp, #8]
	for (cb = 0; cb < cbEndL; cb++) {
 800e726:	9b04      	ldr	r3, [sp, #16]
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e728:	f1c2 07d2 	rsb	r7, r2, #210	; 0xd2
 800e72c:	4d9d      	ldr	r5, [pc, #628]	; (800e9a4 <xmp3fixpt_DequantChannel+0x2d4>)
	for (cb = 0; cb < cbEndL; cb++) {
 800e72e:	429c      	cmp	r4, r3
 800e730:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e734:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e738:	9700      	str	r7, [sp, #0]
	for (cb = 0; cb < cbEndL; cb++) {
 800e73a:	d02e      	beq.n	800e79a <xmp3fixpt_DequantChannel+0xca>
 800e73c:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34

		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e740:	9b07      	ldr	r3, [sp, #28]
 800e742:	eb02 0e44 	add.w	lr, r2, r4, lsl #1
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e746:	f932 c014 	ldrsh.w	ip, [r2, r4, lsl #1]
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e74a:	f8db 003c 	ldr.w	r0, [fp, #60]	; 0x3c
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e74e:	eb03 0186 	add.w	r1, r3, r6, lsl #2
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e752:	f9be 2002 	ldrsh.w	r2, [lr, #2]
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e756:	f818 3f01 	ldrb.w	r3, [r8, #1]!
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e75a:	eba2 020c 	sub.w	r2, r2, ip
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e75e:	b108      	cbz	r0, 800e764 <xmp3fixpt_DequantChannel+0x94>
 800e760:	7828      	ldrb	r0, [r5, #0]
 800e762:	4403      	add	r3, r0
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e764:	9801      	ldr	r0, [sp, #4]
		i += nSamps;
 800e766:	4416      	add	r6, r2
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e768:	fb03 7300 	mla	r3, r3, r0, r7
 800e76c:	4608      	mov	r0, r1
 800e76e:	f7ff febb 	bl	800e4e8 <DequantBlock>

		/* update highest non-zero critical band */
		if (nonZero) 
 800e772:	2800      	cmp	r0, #0
 800e774:	f000 80c9 	beq.w	800e90a <xmp3fixpt_DequantChannel+0x23a>
			cbMax[0] = cb;
		gbMask |= nonZero;
 800e778:	9b02      	ldr	r3, [sp, #8]

		if (i >= *nonZeroBound) 
 800e77a:	3501      	adds	r5, #1
 800e77c:	9405      	str	r4, [sp, #20]
		gbMask |= nonZero;
 800e77e:	4303      	orrs	r3, r0
 800e780:	9302      	str	r3, [sp, #8]
		if (i >= *nonZeroBound) 
 800e782:	9b06      	ldr	r3, [sp, #24]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	42b3      	cmp	r3, r6
 800e788:	f340 80d7 	ble.w	800e93a <xmp3fixpt_DequantChannel+0x26a>
	for (cb = 0; cb < cbEndL; cb++) {
 800e78c:	464c      	mov	r4, r9
 800e78e:	9b04      	ldr	r3, [sp, #16]
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e790:	f104 0901 	add.w	r9, r4, #1
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e794:	9700      	str	r7, [sp, #0]
	for (cb = 0; cb < cbEndL; cb++) {
 800e796:	429c      	cmp	r4, r3
 800e798:	d1d0      	bne.n	800e73c <xmp3fixpt_DequantChannel+0x6c>
			break;
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
	cbi->cbEndL  = cbMax[0];
 800e79a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e79c:	9a05      	ldr	r2, [sp, #20]
 800e79e:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e7a2:	615a      	str	r2, [r3, #20]
	cbi->cbType = 0;			/* long only */
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e7a8:	6013      	str	r3, [r2, #0]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800e7aa:	6053      	str	r3, [r2, #4]
	cbi->cbEndSMax = 0;
 800e7ac:	6113      	str	r3, [r2, #16]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800e7ae:	e9c2 3302 	strd	r3, r3, [r2, #8]

	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 800e7b2:	9b03      	ldr	r3, [sp, #12]
 800e7b4:	2b0b      	cmp	r3, #11
 800e7b6:	f300 80b0 	bgt.w	800e91a <xmp3fixpt_DequantChannel+0x24a>
 800e7ba:	9b08      	ldr	r3, [sp, #32]
 800e7bc:	f1c3 03d2 	rsb	r3, r3, #210	; 0xd2
 800e7c0:	9300      	str	r3, [sp, #0]
		return CLZ(gbMask) - 1;
	
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800e7c2:	9b03      	ldr	r3, [sp, #12]
 800e7c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e7c6:	930e      	str	r3, [sp, #56]	; 0x38
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800e7c8:	9602      	str	r6, [sp, #8]
 800e7ca:	f8cd b010 	str.w	fp, [sp, #16]
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800e7ce:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800e7d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e7d6:	3317      	adds	r3, #23
 800e7d8:	18d3      	adds	r3, r2, r3
 800e7da:	9305      	str	r3, [sp, #20]
 800e7dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e7de:	3328      	adds	r3, #40	; 0x28
 800e7e0:	930b      	str	r3, [sp, #44]	; 0x2c

		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e7e2:	9b03      	ldr	r3, [sp, #12]
 800e7e4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e7e8:	9902      	ldr	r1, [sp, #8]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	9308      	str	r3, [sp, #32]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
		for (w = 0; w < 3; w++) {
			nonZero =  0;
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);

			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e7f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e7f6:	9303      	str	r3, [sp, #12]
 800e7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e7fa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e800:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e804:	9a07      	ldr	r2, [sp, #28]
 800e806:	eb02 0481 	add.w	r4, r2, r1, lsl #2
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e80a:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 800e80e:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e812:	4627      	mov	r7, r4
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e814:	eba1 0b02 	sub.w	fp, r1, r2
		for (w = 0; w < 3; w++) {
 800e818:	ea4f 058b 	mov.w	r5, fp, lsl #2
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 800e81c:	9900      	ldr	r1, [sp, #0]
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e81e:	4638      	mov	r0, r7
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 800e820:	f85a 3b04 	ldr.w	r3, [sl], #4
 800e824:	f819 2b01 	ldrb.w	r2, [r9], #1
 800e828:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e82c:	9901      	ldr	r1, [sp, #4]
 800e82e:	fb01 3302 	mla	r3, r1, r2, r3
 800e832:	465a      	mov	r2, fp
 800e834:	4631      	mov	r1, r6
 800e836:	f7ff fe57 	bl	800e4e8 <DequantBlock>

			/* update highest non-zero critical band */
			if (nonZero)
 800e83a:	2800      	cmp	r0, #0
 800e83c:	f000 8091 	beq.w	800e962 <xmp3fixpt_DequantChannel+0x292>
				cbMax[w] = cb;
 800e840:	9b08      	ldr	r3, [sp, #32]
		for (w = 0; w < 3; w++) {
 800e842:	442f      	add	r7, r5
 800e844:	442e      	add	r6, r5
				cbMax[w] = cb;
 800e846:	f848 3b04 	str.w	r3, [r8], #4
			gbMask |= nonZero;
 800e84a:	9b04      	ldr	r3, [sp, #16]
 800e84c:	4303      	orrs	r3, r0
 800e84e:	9304      	str	r3, [sp, #16]
		for (w = 0; w < 3; w++) {
 800e850:	ab0f      	add	r3, sp, #60	; 0x3c
 800e852:	4598      	cmp	r8, r3
 800e854:	d1e2      	bne.n	800e81c <xmp3fixpt_DequantChannel+0x14c>
		}

		/* reorder blocks */
		buf = (ARRAY3 *)(sampleBuf + i);
		i += 3*nSamps;
 800e856:	9a02      	ldr	r2, [sp, #8]
 800e858:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
		for (j = 0; j < nSamps; j++) {
 800e85c:	f1bb 0f00 	cmp.w	fp, #0
		i += 3*nSamps;
 800e860:	ea4f 014b 	mov.w	r1, fp, lsl #1
 800e864:	441a      	add	r2, r3
 800e866:	9202      	str	r2, [sp, #8]
		for (j = 0; j < nSamps; j++) {
 800e868:	dd1b      	ble.n	800e8a2 <xmp3fixpt_DequantChannel+0x1d2>
 800e86a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800e86e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800e872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e874:	445a      	add	r2, fp
 800e876:	3901      	subs	r1, #1
 800e878:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e87c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e880:	3b04      	subs	r3, #4
 800e882:	441d      	add	r5, r3
			buf[j][0] = workBuf[0*nSamps + j];
 800e884:	f853 0f04 	ldr.w	r0, [r3, #4]!
		for (j = 0; j < nSamps; j++) {
 800e888:	340c      	adds	r4, #12
			buf[j][0] = workBuf[0*nSamps + j];
 800e88a:	f844 0c0c 	str.w	r0, [r4, #-12]
		for (j = 0; j < nSamps; j++) {
 800e88e:	429d      	cmp	r5, r3
			buf[j][1] = workBuf[1*nSamps + j];
 800e890:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e894:	f844 0c08 	str.w	r0, [r4, #-8]
			buf[j][2] = workBuf[2*nSamps + j];
 800e898:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800e89c:	f844 0c04 	str.w	r0, [r4, #-4]
		for (j = 0; j < nSamps; j++) {
 800e8a0:	d1f0      	bne.n	800e884 <xmp3fixpt_DequantChannel+0x1b4>
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800e8a2:	9b05      	ldr	r3, [sp, #20]
 800e8a4:	9a02      	ldr	r2, [sp, #8]
 800e8a6:	3303      	adds	r3, #3
 800e8a8:	9305      	str	r3, [sp, #20]
		}

		ASSERT(3*nSamps <= MAX_REORDER_SAMPS);

		if (i >= *nonZeroBound) 
 800e8aa:	9b06      	ldr	r3, [sp, #24]
 800e8ac:	681b      	ldr	r3, [r3, #0]
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	dd02      	ble.n	800e8b8 <xmp3fixpt_DequantChannel+0x1e8>
 800e8b2:	9b03      	ldr	r3, [sp, #12]
 800e8b4:	2b0c      	cmp	r3, #12
 800e8b6:	dd94      	ble.n	800e7e2 <xmp3fixpt_DequantChannel+0x112>
	 * however, the original nzb is no longer necessarily true
	 *   for each cb, buf[][] is updated with 3*nSamps samples (i increases 3*nSamps each time)
	 *   (buf[j + 1][0] = 3 (input) samples ahead of buf[j][0])
     * so update nonZeroBound to i
	 */
	*nonZeroBound = i;
 800e8b8:	9b06      	ldr	r3, [sp, #24]
 800e8ba:	f8dd b010 	ldr.w	fp, [sp, #16]
 800e8be:	601a      	str	r2, [r3, #0]

	ASSERT(*nonZeroBound <= MAX_NSAMP);

	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e8c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e8c2:	6999      	ldr	r1, [r3, #24]

	cbi->cbEndS[0] = cbMax[0];
	cbi->cbEndS[1] = cbMax[1];
 800e8c4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e8c8:	2900      	cmp	r1, #0
	cbi->cbEndS[0] = cbMax[0];
 800e8ca:	991c      	ldr	r1, [sp, #112]	; 0x70
	cbi->cbEndS[1] = cbMax[1];
 800e8cc:	e9c1 3201 	strd	r3, r2, [r1, #4]
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e8d0:	bf14      	ite	ne
 800e8d2:	2102      	movne	r1, #2
 800e8d4:	2101      	moveq	r1, #1
	cbi->cbEndS[2] = cbMax[2];

	cbi->cbEndSMax = cbMax[0];
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	bfb8      	it	lt
 800e8da:	4613      	movlt	r3, r2
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e8dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e8de:	6011      	str	r1, [r2, #0]
	cbi->cbEndS[2] = cbMax[2];
 800e8e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8e2:	991c      	ldr	r1, [sp, #112]	; 0x70
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800e8e4:	4293      	cmp	r3, r2
	cbi->cbEndS[2] = cbMax[2];
 800e8e6:	60ca      	str	r2, [r1, #12]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800e8e8:	bfb8      	it	lt
 800e8ea:	4613      	movlt	r3, r2
	if (!x)
 800e8ec:	f1bb 0f00 	cmp.w	fp, #0
 800e8f0:	610b      	str	r3, [r1, #16]
 800e8f2:	d032      	beq.n	800e95a <xmp3fixpt_DequantChannel+0x28a>
	while (!(x & 0x80000000)) {
 800e8f4:	db53      	blt.n	800e99e <xmp3fixpt_DequantChannel+0x2ce>
	numZeros = 0;
 800e8f6:	2300      	movs	r3, #0
	while (!(x & 0x80000000)) {
 800e8f8:	ea5f 0b4b 	movs.w	fp, fp, lsl #1
 800e8fc:	4618      	mov	r0, r3
		numZeros++;
 800e8fe:	f103 0301 	add.w	r3, r3, #1
	while (!(x & 0x80000000)) {
 800e902:	d5f9      	bpl.n	800e8f8 <xmp3fixpt_DequantChannel+0x228>

	return CLZ(gbMask) - 1;
}
 800e904:	b011      	add	sp, #68	; 0x44
 800e906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (i >= *nonZeroBound) 
 800e90a:	9b06      	ldr	r3, [sp, #24]
 800e90c:	3501      	adds	r5, #1
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	42b3      	cmp	r3, r6
 800e912:	f77f af42 	ble.w	800e79a <xmp3fixpt_DequantChannel+0xca>
	for (cb = 0; cb < cbEndL; cb++) {
 800e916:	464c      	mov	r4, r9
 800e918:	e739      	b.n	800e78e <xmp3fixpt_DequantChannel+0xbe>
	if (!x)
 800e91a:	f1bb 0f00 	cmp.w	fp, #0
 800e91e:	d01c      	beq.n	800e95a <xmp3fixpt_DequantChannel+0x28a>
	while (!(x & 0x80000000)) {
 800e920:	f1bb 0f00 	cmp.w	fp, #0
 800e924:	db3b      	blt.n	800e99e <xmp3fixpt_DequantChannel+0x2ce>
	numZeros = 0;
 800e926:	2300      	movs	r3, #0
	while (!(x & 0x80000000)) {
 800e928:	ea5f 0b4b 	movs.w	fp, fp, lsl #1
 800e92c:	4618      	mov	r0, r3
		numZeros++;
 800e92e:	f103 0301 	add.w	r3, r3, #1
	while (!(x & 0x80000000)) {
 800e932:	d5f9      	bpl.n	800e928 <xmp3fixpt_DequantChannel+0x258>
}
 800e934:	b011      	add	sp, #68	; 0x44
 800e936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cbi->cbEndL  = cbMax[0];
 800e93a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	cbi->cbType = 0;			/* long only */
 800e93c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	cbi->cbEndL  = cbMax[0];
 800e93e:	615c      	str	r4, [r3, #20]
	cbi->cbType = 0;			/* long only */
 800e940:	2300      	movs	r3, #0
	cbi->cbEndL  = cbMax[0];
 800e942:	f8dd b008 	ldr.w	fp, [sp, #8]
	cbi->cbType = 0;			/* long only */
 800e946:	6013      	str	r3, [r2, #0]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800e948:	6053      	str	r3, [r2, #4]
	cbi->cbEndSMax = 0;
 800e94a:	6113      	str	r3, [r2, #16]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800e94c:	e9c2 3302 	strd	r3, r3, [r2, #8]
	if (cbStartS >= 12) 
 800e950:	9b03      	ldr	r3, [sp, #12]
 800e952:	2b0b      	cmp	r3, #11
 800e954:	f77f af35 	ble.w	800e7c2 <xmp3fixpt_DequantChannel+0xf2>
 800e958:	e7e2      	b.n	800e920 <xmp3fixpt_DequantChannel+0x250>
 800e95a:	201f      	movs	r0, #31
}
 800e95c:	b011      	add	sp, #68	; 0x44
 800e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (w = 0; w < 3; w++) {
 800e962:	f108 0804 	add.w	r8, r8, #4
 800e966:	ab0f      	add	r3, sp, #60	; 0x3c
 800e968:	442f      	add	r7, r5
 800e96a:	442e      	add	r6, r5
 800e96c:	4543      	cmp	r3, r8
 800e96e:	f47f af55 	bne.w	800e81c <xmp3fixpt_DequantChannel+0x14c>
 800e972:	e770      	b.n	800e856 <xmp3fixpt_DequantChannel+0x186>
		if (sis->mixedBlock) { 
 800e974:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e976:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e97a:	f1ba 0f00 	cmp.w	sl, #0
 800e97e:	d00b      	beq.n	800e998 <xmp3fixpt_DequantChannel+0x2c8>
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800e980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e982:	781b      	ldrb	r3, [r3, #0]
			cbStartS = 3; 
 800e984:	2b00      	cmp	r3, #0
 800e986:	f04f 0303 	mov.w	r3, #3
 800e98a:	bf0c      	ite	eq
 800e98c:	f04f 0a08 	moveq.w	sl, #8
 800e990:	f04f 0a06 	movne.w	sl, #6
 800e994:	9303      	str	r3, [sp, #12]
 800e996:	e6ab      	b.n	800e6f0 <xmp3fixpt_DequantChannel+0x20>
			cbStartS = 0;
 800e998:	f8cd a00c 	str.w	sl, [sp, #12]
 800e99c:	e6a8      	b.n	800e6f0 <xmp3fixpt_DequantChannel+0x20>
 800e99e:	f04f 30ff 	mov.w	r0, #4294967295
	return CLZ(gbMask) - 1;
 800e9a2:	e7af      	b.n	800e904 <xmp3fixpt_DequantChannel+0x234>
 800e9a4:	08020de4 	.word	0x08020de4

0800e9a8 <xmp3fixpt_DecodeHuffman>:
 *                byte located at buf + offset)
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 800e9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ac:	b097      	sub	sp, #92	; 0x5c
 800e9ae:	910e      	str	r1, [sp, #56]	; 0x38
 800e9b0:	9208      	str	r2, [sp, #32]
 800e9b2:	9306      	str	r3, [sp, #24]
	SideInfoSub *sis;
	ScaleFactorInfo *sfi;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS) {
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	f000 82b0 	beq.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
 800e9ba:	6801      	ldr	r1, [r0, #0]
 800e9bc:	2900      	cmp	r1, #0
 800e9be:	f000 82ac 	beq.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
 800e9c2:	6844      	ldr	r4, [r0, #4]
 800e9c4:	9409      	str	r4, [sp, #36]	; 0x24
 800e9c6:	2c00      	cmp	r4, #0
 800e9c8:	f000 82a7 	beq.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
 800e9cc:	6883      	ldr	r3, [r0, #8]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f000 82a3 	beq.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
	sis = &si->sis[gr][ch];
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);

	if (huffBlockBits < 0) {
 800e9d4:	9a06      	ldr	r2, [sp, #24]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS) {
 800e9d6:	68c3      	ldr	r3, [r0, #12]
	if (huffBlockBits < 0) {
 800e9d8:	2a00      	cmp	r2, #0
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS) {
 800e9da:	930d      	str	r3, [sp, #52]	; 0x34
	if (huffBlockBits < 0) {
 800e9dc:	f2c0 829d 	blt.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 829a 	beq.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
		i = 1;
		return -1;
	}

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800e9e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e9e8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800e9ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9ee:	0112      	lsls	r2, r2, #4
 800e9f0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800e9f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e9f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9fa:	00db      	lsls	r3, r3, #3
 800e9fc:	4422      	add	r2, r4
 800e9fe:	930c      	str	r3, [sp, #48]	; 0x30
 800ea00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea02:	00db      	lsls	r3, r3, #3
 800ea04:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea06:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f040 82cb 	bne.w	800efa4 <xmp3fixpt_DecodeHuffman+0x5fc>
				r1Start = fh->sfBand->l[6] + 2*w;
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800ea0e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800ea10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea12:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ea14:	9821      	ldr	r0, [sp, #132]	; 0x84
 800ea16:	440b      	add	r3, r1
 800ea18:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea1a:	011b      	lsls	r3, r3, #4
 800ea1c:	4401      	add	r1, r0
 800ea1e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ea22:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea24:	440b      	add	r3, r1
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800ea26:	e9d3 1317 	ldrd	r1, r3, [r3, #92]	; 0x5c
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800ea2a:	3101      	adds	r1, #1
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800ea2c:	440b      	add	r3, r1
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800ea2e:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800ea32:	3301      	adds	r3, #1
 800ea34:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800ea38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea3a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ea3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ea3e:	189c      	adds	r4, r3, r2
 800ea40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea42:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea44:	0124      	lsls	r4, r4, #4
 800ea46:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ea48:	189a      	adds	r2, r3, r2
 800ea4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	rEnd[2] = MIN(r2Start, rEnd[3]);
	rEnd[1] = MIN(r1Start, rEnd[3]);
	rEnd[0] = 0;

	/* rounds up to first all-zero pair (we don't check last pair for (x,y) == (non-zero, zero)) */
	hi->nonZeroBound[ch] = rEnd[3];
 800ea50:	f503 5680 	add.w	r6, r3, #4096	; 0x1000
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800ea54:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 800ea58:	461c      	mov	r4, r3
 800ea5a:	443b      	add	r3, r7
	hi->nonZeroBound[ch] = rEnd[3];
 800ea5c:	9610      	str	r6, [sp, #64]	; 0x40
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800ea5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea60:	3444      	adds	r4, #68	; 0x44
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	193c      	adds	r4, r7, r4
 800ea66:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ea6a:	9407      	str	r4, [sp, #28]
 800ea6c:	bfa8      	it	ge
 800ea6e:	f44f 7310 	movge.w	r3, #576	; 0x240
	rEnd[2] = MIN(r2Start, rEnd[3]);
 800ea72:	4298      	cmp	r0, r3
	hi->nonZeroBound[ch] = rEnd[3];
 800ea74:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800ea78:	9311      	str	r3, [sp, #68]	; 0x44
	rEnd[2] = MIN(r2Start, rEnd[3]);
 800ea7a:	bfa8      	it	ge
 800ea7c:	4618      	movge	r0, r3
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800ea7e:	4299      	cmp	r1, r3
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800ea80:	9315      	str	r3, [sp, #84]	; 0x54
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800ea82:	bfa8      	it	ge
 800ea84:	4619      	movge	r1, r3
	rEnd[0] = 0;
 800ea86:	2300      	movs	r3, #0
	rEnd[2] = MIN(r2Start, rEnd[3]);
 800ea88:	9014      	str	r0, [sp, #80]	; 0x50
	rEnd[0] = 0;
 800ea8a:	9312      	str	r3, [sp, #72]	; 0x48

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
	for (i = 0; i < 3; i++) {
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800ea8c:	eb05 2302 	add.w	r3, r5, r2, lsl #8
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800ea90:	9113      	str	r1, [sp, #76]	; 0x4c
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800ea92:	930a      	str	r3, [sp, #40]	; 0x28
 800ea94:	0193      	lsls	r3, r2, #6
 800ea96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea98:	9b08      	ldr	r3, [sp, #32]
 800ea9a:	681a      	ldr	r2, [r3, #0]
 800ea9c:	ab12      	add	r3, sp, #72	; 0x48
 800ea9e:	9305      	str	r3, [sp, #20]
 800eaa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaa2:	9304      	str	r3, [sp, #16]
 800eaa4:	9b05      	ldr	r3, [sp, #20]
 800eaa6:	681c      	ldr	r4, [r3, #0]
 800eaa8:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800eaac:	1b36      	subs	r6, r6, r4
 800eaae:	9305      	str	r3, [sp, #20]
	if(nVals <= 0) 
 800eab0:	2e00      	cmp	r6, #0
 800eab2:	f340 80a1 	ble.w	800ebf8 <xmp3fixpt_DecodeHuffman+0x250>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800eab6:	9b07      	ldr	r3, [sp, #28]
	cachedBits = (8 - bitOffset) & 0x07;
 800eab8:	4252      	negs	r2, r2
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800eaba:	9904      	ldr	r1, [sp, #16]
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800eabc:	6818      	ldr	r0, [r3, #0]
	if (cachedBits)
 800eabe:	f012 0207 	ands.w	r2, r2, #7
	tabType = huffTabLookup[tabIdx].tabType;
 800eac2:	4bac      	ldr	r3, [pc, #688]	; (800ed74 <xmp3fixpt_DecodeHuffman+0x3cc>)
 800eac4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800eac8:	791b      	ldrb	r3, [r3, #4]
 800eaca:	9300      	str	r3, [sp, #0]
	if (cachedBits)
 800eacc:	f000 822a 	beq.w	800ef24 <xmp3fixpt_DecodeHuffman+0x57c>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800ead0:	f811 5b01 	ldrb.w	r5, [r1], #1
 800ead4:	f1c2 0320 	rsb	r3, r2, #32
 800ead8:	fa05 f303 	lsl.w	r3, r5, r3
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800eadc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800eade:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
	if (tabType == noBits) {
 800eae2:	9d00      	ldr	r5, [sp, #0]
 800eae4:	2d00      	cmp	r5, #0
 800eae6:	f000 8225 	beq.w	800ef34 <xmp3fixpt_DecodeHuffman+0x58c>
	bitsLeft -= cachedBits;
 800eaea:	9d06      	ldr	r5, [sp, #24]
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800eaec:	4ca2      	ldr	r4, [pc, #648]	; (800ed78 <xmp3fixpt_DecodeHuffman+0x3d0>)
	bitsLeft -= cachedBits;
 800eaee:	1aaf      	subs	r7, r5, r2
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800eaf0:	4da2      	ldr	r5, [pc, #648]	; (800ed7c <xmp3fixpt_DecodeHuffman+0x3d4>)
 800eaf2:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800eaf6:	eb05 0b44 	add.w	fp, r5, r4, lsl #1
	} else if (tabType == oneShot) {
 800eafa:	9d00      	ldr	r5, [sp, #0]
 800eafc:	2d01      	cmp	r5, #1
 800eafe:	f000 81b8 	beq.w	800ee72 <xmp3fixpt_DecodeHuffman+0x4ca>
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 800eb02:	1eac      	subs	r4, r5, #2
 800eb04:	2c01      	cmp	r4, #1
 800eb06:	f200 8208 	bhi.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
	linBits = huffTabLookup[tabIdx].linBits;
 800eb0a:	4c9a      	ldr	r4, [pc, #616]	; (800ed74 <xmp3fixpt_DecodeHuffman+0x3cc>)
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800eb0c:	465d      	mov	r5, fp
	linBits = huffTabLookup[tabIdx].linBits;
 800eb0e:	f854 a030 	ldr.w	sl, [r4, r0, lsl #3]
		padBits = 0;
 800eb12:	2000      	movs	r0, #0
 800eb14:	9001      	str	r0, [sp, #4]
					minBits = linBits + 1;
 800eb16:	f10a 0001 	add.w	r0, sl, #1
 800eb1a:	9002      	str	r0, [sp, #8]
					y += (int)(cache >> (32 - linBits));
 800eb1c:	f1ca 0020 	rsb	r0, sl, #32
 800eb20:	9003      	str	r0, [sp, #12]
			if (bitsLeft >= 16) {
 800eb22:	2f0f      	cmp	r7, #15
 800eb24:	f340 821f 	ble.w	800ef66 <xmp3fixpt_DecodeHuffman+0x5be>
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800eb28:	7848      	ldrb	r0, [r1, #1]
 800eb2a:	f1c2 0410 	rsb	r4, r2, #16
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800eb2e:	f1c2 0e18 	rsb	lr, r2, #24
				cachedBits += 16;
 800eb32:	3210      	adds	r2, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800eb34:	fa00 f404 	lsl.w	r4, r0, r4
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800eb38:	f811 0b02 	ldrb.w	r0, [r1], #2
			while (nVals > 0 && cachedBits >= 11 ) {
 800eb3c:	2a0a      	cmp	r2, #10
				bitsLeft -= 16;
 800eb3e:	f1a7 0710 	sub.w	r7, r7, #16
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800eb42:	fa00 f00e 	lsl.w	r0, r0, lr
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800eb46:	ea40 0004 	orr.w	r0, r0, r4
 800eb4a:	ea43 0300 	orr.w	r3, r3, r0
			while (nVals > 0 && cachedBits >= 11 ) {
 800eb4e:	dde8      	ble.n	800eb22 <xmp3fixpt_DecodeHuffman+0x17a>
				maxBits = GetMaxbits(tCurr[0]);
 800eb50:	882c      	ldrh	r4, [r5, #0]
 800eb52:	f004 040f 	and.w	r4, r4, #15
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 800eb56:	f1c4 0020 	rsb	r0, r4, #32
 800eb5a:	fa23 f000 	lsr.w	r0, r3, r0
 800eb5e:	3001      	adds	r0, #1
 800eb60:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
				if (!len) {
 800eb64:	ea5f 3e10 	movs.w	lr, r0, lsr #12
 800eb68:	f000 817e 	beq.w	800ee68 <xmp3fixpt_DecodeHuffman+0x4c0>
				if (x == 15 && tabType == loopLinbits) {
 800eb6c:	9c00      	ldr	r4, [sp, #0]
				x = GetCWX(cw);
 800eb6e:	f3c0 1503 	ubfx	r5, r0, #4, #4
				cachedBits -= len;
 800eb72:	eba2 020e 	sub.w	r2, r2, lr
				cache <<= len;
 800eb76:	fa03 f30e 	lsl.w	r3, r3, lr
				if (x == 15 && tabType == loopLinbits) {
 800eb7a:	f1a4 0903 	sub.w	r9, r4, #3
 800eb7e:	2d0f      	cmp	r5, #15
				y = GetCWY(cw);
 800eb80:	f3c0 2003 	ubfx	r0, r0, #8, #4
				if (x == 15 && tabType == loopLinbits) {
 800eb84:	fab9 f989 	clz	r9, r9
 800eb88:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800eb8c:	d103      	bne.n	800eb96 <xmp3fixpt_DecodeHuffman+0x1ee>
 800eb8e:	f1b9 0f00 	cmp.w	r9, #0
 800eb92:	f040 80fb 	bne.w	800ed8c <xmp3fixpt_DecodeHuffman+0x3e4>
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800eb96:	b125      	cbz	r5, 800eba2 <xmp3fixpt_DecodeHuffman+0x1fa>
 800eb98:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 800eb9c:	3a01      	subs	r2, #1
 800eb9e:	005b      	lsls	r3, r3, #1
 800eba0:	4325      	orrs	r5, r4
				if (y == 15 && tabType == loopLinbits) {
 800eba2:	280f      	cmp	r0, #15
 800eba4:	d103      	bne.n	800ebae <xmp3fixpt_DecodeHuffman+0x206>
 800eba6:	f1b9 0f00 	cmp.w	r9, #0
 800ebaa:	f040 8128 	bne.w	800edfe <xmp3fixpt_DecodeHuffman+0x456>
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800ebae:	b120      	cbz	r0, 800ebba <xmp3fixpt_DecodeHuffman+0x212>
 800ebb0:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 800ebb4:	3a01      	subs	r2, #1
 800ebb6:	005b      	lsls	r3, r3, #1
 800ebb8:	4320      	orrs	r0, r4
				if (cachedBits < padBits)
 800ebba:	9c01      	ldr	r4, [sp, #4]
 800ebbc:	42a2      	cmp	r2, r4
 800ebbe:	f2c0 81ac 	blt.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
				*xy++ = x;
 800ebc2:	4664      	mov	r4, ip
				nVals -= 2;
 800ebc4:	3e02      	subs	r6, #2
				*xy++ = x;
 800ebc6:	f844 5b08 	str.w	r5, [r4], #8
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800ebca:	465d      	mov	r5, fp
				*xy++ = y;
 800ebcc:	f8cc 0004 	str.w	r0, [ip, #4]
 800ebd0:	46a4      	mov	ip, r4
			while (nVals > 0 && cachedBits >= 11 ) {
 800ebd2:	2e00      	cmp	r6, #0
 800ebd4:	dd03      	ble.n	800ebde <xmp3fixpt_DecodeHuffman+0x236>
 800ebd6:	2a0a      	cmp	r2, #10
 800ebd8:	dcba      	bgt.n	800eb50 <xmp3fixpt_DecodeHuffman+0x1a8>
		while (nVals > 0) {
 800ebda:	2e00      	cmp	r6, #0
 800ebdc:	dca1      	bgt.n	800eb22 <xmp3fixpt_DecodeHuffman+0x17a>
		bitsLeft += (cachedBits - padBits);
 800ebde:	9b01      	ldr	r3, [sp, #4]
 800ebe0:	1ad2      	subs	r2, r2, r3
		return (startBits - bitsLeft);
 800ebe2:	9b06      	ldr	r3, [sp, #24]
		bitsLeft += (cachedBits - padBits);
 800ebe4:	443a      	add	r2, r7
		return (startBits - bitsLeft);
 800ebe6:	1a9b      	subs	r3, r3, r2
		if (bitsUsed < 0 || bitsUsed > bitsLeft) {
 800ebe8:	9906      	ldr	r1, [sp, #24]
 800ebea:	428b      	cmp	r3, r1
 800ebec:	f200 8195 	bhi.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
			i = 1;
			return -1;
		}

		/* update bitstream position */
		buf += (bitsUsed + *bitOffset) >> 3;
 800ebf0:	9206      	str	r2, [sp, #24]
 800ebf2:	9a08      	ldr	r2, [sp, #32]
 800ebf4:	6812      	ldr	r2, [r2, #0]
 800ebf6:	441a      	add	r2, r3
 800ebf8:	9b04      	ldr	r3, [sp, #16]
	for (i = 0; i < 3; i++) {
 800ebfa:	a915      	add	r1, sp, #84	; 0x54
		buf += (bitsUsed + *bitOffset) >> 3;
 800ebfc:	eb03 03e2 	add.w	r3, r3, r2, asr #3
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800ec00:	f002 0207 	and.w	r2, r2, #7
		buf += (bitsUsed + *bitOffset) >> 3;
 800ec04:	9304      	str	r3, [sp, #16]
	for (i = 0; i < 3; i++) {
 800ec06:	9b07      	ldr	r3, [sp, #28]
 800ec08:	3304      	adds	r3, #4
 800ec0a:	9307      	str	r3, [sp, #28]
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800ec0c:	9b08      	ldr	r3, [sp, #32]
 800ec0e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++) {
 800ec10:	9b05      	ldr	r3, [sp, #20]
 800ec12:	4299      	cmp	r1, r3
 800ec14:	f47f af46 	bne.w	800eaa4 <xmp3fixpt_DecodeHuffman+0xfc>
	if (bitsLeft <= 0)
 800ec18:	9b06      	ldr	r3, [sp, #24]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f000 822f 	beq.w	800f07e <xmp3fixpt_DecodeHuffman+0x6d6>
		bitsLeft -= bitsUsed;
	}

	/* decode Huffman quads (if any) */
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800ec20:	9b20      	ldr	r3, [sp, #128]	; 0x80
	cachedBits = (8 - bitOffset) & 0x07;
 800ec22:	4252      	negs	r2, r2
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800ec24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec26:	9821      	ldr	r0, [sp, #132]	; 0x84
	if (cachedBits)
 800ec28:	f012 0207 	ands.w	r2, r2, #7
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800ec2c:	4419      	add	r1, r3
 800ec2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec30:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800ec34:	4403      	add	r3, r0
 800ec36:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ec3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec3c:	4419      	add	r1, r3
 800ec3e:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 800ec40:	494f      	ldr	r1, [pc, #316]	; (800ed80 <xmp3fixpt_DecodeHuffman+0x3d8>)
 800ec42:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
	maxBits = quadTabMaxBits[tabIdx];
 800ec46:	494f      	ldr	r1, [pc, #316]	; (800ed84 <xmp3fixpt_DecodeHuffman+0x3dc>)
 800ec48:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800ec4c:	9b04      	ldr	r3, [sp, #16]
	if (cachedBits)
 800ec4e:	f040 81c2 	bne.w	800efd6 <xmp3fixpt_DecodeHuffman+0x62e>
	cache = 0;
 800ec52:	4611      	mov	r1, r2
		buf += (bitsUsed + *bitOffset) >> 3;
 800ec54:	9300      	str	r3, [sp, #0]
	while (i < (nVals - 3)) {
 800ec56:	f240 2e3d 	movw	lr, #573	; 0x23d
 800ec5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
	bitsLeft -= cachedBits;
 800ec5c:	9c06      	ldr	r4, [sp, #24]
	while (i < (nVals - 3)) {
 800ec5e:	ebae 0e03 	sub.w	lr, lr, r3
	bitsLeft -= cachedBits;
 800ec62:	eba4 0b02 	sub.w	fp, r4, r2
	while (i < (nVals - 3)) {
 800ec66:	f1be 0f00 	cmp.w	lr, #0
 800ec6a:	f340 8243 	ble.w	800f0f4 <xmp3fixpt_DecodeHuffman+0x74c>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800ec6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	i = padBits = 0;
 800ec70:	f04f 0c00 	mov.w	ip, #0
			cw = tBase[cache >> (32 - maxBits)];
 800ec74:	f1c0 0820 	rsb	r8, r0, #32
 800ec78:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800ed88 <xmp3fixpt_DecodeHuffman+0x3e0>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800ec7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	i = padBits = 0;
 800ec80:	4667      	mov	r7, ip
		if (bitsLeft >= 16) {
 800ec82:	f1bb 0f0f 	cmp.w	fp, #15
 800ec86:	f340 81ae 	ble.w	800efe6 <xmp3fixpt_DecodeHuffman+0x63e>
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ec8a:	9800      	ldr	r0, [sp, #0]
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ec8c:	f1c2 0418 	rsb	r4, r2, #24
			bitsLeft -= 16;
 800ec90:	f1ab 0b10 	sub.w	fp, fp, #16
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ec94:	7845      	ldrb	r5, [r0, #1]
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ec96:	f810 6b02 	ldrb.w	r6, [r0], #2
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ec9a:	9000      	str	r0, [sp, #0]
 800ec9c:	f1c2 0010 	rsb	r0, r2, #16
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800eca0:	fa06 f404 	lsl.w	r4, r6, r4
			cachedBits += 16;
 800eca4:	3210      	adds	r2, #16
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800eca6:	fa05 f000 	lsl.w	r0, r5, r0
 800ecaa:	4320      	orrs	r0, r4
 800ecac:	4301      	orrs	r1, r0
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800ecae:	f103 0010 	add.w	r0, r3, #16
 800ecb2:	e003      	b.n	800ecbc <xmp3fixpt_DecodeHuffman+0x314>
 800ecb4:	2a09      	cmp	r2, #9
 800ecb6:	f100 0010 	add.w	r0, r0, #16
 800ecba:	dde2      	ble.n	800ec82 <xmp3fixpt_DecodeHuffman+0x2da>
			cw = tBase[cache >> (32 - maxBits)];
 800ecbc:	fa21 f308 	lsr.w	r3, r1, r8
 800ecc0:	4453      	add	r3, sl
 800ecc2:	f819 3003 	ldrb.w	r3, [r9, r3]
			len = GetHLenQ(cw);
 800ecc6:	091c      	lsrs	r4, r3, #4
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800ecc8:	f013 0608 	ands.w	r6, r3, #8
			cachedBits -= len;
 800eccc:	eba2 1213 	sub.w	r2, r2, r3, lsr #4
			cache <<= len;
 800ecd0:	fa01 f104 	lsl.w	r1, r1, r4
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800ecd4:	d005      	beq.n	800ece2 <xmp3fixpt_DecodeHuffman+0x33a>
 800ecd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800ecda:	3a01      	subs	r2, #1
 800ecdc:	0049      	lsls	r1, r1, #1
 800ecde:	f046 0601 	orr.w	r6, r6, #1
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 800ece2:	f013 0504 	ands.w	r5, r3, #4
 800ece6:	d005      	beq.n	800ecf4 <xmp3fixpt_DecodeHuffman+0x34c>
 800ece8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ecec:	3a01      	subs	r2, #1
 800ecee:	0049      	lsls	r1, r1, #1
 800ecf0:	f045 0501 	orr.w	r5, r5, #1
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800ecf4:	f013 0402 	ands.w	r4, r3, #2
 800ecf8:	d005      	beq.n	800ed06 <xmp3fixpt_DecodeHuffman+0x35e>
 800ecfa:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800ecfe:	3a01      	subs	r2, #1
 800ed00:	0049      	lsls	r1, r1, #1
 800ed02:	f044 0401 	orr.w	r4, r4, #1
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800ed06:	f013 0301 	ands.w	r3, r3, #1
 800ed0a:	d005      	beq.n	800ed18 <xmp3fixpt_DecodeHuffman+0x370>
 800ed0c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800ed10:	3a01      	subs	r2, #1
 800ed12:	0049      	lsls	r1, r1, #1
 800ed14:	f043 0301 	orr.w	r3, r3, #1
			if (cachedBits < padBits)
 800ed18:	4562      	cmp	r2, ip
 800ed1a:	db07      	blt.n	800ed2c <xmp3fixpt_DecodeHuffman+0x384>
			i += 4;
 800ed1c:	3704      	adds	r7, #4
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800ed1e:	4577      	cmp	r7, lr
			*vwxy++ = y;
 800ed20:	e940 4302 	strd	r4, r3, [r0, #-8]
			*vwxy++ = w;
 800ed24:	e940 6504 	strd	r6, r5, [r0, #-16]
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800ed28:	4603      	mov	r3, r0
 800ed2a:	dbc3      	blt.n	800ecb4 <xmp3fixpt_DecodeHuffman+0x30c>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800ed2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ed2e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800ed32:	443b      	add	r3, r7

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800ed34:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800ed38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800ed3c:	da0a      	bge.n	800ed54 <xmp3fixpt_DecodeHuffman+0x3ac>
		hi->huffDecBuf[ch][i] = 0;
 800ed3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ed40:	2100      	movs	r1, #0
 800ed42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed44:	4418      	add	r0, r3
 800ed46:	f5c3 7310 	rsb	r3, r3, #576	; 0x240
 800ed4a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800ed4e:	009a      	lsls	r2, r3, #2
 800ed50:	f010 fa00 	bl	801f154 <memset>
	
	/* If bits used for 576 samples < huffBlockBits, then the extras are considered
	 *  to be stuffing bits (throw away, but need to return correct bitstream position) 
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
 800ed54:	9908      	ldr	r1, [sp, #32]
 800ed56:	9a06      	ldr	r2, [sp, #24]
 800ed58:	680b      	ldr	r3, [r1, #0]
 800ed5a:	9804      	ldr	r0, [sp, #16]
 800ed5c:	441a      	add	r2, r3
 800ed5e:	4613      	mov	r3, r2
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 800ed60:	f002 0207 	and.w	r2, r2, #7
	buf += (bitsLeft + *bitOffset) >> 3;
 800ed64:	eb00 00e3 	add.w	r0, r0, r3, asr #3
	
	return (buf - startBuf);
 800ed68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 800ed6a:	600a      	str	r2, [r1, #0]
	return (buf - startBuf);
 800ed6c:	1ac0      	subs	r0, r0, r3
}
 800ed6e:	b017      	add	sp, #92	; 0x5c
 800ed70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed74:	08020dfc 	.word	0x08020dfc
 800ed78:	08020efc 	.word	0x08020efc
 800ed7c:	08020f7c 	.word	0x08020f7c
 800ed80:	080230a8 	.word	0x080230a8
 800ed84:	080230a0 	.word	0x080230a0
 800ed88:	080230b0 	.word	0x080230b0
					minBits = linBits + 1 + (y ? 1 : 0);
 800ed8c:	9c02      	ldr	r4, [sp, #8]
					if (cachedBits + bitsLeft < minBits)
 800ed8e:	18bd      	adds	r5, r7, r2
					minBits = linBits + 1 + (y ? 1 : 0);
 800ed90:	2800      	cmp	r0, #0
 800ed92:	bf18      	it	ne
 800ed94:	3401      	addne	r4, #1
					if (cachedBits + bitsLeft < minBits)
 800ed96:	42ac      	cmp	r4, r5
 800ed98:	f300 80bf 	bgt.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
					while (cachedBits < minBits) {
 800ed9c:	42a2      	cmp	r2, r4
 800ed9e:	f280 814a 	bge.w	800f036 <xmp3fixpt_DecodeHuffman+0x68e>
 800eda2:	ea6f 0802 	mvn.w	r8, r2
 800eda6:	f1c2 0518 	rsb	r5, r2, #24
 800edaa:	44a0      	add	r8, r4
 800edac:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800edb0:	f108 0e01 	add.w	lr, r8, #1
 800edb4:	448e      	add	lr, r1
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800edb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edba:	40ac      	lsls	r4, r5
					while (cachedBits < minBits) {
 800edbc:	4571      	cmp	r1, lr
 800edbe:	f1a5 0508 	sub.w	r5, r5, #8
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800edc2:	ea43 0304 	orr.w	r3, r3, r4
					while (cachedBits < minBits) {
 800edc6:	d1f6      	bne.n	800edb6 <xmp3fixpt_DecodeHuffman+0x40e>
					if (bitsLeft < 0) {
 800edc8:	3208      	adds	r2, #8
 800edca:	3f08      	subs	r7, #8
						cachedBits += 8;
 800edcc:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
						bitsLeft -= 8;
 800edd0:	ebc8 7848 	rsb	r8, r8, r8, lsl #29
					if (bitsLeft < 0) {
 800edd4:	eb17 07c8 	adds.w	r7, r7, r8, lsl #3
 800edd8:	d507      	bpl.n	800edea <xmp3fixpt_DecodeHuffman+0x442>
						cachedBits += bitsLeft;
 800edda:	443a      	add	r2, r7
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800eddc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
						bitsLeft = 0;
 800ede0:	2700      	movs	r7, #0
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ede2:	1e51      	subs	r1, r2, #1
 800ede4:	fa44 f101 	asr.w	r1, r4, r1
 800ede8:	400b      	ands	r3, r1
					x += (int)(cache >> (32 - linBits));
 800edea:	9c03      	ldr	r4, [sp, #12]
					cachedBits -= linBits;
 800edec:	eba2 020a 	sub.w	r2, r2, sl
					cache <<= linBits;
 800edf0:	4671      	mov	r1, lr
					x += (int)(cache >> (32 - linBits));
 800edf2:	fa23 f504 	lsr.w	r5, r3, r4
					cache <<= linBits;
 800edf6:	fa03 f30a 	lsl.w	r3, r3, sl
					x += (int)(cache >> (32 - linBits));
 800edfa:	350f      	adds	r5, #15
					cache <<= linBits;
 800edfc:	e6cb      	b.n	800eb96 <xmp3fixpt_DecodeHuffman+0x1ee>
					if (cachedBits + bitsLeft < minBits)
 800edfe:	18b8      	adds	r0, r7, r2
 800ee00:	9c02      	ldr	r4, [sp, #8]
 800ee02:	4284      	cmp	r4, r0
 800ee04:	f300 8089 	bgt.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
					while (cachedBits < minBits) {
 800ee08:	4294      	cmp	r4, r2
 800ee0a:	f340 8116 	ble.w	800f03a <xmp3fixpt_DecodeHuffman+0x692>
 800ee0e:	ebaa 0802 	sub.w	r8, sl, r2
 800ee12:	f1c2 0418 	rsb	r4, r2, #24
 800ee16:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800ee1a:	f108 0e01 	add.w	lr, r8, #1
 800ee1e:	448e      	add	lr, r1
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ee20:	f811 0b01 	ldrb.w	r0, [r1], #1
 800ee24:	40a0      	lsls	r0, r4
					while (cachedBits < minBits) {
 800ee26:	4571      	cmp	r1, lr
 800ee28:	f1a4 0408 	sub.w	r4, r4, #8
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ee2c:	ea43 0300 	orr.w	r3, r3, r0
					while (cachedBits < minBits) {
 800ee30:	d1f6      	bne.n	800ee20 <xmp3fixpt_DecodeHuffman+0x478>
					if (bitsLeft < 0) {
 800ee32:	3208      	adds	r2, #8
 800ee34:	3f08      	subs	r7, #8
						cachedBits += 8;
 800ee36:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
						bitsLeft -= 8;
 800ee3a:	ebc8 7848 	rsb	r8, r8, r8, lsl #29
					if (bitsLeft < 0) {
 800ee3e:	eb17 07c8 	adds.w	r7, r7, r8, lsl #3
 800ee42:	d507      	bpl.n	800ee54 <xmp3fixpt_DecodeHuffman+0x4ac>
						cachedBits += bitsLeft;
 800ee44:	443a      	add	r2, r7
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ee46:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
						bitsLeft = 0;
 800ee4a:	2700      	movs	r7, #0
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ee4c:	1e51      	subs	r1, r2, #1
 800ee4e:	fa40 f101 	asr.w	r1, r0, r1
 800ee52:	400b      	ands	r3, r1
					y += (int)(cache >> (32 - linBits));
 800ee54:	9803      	ldr	r0, [sp, #12]
					cachedBits -= linBits;
 800ee56:	eba2 020a 	sub.w	r2, r2, sl
					cache <<= linBits;
 800ee5a:	4671      	mov	r1, lr
					y += (int)(cache >> (32 - linBits));
 800ee5c:	fa23 f000 	lsr.w	r0, r3, r0
					cache <<= linBits;
 800ee60:	fa03 f30a 	lsl.w	r3, r3, sl
					y += (int)(cache >> (32 - linBits));
 800ee64:	300f      	adds	r0, #15
					cache <<= linBits;
 800ee66:	e6a2      	b.n	800ebae <xmp3fixpt_DecodeHuffman+0x206>
					tCurr += cw;
 800ee68:	eb05 0540 	add.w	r5, r5, r0, lsl #1
					cachedBits -= maxBits;
 800ee6c:	1b12      	subs	r2, r2, r4
					cache <<= maxBits;
 800ee6e:	40a3      	lsls	r3, r4
					continue;
 800ee70:	e6af      	b.n	800ebd2 <xmp3fixpt_DecodeHuffman+0x22a>
		maxBits = GetMaxbits(tBase[0]);
 800ee72:	48a1      	ldr	r0, [pc, #644]	; (800f0f8 <xmp3fixpt_DecodeHuffman+0x750>)
		padBits = 0;
 800ee74:	f04f 0900 	mov.w	r9, #0
		maxBits = GetMaxbits(tBase[0]);
 800ee78:	f830 8014 	ldrh.w	r8, [r0, r4, lsl #1]
 800ee7c:	f008 080f 	and.w	r8, r8, #15
				cw = tBase[cache >> (32 - maxBits)];
 800ee80:	f1c8 0820 	rsb	r8, r8, #32
			if (bitsLeft >= 16) {
 800ee84:	2f0f      	cmp	r7, #15
 800ee86:	f340 80da 	ble.w	800f03e <xmp3fixpt_DecodeHuffman+0x696>
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ee8a:	f1c2 0518 	rsb	r5, r2, #24
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ee8e:	784c      	ldrb	r4, [r1, #1]
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ee90:	f811 0b02 	ldrb.w	r0, [r1], #2
				bitsLeft -= 16;
 800ee94:	3f10      	subs	r7, #16
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ee96:	40a8      	lsls	r0, r5
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ee98:	f1c2 0510 	rsb	r5, r2, #16
				cachedBits += 16;
 800ee9c:	3210      	adds	r2, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ee9e:	40ac      	lsls	r4, r5
 800eea0:	4320      	orrs	r0, r4
 800eea2:	4303      	orrs	r3, r0
			while (nVals > 0 && cachedBits >= 11 ) {
 800eea4:	2e00      	cmp	r6, #0
 800eea6:	f340 80fe 	ble.w	800f0a6 <xmp3fixpt_DecodeHuffman+0x6fe>
 800eeaa:	f10c 0408 	add.w	r4, ip, #8
 800eeae:	468e      	mov	lr, r1
 800eeb0:	e00b      	b.n	800eeca <xmp3fixpt_DecodeHuffman+0x522>
				*xy++ = x;
 800eeb2:	f844 1c08 	str.w	r1, [r4, #-8]
			while (nVals > 0 && cachedBits >= 11 ) {
 800eeb6:	2e00      	cmp	r6, #0
 800eeb8:	f104 0408 	add.w	r4, r4, #8
				*xy++ = y;
 800eebc:	f844 0c0c 	str.w	r0, [r4, #-12]
			while (nVals > 0 && cachedBits >= 11 ) {
 800eec0:	f340 80f1 	ble.w	800f0a6 <xmp3fixpt_DecodeHuffman+0x6fe>
 800eec4:	2a0a      	cmp	r2, #10
 800eec6:	f340 80ea 	ble.w	800f09e <xmp3fixpt_DecodeHuffman+0x6f6>
				cw = tBase[cache >> (32 - maxBits)];
 800eeca:	fa23 f008 	lsr.w	r0, r3, r8
 800eece:	3001      	adds	r0, #1
 800eed0:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
				len = GetHLen(cw);
 800eed4:	ea4f 3c10 	mov.w	ip, r0, lsr #12
				cachedBits -= len;
 800eed8:	f3c0 1503 	ubfx	r5, r0, #4, #4
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800eedc:	f010 0ff0 	tst.w	r0, #240	; 0xf0
				cachedBits -= len;
 800eee0:	eba2 3210 	sub.w	r2, r2, r0, lsr #12
				cache <<= len;
 800eee4:	fa03 f30c 	lsl.w	r3, r3, ip
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800eee8:	4629      	mov	r1, r5
 800eeea:	f003 4c00 	and.w	ip, r3, #2147483648	; 0x80000000
 800eeee:	d003      	beq.n	800eef8 <xmp3fixpt_DecodeHuffman+0x550>
 800eef0:	005b      	lsls	r3, r3, #1
 800eef2:	3a01      	subs	r2, #1
 800eef4:	ea4c 0105 	orr.w	r1, ip, r5
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800eef8:	f3c0 2503 	ubfx	r5, r0, #8, #4
 800eefc:	f410 6f70 	tst.w	r0, #3840	; 0xf00
 800ef00:	f003 4c00 	and.w	ip, r3, #2147483648	; 0x80000000
 800ef04:	4628      	mov	r0, r5
 800ef06:	d003      	beq.n	800ef10 <xmp3fixpt_DecodeHuffman+0x568>
 800ef08:	ea4c 0005 	orr.w	r0, ip, r5
 800ef0c:	005b      	lsls	r3, r3, #1
 800ef0e:	3a01      	subs	r2, #1
				if (cachedBits < padBits)
 800ef10:	454a      	cmp	r2, r9
				nVals -= 2;
 800ef12:	f1a6 0602 	sub.w	r6, r6, #2
 800ef16:	46a4      	mov	ip, r4
				if (cachedBits < padBits)
 800ef18:	dacb      	bge.n	800eeb2 <xmp3fixpt_DecodeHuffman+0x50a>
		return -1;
 800ef1a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ef1e:	b017      	add	sp, #92	; 0x5c
 800ef20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800ef24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	cache = 0;
 800ef26:	4613      	mov	r3, r2
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800ef28:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
	if (tabType == noBits) {
 800ef2c:	9d00      	ldr	r5, [sp, #0]
 800ef2e:	2d00      	cmp	r5, #0
 800ef30:	f47f addb 	bne.w	800eaea <xmp3fixpt_DecodeHuffman+0x142>
 800ef34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef38:	18e3      	adds	r3, r4, r3
 800ef3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef3e:	1e72      	subs	r2, r6, #1
 800ef40:	0759      	lsls	r1, r3, #29
 800ef42:	f040 809e 	bne.w	800f082 <xmp3fixpt_DecodeHuffman+0x6da>
 800ef46:	2a13      	cmp	r2, #19
 800ef48:	f240 809b 	bls.w	800f082 <xmp3fixpt_DecodeHuffman+0x6da>
 800ef4c:	0851      	lsrs	r1, r2, #1
			xy[i+0] = 0;
 800ef4e:	2400      	movs	r4, #0
	if (tabType == noBits) {
 800ef50:	462a      	mov	r2, r5
			xy[i+0] = 0;
 800ef52:	2500      	movs	r5, #0
 800ef54:	3101      	adds	r1, #1
			xy[i+1] = 0;
 800ef56:	3201      	adds	r2, #1
 800ef58:	428a      	cmp	r2, r1
			xy[i+0] = 0;
 800ef5a:	e8e3 4502 	strd	r4, r5, [r3], #8
		for (i = 0; i < nVals; i+=2) {
 800ef5e:	d3fa      	bcc.n	800ef56 <xmp3fixpt_DecodeHuffman+0x5ae>
		buf += (bitsUsed + *bitOffset) >> 3;
 800ef60:	9b08      	ldr	r3, [sp, #32]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	e648      	b.n	800ebf8 <xmp3fixpt_DecodeHuffman+0x250>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800ef66:	18b8      	adds	r0, r7, r2
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	ddd6      	ble.n	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ef6c:	2f00      	cmp	r7, #0
 800ef6e:	dd06      	ble.n	800ef7e <xmp3fixpt_DecodeHuffman+0x5d6>
 800ef70:	f1c2 0e18 	rsb	lr, r2, #24
 800ef74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef78:	fa04 f40e 	lsl.w	r4, r4, lr
 800ef7c:	4323      	orrs	r3, r4
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ef7e:	2f08      	cmp	r7, #8
 800ef80:	dd05      	ble.n	800ef8e <xmp3fixpt_DecodeHuffman+0x5e6>
 800ef82:	f1c2 0410 	rsb	r4, r2, #16
 800ef86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef8a:	40a2      	lsls	r2, r4
 800ef8c:	4313      	orrs	r3, r2
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ef8e:	1e44      	subs	r4, r0, #1
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800ef90:	f100 020b 	add.w	r2, r0, #11
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ef94:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
				bitsLeft = 0;
 800ef98:	2700      	movs	r7, #0
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ef9a:	4120      	asrs	r0, r4
 800ef9c:	4003      	ands	r3, r0
				padBits = 11;
 800ef9e:	200b      	movs	r0, #11
 800efa0:	9001      	str	r0, [sp, #4]
 800efa2:	e5d5      	b.n	800eb50 <xmp3fixpt_DecodeHuffman+0x1a8>
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800efa4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	f47f ad31 	bne.w	800ea0e <xmp3fixpt_DecodeHuffman+0x66>
		if (sis->mixedBlock == 0) {
 800efac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d17f      	bne.n	800f0b2 <xmp3fixpt_DecodeHuffman+0x70a>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800efb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800efb4:	f1a3 33aa 	sub.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800efb8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800efba:	3201      	adds	r2, #1
 800efbc:	fb83 0302 	smull	r0, r3, r3, r2
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800efc0:	f44f 7010 	mov.w	r0, #576	; 0x240
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800efc4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800efc8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800efcc:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 800efd0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800efd4:	e530      	b.n	800ea38 <xmp3fixpt_DecodeHuffman+0x90>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800efd6:	f813 4b01 	ldrb.w	r4, [r3], #1
 800efda:	f1c2 0120 	rsb	r1, r2, #32
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	fa04 f101 	lsl.w	r1, r4, r1
 800efe4:	e637      	b.n	800ec56 <xmp3fixpt_DecodeHuffman+0x2ae>
			if (cachedBits + bitsLeft <= 0) return i;
 800efe6:	eb02 000b 	add.w	r0, r2, fp
 800efea:	2800      	cmp	r0, #0
 800efec:	f77f ae9e 	ble.w	800ed2c <xmp3fixpt_DecodeHuffman+0x384>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800eff0:	f1bb 0f00 	cmp.w	fp, #0
 800eff4:	dd08      	ble.n	800f008 <xmp3fixpt_DecodeHuffman+0x660>
 800eff6:	9c00      	ldr	r4, [sp, #0]
 800eff8:	f1c2 0518 	rsb	r5, r2, #24
 800effc:	f814 6b01 	ldrb.w	r6, [r4], #1
 800f000:	fa06 f505 	lsl.w	r5, r6, r5
 800f004:	9400      	str	r4, [sp, #0]
 800f006:	4329      	orrs	r1, r5
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800f008:	f1bb 0f08 	cmp.w	fp, #8
 800f00c:	dd07      	ble.n	800f01e <xmp3fixpt_DecodeHuffman+0x676>
 800f00e:	9c00      	ldr	r4, [sp, #0]
 800f010:	f1c2 0510 	rsb	r5, r2, #16
 800f014:	f814 2b01 	ldrb.w	r2, [r4], #1
 800f018:	40aa      	lsls	r2, r5
 800f01a:	9400      	str	r4, [sp, #0]
 800f01c:	4311      	orrs	r1, r2
			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800f01e:	1e44      	subs	r4, r0, #1
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800f020:	f100 020a 	add.w	r2, r0, #10
			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800f024:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
			padBits = 10;
 800f028:	f04f 0c0a 	mov.w	ip, #10
			bitsLeft = 0;
 800f02c:	f04f 0b00 	mov.w	fp, #0
			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800f030:	4120      	asrs	r0, r4
 800f032:	4001      	ands	r1, r0
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800f034:	e63b      	b.n	800ecae <xmp3fixpt_DecodeHuffman+0x306>
					while (cachedBits < minBits) {
 800f036:	468e      	mov	lr, r1
 800f038:	e6d7      	b.n	800edea <xmp3fixpt_DecodeHuffman+0x442>
					while (cachedBits < minBits) {
 800f03a:	468e      	mov	lr, r1
 800f03c:	e70a      	b.n	800ee54 <xmp3fixpt_DecodeHuffman+0x4ac>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800f03e:	18bc      	adds	r4, r7, r2
 800f040:	2c00      	cmp	r4, #0
 800f042:	f77f af6a 	ble.w	800ef1a <xmp3fixpt_DecodeHuffman+0x572>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800f046:	2f00      	cmp	r7, #0
 800f048:	dd05      	ble.n	800f056 <xmp3fixpt_DecodeHuffman+0x6ae>
 800f04a:	f1c2 0518 	rsb	r5, r2, #24
 800f04e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f052:	40a8      	lsls	r0, r5
 800f054:	4303      	orrs	r3, r0
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800f056:	2f08      	cmp	r7, #8
 800f058:	dd05      	ble.n	800f066 <xmp3fixpt_DecodeHuffman+0x6be>
 800f05a:	f1c2 0010 	rsb	r0, r2, #16
 800f05e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f062:	4082      	lsls	r2, r0
 800f064:	4313      	orrs	r3, r2
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800f066:	1e60      	subs	r0, r4, #1
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800f068:	f104 020b 	add.w	r2, r4, #11
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800f06c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
				padBits = 11;
 800f070:	f04f 090b 	mov.w	r9, #11
				bitsLeft = 0;
 800f074:	2700      	movs	r7, #0
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800f076:	fa44 f000 	asr.w	r0, r4, r0
 800f07a:	4003      	ands	r3, r0
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800f07c:	e712      	b.n	800eea4 <xmp3fixpt_DecodeHuffman+0x4fc>
 800f07e:	461f      	mov	r7, r3
 800f080:	e654      	b.n	800ed2c <xmp3fixpt_DecodeHuffman+0x384>
		for (i = 0; i < nVals; i+=2) {
 800f082:	2300      	movs	r3, #0
 800f084:	f10c 0204 	add.w	r2, ip, #4
			xy[i+0] = 0;
 800f088:	2100      	movs	r1, #0
 800f08a:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
			xy[i+1] = 0;
 800f08e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < nVals; i+=2) {
 800f092:	3302      	adds	r3, #2
 800f094:	429e      	cmp	r6, r3
 800f096:	dcf7      	bgt.n	800f088 <xmp3fixpt_DecodeHuffman+0x6e0>
		buf += (bitsUsed + *bitOffset) >> 3;
 800f098:	9b08      	ldr	r3, [sp, #32]
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	e5ac      	b.n	800ebf8 <xmp3fixpt_DecodeHuffman+0x250>
		while (nVals > 0) {
 800f09e:	2e00      	cmp	r6, #0
 800f0a0:	4671      	mov	r1, lr
 800f0a2:	f73f aeef 	bgt.w	800ee84 <xmp3fixpt_DecodeHuffman+0x4dc>
		bitsLeft += (cachedBits - padBits);
 800f0a6:	eba2 0209 	sub.w	r2, r2, r9
		return (startBits - bitsLeft);
 800f0aa:	9b06      	ldr	r3, [sp, #24]
		bitsLeft += (cachedBits - padBits);
 800f0ac:	443a      	add	r2, r7
		return (startBits - bitsLeft);
 800f0ae:	1a9b      	subs	r3, r3, r2
 800f0b0:	e59a      	b.n	800ebe8 <xmp3fixpt_DecodeHuffman+0x240>
			if (fh->ver == MPEG1) {
 800f0b2:	780b      	ldrb	r3, [r1, #0]
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800f0b4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
			if (fh->ver == MPEG1) {
 800f0b6:	b98b      	cbnz	r3, 800f0dc <xmp3fixpt_DecodeHuffman+0x734>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800f0b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0bc:	9821      	ldr	r0, [sp, #132]	; 0x84
 800f0be:	440b      	add	r3, r1
 800f0c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f0c2:	011b      	lsls	r3, r3, #4
 800f0c4:	4401      	add	r1, r0
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800f0c6:	f44f 7010 	mov.w	r0, #576	; 0x240
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800f0ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f0ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0d0:	440b      	add	r3, r1
 800f0d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800f0da:	e4ad      	b.n	800ea38 <xmp3fixpt_DecodeHuffman+0x90>
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 800f0dc:	f9b2 1034 	ldrsh.w	r1, [r2, #52]	; 0x34
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800f0e0:	f44f 7010 	mov.w	r0, #576	; 0x240
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 800f0e4:	f9b2 3036 	ldrsh.w	r3, [r2, #54]	; 0x36
 800f0e8:	1a5b      	subs	r3, r3, r1
				r1Start = fh->sfBand->l[6] + 2*w;
 800f0ea:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 800f0ee:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800f0f2:	e4a1      	b.n	800ea38 <xmp3fixpt_DecodeHuffman+0x90>
		return 0;
 800f0f4:	2700      	movs	r7, #0
 800f0f6:	e619      	b.n	800ed2c <xmp3fixpt_DecodeHuffman+0x384>
 800f0f8:	08020f7c 	.word	0x08020f7c

0800f0fc <WinPrevious.part.0>:
	xp = xPrev;
	/* mapping (see IMDCT12x3): xPrev[0-2] = sum[6-8], xPrev[3-8] = sum[12-17] */
	if (btPrev == 2) {
		/* this could be reordered for minimum loads/stores */
		wpLo = imdctWin[btPrev];
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800f0fc:	4b37      	ldr	r3, [pc, #220]	; (800f1dc <WinPrevious.part.0+0xe0>)
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f0fe:	6882      	ldr	r2, [r0, #8]
static void WinPrevious(int *xPrev, int *xPrevWin, int btPrev)
 800f100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800f104:	f8d3 7138 	ldr.w	r7, [r3, #312]	; 0x138
 800f108:	fb87 4202 	smull	r4, r2, r7, r2
 800f10c:	6984      	ldr	r4, [r0, #24]
 800f10e:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
 800f112:	fb85 6404 	smull	r6, r4, r5, r4
 800f116:	4422      	add	r2, r4
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 800f118:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800f11c:	600a      	str	r2, [r1, #0]
 800f11e:	6842      	ldr	r2, [r0, #4]
 800f120:	fb86 4202 	smull	r4, r2, r6, r2
 800f124:	69c4      	ldr	r4, [r0, #28]
 800f126:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
 800f12a:	fb85 c404 	smull	ip, r4, r5, r4
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 800f12e:	4422      	add	r2, r4
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 800f130:	f8d3 5140 	ldr.w	r5, [r3, #320]	; 0x140
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 800f134:	604a      	str	r2, [r1, #4]
 800f136:	6802      	ldr	r2, [r0, #0]
 800f138:	fb85 4202 	smull	r4, r2, r5, r2
 800f13c:	6a04      	ldr	r4, [r0, #32]
 800f13e:	46a4      	mov	ip, r4
 800f140:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 800f144:	fb84 ec0c 	smull	lr, ip, r4, ip
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 800f148:	4462      	add	r2, ip
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 800f14a:	f8d3 a144 	ldr.w	sl, [r3, #324]	; 0x144
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 800f14e:	608a      	str	r2, [r1, #8]
 800f150:	6802      	ldr	r2, [r0, #0]
 800f152:	4694      	mov	ip, r2
 800f154:	fb8a 2c0c 	smull	r2, ip, sl, ip
 800f158:	6a02      	ldr	r2, [r0, #32]
 800f15a:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 800f15e:	fb84 e202 	smull	lr, r2, r4, r2
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 800f162:	4462      	add	r2, ip
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 800f164:	f8d3 c148 	ldr.w	ip, [r3, #328]	; 0x148
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 800f168:	60ca      	str	r2, [r1, #12]
 800f16a:	6842      	ldr	r2, [r0, #4]
 800f16c:	fb8c e202 	smull	lr, r2, ip, r2
 800f170:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 800f174:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 800f178:	fb84 8e0e 	smull	r8, lr, r4, lr
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 800f17c:	4472      	add	r2, lr
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 800f17e:	f8d3 e14c 	ldr.w	lr, [r3, #332]	; 0x14c
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 800f182:	610a      	str	r2, [r1, #16]
 800f184:	6882      	ldr	r2, [r0, #8]
 800f186:	fb8e 8202 	smull	r8, r2, lr, r2
 800f18a:	f8d3 8134 	ldr.w	r8, [r3, #308]	; 0x134
 800f18e:	6983      	ldr	r3, [r0, #24]
 800f190:	fb88 9303 	smull	r9, r3, r8, r3
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 800f194:	441a      	add	r2, r3
 800f196:	614a      	str	r2, [r1, #20]
 800f198:	6943      	ldr	r3, [r0, #20]
 800f19a:	fb87 2303 	smull	r2, r3, r7, r3
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 800f19e:	618b      	str	r3, [r1, #24]
 800f1a0:	6903      	ldr	r3, [r0, #16]
 800f1a2:	fb86 2303 	smull	r2, r3, r6, r3
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 800f1a6:	61cb      	str	r3, [r1, #28]
 800f1a8:	68c3      	ldr	r3, [r0, #12]
 800f1aa:	fb85 2303 	smull	r2, r3, r5, r3
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 800f1ae:	620b      	str	r3, [r1, #32]
 800f1b0:	68c3      	ldr	r3, [r0, #12]
 800f1b2:	fb8a 2303 	smull	r2, r3, sl, r3
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 800f1b6:	624b      	str	r3, [r1, #36]	; 0x24
 800f1b8:	6903      	ldr	r3, [r0, #16]
 800f1ba:	fb8c 2303 	smull	r2, r3, ip, r3
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 800f1be:	628b      	str	r3, [r1, #40]	; 0x28
 800f1c0:	6942      	ldr	r2, [r0, #20]
 800f1c2:	fb8e 3202 	smull	r3, r2, lr, r2
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 800f1c6:	2300      	movs	r3, #0
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 800f1c8:	62ca      	str	r2, [r1, #44]	; 0x2c
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 800f1ca:	e9c1 3310 	strd	r3, r3, [r1, #64]	; 0x40
 800f1ce:	e9c1 330e 	strd	r3, r3, [r1, #56]	; 0x38
 800f1d2:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
			*xpwLo++ = MULSHIFT32(wLo, x);
			*xpwHi-- = MULSHIFT32(wHi, x);
		}
	}
}
 800f1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1da:	bf00      	nop
 800f1dc:	08023314 	.word	0x08023314

0800f1e0 <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 800f1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e4:	b08b      	sub	sp, #44	; 0x2c
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 800f1e6:	bba3      	cbnz	r3, 800f252 <FreqInvertRescale+0x72>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 800f1e8:	f012 0e01 	ands.w	lr, r2, #1
 800f1ec:	d02d      	beq.n	800f24a <FreqInvertRescale+0x6a>
			y += NBANDS;
			y0 = *y;	y += 2*NBANDS;
			y1 = *y;	y += 2*NBANDS;
			y2 = *y;	y += 2*NBANDS;
 800f1ee:	f8d0 1280 	ldr.w	r1, [r0, #640]	; 0x280
			*y = -y5;	y += 2*NBANDS;
			*y = -y6;	y += 2*NBANDS;
			*y = -y7;	y += 2*NBANDS;
			*y = -y8;	y += 2*NBANDS;
		}
		return 0;
 800f1f2:	469e      	mov	lr, r3
			y3 = *y;	y += 2*NBANDS;
 800f1f4:	f8d0 2380 	ldr.w	r2, [r0, #896]	; 0x380
			*y = -y2;	y += 2*NBANDS;
 800f1f8:	4249      	negs	r1, r1
			y6 = *y;	y += 2*NBANDS;
 800f1fa:	f8d0 3680 	ldr.w	r3, [r0, #1664]	; 0x680
			*y = -y3;	y += 2*NBANDS;
 800f1fe:	4252      	negs	r2, r2
			y1 = *y;	y += 2*NBANDS;
 800f200:	f8d0 4180 	ldr.w	r4, [r0, #384]	; 0x180
			*y = -y2;	y += 2*NBANDS;
 800f204:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
			*y = -y6;	y += 2*NBANDS;
 800f208:	425b      	negs	r3, r3
			y4 = *y;	y += 2*NBANDS;
 800f20a:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
			*y = -y1;	y += 2*NBANDS;
 800f20e:	4264      	negs	r4, r4
			*y = -y3;	y += 2*NBANDS;
 800f210:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
			y5 = *y;	y += 2*NBANDS;
 800f214:	f8d0 2580 	ldr.w	r2, [r0, #1408]	; 0x580
			*y = -y4;	y += 2*NBANDS;
 800f218:	4249      	negs	r1, r1
			*y = -y6;	y += 2*NBANDS;
 800f21a:	f8c0 3680 	str.w	r3, [r0, #1664]	; 0x680
			*y = -y5;	y += 2*NBANDS;
 800f21e:	4252      	negs	r2, r2
			y8 = *y;	y += 2*NBANDS;
 800f220:	f8d0 3880 	ldr.w	r3, [r0, #2176]	; 0x880
			*y = -y4;	y += 2*NBANDS;
 800f224:	f8c0 1480 	str.w	r1, [r0, #1152]	; 0x480
			*y = -y5;	y += 2*NBANDS;
 800f228:	f8c0 2580 	str.w	r2, [r0, #1408]	; 0x580
			*y = -y8;	y += 2*NBANDS;
 800f22c:	425b      	negs	r3, r3
			y7 = *y;	y += 2*NBANDS;
 800f22e:	f8d0 1780 	ldr.w	r1, [r0, #1920]	; 0x780
			*y = -y0;	y += 2*NBANDS;
 800f232:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
			*y = -y7;	y += 2*NBANDS;
 800f236:	4249      	negs	r1, r1
			*y = -y1;	y += 2*NBANDS;
 800f238:	f8c0 4180 	str.w	r4, [r0, #384]	; 0x180
			*y = -y0;	y += 2*NBANDS;
 800f23c:	4252      	negs	r2, r2
			*y = -y8;	y += 2*NBANDS;
 800f23e:	f8c0 3880 	str.w	r3, [r0, #2176]	; 0x880
			*y = -y7;	y += 2*NBANDS;
 800f242:	f8c0 1780 	str.w	r1, [r0, #1920]	; 0x780
			*y = -y0;	y += 2*NBANDS;
 800f246:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		}
		return mOut;
	}
}
 800f24a:	4670      	mov	r0, lr
 800f24c:	b00b      	add	sp, #44	; 0x2c
 800f24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (blockIdx & 0x01) {
 800f252:	07d2      	lsls	r2, r2, #31
 800f254:	d54b      	bpl.n	800f2ee <FreqInvertRescale+0x10e>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f256:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
		mOut = 0;
 800f25a:	f04f 0e00 	mov.w	lr, #0
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f25e:	f1c3 061f 	rsb	r6, r3, #31
 800f262:	f100 0580 	add.w	r5, r0, #128	; 0x80
 800f266:	40df      	lsrs	r7, r3
 800f268:	f500 6810 	add.w	r8, r0, #2304	; 0x900
	__asm__ volatile (
 800f26c:	46f4      	mov	ip, lr
 800f26e:	3f01      	subs	r7, #1
 800f270:	f855 2c80 	ldr.w	r2, [r5, #-128]
 800f274:	4664      	mov	r4, ip
 800f276:	fa42 f906 	asr.w	r9, r2, r6
 800f27a:	ea4f 7ae2 	mov.w	sl, r2, asr #31
 800f27e:	ebb9 7fe2 	cmp.w	r9, r2, asr #31
 800f282:	bf18      	it	ne
 800f284:	ea8a 0207 	eorne.w	r2, sl, r7
 800f288:	409a      	lsls	r2, r3
 800f28a:	f845 2c80 	str.w	r2, [r5, #-128]
 800f28e:	ea82 74e2 	eor.w	r4, r2, r2, asr #31
 800f292:	eba4 74e2 	sub.w	r4, r4, r2, asr #31
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f296:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800f29a:	46e1      	mov	r9, ip
 800f29c:	4252      	negs	r2, r2
 800f29e:	fa42 fa06 	asr.w	sl, r2, r6
 800f2a2:	ea4f 7be2 	mov.w	fp, r2, asr #31
 800f2a6:	ebba 7fe2 	cmp.w	sl, r2, asr #31
 800f2aa:	bf18      	it	ne
 800f2ac:	ea87 020b 	eorne.w	r2, r7, fp
 800f2b0:	409a      	lsls	r2, r3
 800f2b2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800f2b6:	ea82 79e2 	eor.w	r9, r2, r2, asr #31
 800f2ba:	eba9 79e2 	sub.w	r9, r9, r2, asr #31
 800f2be:	ea44 0409 	orr.w	r4, r4, r9
 800f2c2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800f2c6:	ea4e 0e04 	orr.w	lr, lr, r4
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f2ca:	680c      	ldr	r4, [r1, #0]
 800f2cc:	17e2      	asrs	r2, r4, #31
 800f2ce:	fa44 f906 	asr.w	r9, r4, r6
 800f2d2:	407a      	eors	r2, r7
 800f2d4:	ebb9 7fe4 	cmp.w	r9, r4, asr #31
 800f2d8:	fa02 f203 	lsl.w	r2, r2, r3
 800f2dc:	f000 81f6 	beq.w	800f6cc <FreqInvertRescale+0x4ec>
			for (i = 0; i < 18; i+=2) {
 800f2e0:	4540      	cmp	r0, r8
 800f2e2:	f505 7580 	add.w	r5, r5, #256	; 0x100
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f2e6:	f841 2b04 	str.w	r2, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800f2ea:	d1c1      	bne.n	800f270 <FreqInvertRescale+0x90>
 800f2ec:	e7ad      	b.n	800f24a <FreqInvertRescale+0x6a>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f2ee:	6804      	ldr	r4, [r0, #0]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f2f0:	f1c3 021f 	rsb	r2, r3, #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f2f4:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800f2f8:	fa44 f502 	asr.w	r5, r4, r2
 800f2fc:	17e6      	asrs	r6, r4, #31
 800f2fe:	fa2c fc03 	lsr.w	ip, ip, r3
 800f302:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f306:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f30a:	bf18      	it	ne
 800f30c:	ea8c 0406 	eorne.w	r4, ip, r6
 800f310:	2600      	movs	r6, #0
 800f312:	409c      	lsls	r4, r3
 800f314:	6004      	str	r4, [r0, #0]
 800f316:	ea84 76e4 	eor.w	r6, r4, r4, asr #31
 800f31a:	eba6 76e4 	sub.w	r6, r6, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f31e:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 800f322:	fa45 f402 	asr.w	r4, r5, r2
 800f326:	17ef      	asrs	r7, r5, #31
 800f328:	ebb4 7fe5 	cmp.w	r4, r5, asr #31
 800f32c:	f04f 0400 	mov.w	r4, #0
 800f330:	bf18      	it	ne
 800f332:	ea8c 0507 	eorne.w	r5, ip, r7
 800f336:	409d      	lsls	r5, r3
 800f338:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 800f33c:	ea85 74e5 	eor.w	r4, r5, r5, asr #31
 800f340:	eba4 74e5 	sub.w	r4, r4, r5, asr #31
 800f344:	4334      	orrs	r4, r6
 800f346:	9400      	str	r4, [sp, #0]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f348:	680c      	ldr	r4, [r1, #0]
 800f34a:	fa44 f502 	asr.w	r5, r4, r2
 800f34e:	17e6      	asrs	r6, r4, #31
 800f350:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f354:	bf18      	it	ne
 800f356:	ea86 040c 	eorne.w	r4, r6, ip
 800f35a:	409c      	lsls	r4, r3
 800f35c:	600c      	str	r4, [r1, #0]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f35e:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
 800f362:	fa44 f502 	asr.w	r5, r4, r2
 800f366:	17e6      	asrs	r6, r4, #31
 800f368:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f36c:	f04f 0500 	mov.w	r5, #0
 800f370:	bf18      	it	ne
 800f372:	ea8c 0406 	eorne.w	r4, ip, r6
 800f376:	409c      	lsls	r4, r3
 800f378:	f8c0 4100 	str.w	r4, [r0, #256]	; 0x100
 800f37c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f380:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f384:	f8d0 4180 	ldr.w	r4, [r0, #384]	; 0x180
 800f388:	9501      	str	r5, [sp, #4]
 800f38a:	fa44 f502 	asr.w	r5, r4, r2
 800f38e:	17e6      	asrs	r6, r4, #31
 800f390:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f394:	f04f 0500 	mov.w	r5, #0
 800f398:	bf18      	it	ne
 800f39a:	ea8c 0406 	eorne.w	r4, ip, r6
 800f39e:	409c      	lsls	r4, r3
 800f3a0:	f8c0 4180 	str.w	r4, [r0, #384]	; 0x180
 800f3a4:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f3a8:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f3ac:	684c      	ldr	r4, [r1, #4]
 800f3ae:	9502      	str	r5, [sp, #8]
 800f3b0:	fa44 f502 	asr.w	r5, r4, r2
 800f3b4:	17e6      	asrs	r6, r4, #31
 800f3b6:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f3ba:	bf18      	it	ne
 800f3bc:	ea8c 0406 	eorne.w	r4, ip, r6
 800f3c0:	409c      	lsls	r4, r3
 800f3c2:	604c      	str	r4, [r1, #4]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f3c4:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 800f3c8:	fa44 f502 	asr.w	r5, r4, r2
 800f3cc:	17e6      	asrs	r6, r4, #31
 800f3ce:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f3d2:	f04f 0500 	mov.w	r5, #0
 800f3d6:	bf18      	it	ne
 800f3d8:	ea8c 0406 	eorne.w	r4, ip, r6
 800f3dc:	409c      	lsls	r4, r3
 800f3de:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
 800f3e2:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f3e6:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f3ea:	f8d0 4280 	ldr.w	r4, [r0, #640]	; 0x280
 800f3ee:	9503      	str	r5, [sp, #12]
 800f3f0:	fa44 f502 	asr.w	r5, r4, r2
 800f3f4:	17e6      	asrs	r6, r4, #31
 800f3f6:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f3fa:	f04f 0500 	mov.w	r5, #0
 800f3fe:	bf18      	it	ne
 800f400:	ea8c 0406 	eorne.w	r4, ip, r6
 800f404:	409c      	lsls	r4, r3
 800f406:	f8c0 4280 	str.w	r4, [r0, #640]	; 0x280
 800f40a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f40e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f412:	688c      	ldr	r4, [r1, #8]
 800f414:	9504      	str	r5, [sp, #16]
 800f416:	fa44 f502 	asr.w	r5, r4, r2
 800f41a:	17e6      	asrs	r6, r4, #31
 800f41c:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f420:	bf18      	it	ne
 800f422:	ea8c 0406 	eorne.w	r4, ip, r6
 800f426:	409c      	lsls	r4, r3
 800f428:	608c      	str	r4, [r1, #8]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f42a:	f8d0 4300 	ldr.w	r4, [r0, #768]	; 0x300
 800f42e:	fa44 f502 	asr.w	r5, r4, r2
 800f432:	17e6      	asrs	r6, r4, #31
 800f434:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f438:	f04f 0500 	mov.w	r5, #0
 800f43c:	bf18      	it	ne
 800f43e:	ea8c 0406 	eorne.w	r4, ip, r6
 800f442:	409c      	lsls	r4, r3
 800f444:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
 800f448:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f44c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f450:	f8d0 4380 	ldr.w	r4, [r0, #896]	; 0x380
 800f454:	9505      	str	r5, [sp, #20]
 800f456:	fa44 f502 	asr.w	r5, r4, r2
 800f45a:	17e6      	asrs	r6, r4, #31
 800f45c:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f460:	f04f 0500 	mov.w	r5, #0
 800f464:	bf18      	it	ne
 800f466:	ea8c 0406 	eorne.w	r4, ip, r6
 800f46a:	409c      	lsls	r4, r3
 800f46c:	f8c0 4380 	str.w	r4, [r0, #896]	; 0x380
 800f470:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f474:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f478:	68cc      	ldr	r4, [r1, #12]
 800f47a:	9506      	str	r5, [sp, #24]
 800f47c:	fa44 f502 	asr.w	r5, r4, r2
 800f480:	17e6      	asrs	r6, r4, #31
 800f482:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f486:	bf18      	it	ne
 800f488:	ea8c 0406 	eorne.w	r4, ip, r6
 800f48c:	409c      	lsls	r4, r3
 800f48e:	60cc      	str	r4, [r1, #12]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f490:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 800f494:	fa44 f502 	asr.w	r5, r4, r2
 800f498:	17e6      	asrs	r6, r4, #31
 800f49a:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f49e:	f04f 0500 	mov.w	r5, #0
 800f4a2:	bf18      	it	ne
 800f4a4:	ea8c 0406 	eorne.w	r4, ip, r6
 800f4a8:	409c      	lsls	r4, r3
 800f4aa:	f8c0 4400 	str.w	r4, [r0, #1024]	; 0x400
 800f4ae:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f4b2:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f4b6:	f8d0 4480 	ldr.w	r4, [r0, #1152]	; 0x480
 800f4ba:	9507      	str	r5, [sp, #28]
 800f4bc:	fa44 f502 	asr.w	r5, r4, r2
 800f4c0:	17e6      	asrs	r6, r4, #31
 800f4c2:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f4c6:	f04f 0500 	mov.w	r5, #0
 800f4ca:	bf18      	it	ne
 800f4cc:	ea8c 0406 	eorne.w	r4, ip, r6
 800f4d0:	409c      	lsls	r4, r3
 800f4d2:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
 800f4d6:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f4da:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f4de:	690c      	ldr	r4, [r1, #16]
 800f4e0:	f04f 0900 	mov.w	r9, #0
 800f4e4:	9508      	str	r5, [sp, #32]
 800f4e6:	fa44 f502 	asr.w	r5, r4, r2
 800f4ea:	17e6      	asrs	r6, r4, #31
 800f4ec:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f4f0:	bf18      	it	ne
 800f4f2:	ea8c 0406 	eorne.w	r4, ip, r6
 800f4f6:	409c      	lsls	r4, r3
 800f4f8:	610c      	str	r4, [r1, #16]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f4fa:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
 800f4fe:	fa44 f502 	asr.w	r5, r4, r2
 800f502:	17e6      	asrs	r6, r4, #31
 800f504:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f508:	bf18      	it	ne
 800f50a:	ea8c 0406 	eorne.w	r4, ip, r6
 800f50e:	409c      	lsls	r4, r3
 800f510:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
 800f514:	ea84 79e4 	eor.w	r9, r4, r4, asr #31
 800f518:	eba9 79e4 	sub.w	r9, r9, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f51c:	f8d0 4580 	ldr.w	r4, [r0, #1408]	; 0x580
 800f520:	fa44 f502 	asr.w	r5, r4, r2
 800f524:	17e6      	asrs	r6, r4, #31
 800f526:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f52a:	f04f 0500 	mov.w	r5, #0
 800f52e:	bf18      	it	ne
 800f530:	ea8c 0406 	eorne.w	r4, ip, r6
 800f534:	46ab      	mov	fp, r5
 800f536:	409c      	lsls	r4, r3
 800f538:	f8c0 4580 	str.w	r4, [r0, #1408]	; 0x580
 800f53c:	ea84 7be4 	eor.w	fp, r4, r4, asr #31
 800f540:	ebab 7be4 	sub.w	fp, fp, r4, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f544:	694c      	ldr	r4, [r1, #20]
 800f546:	f04f 0800 	mov.w	r8, #0
 800f54a:	fa44 f502 	asr.w	r5, r4, r2
 800f54e:	17e6      	asrs	r6, r4, #31
 800f550:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f554:	bf18      	it	ne
 800f556:	ea8c 0406 	eorne.w	r4, ip, r6
 800f55a:	409c      	lsls	r4, r3
 800f55c:	614c      	str	r4, [r1, #20]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f55e:	f8d0 4600 	ldr.w	r4, [r0, #1536]	; 0x600
 800f562:	fa44 f502 	asr.w	r5, r4, r2
 800f566:	17e6      	asrs	r6, r4, #31
 800f568:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f56c:	bf18      	it	ne
 800f56e:	ea8c 0406 	eorne.w	r4, ip, r6
 800f572:	409c      	lsls	r4, r3
 800f574:	f8c0 4600 	str.w	r4, [r0, #1536]	; 0x600
 800f578:	ea84 78e4 	eor.w	r8, r4, r4, asr #31
 800f57c:	eba8 78e4 	sub.w	r8, r8, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f580:	f8d0 4680 	ldr.w	r4, [r0, #1664]	; 0x680
 800f584:	2700      	movs	r7, #0
 800f586:	fa44 f502 	asr.w	r5, r4, r2
 800f58a:	17e6      	asrs	r6, r4, #31
 800f58c:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f590:	bf18      	it	ne
 800f592:	ea8c 0406 	eorne.w	r4, ip, r6
 800f596:	409c      	lsls	r4, r3
 800f598:	f8c0 4680 	str.w	r4, [r0, #1664]	; 0x680
 800f59c:	ea84 77e4 	eor.w	r7, r4, r4, asr #31
 800f5a0:	eba7 77e4 	sub.w	r7, r7, r4, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f5a4:	698c      	ldr	r4, [r1, #24]
 800f5a6:	fa44 f502 	asr.w	r5, r4, r2
 800f5aa:	17e6      	asrs	r6, r4, #31
 800f5ac:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f5b0:	bf18      	it	ne
 800f5b2:	ea8c 0406 	eorne.w	r4, ip, r6
 800f5b6:	409c      	lsls	r4, r3
 800f5b8:	618c      	str	r4, [r1, #24]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f5ba:	f8d0 4700 	ldr.w	r4, [r0, #1792]	; 0x700
 800f5be:	fa44 f502 	asr.w	r5, r4, r2
 800f5c2:	17e6      	asrs	r6, r4, #31
 800f5c4:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f5c8:	bf18      	it	ne
 800f5ca:	ea8c 0406 	eorne.w	r4, ip, r6
 800f5ce:	2600      	movs	r6, #0
 800f5d0:	409c      	lsls	r4, r3
 800f5d2:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
 800f5d6:	ea84 76e4 	eor.w	r6, r4, r4, asr #31
 800f5da:	eba6 76e4 	sub.w	r6, r6, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f5de:	f8d0 4780 	ldr.w	r4, [r0, #1920]	; 0x780
 800f5e2:	fa44 f502 	asr.w	r5, r4, r2
 800f5e6:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800f5ea:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 800f5ee:	f04f 0500 	mov.w	r5, #0
 800f5f2:	bf18      	it	ne
 800f5f4:	ea8c 040e 	eorne.w	r4, ip, lr
 800f5f8:	409c      	lsls	r4, r3
 800f5fa:	f8c0 4780 	str.w	r4, [r0, #1920]	; 0x780
 800f5fe:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f602:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f606:	69cc      	ldr	r4, [r1, #28]
 800f608:	9509      	str	r5, [sp, #36]	; 0x24
 800f60a:	fa44 fe02 	asr.w	lr, r4, r2
 800f60e:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800f612:	ebbe 7fe4 	cmp.w	lr, r4, asr #31
 800f616:	bf18      	it	ne
 800f618:	ea8c 040a 	eorne.w	r4, ip, sl
 800f61c:	409c      	lsls	r4, r3
 800f61e:	61cc      	str	r4, [r1, #28]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f620:	f8d0 4800 	ldr.w	r4, [r0, #2048]	; 0x800
 800f624:	fa44 fe02 	asr.w	lr, r4, r2
 800f628:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800f62c:	ebbe 7fe4 	cmp.w	lr, r4, asr #31
 800f630:	f04f 0e00 	mov.w	lr, #0
 800f634:	bf18      	it	ne
 800f636:	ea8a 040c 	eorne.w	r4, sl, ip
 800f63a:	409c      	lsls	r4, r3
 800f63c:	f8c0 4800 	str.w	r4, [r0, #2048]	; 0x800
 800f640:	ea84 7ee4 	eor.w	lr, r4, r4, asr #31
 800f644:	ebae 7ee4 	sub.w	lr, lr, r4, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800f648:	f8d0 4880 	ldr.w	r4, [r0, #2176]	; 0x880
 800f64c:	fa44 fa02 	asr.w	sl, r4, r2
 800f650:	17e5      	asrs	r5, r4, #31
 800f652:	ebba 7fe4 	cmp.w	sl, r4, asr #31
 800f656:	bf18      	it	ne
 800f658:	ea8c 0405 	eorne.w	r4, ip, r5
 800f65c:	409c      	lsls	r4, r3
 800f65e:	f8c0 4880 	str.w	r4, [r0, #2176]	; 0x880
 800f662:	2000      	movs	r0, #0
 800f664:	ea84 70e4 	eor.w	r0, r4, r4, asr #31
 800f668:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
 800f66c:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f670:	432c      	orrs	r4, r5
 800f672:	9d02      	ldr	r5, [sp, #8]
 800f674:	432c      	orrs	r4, r5
 800f676:	9d03      	ldr	r5, [sp, #12]
 800f678:	432c      	orrs	r4, r5
 800f67a:	9d04      	ldr	r5, [sp, #16]
 800f67c:	432c      	orrs	r4, r5
 800f67e:	9d05      	ldr	r5, [sp, #20]
 800f680:	432c      	orrs	r4, r5
 800f682:	9d06      	ldr	r5, [sp, #24]
 800f684:	432c      	orrs	r4, r5
 800f686:	9d07      	ldr	r5, [sp, #28]
 800f688:	432c      	orrs	r4, r5
 800f68a:	9d08      	ldr	r5, [sp, #32]
 800f68c:	432c      	orrs	r4, r5
 800f68e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f690:	ea44 0909 	orr.w	r9, r4, r9
 800f694:	ea49 090b 	orr.w	r9, r9, fp
 800f698:	ea49 0808 	orr.w	r8, r9, r8
 800f69c:	ea48 0707 	orr.w	r7, r8, r7
 800f6a0:	433e      	orrs	r6, r7
 800f6a2:	4335      	orrs	r5, r6
 800f6a4:	ea45 0e0e 	orr.w	lr, r5, lr
 800f6a8:	ea4e 0e00 	orr.w	lr, lr, r0
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f6ac:	6a08      	ldr	r0, [r1, #32]
 800f6ae:	fa40 f202 	asr.w	r2, r0, r2
 800f6b2:	17c4      	asrs	r4, r0, #31
 800f6b4:	ebb2 7fe0 	cmp.w	r2, r0, asr #31
 800f6b8:	bf18      	it	ne
 800f6ba:	ea8c 0004 	eorne.w	r0, ip, r4
 800f6be:	fa00 f303 	lsl.w	r3, r0, r3
}
 800f6c2:	4670      	mov	r0, lr
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f6c4:	620b      	str	r3, [r1, #32]
}
 800f6c6:	b00b      	add	sp, #44	; 0x2c
 800f6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f6cc:	409c      	lsls	r4, r3
			for (i = 0; i < 18; i+=2) {
 800f6ce:	4540      	cmp	r0, r8
 800f6d0:	f505 7580 	add.w	r5, r5, #256	; 0x100
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800f6d4:	f841 4b04 	str.w	r4, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800f6d8:	f47f adca 	bne.w	800f270 <FreqInvertRescale+0x90>
 800f6dc:	e5b5      	b.n	800f24a <FreqInvertRescale+0x6a>
 800f6de:	bf00      	nop

0800f6e0 <xmp3fixpt_IMDCT>:
 *              updated hi->nonZeroBound index for this channel
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
int IMDCT(MP3DecInfo *mp3DecInfo, int gr, int ch)
{
 800f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e4:	b0df      	sub	sp, #380	; 0x17c
 800f6e6:	9136      	str	r1, [sp, #216]	; 0xd8
 800f6e8:	9233      	str	r2, [sp, #204]	; 0xcc
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	f002 8040 	beq.w	8011770 <xmp3fixpt_IMDCT+0x2090>
 800f6f0:	6803      	ldr	r3, [r0, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f002 803c 	beq.w	8011770 <xmp3fixpt_IMDCT+0x2090>
 800f6f8:	6844      	ldr	r4, [r0, #4]
 800f6fa:	9435      	str	r4, [sp, #212]	; 0xd4
 800f6fc:	2c00      	cmp	r4, #0
 800f6fe:	f002 8037 	beq.w	8011770 <xmp3fixpt_IMDCT+0x2090>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800f702:	68c5      	ldr	r5, [r0, #12]
 800f704:	950c      	str	r5, [sp, #48]	; 0x30
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800f706:	2d00      	cmp	r5, #0
 800f708:	f002 8032 	beq.w	8011770 <xmp3fixpt_IMDCT+0x2090>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800f70c:	6940      	ldr	r0, [r0, #20]
 800f70e:	900d      	str	r0, [sp, #52]	; 0x34
 800f710:	2800      	cmp	r0, #0
 800f712:	f002 802d 	beq.w	8011770 <xmp3fixpt_IMDCT+0x2090>
	/* anti-aliasing done on whole long blocks only
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800f716:	4616      	mov	r6, r2
 800f718:	781a      	ldrb	r2, [r3, #0]
 800f71a:	460f      	mov	r7, r1
 800f71c:	48c6      	ldr	r0, [pc, #792]	; (800fa38 <xmp3fixpt_IMDCT+0x358>)
 800f71e:	2a00      	cmp	r2, #0
 800f720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	if (si->sis[gr][ch].blockType != 2) {
 800f722:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800f726:	bf0c      	ite	eq
 800f728:	2108      	moveq	r1, #8
 800f72a:	2106      	movne	r1, #6
	if (si->sis[gr][ch].blockType != 2) {
 800f72c:	011b      	lsls	r3, r3, #4
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800f72e:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
	if (si->sis[gr][ch].blockType != 2) {
 800f732:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
 800f736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f73a:	4423      	add	r3, r4
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800f73c:	17cc      	asrs	r4, r1, #31
 800f73e:	fb80 c101 	smull	ip, r1, r0, r1
 800f742:	ebc4 01a1 	rsb	r1, r4, r1, asr #2
	if (si->sis[gr][ch].blockType != 2) {
 800f746:	00f4      	lsls	r4, r6, #3
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800f748:	b209      	sxth	r1, r1
	if (si->sis[gr][ch].blockType != 2) {
 800f74a:	9434      	str	r4, [sp, #208]	; 0xd0
 800f74c:	00fc      	lsls	r4, r7, #3
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800f74e:	9125      	str	r1, [sp, #148]	; 0x94
	if (si->sis[gr][ch].blockType != 2) {
 800f750:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f752:	9437      	str	r4, [sp, #220]	; 0xdc
 800f754:	2902      	cmp	r1, #2
 800f756:	f001 87dd 	beq.w	8011714 <xmp3fixpt_IMDCT+0x2034>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800f75a:	f506 6390 	add.w	r3, r6, #1152	; 0x480
 800f75e:	f240 2126 	movw	r1, #550	; 0x226
 800f762:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800f766:	428b      	cmp	r3, r1
 800f768:	f340 8323 	ble.w	800fdb2 <xmp3fixpt_IMDCT+0x6d2>
		/* all short transforms */
		bc.nBlocksLong = 0;
		nBfly = 0;
	}
 
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800f76c:	0213      	lsls	r3, r2, #8
 800f76e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f770:	eb05 2302 	add.w	r3, r5, r2, lsl #8
 800f774:	f240 2236 	movw	r2, #566	; 0x236
 800f778:	9309      	str	r3, [sp, #36]	; 0x24
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800f77a:	2320      	movs	r3, #32
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800f77c:	920e      	str	r2, [sp, #56]	; 0x38
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800f77e:	932c      	str	r3, [sp, #176]	; 0xb0
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800f780:	231f      	movs	r3, #31
 800f782:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f784:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800f788:	4aac      	ldr	r2, [pc, #688]	; (800fa3c <xmp3fixpt_IMDCT+0x35c>)
 800f78a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f78e:	9308      	str	r3, [sp, #32]
 800f790:	460b      	mov	r3, r1
 800f792:	6811      	ldr	r1, [r2, #0]
 800f794:	9100      	str	r1, [sp, #0]
 800f796:	6851      	ldr	r1, [r2, #4]
 800f798:	9101      	str	r1, [sp, #4]
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800f79a:	6891      	ldr	r1, [r2, #8]
 800f79c:	9102      	str	r1, [sp, #8]
 800f79e:	68d1      	ldr	r1, [r2, #12]
 800f7a0:	9103      	str	r1, [sp, #12]
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800f7a2:	6911      	ldr	r1, [r2, #16]
 800f7a4:	9104      	str	r1, [sp, #16]
 800f7a6:	6951      	ldr	r1, [r2, #20]
 800f7a8:	9105      	str	r1, [sp, #20]
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800f7aa:	6991      	ldr	r1, [r2, #24]
 800f7ac:	9106      	str	r1, [sp, #24]
 800f7ae:	69d1      	ldr	r1, [r2, #28]
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800f7b0:	e9d2 c708 	ldrd	ip, r7, [r2, #32]
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800f7b4:	9107      	str	r1, [sp, #28]
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800f7b6:	e9d2 650a 	ldrd	r6, r5, [r2, #40]	; 0x28
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800f7ba:	e9d2 010e 	ldrd	r0, r1, [r2, #56]	; 0x38
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800f7be:	e9d2 4b0c 	ldrd	r4, fp, [r2, #48]	; 0x30
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800f7c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800f7c6:	e9d3 8211 	ldrd	r8, r2, [r3, #68]	; 0x44
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f7ca:	9900      	ldr	r1, [sp, #0]
 800f7cc:	46c1      	mov	r9, r8
 800f7ce:	fb81 e909 	smull	lr, r9, r1, r9
 800f7d2:	4696      	mov	lr, r2
 800f7d4:	9801      	ldr	r0, [sp, #4]
 800f7d6:	fb80 ae0e 	smull	sl, lr, r0, lr
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f7da:	eba9 0e0e 	sub.w	lr, r9, lr
 800f7de:	9900      	ldr	r1, [sp, #0]
 800f7e0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f7e4:	f8c3 e044 	str.w	lr, [r3, #68]	; 0x44
 800f7e8:	fb81 e202 	smull	lr, r2, r1, r2
 800f7ec:	fb80 e808 	smull	lr, r8, r0, r8
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f7f0:	4442      	add	r2, r8
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800f7f2:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
 800f7f6:	9902      	ldr	r1, [sp, #8]
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f7f8:	0052      	lsls	r2, r2, #1
 800f7fa:	46c1      	mov	r9, r8
 800f7fc:	649a      	str	r2, [r3, #72]	; 0x48
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800f7fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f800:	fb81 e909 	smull	lr, r9, r1, r9
 800f804:	4696      	mov	lr, r2
 800f806:	9803      	ldr	r0, [sp, #12]
 800f808:	fb80 ae0e 	smull	sl, lr, r0, lr
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f80c:	eba9 0e0e 	sub.w	lr, r9, lr
 800f810:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f814:	f8c3 e040 	str.w	lr, [r3, #64]	; 0x40
 800f818:	fb81 e202 	smull	lr, r2, r1, r2
 800f81c:	fb80 e808 	smull	lr, r8, r0, r8
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f820:	4442      	add	r2, r8
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800f822:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 800f826:	9904      	ldr	r1, [sp, #16]
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f828:	0052      	lsls	r2, r2, #1
 800f82a:	46c1      	mov	r9, r8
 800f82c:	64da      	str	r2, [r3, #76]	; 0x4c
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800f82e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f830:	fb81 e909 	smull	lr, r9, r1, r9
 800f834:	4696      	mov	lr, r2
 800f836:	9805      	ldr	r0, [sp, #20]
 800f838:	fb80 ae0e 	smull	sl, lr, r0, lr
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f83c:	eba9 0e0e 	sub.w	lr, r9, lr
 800f840:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f844:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
 800f848:	fb81 e202 	smull	lr, r2, r1, r2
 800f84c:	fb80 e808 	smull	lr, r8, r0, r8
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f850:	4442      	add	r2, r8
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800f852:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 800f856:	9906      	ldr	r1, [sp, #24]
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f858:	0052      	lsls	r2, r2, #1
 800f85a:	46c1      	mov	r9, r8
 800f85c:	651a      	str	r2, [r3, #80]	; 0x50
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800f85e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f860:	fb81 e909 	smull	lr, r9, r1, r9
 800f864:	4696      	mov	lr, r2
 800f866:	9807      	ldr	r0, [sp, #28]
 800f868:	fb80 ae0e 	smull	sl, lr, r0, lr
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f86c:	eba9 0e0e 	sub.w	lr, r9, lr
 800f870:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f874:	f8c3 e038 	str.w	lr, [r3, #56]	; 0x38
 800f878:	fb81 e202 	smull	lr, r2, r1, r2
 800f87c:	fb80 e808 	smull	lr, r8, r0, r8
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f880:	4442      	add	r2, r8
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800f882:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f886:	0052      	lsls	r2, r2, #1
 800f888:	46c1      	mov	r9, r8
 800f88a:	655a      	str	r2, [r3, #84]	; 0x54
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800f88c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f88e:	fb8c e909 	smull	lr, r9, ip, r9
 800f892:	4696      	mov	lr, r2
 800f894:	fb87 ae0e 	smull	sl, lr, r7, lr
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f898:	eba9 0e0e 	sub.w	lr, r9, lr
 800f89c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f8a0:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
 800f8a4:	fb8c e202 	smull	lr, r2, ip, r2
 800f8a8:	fb87 e808 	smull	lr, r8, r7, r8
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f8ac:	4442      	add	r2, r8
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800f8ae:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f8b2:	0052      	lsls	r2, r2, #1
 800f8b4:	46c1      	mov	r9, r8
 800f8b6:	659a      	str	r2, [r3, #88]	; 0x58
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800f8b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f8ba:	fb86 e909 	smull	lr, r9, r6, r9
 800f8be:	4696      	mov	lr, r2
 800f8c0:	fb85 ae0e 	smull	sl, lr, r5, lr
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f8c4:	eba9 0e0e 	sub.w	lr, r9, lr
 800f8c8:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f8cc:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 800f8d0:	fb86 e202 	smull	lr, r2, r6, r2
 800f8d4:	fb85 e808 	smull	lr, r8, r5, r8
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f8d8:	4442      	add	r2, r8
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800f8da:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f8de:	0052      	lsls	r2, r2, #1
 800f8e0:	46c1      	mov	r9, r8
 800f8e2:	65da      	str	r2, [r3, #92]	; 0x5c
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800f8e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f8e6:	fb84 e909 	smull	lr, r9, r4, r9
 800f8ea:	4696      	mov	lr, r2
 800f8ec:	fb8b ae0e 	smull	sl, lr, fp, lr
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f8f0:	eba9 0e0e 	sub.w	lr, r9, lr
 800f8f4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f8f8:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
 800f8fc:	fb84 e202 	smull	lr, r2, r4, r2
 800f900:	fb8b e808 	smull	lr, r8, fp, r8
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f904:	4442      	add	r2, r8
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800f906:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 800f90a:	980a      	ldr	r0, [sp, #40]	; 0x28
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f90c:	0052      	lsls	r2, r2, #1
 800f90e:	46c1      	mov	r9, r8
 800f910:	661a      	str	r2, [r3, #96]	; 0x60
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800f912:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f914:	fb80 e909 	smull	lr, r9, r0, r9
 800f918:	4696      	mov	lr, r2
 800f91a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f91c:	fb81 ae0e 	smull	sl, lr, r1, lr
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f920:	eba9 0e0e 	sub.w	lr, r9, lr
 800f924:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f928:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
 800f92c:	fb80 e202 	smull	lr, r2, r0, r2
 800f930:	fb81 e808 	smull	lr, r8, r1, r8
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f934:	4442      	add	r2, r8
	for (k = nBfly; k > 0; k--) {
 800f936:	3348      	adds	r3, #72	; 0x48
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f938:	0052      	lsls	r2, r2, #1
 800f93a:	61da      	str	r2, [r3, #28]
	for (k = nBfly; k > 0; k--) {
 800f93c:	9a08      	ldr	r2, [sp, #32]
 800f93e:	4293      	cmp	r3, r2
 800f940:	f47f af41 	bne.w	800f7c6 <xmp3fixpt_IMDCT+0xe6>
	/* for readability, use a struct instead of passing a million parameters to HybridTransform() */
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
	bc.prevType = mi->prevType[ch];
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f944:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 800f948:	4413      	add	r3, r2
 800f94a:	e9dd 1233 	ldrd	r1, r2, [sp, #204]	; 0xcc
 800f94e:	011b      	lsls	r3, r3, #4
 800f950:	440a      	add	r2, r1
 800f952:	460e      	mov	r6, r1
 800f954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f958:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800f95a:	4413      	add	r3, r2
 800f95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f95e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	bc.gbIn = hi->gb[ch];

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f960:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f962:	eb02 0186 	add.w	r1, r2, r6, lsl #2
 800f966:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f968:	eb07 0286 	add.w	r2, r7, r6, lsl #2
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800f96c:	4832      	ldr	r0, [pc, #200]	; (800fa38 <xmp3fixpt_IMDCT+0x358>)
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f96e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f972:	443d      	add	r5, r7
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f974:	f502 5480 	add.w	r4, r2, #4096	; 0x1000
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f978:	9532      	str	r5, [sp, #200]	; 0xc8
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f97a:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 800f97e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f980:	9438      	str	r4, [sp, #224]	; 0xe0
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f982:	4295      	cmp	r5, r2
 800f984:	bfb8      	it	lt
 800f986:	4615      	movlt	r5, r2
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f988:	2b00      	cmp	r3, #0
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f98a:	462a      	mov	r2, r5
 800f98c:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f990:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800f992:	bf08      	it	eq
 800f994:	2500      	moveq	r5, #0
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800f996:	3211      	adds	r2, #17
	bc.gbIn = hi->gb[ch];
 800f998:	f8d1 1208 	ldr.w	r1, [r1, #520]	; 0x208
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f99c:	9525      	str	r5, [sp, #148]	; 0x94
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800f99e:	fb80 5002 	smull	r5, r0, r0, r2
 800f9a2:	17d2      	asrs	r2, r2, #31
	bc.gbIn = hi->gb[ch];
 800f9a4:	910a      	str	r1, [sp, #40]	; 0x28
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800f9a6:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 800f9aa:	9202      	str	r2, [sp, #8]
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f9ac:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800f9ae:	1991      	adds	r1, r2, r6
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f9b0:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f9b2:	eb07 12c1 	add.w	r2, r7, r1, lsl #7
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f9b6:	2e00      	cmp	r6, #0
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f9b8:	f502 5590 	add.w	r5, r2, #4608	; 0x1200
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f9bc:	f8d4 2b00 	ldr.w	r2, [r4, #2816]	; 0xb00
 800f9c0:	9224      	str	r2, [sp, #144]	; 0x90
	bc.prevType = mi->prevType[ch];
 800f9c2:	f8d4 2b08 	ldr.w	r2, [r4, #2824]	; 0xb08
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f9c6:	952b      	str	r5, [sp, #172]	; 0xac
	bc.prevType = mi->prevType[ch];
 800f9c8:	9213      	str	r2, [sp, #76]	; 0x4c
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 800f9ca:	f8d4 2b10 	ldr.w	r2, [r4, #2832]	; 0xb10
 800f9ce:	9226      	str	r2, [sp, #152]	; 0x98
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f9d0:	f341 86c6 	ble.w	8011760 <xmp3fixpt_IMDCT+0x2080>
 800f9d4:	980a      	ldr	r0, [sp, #40]	; 0x28
		currWinIdx = sis->blockType;
 800f9d6:	e9dd 4236 	ldrd	r4, r2, [sp, #216]	; 0xd8
 800f9da:	2806      	cmp	r0, #6
 800f9dc:	4422      	add	r2, r4
 800f9de:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800f9e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f9e6:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800f9e8:	440a      	add	r2, r1
	mOut = 0;
 800f9ea:	f04f 0100 	mov.w	r1, #0
		currWinIdx = sis->blockType;
 800f9ee:	921a      	str	r2, [sp, #104]	; 0x68
		es = 7 - gb;
 800f9f0:	f1c0 0207 	rsb	r2, r0, #7
 800f9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9f6:	921c      	str	r2, [sp, #112]	; 0x70
 800f9f8:	bfc8      	it	gt
 800f9fa:	460a      	movgt	r2, r1
 800f9fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
	mOut = 0;
 800fa00:	9100      	str	r1, [sp, #0]
 800fa02:	ee07 2a90 	vmov	s15, r2
 800fa06:	f105 0224 	add.w	r2, r5, #36	; 0x24
 800fa0a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 800fa0c:	46a3      	mov	fp, r4
 800fa0e:	9205      	str	r2, [sp, #20]
 800fa10:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 800fa14:	9504      	str	r5, [sp, #16]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800fa16:	9106      	str	r1, [sp, #24]
 800fa18:	921d      	str	r2, [sp, #116]	; 0x74
 800fa1a:	9a05      	ldr	r2, [sp, #20]
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800fa1c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800fa1e:	3a24      	subs	r2, #36	; 0x24
 800fa20:	9806      	ldr	r0, [sp, #24]
 800fa22:	920c      	str	r2, [sp, #48]	; 0x30
 800fa24:	4281      	cmp	r1, r0
		currWinIdx = sis->blockType;
 800fa26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fa28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800fa2a:	920b      	str	r2, [sp, #44]	; 0x2c
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800fa2c:	dd08      	ble.n	800fa40 <xmp3fixpt_IMDCT+0x360>
			currWinIdx = 0;
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	bf18      	it	ne
 800fa32:	2200      	movne	r2, #0
 800fa34:	920b      	str	r2, [sp, #44]	; 0x2c
 800fa36:	e003      	b.n	800fa40 <xmp3fixpt_IMDCT+0x360>
 800fa38:	38e38e39 	.word	0x38e38e39
 800fa3c:	080232d4 	.word	0x080232d4
		if (i < bc->prevWinSwitch)
 800fa40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fa42:	9a06      	ldr	r2, [sp, #24]
 800fa44:	4293      	cmp	r3, r2
 800fa46:	f300 827f 	bgt.w	800ff48 <xmp3fixpt_IMDCT+0x868>
 800fa4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	bc.prevType = mi->prevType[ch];
 800fa4e:	931b      	str	r3, [sp, #108]	; 0x6c
 800fa50:	431a      	orrs	r2, r3
 800fa52:	9201      	str	r2, [sp, #4]
	if (gb < 7) {
 800fa54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa56:	2b06      	cmp	r3, #6
 800fa58:	f340 81dc 	ble.w	800fe14 <xmp3fixpt_IMDCT+0x734>
			acc1 = (*xCurr--) - acc1;
 800fa5c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
			acc1 = (*xCurr--) - acc1;
 800fa60:	f85b 6c08 	ldr.w	r6, [fp, #-8]
			acc1 = (*xCurr--) - acc1;
 800fa64:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
			acc1 = (*xCurr--) - acc1;
 800fa68:	eba6 0803 	sub.w	r8, r6, r3
 800fa6c:	f85b 7c10 	ldr.w	r7, [fp, #-16]
			acc1 = (*xCurr--) - acc1;
 800fa70:	9315      	str	r3, [sp, #84]	; 0x54
 800fa72:	eba2 0208 	sub.w	r2, r2, r8
			acc1 = (*xCurr--) - acc1;
 800fa76:	f85b 5c20 	ldr.w	r5, [fp, #-32]
 800fa7a:	f85b 6c28 	ldr.w	r6, [fp, #-40]
			acc2 = acc1 - acc2;
 800fa7e:	1ad1      	subs	r1, r2, r3
			acc1 = (*xCurr--) - acc1;
 800fa80:	1ab8      	subs	r0, r7, r2
			acc1 = (*xCurr--) - acc1;
 800fa82:	f85b 3c14 	ldr.w	r3, [fp, #-20]
			acc1 = (*xCurr--) - acc1;
 800fa86:	f85b 2c18 	ldr.w	r2, [fp, #-24]
 800fa8a:	4686      	mov	lr, r0
			acc1 = (*xCurr--) - acc1;
 800fa8c:	1a1b      	subs	r3, r3, r0
			acc1 = (*xCurr--) - acc1;
 800fa8e:	f85b 4c30 	ldr.w	r4, [fp, #-48]
			acc2 = acc1 - acc2;
 800fa92:	9107      	str	r1, [sp, #28]
			acc1 = (*xCurr--) - acc1;
 800fa94:	eba2 0a03 	sub.w	sl, r2, r3
			acc2 = acc1 - acc2;
 800fa98:	1a5a      	subs	r2, r3, r1
			acc1 = (*xCurr--) - acc1;
 800fa9a:	f85b 3c1c 	ldr.w	r3, [fp, #-28]
			acc2 = acc1 - acc2;
 800fa9e:	920f      	str	r2, [sp, #60]	; 0x3c
			acc1 = (*xCurr--) - acc1;
 800faa0:	eba3 030a 	sub.w	r3, r3, sl
			acc1 = (*xCurr--) - acc1;
 800faa4:	eba5 0903 	sub.w	r9, r5, r3
			acc2 = acc1 - acc2;
 800faa8:	1a9a      	subs	r2, r3, r2
			acc1 = (*xCurr--) - acc1;
 800faaa:	f85b 3c24 	ldr.w	r3, [fp, #-36]
			acc2 = acc1 - acc2;
 800faae:	9208      	str	r2, [sp, #32]
			acc1 = (*xCurr--) - acc1;
 800fab0:	eba3 0309 	sub.w	r3, r3, r9
			acc1 = (*xCurr--) - acc1;
 800fab4:	f85b 5c40 	ldr.w	r5, [fp, #-64]
			acc2 = acc1 - acc2;
 800fab8:	1a9a      	subs	r2, r3, r2
			acc1 = (*xCurr--) - acc1;
 800faba:	1af6      	subs	r6, r6, r3
			acc1 = (*xCurr--) - acc1;
 800fabc:	f85b 3c2c 	ldr.w	r3, [fp, #-44]
			acc2 = acc1 - acc2;
 800fac0:	9216      	str	r2, [sp, #88]	; 0x58
			acc1 = (*xCurr--) - acc1;
 800fac2:	1b9b      	subs	r3, r3, r6
			acc2 = acc1 - acc2;
 800fac4:	1a99      	subs	r1, r3, r2
			acc1 = (*xCurr--) - acc1;
 800fac6:	1ae4      	subs	r4, r4, r3
			acc1 = (*xCurr--) - acc1;
 800fac8:	f85b 3c34 	ldr.w	r3, [fp, #-52]
			acc2 = acc1 - acc2;
 800facc:	9112      	str	r1, [sp, #72]	; 0x48
			acc1 = (*xCurr--) - acc1;
 800face:	1b1a      	subs	r2, r3, r4
			acc1 = (*xCurr--) - acc1;
 800fad0:	f85b 3c38 	ldr.w	r3, [fp, #-56]
			acc2 = acc1 - acc2;
 800fad4:	1a51      	subs	r1, r2, r1
			acc1 = (*xCurr--) - acc1;
 800fad6:	1a9b      	subs	r3, r3, r2
			acc1 = (*xCurr--) - acc1;
 800fad8:	f85b 2c3c 	ldr.w	r2, [fp, #-60]
			acc2 = acc1 - acc2;
 800fadc:	9110      	str	r1, [sp, #64]	; 0x40
			acc1 = (*xCurr--) - acc1;
 800fade:	1ad2      	subs	r2, r2, r3
			acc1 = (*xCurr--) - acc1;
 800fae0:	1aa8      	subs	r0, r5, r2
 800fae2:	9003      	str	r0, [sp, #12]
			acc2 = acc1 - acc2;
 800fae4:	1a50      	subs	r0, r2, r1
			acc1 = (*xCurr--) - acc1;
 800fae6:	9903      	ldr	r1, [sp, #12]
 800fae8:	f85b 2c44 	ldr.w	r2, [fp, #-68]
			acc2 = acc1 - acc2;
 800faec:	900e      	str	r0, [sp, #56]	; 0x38
			acc1 = (*xCurr--) - acc1;
 800faee:	1a52      	subs	r2, r2, r1
			acc1 = (*xCurr--) - acc1;
 800faf0:	f85b 1c48 	ldr.w	r1, [fp, #-72]
 800faf4:	eba1 0c02 	sub.w	ip, r1, r2
			acc2 = acc1 - acc2;
 800faf8:	1a12      	subs	r2, r2, r0
	xBuf[9] >>= 1;
 800fafa:	1052      	asrs	r2, r2, #1
 800fafc:	4625      	mov	r5, r4
	xBuf[0] >>= 1;
 800fafe:	ea4f 016c 	mov.w	r1, ip, asr #1
	a5 = x2 + x4;
 800fb02:	18f0      	adds	r0, r6, r3
	xBuf[9] >>= 1;
 800fb04:	920d      	str	r2, [sp, #52]	; 0x34
	a4 = x2 - x4;
 800fb06:	1b9a      	subs	r2, r3, r6
	xBuf[0] >>= 1;
 800fb08:	9111      	str	r1, [sp, #68]	; 0x44
	a1 = x0 - x6;
 800fb0a:	ebca 0c6c 	rsb	ip, sl, ip, asr #1
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800fb0e:	eba2 0708 	sub.w	r7, r2, r8
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800fb12:	4674      	mov	r4, lr
 800fb14:	eba9 010e 	sub.w	r1, r9, lr
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800fb18:	9714      	str	r7, [sp, #80]	; 0x50
 800fb1a:	4fb8      	ldr	r7, [pc, #736]	; (800fdfc <xmp3fixpt_IMDCT+0x71c>)
 800fb1c:	fb87 2505 	smull	r2, r5, r7, r5
	a2 = x1 - x5;
 800fb20:	9a03      	ldr	r2, [sp, #12]
 800fb22:	9517      	str	r5, [sp, #92]	; 0x5c
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800fb24:	4625      	mov	r5, r4
	a2 = x1 - x5;
 800fb26:	eba2 0e09 	sub.w	lr, r2, r9
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800fb2a:	ebae 0e04 	sub.w	lr, lr, r4
 800fb2e:	fb87 2e0e 	smull	r2, lr, r7, lr
 800fb32:	4fb3      	ldr	r7, [pc, #716]	; (800fe00 <xmp3fixpt_IMDCT+0x720>)
 800fb34:	4604      	mov	r4, r0
 800fb36:	fb87 2404 	smull	r2, r4, r7, r4
 800fb3a:	9418      	str	r4, [sp, #96]	; 0x60
	a6 = x2 + x8;
 800fb3c:	4443      	add	r3, r8
 800fb3e:	4cb1      	ldr	r4, [pc, #708]	; (800fe04 <xmp3fixpt_IMDCT+0x724>)
 800fb40:	fb84 2303 	smull	r2, r3, r4, r3
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800fb44:	eba8 0606 	sub.w	r6, r8, r6
 800fb48:	9319      	str	r3, [sp, #100]	; 0x64
 800fb4a:	fb87 2606 	smull	r2, r6, r7, r6
 800fb4e:	fb84 2000 	smull	r2, r0, r4, r0
 800fb52:	f104 5470 	add.w	r4, r4, #1006632960	; 0x3c000000
 800fb56:	4688      	mov	r8, r1
 800fb58:	f504 244c 	add.w	r4, r4, #835584	; 0xcc000
 800fb5c:	f204 24cb 	addw	r4, r4, #715	; 0x2cb
 800fb60:	fb84 2808 	smull	r2, r8, r4, r8
	a7 = x1 + x7;
 800fb64:	9b03      	ldr	r3, [sp, #12]
 800fb66:	462a      	mov	r2, r5
 800fb68:	441a      	add	r2, r3
 800fb6a:	4ba7      	ldr	r3, [pc, #668]	; (800fe08 <xmp3fixpt_IMDCT+0x728>)
 800fb6c:	fb83 7202 	smull	r7, r2, r3, r2
	a3 = x1 + x5;
 800fb70:	9d03      	ldr	r5, [sp, #12]
 800fb72:	444d      	add	r5, r9
 800fb74:	fb84 7505 	smull	r7, r5, r4, r5
 800fb78:	fb83 7101 	smull	r7, r1, r3, r1
	a12 = x[0] +  (x[6] >> 1);
 800fb7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
	a20 = (m11 << 1) - (m12 << 1);
 800fb7e:	0049      	lsls	r1, r1, #1
	a16 = ( m5 << 1) + (m6 << 1);
 800fb80:	9c18      	ldr	r4, [sp, #96]	; 0x60
	a19 = ( m9 << 1) + (m10 << 1);
 800fb82:	0052      	lsls	r2, r2, #1
	a12 = x[0] +  (x[6] >> 1);
 800fb84:	eb03 076a 	add.w	r7, r3, sl, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800fb88:	9b19      	ldr	r3, [sp, #100]	; 0x64
	a20 = (m11 << 1) - (m12 << 1);
 800fb8a:	ebc1 0545 	rsb	r5, r1, r5, lsl #1
	a13 = a12  +  (  m1 << 1);
 800fb8e:	9917      	ldr	r1, [sp, #92]	; 0x5c
	a16 = ( m5 << 1) + (m6 << 1);
 800fb90:	005b      	lsls	r3, r3, #1
 800fb92:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	a19 = ( m9 << 1) + (m10 << 1);
 800fb96:	eb02 0848 	add.w	r8, r2, r8, lsl #1
	a16 = ( m5 << 1) + (m6 << 1);
 800fb9a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	a13 = a12  +  (  m1 << 1);
 800fb9e:	eb07 0241 	add.w	r2, r7, r1, lsl #1
	a14 = a12  -  (  m1 << 1);
 800fba2:	eba7 0441 	sub.w	r4, r7, r1, lsl #1
	a15 = a1   +  ( a11 >> 1);
 800fba6:	9f14      	ldr	r7, [sp, #80]	; 0x50
	a17 = ( m7 << 1) - (m8 << 1);
 800fba8:	0040      	lsls	r0, r0, #1
 800fbaa:	ebc0 0646 	rsb	r6, r0, r6, lsl #1
	a15 = a1   +  ( a11 >> 1);
 800fbae:	eb0c 0067 	add.w	r0, ip, r7, asr #1
	x4 = a1 - a11;			x[4] = x4;
 800fbb2:	ebac 0707 	sub.w	r7, ip, r7
	a18 = a16 + a17;
 800fbb6:	1999      	adds	r1, r3, r6
	a21 = a20 - a19;
 800fbb8:	eba5 0c08 	sub.w	ip, r5, r8
	x4 = a1 - a11;			x[4] = x4;
 800fbbc:	973e      	str	r7, [sp, #248]	; 0xf8
	a22 = a13 + a16;
 800fbbe:	18d7      	adds	r7, r2, r3
	a23 = a14 + a16;
 800fbc0:	4423      	add	r3, r4
	x0 = a22 + a19;			x[0] = x0;
 800fbc2:	4447      	add	r7, r8
	x8 = a23 - a19;			x[8] = x8;
 800fbc4:	eba3 0308 	sub.w	r3, r3, r8
	x0 = a22 + a19;			x[0] = x0;
 800fbc8:	973a      	str	r7, [sp, #232]	; 0xe8
	x8 = a23 - a19;			x[8] = x8;
 800fbca:	9342      	str	r3, [sp, #264]	; 0x108
	a24 = a14 + a17;
 800fbcc:	19a3      	adds	r3, r4, r6
	a26 = a14 - a18;
 800fbce:	1a64      	subs	r4, r4, r1
	a25 = a13 + a17;
 800fbd0:	4416      	add	r6, r2
	x2 = a24 + a20;			x[2] = x2;
 800fbd2:	442b      	add	r3, r5
	a27 = a13 - a18;
 800fbd4:	1a51      	subs	r1, r2, r1
	x6 = a25 - a20;			x[6] = x6;
 800fbd6:	1b76      	subs	r6, r6, r5
	x3 = a26 - a21;			x[3] = x3;
 800fbd8:	eba4 040c 	sub.w	r4, r4, ip
	x2 = a24 + a20;			x[2] = x2;
 800fbdc:	933c      	str	r3, [sp, #240]	; 0xf0
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800fbde:	eb00 034e 	add.w	r3, r0, lr, lsl #1
	x5 = a27 + a21;			x[5] = x5;
 800fbe2:	4461      	add	r1, ip
	a1 = x0 - x6;
 800fbe4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800fbe6:	933b      	str	r3, [sp, #236]	; 0xec
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800fbe8:	eba0 004e 	sub.w	r0, r0, lr, lsl #1
	a1 = x0 - x6;
 800fbec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	x3 = a26 - a21;			x[3] = x3;
 800fbee:	943d      	str	r4, [sp, #244]	; 0xf4
	a1 = x0 - x6;
 800fbf0:	eba3 0c05 	sub.w	ip, r3, r5
	a4 = x2 - x4;
 800fbf4:	9c16      	ldr	r4, [sp, #88]	; 0x58
	x5 = a27 + a21;			x[5] = x5;
 800fbf6:	913f      	str	r1, [sp, #252]	; 0xfc
	a4 = x2 - x4;
 800fbf8:	9910      	ldr	r1, [sp, #64]	; 0x40
	x6 = a25 - a20;			x[6] = x6;
 800fbfa:	9640      	str	r6, [sp, #256]	; 0x100
	a4 = x2 - x4;
 800fbfc:	eba1 0904 	sub.w	r9, r1, r4
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800fc00:	9e15      	ldr	r6, [sp, #84]	; 0x54
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800fc02:	9041      	str	r0, [sp, #260]	; 0x104
	a5 = x2 + x4;
 800fc04:	1908      	adds	r0, r1, r4
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800fc06:	eba9 0906 	sub.w	r9, r9, r6
 800fc0a:	4a7c      	ldr	r2, [pc, #496]	; (800fdfc <xmp3fixpt_IMDCT+0x71c>)
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800fc0c:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
 800fc10:	1aeb      	subs	r3, r5, r3
 800fc12:	9303      	str	r3, [sp, #12]
 800fc14:	fb82 3a0a 	smull	r3, sl, r2, sl
	a2 = x1 - x5;
 800fc18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800fc1a:	9b07      	ldr	r3, [sp, #28]
	a2 = x1 - x5;
 800fc1c:	1b7f      	subs	r7, r7, r5
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800fc1e:	1aff      	subs	r7, r7, r3
 800fc20:	fb82 3707 	smull	r3, r7, r2, r7
 800fc24:	4d76      	ldr	r5, [pc, #472]	; (800fe00 <xmp3fixpt_IMDCT+0x720>)
 800fc26:	4680      	mov	r8, r0
 800fc28:	fb85 3808 	smull	r3, r8, r5, r8
	a6 = x2 + x8;
 800fc2c:	460a      	mov	r2, r1
 800fc2e:	4631      	mov	r1, r6
 800fc30:	1993      	adds	r3, r2, r6
 800fc32:	4e74      	ldr	r6, [pc, #464]	; (800fe04 <xmp3fixpt_IMDCT+0x724>)
 800fc34:	fb86 2303 	smull	r2, r3, r6, r3
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800fc38:	1b0c      	subs	r4, r1, r4
 800fc3a:	9310      	str	r3, [sp, #64]	; 0x40
 800fc3c:	fb85 2404 	smull	r2, r4, r5, r4
 800fc40:	fb86 2000 	smull	r2, r0, r6, r0
 800fc44:	f106 5670 	add.w	r6, r6, #1006632960	; 0x3c000000
 800fc48:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800fc4c:	f506 264c 	add.w	r6, r6, #835584	; 0xcc000
 800fc50:	f206 26cb 	addw	r6, r6, #715	; 0x2cb
 800fc54:	fb86 2e0e 	smull	r2, lr, r6, lr
	a7 = x1 + x7;
 800fc58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc5a:	9a07      	ldr	r2, [sp, #28]
 800fc5c:	496a      	ldr	r1, [pc, #424]	; (800fe08 <xmp3fixpt_IMDCT+0x728>)
 800fc5e:	189a      	adds	r2, r3, r2
 800fc60:	fb81 5202 	smull	r5, r2, r1, r2
	a3 = x1 + x5;
 800fc64:	9d08      	ldr	r5, [sp, #32]
 800fc66:	4631      	mov	r1, r6
 800fc68:	195d      	adds	r5, r3, r5
 800fc6a:	fb81 6505 	smull	r6, r5, r1, r5
 800fc6e:	4b66      	ldr	r3, [pc, #408]	; (800fe08 <xmp3fixpt_IMDCT+0x728>)
 800fc70:	9903      	ldr	r1, [sp, #12]
 800fc72:	fb83 6101 	smull	r6, r1, r3, r1
	a12 = x[0] +  (x[6] >> 1);
 800fc76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	a19 = ( m9 << 1) + (m10 << 1);
 800fc78:	0052      	lsls	r2, r2, #1
	a12 = x[0] +  (x[6] >> 1);
 800fc7a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	a17 = ( m7 << 1) - (m8 << 1);
 800fc7c:	0040      	lsls	r0, r0, #1
	a19 = ( m9 << 1) + (m10 << 1);
 800fc7e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
	a12 = x[0] +  (x[6] >> 1);
 800fc82:	eb03 0666 	add.w	r6, r3, r6, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800fc86:	9b10      	ldr	r3, [sp, #64]	; 0x40
	a17 = ( m7 << 1) - (m8 << 1);
 800fc88:	ebc0 0044 	rsb	r0, r0, r4, lsl #1
	x4 = a1 - a11;			x[4] = x4;
 800fc8c:	ebac 0409 	sub.w	r4, ip, r9
	a16 = ( m5 << 1) + (m6 << 1);
 800fc90:	005b      	lsls	r3, r3, #1
	a13 = a12  +  (  m1 << 1);
 800fc92:	eb06 024a 	add.w	r2, r6, sl, lsl #1
	x4 = a1 - a11;			x[4] = x4;
 800fc96:	9447      	str	r4, [sp, #284]	; 0x11c
	a14 = a12  -  (  m1 << 1);
 800fc98:	eba6 064a 	sub.w	r6, r6, sl, lsl #1
	a16 = ( m5 << 1) + (m6 << 1);
 800fc9c:	eb03 0348 	add.w	r3, r3, r8, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800fca0:	0049      	lsls	r1, r1, #1
	a22 = a13 + a16;
 800fca2:	18d4      	adds	r4, r2, r3
	a15 = a1   +  ( a11 >> 1);
 800fca4:	eb0c 0a69 	add.w	sl, ip, r9, asr #1
	a20 = (m11 << 1) - (m12 << 1);
 800fca8:	ebc1 0545 	rsb	r5, r1, r5, lsl #1
	a18 = a16 + a17;
 800fcac:	1819      	adds	r1, r3, r0
	a23 = a14 + a16;
 800fcae:	4433      	add	r3, r6
	x0 = a22 + a19;			x[0] = x0;
 800fcb0:	4474      	add	r4, lr
	a21 = a20 - a19;
 800fcb2:	eba5 0c0e 	sub.w	ip, r5, lr
	x8 = a23 - a19;			x[8] = x8;
 800fcb6:	eba3 030e 	sub.w	r3, r3, lr
	x0 = a22 + a19;			x[0] = x0;
 800fcba:	9443      	str	r4, [sp, #268]	; 0x10c
	x8 = a23 - a19;			x[8] = x8;
 800fcbc:	934b      	str	r3, [sp, #300]	; 0x12c
	a24 = a14 + a17;
 800fcbe:	1833      	adds	r3, r6, r0
	a26 = a14 - a18;
 800fcc0:	1a76      	subs	r6, r6, r1
	a25 = a13 + a17;
 800fcc2:	4410      	add	r0, r2
	x2 = a24 + a20;			x[2] = x2;
 800fcc4:	442b      	add	r3, r5
	a27 = a13 - a18;
 800fcc6:	1a51      	subs	r1, r2, r1
	x6 = a25 - a20;			x[6] = x6;
 800fcc8:	1b40      	subs	r0, r0, r5
	x3 = a26 - a21;			x[3] = x3;
 800fcca:	eba6 060c 	sub.w	r6, r6, ip
	x2 = a24 + a20;			x[2] = x2;
 800fcce:	9345      	str	r3, [sp, #276]	; 0x114
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800fcd0:	eb0a 0347 	add.w	r3, sl, r7, lsl #1
	x5 = a27 + a21;			x[5] = x5;
 800fcd4:	4461      	add	r1, ip
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800fcd6:	ebaa 0747 	sub.w	r7, sl, r7, lsl #1
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800fcda:	9344      	str	r3, [sp, #272]	; 0x110
	if (btPrev == 0 && btCurr == 0) {
 800fcdc:	9b01      	ldr	r3, [sp, #4]
	x6 = a25 - a20;			x[6] = x6;
 800fcde:	9049      	str	r0, [sp, #292]	; 0x124
	x3 = a26 - a21;			x[3] = x3;
 800fce0:	9646      	str	r6, [sp, #280]	; 0x118
	x5 = a27 + a21;			x[5] = x5;
 800fce2:	9148      	str	r1, [sp, #288]	; 0x120
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800fce4:	974a      	str	r7, [sp, #296]	; 0x128
	if (btPrev == 0 && btCurr == 0) {
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f040 8133 	bne.w	800ff52 <xmp3fixpt_IMDCT+0x872>
 800fcec:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fcf0:	4699      	mov	r9, r3
 800fcf2:	4c46      	ldr	r4, [pc, #280]	; (800fe0c <xmp3fixpt_IMDCT+0x72c>)
	xp = xBuf + 8;
 800fcf4:	ad42      	add	r5, sp, #264	; 0x108
	if (btPrev == 0 && btCurr == 0) {
 800fcf6:	4657      	mov	r7, sl
 800fcf8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	cp = c18 + 8;
 800fcfa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800fe10 <xmp3fixpt_IMDCT+0x730>
	__asm__ volatile (
 800fcfe:	469e      	mov	lr, r3
 800fd00:	469c      	mov	ip, r3
 800fd02:	f8cd b00c 	str.w	fp, [sp, #12]
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800fd06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800fd08:	f858 1904 	ldr.w	r1, [r8], #-4
 800fd0c:	f855 2904 	ldr.w	r2, [r5], #-4
 800fd10:	fb81 0303 	smull	r0, r3, r1, r3
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800fd14:	eb03 01a2 	add.w	r1, r3, r2, asr #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800fd18:	6830      	ldr	r0, [r6, #0]
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 800fd1a:	eba3 02a2 	sub.w	r2, r3, r2, asr #2
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800fd1e:	f846 1b04 	str.w	r1, [r6], #4
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800fd22:	4241      	negs	r1, r0
 800fd24:	f854 3c08 	ldr.w	r3, [r4, #-8]
			t = s - d;
 800fd28:	1a89      	subs	r1, r1, r2
 800fd2a:	fb81 b303 	smull	fp, r3, r1, r3
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 800fd2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd32:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800fd36:	fb81 b202 	smull	fp, r2, r1, r2
    return y;
 800fd3a:	ebc0 0282 	rsb	r2, r0, r2, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 800fd3e:	f84a 302c 	str.w	r3, [sl, ip, lsl #2]
	__asm__ volatile (
 800fd42:	4671      	mov	r1, lr
			y[(17-i)*NBANDS] =  yHi;
 800fd44:	f8c7 2880 	str.w	r2, [r7, #2176]	; 0x880
 800fd48:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800fd4c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800fd50:	4673      	mov	r3, lr
 800fd52:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800fd56:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
		for (i = 0; i < 9; i++) {
 800fd5a:	f10c 0c20 	add.w	ip, ip, #32
			mOut |= FASTABS(yHi);
 800fd5e:	4319      	orrs	r1, r3
		for (i = 0; i < 9; i++) {
 800fd60:	3408      	adds	r4, #8
 800fd62:	3f80      	subs	r7, #128	; 0x80
 800fd64:	f5bc 7f90 	cmp.w	ip, #288	; 0x120
			mOut |= FASTABS(yHi);
 800fd68:	ea49 0901 	orr.w	r9, r9, r1
		for (i = 0; i < 9; i++) {
 800fd6c:	d1cb      	bne.n	800fd06 <xmp3fixpt_IMDCT+0x626>
 800fd6e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fd72:	f8cd 9004 	str.w	r9, [sp, #4]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800fd76:	9b05      	ldr	r3, [sp, #20]
 800fd78:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fd7c:	9c04      	ldr	r4, [sp, #16]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800fd7e:	3324      	adds	r3, #36	; 0x24
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fd80:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fd82:	4620      	mov	r0, r4
	for(i = 0; i < bc->nBlocksLong; i++) {
 800fd84:	3404      	adds	r4, #4
 800fd86:	9305      	str	r3, [sp, #20]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fd88:	9b06      	ldr	r3, [sp, #24]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800fd8a:	9404      	str	r4, [sp, #16]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fd8c:	461a      	mov	r2, r3
	for(i = 0; i < bc->nBlocksLong; i++) {
 800fd8e:	3301      	adds	r3, #1
 800fd90:	9306      	str	r3, [sp, #24]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fd92:	ee17 3a90 	vmov	r3, s15
 800fd96:	f7ff fa23 	bl	800f1e0 <FreqInvertRescale>
 800fd9a:	9b01      	ldr	r3, [sp, #4]
 800fd9c:	4318      	orrs	r0, r3
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 800fd9e:	9b00      	ldr	r3, [sp, #0]
 800fda0:	4303      	orrs	r3, r0
 800fda2:	9300      	str	r3, [sp, #0]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800fda4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fda6:	429c      	cmp	r4, r3
 800fda8:	f000 81a4 	beq.w	80100f4 <xmp3fixpt_IMDCT+0xa14>
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800fdac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdb0:	e633      	b.n	800fa1a <xmp3fixpt_IMDCT+0x33a>
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800fdb2:	3307      	adds	r3, #7
 800fdb4:	4631      	mov	r1, r6
 800fdb6:	fb80 2003 	smull	r2, r0, r0, r3
 800fdba:	17db      	asrs	r3, r3, #31
 800fdbc:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800fdc0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800fdc4:	0052      	lsls	r2, r2, #1
 800fdc6:	3208      	adds	r2, #8
 800fdc8:	920e      	str	r2, [sp, #56]	; 0x38
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800fdca:	1c5a      	adds	r2, r3, #1
 800fdcc:	922c      	str	r2, [sp, #176]	; 0xb0
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800fdce:	9a34      	ldr	r2, [sp, #208]	; 0xd0
	for (k = nBfly; k > 0; k--) {
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	440a      	add	r2, r1
 800fdd4:	ea4f 2102 	mov.w	r1, r2, lsl #8
 800fdd8:	910f      	str	r1, [sp, #60]	; 0x3c
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800fdda:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fddc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 800fde0:	9109      	str	r1, [sp, #36]	; 0x24
	for (k = nBfly; k > 0; k--) {
 800fde2:	f73f acce 	bgt.w	800f782 <xmp3fixpt_IMDCT+0xa2>
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800fde6:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 800fdea:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 800fdec:	440b      	add	r3, r1
 800fdee:	011b      	lsls	r3, r3, #4
 800fdf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdf4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800fdf6:	4413      	add	r3, r2
 800fdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdfa:	e5b0      	b.n	800f95e <xmp3fixpt_IMDCT+0x27e>
 800fdfc:	6ed9eba1 	.word	0x6ed9eba1
 800fe00:	620dbe8b 	.word	0x620dbe8b
 800fe04:	163a1a7e 	.word	0x163a1a7e
 800fe08:	7e0e2e32 	.word	0x7e0e2e32
 800fe0c:	0802312c 	.word	0x0802312c
 800fe10:	08023120 	.word	0x08023120
			xPrev[i] >>= es;
 800fe14:	9d05      	ldr	r5, [sp, #20]
 800fe16:	981c      	ldr	r0, [sp, #112]	; 0x70
 800fe18:	f855 3c04 	ldr.w	r3, [r5, #-4]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe1c:	f85b 4c04 	ldr.w	r4, [fp, #-4]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe20:	f85b 6c08 	ldr.w	r6, [fp, #-8]
			xPrev[i] >>= es;
 800fe24:	4103      	asrs	r3, r0
 800fe26:	f855 1c08 	ldr.w	r1, [r5, #-8]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe2a:	4104      	asrs	r4, r0
			xPrev[i] >>= es;
 800fe2c:	f845 3c04 	str.w	r3, [r5, #-4]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe30:	4106      	asrs	r6, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe32:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
			xPrev[i] >>= es;
 800fe36:	4101      	asrs	r1, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe38:	f85b 7c10 	ldr.w	r7, [fp, #-16]
 800fe3c:	eba6 0804 	sub.w	r8, r6, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe40:	fa43 f200 	asr.w	r2, r3, r0
			xPrev[i] >>= es;
 800fe44:	f845 1c08 	str.w	r1, [r5, #-8]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe48:	4107      	asrs	r7, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe4a:	f85b 3c14 	ldr.w	r3, [fp, #-20]
 800fe4e:	eba2 0208 	sub.w	r2, r2, r8
 800fe52:	9415      	str	r4, [sp, #84]	; 0x54
 800fe54:	4103      	asrs	r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe56:	1ab9      	subs	r1, r7, r2
			acc2 = acc1 - acc2;
 800fe58:	1b14      	subs	r4, r2, r4
			xPrev[i] >>= es;
 800fe5a:	f855 2c0c 	ldr.w	r2, [r5, #-12]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe5e:	1a5e      	subs	r6, r3, r1
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe60:	f85b 3c18 	ldr.w	r3, [fp, #-24]
			xPrev[i] >>= es;
 800fe64:	4102      	asrs	r2, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe66:	468e      	mov	lr, r1
 800fe68:	4103      	asrs	r3, r0
			xPrev[i] >>= es;
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	f845 2c0c 	str.w	r2, [r5, #-12]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe70:	eba3 0a06 	sub.w	sl, r3, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe74:	f85b 3c1c 	ldr.w	r3, [fp, #-28]
			xPrev[i] >>= es;
 800fe78:	f851 2c10 	ldr.w	r2, [r1, #-16]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe7c:	4103      	asrs	r3, r0
			acc2 = acc1 - acc2;
 800fe7e:	9407      	str	r4, [sp, #28]
			xPrev[i] >>= es;
 800fe80:	4102      	asrs	r2, r0
			acc2 = acc1 - acc2;
 800fe82:	1b34      	subs	r4, r6, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe84:	eba3 050a 	sub.w	r5, r3, sl
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe88:	f85b 3c20 	ldr.w	r3, [fp, #-32]
			xPrev[i] >>= es;
 800fe8c:	f841 2c10 	str.w	r2, [r1, #-16]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe90:	4103      	asrs	r3, r0
			xPrev[i] >>= es;
 800fe92:	f851 2c14 	ldr.w	r2, [r1, #-20]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe96:	f85b 6c28 	ldr.w	r6, [fp, #-40]
 800fe9a:	eba3 0905 	sub.w	r9, r3, r5
			acc1 = ((*xCurr--) >> es) - acc1;
 800fe9e:	f85b 3c24 	ldr.w	r3, [fp, #-36]
			xPrev[i] >>= es;
 800fea2:	4102      	asrs	r2, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800fea4:	4106      	asrs	r6, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800fea6:	4103      	asrs	r3, r0
			acc2 = acc1 - acc2;
 800fea8:	940f      	str	r4, [sp, #60]	; 0x3c
 800feaa:	1b2c      	subs	r4, r5, r4
			xPrev[i] >>= es;
 800feac:	f841 2c14 	str.w	r2, [r1, #-20]
			acc1 = ((*xCurr--) >> es) - acc1;
 800feb0:	eba3 0309 	sub.w	r3, r3, r9
			xPrev[i] >>= es;
 800feb4:	460d      	mov	r5, r1
			acc2 = acc1 - acc2;
 800feb6:	9408      	str	r4, [sp, #32]
 800feb8:	1b19      	subs	r1, r3, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 800feba:	1af6      	subs	r6, r6, r3
			acc1 = ((*xCurr--) >> es) - acc1;
 800febc:	f85b 3c2c 	ldr.w	r3, [fp, #-44]
			xPrev[i] >>= es;
 800fec0:	f855 2c18 	ldr.w	r2, [r5, #-24]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fec4:	4103      	asrs	r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800fec6:	f85b 4c30 	ldr.w	r4, [fp, #-48]
			xPrev[i] >>= es;
 800feca:	4102      	asrs	r2, r0
			acc2 = acc1 - acc2;
 800fecc:	9116      	str	r1, [sp, #88]	; 0x58
			acc1 = ((*xCurr--) >> es) - acc1;
 800fece:	1b9b      	subs	r3, r3, r6
			acc1 = ((*xCurr--) >> es) - acc1;
 800fed0:	4104      	asrs	r4, r0
			xPrev[i] >>= es;
 800fed2:	f845 2c18 	str.w	r2, [r5, #-24]
			acc2 = acc1 - acc2;
 800fed6:	1a5f      	subs	r7, r3, r1
			acc1 = ((*xCurr--) >> es) - acc1;
 800fed8:	1ae4      	subs	r4, r4, r3
			acc2 = acc1 - acc2;
 800feda:	9712      	str	r7, [sp, #72]	; 0x48
			acc1 = ((*xCurr--) >> es) - acc1;
 800fedc:	f85b 3c34 	ldr.w	r3, [fp, #-52]
			xPrev[i] >>= es;
 800fee0:	f855 2c1c 	ldr.w	r2, [r5, #-28]
			acc1 = ((*xCurr--) >> es) - acc1;
 800fee4:	4103      	asrs	r3, r0
			xPrev[i] >>= es;
 800fee6:	4102      	asrs	r2, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800fee8:	1b19      	subs	r1, r3, r4
			acc1 = ((*xCurr--) >> es) - acc1;
 800feea:	f85b 3c38 	ldr.w	r3, [fp, #-56]
			xPrev[i] >>= es;
 800feee:	f845 2c1c 	str.w	r2, [r5, #-28]
			acc2 = acc1 - acc2;
 800fef2:	1bca      	subs	r2, r1, r7
			acc1 = ((*xCurr--) >> es) - acc1;
 800fef4:	4103      	asrs	r3, r0
			xPrev[i] >>= es;
 800fef6:	462f      	mov	r7, r5
			acc2 = acc1 - acc2;
 800fef8:	9210      	str	r2, [sp, #64]	; 0x40
			acc1 = ((*xCurr--) >> es) - acc1;
 800fefa:	1a5b      	subs	r3, r3, r1
			acc1 = ((*xCurr--) >> es) - acc1;
 800fefc:	f85b 2c3c 	ldr.w	r2, [fp, #-60]
			xPrev[i] >>= es;
 800ff00:	f855 1c20 	ldr.w	r1, [r5, #-32]
			acc1 = ((*xCurr--) >> es) - acc1;
 800ff04:	4102      	asrs	r2, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800ff06:	f85b 5c40 	ldr.w	r5, [fp, #-64]
			xPrev[i] >>= es;
 800ff0a:	4101      	asrs	r1, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800ff0c:	1ad2      	subs	r2, r2, r3
			acc1 = ((*xCurr--) >> es) - acc1;
 800ff0e:	4105      	asrs	r5, r0
			xPrev[i] >>= es;
 800ff10:	f847 1c20 	str.w	r1, [r7, #-32]
			acc1 = ((*xCurr--) >> es) - acc1;
 800ff14:	4601      	mov	r1, r0
 800ff16:	1aa8      	subs	r0, r5, r2
			acc1 = ((*xCurr--) >> es) - acc1;
 800ff18:	460d      	mov	r5, r1
			acc1 = ((*xCurr--) >> es) - acc1;
 800ff1a:	9003      	str	r0, [sp, #12]
			acc2 = acc1 - acc2;
 800ff1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ff1e:	1a12      	subs	r2, r2, r0
 800ff20:	4617      	mov	r7, r2
 800ff22:	920e      	str	r2, [sp, #56]	; 0x38
			acc1 = ((*xCurr--) >> es) - acc1;
 800ff24:	f85b 2c44 	ldr.w	r2, [fp, #-68]
 800ff28:	410a      	asrs	r2, r1
 800ff2a:	9903      	ldr	r1, [sp, #12]
 800ff2c:	1a52      	subs	r2, r2, r1
			acc1 = ((*xCurr--) >> es) - acc1;
 800ff2e:	f85b 1c48 	ldr.w	r1, [fp, #-72]
 800ff32:	4129      	asrs	r1, r5
 800ff34:	eba1 0c02 	sub.w	ip, r1, r2
			acc2 = acc1 - acc2;
 800ff38:	1bd2      	subs	r2, r2, r7
			xPrev[i] >>= es;
 800ff3a:	9f05      	ldr	r7, [sp, #20]
 800ff3c:	f857 0c24 	ldr.w	r0, [r7, #-36]
 800ff40:	4128      	asrs	r0, r5
 800ff42:	f847 0c24 	str.w	r0, [r7, #-36]
		for (i = 8; i >= 0; i--) {	
 800ff46:	e5d8      	b.n	800fafa <xmp3fixpt_IMDCT+0x41a>
 800ff48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff4a:	9301      	str	r3, [sp, #4]
			 prevWinIdx = 0;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ff50:	e580      	b.n	800fa54 <xmp3fixpt_IMDCT+0x374>
	if (btPrev == 2) {
 800ff52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ff54:	2b02      	cmp	r3, #2
 800ff56:	f000 80c1 	beq.w	80100dc <xmp3fixpt_IMDCT+0x9fc>
		wpLo = imdctWin[btPrev] + 18;
 800ff5a:	4c64      	ldr	r4, [pc, #400]	; (80100ec <xmp3fixpt_IMDCT+0xa0c>)
 800ff5c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800ff60:	9f05      	ldr	r7, [sp, #20]
		wpLo = imdctWin[btPrev] + 18;
 800ff62:	eb04 1303 	add.w	r3, r4, r3, lsl #4
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800ff66:	f857 0c24 	ldr.w	r0, [r7, #-36]
 800ff6a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ff6e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ff70:	4605      	mov	r5, r0
 800ff72:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 800ff76:	954c      	str	r5, [sp, #304]	; 0x130
 800ff78:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 800ff7c:	905d      	str	r0, [sp, #372]	; 0x174
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800ff7e:	f857 0c20 	ldr.w	r0, [r7, #-32]
 800ff82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ff86:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ff88:	4605      	mov	r5, r0
 800ff8a:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 800ff8e:	954d      	str	r5, [sp, #308]	; 0x134
 800ff90:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 800ff94:	905c      	str	r0, [sp, #368]	; 0x170
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800ff96:	f857 0c1c 	ldr.w	r0, [r7, #-28]
 800ff9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800ff9e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 800ffa6:	954e      	str	r5, [sp, #312]	; 0x138
 800ffa8:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 800ffac:	905b      	str	r0, [sp, #364]	; 0x16c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800ffae:	f857 0c18 	ldr.w	r0, [r7, #-24]
 800ffb2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800ffb6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ffb8:	4605      	mov	r5, r0
 800ffba:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 800ffbe:	954f      	str	r5, [sp, #316]	; 0x13c
 800ffc0:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 800ffc4:	905a      	str	r0, [sp, #360]	; 0x168
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800ffc6:	f857 0c14 	ldr.w	r0, [r7, #-20]
 800ffca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ffcc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800ffce:	4605      	mov	r5, r0
 800ffd0:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 800ffd4:	9550      	str	r5, [sp, #320]	; 0x140
 800ffd6:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 800ffda:	9059      	str	r0, [sp, #356]	; 0x164
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800ffdc:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800ffe0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ffe2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ffe4:	4605      	mov	r5, r0
 800ffe6:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 800ffea:	9551      	str	r5, [sp, #324]	; 0x144
 800ffec:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 800fff0:	9058      	str	r0, [sp, #352]	; 0x160
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800fff2:	f857 0c0c 	ldr.w	r0, [r7, #-12]
 800fff6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800fff8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800fffa:	4605      	mov	r5, r0
 800fffc:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010000:	9552      	str	r5, [sp, #328]	; 0x148
 8010002:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010006:	9057      	str	r0, [sp, #348]	; 0x15c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010008:	f857 0c08 	ldr.w	r0, [r7, #-8]
 801000c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801000e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8010010:	4605      	mov	r5, r0
 8010012:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010016:	9553      	str	r5, [sp, #332]	; 0x14c
 8010018:	fb82 1000 	smull	r1, r0, r2, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 801001c:	9056      	str	r0, [sp, #344]	; 0x158
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801001e:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010022:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8010026:	4613      	mov	r3, r2
 8010028:	fb80 5303 	smull	r5, r3, r0, r3
			*xpwLo++ = MULSHIFT32(wLo, x);
 801002c:	9354      	str	r3, [sp, #336]	; 0x150
 801002e:	fb81 3202 	smull	r3, r2, r1, r2
    return y;
 8010032:	f50d 7898 	add.w	r8, sp, #304	; 0x130
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010036:	9255      	str	r2, [sp, #340]	; 0x154
		wp = imdctWin[btCurr];
 8010038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801003a:	f50d 79bc 	add.w	r9, sp, #376	; 0x178
	cp = c18 + 8;
 801003e:	492c      	ldr	r1, [pc, #176]	; (80100f0 <xmp3fixpt_IMDCT+0xa10>)
	xp = xBuf + 8;
 8010040:	ad42      	add	r5, sp, #264	; 0x108
		wp = imdctWin[btCurr];
 8010042:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8010046:	9e04      	ldr	r6, [sp, #16]
 8010048:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 801004c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
	mOut = 0;
 8010050:	2300      	movs	r3, #0
	__asm__ volatile (
 8010052:	9103      	str	r1, [sp, #12]
 8010054:	f1a4 0e04 	sub.w	lr, r4, #4
 8010058:	461f      	mov	r7, r3
 801005a:	3448      	adds	r4, #72	; 0x48
		for (i = 0; i < 9; i++) {
 801005c:	4618      	mov	r0, r3
	mOut = 0;
 801005e:	9301      	str	r3, [sp, #4]
 8010060:	f8cd b01c 	str.w	fp, [sp, #28]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010064:	9903      	ldr	r1, [sp, #12]
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 8010066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010068:	f851 a904 	ldr.w	sl, [r1], #-4
 801006c:	f855 2904 	ldr.w	r2, [r5], #-4
 8010070:	9103      	str	r1, [sp, #12]
 8010072:	fb8a b303 	smull	fp, r3, sl, r3
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8010076:	eb03 0ba2 	add.w	fp, r3, r2, asr #2
			d = xe - xo;
 801007a:	ebc3 0aa2 	rsb	sl, r3, r2, asr #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 801007e:	f84c bb04 	str.w	fp, [ip], #4
 8010082:	f85e 2f04 	ldr.w	r2, [lr, #4]!
 8010086:	fb8a 3202 	smull	r3, r2, sl, r2
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 801008a:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
 801008e:	441a      	add	r2, r3
 8010090:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8010094:	0092      	lsls	r2, r2, #2
 8010096:	fb8a b303 	smull	fp, r3, sl, r3
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 801009a:	f859 ad04 	ldr.w	sl, [r9, #-4]!
			y[(i)*NBANDS]    = yLo;
 801009e:	9904      	ldr	r1, [sp, #16]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80100a0:	4453      	add	r3, sl
			y[(i)*NBANDS]    = yLo;
 80100a2:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 80100a6:	009b      	lsls	r3, r3, #2
			y[(i)*NBANDS]    = yLo;
 80100a8:	f841 200a 	str.w	r2, [r1, sl]
	__asm__ volatile (
 80100ac:	46ba      	mov	sl, r7
			y[(17-i)*NBANDS] = yHi;
 80100ae:	f8c6 3880 	str.w	r3, [r6, #2176]	; 0x880
 80100b2:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
 80100b6:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
 80100ba:	463a      	mov	r2, r7
 80100bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80100c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
			mOut |= FASTABS(yHi);
 80100c4:	9b01      	ldr	r3, [sp, #4]
 80100c6:	ea4a 0202 	orr.w	r2, sl, r2
		for (i = 0; i < 9; i++) {
 80100ca:	3001      	adds	r0, #1
 80100cc:	3e80      	subs	r6, #128	; 0x80
			mOut |= FASTABS(yHi);
 80100ce:	4313      	orrs	r3, r2
		for (i = 0; i < 9; i++) {
 80100d0:	2809      	cmp	r0, #9
			mOut |= FASTABS(yHi);
 80100d2:	9301      	str	r3, [sp, #4]
		for (i = 0; i < 9; i++) {
 80100d4:	d1c6      	bne.n	8010064 <xmp3fixpt_IMDCT+0x984>
 80100d6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80100da:	e64c      	b.n	800fd76 <xmp3fixpt_IMDCT+0x696>
 80100dc:	f50d 7898 	add.w	r8, sp, #304	; 0x130
 80100e0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80100e2:	4c02      	ldr	r4, [pc, #8]	; (80100ec <xmp3fixpt_IMDCT+0xa0c>)
 80100e4:	4641      	mov	r1, r8
 80100e6:	f7ff f809 	bl	800f0fc <WinPrevious.part.0>
 80100ea:	e7a5      	b.n	8010038 <xmp3fixpt_IMDCT+0x958>
 80100ec:	08023314 	.word	0x08023314
 80100f0:	08023120 	.word	0x08023120
		xCurr += 18;
 80100f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80100f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100f8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80100fc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010100:	9209      	str	r2, [sp, #36]	; 0x24
		xPrev += 9;
 8010102:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010108:	932b      	str	r3, [sp, #172]	; 0xac
	for (   ; i < bc->nBlocksTotal; i++) {
 801010a:	9a02      	ldr	r2, [sp, #8]
 801010c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801010e:	429a      	cmp	r2, r3
 8010110:	f341 831c 	ble.w	801174c <xmp3fixpt_IMDCT+0x206c>
 8010114:	990a      	ldr	r1, [sp, #40]	; 0x28
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8010116:	f8df 8524 	ldr.w	r8, [pc, #1316]	; 801063c <xmp3fixpt_IMDCT+0xf5c>
 801011a:	2906      	cmp	r1, #6
		es = 7 - gb;
 801011c:	f1c1 0107 	rsb	r1, r1, #7
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8010120:	f8d8 0120 	ldr.w	r0, [r8, #288]	; 0x120
		es = 7 - gb;
 8010124:	9127      	str	r1, [sp, #156]	; 0x9c
 8010126:	bfc8      	it	gt
 8010128:	2100      	movgt	r1, #0
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 801012a:	901b      	str	r0, [sp, #108]	; 0x6c
 801012c:	ee07 1a10 	vmov	s14, r1
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8010130:	f8d8 1138 	ldr.w	r1, [r8, #312]	; 0x138
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8010134:	f8d8 012c 	ldr.w	r0, [r8, #300]	; 0x12c
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8010138:	911d      	str	r1, [sp, #116]	; 0x74
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 801013a:	f8d8 1144 	ldr.w	r1, [r8, #324]	; 0x144
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 801013e:	901c      	str	r0, [sp, #112]	; 0x70
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8010140:	9114      	str	r1, [sp, #80]	; 0x50
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8010142:	f8d8 1124 	ldr.w	r1, [r8, #292]	; 0x124
 8010146:	9115      	str	r1, [sp, #84]	; 0x54
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8010148:	f8d8 1130 	ldr.w	r1, [r8, #304]	; 0x130
 801014c:	9104      	str	r1, [sp, #16]
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 801014e:	f8d8 113c 	ldr.w	r1, [r8, #316]	; 0x13c
 8010152:	911a      	str	r1, [sp, #104]	; 0x68
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8010154:	f8d8 1148 	ldr.w	r1, [r8, #328]	; 0x148
 8010158:	9116      	str	r1, [sp, #88]	; 0x58
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 801015a:	f8d8 1128 	ldr.w	r1, [r8, #296]	; 0x128
 801015e:	9117      	str	r1, [sp, #92]	; 0x5c
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8010160:	f8d8 1134 	ldr.w	r1, [r8, #308]	; 0x134
 8010164:	9105      	str	r1, [sp, #20]
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8010166:	f8d8 1140 	ldr.w	r1, [r8, #320]	; 0x140
 801016a:	9118      	str	r1, [sp, #96]	; 0x60
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 801016c:	f8d8 114c 	ldr.w	r1, [r8, #332]	; 0x14c
 8010170:	9119      	str	r1, [sp, #100]	; 0x64
 8010172:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010174:	4299      	cmp	r1, r3
 8010176:	f341 82c8 	ble.w	801170a <xmp3fixpt_IMDCT+0x202a>
 801017a:	428a      	cmp	r2, r1
 801017c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801017e:	9301      	str	r3, [sp, #4]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010180:	46c1      	mov	r9, r8
 8010182:	bfa8      	it	ge
 8010184:	460a      	movge	r2, r1
 8010186:	f100 0a48 	add.w	sl, r0, #72	; 0x48
 801018a:	9229      	str	r2, [sp, #164]	; 0xa4
 801018c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801018e:	f102 0c24 	add.w	ip, r2, #36	; 0x24
 8010192:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8010194:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010198:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 801019c:	46e6      	mov	lr, ip
 801019e:	9328      	str	r3, [sp, #160]	; 0xa0
 80101a0:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80101a4:	4690      	mov	r8, r2
 80101a6:	932a      	str	r3, [sp, #168]	; 0xa8
 80101a8:	f1ae 0324 	sub.w	r3, lr, #36	; 0x24
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 80101ac:	ee07 8a90 	vmov	s15, r8
 80101b0:	ee06 3a90 	vmov	s13, r3
	if (gb < 7) {
 80101b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b6:	2b06      	cmp	r3, #6
 80101b8:	f300 8088 	bgt.w	80102cc <xmp3fixpt_IMDCT+0xbec>
			xCurr[i+0] >>= es;
 80101bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80101be:	f85a 3c48 	ldr.w	r3, [sl, #-72]
 80101c2:	4113      	asrs	r3, r2
 80101c4:	f84a 3c48 	str.w	r3, [sl, #-72]
			xCurr[i+1] >>= es;
 80101c8:	f85a 3c44 	ldr.w	r3, [sl, #-68]
 80101cc:	4113      	asrs	r3, r2
 80101ce:	f84a 3c44 	str.w	r3, [sl, #-68]
			*xPrev++ >>= es;
 80101d2:	f85e 3c24 	ldr.w	r3, [lr, #-36]
 80101d6:	4113      	asrs	r3, r2
 80101d8:	f84e 3c24 	str.w	r3, [lr, #-36]
			xCurr[i+0] >>= es;
 80101dc:	f85a 3c40 	ldr.w	r3, [sl, #-64]
 80101e0:	4113      	asrs	r3, r2
 80101e2:	f84a 3c40 	str.w	r3, [sl, #-64]
			xCurr[i+1] >>= es;
 80101e6:	f85a 3c3c 	ldr.w	r3, [sl, #-60]
 80101ea:	4113      	asrs	r3, r2
 80101ec:	f84a 3c3c 	str.w	r3, [sl, #-60]
			*xPrev++ >>= es;
 80101f0:	f85e 3c20 	ldr.w	r3, [lr, #-32]
 80101f4:	4113      	asrs	r3, r2
 80101f6:	f84e 3c20 	str.w	r3, [lr, #-32]
			xCurr[i+0] >>= es;
 80101fa:	f85a 3c38 	ldr.w	r3, [sl, #-56]
 80101fe:	4113      	asrs	r3, r2
 8010200:	f84a 3c38 	str.w	r3, [sl, #-56]
			xCurr[i+1] >>= es;
 8010204:	f85a 3c34 	ldr.w	r3, [sl, #-52]
 8010208:	4113      	asrs	r3, r2
 801020a:	f84a 3c34 	str.w	r3, [sl, #-52]
			*xPrev++ >>= es;
 801020e:	f85e 3c1c 	ldr.w	r3, [lr, #-28]
 8010212:	4113      	asrs	r3, r2
 8010214:	f84e 3c1c 	str.w	r3, [lr, #-28]
			xCurr[i+0] >>= es;
 8010218:	f85a 3c30 	ldr.w	r3, [sl, #-48]
 801021c:	4113      	asrs	r3, r2
 801021e:	f84a 3c30 	str.w	r3, [sl, #-48]
			xCurr[i+1] >>= es;
 8010222:	f85a 3c2c 	ldr.w	r3, [sl, #-44]
 8010226:	4113      	asrs	r3, r2
 8010228:	f84a 3c2c 	str.w	r3, [sl, #-44]
			*xPrev++ >>= es;
 801022c:	f85e 3c18 	ldr.w	r3, [lr, #-24]
 8010230:	4113      	asrs	r3, r2
 8010232:	f84e 3c18 	str.w	r3, [lr, #-24]
			xCurr[i+0] >>= es;
 8010236:	f85a 3c28 	ldr.w	r3, [sl, #-40]
 801023a:	4113      	asrs	r3, r2
 801023c:	f84a 3c28 	str.w	r3, [sl, #-40]
			xCurr[i+1] >>= es;
 8010240:	f85a 3c24 	ldr.w	r3, [sl, #-36]
 8010244:	4113      	asrs	r3, r2
 8010246:	f84a 3c24 	str.w	r3, [sl, #-36]
			*xPrev++ >>= es;
 801024a:	f85e 3c14 	ldr.w	r3, [lr, #-20]
 801024e:	4113      	asrs	r3, r2
 8010250:	f84e 3c14 	str.w	r3, [lr, #-20]
			xCurr[i+0] >>= es;
 8010254:	f85a 3c20 	ldr.w	r3, [sl, #-32]
 8010258:	4113      	asrs	r3, r2
 801025a:	f84a 3c20 	str.w	r3, [sl, #-32]
			xCurr[i+1] >>= es;
 801025e:	f85a 3c1c 	ldr.w	r3, [sl, #-28]
 8010262:	4113      	asrs	r3, r2
 8010264:	f84a 3c1c 	str.w	r3, [sl, #-28]
			*xPrev++ >>= es;
 8010268:	f85e 3c10 	ldr.w	r3, [lr, #-16]
 801026c:	4113      	asrs	r3, r2
 801026e:	f84e 3c10 	str.w	r3, [lr, #-16]
			xCurr[i+0] >>= es;
 8010272:	f85a 3c18 	ldr.w	r3, [sl, #-24]
 8010276:	4113      	asrs	r3, r2
 8010278:	f84a 3c18 	str.w	r3, [sl, #-24]
			xCurr[i+1] >>= es;
 801027c:	f85a 3c14 	ldr.w	r3, [sl, #-20]
 8010280:	4113      	asrs	r3, r2
 8010282:	f84a 3c14 	str.w	r3, [sl, #-20]
			*xPrev++ >>= es;
 8010286:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 801028a:	4113      	asrs	r3, r2
 801028c:	f84e 3c0c 	str.w	r3, [lr, #-12]
			xCurr[i+0] >>= es;
 8010290:	f85a 3c10 	ldr.w	r3, [sl, #-16]
 8010294:	4113      	asrs	r3, r2
 8010296:	f84a 3c10 	str.w	r3, [sl, #-16]
			xCurr[i+1] >>= es;
 801029a:	f85a 3c0c 	ldr.w	r3, [sl, #-12]
 801029e:	4113      	asrs	r3, r2
 80102a0:	f84a 3c0c 	str.w	r3, [sl, #-12]
			*xPrev++ >>= es;
 80102a4:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 80102a8:	4113      	asrs	r3, r2
 80102aa:	f84e 3c08 	str.w	r3, [lr, #-8]
			xCurr[i+0] >>= es;
 80102ae:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 80102b2:	4113      	asrs	r3, r2
 80102b4:	f84a 3c08 	str.w	r3, [sl, #-8]
			xCurr[i+1] >>= es;
 80102b8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 80102bc:	4113      	asrs	r3, r2
 80102be:	f84a 3c04 	str.w	r3, [sl, #-4]
			*xPrev++ >>= es;
 80102c2:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 80102c6:	4113      	asrs	r3, r2
 80102c8:	f84e 3c04 	str.w	r3, [lr, #-4]
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 80102cc:	f85a 0c0c 	ldr.w	r0, [sl, #-12]
 80102d0:	f85a 6c18 	ldr.w	r6, [sl, #-24]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 80102d4:	f85a 3c24 	ldr.w	r3, [sl, #-36]
	x4 -= x5;
 80102d8:	1a35      	subs	r5, r6, r0
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 80102da:	f85a 2c30 	ldr.w	r2, [sl, #-48]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 80102de:	f85a 4c48 	ldr.w	r4, [sl, #-72]
	x3 -= x4;
 80102e2:	1b5b      	subs	r3, r3, r5
 80102e4:	4fd1      	ldr	r7, [pc, #836]	; (801062c <xmp3fixpt_IMDCT+0xf4c>)
	x2 -= x3;
 80102e6:	eba2 0c03 	sub.w	ip, r2, r3
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 80102ea:	f85a 2c3c 	ldr.w	r2, [sl, #-60]
	x3 -= x5;
 80102ee:	1a1b      	subs	r3, r3, r0
	x1 -= x2;
 80102f0:	eba2 020c 	sub.w	r2, r2, ip
	x0 -= x1;
 80102f4:	1aa6      	subs	r6, r4, r2
	x1 -= x3;
 80102f6:	1ad2      	subs	r2, r2, r3
	x0 >>= 1;
 80102f8:	1076      	asrs	r6, r6, #1
	x1 >>= 1;
 80102fa:	1052      	asrs	r2, r2, #1
 80102fc:	fb87 4c0c 	smull	r4, ip, r7, ip
	a1 = x0 + (x4 >> 1);
 8010300:	eb06 0765 	add.w	r7, r6, r5, asr #1
	a2 = x0 - x4;
 8010304:	1b76      	subs	r6, r6, r5
	x0 = a1 + a0;
 8010306:	eb07 014c 	add.w	r1, r7, ip, lsl #1
	a2 = x0 - x4;
 801030a:	9603      	str	r6, [sp, #12]
	x4 = a1 - a0;
 801030c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8010310:	4fc6      	ldr	r7, [pc, #792]	; (801062c <xmp3fixpt_IMDCT+0xf4c>)
	x0 = a1 + a0;
 8010312:	9106      	str	r1, [sp, #24]
 8010314:	fb87 4303 	smull	r4, r3, r7, r3
	a1 = x1 + (x5 >> 1);
 8010318:	eb02 0560 	add.w	r5, r2, r0, asr #1
 801031c:	49c4      	ldr	r1, [pc, #784]	; (8010630 <xmp3fixpt_IMDCT+0xf50>)
	a0 = MULSHIFT32(c3_0, x3) << 1;
 801031e:	005c      	lsls	r4, r3, #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8010320:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8010324:	fb81 7303 	smull	r7, r3, r1, r3
 8010328:	49c2      	ldr	r1, [pc, #776]	; (8010634 <xmp3fixpt_IMDCT+0xf54>)
	a2 = x1 - x5;
 801032a:	1a10      	subs	r0, r2, r0
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 801032c:	009b      	lsls	r3, r3, #2
 801032e:	fb81 2000 	smull	r2, r0, r1, r0
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8010332:	0082      	lsls	r2, r0, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8010334:	1b2d      	subs	r5, r5, r4
 8010336:	48c0      	ldr	r0, [pc, #768]	; (8010638 <xmp3fixpt_IMDCT+0xf58>)
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8010338:	9207      	str	r2, [sp, #28]
 801033a:	fb80 2505 	smull	r2, r5, r0, r5
	*out = x0 + x1;	out++;
 801033e:	9e06      	ldr	r6, [sp, #24]
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8010340:	f85a 1c08 	ldr.w	r1, [sl, #-8]
	*out = x0 + x1;	out++;
 8010344:	441e      	add	r6, r3
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8010346:	f85a 2c14 	ldr.w	r2, [sl, #-20]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 801034a:	f85a 4c2c 	ldr.w	r4, [sl, #-44]
	*out = x0 + x1;	out++;
 801034e:	960e      	str	r6, [sp, #56]	; 0x38
	x4 -= x5;
 8010350:	1a50      	subs	r0, r2, r1
	*out = x0 - x1;
 8010352:	9e06      	ldr	r6, [sp, #24]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8010354:	f85a 2c20 	ldr.w	r2, [sl, #-32]
	*out = x0 - x1;
 8010358:	1af3      	subs	r3, r6, r3
	*out = x2 + x3;	out++;
 801035a:	9e03      	ldr	r6, [sp, #12]
	x3 -= x4;
 801035c:	1a12      	subs	r2, r2, r0
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 801035e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	*out = x0 - x1;
 8010362:	9312      	str	r3, [sp, #72]	; 0x48
	*out = x2 + x3;	out++;
 8010364:	9b07      	ldr	r3, [sp, #28]
	x2 -= x3;
 8010366:	1aa7      	subs	r7, r4, r2
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8010368:	f85a 4c38 	ldr.w	r4, [sl, #-56]
	x3 -= x5;
 801036c:	1a52      	subs	r2, r2, r1
	*out = x2 + x3;	out++;
 801036e:	441e      	add	r6, r3
	x1 -= x2;
 8010370:	eba4 0b07 	sub.w	fp, r4, r7
 8010374:	463c      	mov	r4, r7
	*out = x2 + x3;	out++;
 8010376:	960f      	str	r6, [sp, #60]	; 0x3c
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8010378:	f85a 7c44 	ldr.w	r7, [sl, #-68]
	*out = x2 - x3;	out++;
 801037c:	9e03      	ldr	r6, [sp, #12]
	x0 -= x1;
 801037e:	eba7 070b 	sub.w	r7, r7, fp
	x1 -= x3;
 8010382:	ebab 0b02 	sub.w	fp, fp, r2
	*out = x2 - x3;	out++;
 8010386:	1af6      	subs	r6, r6, r3
	*out = x4 + x5;	out++;
 8010388:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
	*out = x4 - x5;	out++;
 801038c:	ebac 0c85 	sub.w	ip, ip, r5, lsl #2
 8010390:	4da6      	ldr	r5, [pc, #664]	; (801062c <xmp3fixpt_IMDCT+0xf4c>)
	x0 >>= 1;
 8010392:	107f      	asrs	r7, r7, #1
	*out = x4 + x5;	out++;
 8010394:	9310      	str	r3, [sp, #64]	; 0x40
	x1 >>= 1;
 8010396:	ea4f 0b6b 	mov.w	fp, fp, asr #1
	*out = x4 - x5;	out++;
 801039a:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 801039e:	fb85 3404 	smull	r3, r4, r5, r4
	a1 = x0 + (x4 >> 1);
 80103a2:	eb07 0360 	add.w	r3, r7, r0, asr #1
	a2 = x0 - x4;
 80103a6:	1a38      	subs	r0, r7, r0
	x0 = a1 + a0;
 80103a8:	eb03 0c44 	add.w	ip, r3, r4, lsl #1
	a2 = x0 - x4;
 80103ac:	9003      	str	r0, [sp, #12]
	x0 = a1 + a0;
 80103ae:	f8cd c018 	str.w	ip, [sp, #24]
	x4 = a1 - a0;
 80103b2:	eba3 0c44 	sub.w	ip, r3, r4, lsl #1
 80103b6:	f8cd c01c 	str.w	ip, [sp, #28]
 80103ba:	fb85 3202 	smull	r3, r2, r5, r2
	a1 = x1 + (x5 >> 1);
 80103be:	eb0b 0461 	add.w	r4, fp, r1, asr #1
 80103c2:	4d9b      	ldr	r5, [pc, #620]	; (8010630 <xmp3fixpt_IMDCT+0xf50>)
	a0 = MULSHIFT32(c3_0, x3) << 1;
 80103c4:	0053      	lsls	r3, r2, #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 80103c6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80103ca:	fb85 0202 	smull	r0, r2, r5, r2
 80103ce:	0092      	lsls	r2, r2, #2
	a2 = x1 - x5;
 80103d0:	ebab 0b01 	sub.w	fp, fp, r1
 80103d4:	4897      	ldr	r0, [pc, #604]	; (8010634 <xmp3fixpt_IMDCT+0xf54>)
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 80103d6:	9208      	str	r2, [sp, #32]
 80103d8:	fb80 2b0b 	smull	r2, fp, r0, fp
	x3 = MULSHIFT32(c6[1], a2) << 2;
 80103dc:	ea4f 0c8b 	mov.w	ip, fp, lsl #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 80103e0:	1ae4      	subs	r4, r4, r3
 80103e2:	4a95      	ldr	r2, [pc, #596]	; (8010638 <xmp3fixpt_IMDCT+0xf58>)
	x3 = MULSHIFT32(c6[1], a2) << 2;
 80103e4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80103e8:	fb82 3404 	smull	r3, r4, r2, r4
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 80103ec:	f85a 5c04 	ldr.w	r5, [sl, #-4]
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 80103f0:	00a1      	lsls	r1, r4, #2
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 80103f2:	f85a 3c10 	ldr.w	r3, [sl, #-16]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 80103f6:	f85a 2c28 	ldr.w	r2, [sl, #-40]
	x4 -= x5;
 80103fa:	1b5f      	subs	r7, r3, r5
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 80103fc:	f85a 3c1c 	ldr.w	r3, [sl, #-28]
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8010400:	9123      	str	r1, [sp, #140]	; 0x8c
	x3 -= x4;
 8010402:	1bdb      	subs	r3, r3, r7
	*out = x4 - x5;	out++;
 8010404:	9907      	ldr	r1, [sp, #28]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8010406:	f85a cc40 	ldr.w	ip, [sl, #-64]
	x2 -= x3;
 801040a:	1ad2      	subs	r2, r2, r3
	x3 -= x5;
 801040c:	1b58      	subs	r0, r3, r5
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 801040e:	f85a 3c34 	ldr.w	r3, [sl, #-52]
	*out = x4 - x5;	out++;
 8010412:	eba1 0a84 	sub.w	sl, r1, r4, lsl #2
	*out = x2 - x3;	out++;
 8010416:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010418:	9c03      	ldr	r4, [sp, #12]
	x1 -= x2;
 801041a:	1a9b      	subs	r3, r3, r2
	*out = x2 - x3;	out++;
 801041c:	1a64      	subs	r4, r4, r1
	*out = x0 - x1;
 801041e:	9908      	ldr	r1, [sp, #32]
	x0 -= x1;
 8010420:	ebac 0c03 	sub.w	ip, ip, r3
	x1 -= x3;
 8010424:	1a1b      	subs	r3, r3, r0
	*out = x2 - x3;	out++;
 8010426:	940c      	str	r4, [sp, #48]	; 0x30
	*out = x0 - x1;
 8010428:	9c06      	ldr	r4, [sp, #24]
	x0 >>= 1;
 801042a:	ea4f 0c6c 	mov.w	ip, ip, asr #1
	x1 >>= 1;
 801042e:	105b      	asrs	r3, r3, #1
	*out = x0 - x1;
 8010430:	1a64      	subs	r4, r4, r1
 8010432:	497e      	ldr	r1, [pc, #504]	; (801062c <xmp3fixpt_IMDCT+0xf4c>)
 8010434:	940d      	str	r4, [sp, #52]	; 0x34
 8010436:	fb81 4202 	smull	r4, r2, r1, r2
	a1 = x0 + (x4 >> 1);
 801043a:	eb0c 0467 	add.w	r4, ip, r7, asr #1
	a2 = x0 - x4;
 801043e:	ebac 0c07 	sub.w	ip, ip, r7
 8010442:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
	x0 = a1 + a0;
 8010446:	eb04 0c42 	add.w	ip, r4, r2, lsl #1
	x4 = a1 - a0;
 801044a:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
 801044e:	921f      	str	r2, [sp, #124]	; 0x7c
 8010450:	fb81 2000 	smull	r2, r0, r1, r0
	a1 = x1 + (x5 >> 1);
 8010454:	eb03 0265 	add.w	r2, r3, r5, asr #1
 8010458:	4975      	ldr	r1, [pc, #468]	; (8010630 <xmp3fixpt_IMDCT+0xf50>)
	a0 = MULSHIFT32(c3_0, x3) << 1;
 801045a:	0044      	lsls	r4, r0, #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 801045c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8010460:	fb81 7000 	smull	r7, r0, r1, r0
	a2 = x1 - x5;
 8010464:	1b5b      	subs	r3, r3, r5
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8010466:	0085      	lsls	r5, r0, #2
 8010468:	4972      	ldr	r1, [pc, #456]	; (8010634 <xmp3fixpt_IMDCT+0xf54>)
 801046a:	9520      	str	r5, [sp, #128]	; 0x80
 801046c:	fb81 0303 	smull	r0, r3, r1, r3
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8010470:	0098      	lsls	r0, r3, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8010472:	1b12      	subs	r2, r2, r4
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8010474:	9021      	str	r0, [sp, #132]	; 0x84
 8010476:	4870      	ldr	r0, [pc, #448]	; (8010638 <xmp3fixpt_IMDCT+0xf58>)
 8010478:	fb80 3202 	smull	r3, r2, r0, r2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 801047c:	0090      	lsls	r0, r2, #2
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801047e:	f85e 2c24 	ldr.w	r2, [lr, #-36]
 8010482:	46f3      	mov	fp, lr
 8010484:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8010486:	4613      	mov	r3, r2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8010488:	9022      	str	r0, [sp, #136]	; 0x88
 801048a:	fb87 0303 	smull	r0, r3, r7, r3
 801048e:	9f28      	ldr	r7, [sp, #160]	; 0xa0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010490:	934c      	str	r3, [sp, #304]	; 0x130
 8010492:	fb87 0202 	smull	r0, r2, r7, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010496:	925d      	str	r2, [sp, #372]	; 0x174
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010498:	f85e 4c20 	ldr.w	r4, [lr, #-32]
 801049c:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
 80104a0:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 80104a4:	4625      	mov	r5, r4
 80104a6:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80104aa:	954d      	str	r5, [sp, #308]	; 0x134
 80104ac:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80104b0:	945c      	str	r4, [sp, #368]	; 0x170
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80104b2:	f85e 4c1c 	ldr.w	r4, [lr, #-28]
 80104b6:	f8d9 2084 	ldr.w	r2, [r9, #132]	; 0x84
 80104ba:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 80104be:	4625      	mov	r5, r4
 80104c0:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80104c4:	954e      	str	r5, [sp, #312]	; 0x138
 80104c6:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80104ca:	945b      	str	r4, [sp, #364]	; 0x16c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80104cc:	f85e 4c18 	ldr.w	r4, [lr, #-24]
 80104d0:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
 80104d4:	f8d9 0054 	ldr.w	r0, [r9, #84]	; 0x54
 80104d8:	4625      	mov	r5, r4
 80104da:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80104de:	954f      	str	r5, [sp, #316]	; 0x13c
 80104e0:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80104e4:	945a      	str	r4, [sp, #360]	; 0x168
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80104e6:	f85e 4c14 	ldr.w	r4, [lr, #-20]
 80104ea:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 80104ee:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80104f2:	4625      	mov	r5, r4
 80104f4:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80104f8:	9550      	str	r5, [sp, #320]	; 0x140
 80104fa:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80104fe:	9459      	str	r4, [sp, #356]	; 0x164
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010500:	f85e 4c10 	ldr.w	r4, [lr, #-16]
 8010504:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
 8010508:	f8d9 005c 	ldr.w	r0, [r9, #92]	; 0x5c
 801050c:	4625      	mov	r5, r4
 801050e:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010512:	9551      	str	r5, [sp, #324]	; 0x144
 8010514:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010518:	9458      	str	r4, [sp, #352]	; 0x160
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801051a:	f85e 4c0c 	ldr.w	r4, [lr, #-12]
 801051e:	f8d9 2074 	ldr.w	r2, [r9, #116]	; 0x74
 8010522:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 8010526:	4625      	mov	r5, r4
 8010528:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 801052c:	9552      	str	r5, [sp, #328]	; 0x148
 801052e:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010532:	9457      	str	r4, [sp, #348]	; 0x15c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010534:	f85e 4c08 	ldr.w	r4, [lr, #-8]
 8010538:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
 801053c:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
 8010540:	4625      	mov	r5, r4
 8010542:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010546:	9553      	str	r5, [sp, #332]	; 0x14c
 8010548:	fb82 0404 	smull	r0, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 801054c:	9456      	str	r4, [sp, #344]	; 0x158
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801054e:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 8010552:	e9d9 021a 	ldrd	r0, r2, [r9, #104]	; 0x68
 8010556:	4625      	mov	r5, r4
 8010558:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 801055c:	9554      	str	r5, [sp, #336]	; 0x150
 801055e:	fb82 0404 	smull	r0, r4, r2, r4
	__asm__ volatile (
 8010562:	2200      	movs	r2, #0
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010564:	9455      	str	r4, [sp, #340]	; 0x154
		yLo = (xPrevWin[ 0+i] << 2);
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	4614      	mov	r4, r2
 801056a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 801056e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 8010572:	f848 3b04 	str.w	r3, [r8], #4
 8010576:	4610      	mov	r0, r2
		yLo = (xPrevWin[ 3+i] << 2);
 8010578:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8010580:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8010584:	4320      	orrs	r0, r4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010586:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8010588:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801058a:	f8c8 317c 	str.w	r3, [r8, #380]	; 0x17c
 801058e:	fb87 3404 	smull	r3, r4, r7, r4
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8010592:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8010594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	__asm__ volatile (
 8010598:	4614      	mov	r4, r2
 801059a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 801059e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 80105a2:	4320      	orrs	r0, r4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80105a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80105a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80105a8:	f8c8 32fc 	str.w	r3, [r8, #764]	; 0x2fc
 80105ac:	fb81 3404 	smull	r3, r4, r1, r4
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 80105b0:	9b55      	ldr	r3, [sp, #340]	; 0x154
 80105b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	__asm__ volatile (
 80105b6:	4614      	mov	r4, r2
 80105b8:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80105bc:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 80105c0:	f8c8 347c 	str.w	r3, [r8, #1148]	; 0x47c
 80105c4:	4320      	orrs	r0, r4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80105c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105c8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80105ca:	fb85 4303 	smull	r4, r3, r5, r3
 80105ce:	4654      	mov	r4, sl
 80105d0:	fb87 5404 	smull	r5, r4, r7, r4
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 80105d4:	441c      	add	r4, r3
 80105d6:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80105d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	__asm__ volatile (
 80105dc:	4614      	mov	r4, r2
 80105de:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80105e2:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 80105e6:	f8c8 35fc 	str.w	r3, [r8, #1532]	; 0x5fc
 80105ea:	4320      	orrs	r0, r4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80105ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80105f0:	fb87 4303 	smull	r4, r3, r7, r3
 80105f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80105f6:	fb81 5404 	smull	r5, r4, r1, r4
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 80105fa:	441c      	add	r4, r3
 80105fc:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 80105fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	__asm__ volatile (
 8010602:	4614      	mov	r4, r2
 8010604:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8010608:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 801060c:	f8c8 377c 	str.w	r3, [r8, #1916]	; 0x77c
 8010610:	4320      	orrs	r0, r4
		yLo = (xPrevWin[ 0+i] << 2);
 8010612:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8010614:	4614      	mov	r4, r2
 8010616:	009b      	lsls	r3, r3, #2
 8010618:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 801061c:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 8010620:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
 8010624:	4320      	orrs	r0, r4
		yLo = (xPrevWin[ 3+i] << 2);
 8010626:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8010628:	4614      	mov	r4, r2
 801062a:	e009      	b.n	8010640 <xmp3fixpt_IMDCT+0xf60>
 801062c:	6ed9eba1 	.word	0x6ed9eba1
 8010630:	7ba3751d 	.word	0x7ba3751d
 8010634:	5a82799a 	.word	0x5a82799a
 8010638:	2120fb83 	.word	0x2120fb83
 801063c:	08023314 	.word	0x08023314
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8010646:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 801064a:	4320      	orrs	r0, r4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801064c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801064e:	4634      	mov	r4, r6
 8010650:	f8c8 31fc 	str.w	r3, [r8, #508]	; 0x1fc
 8010654:	fb87 3404 	smull	r3, r4, r7, r4
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8010658:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 801065a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	__asm__ volatile (
 801065e:	4614      	mov	r4, r2
 8010660:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8010664:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8010668:	4304      	orrs	r4, r0
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801066a:	9904      	ldr	r1, [sp, #16]
 801066c:	f8c8 337c 	str.w	r3, [r8, #892]	; 0x37c
 8010670:	fb81 3606 	smull	r3, r6, r1, r6
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8010674:	9b56      	ldr	r3, [sp, #344]	; 0x158
	__asm__ volatile (
 8010676:	4610      	mov	r0, r2
 8010678:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801067c:	ea86 70e6 	eor.w	r0, r6, r6, asr #31
 8010680:	eba0 70e6 	sub.w	r0, r0, r6, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8010684:	f8c8 64fc 	str.w	r6, [r8, #1276]	; 0x4fc
 8010688:	4320      	orrs	r0, r4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801068a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801068c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801068e:	fb86 4303 	smull	r4, r3, r6, r3
 8010692:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010694:	fb87 5404 	smull	r5, r4, r7, r4
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8010698:	441c      	add	r4, r3
 801069a:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801069c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	__asm__ volatile (
 80106a0:	4614      	mov	r4, r2
 80106a2:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80106a6:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 80106aa:	4320      	orrs	r0, r4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80106ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80106ae:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80106b0:	f8c8 367c 	str.w	r3, [r8, #1660]	; 0x67c
 80106b4:	fb86 3505 	smull	r3, r5, r6, r5
 80106b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80106ba:	fb81 3404 	smull	r3, r4, r1, r4
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 80106be:	192b      	adds	r3, r5, r4
 80106c0:	9c5c      	ldr	r4, [sp, #368]	; 0x170
 80106c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	__asm__ volatile (
 80106c6:	4614      	mov	r4, r2
 80106c8:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80106cc:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 80106d0:	f8c8 37fc 	str.w	r3, [r8, #2044]	; 0x7fc
 80106d4:	4320      	orrs	r0, r4
		yLo = (xPrevWin[ 0+i] << 2);
 80106d6:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80106d8:	4614      	mov	r4, r2
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80106e0:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 80106e4:	f8c8 30fc 	str.w	r3, [r8, #252]	; 0xfc
 80106e8:	4320      	orrs	r0, r4
		yLo = (xPrevWin[ 3+i] << 2);
 80106ea:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80106ec:	4614      	mov	r4, r2
 80106ee:	009b      	lsls	r3, r3, #2
 80106f0:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80106f4:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 80106f8:	f8c8 327c 	str.w	r3, [r8, #636]	; 0x27c
 80106fc:	4304      	orrs	r4, r0
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80106fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010700:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010702:	fb86 0303 	smull	r0, r3, r6, r3
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8010706:	9854      	ldr	r0, [sp, #336]	; 0x150
 8010708:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	__asm__ volatile (
 801070c:	4613      	mov	r3, r2
 801070e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8010712:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8010716:	431c      	orrs	r4, r3
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010718:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801071a:	9f05      	ldr	r7, [sp, #20]
 801071c:	f8c8 03fc 	str.w	r0, [r8, #1020]	; 0x3fc
 8010720:	fb87 3505 	smull	r3, r5, r7, r5
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8010724:	9b57      	ldr	r3, [sp, #348]	; 0x15c
	__asm__ volatile (
 8010726:	4610      	mov	r0, r2
 8010728:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801072c:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8010730:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8010734:	f8c8 357c 	str.w	r3, [r8, #1404]	; 0x57c
 8010738:	4304      	orrs	r4, r0
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801073a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801073c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801073e:	fb81 0303 	smull	r0, r3, r1, r3
 8010742:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010744:	fb86 0505 	smull	r0, r5, r6, r5
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8010748:	985a      	ldr	r0, [sp, #360]	; 0x168
 801074a:	442b      	add	r3, r5
 801074c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	__asm__ volatile (
 8010750:	4610      	mov	r0, r2
 8010752:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8010756:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 801075a:	f8c8 36fc 	str.w	r3, [r8, #1788]	; 0x6fc
 801075e:	4320      	orrs	r0, r4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010762:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8010764:	fb86 4303 	smull	r4, r3, r6, r3
 8010768:	4654      	mov	r4, sl
 801076a:	fb87 5404 	smull	r5, r4, r7, r4
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 801076e:	441c      	add	r4, r3
 8010770:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8010772:	eb04 0483 	add.w	r4, r4, r3, lsl #2
	__asm__ volatile (
 8010776:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801077a:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
	*out = x0 + x1;	out++;
 801077e:	9906      	ldr	r1, [sp, #24]
	*out = x2 + x3;	out++;
 8010780:	9b03      	ldr	r3, [sp, #12]
	*out = x0 + x1;	out++;
 8010782:	9d08      	ldr	r5, [sp, #32]
	*out = x2 + x3;	out++;
 8010784:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	*out = x0 + x1;	out++;
 8010786:	194d      	adds	r5, r1, r5
	*out = x4 + x5;	out++;
 8010788:	9923      	ldr	r1, [sp, #140]	; 0x8c
	*out = x2 + x3;	out++;
 801078a:	199f      	adds	r7, r3, r6
	*out = x4 + x5;	out++;
 801078c:	9b07      	ldr	r3, [sp, #28]
		*xPrev++ = xBuf[i] >> 2;
 801078e:	10ad      	asrs	r5, r5, #2
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8010790:	f8c8 487c 	str.w	r4, [r8, #2172]	; 0x87c
	*out = x4 + x5;	out++;
 8010794:	440b      	add	r3, r1
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8010796:	ea40 0402 	orr.w	r4, r0, r2
		*xPrev++ = xBuf[i] >> 2;
 801079a:	f84e 5c24 	str.w	r5, [lr, #-36]
 801079e:	10bf      	asrs	r7, r7, #2
	*out = x0 + x1;	out++;
 80107a0:	9d20      	ldr	r5, [sp, #128]	; 0x80
		*xPrev++ = xBuf[i] >> 2;
 80107a2:	109b      	asrs	r3, r3, #2
 80107a4:	f84e 7c20 	str.w	r7, [lr, #-32]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80107a8:	ee16 1a90 	vmov	r1, s13
		*xPrev++ = xBuf[i] >> 2;
 80107ac:	f84e 3c1c 	str.w	r3, [lr, #-28]
	*out = x0 + x1;	out++;
 80107b0:	eb0c 0305 	add.w	r3, ip, r5
	*out = x0 - x1;
 80107b4:	ebac 0c05 	sub.w	ip, ip, r5
	*out = x2 + x3;	out++;
 80107b8:	9d21      	ldr	r5, [sp, #132]	; 0x84
		*xPrev++ = xBuf[i] >> 2;
 80107ba:	109b      	asrs	r3, r3, #2
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80107bc:	ee17 0a90 	vmov	r0, s15
		*xPrev++ = xBuf[i] >> 2;
 80107c0:	f84e 3c18 	str.w	r3, [lr, #-24]
 80107c4:	ea4f 03ac 	mov.w	r3, ip, asr #2
 80107c8:	f84e 3c04 	str.w	r3, [lr, #-4]
	*out = x2 + x3;	out++;
 80107cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80107ce:	195a      	adds	r2, r3, r5
	*out = x2 - x3;	out++;
 80107d0:	1b5b      	subs	r3, r3, r5
	*out = x4 + x5;	out++;
 80107d2:	9d22      	ldr	r5, [sp, #136]	; 0x88
		*xPrev++ = xBuf[i] >> 2;
 80107d4:	1092      	asrs	r2, r2, #2
 80107d6:	109b      	asrs	r3, r3, #2
 80107d8:	f84e 2c14 	str.w	r2, [lr, #-20]
	*out = x4 + x5;	out++;
 80107dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
		*xPrev++ = xBuf[i] >> 2;
 80107de:	f84e 3c08 	str.w	r3, [lr, #-8]
	*out = x4 + x5;	out++;
 80107e2:	1953      	adds	r3, r2, r5
	*out = x4 - x5;	out++;
 80107e4:	1b52      	subs	r2, r2, r5
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80107e6:	9d01      	ldr	r5, [sp, #4]
		*xPrev++ = xBuf[i] >> 2;
 80107e8:	1092      	asrs	r2, r2, #2
 80107ea:	109b      	asrs	r3, r3, #2
 80107ec:	f84e 2c0c 	str.w	r2, [lr, #-12]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80107f0:	462a      	mov	r2, r5
	for (   ; i < bc->nBlocksTotal; i++) {
 80107f2:	3501      	adds	r5, #1
		*xPrev++ = xBuf[i] >> 2;
 80107f4:	f84e 3c10 	str.w	r3, [lr, #-16]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80107f8:	ee17 3a10 	vmov	r3, s14
	for (   ; i < bc->nBlocksTotal; i++) {
 80107fc:	9501      	str	r5, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80107fe:	f7fe fcef 	bl	800f1e0 <FreqInvertRescale>
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8010802:	9b00      	ldr	r3, [sp, #0]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8010804:	4320      	orrs	r0, r4
	for (   ; i < bc->nBlocksTotal; i++) {
 8010806:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010808:	f10b 0e24 	add.w	lr, fp, #36	; 0x24
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 801080c:	4303      	orrs	r3, r0
	for (   ; i < bc->nBlocksTotal; i++) {
 801080e:	f107 0a48 	add.w	sl, r7, #72	; 0x48
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8010812:	9300      	str	r3, [sp, #0]
	for (   ; i < bc->nBlocksTotal; i++) {
 8010814:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010816:	429d      	cmp	r5, r3
 8010818:	f6ff acc6 	blt.w	80101a8 <xmp3fixpt_IMDCT+0xac8>
 801081c:	46c8      	mov	r8, r9
 801081e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010822:	4293      	cmp	r3, r2
 8010824:	f340 835a 	ble.w	8010edc <xmp3fixpt_IMDCT+0x17fc>
 8010828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801082a:	f10b 0a24 	add.w	sl, fp, #36	; 0x24
 801082e:	9a01      	ldr	r2, [sp, #4]
 8010830:	f103 0948 	add.w	r9, r3, #72	; 0x48
		wpLo = imdctWin[btPrev] + 18;
 8010834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010836:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801083a:	eb08 1b03 	add.w	fp, r8, r3, lsl #4
 801083e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010840:	f04f 0800 	mov.w	r8, #0
 8010844:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010848:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 801084c:	9303      	str	r3, [sp, #12]
 801084e:	e1b1      	b.n	8010bb4 <xmp3fixpt_IMDCT+0x14d4>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010850:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010852:	f85a 4c24 	ldr.w	r4, [sl, #-36]
 8010856:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801085a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801085c:	4623      	mov	r3, r4
 801085e:	fb81 5303 	smull	r5, r3, r1, r3
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010862:	934c      	str	r3, [sp, #304]	; 0x130
 8010864:	fb82 1404 	smull	r1, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010868:	945d      	str	r4, [sp, #372]	; 0x174
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801086a:	f85a 4c20 	ldr.w	r4, [sl, #-32]
 801086e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8010872:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8010874:	4625      	mov	r5, r4
 8010876:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 801087a:	954d      	str	r5, [sp, #308]	; 0x134
 801087c:	fb82 1404 	smull	r1, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010880:	945c      	str	r4, [sp, #368]	; 0x170
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010882:	f85a 4c1c 	ldr.w	r4, [sl, #-28]
 8010886:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 801088a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 801088c:	4625      	mov	r5, r4
 801088e:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010892:	954e      	str	r5, [sp, #312]	; 0x138
 8010894:	fb82 1404 	smull	r1, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010898:	945b      	str	r4, [sp, #364]	; 0x16c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801089a:	f85a 4c18 	ldr.w	r4, [sl, #-24]
 801089e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80108a2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80108a4:	4625      	mov	r5, r4
 80108a6:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80108aa:	954f      	str	r5, [sp, #316]	; 0x13c
 80108ac:	fb82 1404 	smull	r1, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80108b0:	945a      	str	r4, [sp, #360]	; 0x168
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80108b2:	f85a 4c14 	ldr.w	r4, [sl, #-20]
 80108b6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80108b8:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80108ba:	4625      	mov	r5, r4
 80108bc:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80108c0:	9550      	str	r5, [sp, #320]	; 0x140
 80108c2:	fb82 1404 	smull	r1, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80108c6:	9459      	str	r4, [sp, #356]	; 0x164
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80108c8:	f85a 4c10 	ldr.w	r4, [sl, #-16]
 80108cc:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80108ce:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80108d0:	4625      	mov	r5, r4
 80108d2:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80108d6:	9551      	str	r5, [sp, #324]	; 0x144
 80108d8:	fb82 1404 	smull	r1, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80108dc:	9458      	str	r4, [sp, #352]	; 0x160
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80108de:	f85a 4c0c 	ldr.w	r4, [sl, #-12]
 80108e2:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80108e4:	6e01      	ldr	r1, [r0, #96]	; 0x60
 80108e6:	4625      	mov	r5, r4
 80108e8:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80108ec:	9552      	str	r5, [sp, #328]	; 0x148
 80108ee:	fb82 1404 	smull	r1, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80108f2:	9457      	str	r4, [sp, #348]	; 0x15c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80108f4:	f85a 4c08 	ldr.w	r4, [sl, #-8]
 80108f8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80108fa:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80108fc:	4625      	mov	r5, r4
 80108fe:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010902:	9553      	str	r5, [sp, #332]	; 0x14c
 8010904:	fb82 1404 	smull	r1, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010908:	9456      	str	r4, [sp, #344]	; 0x158
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801090a:	f85a 4c04 	ldr.w	r4, [sl, #-4]
 801090e:	e9d0 121a 	ldrd	r1, r2, [r0, #104]	; 0x68
 8010912:	4625      	mov	r5, r4
 8010914:	fb81 6505 	smull	r6, r5, r1, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010918:	9554      	str	r5, [sp, #336]	; 0x150
 801091a:	fb82 1404 	smull	r1, r4, r2, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 801091e:	9455      	str	r4, [sp, #340]	; 0x154
		yLo = (xPrevWin[ 0+i] << 2);
 8010920:	009b      	lsls	r3, r3, #2
	__asm__ volatile (
 8010922:	4642      	mov	r2, r8
 8010924:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010928:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 801092c:	9e03      	ldr	r6, [sp, #12]
 801092e:	4641      	mov	r1, r8
 8010930:	f846 3b04 	str.w	r3, [r6], #4
		yLo = (xPrevWin[ 3+i] << 2);
 8010934:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 801093c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8010940:	430a      	orrs	r2, r1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010942:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010944:	9908      	ldr	r1, [sp, #32]
 8010946:	f8c6 317c 	str.w	r3, [r6, #380]	; 0x17c
 801094a:	fb80 3101 	smull	r3, r1, r0, r1
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 801094e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8010950:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	__asm__ volatile (
 8010954:	4641      	mov	r1, r8
 8010956:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 801095a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801095e:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8010962:	430a      	orrs	r2, r1
 8010964:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8010966:	4671      	mov	r1, lr
 8010968:	f8c6 32fc 	str.w	r3, [r6, #764]	; 0x2fc
 801096c:	fb85 3101 	smull	r3, r1, r5, r1
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8010970:	9b55      	ldr	r3, [sp, #340]	; 0x154
 8010972:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	__asm__ volatile (
 8010976:	4641      	mov	r1, r8
 8010978:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 801097c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8010980:	f8c6 347c 	str.w	r3, [r6, #1148]	; 0x47c
 8010984:	430a      	orrs	r2, r1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010986:	9b07      	ldr	r3, [sp, #28]
 8010988:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801098a:	fb84 1303 	smull	r1, r3, r4, r3
 801098e:	4639      	mov	r1, r7
 8010990:	fb80 4101 	smull	r4, r1, r0, r1
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8010994:	440b      	add	r3, r1
 8010996:	9958      	ldr	r1, [sp, #352]	; 0x160
 8010998:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	__asm__ volatile (
 801099c:	4643      	mov	r3, r8
 801099e:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80109a2:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 80109a6:	431a      	orrs	r2, r3
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80109a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80109aa:	9b06      	ldr	r3, [sp, #24]
 80109ac:	f8c6 15fc 	str.w	r1, [r6, #1532]	; 0x5fc
 80109b0:	fb80 1303 	smull	r1, r3, r0, r3
 80109b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109b6:	fb85 4101 	smull	r4, r1, r5, r1
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 80109ba:	4419      	add	r1, r3
 80109bc:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 80109be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	__asm__ volatile (
 80109c2:	4641      	mov	r1, r8
 80109c4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80109c8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 80109cc:	f8c6 377c 	str.w	r3, [r6, #1916]	; 0x77c
 80109d0:	430a      	orrs	r2, r1
		yLo = (xPrevWin[ 0+i] << 2);
 80109d2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80109d4:	4641      	mov	r1, r8
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80109dc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 80109e0:	67f3      	str	r3, [r6, #124]	; 0x7c
 80109e2:	430a      	orrs	r2, r1
		yLo = (xPrevWin[ 3+i] << 2);
 80109e4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80109e6:	4641      	mov	r1, r8
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80109ee:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80109f2:	9c11      	ldr	r4, [sp, #68]	; 0x44
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 80109f4:	4311      	orrs	r1, r2
 80109f6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80109f8:	4622      	mov	r2, r4
 80109fa:	f8c6 31fc 	str.w	r3, [r6, #508]	; 0x1fc
 80109fe:	fb80 3202 	smull	r3, r2, r0, r2
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8010a02:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8010a04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	__asm__ volatile (
 8010a08:	4642      	mov	r2, r8
 8010a0a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010a0e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8010a12:	430a      	orrs	r2, r1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010a14:	9d04      	ldr	r5, [sp, #16]
 8010a16:	f8c6 337c 	str.w	r3, [r6, #892]	; 0x37c
 8010a1a:	fb85 3404 	smull	r3, r4, r5, r4
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8010a1e:	9b56      	ldr	r3, [sp, #344]	; 0x158
	__asm__ volatile (
 8010a20:	4641      	mov	r1, r8
 8010a22:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8010a26:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8010a2a:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010a2e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8010a32:	4635      	mov	r5, r6
 8010a34:	f8c6 44fc 	str.w	r4, [r6, #1276]	; 0x4fc
 8010a38:	4311      	orrs	r1, r2
 8010a3a:	4663      	mov	r3, ip
 8010a3c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010a3e:	fb86 2303 	smull	r2, r3, r6, r3
 8010a42:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8010a44:	4632      	mov	r2, r6
 8010a46:	fb80 4202 	smull	r4, r2, r0, r2
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8010a4a:	4413      	add	r3, r2
 8010a4c:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8010a4e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	__asm__ volatile (
 8010a52:	4643      	mov	r3, r8
 8010a54:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8010a58:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 8010a5c:	f8c5 267c 	str.w	r2, [r5, #1660]	; 0x67c
 8010a60:	4319      	orrs	r1, r3
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010a62:	4662      	mov	r2, ip
 8010a64:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010a66:	fb80 3202 	smull	r3, r2, r0, r2
 8010a6a:	9804      	ldr	r0, [sp, #16]
 8010a6c:	fb80 3606 	smull	r3, r6, r0, r6
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8010a70:	4416      	add	r6, r2
 8010a72:	9b5c      	ldr	r3, [sp, #368]	; 0x170
	__asm__ volatile (
 8010a74:	4642      	mov	r2, r8
 8010a76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010a7a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010a7e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8010a82:	f8c5 37fc 	str.w	r3, [r5, #2044]	; 0x7fc
 8010a86:	4311      	orrs	r1, r2
		yLo = (xPrevWin[ 0+i] << 2);
 8010a88:	9b4e      	ldr	r3, [sp, #312]	; 0x138
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8010a8a:	462c      	mov	r4, r5
 8010a8c:	4642      	mov	r2, r8
		yLo = (xPrevWin[ 0+i] << 2);
 8010a8e:	009b      	lsls	r3, r3, #2
 8010a90:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010a94:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 8010a98:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
 8010a9c:	430a      	orrs	r2, r1
		yLo = (xPrevWin[ 3+i] << 2);
 8010a9e:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8010aa0:	4641      	mov	r1, r8
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8010aa8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8010aac:	430a      	orrs	r2, r1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010aae:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010ab0:	f8c5 327c 	str.w	r3, [r5, #636]	; 0x27c
 8010ab4:	fb80 3e0e 	smull	r3, lr, r0, lr
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8010ab8:	9b54      	ldr	r3, [sp, #336]	; 0x150
	__asm__ volatile (
 8010aba:	4641      	mov	r1, r8
 8010abc:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8010ac0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8010ac4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8010ac8:	f8c5 33fc 	str.w	r3, [r5, #1020]	; 0x3fc
 8010acc:	430a      	orrs	r2, r1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010ace:	9d08      	ldr	r5, [sp, #32]
 8010ad0:	9e05      	ldr	r6, [sp, #20]
 8010ad2:	fb86 3505 	smull	r3, r5, r6, r5
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8010ad6:	9b57      	ldr	r3, [sp, #348]	; 0x15c
	__asm__ volatile (
 8010ad8:	4646      	mov	r6, r8
 8010ada:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8010ade:	ea85 76e5 	eor.w	r6, r5, r5, asr #31
 8010ae2:	eba6 76e5 	sub.w	r6, r6, r5, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8010ae6:	f8c4 557c 	str.w	r5, [r4, #1404]	; 0x57c
 8010aea:	4332      	orrs	r2, r6
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010aec:	9b06      	ldr	r3, [sp, #24]
 8010aee:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8010af0:	9403      	str	r4, [sp, #12]
 8010af2:	fb85 1303 	smull	r1, r3, r5, r3
 8010af6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010af8:	fb80 1404 	smull	r1, r4, r0, r4
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8010afc:	441c      	add	r4, r3
 8010afe:	9b5a      	ldr	r3, [sp, #360]	; 0x168
	__asm__ volatile (
 8010b00:	4646      	mov	r6, r8
 8010b02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010b06:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 8010b0a:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 8010b0e:	9c03      	ldr	r4, [sp, #12]
 8010b10:	4332      	orrs	r2, r6
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010b12:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010b14:	f8c4 36fc 	str.w	r3, [r4, #1788]	; 0x6fc
 8010b18:	9b07      	ldr	r3, [sp, #28]
 8010b1a:	fb80 1303 	smull	r1, r3, r0, r3
 8010b1e:	9e05      	ldr	r6, [sp, #20]
 8010b20:	fb86 1707 	smull	r1, r7, r6, r7
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8010b24:	441f      	add	r7, r3
 8010b26:	995d      	ldr	r1, [sp, #372]	; 0x174
	__asm__ volatile (
 8010b28:	4646      	mov	r6, r8
 8010b2a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8010b2e:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 8010b32:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
		*xPrev++ = xBuf[i] >> 2;
 8010b36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8010b38:	4316      	orrs	r6, r2
 8010b3a:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8010b3e:	ee16 0a90 	vmov	r0, s13
		*xPrev++ = xBuf[i] >> 2;
 8010b42:	109b      	asrs	r3, r3, #2
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8010b44:	9c01      	ldr	r4, [sp, #4]
	for (   ; i < bc->nBlocksTotal; i++) {
 8010b46:	f109 0948 	add.w	r9, r9, #72	; 0x48
 8010b4a:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
		*xPrev++ = xBuf[i] >> 2;
 8010b4e:	f84a 3c48 	str.w	r3, [sl, #-72]
 8010b52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010b54:	109b      	asrs	r3, r3, #2
 8010b56:	f84a 3c44 	str.w	r3, [sl, #-68]
 8010b5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010b5c:	109b      	asrs	r3, r3, #2
 8010b5e:	f84a 3c40 	str.w	r3, [sl, #-64]
		*xPrev++ = xBuf[i] >> 2;
 8010b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b64:	109b      	asrs	r3, r3, #2
 8010b66:	f84a 3c3c 	str.w	r3, [sl, #-60]
 8010b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b6c:	109b      	asrs	r3, r3, #2
 8010b6e:	f84a 3c38 	str.w	r3, [sl, #-56]
 8010b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b74:	109b      	asrs	r3, r3, #2
 8010b76:	f84a 3c34 	str.w	r3, [sl, #-52]
 8010b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b7c:	1099      	asrs	r1, r3, #2
 8010b7e:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8010b82:	f84a 1c30 	str.w	r1, [sl, #-48]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8010b86:	ee17 1a90 	vmov	r1, s15
		*xPrev++ = xBuf[i] >> 2;
 8010b8a:	f84a 3c2c 	str.w	r3, [sl, #-44]
 8010b8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b90:	109a      	asrs	r2, r3, #2
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8010b92:	ee17 3a10 	vmov	r3, s14
		*xPrev++ = xBuf[i] >> 2;
 8010b96:	f84a 2c28 	str.w	r2, [sl, #-40]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8010b9a:	4622      	mov	r2, r4
	for (   ; i < bc->nBlocksTotal; i++) {
 8010b9c:	3401      	adds	r4, #1
 8010b9e:	9401      	str	r4, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8010ba0:	f7fe fb1e 	bl	800f1e0 <FreqInvertRescale>
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8010ba4:	9b00      	ldr	r3, [sp, #0]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8010ba6:	4330      	orrs	r0, r6
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8010ba8:	4303      	orrs	r3, r0
 8010baa:	9300      	str	r3, [sp, #0]
	for (   ; i < bc->nBlocksTotal; i++) {
 8010bac:	9b02      	ldr	r3, [sp, #8]
 8010bae:	42a3      	cmp	r3, r4
 8010bb0:	f340 8194 	ble.w	8010edc <xmp3fixpt_IMDCT+0x17fc>
 8010bb4:	f1aa 0324 	sub.w	r3, sl, #36	; 0x24
 8010bb8:	ee07 3a90 	vmov	s15, r3
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8010bbc:	9b03      	ldr	r3, [sp, #12]
 8010bbe:	ee06 3a90 	vmov	s13, r3
	if (gb < 7) {
 8010bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bc4:	2b06      	cmp	r3, #6
 8010bc6:	f300 8088 	bgt.w	8010cda <xmp3fixpt_IMDCT+0x15fa>
			xCurr[i+0] >>= es;
 8010bca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010bcc:	f859 3c48 	ldr.w	r3, [r9, #-72]
 8010bd0:	4113      	asrs	r3, r2
 8010bd2:	f849 3c48 	str.w	r3, [r9, #-72]
			xCurr[i+1] >>= es;
 8010bd6:	f859 3c44 	ldr.w	r3, [r9, #-68]
 8010bda:	4113      	asrs	r3, r2
 8010bdc:	f849 3c44 	str.w	r3, [r9, #-68]
			*xPrev++ >>= es;
 8010be0:	f85a 3c24 	ldr.w	r3, [sl, #-36]
 8010be4:	4113      	asrs	r3, r2
 8010be6:	f84a 3c24 	str.w	r3, [sl, #-36]
			xCurr[i+0] >>= es;
 8010bea:	f859 3c40 	ldr.w	r3, [r9, #-64]
 8010bee:	4113      	asrs	r3, r2
 8010bf0:	f849 3c40 	str.w	r3, [r9, #-64]
			xCurr[i+1] >>= es;
 8010bf4:	f859 3c3c 	ldr.w	r3, [r9, #-60]
 8010bf8:	4113      	asrs	r3, r2
 8010bfa:	f849 3c3c 	str.w	r3, [r9, #-60]
			*xPrev++ >>= es;
 8010bfe:	f85a 3c20 	ldr.w	r3, [sl, #-32]
 8010c02:	4113      	asrs	r3, r2
 8010c04:	f84a 3c20 	str.w	r3, [sl, #-32]
			xCurr[i+0] >>= es;
 8010c08:	f859 3c38 	ldr.w	r3, [r9, #-56]
 8010c0c:	4113      	asrs	r3, r2
 8010c0e:	f849 3c38 	str.w	r3, [r9, #-56]
			xCurr[i+1] >>= es;
 8010c12:	f859 3c34 	ldr.w	r3, [r9, #-52]
 8010c16:	4113      	asrs	r3, r2
 8010c18:	f849 3c34 	str.w	r3, [r9, #-52]
			*xPrev++ >>= es;
 8010c1c:	f85a 3c1c 	ldr.w	r3, [sl, #-28]
 8010c20:	4113      	asrs	r3, r2
 8010c22:	f84a 3c1c 	str.w	r3, [sl, #-28]
			xCurr[i+0] >>= es;
 8010c26:	f859 3c30 	ldr.w	r3, [r9, #-48]
 8010c2a:	4113      	asrs	r3, r2
 8010c2c:	f849 3c30 	str.w	r3, [r9, #-48]
			xCurr[i+1] >>= es;
 8010c30:	f859 3c2c 	ldr.w	r3, [r9, #-44]
 8010c34:	4113      	asrs	r3, r2
 8010c36:	f849 3c2c 	str.w	r3, [r9, #-44]
			*xPrev++ >>= es;
 8010c3a:	f85a 3c18 	ldr.w	r3, [sl, #-24]
 8010c3e:	4113      	asrs	r3, r2
 8010c40:	f84a 3c18 	str.w	r3, [sl, #-24]
			xCurr[i+0] >>= es;
 8010c44:	f859 3c28 	ldr.w	r3, [r9, #-40]
 8010c48:	4113      	asrs	r3, r2
 8010c4a:	f849 3c28 	str.w	r3, [r9, #-40]
			xCurr[i+1] >>= es;
 8010c4e:	f859 3c24 	ldr.w	r3, [r9, #-36]
 8010c52:	4113      	asrs	r3, r2
 8010c54:	f849 3c24 	str.w	r3, [r9, #-36]
			*xPrev++ >>= es;
 8010c58:	f85a 3c14 	ldr.w	r3, [sl, #-20]
 8010c5c:	4113      	asrs	r3, r2
 8010c5e:	f84a 3c14 	str.w	r3, [sl, #-20]
			xCurr[i+0] >>= es;
 8010c62:	f859 3c20 	ldr.w	r3, [r9, #-32]
 8010c66:	4113      	asrs	r3, r2
 8010c68:	f849 3c20 	str.w	r3, [r9, #-32]
			xCurr[i+1] >>= es;
 8010c6c:	f859 3c1c 	ldr.w	r3, [r9, #-28]
 8010c70:	4113      	asrs	r3, r2
 8010c72:	f849 3c1c 	str.w	r3, [r9, #-28]
			*xPrev++ >>= es;
 8010c76:	f85a 3c10 	ldr.w	r3, [sl, #-16]
 8010c7a:	4113      	asrs	r3, r2
 8010c7c:	f84a 3c10 	str.w	r3, [sl, #-16]
			xCurr[i+0] >>= es;
 8010c80:	f859 3c18 	ldr.w	r3, [r9, #-24]
 8010c84:	4113      	asrs	r3, r2
 8010c86:	f849 3c18 	str.w	r3, [r9, #-24]
			xCurr[i+1] >>= es;
 8010c8a:	f859 3c14 	ldr.w	r3, [r9, #-20]
 8010c8e:	4113      	asrs	r3, r2
 8010c90:	f849 3c14 	str.w	r3, [r9, #-20]
			*xPrev++ >>= es;
 8010c94:	f85a 3c0c 	ldr.w	r3, [sl, #-12]
 8010c98:	4113      	asrs	r3, r2
 8010c9a:	f84a 3c0c 	str.w	r3, [sl, #-12]
			xCurr[i+0] >>= es;
 8010c9e:	f859 3c10 	ldr.w	r3, [r9, #-16]
 8010ca2:	4113      	asrs	r3, r2
 8010ca4:	f849 3c10 	str.w	r3, [r9, #-16]
			xCurr[i+1] >>= es;
 8010ca8:	f859 3c0c 	ldr.w	r3, [r9, #-12]
 8010cac:	4113      	asrs	r3, r2
 8010cae:	f849 3c0c 	str.w	r3, [r9, #-12]
			*xPrev++ >>= es;
 8010cb2:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 8010cb6:	4113      	asrs	r3, r2
 8010cb8:	f84a 3c08 	str.w	r3, [sl, #-8]
			xCurr[i+0] >>= es;
 8010cbc:	f859 3c08 	ldr.w	r3, [r9, #-8]
 8010cc0:	4113      	asrs	r3, r2
 8010cc2:	f849 3c08 	str.w	r3, [r9, #-8]
			xCurr[i+1] >>= es;
 8010cc6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8010cca:	4113      	asrs	r3, r2
 8010ccc:	f849 3c04 	str.w	r3, [r9, #-4]
			*xPrev++ >>= es;
 8010cd0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 8010cd4:	4113      	asrs	r3, r2
 8010cd6:	f84a 3c04 	str.w	r3, [sl, #-4]
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8010cda:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 8010cde:	f859 7c18 	ldr.w	r7, [r9, #-24]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8010ce2:	f859 2c24 	ldr.w	r2, [r9, #-36]
	x4 -= x5;
 8010ce6:	1a7e      	subs	r6, r7, r1
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8010ce8:	f859 4c30 	ldr.w	r4, [r9, #-48]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8010cec:	f859 3c3c 	ldr.w	r3, [r9, #-60]
	x3 -= x4;
 8010cf0:	1b92      	subs	r2, r2, r6
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8010cf2:	f859 5c48 	ldr.w	r5, [r9, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010cf6:	4875      	ldr	r0, [pc, #468]	; (8010ecc <xmp3fixpt_IMDCT+0x17ec>)
	x2 -= x3;
 8010cf8:	1aa4      	subs	r4, r4, r2
	x3 -= x5;
 8010cfa:	1a52      	subs	r2, r2, r1
	x1 -= x2;
 8010cfc:	1b1b      	subs	r3, r3, r4
	x0 -= x1;
 8010cfe:	1aef      	subs	r7, r5, r3
	x1 -= x3;
 8010d00:	1a9b      	subs	r3, r3, r2
	x0 >>= 1;
 8010d02:	107f      	asrs	r7, r7, #1
	x1 >>= 1;
 8010d04:	105b      	asrs	r3, r3, #1
 8010d06:	fb80 5404 	smull	r5, r4, r0, r4
	a1 = x0 + (x4 >> 1);
 8010d0a:	eb07 0c66 	add.w	ip, r7, r6, asr #1
	a2 = x0 - x4;
 8010d0e:	1bbf      	subs	r7, r7, r6
	x4 = a1 - a0;
 8010d10:	ebac 0544 	sub.w	r5, ip, r4, lsl #1
	x0 = a1 + a0;
 8010d14:	eb0c 0e44 	add.w	lr, ip, r4, lsl #1
	x4 = a1 - a0;
 8010d18:	9507      	str	r5, [sp, #28]
 8010d1a:	fb80 4202 	smull	r4, r2, r0, r2
	a1 = x1 + (x5 >> 1);
 8010d1e:	eb03 0561 	add.w	r5, r3, r1, asr #1
 8010d22:	486b      	ldr	r0, [pc, #428]	; (8010ed0 <xmp3fixpt_IMDCT+0x17f0>)
	a0 = MULSHIFT32(c3_0, x3) << 1;
 8010d24:	0056      	lsls	r6, r2, #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8010d26:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8010d2a:	fb80 4202 	smull	r4, r2, r0, r2
 8010d2e:	4c69      	ldr	r4, [pc, #420]	; (8010ed4 <xmp3fixpt_IMDCT+0x17f4>)
	a2 = x1 - x5;
 8010d30:	1a5b      	subs	r3, r3, r1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8010d32:	0092      	lsls	r2, r2, #2
 8010d34:	fb84 1303 	smull	r1, r3, r4, r3
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8010d38:	1bad      	subs	r5, r5, r6
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8010d3a:	009c      	lsls	r4, r3, #2
 8010d3c:	4e66      	ldr	r6, [pc, #408]	; (8010ed8 <xmp3fixpt_IMDCT+0x17f8>)
 8010d3e:	fb86 3505 	smull	r3, r5, r6, r5
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8010d42:	f859 3c14 	ldr.w	r3, [r9, #-20]
	x4 -= x5;
 8010d46:	f859 1c08 	ldr.w	r1, [r9, #-8]
 8010d4a:	eba3 0c01 	sub.w	ip, r3, r1
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8010d4e:	f859 3c20 	ldr.w	r3, [r9, #-32]
 8010d52:	f859 1c2c 	ldr.w	r1, [r9, #-44]
	x3 -= x4;
 8010d56:	eba3 030c 	sub.w	r3, r3, ip
	x2 -= x3;
 8010d5a:	1ace      	subs	r6, r1, r3
	x3 -= x5;
 8010d5c:	f859 1c08 	ldr.w	r1, [r9, #-8]
 8010d60:	1a5b      	subs	r3, r3, r1
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8010d62:	f859 1c38 	ldr.w	r1, [r9, #-56]
	x1 -= x2;
 8010d66:	eba1 0b06 	sub.w	fp, r1, r6
 8010d6a:	4631      	mov	r1, r6
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8010d6c:	f859 6c44 	ldr.w	r6, [r9, #-68]
	x1 -= x3;
 8010d70:	9309      	str	r3, [sp, #36]	; 0x24
	x0 -= x1;
 8010d72:	eba6 060b 	sub.w	r6, r6, fp
	x1 -= x3;
 8010d76:	ebab 0b03 	sub.w	fp, fp, r3
	*out = x0 + x1;	out++;
 8010d7a:	eb02 030e 	add.w	r3, r2, lr
	x0 >>= 1;
 8010d7e:	1076      	asrs	r6, r6, #1
	*out = x0 + x1;	out++;
 8010d80:	9306      	str	r3, [sp, #24]
	*out = x0 - x1;
 8010d82:	ebae 0302 	sub.w	r3, lr, r2
	x1 >>= 1;
 8010d86:	ea4f 0b6b 	mov.w	fp, fp, asr #1
	*out = x0 - x1;
 8010d8a:	9312      	str	r3, [sp, #72]	; 0x48
	*out = x2 + x3;	out++;
 8010d8c:	193b      	adds	r3, r7, r4
 8010d8e:	9310      	str	r3, [sp, #64]	; 0x40
	*out = x2 - x3;	out++;
 8010d90:	1b3b      	subs	r3, r7, r4
	*out = x4 + x5;	out++;
 8010d92:	9f07      	ldr	r7, [sp, #28]
	*out = x2 - x3;	out++;
 8010d94:	9311      	str	r3, [sp, #68]	; 0x44
	*out = x4 + x5;	out++;
 8010d96:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8010d9a:	4c4c      	ldr	r4, [pc, #304]	; (8010ecc <xmp3fixpt_IMDCT+0x17ec>)
 8010d9c:	9307      	str	r3, [sp, #28]
	*out = x4 - x5;	out++;
 8010d9e:	eba7 0385 	sub.w	r3, r7, r5, lsl #2
 8010da2:	9308      	str	r3, [sp, #32]
 8010da4:	fb84 2101 	smull	r2, r1, r4, r1
	a1 = x0 + (x4 >> 1);
 8010da8:	eb06 026c 	add.w	r2, r6, ip, asr #1
 8010dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
	a2 = x0 - x4;
 8010dae:	eba6 060c 	sub.w	r6, r6, ip
	x4 = a1 - a0;
 8010db2:	eba2 0541 	sub.w	r5, r2, r1, lsl #1
	x0 = a1 + a0;
 8010db6:	eb02 0e41 	add.w	lr, r2, r1, lsl #1
	x4 = a1 - a0;
 8010dba:	950c      	str	r5, [sp, #48]	; 0x30
 8010dbc:	fb84 2303 	smull	r2, r3, r4, r3
	a1 = x1 + (x5 >> 1);
 8010dc0:	f859 7c08 	ldr.w	r7, [r9, #-8]
	a0 = MULSHIFT32(c3_0, x3) << 1;
 8010dc4:	005a      	lsls	r2, r3, #1
	a1 = x1 + (x5 >> 1);
 8010dc6:	eb0b 0767 	add.w	r7, fp, r7, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8010dca:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010dce:	fb80 1303 	smull	r1, r3, r0, r3
	a2 = x1 - x5;
 8010dd2:	f859 1c08 	ldr.w	r1, [r9, #-8]
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8010dd6:	009c      	lsls	r4, r3, #2
	a2 = x1 - x5;
 8010dd8:	ebab 0b01 	sub.w	fp, fp, r1
 8010ddc:	493d      	ldr	r1, [pc, #244]	; (8010ed4 <xmp3fixpt_IMDCT+0x17f4>)
 8010dde:	fb81 3b0b 	smull	r3, fp, r1, fp
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8010de2:	1abf      	subs	r7, r7, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8010de4:	ea4f 058b 	mov.w	r5, fp, lsl #2
 8010de8:	4a3b      	ldr	r2, [pc, #236]	; (8010ed8 <xmp3fixpt_IMDCT+0x17f8>)
 8010dea:	fb82 3707 	smull	r3, r7, r2, r7
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8010dee:	f859 3c10 	ldr.w	r3, [r9, #-16]
	x4 -= x5;
 8010df2:	f859 2c04 	ldr.w	r2, [r9, #-4]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8010df6:	f859 1c28 	ldr.w	r1, [r9, #-40]
	x4 -= x5;
 8010dfa:	eba3 0c02 	sub.w	ip, r3, r2
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8010dfe:	f859 2c1c 	ldr.w	r2, [r9, #-28]
	x3 -= x4;
 8010e02:	eba2 020c 	sub.w	r2, r2, ip
	x2 -= x3;
 8010e06:	1a8b      	subs	r3, r1, r2
	x3 -= x5;
 8010e08:	f859 1c04 	ldr.w	r1, [r9, #-4]
 8010e0c:	1a52      	subs	r2, r2, r1
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8010e0e:	f859 1c34 	ldr.w	r1, [r9, #-52]
	x1 -= x2;
 8010e12:	eba1 0b03 	sub.w	fp, r1, r3
 8010e16:	4619      	mov	r1, r3
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 8010e18:	f859 3c40 	ldr.w	r3, [r9, #-64]
	x0 -= x1;
 8010e1c:	eba3 030b 	sub.w	r3, r3, fp
	x1 -= x3;
 8010e20:	ebab 0b02 	sub.w	fp, fp, r2
	x0 >>= 1;
 8010e24:	105b      	asrs	r3, r3, #1
	x1 >>= 1;
 8010e26:	ea4f 0b6b 	mov.w	fp, fp, asr #1
	x0 >>= 1;
 8010e2a:	930b      	str	r3, [sp, #44]	; 0x2c
	*out = x0 + x1;	out++;
 8010e2c:	eb0e 0304 	add.w	r3, lr, r4
 8010e30:	931e      	str	r3, [sp, #120]	; 0x78
	*out = x0 - x1;
 8010e32:	ebae 0304 	sub.w	r3, lr, r4
 8010e36:	9309      	str	r3, [sp, #36]	; 0x24
	*out = x2 + x3;	out++;
 8010e38:	1973      	adds	r3, r6, r5
 8010e3a:	931f      	str	r3, [sp, #124]	; 0x7c
	*out = x2 - x3;	out++;
 8010e3c:	1b73      	subs	r3, r6, r5
	*out = x4 + x5;	out++;
 8010e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	*out = x2 - x3;	out++;
 8010e40:	9321      	str	r3, [sp, #132]	; 0x84
	*out = x4 + x5;	out++;
 8010e42:	eb05 0387 	add.w	r3, r5, r7, lsl #2
 8010e46:	4e21      	ldr	r6, [pc, #132]	; (8010ecc <xmp3fixpt_IMDCT+0x17ec>)
	*out = x4 - x5;	out++;
 8010e48:	eba5 0787 	sub.w	r7, r5, r7, lsl #2
	*out = x4 + x5;	out++;
 8010e4c:	9320      	str	r3, [sp, #128]	; 0x80
 8010e4e:	fb86 4101 	smull	r4, r1, r6, r1
	a1 = x0 + (x4 >> 1);
 8010e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e54:	eb03 046c 	add.w	r4, r3, ip, asr #1
	a2 = x0 - x4;
 8010e58:	eba3 030c 	sub.w	r3, r3, ip
	x0 = a1 + a0;
 8010e5c:	eb04 0541 	add.w	r5, r4, r1, lsl #1
	x4 = a1 - a0;
 8010e60:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 8010e64:	fb86 4202 	smull	r4, r2, r6, r2
	a1 = x1 + (x5 >> 1);
 8010e68:	f859 4c04 	ldr.w	r4, [r9, #-4]
	a0 = MULSHIFT32(c3_0, x3) << 1;
 8010e6c:	0056      	lsls	r6, r2, #1
	a1 = x1 + (x5 >> 1);
 8010e6e:	eb0b 0464 	add.w	r4, fp, r4, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8010e72:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8010e76:	fb80 c202 	smull	ip, r2, r0, r2
	a2 = x1 - x5;
 8010e7a:	f859 0c04 	ldr.w	r0, [r9, #-4]
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8010e7e:	0092      	lsls	r2, r2, #2
	a2 = x1 - x5;
 8010e80:	ebab 0b00 	sub.w	fp, fp, r0
 8010e84:	4813      	ldr	r0, [pc, #76]	; (8010ed4 <xmp3fixpt_IMDCT+0x17f4>)
 8010e86:	fb80 cb0b 	smull	ip, fp, r0, fp
 8010e8a:	4813      	ldr	r0, [pc, #76]	; (8010ed8 <xmp3fixpt_IMDCT+0x17f8>)
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8010e8c:	1ba4      	subs	r4, r4, r6
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8010e8e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8010e92:	fb80 6404 	smull	r6, r4, r0, r4
	*out = x0 + x1;	out++;
 8010e96:	1950      	adds	r0, r2, r5
	*out = x0 - x1;
 8010e98:	1aaa      	subs	r2, r5, r2
 8010e9a:	920f      	str	r2, [sp, #60]	; 0x3c
	*out = x2 + x3;	out++;
 8010e9c:	eb0b 0203 	add.w	r2, fp, r3
	*out = x2 - x3;	out++;
 8010ea0:	eba3 0b0b 	sub.w	fp, r3, fp
	*out = x4 + x5;	out++;
 8010ea4:	eb01 0384 	add.w	r3, r1, r4, lsl #2
	*out = x0 + x1;	out++;
 8010ea8:	900b      	str	r0, [sp, #44]	; 0x2c
	*out = x4 + x5;	out++;
 8010eaa:	930d      	str	r3, [sp, #52]	; 0x34
	*out = x4 - x5;	out++;
 8010eac:	eba1 0384 	sub.w	r3, r1, r4, lsl #2
	*out = x2 + x3;	out++;
 8010eb0:	920c      	str	r2, [sp, #48]	; 0x30
	*out = x4 - x5;	out++;
 8010eb2:	930e      	str	r3, [sp, #56]	; 0x38
	if (btPrev == 2) {
 8010eb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	f47f acca 	bne.w	8010850 <xmp3fixpt_IMDCT+0x1170>
 8010ebc:	a94c      	add	r1, sp, #304	; 0x130
 8010ebe:	ee17 0a90 	vmov	r0, s15
 8010ec2:	f7fe f91b 	bl	800f0fc <WinPrevious.part.0>
		yLo = (xPrevWin[ 0+i] << 2);
 8010ec6:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8010ec8:	e52a      	b.n	8010920 <xmp3fixpt_IMDCT+0x1240>
 8010eca:	bf00      	nop
 8010ecc:	6ed9eba1 	.word	0x6ed9eba1
 8010ed0:	7ba3751d 	.word	0x7ba3751d
 8010ed4:	5a82799a 	.word	0x5a82799a
 8010ed8:	2120fb83 	.word	0x2120fb83
		xPrev += 9;
 8010edc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8010ede:	9b02      	ldr	r3, [sp, #8]
	for (   ; i < bc->nBlocksPrev; i++) {
 8010ee0:	9902      	ldr	r1, [sp, #8]
		xPrev += 9;
 8010ee2:	1a9b      	subs	r3, r3, r2
 8010ee4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010ee6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8010eea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	for (   ; i < bc->nBlocksPrev; i++) {
 8010eee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010ef0:	428a      	cmp	r2, r1
		xPrev += 9;
 8010ef2:	932b      	str	r3, [sp, #172]	; 0xac
	for (   ; i < bc->nBlocksPrev; i++) {
 8010ef4:	f340 8430 	ble.w	8011758 <xmp3fixpt_IMDCT+0x2078>
 8010ef8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010efa:	428b      	cmp	r3, r1
 8010efc:	f340 8401 	ble.w	8011702 <xmp3fixpt_IMDCT+0x2022>
 8010f00:	4293      	cmp	r3, r2
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010f02:	f8df 8874 	ldr.w	r8, [pc, #2164]	; 8011778 <xmp3fixpt_IMDCT+0x2098>
	__asm__ volatile (
 8010f06:	f04f 0500 	mov.w	r5, #0
 8010f0a:	bfa8      	it	ge
 8010f0c:	4613      	movge	r3, r2
 8010f0e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8010f10:	9331      	str	r3, [sp, #196]	; 0xc4
 8010f12:	3224      	adds	r2, #36	; 0x24
 8010f14:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8010f16:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010f1a:	f1a3 0e04 	sub.w	lr, r3, #4
 8010f1e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8010f22:	931d      	str	r3, [sp, #116]	; 0x74
 8010f24:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 8010f28:	931e      	str	r3, [sp, #120]	; 0x78
 8010f2a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8010f2e:	931f      	str	r3, [sp, #124]	; 0x7c
 8010f30:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8010f34:	9320      	str	r3, [sp, #128]	; 0x80
 8010f36:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8010f3a:	9321      	str	r3, [sp, #132]	; 0x84
 8010f3c:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8010f40:	9322      	str	r3, [sp, #136]	; 0x88
 8010f42:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8010f46:	9323      	str	r3, [sp, #140]	; 0x8c
 8010f48:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
 8010f4c:	9326      	str	r3, [sp, #152]	; 0x98
 8010f4e:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8010f52:	9327      	str	r3, [sp, #156]	; 0x9c
 8010f54:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 8010f58:	9328      	str	r3, [sp, #160]	; 0xa0
 8010f5a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8010f5e:	9329      	str	r3, [sp, #164]	; 0xa4
 8010f60:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8010f64:	932a      	str	r3, [sp, #168]	; 0xa8
 8010f66:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8010f6a:	932b      	str	r3, [sp, #172]	; 0xac
 8010f6c:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 8010f70:	932c      	str	r3, [sp, #176]	; 0xb0
 8010f72:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8010f76:	932d      	str	r3, [sp, #180]	; 0xb4
 8010f78:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8010f7c:	9101      	str	r1, [sp, #4]
 8010f7e:	932e      	str	r3, [sp, #184]	; 0xb8
 8010f80:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8010f84:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
 8010f88:	932f      	str	r3, [sp, #188]	; 0xbc
 8010f8a:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8010f8e:	9330      	str	r3, [sp, #192]	; 0xc0
 8010f90:	f852 3c24 	ldr.w	r3, [r2, #-36]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010f94:	4611      	mov	r1, r2
 8010f96:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8010f98:	4618      	mov	r0, r3
 8010f9a:	fb84 2000 	smull	r2, r0, r4, r0
 8010f9e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010fa0:	904c      	str	r0, [sp, #304]	; 0x130
 8010fa2:	fb84 2303 	smull	r2, r3, r4, r3
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010fa6:	935d      	str	r3, [sp, #372]	; 0x174
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010fa8:	f851 2c20 	ldr.w	r2, [r1, #-32]
 8010fac:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8010fae:	4613      	mov	r3, r2
 8010fb0:	fb84 6303 	smull	r6, r3, r4, r3
 8010fb4:	9c20      	ldr	r4, [sp, #128]	; 0x80
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010fb6:	934d      	str	r3, [sp, #308]	; 0x134
 8010fb8:	fb84 6202 	smull	r6, r2, r4, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010fbc:	925c      	str	r2, [sp, #368]	; 0x170
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010fbe:	f851 2c1c 	ldr.w	r2, [r1, #-28]
 8010fc2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8010fc4:	4616      	mov	r6, r2
 8010fc6:	fb84 7606 	smull	r7, r6, r4, r6
 8010fca:	9c22      	ldr	r4, [sp, #136]	; 0x88
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010fcc:	964e      	str	r6, [sp, #312]	; 0x138
 8010fce:	fb84 6202 	smull	r6, r2, r4, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010fd2:	925b      	str	r2, [sp, #364]	; 0x16c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010fd4:	f851 2c18 	ldr.w	r2, [r1, #-24]
 8010fd8:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8010fda:	4616      	mov	r6, r2
 8010fdc:	fb84 7606 	smull	r7, r6, r4, r6
 8010fe0:	9c26      	ldr	r4, [sp, #152]	; 0x98
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010fe2:	964f      	str	r6, [sp, #316]	; 0x13c
 8010fe4:	fb84 6202 	smull	r6, r2, r4, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010fe8:	925a      	str	r2, [sp, #360]	; 0x168
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8010fea:	f851 2c14 	ldr.w	r2, [r1, #-20]
 8010fee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010ff0:	4616      	mov	r6, r2
 8010ff2:	fb84 7606 	smull	r7, r6, r4, r6
 8010ff6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8010ff8:	9650      	str	r6, [sp, #320]	; 0x140
 8010ffa:	fb84 6202 	smull	r6, r2, r4, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8010ffe:	9259      	str	r2, [sp, #356]	; 0x164
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8011000:	f851 2c10 	ldr.w	r2, [r1, #-16]
 8011004:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8011006:	4616      	mov	r6, r2
 8011008:	fb84 7606 	smull	r7, r6, r4, r6
 801100c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
			*xpwLo++ = MULSHIFT32(wLo, x);
 801100e:	9651      	str	r6, [sp, #324]	; 0x144
 8011010:	fb84 6202 	smull	r6, r2, r4, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8011014:	9258      	str	r2, [sp, #352]	; 0x160
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8011016:	f851 2c0c 	ldr.w	r2, [r1, #-12]
 801101a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801101c:	4616      	mov	r6, r2
 801101e:	fb84 7606 	smull	r7, r6, r4, r6
 8011022:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8011024:	9652      	str	r6, [sp, #328]	; 0x148
 8011026:	fb84 6202 	smull	r6, r2, r4, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 801102a:	9257      	str	r2, [sp, #348]	; 0x15c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801102c:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8011030:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8011032:	4616      	mov	r6, r2
 8011034:	fb84 7606 	smull	r7, r6, r4, r6
 8011038:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
			*xpwLo++ = MULSHIFT32(wLo, x);
 801103a:	9653      	str	r6, [sp, #332]	; 0x14c
 801103c:	fb84 6202 	smull	r6, r2, r4, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8011040:	9256      	str	r2, [sp, #344]	; 0x158
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8011042:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8011046:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8011048:	4616      	mov	r6, r2
 801104a:	fb84 7606 	smull	r7, r6, r4, r6
 801104e:	9c30      	ldr	r4, [sp, #192]	; 0xc0
			*xpwLo++ = MULSHIFT32(wLo, x);
 8011050:	9654      	str	r6, [sp, #336]	; 0x150
 8011052:	fb84 6202 	smull	r6, r2, r4, r2
			*xpwHi-- = MULSHIFT32(wHi, x);
 8011056:	9255      	str	r2, [sp, #340]	; 0x154
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011058:	0082      	lsls	r2, r0, #2
	__asm__ volatile (
 801105a:	4628      	mov	r0, r5
			y[2*j+0][i] = xp;
 801105c:	f84e 2f04 	str.w	r2, [lr, #4]!
 8011060:	9203      	str	r2, [sp, #12]
 8011062:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 8011066:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 801106a:	9010      	str	r0, [sp, #64]	; 0x40
 801106c:	462c      	mov	r4, r5
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 801106e:	9802      	ldr	r0, [sp, #8]
 8011070:	f340 0200 	sbfx	r2, r0, #0, #1
 8011074:	f000 0001 	and.w	r0, r0, #1
 8011078:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 801107c:	4403      	add	r3, r0
			y[2*j+1][i] = xp;
 801107e:	f8ce 3080 	str.w	r3, [lr, #128]	; 0x80
 8011082:	9304      	str	r3, [sp, #16]
 8011084:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8011088:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
			xPrev[j] = 0;
 801108c:	f841 5c24 	str.w	r5, [r1, #-36]
 8011090:	46ac      	mov	ip, r5
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011092:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8011094:	462e      	mov	r6, r5
 8011096:	9411      	str	r4, [sp, #68]	; 0x44
 8011098:	009f      	lsls	r7, r3, #2
			y[2*j+0][i] = xp;
 801109a:	f8ce 7100 	str.w	r7, [lr, #256]	; 0x100
 801109e:	9705      	str	r7, [sp, #20]
 80110a0:	ea87 76e7 	eor.w	r6, r7, r7, asr #31
 80110a4:	eba6 76e7 	sub.w	r6, r6, r7, asr #31
			xp = xPrevWin[2*j+1] << 2;
 80110a8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80110aa:	462f      	mov	r7, r5
 80110ac:	9612      	str	r6, [sp, #72]	; 0x48
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 80110ae:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 80110b2:	18c6      	adds	r6, r0, r3
			y[2*j+1][i] = xp;
 80110b4:	f8ce 6180 	str.w	r6, [lr, #384]	; 0x180
 80110b8:	9606      	str	r6, [sp, #24]
 80110ba:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 80110be:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
			xPrev[j] = 0;
 80110c2:	f841 5c20 	str.w	r5, [r1, #-32]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 80110c6:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80110c8:	9714      	str	r7, [sp, #80]	; 0x50
 80110ca:	009f      	lsls	r7, r3, #2
 80110cc:	462b      	mov	r3, r5
			y[2*j+0][i] = xp;
 80110ce:	f8ce 7200 	str.w	r7, [lr, #512]	; 0x200
 80110d2:	9707      	str	r7, [sp, #28]
 80110d4:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 80110d8:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 80110dc:	9315      	str	r3, [sp, #84]	; 0x54
			xp = xPrevWin[2*j+1] << 2;
 80110de:	9b51      	ldr	r3, [sp, #324]	; 0x144
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 80110e0:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 80110e4:	18c4      	adds	r4, r0, r3
 80110e6:	462b      	mov	r3, r5
			y[2*j+1][i] = xp;
 80110e8:	f8ce 4280 	str.w	r4, [lr, #640]	; 0x280
 80110ec:	9408      	str	r4, [sp, #32]
 80110ee:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
 80110f2:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
			xPrev[j] = 0;
 80110f6:	f841 5c1c 	str.w	r5, [r1, #-28]
 80110fa:	462e      	mov	r6, r5
 80110fc:	9316      	str	r3, [sp, #88]	; 0x58
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 80110fe:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8011100:	009b      	lsls	r3, r3, #2
			y[2*j+0][i] = xp;
 8011102:	f8ce 3300 	str.w	r3, [lr, #768]	; 0x300
 8011106:	9309      	str	r3, [sp, #36]	; 0x24
 8011108:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 801110c:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8011110:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8011112:	9617      	str	r6, [sp, #92]	; 0x5c
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8011114:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 8011118:	18c7      	adds	r7, r0, r3
 801111a:	462b      	mov	r3, r5
			y[2*j+1][i] = xp;
 801111c:	f8ce 7380 	str.w	r7, [lr, #896]	; 0x380
 8011120:	970a      	str	r7, [sp, #40]	; 0x28
 8011122:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8011126:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
			xPrev[j] = 0;
 801112a:	f841 5c18 	str.w	r5, [r1, #-24]
 801112e:	462e      	mov	r6, r5
 8011130:	9318      	str	r3, [sp, #96]	; 0x60
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011132:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8011134:	009b      	lsls	r3, r3, #2
			y[2*j+0][i] = xp;
 8011136:	f8ce 3400 	str.w	r3, [lr, #1024]	; 0x400
 801113a:	930b      	str	r3, [sp, #44]	; 0x2c
 801113c:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 8011140:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8011144:	9b55      	ldr	r3, [sp, #340]	; 0x154
 8011146:	462f      	mov	r7, r5
 8011148:	9619      	str	r6, [sp, #100]	; 0x64
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 801114a:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 801114e:	18c6      	adds	r6, r0, r3
			y[2*j+1][i] = xp;
 8011150:	f8ce 6480 	str.w	r6, [lr, #1152]	; 0x480
 8011154:	960c      	str	r6, [sp, #48]	; 0x30
 8011156:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801115a:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
			xPrev[j] = 0;
 801115e:	f841 5c14 	str.w	r5, [r1, #-20]
 8011162:	462c      	mov	r4, r5
 8011164:	971a      	str	r7, [sp, #104]	; 0x68
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011166:	9f56      	ldr	r7, [sp, #344]	; 0x158
 8011168:	00bf      	lsls	r7, r7, #2
			y[2*j+0][i] = xp;
 801116a:	f8ce 7500 	str.w	r7, [lr, #1280]	; 0x500
 801116e:	ea87 74e7 	eor.w	r4, r7, r7, asr #31
 8011172:	eba4 74e7 	sub.w	r4, r4, r7, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8011176:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 8011178:	462e      	mov	r6, r5
 801117a:	941b      	str	r4, [sp, #108]	; 0x6c
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 801117c:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 8011180:	18c3      	adds	r3, r0, r3
			y[2*j+1][i] = xp;
 8011182:	f8ce 3580 	str.w	r3, [lr, #1408]	; 0x580
 8011186:	930d      	str	r3, [sp, #52]	; 0x34
 8011188:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 801118c:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
			xPrev[j] = 0;
 8011190:	f841 5c10 	str.w	r5, [r1, #-16]
 8011194:	46aa      	mov	sl, r5
 8011196:	961c      	str	r6, [sp, #112]	; 0x70
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011198:	9e58      	ldr	r6, [sp, #352]	; 0x160
 801119a:	00b4      	lsls	r4, r6, #2
			y[2*j+0][i] = xp;
 801119c:	f8ce 4600 	str.w	r4, [lr, #1536]	; 0x600
 80111a0:	940e      	str	r4, [sp, #56]	; 0x38
 80111a2:	ea84 7ae4 	eor.w	sl, r4, r4, asr #31
 80111a6:	ebaa 7ae4 	sub.w	sl, sl, r4, asr #31
			xp = xPrevWin[2*j+1] << 2;
 80111aa:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80111ac:	46a9      	mov	r9, r5
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 80111ae:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 80111b2:	18c6      	adds	r6, r0, r3
			y[2*j+1][i] = xp;
 80111b4:	f8ce 6680 	str.w	r6, [lr, #1664]	; 0x680
 80111b8:	960f      	str	r6, [sp, #60]	; 0x3c
 80111ba:	ea86 79e6 	eor.w	r9, r6, r6, asr #31
 80111be:	eba9 79e6 	sub.w	r9, r9, r6, asr #31
			xPrev[j] = 0;
 80111c2:	f841 5c0c 	str.w	r5, [r1, #-12]
 80111c6:	46a8      	mov	r8, r5
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 80111c8:	9e5a      	ldr	r6, [sp, #360]	; 0x168
 80111ca:	00b6      	lsls	r6, r6, #2
			y[2*j+0][i] = xp;
 80111cc:	f8ce 6700 	str.w	r6, [lr, #1792]	; 0x700
 80111d0:	ea86 78e6 	eor.w	r8, r6, r6, asr #31
 80111d4:	eba8 78e6 	sub.w	r8, r8, r6, asr #31
			xp = xPrevWin[2*j+1] << 2;
 80111d8:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 80111da:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 80111de:	eb00 0b03 	add.w	fp, r0, r3
			y[2*j+1][i] = xp;
 80111e2:	f8ce b780 	str.w	fp, [lr, #1920]	; 0x780
 80111e6:	ea8b 7ceb 	eor.w	ip, fp, fp, asr #31
 80111ea:	ebac 7ceb 	sub.w	ip, ip, fp, asr #31
			nonZero |= xp;
 80111ee:	9c07      	ldr	r4, [sp, #28]
 80111f0:	9b05      	ldr	r3, [sp, #20]
			xPrev[j] = 0;
 80111f2:	f841 5c08 	str.w	r5, [r1, #-8]
			nonZero |= xp;
 80111f6:	4323      	orrs	r3, r4
 80111f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80111fa:	4323      	orrs	r3, r4
 80111fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80111fe:	4323      	orrs	r3, r4
 8011200:	9c08      	ldr	r4, [sp, #32]
 8011202:	433b      	orrs	r3, r7
 8011204:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011206:	433b      	orrs	r3, r7
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011208:	9f5c      	ldr	r7, [sp, #368]	; 0x170
			nonZero |= xp;
 801120a:	4333      	orrs	r3, r6
 801120c:	9e03      	ldr	r6, [sp, #12]
 801120e:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011212:	00bf      	lsls	r7, r7, #2
			nonZero |= xp;
 8011214:	4333      	orrs	r3, r6
 8011216:	9e04      	ldr	r6, [sp, #16]
			y[2*j+0][i] = xp;
 8011218:	f8ce 7800 	str.w	r7, [lr, #2048]	; 0x800
			nonZero |= xp;
 801121c:	4333      	orrs	r3, r6
 801121e:	9e06      	ldr	r6, [sp, #24]
 8011220:	4333      	orrs	r3, r6
 8011222:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011224:	4323      	orrs	r3, r4
 8011226:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011228:	4323      	orrs	r3, r4
 801122a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801122c:	4333      	orrs	r3, r6
 801122e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011230:	4323      	orrs	r3, r4
 8011232:	4333      	orrs	r3, r6
 8011234:	462e      	mov	r6, r5
 8011236:	ea43 0b0b 	orr.w	fp, r3, fp
 801123a:	ea87 76e7 	eor.w	r6, r7, r7, asr #31
 801123e:	eba6 76e7 	sub.w	r6, r6, r7, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8011242:	9b5d      	ldr	r3, [sp, #372]	; 0x174
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8011244:	ea82 0383 	eor.w	r3, r2, r3, lsl #2
 8011248:	4418      	add	r0, r3
 801124a:	462b      	mov	r3, r5
			y[2*j+1][i] = xp;
 801124c:	f8ce 0880 	str.w	r0, [lr, #2176]	; 0x880
 8011250:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8011254:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
		if (nonZero)
 8011258:	ea5b 0200 	orrs.w	r2, fp, r0
			mOut |= FASTABS(xp);
 801125c:	9f14      	ldr	r7, [sp, #80]	; 0x50
			xPrev[j] = 0;
 801125e:	f841 5c04 	str.w	r5, [r1, #-4]
			mOut |= FASTABS(xp);
 8011262:	e9dd 0410 	ldrd	r0, r4, [sp, #64]	; 0x40
 8011266:	ea40 0204 	orr.w	r2, r0, r4
 801126a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801126c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801126e:	ea42 0200 	orr.w	r2, r2, r0
 8011272:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011274:	ea42 0207 	orr.w	r2, r2, r7
 8011278:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801127a:	ea42 0200 	orr.w	r2, r2, r0
 801127e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011280:	ea42 0200 	orr.w	r2, r2, r0
 8011284:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011286:	ea42 0200 	orr.w	r2, r2, r0
 801128a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801128c:	ea42 0200 	orr.w	r2, r2, r0
 8011290:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011292:	ea42 0200 	orr.w	r2, r2, r0
 8011296:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011298:	ea42 0207 	orr.w	r2, r2, r7
 801129c:	ea42 0204 	orr.w	r2, r2, r4
 80112a0:	ea42 0200 	orr.w	r2, r2, r0
 80112a4:	ea42 020a 	orr.w	r2, r2, sl
 80112a8:	ea42 0209 	orr.w	r2, r2, r9
 80112ac:	ea42 0208 	orr.w	r2, r2, r8
 80112b0:	ea42 020c 	orr.w	r2, r2, ip
 80112b4:	ea42 0206 	orr.w	r2, r2, r6
 80112b8:	ea42 0203 	orr.w	r2, r2, r3
 80112bc:	9b00      	ldr	r3, [sp, #0]
 80112be:	ea43 0302 	orr.w	r3, r3, r2
	for (   ; i < bc->nBlocksPrev; i++) {
 80112c2:	f101 0224 	add.w	r2, r1, #36	; 0x24
			mOut |= FASTABS(xp);
 80112c6:	9300      	str	r3, [sp, #0]
		if (nonZero)
 80112c8:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
 80112cc:	bf18      	it	ne
 80112ce:	4603      	movne	r3, r0
	for (   ; i < bc->nBlocksPrev; i++) {
 80112d0:	3001      	adds	r0, #1
		if (nonZero)
 80112d2:	9301      	str	r3, [sp, #4]
	for (   ; i < bc->nBlocksPrev; i++) {
 80112d4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80112d6:	9002      	str	r0, [sp, #8]
 80112d8:	4298      	cmp	r0, r3
 80112da:	f6ff ae59 	blt.w	8010f90 <xmp3fixpt_IMDCT+0x18b0>
 80112de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80112e0:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
 80112e4:	4283      	cmp	r3, r0
 80112e6:	912b      	str	r1, [sp, #172]	; 0xac
 80112e8:	f340 81d3 	ble.w	8011692 <xmp3fixpt_IMDCT+0x1fb2>
 80112ec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80112ee:	f04f 0900 	mov.w	r9, #0
 80112f2:	9a02      	ldr	r2, [sp, #8]
 80112f4:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 80112f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80112fa:	3624      	adds	r6, #36	; 0x24
 80112fc:	f1a3 0a04 	sub.w	sl, r3, #4
		wpLo = imdctWin[btPrev] + 18;
 8011300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011302:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8011306:	eb08 1b03 	add.w	fp, r8, r3, lsl #4
 801130a:	e147      	b.n	801159c <xmp3fixpt_IMDCT+0x1ebc>
 801130c:	a94c      	add	r1, sp, #304	; 0x130
 801130e:	f7fd fef5 	bl	800f0fc <WinPrevious.part.0>
			xp = xPrevWin[2*j+1] << 2;
 8011312:	e9dd 324c 	ldrd	r3, r2, [sp, #304]	; 0x130
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011316:	009b      	lsls	r3, r3, #2
 8011318:	46c8      	mov	r8, r9
			y[2*j+0][i] = xp;
 801131a:	f84a 3f04 	str.w	r3, [sl, #4]!
 801131e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011320:	ea83 78e3 	eor.w	r8, r3, r3, asr #31
 8011324:	eba8 78e3 	sub.w	r8, r8, r3, asr #31
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8011328:	9802      	ldr	r0, [sp, #8]
 801132a:	464c      	mov	r4, r9
 801132c:	f340 0300 	sbfx	r3, r0, #0, #1
 8011330:	ea83 0182 	eor.w	r1, r3, r2, lsl #2
 8011334:	f000 0201 	and.w	r2, r0, #1
 8011338:	1851      	adds	r1, r2, r1
			y[2*j+1][i] = xp;
 801133a:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
 801133e:	910e      	str	r1, [sp, #56]	; 0x38
 8011340:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8011344:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
			xPrev[j] = 0;
 8011348:	f846 9c24 	str.w	r9, [r6, #-36]
 801134c:	464d      	mov	r5, r9
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 801134e:	994e      	ldr	r1, [sp, #312]	; 0x138
 8011350:	9410      	str	r4, [sp, #64]	; 0x40
 8011352:	008c      	lsls	r4, r1, #2
			y[2*j+0][i] = xp;
 8011354:	f8ca 4100 	str.w	r4, [sl, #256]	; 0x100
 8011358:	940d      	str	r4, [sp, #52]	; 0x34
 801135a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801135e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8011362:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8011364:	46cc      	mov	ip, r9
 8011366:	9511      	str	r5, [sp, #68]	; 0x44
 8011368:	464f      	mov	r7, r9
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 801136a:	ea83 0181 	eor.w	r1, r3, r1, lsl #2
 801136e:	188d      	adds	r5, r1, r2
			y[2*j+1][i] = xp;
 8011370:	f8ca 5180 	str.w	r5, [sl, #384]	; 0x180
 8011374:	950c      	str	r5, [sp, #48]	; 0x30
 8011376:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801137a:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
			xPrev[j] = 0;
 801137e:	f846 9c20 	str.w	r9, [r6, #-32]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011382:	9950      	ldr	r1, [sp, #320]	; 0x140
 8011384:	9712      	str	r7, [sp, #72]	; 0x48
 8011386:	008f      	lsls	r7, r1, #2
 8011388:	4649      	mov	r1, r9
			y[2*j+0][i] = xp;
 801138a:	f8ca 7200 	str.w	r7, [sl, #512]	; 0x200
 801138e:	970b      	str	r7, [sp, #44]	; 0x2c
 8011390:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
 8011394:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
 8011398:	9114      	str	r1, [sp, #80]	; 0x50
 801139a:	4648      	mov	r0, r9
			xp = xPrevWin[2*j+1] << 2;
 801139c:	9951      	ldr	r1, [sp, #324]	; 0x144
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 801139e:	ea83 0181 	eor.w	r1, r3, r1, lsl #2
 80113a2:	188c      	adds	r4, r1, r2
			y[2*j+1][i] = xp;
 80113a4:	f8ca 4280 	str.w	r4, [sl, #640]	; 0x280
 80113a8:	940a      	str	r4, [sp, #40]	; 0x28
 80113aa:	ea84 70e4 	eor.w	r0, r4, r4, asr #31
 80113ae:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
			xPrev[j] = 0;
 80113b2:	f846 9c1c 	str.w	r9, [r6, #-28]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 80113b6:	9952      	ldr	r1, [sp, #328]	; 0x148
 80113b8:	9015      	str	r0, [sp, #84]	; 0x54
 80113ba:	4648      	mov	r0, r9
 80113bc:	0089      	lsls	r1, r1, #2
			y[2*j+0][i] = xp;
 80113be:	f8ca 1300 	str.w	r1, [sl, #768]	; 0x300
 80113c2:	9109      	str	r1, [sp, #36]	; 0x24
 80113c4:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 80113c8:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
			xp = xPrevWin[2*j+1] << 2;
 80113cc:	9953      	ldr	r1, [sp, #332]	; 0x14c
 80113ce:	464d      	mov	r5, r9
 80113d0:	9016      	str	r0, [sp, #88]	; 0x58
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 80113d2:	ea83 0181 	eor.w	r1, r3, r1, lsl #2
 80113d6:	1888      	adds	r0, r1, r2
			y[2*j+1][i] = xp;
 80113d8:	f8ca 0380 	str.w	r0, [sl, #896]	; 0x380
 80113dc:	9008      	str	r0, [sp, #32]
 80113de:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
 80113e2:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
			xPrev[j] = 0;
 80113e6:	f846 9c18 	str.w	r9, [r6, #-24]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 80113ea:	9954      	ldr	r1, [sp, #336]	; 0x150
 80113ec:	9517      	str	r5, [sp, #92]	; 0x5c
 80113ee:	008d      	lsls	r5, r1, #2
 80113f0:	4649      	mov	r1, r9
			y[2*j+0][i] = xp;
 80113f2:	f8ca 5400 	str.w	r5, [sl, #1024]	; 0x400
 80113f6:	9507      	str	r5, [sp, #28]
 80113f8:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 80113fc:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 8011400:	9118      	str	r1, [sp, #96]	; 0x60
 8011402:	4648      	mov	r0, r9
			xp = xPrevWin[2*j+1] << 2;
 8011404:	9955      	ldr	r1, [sp, #340]	; 0x154
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 8011406:	ea83 0181 	eor.w	r1, r3, r1, lsl #2
 801140a:	4411      	add	r1, r2
			y[2*j+1][i] = xp;
 801140c:	f8ca 1480 	str.w	r1, [sl, #1152]	; 0x480
 8011410:	9106      	str	r1, [sp, #24]
 8011412:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 8011416:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
			xPrev[j] = 0;
 801141a:	f846 9c14 	str.w	r9, [r6, #-20]
 801141e:	464d      	mov	r5, r9
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011420:	9956      	ldr	r1, [sp, #344]	; 0x158
 8011422:	9019      	str	r0, [sp, #100]	; 0x64
 8011424:	0088      	lsls	r0, r1, #2
			y[2*j+0][i] = xp;
 8011426:	f8ca 0500 	str.w	r0, [sl, #1280]	; 0x500
 801142a:	9005      	str	r0, [sp, #20]
 801142c:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
 8011430:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8011434:	9957      	ldr	r1, [sp, #348]	; 0x15c
 8011436:	464c      	mov	r4, r9
 8011438:	951a      	str	r5, [sp, #104]	; 0x68
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 801143a:	ea83 0181 	eor.w	r1, r3, r1, lsl #2
 801143e:	188d      	adds	r5, r1, r2
			y[2*j+1][i] = xp;
 8011440:	f8ca 5580 	str.w	r5, [sl, #1408]	; 0x580
 8011444:	9504      	str	r5, [sp, #16]
 8011446:	ea85 74e5 	eor.w	r4, r5, r5, asr #31
 801144a:	eba4 74e5 	sub.w	r4, r4, r5, asr #31
			xPrev[j] = 0;
 801144e:	f846 9c10 	str.w	r9, [r6, #-16]
 8011452:	4649      	mov	r1, r9
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011454:	9d58      	ldr	r5, [sp, #352]	; 0x160
 8011456:	941b      	str	r4, [sp, #108]	; 0x6c
 8011458:	00ad      	lsls	r5, r5, #2
			y[2*j+0][i] = xp;
 801145a:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 801145e:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 8011462:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
			xp = xPrevWin[2*j+1] << 2;
 8011466:	9859      	ldr	r0, [sp, #356]	; 0x164
 8011468:	911c      	str	r1, [sp, #112]	; 0x70
 801146a:	4649      	mov	r1, r9
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 801146c:	ea83 0080 	eor.w	r0, r3, r0, lsl #2
 8011470:	4410      	add	r0, r2
			y[2*j+1][i] = xp;
 8011472:	f8ca 0680 	str.w	r0, [sl, #1664]	; 0x680
 8011476:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 801147a:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
			xPrev[j] = 0;
 801147e:	f846 9c0c 	str.w	r9, [r6, #-12]
 8011482:	911d      	str	r1, [sp, #116]	; 0x74
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 8011484:	995a      	ldr	r1, [sp, #360]	; 0x168
 8011486:	008f      	lsls	r7, r1, #2
 8011488:	4649      	mov	r1, r9
			y[2*j+0][i] = xp;
 801148a:	f8ca 7700 	str.w	r7, [sl, #1792]	; 0x700
 801148e:	9703      	str	r7, [sp, #12]
 8011490:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
 8011494:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
 8011498:	911e      	str	r1, [sp, #120]	; 0x78
 801149a:	46ce      	mov	lr, r9
			xp = xPrevWin[2*j+1] << 2;
 801149c:	995b      	ldr	r1, [sp, #364]	; 0x16c
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 801149e:	ea83 0181 	eor.w	r1, r3, r1, lsl #2
 80114a2:	4411      	add	r1, r2
			y[2*j+1][i] = xp;
 80114a4:	f8ca 1780 	str.w	r1, [sl, #1920]	; 0x780
 80114a8:	ea81 7ee1 	eor.w	lr, r1, r1, asr #31
 80114ac:	ebae 7ee1 	sub.w	lr, lr, r1, asr #31
			xPrev[j] = 0;
 80114b0:	f846 9c08 	str.w	r9, [r6, #-8]
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 80114b4:	9c5c      	ldr	r4, [sp, #368]	; 0x170
 80114b6:	00a4      	lsls	r4, r4, #2
			y[2*j+0][i] = xp;
 80114b8:	f8ca 4800 	str.w	r4, [sl, #2048]	; 0x800
 80114bc:	ea84 7ce4 	eor.w	ip, r4, r4, asr #31
 80114c0:	ebac 7ce4 	sub.w	ip, ip, r4, asr #31
			xp = xPrevWin[2*j+1] << 2;
 80114c4:	9f5d      	ldr	r7, [sp, #372]	; 0x174
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 80114c6:	ea83 0387 	eor.w	r3, r3, r7, lsl #2
 80114ca:	441a      	add	r2, r3
 80114cc:	464b      	mov	r3, r9
			y[2*j+1][i] = xp;
 80114ce:	f8ca 2880 	str.w	r2, [sl, #2176]	; 0x880
 80114d2:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80114d6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
			nonZero |= xp;
 80114da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	for (   ; i < bc->nBlocksPrev; i++) {
 80114dc:	3624      	adds	r6, #36	; 0x24
 80114de:	931f      	str	r3, [sp, #124]	; 0x7c
			nonZero |= xp;
 80114e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114e2:	433b      	orrs	r3, r7
			mOut |= FASTABS(xp);
 80114e4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80114e6:	ea47 0808 	orr.w	r8, r7, r8
			nonZero |= xp;
 80114ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80114ec:	433b      	orrs	r3, r7
			mOut |= FASTABS(xp);
 80114ee:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80114f0:	ea48 0807 	orr.w	r8, r8, r7
			nonZero |= xp;
 80114f4:	9f07      	ldr	r7, [sp, #28]
 80114f6:	433b      	orrs	r3, r7
			mOut |= FASTABS(xp);
 80114f8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80114fa:	ea48 0807 	orr.w	r8, r8, r7
			nonZero |= xp;
 80114fe:	9f05      	ldr	r7, [sp, #20]
 8011500:	433b      	orrs	r3, r7
			mOut |= FASTABS(xp);
 8011502:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011504:	ea48 0807 	orr.w	r8, r8, r7
 8011508:	9f15      	ldr	r7, [sp, #84]	; 0x54
			nonZero |= xp;
 801150a:	432b      	orrs	r3, r5
 801150c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
			mOut |= FASTABS(xp);
 801150e:	ea48 0807 	orr.w	r8, r8, r7
			nonZero |= xp;
 8011512:	9f03      	ldr	r7, [sp, #12]
 8011514:	433b      	orrs	r3, r7
			mOut |= FASTABS(xp);
 8011516:	9f16      	ldr	r7, [sp, #88]	; 0x58
			nonZero |= xp;
 8011518:	4323      	orrs	r3, r4
			mOut |= FASTABS(xp);
 801151a:	ea48 0807 	orr.w	r8, r8, r7
 801151e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
			nonZero |= xp;
 8011520:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011522:	432b      	orrs	r3, r5
			mOut |= FASTABS(xp);
 8011524:	ea48 0807 	orr.w	r8, r8, r7
 8011528:	9f18      	ldr	r7, [sp, #96]	; 0x60
			nonZero |= xp;
 801152a:	4323      	orrs	r3, r4
 801152c:	9c08      	ldr	r4, [sp, #32]
			mOut |= FASTABS(xp);
 801152e:	ea48 0807 	orr.w	r8, r8, r7
 8011532:	9f19      	ldr	r7, [sp, #100]	; 0x64
			nonZero |= xp;
 8011534:	4323      	orrs	r3, r4
 8011536:	9c06      	ldr	r4, [sp, #24]
			mOut |= FASTABS(xp);
 8011538:	ea48 0807 	orr.w	r8, r8, r7
 801153c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
			nonZero |= xp;
 801153e:	4323      	orrs	r3, r4
 8011540:	9d04      	ldr	r5, [sp, #16]
			mOut |= FASTABS(xp);
 8011542:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8011544:	ea48 0807 	orr.w	r8, r8, r7
			nonZero |= xp;
 8011548:	432b      	orrs	r3, r5
			mOut |= FASTABS(xp);
 801154a:	ea48 0804 	orr.w	r8, r8, r4
 801154e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
			nonZero |= xp;
 8011550:	4303      	orrs	r3, r0
			mOut |= FASTABS(xp);
 8011552:	ea48 0804 	orr.w	r8, r8, r4
 8011556:	9c1d      	ldr	r4, [sp, #116]	; 0x74
			nonZero |= xp;
 8011558:	430b      	orrs	r3, r1
		if (nonZero)
 801155a:	990e      	ldr	r1, [sp, #56]	; 0x38
			mOut |= FASTABS(xp);
 801155c:	ea48 0804 	orr.w	r8, r8, r4
 8011560:	9c1e      	ldr	r4, [sp, #120]	; 0x78
			nonZero |= xp;
 8011562:	4313      	orrs	r3, r2
 8011564:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
			mOut |= FASTABS(xp);
 8011566:	ea48 0804 	orr.w	r8, r8, r4
			nonZero |= xp;
 801156a:	4313      	orrs	r3, r2
			mOut |= FASTABS(xp);
 801156c:	ea48 080e 	orr.w	r8, r8, lr
		if (nonZero)
 8011570:	430b      	orrs	r3, r1
			mOut |= FASTABS(xp);
 8011572:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011574:	ea48 080c 	orr.w	r8, r8, ip
 8011578:	ea48 0703 	orr.w	r7, r8, r3
 801157c:	9b00      	ldr	r3, [sp, #0]
 801157e:	ea43 0307 	orr.w	r3, r3, r7
 8011582:	9300      	str	r3, [sp, #0]
		if (nonZero)
 8011584:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
	for (   ; i < bc->nBlocksPrev; i++) {
 8011588:	9a24      	ldr	r2, [sp, #144]	; 0x90
		if (nonZero)
 801158a:	bf18      	it	ne
 801158c:	4603      	movne	r3, r0
			xPrev[j] = 0;
 801158e:	f846 9c28 	str.w	r9, [r6, #-40]
		if (nonZero)
 8011592:	9301      	str	r3, [sp, #4]
	for (   ; i < bc->nBlocksPrev; i++) {
 8011594:	1c43      	adds	r3, r0, #1
 8011596:	429a      	cmp	r2, r3
 8011598:	9302      	str	r3, [sp, #8]
 801159a:	dd79      	ble.n	8011690 <xmp3fixpt_IMDCT+0x1fb0>
	if (btPrev == 2) {
 801159c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801159e:	f1a6 0024 	sub.w	r0, r6, #36	; 0x24
 80115a2:	2b02      	cmp	r3, #2
 80115a4:	f43f aeb2 	beq.w	801130c <xmp3fixpt_IMDCT+0x1c2c>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80115a8:	f856 1c24 	ldr.w	r1, [r6, #-36]
 80115ac:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80115b0:	f8db 0048 	ldr.w	r0, [fp, #72]	; 0x48
 80115b4:	460b      	mov	r3, r1
 80115b6:	fb80 4303 	smull	r4, r3, r0, r3
			*xpwLo++ = MULSHIFT32(wLo, x);
 80115ba:	934c      	str	r3, [sp, #304]	; 0x130
 80115bc:	fb82 0101 	smull	r0, r1, r2, r1
			*xpwHi-- = MULSHIFT32(wHi, x);
 80115c0:	915d      	str	r1, [sp, #372]	; 0x174
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80115c2:	f856 4c20 	ldr.w	r4, [r6, #-32]
 80115c6:	f8db 1088 	ldr.w	r1, [fp, #136]	; 0x88
 80115ca:	f8db 004c 	ldr.w	r0, [fp, #76]	; 0x4c
 80115ce:	4622      	mov	r2, r4
 80115d0:	fb80 5202 	smull	r5, r2, r0, r2
			*xpwLo++ = MULSHIFT32(wLo, x);
 80115d4:	924d      	str	r2, [sp, #308]	; 0x134
 80115d6:	fb81 0404 	smull	r0, r4, r1, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80115da:	945c      	str	r4, [sp, #368]	; 0x170
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80115dc:	f856 4c1c 	ldr.w	r4, [r6, #-28]
 80115e0:	f8db 1084 	ldr.w	r1, [fp, #132]	; 0x84
 80115e4:	f8db 0050 	ldr.w	r0, [fp, #80]	; 0x50
 80115e8:	4625      	mov	r5, r4
 80115ea:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 80115ee:	954e      	str	r5, [sp, #312]	; 0x138
 80115f0:	fb81 0404 	smull	r0, r4, r1, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 80115f4:	945b      	str	r4, [sp, #364]	; 0x16c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 80115f6:	f856 4c18 	ldr.w	r4, [r6, #-24]
 80115fa:	f8db 1080 	ldr.w	r1, [fp, #128]	; 0x80
 80115fe:	f8db 0054 	ldr.w	r0, [fp, #84]	; 0x54
 8011602:	4625      	mov	r5, r4
 8011604:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8011608:	954f      	str	r5, [sp, #316]	; 0x13c
 801160a:	fb81 0404 	smull	r0, r4, r1, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 801160e:	945a      	str	r4, [sp, #360]	; 0x168
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8011610:	f856 4c14 	ldr.w	r4, [r6, #-20]
 8011614:	f8db 107c 	ldr.w	r1, [fp, #124]	; 0x7c
 8011618:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 801161c:	4625      	mov	r5, r4
 801161e:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8011622:	9550      	str	r5, [sp, #320]	; 0x140
 8011624:	fb81 0404 	smull	r0, r4, r1, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8011628:	9459      	str	r4, [sp, #356]	; 0x164
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801162a:	f856 4c10 	ldr.w	r4, [r6, #-16]
 801162e:	f8db 1078 	ldr.w	r1, [fp, #120]	; 0x78
 8011632:	f8db 005c 	ldr.w	r0, [fp, #92]	; 0x5c
 8011636:	4625      	mov	r5, r4
 8011638:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 801163c:	9551      	str	r5, [sp, #324]	; 0x144
 801163e:	fb81 0404 	smull	r0, r4, r1, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8011642:	9458      	str	r4, [sp, #352]	; 0x160
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8011644:	f856 4c0c 	ldr.w	r4, [r6, #-12]
 8011648:	f8db 1074 	ldr.w	r1, [fp, #116]	; 0x74
 801164c:	f8db 0060 	ldr.w	r0, [fp, #96]	; 0x60
 8011650:	4625      	mov	r5, r4
 8011652:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8011656:	9552      	str	r5, [sp, #328]	; 0x148
 8011658:	fb81 0404 	smull	r0, r4, r1, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 801165c:	9457      	str	r4, [sp, #348]	; 0x15c
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 801165e:	f856 4c08 	ldr.w	r4, [r6, #-8]
 8011662:	f8db 1070 	ldr.w	r1, [fp, #112]	; 0x70
 8011666:	f8db 0064 	ldr.w	r0, [fp, #100]	; 0x64
 801166a:	4625      	mov	r5, r4
 801166c:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8011670:	9553      	str	r5, [sp, #332]	; 0x14c
 8011672:	fb81 0404 	smull	r0, r4, r1, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 8011676:	9456      	str	r4, [sp, #344]	; 0x158
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8011678:	f856 4c04 	ldr.w	r4, [r6, #-4]
 801167c:	e9db 011a 	ldrd	r0, r1, [fp, #104]	; 0x68
 8011680:	4625      	mov	r5, r4
 8011682:	fb80 7505 	smull	r7, r5, r0, r5
			*xpwLo++ = MULSHIFT32(wLo, x);
 8011686:	9554      	str	r5, [sp, #336]	; 0x150
 8011688:	fb81 0404 	smull	r0, r4, r1, r4
			*xpwHi-- = MULSHIFT32(wHi, x);
 801168c:	9455      	str	r4, [sp, #340]	; 0x154
		for (i = 9; i > 0; i--) {
 801168e:	e642      	b.n	8011316 <xmp3fixpt_IMDCT+0x1c36>
 8011690:	4613      	mov	r3, r2
	for (   ; i < 32; i++) {
 8011692:	2b1f      	cmp	r3, #31
 8011694:	dc0f      	bgt.n	80116b6 <xmp3fixpt_IMDCT+0x1fd6>
 8011696:	4618      	mov	r0, r3
 8011698:	9b32      	ldr	r3, [sp, #200]	; 0xc8
			y[j][i] = 0;
 801169a:	2100      	movs	r1, #0
 801169c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	for (   ; i < bc->nBlocksPrev; i++) {
 80116a0:	2300      	movs	r3, #0
			y[j][i] = 0;
 80116a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (j = 0; j < 18; j++) 
 80116a6:	3320      	adds	r3, #32
 80116a8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80116ac:	d1f9      	bne.n	80116a2 <xmp3fixpt_IMDCT+0x1fc2>
	for (   ; i < 32; i++) {
 80116ae:	3001      	adds	r0, #1
 80116b0:	3204      	adds	r2, #4
 80116b2:	2820      	cmp	r0, #32
 80116b4:	d1f4      	bne.n	80116a0 <xmp3fixpt_IMDCT+0x1fc0>
	if (!x)
 80116b6:	9b00      	ldr	r3, [sp, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d03a      	beq.n	8011732 <xmp3fixpt_IMDCT+0x2052>
	while (!(x & 0x80000000)) {
 80116bc:	db55      	blt.n	801176a <xmp3fixpt_IMDCT+0x208a>
 80116be:	4619      	mov	r1, r3
	numZeros = 0;
 80116c0:	2300      	movs	r3, #0
	while (!(x & 0x80000000)) {
 80116c2:	0049      	lsls	r1, r1, #1
 80116c4:	461a      	mov	r2, r3
		numZeros++;
 80116c6:	f103 0301 	add.w	r3, r3, #1
	while (!(x & 0x80000000)) {
 80116ca:	d5fa      	bpl.n	80116c2 <xmp3fixpt_IMDCT+0x1fe2>
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 80116cc:	9c38      	ldr	r4, [sp, #224]	; 0xe0
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 80116ce:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80116d2:	440b      	add	r3, r1
 80116d4:	e9dd 0133 	ldrd	r0, r1, [sp, #204]	; 0xcc
 80116d8:	011b      	lsls	r3, r3, #4
 80116da:	4401      	add	r1, r0
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 80116dc:	9801      	ldr	r0, [sp, #4]
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 80116de:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80116e2:	9935      	ldr	r1, [sp, #212]	; 0xd4
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 80116e4:	f8c4 0b00 	str.w	r0, [r4, #2816]	; 0xb00
	mi->gb[ch] = bc.gbOut;

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 80116e8:	2000      	movs	r0, #0
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 80116ea:	4419      	add	r1, r3
 80116ec:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 80116ee:	9925      	ldr	r1, [sp, #148]	; 0x94
	mi->gb[ch] = bc.gbOut;
 80116f0:	f8c4 2b18 	str.w	r2, [r4, #2840]	; 0xb18
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 80116f4:	f8c4 1b10 	str.w	r1, [r4, #2832]	; 0xb10
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 80116f8:	f8c4 3b08 	str.w	r3, [r4, #2824]	; 0xb08
}
 80116fc:	b05f      	add	sp, #380	; 0x17c
 80116fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011702:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8011778 <xmp3fixpt_IMDCT+0x2098>
	for (   ; i < bc->nBlocksPrev; i++) {
 8011706:	9101      	str	r1, [sp, #4]
 8011708:	e5f0      	b.n	80112ec <xmp3fixpt_IMDCT+0x1c0c>
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 801170a:	f8dd b0ac 	ldr.w	fp, [sp, #172]	; 0xac
 801170e:	9301      	str	r3, [sp, #4]
 8011710:	f7ff b88a 	b.w	8010828 <xmp3fixpt_IMDCT+0x1148>
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 8011714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011716:	932c      	str	r3, [sp, #176]	; 0xb0
 8011718:	b16b      	cbz	r3, 8011736 <xmp3fixpt_IMDCT+0x2056>
		nBfly = bc.nBlocksLong - 1;
 801171a:	9825      	ldr	r0, [sp, #148]	; 0x94
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 801171c:	2112      	movs	r1, #18
 801171e:	2208      	movs	r2, #8
 8011720:	1e43      	subs	r3, r0, #1
		bc.nBlocksLong = blockCutoff;	
 8011722:	902c      	str	r0, [sp, #176]	; 0xb0
 8011724:	b21b      	sxth	r3, r3
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 8011726:	fb13 2201 	smlabb	r2, r3, r1, r2
 801172a:	4631      	mov	r1, r6
 801172c:	920e      	str	r2, [sp, #56]	; 0x38
		nBfly = bc.nBlocksLong - 1;
 801172e:	f7fe bb4e 	b.w	800fdce <xmp3fixpt_IMDCT+0x6ee>
 8011732:	221f      	movs	r2, #31
 8011734:	e7ca      	b.n	80116cc <xmp3fixpt_IMDCT+0x1fec>
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 8011736:	0213      	lsls	r3, r2, #8
 8011738:	930f      	str	r3, [sp, #60]	; 0x3c
 801173a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801173c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011740:	2208      	movs	r2, #8
 8011742:	9309      	str	r3, [sp, #36]	; 0x24
 8011744:	920e      	str	r2, [sp, #56]	; 0x38
 8011746:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8011748:	f7fe b909 	b.w	800f95e <xmp3fixpt_IMDCT+0x27e>
	for (   ; i < bc->nBlocksTotal; i++) {
 801174c:	9302      	str	r3, [sp, #8]
	for (   ; i < bc->nBlocksPrev; i++) {
 801174e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011750:	9902      	ldr	r1, [sp, #8]
 8011752:	428a      	cmp	r2, r1
 8011754:	f73f abd0 	bgt.w	8010ef8 <xmp3fixpt_IMDCT+0x1818>
 8011758:	460b      	mov	r3, r1
 801175a:	9124      	str	r1, [sp, #144]	; 0x90
 801175c:	9101      	str	r1, [sp, #4]
 801175e:	e798      	b.n	8011692 <xmp3fixpt_IMDCT+0x1fb2>
	mOut = 0;
 8011760:	2300      	movs	r3, #0
 8011762:	932c      	str	r3, [sp, #176]	; 0xb0
	for(i = 0; i < bc->nBlocksLong; i++) {
 8011764:	9300      	str	r3, [sp, #0]
 8011766:	f7fe bcd0 	b.w	801010a <xmp3fixpt_IMDCT+0xa2a>
 801176a:	f04f 32ff 	mov.w	r2, #4294967295
 801176e:	e7ad      	b.n	80116cc <xmp3fixpt_IMDCT+0x1fec>
		return -1;
 8011770:	f04f 30ff 	mov.w	r0, #4294967295
 8011774:	e7c2      	b.n	80116fc <xmp3fixpt_IMDCT+0x201c>
 8011776:	bf00      	nop
 8011778:	08023314 	.word	0x08023314

0801177c <xmp3fixpt_PolyphaseMono>:
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 *                (note max filter gain - see polyCoef[] comments)
 **************************************************************************************/
void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
{	
 801177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MC0M(1)
	MC0M(2)
	MC0M(3)
	MC0M(4)
	MC0M(5)
	MC0M(6)
 8011780:	6b53      	ldr	r3, [r2, #52]	; 0x34
{	
 8011782:	b087      	sub	sp, #28
	MC0M(7)
 8011784:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
	MC0M(6)
 8011786:	f1c3 0b00 	rsb	fp, r3, #0
}

//mw
static __inline Word64 MADD64(Word64 sum, int x, int y)
{
   return (sum + ((int64_t)x * y));
 801178a:	680b      	ldr	r3, [r1, #0]
	MC0M(7)
 801178c:	4267      	negs	r7, r4
 801178e:	6814      	ldr	r4, [r2, #0]
 8011790:	684d      	ldr	r5, [r1, #4]
 8011792:	fb83 8904 	smull	r8, r9, r3, r4
	MC0M(5)
 8011796:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8011798:	6894      	ldr	r4, [r2, #8]
 801179a:	f1c3 0a00 	rsb	sl, r3, #0
	MC0M(4)
 801179e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80117a0:	fbc5 8904 	smlal	r8, r9, r5, r4
 80117a4:	f118 7800 	adds.w	r8, r8, #33554432	; 0x2000000
 80117a8:	f1c3 0e00 	rsb	lr, r3, #0
	MC0M(3)
 80117ac:	69d3      	ldr	r3, [r2, #28]
 80117ae:	6916      	ldr	r6, [r2, #16]
 80117b0:	f149 0900 	adc.w	r9, r9, #0
 80117b4:	f1c3 0c00 	rsb	ip, r3, #0
	MC0M(2)
 80117b8:	6953      	ldr	r3, [r2, #20]
	MC0M(0)
 80117ba:	6855      	ldr	r5, [r2, #4]
	MC0M(2)
 80117bc:	425b      	negs	r3, r3
	MC0M(1)
 80117be:	68d4      	ldr	r4, [r2, #12]
	MC0M(0)
 80117c0:	426d      	negs	r5, r5
	MC0M(2)
 80117c2:	9300      	str	r3, [sp, #0]
	MC0M(1)
 80117c4:	4264      	negs	r4, r4
 80117c6:	688b      	ldr	r3, [r1, #8]
 80117c8:	fbc3 8906 	smlal	r8, r9, r3, r6
 80117cc:	6996      	ldr	r6, [r2, #24]
 80117ce:	68cb      	ldr	r3, [r1, #12]
 80117d0:	fbc3 8906 	smlal	r8, r9, r3, r6
 80117d4:	6a16      	ldr	r6, [r2, #32]
 80117d6:	690b      	ldr	r3, [r1, #16]
 80117d8:	fbc3 8906 	smlal	r8, r9, r3, r6
 80117dc:	6a96      	ldr	r6, [r2, #40]	; 0x28
 80117de:	694b      	ldr	r3, [r1, #20]
 80117e0:	fbc3 8906 	smlal	r8, r9, r3, r6
 80117e4:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80117e6:	698b      	ldr	r3, [r1, #24]
 80117e8:	fbc3 8906 	smlal	r8, r9, r3, r6
 80117ec:	69ce      	ldr	r6, [r1, #28]
 80117ee:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80117f0:	fbc3 8906 	smlal	r8, r9, r3, r6
 80117f4:	6dce      	ldr	r6, [r1, #92]	; 0x5c
 80117f6:	9b00      	ldr	r3, [sp, #0]
 80117f8:	fbc6 8905 	smlal	r8, r9, r6, r5
 80117fc:	6d8d      	ldr	r5, [r1, #88]	; 0x58
 80117fe:	fbc5 8904 	smlal	r8, r9, r5, r4
 8011802:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8011804:	464e      	mov	r6, r9
 8011806:	fbc4 8603 	smlal	r8, r6, r4, r3
 801180a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 801180c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 801180e:	fbc3 860c 	smlal	r8, r6, r3, ip
 8011812:	4643      	mov	r3, r8
 8011814:	fbc4 360e 	smlal	r3, r6, r4, lr
 8011818:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801181a:	6c4d      	ldr	r5, [r1, #68]	; 0x44
 801181c:	fbc4 360a 	smlal	r3, r6, r4, sl
 8011820:	4634      	mov	r4, r6
 8011822:	fbc5 340b 	smlal	r3, r4, r5, fp
 8011826:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 8011828:	fbc7 3405 	smlal	r3, r4, r7, r5
  return x << n;
}

static __inline Word64 SAR64(Word64 x, int n)
{
  return x >> n;
 801182c:	0d1b      	lsrs	r3, r3, #20
 801182e:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	if (sign != (x >> 15))
 8011832:	155c      	asrs	r4, r3, #21
 8011834:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 8011838:	f000 8129 	beq.w	8011a8e <xmp3fixpt_PolyphaseMono+0x312>
		x = sign ^ ((1 << 15) - 1);
 801183c:	17dd      	asrs	r5, r3, #31
 801183e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011842:	406b      	eors	r3, r5
	MC1M(2)
	MC1M(3)
	MC1M(4)
	MC1M(5)
	MC1M(6)
	MC1M(7)
 8011844:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	return (short)x;
 8011848:	8003      	strh	r3, [r0, #0]
   return (sum + ((int64_t)x * y));
 801184a:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 801184e:	6866      	ldr	r6, [r4, #4]
 8011850:	f8d2 5400 	ldr.w	r5, [r2, #1024]	; 0x400
 8011854:	fb83 3706 	smull	r3, r7, r3, r6
 8011858:	6826      	ldr	r6, [r4, #0]
 801185a:	fbc5 3706 	smlal	r3, r7, r5, r6
 801185e:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 8011862:	68a5      	ldr	r5, [r4, #8]
 8011864:	f147 0700 	adc.w	r7, r7, #0
 8011868:	f8d2 6408 	ldr.w	r6, [r2, #1032]	; 0x408
 801186c:	fbc6 3705 	smlal	r3, r7, r6, r5
 8011870:	68e5      	ldr	r5, [r4, #12]
 8011872:	f8d2 640c 	ldr.w	r6, [r2, #1036]	; 0x40c
 8011876:	fbc6 3705 	smlal	r3, r7, r6, r5
 801187a:	6925      	ldr	r5, [r4, #16]
 801187c:	f8d2 6410 	ldr.w	r6, [r2, #1040]	; 0x410
 8011880:	fbc6 3705 	smlal	r3, r7, r6, r5
 8011884:	6965      	ldr	r5, [r4, #20]
 8011886:	f8d2 6414 	ldr.w	r6, [r2, #1044]	; 0x414
 801188a:	fbc6 3705 	smlal	r3, r7, r6, r5
 801188e:	69a5      	ldr	r5, [r4, #24]
 8011890:	f8d2 6418 	ldr.w	r6, [r2, #1048]	; 0x418
 8011894:	fbc6 3705 	smlal	r3, r7, r6, r5
 8011898:	69e6      	ldr	r6, [r4, #28]
 801189a:	f8d2 541c 	ldr.w	r5, [r2, #1052]	; 0x41c
 801189e:	463c      	mov	r4, r7
 80118a0:	fbc5 3406 	smlal	r3, r4, r5, r6
  return x >> n;
 80118a4:	0d1b      	lsrs	r3, r3, #20
 80118a6:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	if (sign != (x >> 15))
 80118aa:	155c      	asrs	r4, r3, #21
	sign = x >> 31;
 80118ac:	17dd      	asrs	r5, r3, #31
	if (sign != (x >> 15))
 80118ae:	ebb4 7fe3 	cmp.w	r4, r3, asr #31
 80118b2:	f000 80ee 	beq.w	8011a92 <xmp3fixpt_PolyphaseMono+0x316>
		x = sign ^ ((1 << 15) - 1);
 80118b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80118ba:	406b      	eors	r3, r5
	return (short)x;
 80118bc:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 80118c0:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80118c4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80118c8:	460f      	mov	r7, r1
		x = sign ^ ((1 << 15) - 1);
 80118ca:	4686      	mov	lr, r0
	return (short)x;
 80118cc:	8403      	strh	r3, [r0, #32]
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm++;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 80118ce:	9205      	str	r2, [sp, #20]
		x = sign ^ ((1 << 15) - 1);
 80118d0:	9600      	str	r6, [sp, #0]
		MC2M(2)
		MC2M(3)
		MC2M(4)
		MC2M(5)
		MC2M(6)
		MC2M(7)
 80118d2:	f85c 1c04 	ldr.w	r1, [ip, #-4]
	for (i = 15; i > 0; i--) {
 80118d6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
		MC2M(0)
 80118da:	f85c 2c7c 	ldr.w	r2, [ip, #-124]
	for (i = 15; i > 0; i--) {
 80118de:	f507 7780 	add.w	r7, r7, #256	; 0x100
		MC2M(7)
 80118e2:	4249      	negs	r1, r1
		MC2M(0)
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	f85c bc80 	ldr.w	fp, [ip, #-128]
 80118ea:	f1c2 0a00 	rsb	sl, r2, #0
		MC2M(7)
 80118ee:	9101      	str	r1, [sp, #4]
		MC2M(4)
 80118f0:	f85c 1c5c 	ldr.w	r1, [ip, #-92]
   return (sum + ((int64_t)x * y));
 80118f4:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 80118f6:	4249      	negs	r1, r1
 80118f8:	687c      	ldr	r4, [r7, #4]
		MC2M(6)
 80118fa:	f85c 5c4c 	ldr.w	r5, [ip, #-76]
		MC2M(4)
 80118fe:	9102      	str	r1, [sp, #8]
		MC2M(3)
 8011900:	f85c 1c64 	ldr.w	r1, [ip, #-100]
		MC2M(6)
 8011904:	4268      	negs	r0, r5
		MC2M(5)
 8011906:	f85c 5c54 	ldr.w	r5, [ip, #-84]
		MC2M(3)
 801190a:	4249      	negs	r1, r1
		MC2M(5)
 801190c:	426d      	negs	r5, r5
		MC2M(3)
 801190e:	9103      	str	r1, [sp, #12]
		MC2M(2)
 8011910:	f85c 1c6c 	ldr.w	r1, [ip, #-108]
 8011914:	f1c1 0800 	rsb	r8, r1, #0
		MC2M(1)
 8011918:	f85c 1c74 	ldr.w	r1, [ip, #-116]
 801191c:	f1c1 0900 	rsb	r9, r1, #0
 8011920:	fb82 2103 	smull	r2, r1, r2, r3
 8011924:	fbc6 210b 	smlal	r2, r1, r6, fp
 8011928:	f85c 6c78 	ldr.w	r6, [ip, #-120]
 801192c:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8011930:	fb8b 3b03 	smull	r3, fp, fp, r3
 8011934:	f141 0100 	adc.w	r1, r1, #0
 8011938:	fbc6 3b04 	smlal	r3, fp, r6, r4
 801193c:	f85c 4c74 	ldr.w	r4, [ip, #-116]
 8011940:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 8011944:	687e      	ldr	r6, [r7, #4]
 8011946:	f14b 0b00 	adc.w	fp, fp, #0
 801194a:	fbc4 2106 	smlal	r2, r1, r4, r6
 801194e:	f85c 6c78 	ldr.w	r6, [ip, #-120]
 8011952:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8011954:	fbc4 2106 	smlal	r2, r1, r4, r6
 8011958:	f85c 4c6c 	ldr.w	r4, [ip, #-108]
 801195c:	68be      	ldr	r6, [r7, #8]
 801195e:	fbc4 2106 	smlal	r2, r1, r4, r6
 8011962:	f85c 6c70 	ldr.w	r6, [ip, #-112]
 8011966:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8011968:	fbc4 2106 	smlal	r2, r1, r4, r6
 801196c:	f85c 4c64 	ldr.w	r4, [ip, #-100]
 8011970:	68fe      	ldr	r6, [r7, #12]
 8011972:	fbc4 2106 	smlal	r2, r1, r4, r6
 8011976:	f85c 4c70 	ldr.w	r4, [ip, #-112]
 801197a:	68be      	ldr	r6, [r7, #8]
 801197c:	fbc4 3b06 	smlal	r3, fp, r4, r6
 8011980:	f85c 4c68 	ldr.w	r4, [ip, #-104]
 8011984:	68fe      	ldr	r6, [r7, #12]
 8011986:	fbc4 3b06 	smlal	r3, fp, r4, r6
 801198a:	f85c 6c68 	ldr.w	r6, [ip, #-104]
 801198e:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8011990:	fbc4 2106 	smlal	r2, r1, r4, r6
 8011994:	f85c 4c5c 	ldr.w	r4, [ip, #-92]
 8011998:	693e      	ldr	r6, [r7, #16]
 801199a:	fbc4 2106 	smlal	r2, r1, r4, r6
 801199e:	f85c 4c60 	ldr.w	r4, [ip, #-96]
 80119a2:	fbc4 3b06 	smlal	r3, fp, r4, r6
 80119a6:	f85c 6c60 	ldr.w	r6, [ip, #-96]
 80119aa:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80119ac:	fbc4 2106 	smlal	r2, r1, r4, r6
 80119b0:	f85c 4c54 	ldr.w	r4, [ip, #-84]
 80119b4:	697e      	ldr	r6, [r7, #20]
 80119b6:	fbc4 2106 	smlal	r2, r1, r4, r6
 80119ba:	f85c 4c58 	ldr.w	r4, [ip, #-88]
 80119be:	fbc4 3b06 	smlal	r3, fp, r4, r6
 80119c2:	f85c 6c58 	ldr.w	r6, [ip, #-88]
 80119c6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80119c8:	fbc4 2106 	smlal	r2, r1, r4, r6
 80119cc:	f85c 4c4c 	ldr.w	r4, [ip, #-76]
 80119d0:	69be      	ldr	r6, [r7, #24]
 80119d2:	fbc4 2106 	smlal	r2, r1, r4, r6
 80119d6:	f85c 4c50 	ldr.w	r4, [ip, #-80]
 80119da:	fbc4 3b06 	smlal	r3, fp, r4, r6
 80119de:	f85c 6c50 	ldr.w	r6, [ip, #-80]
 80119e2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80119e4:	fbc4 2106 	smlal	r2, r1, r4, r6
 80119e8:	f85c 4c44 	ldr.w	r4, [ip, #-68]
 80119ec:	69fe      	ldr	r6, [r7, #28]
 80119ee:	fbc4 2106 	smlal	r2, r1, r4, r6
 80119f2:	f85c 4c48 	ldr.w	r4, [ip, #-72]
 80119f6:	9204      	str	r2, [sp, #16]
 80119f8:	fbc4 3b06 	smlal	r3, fp, r4, r6
 80119fc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80119fe:	9a03      	ldr	r2, [sp, #12]
 8011a00:	fbca 3b04 	smlal	r3, fp, sl, r4
 8011a04:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8011a06:	fbc9 3b04 	smlal	r3, fp, r9, r4
 8011a0a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8011a0c:	fbc8 3b04 	smlal	r3, fp, r8, r4
 8011a10:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8011a12:	fbc2 3b04 	smlal	r3, fp, r2, r4
 8011a16:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8011a18:	9a02      	ldr	r2, [sp, #8]
 8011a1a:	fbc2 3b04 	smlal	r3, fp, r2, r4
 8011a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a20:	f85c 4c48 	ldr.w	r4, [ip, #-72]
 8011a24:	fbc5 3b02 	smlal	r3, fp, r5, r2
 8011a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a2a:	fbc0 3b02 	smlal	r3, fp, r0, r2
 8011a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a30:	9804      	ldr	r0, [sp, #16]
 8011a32:	fbc2 0104 	smlal	r0, r1, r2, r4
 8011a36:	4602      	mov	r2, r0
 8011a38:	9801      	ldr	r0, [sp, #4]
 8011a3a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
  return x >> n;
 8011a3c:	0d12      	lsrs	r2, r2, #20
   return (sum + ((int64_t)x * y));
 8011a3e:	fbc0 3b04 	smlal	r3, fp, r0, r4
  return x >> n;
 8011a42:	0d1b      	lsrs	r3, r3, #20
 8011a44:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8011a48:	ea43 330b 	orr.w	r3, r3, fp, lsl #12
	if (sign != (x >> 15))
 8011a4c:	1551      	asrs	r1, r2, #21
 8011a4e:	155d      	asrs	r5, r3, #21
	sign = x >> 31;
 8011a50:	17d8      	asrs	r0, r3, #31
	if (sign != (x >> 15))
 8011a52:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 8011a56:	f480 40ff 	eor.w	r0, r0, #32640	; 0x7f80
 8011a5a:	f080 007f 	eor.w	r0, r0, #127	; 0x7f
	x >>= fracBits;
 8011a5e:	bf08      	it	eq
 8011a60:	1198      	asreq	r0, r3, #6
	sign = x >> 31;
 8011a62:	17d3      	asrs	r3, r2, #31
	if (sign != (x >> 15))
 8011a64:	ebb1 7fe2 	cmp.w	r1, r2, asr #31
	return (short)x;
 8011a68:	f82e 0f02 	strh.w	r0, [lr, #2]!
		x = sign ^ ((1 << 15) - 1);
 8011a6c:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8011a70:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
	x >>= fracBits;
 8011a74:	bf08      	it	eq
 8011a76:	1193      	asreq	r3, r2, #6
	return (short)x;
 8011a78:	9a00      	ldr	r2, [sp, #0]
 8011a7a:	f822 3d02 	strh.w	r3, [r2, #-2]!
	for (i = 15; i > 0; i--) {
 8011a7e:	9b05      	ldr	r3, [sp, #20]
	return (short)x;
 8011a80:	9200      	str	r2, [sp, #0]
	for (i = 15; i > 0; i--) {
 8011a82:	4563      	cmp	r3, ip
 8011a84:	f47f af25 	bne.w	80118d2 <xmp3fixpt_PolyphaseMono+0x156>
		vb1 += 64;
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		pcm++;
	}
}
 8011a88:	b007      	add	sp, #28
 8011a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	x >>= fracBits;
 8011a8e:	119b      	asrs	r3, r3, #6
 8011a90:	e6d8      	b.n	8011844 <xmp3fixpt_PolyphaseMono+0xc8>
 8011a92:	119b      	asrs	r3, r3, #6
 8011a94:	e712      	b.n	80118bc <xmp3fixpt_PolyphaseMono+0x140>
 8011a96:	bf00      	nop

08011a98 <xmp3fixpt_PolyphaseStereo>:
 * Notes:       interleaves PCM samples LRLRLR...
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 **************************************************************************************/
void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
{
 8011a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a9c:	4615      	mov	r5, r2
 8011a9e:	460c      	mov	r4, r1
 8011aa0:	b08b      	sub	sp, #44	; 0x2c
 8011aa2:	4683      	mov	fp, r0
	MC0S(0)
	MC0S(1)
	MC0S(2)
	MC0S(3)
	MC0S(4)
	MC0S(5)
 8011aa4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   return (sum + ((int64_t)x * y));
 8011aa6:	692b      	ldr	r3, [r5, #16]
 8011aa8:	4249      	negs	r1, r1
	MC0S(6)
	MC0S(7)
 8011aaa:	6bef      	ldr	r7, [r5, #60]	; 0x3c
	MC0S(0)
 8011aac:	e9d2 8200 	ldrd	r8, r2, [r2]
	MC0S(5)
 8011ab0:	9103      	str	r1, [sp, #12]
	MC0S(7)
 8011ab2:	427f      	negs	r7, r7
 8011ab4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
	MC0S(0)
 8011ab8:	4252      	negs	r2, r2
 8011aba:	fb88 ce01 	smull	ip, lr, r8, r1
 8011abe:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8011ac2:	9201      	str	r2, [sp, #4]
	MC0S(1)
 8011ac4:	e9d5 0202 	ldrd	r0, r2, [r5, #8]
 8011ac8:	fbc1 ce00 	smlal	ip, lr, r1, r0
 8011acc:	f11c 7c00 	adds.w	ip, ip, #33554432	; 0x2000000
 8011ad0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8011ad4:	f1c2 0900 	rsb	r9, r2, #0
 8011ad8:	f14e 0e00 	adc.w	lr, lr, #0
	MC0S(2)
 8011adc:	696a      	ldr	r2, [r5, #20]
 8011ade:	fbc1 ce03 	smlal	ip, lr, r1, r3
 8011ae2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8011ae6:	69a9      	ldr	r1, [r5, #24]
 8011ae8:	f1c2 0a00 	rsb	sl, r2, #0
	MC0S(3)
 8011aec:	69ea      	ldr	r2, [r5, #28]
 8011aee:	fbc3 ce01 	smlal	ip, lr, r3, r1
 8011af2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8011af6:	6a29      	ldr	r1, [r5, #32]
 8011af8:	4256      	negs	r6, r2
	MC0S(4)
 8011afa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8011afc:	fbc3 ce01 	smlal	ip, lr, r3, r1
 8011b00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8011b04:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8011b06:	4252      	negs	r2, r2
	MC0S(3)
 8011b08:	9602      	str	r6, [sp, #8]
 8011b0a:	fbc3 ce01 	smlal	ip, lr, r3, r1
 8011b0e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8011b12:	6b29      	ldr	r1, [r5, #48]	; 0x30
	MC0S(6)
 8011b14:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8011b16:	fbc3 ce01 	smlal	ip, lr, r3, r1
 8011b1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011b1c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8011b20:	4276      	negs	r6, r6
 8011b22:	fbc3 ce01 	smlal	ip, lr, r3, r1
 8011b26:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8011b2a:	9901      	ldr	r1, [sp, #4]
 8011b2c:	fbc3 ce01 	smlal	ip, lr, r3, r1
 8011b30:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8011b34:	fbc3 ce09 	smlal	ip, lr, r3, r9
 8011b38:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8011b3c:	fbc3 ce0a 	smlal	ip, lr, r3, sl
 8011b40:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8011b44:	9902      	ldr	r1, [sp, #8]
 8011b46:	fbc3 ce01 	smlal	ip, lr, r3, r1
 8011b4a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8011b4e:	9903      	ldr	r1, [sp, #12]
 8011b50:	fbc3 ce02 	smlal	ip, lr, r3, r2
 8011b54:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8011b58:	fbc3 ce01 	smlal	ip, lr, r3, r1
 8011b5c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8011b60:	6861      	ldr	r1, [r4, #4]
 8011b62:	fbc3 ce06 	smlal	ip, lr, r3, r6
 8011b66:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8011b6a:	fbc7 ce03 	smlal	ip, lr, r7, r3
 8011b6e:	6823      	ldr	r3, [r4, #0]
 8011b70:	f8cd c010 	str.w	ip, [sp, #16]
 8011b74:	fb88 8303 	smull	r8, r3, r8, r3
 8011b78:	fbc1 8300 	smlal	r8, r3, r1, r0
 8011b7c:	f118 7000 	adds.w	r0, r8, #33554432	; 0x2000000
 8011b80:	6929      	ldr	r1, [r5, #16]
 8011b82:	f143 0c00 	adc.w	ip, r3, #0
 8011b86:	68a3      	ldr	r3, [r4, #8]
 8011b88:	fbc3 0c01 	smlal	r0, ip, r3, r1
 8011b8c:	68e3      	ldr	r3, [r4, #12]
 8011b8e:	69a9      	ldr	r1, [r5, #24]
 8011b90:	fbc3 0c01 	smlal	r0, ip, r3, r1
 8011b94:	6923      	ldr	r3, [r4, #16]
 8011b96:	6a29      	ldr	r1, [r5, #32]
 8011b98:	fbc3 0c01 	smlal	r0, ip, r3, r1
 8011b9c:	6963      	ldr	r3, [r4, #20]
 8011b9e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8011ba0:	fbc3 0c01 	smlal	r0, ip, r3, r1
 8011ba4:	69a3      	ldr	r3, [r4, #24]
 8011ba6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8011ba8:	fbc3 0c01 	smlal	r0, ip, r3, r1
 8011bac:	69e3      	ldr	r3, [r4, #28]
 8011bae:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8011bb0:	fbc1 0c03 	smlal	r0, ip, r1, r3
 8011bb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011bb6:	9901      	ldr	r1, [sp, #4]
 8011bb8:	fbc3 0c01 	smlal	r0, ip, r3, r1
 8011bbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011bbe:	9902      	ldr	r1, [sp, #8]
 8011bc0:	fbc3 0c09 	smlal	r0, ip, r3, r9
 8011bc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011bc6:	fbc3 0c0a 	smlal	r0, ip, r3, sl
 8011bca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011bcc:	fbc3 0c01 	smlal	r0, ip, r3, r1
 8011bd0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011bd2:	fbc3 0c02 	smlal	r0, ip, r3, r2
 8011bd6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011bd8:	9a03      	ldr	r2, [sp, #12]
 8011bda:	fbc3 0c02 	smlal	r0, ip, r3, r2
 8011bde:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011be0:	4603      	mov	r3, r0
 8011be2:	4660      	mov	r0, ip
 8011be4:	fbc2 3006 	smlal	r3, r0, r2, r6
 8011be8:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8011bea:	fbc7 3006 	smlal	r3, r0, r7, r6
  return x >> n;
 8011bee:	0d1b      	lsrs	r3, r3, #20
 8011bf0:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
	if (sign != (x >> 15))
 8011bf4:	1558      	asrs	r0, r3, #21
 8011bf6:	ebb0 7fe3 	cmp.w	r0, r3, asr #31
 8011bfa:	f000 826a 	beq.w	80120d2 <xmp3fixpt_PolyphaseStereo+0x63a>
		x = sign ^ ((1 << 15) - 1);
 8011bfe:	17de      	asrs	r6, r3, #31
 8011c00:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011c04:	4073      	eors	r3, r6
	return (short)x;
 8011c06:	f8ab 3000 	strh.w	r3, [fp]
 8011c0a:	9b04      	ldr	r3, [sp, #16]
 8011c0c:	0d1a      	lsrs	r2, r3, #20
 8011c0e:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
	if (sign != (x >> 15))
 8011c12:	1553      	asrs	r3, r2, #21
	sign = x >> 31;
 8011c14:	17d1      	asrs	r1, r2, #31
	if (sign != (x >> 15))
 8011c16:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
 8011c1a:	f000 8261 	beq.w	80120e0 <xmp3fixpt_PolyphaseStereo+0x648>
		x = sign ^ ((1 << 15) - 1);
 8011c1e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011c22:	404b      	eors	r3, r1
	MC1S(2)
	MC1S(3)
	MC1S(4)
	MC1S(5)
	MC1S(6)
	MC1S(7)
 8011c24:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
	MC1S(1)
 8011c28:	f8d5 2404 	ldr.w	r2, [r5, #1028]	; 0x404
	MC1S(0)
 8011c2c:	f8d5 1400 	ldr.w	r1, [r5, #1024]	; 0x400
	return (short)x;
 8011c30:	f8ab 3002 	strh.w	r3, [fp, #2]
	MC1S(3)
 8011c34:	f8d5 340c 	ldr.w	r3, [r5, #1036]	; 0x40c
   return (sum + ((int64_t)x * y));
 8011c38:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8011c3c:	9302      	str	r3, [sp, #8]
 8011c3e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8011c42:	6807      	ldr	r7, [r0, #0]
 8011c44:	fb82 e303 	smull	lr, r3, r2, r3
	MC1S(2)
 8011c48:	f8d5 c408 	ldr.w	ip, [r5, #1032]	; 0x408
	MC1S(7)
 8011c4c:	f8d5 841c 	ldr.w	r8, [r5, #1052]	; 0x41c
 8011c50:	fbc1 e306 	smlal	lr, r3, r1, r6
 8011c54:	6846      	ldr	r6, [r0, #4]
 8011c56:	fb82 9a06 	smull	r9, sl, r2, r6
 8011c5a:	f11e 7200 	adds.w	r2, lr, #33554432	; 0x2000000
 8011c5e:	6886      	ldr	r6, [r0, #8]
 8011c60:	fbc1 9a07 	smlal	r9, sl, r1, r7
 8011c64:	f143 0300 	adc.w	r3, r3, #0
 8011c68:	f119 7900 	adds.w	r9, r9, #33554432	; 0x2000000
 8011c6c:	9902      	ldr	r1, [sp, #8]
	MC1S(4)
 8011c6e:	f8d5 7410 	ldr.w	r7, [r5, #1040]	; 0x410
 8011c72:	f14a 0a00 	adc.w	sl, sl, #0
	MC1S(5)
 8011c76:	f8d5 e414 	ldr.w	lr, [r5, #1044]	; 0x414
 8011c7a:	9303      	str	r3, [sp, #12]
 8011c7c:	fbcc 9a06 	smlal	r9, sl, ip, r6
 8011c80:	68c6      	ldr	r6, [r0, #12]
	MC1S(6)
 8011c82:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
 8011c86:	fbc1 9a06 	smlal	r9, sl, r1, r6
 8011c8a:	6906      	ldr	r6, [r0, #16]
 8011c8c:	9301      	str	r3, [sp, #4]
 8011c8e:	fbc7 9a06 	smlal	r9, sl, r7, r6
 8011c92:	6946      	ldr	r6, [r0, #20]
 8011c94:	fbce 9a06 	smlal	r9, sl, lr, r6
 8011c98:	6986      	ldr	r6, [r0, #24]
 8011c9a:	fbc3 9a06 	smlal	r9, sl, r3, r6
 8011c9e:	69c6      	ldr	r6, [r0, #28]
 8011ca0:	9b03      	ldr	r3, [sp, #12]
 8011ca2:	fbc8 9a06 	smlal	r9, sl, r8, r6
 8011ca6:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
  return x >> n;
 8011caa:	ea4f 5919 	mov.w	r9, r9, lsr #20
   return (sum + ((int64_t)x * y));
 8011cae:	fbcc 2306 	smlal	r2, r3, ip, r6
 8011cb2:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
  return x >> n;
 8011cb6:	ea49 390a 	orr.w	r9, r9, sl, lsl #12
   return (sum + ((int64_t)x * y));
 8011cba:	fbc1 2306 	smlal	r2, r3, r1, r6
 8011cbe:	f8d0 6090 	ldr.w	r6, [r0, #144]	; 0x90
 8011cc2:	4694      	mov	ip, r2
 8011cc4:	9901      	ldr	r1, [sp, #4]
 8011cc6:	fbc7 c306 	smlal	ip, r3, r7, r6
 8011cca:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
 8011cce:	461a      	mov	r2, r3
 8011cd0:	4663      	mov	r3, ip
 8011cd2:	fbce 3206 	smlal	r3, r2, lr, r6
 8011cd6:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
 8011cda:	fbc1 3206 	smlal	r3, r2, r1, r6
 8011cde:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
	sign = x >> 31;
 8011ce2:	ea4f 70e9 	mov.w	r0, r9, asr #31
 8011ce6:	fbc8 3201 	smlal	r3, r2, r8, r1
	if (sign != (x >> 15))
 8011cea:	ea4f 5169 	mov.w	r1, r9, asr #21
 8011cee:	ebb1 7fe9 	cmp.w	r1, r9, asr #31
 8011cf2:	f000 81f2 	beq.w	80120da <xmp3fixpt_PolyphaseStereo+0x642>
		x = sign ^ ((1 << 15) - 1);
 8011cf6:	f647 79ff 	movw	r9, #32767	; 0x7fff
 8011cfa:	ea80 0909 	eor.w	r9, r0, r9
  return x >> n;
 8011cfe:	0d1b      	lsrs	r3, r3, #20
	return (short)x;
 8011d00:	f8ab 9040 	strh.w	r9, [fp, #64]	; 0x40
 8011d04:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	if (sign != (x >> 15))
 8011d08:	155a      	asrs	r2, r3, #21
	sign = x >> 31;
 8011d0a:	17d9      	asrs	r1, r3, #31
	if (sign != (x >> 15))
 8011d0c:	ebb2 7fe3 	cmp.w	r2, r3, asr #31
 8011d10:	f000 81e1 	beq.w	80120d6 <xmp3fixpt_PolyphaseStereo+0x63e>
		x = sign ^ ((1 << 15) - 1);
 8011d14:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011d18:	404b      	eors	r3, r1
	return (short)x;
 8011d1a:	f8ab 3042 	strh.w	r3, [fp, #66]	; 0x42
 8011d1e:	f505 6388 	add.w	r3, r5, #1088	; 0x440
 8011d22:	f10b 0808 	add.w	r8, fp, #8
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm += 2;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 8011d26:	46a6      	mov	lr, r4
 8011d28:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8011d2c:	9309      	str	r3, [sp, #36]	; 0x24
		x = sign ^ ((1 << 15) - 1);
 8011d2e:	f8cd b004 	str.w	fp, [sp, #4]
 8011d32:	e03e      	b.n	8011db2 <xmp3fixpt_PolyphaseStereo+0x31a>
 8011d34:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011d38:	ea8c 0101 	eor.w	r1, ip, r1
 8011d3c:	0d12      	lsrs	r2, r2, #20
	return (short)x;
 8011d3e:	f828 1c04 	strh.w	r1, [r8, #-4]
 8011d42:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
	if (sign != (x >> 15))
 8011d46:	1556      	asrs	r6, r2, #21
	sign = x >> 31;
 8011d48:	17d1      	asrs	r1, r2, #31
	if (sign != (x >> 15))
 8011d4a:	ebb6 7fe2 	cmp.w	r6, r2, asr #31
 8011d4e:	f000 81bb 	beq.w	80120c8 <xmp3fixpt_PolyphaseStereo+0x630>
		x = sign ^ ((1 << 15) - 1);
 8011d52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011d56:	404a      	eors	r2, r1
 8011d58:	9907      	ldr	r1, [sp, #28]
	return (short)x;
 8011d5a:	f828 2c02 	strh.w	r2, [r8, #-2]
 8011d5e:	0d0e      	lsrs	r6, r1, #20
 8011d60:	9a08      	ldr	r2, [sp, #32]
 8011d62:	ea46 3602 	orr.w	r6, r6, r2, lsl #12
	if (sign != (x >> 15))
 8011d66:	1571      	asrs	r1, r6, #21
	sign = x >> 31;
 8011d68:	17f2      	asrs	r2, r6, #31
	if (sign != (x >> 15))
 8011d6a:	ebb1 7fe6 	cmp.w	r1, r6, asr #31
 8011d6e:	f000 81a9 	beq.w	80120c4 <xmp3fixpt_PolyphaseStereo+0x62c>
		x = sign ^ ((1 << 15) - 1);
 8011d72:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8011d76:	4056      	eors	r6, r2
 8011d78:	0d1b      	lsrs	r3, r3, #20
	return (short)x;
 8011d7a:	9a01      	ldr	r2, [sp, #4]
 8011d7c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8011d80:	f8a2 607c 	strh.w	r6, [r2, #124]	; 0x7c
	if (sign != (x >> 15))
 8011d84:	1559      	asrs	r1, r3, #21
	sign = x >> 31;
 8011d86:	17da      	asrs	r2, r3, #31
	if (sign != (x >> 15))
 8011d88:	ebb1 7fe3 	cmp.w	r1, r3, asr #31
 8011d8c:	f000 8198 	beq.w	80120c0 <xmp3fixpt_PolyphaseStereo+0x628>
		x = sign ^ ((1 << 15) - 1);
 8011d90:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011d94:	4053      	eors	r3, r2
	return (short)x;
 8011d96:	9a01      	ldr	r2, [sp, #4]
	for (i = 15; i > 0; i--) {
 8011d98:	3040      	adds	r0, #64	; 0x40
 8011d9a:	f108 0804 	add.w	r8, r8, #4
 8011d9e:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
	return (short)x;
 8011da2:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	for (i = 15; i > 0; i--) {
 8011da6:	1f13      	subs	r3, r2, #4
 8011da8:	9301      	str	r3, [sp, #4]
 8011daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dac:	4283      	cmp	r3, r0
 8011dae:	f000 818d 	beq.w	80120cc <xmp3fixpt_PolyphaseStereo+0x634>
		sum1L = sum2L = rndVal;
		sum1R = sum2R = rndVal;

		MC2S(0)
		MC2S(1)
 8011db2:	f850 6c34 	ldr.w	r6, [r0, #-52]
		MC2S(0)
 8011db6:	f850 4c3c 	ldr.w	r4, [r0, #-60]
		MC2S(1)
 8011dba:	f1c6 0a00 	rsb	sl, r6, #0
		MC2S(2)
 8011dbe:	f850 6c2c 	ldr.w	r6, [r0, #-44]
		MC2S(0)
 8011dc2:	4263      	negs	r3, r4
 8011dc4:	f8de b100 	ldr.w	fp, [lr, #256]	; 0x100
		MC2S(2)
 8011dc8:	f1c6 0900 	rsb	r9, r6, #0
		MC2S(3)
 8011dcc:	f850 6c24 	ldr.w	r6, [r0, #-36]
		MC2S(0)
 8011dd0:	9306      	str	r3, [sp, #24]
		MC2S(3)
 8011dd2:	f1c6 0c00 	rsb	ip, r6, #0
		MC2S(4)
		MC2S(5)
 8011dd6:	f850 3c14 	ldr.w	r3, [r0, #-20]
		MC2S(4)
 8011dda:	f850 6c1c 	ldr.w	r6, [r0, #-28]
		MC2S(5)
 8011dde:	425b      	negs	r3, r3
		MC2S(0)
 8011de0:	f850 1c40 	ldr.w	r1, [r0, #-64]
		MC2S(4)
 8011de4:	4276      	negs	r6, r6
   return (sum + ((int64_t)x * y));
 8011de6:	f8de 7104 	ldr.w	r7, [lr, #260]	; 0x104
		MC2S(5)
 8011dea:	9304      	str	r3, [sp, #16]
		MC2S(4)
 8011dec:	9605      	str	r6, [sp, #20]
		MC2S(6)
		MC2S(7)
 8011dee:	f850 3c04 	ldr.w	r3, [r0, #-4]
		MC2S(6)
 8011df2:	f850 6c0c 	ldr.w	r6, [r0, #-12]
		MC2S(7)
 8011df6:	425b      	negs	r3, r3
		MC2S(0)
 8011df8:	f8de 2180 	ldr.w	r2, [lr, #384]	; 0x180
		MC2S(6)
 8011dfc:	4276      	negs	r6, r6
		MC2S(7)
 8011dfe:	9302      	str	r3, [sp, #8]
		MC2S(6)
 8011e00:	9603      	str	r6, [sp, #12]
 8011e02:	f8de 315c 	ldr.w	r3, [lr, #348]	; 0x15c
 8011e06:	fb84 650b 	smull	r6, r5, r4, fp
 8011e0a:	fbc3 6501 	smlal	r6, r5, r3, r1
 8011e0e:	f116 7600 	adds.w	r6, r6, #33554432	; 0x2000000
 8011e12:	f850 3c34 	ldr.w	r3, [r0, #-52]
 8011e16:	f145 0500 	adc.w	r5, r5, #0
 8011e1a:	fbc3 6507 	smlal	r6, r5, r3, r7
 8011e1e:	f8de 7158 	ldr.w	r7, [lr, #344]	; 0x158
 8011e22:	f850 3c38 	ldr.w	r3, [r0, #-56]
 8011e26:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e2a:	f850 7c2c 	ldr.w	r7, [r0, #-44]
 8011e2e:	f8de 3108 	ldr.w	r3, [lr, #264]	; 0x108
 8011e32:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e36:	f8de 7154 	ldr.w	r7, [lr, #340]	; 0x154
 8011e3a:	f850 3c30 	ldr.w	r3, [r0, #-48]
 8011e3e:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e42:	f850 7c24 	ldr.w	r7, [r0, #-36]
 8011e46:	f8de 310c 	ldr.w	r3, [lr, #268]	; 0x10c
 8011e4a:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e4e:	f8de 7150 	ldr.w	r7, [lr, #336]	; 0x150
 8011e52:	f850 3c28 	ldr.w	r3, [r0, #-40]
 8011e56:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e5a:	f850 7c1c 	ldr.w	r7, [r0, #-28]
 8011e5e:	f8de 3110 	ldr.w	r3, [lr, #272]	; 0x110
 8011e62:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e66:	f8de 714c 	ldr.w	r7, [lr, #332]	; 0x14c
 8011e6a:	f850 3c20 	ldr.w	r3, [r0, #-32]
 8011e6e:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e72:	f850 7c14 	ldr.w	r7, [r0, #-20]
 8011e76:	f8de 3114 	ldr.w	r3, [lr, #276]	; 0x114
 8011e7a:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e7e:	f8de 7148 	ldr.w	r7, [lr, #328]	; 0x148
 8011e82:	f850 3c18 	ldr.w	r3, [r0, #-24]
 8011e86:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e8a:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 8011e8e:	f8de 3118 	ldr.w	r3, [lr, #280]	; 0x118
 8011e92:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011e96:	f8de 7144 	ldr.w	r7, [lr, #324]	; 0x144
 8011e9a:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8011e9e:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011ea2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8011ea6:	f8de 311c 	ldr.w	r3, [lr, #284]	; 0x11c
 8011eaa:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011eae:	f8de 7140 	ldr.w	r7, [lr, #320]	; 0x140
 8011eb2:	f850 3c08 	ldr.w	r3, [r0, #-8]
 8011eb6:	fbc7 6503 	smlal	r6, r5, r7, r3
 8011eba:	f8de 71dc 	ldr.w	r7, [lr, #476]	; 0x1dc
 8011ebe:	fb82 3404 	smull	r3, r4, r2, r4
 8011ec2:	9508      	str	r5, [sp, #32]
 8011ec4:	fbc7 3401 	smlal	r3, r4, r7, r1
 8011ec8:	f8de 5104 	ldr.w	r5, [lr, #260]	; 0x104
 8011ecc:	f850 7c38 	ldr.w	r7, [r0, #-56]
 8011ed0:	9607      	str	r6, [sp, #28]
 8011ed2:	fb82 2601 	smull	r2, r6, r2, r1
 8011ed6:	fb81 1b0b 	smull	r1, fp, r1, fp
 8011eda:	fbc7 1b05 	smlal	r1, fp, r7, r5
 8011ede:	f8de 7184 	ldr.w	r7, [lr, #388]	; 0x184
 8011ee2:	f850 5c38 	ldr.w	r5, [r0, #-56]
 8011ee6:	fbc7 2605 	smlal	r2, r6, r7, r5
 8011eea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8011eee:	f850 5c34 	ldr.w	r5, [r0, #-52]
 8011ef2:	f146 0600 	adc.w	r6, r6, #0
 8011ef6:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 8011efa:	f144 0400 	adc.w	r4, r4, #0
 8011efe:	f111 7100 	adds.w	r1, r1, #33554432	; 0x2000000
 8011f02:	fbc7 3405 	smlal	r3, r4, r7, r5
 8011f06:	f8de 71d8 	ldr.w	r7, [lr, #472]	; 0x1d8
 8011f0a:	f850 5c38 	ldr.w	r5, [r0, #-56]
 8011f0e:	f14b 0b00 	adc.w	fp, fp, #0
 8011f12:	fbc7 3405 	smlal	r3, r4, r7, r5
 8011f16:	f8de 7188 	ldr.w	r7, [lr, #392]	; 0x188
 8011f1a:	f850 5c2c 	ldr.w	r5, [r0, #-44]
 8011f1e:	fbc7 3405 	smlal	r3, r4, r7, r5
 8011f22:	f850 5c30 	ldr.w	r5, [r0, #-48]
 8011f26:	fbc7 2605 	smlal	r2, r6, r7, r5
 8011f2a:	f8de 718c 	ldr.w	r7, [lr, #396]	; 0x18c
 8011f2e:	f850 5c28 	ldr.w	r5, [r0, #-40]
 8011f32:	fbc7 2605 	smlal	r2, r6, r7, r5
 8011f36:	f8de 71d4 	ldr.w	r7, [lr, #468]	; 0x1d4
 8011f3a:	f850 5c30 	ldr.w	r5, [r0, #-48]
 8011f3e:	fbc7 3405 	smlal	r3, r4, r7, r5
 8011f42:	f850 5c24 	ldr.w	r5, [r0, #-36]
 8011f46:	f8de 718c 	ldr.w	r7, [lr, #396]	; 0x18c
 8011f4a:	fbc7 3405 	smlal	r3, r4, r7, r5
 8011f4e:	f850 7c30 	ldr.w	r7, [r0, #-48]
 8011f52:	f8de 5108 	ldr.w	r5, [lr, #264]	; 0x108
 8011f56:	fbc7 1b05 	smlal	r1, fp, r7, r5
 8011f5a:	f850 7c28 	ldr.w	r7, [r0, #-40]
 8011f5e:	f8de 510c 	ldr.w	r5, [lr, #268]	; 0x10c
 8011f62:	fbc7 1b05 	smlal	r1, fp, r7, r5
 8011f66:	f850 7c20 	ldr.w	r7, [r0, #-32]
 8011f6a:	f8de 5110 	ldr.w	r5, [lr, #272]	; 0x110
 8011f6e:	fbc7 1b05 	smlal	r1, fp, r7, r5
 8011f72:	f850 7c18 	ldr.w	r7, [r0, #-24]
 8011f76:	f8de 5114 	ldr.w	r5, [lr, #276]	; 0x114
 8011f7a:	fbc7 1b05 	smlal	r1, fp, r7, r5
 8011f7e:	f850 7c10 	ldr.w	r7, [r0, #-16]
 8011f82:	f8de 5118 	ldr.w	r5, [lr, #280]	; 0x118
 8011f86:	fbc7 1b05 	smlal	r1, fp, r7, r5
 8011f8a:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8011f8e:	f8de 511c 	ldr.w	r5, [lr, #284]	; 0x11c
 8011f92:	fbc7 1b05 	smlal	r1, fp, r7, r5
 8011f96:	9d06      	ldr	r5, [sp, #24]
 8011f98:	f8de 715c 	ldr.w	r7, [lr, #348]	; 0x15c
 8011f9c:	fbc5 1b07 	smlal	r1, fp, r5, r7
 8011fa0:	f8de 7158 	ldr.w	r7, [lr, #344]	; 0x158
 8011fa4:	9d05      	ldr	r5, [sp, #20]
 8011fa6:	fbca 1b07 	smlal	r1, fp, sl, r7
 8011faa:	f8de 7154 	ldr.w	r7, [lr, #340]	; 0x154
 8011fae:	fbc9 1b07 	smlal	r1, fp, r9, r7
 8011fb2:	f8de 7150 	ldr.w	r7, [lr, #336]	; 0x150
 8011fb6:	fbcc 1b07 	smlal	r1, fp, ip, r7
 8011fba:	f8de 714c 	ldr.w	r7, [lr, #332]	; 0x14c
 8011fbe:	fbc5 1b07 	smlal	r1, fp, r5, r7
 8011fc2:	9d04      	ldr	r5, [sp, #16]
 8011fc4:	f8de 7148 	ldr.w	r7, [lr, #328]	; 0x148
 8011fc8:	fbc5 1b07 	smlal	r1, fp, r5, r7
 8011fcc:	9d03      	ldr	r5, [sp, #12]
 8011fce:	f8de 7144 	ldr.w	r7, [lr, #324]	; 0x144
 8011fd2:	fbc5 1b07 	smlal	r1, fp, r5, r7
 8011fd6:	9d02      	ldr	r5, [sp, #8]
 8011fd8:	f8de 7140 	ldr.w	r7, [lr, #320]	; 0x140
 8011fdc:	fbc5 1b07 	smlal	r1, fp, r5, r7
 8011fe0:	f8de 71d0 	ldr.w	r7, [lr, #464]	; 0x1d0
 8011fe4:	f850 5c28 	ldr.w	r5, [r0, #-40]
  return x >> n;
 8011fe8:	0d09      	lsrs	r1, r1, #20
   return (sum + ((int64_t)x * y));
 8011fea:	fbc7 3405 	smlal	r3, r4, r7, r5
 8011fee:	f8de 7190 	ldr.w	r7, [lr, #400]	; 0x190
 8011ff2:	f850 5c1c 	ldr.w	r5, [r0, #-28]
  return x >> n;
 8011ff6:	ea41 310b 	orr.w	r1, r1, fp, lsl #12
   return (sum + ((int64_t)x * y));
 8011ffa:	fbc7 3405 	smlal	r3, r4, r7, r5
 8011ffe:	f850 5c20 	ldr.w	r5, [r0, #-32]
 8012002:	fbc7 2605 	smlal	r2, r6, r7, r5
 8012006:	f8de 71cc 	ldr.w	r7, [lr, #460]	; 0x1cc
 801200a:	fbc7 3405 	smlal	r3, r4, r7, r5
 801200e:	f8de 7194 	ldr.w	r7, [lr, #404]	; 0x194
 8012012:	f850 5c14 	ldr.w	r5, [r0, #-20]
 8012016:	fbc7 3405 	smlal	r3, r4, r7, r5
 801201a:	f850 5c18 	ldr.w	r5, [r0, #-24]
 801201e:	fbc7 2605 	smlal	r2, r6, r7, r5
 8012022:	f8de 71c8 	ldr.w	r7, [lr, #456]	; 0x1c8
 8012026:	fbc7 3405 	smlal	r3, r4, r7, r5
 801202a:	f8de 7198 	ldr.w	r7, [lr, #408]	; 0x198
 801202e:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 8012032:	fbc7 3405 	smlal	r3, r4, r7, r5
 8012036:	f850 5c10 	ldr.w	r5, [r0, #-16]
 801203a:	fbc7 2605 	smlal	r2, r6, r7, r5
 801203e:	f8de 71c4 	ldr.w	r7, [lr, #452]	; 0x1c4
 8012042:	fbc7 3405 	smlal	r3, r4, r7, r5
 8012046:	f8de 719c 	ldr.w	r7, [lr, #412]	; 0x19c
 801204a:	f850 5c04 	ldr.w	r5, [r0, #-4]
 801204e:	fbc7 3405 	smlal	r3, r4, r7, r5
 8012052:	f850 5c08 	ldr.w	r5, [r0, #-8]
 8012056:	fbc7 2605 	smlal	r2, r6, r7, r5
 801205a:	f8de 71dc 	ldr.w	r7, [lr, #476]	; 0x1dc
 801205e:	9d06      	ldr	r5, [sp, #24]
 8012060:	fbc7 2605 	smlal	r2, r6, r7, r5
 8012064:	f8de 71d8 	ldr.w	r7, [lr, #472]	; 0x1d8
 8012068:	9d05      	ldr	r5, [sp, #20]
 801206a:	fbc7 260a 	smlal	r2, r6, r7, sl
 801206e:	f8de 71d4 	ldr.w	r7, [lr, #468]	; 0x1d4
 8012072:	fbc7 2609 	smlal	r2, r6, r7, r9
 8012076:	f8de 71d0 	ldr.w	r7, [lr, #464]	; 0x1d0
	if (sign != (x >> 15))
 801207a:	ea4f 5961 	mov.w	r9, r1, asr #21
 801207e:	fbc7 260c 	smlal	r2, r6, r7, ip
 8012082:	f8de 71cc 	ldr.w	r7, [lr, #460]	; 0x1cc
 8012086:	ebb9 7fe1 	cmp.w	r9, r1, asr #31
 801208a:	fbc7 2605 	smlal	r2, r6, r7, r5
 801208e:	f8de 71c8 	ldr.w	r7, [lr, #456]	; 0x1c8
 8012092:	9d04      	ldr	r5, [sp, #16]
	sign = x >> 31;
 8012094:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8012098:	fbc7 2605 	smlal	r2, r6, r7, r5
 801209c:	f8de 71c4 	ldr.w	r7, [lr, #452]	; 0x1c4
 80120a0:	9d03      	ldr	r5, [sp, #12]
 80120a2:	fbc7 2605 	smlal	r2, r6, r7, r5
 80120a6:	f8de 71c0 	ldr.w	r7, [lr, #448]	; 0x1c0
 80120aa:	f850 5c08 	ldr.w	r5, [r0, #-8]
 80120ae:	fbc7 3405 	smlal	r3, r4, r7, r5
 80120b2:	9d02      	ldr	r5, [sp, #8]
 80120b4:	fbc7 2605 	smlal	r2, r6, r7, r5
	if (sign != (x >> 15))
 80120b8:	f47f ae3c 	bne.w	8011d34 <xmp3fixpt_PolyphaseStereo+0x29c>
	x >>= fracBits;
 80120bc:	1189      	asrs	r1, r1, #6
 80120be:	e63d      	b.n	8011d3c <xmp3fixpt_PolyphaseStereo+0x2a4>
 80120c0:	119b      	asrs	r3, r3, #6
 80120c2:	e668      	b.n	8011d96 <xmp3fixpt_PolyphaseStereo+0x2fe>
 80120c4:	11b6      	asrs	r6, r6, #6
 80120c6:	e657      	b.n	8011d78 <xmp3fixpt_PolyphaseStereo+0x2e0>
 80120c8:	1192      	asrs	r2, r2, #6
 80120ca:	e645      	b.n	8011d58 <xmp3fixpt_PolyphaseStereo+0x2c0>
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
		pcm += 2;
	}
}
 80120cc:	b00b      	add	sp, #44	; 0x2c
 80120ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	x >>= fracBits;
 80120d2:	119b      	asrs	r3, r3, #6
 80120d4:	e597      	b.n	8011c06 <xmp3fixpt_PolyphaseStereo+0x16e>
 80120d6:	119b      	asrs	r3, r3, #6
 80120d8:	e61f      	b.n	8011d1a <xmp3fixpt_PolyphaseStereo+0x282>
 80120da:	ea4f 19a9 	mov.w	r9, r9, asr #6
 80120de:	e60e      	b.n	8011cfe <xmp3fixpt_PolyphaseStereo+0x266>
 80120e0:	1193      	asrs	r3, r2, #6
 80120e2:	e59f      	b.n	8011c24 <xmp3fixpt_PolyphaseStereo+0x18c>
 80120e4:	0000      	movs	r0, r0
	...

080120e8 <xmp3fixpt_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 80120e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ec:	ed2d 8b02 	vpush	{d8}
 80120f0:	b097      	sub	sp, #92	; 0x5c
 80120f2:	9203      	str	r2, [sp, #12]
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 80120f4:	9006      	str	r0, [sp, #24]
 80120f6:	2800      	cmp	r0, #0
 80120f8:	f000 83f8 	beq.w	80128ec <xmp3fixpt_UnpackScaleFactors+0x804>
 80120fc:	6805      	ldr	r5, [r0, #0]
 80120fe:	ee08 1a10 	vmov	s16, r1
 8012102:	4601      	mov	r1, r0
 8012104:	2d00      	cmp	r5, #0
 8012106:	f000 83f1 	beq.w	80128ec <xmp3fixpt_UnpackScaleFactors+0x804>
 801210a:	6840      	ldr	r0, [r0, #4]
 801210c:	9000      	str	r0, [sp, #0]
 801210e:	2800      	cmp	r0, #0
 8012110:	f000 83ec 	beq.w	80128ec <xmp3fixpt_UnpackScaleFactors+0x804>
 8012114:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8012118:	f1ba 0f00 	cmp.w	sl, #0
 801211c:	f000 83e6 	beq.w	80128ec <xmp3fixpt_UnpackScaleFactors+0x804>
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));

	/* init GetBits reader */
	startBuf = buf;
	bsi = &bitStreamInfo;
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 8012120:	6812      	ldr	r2, [r2, #0]
 8012122:	ac0e      	add	r4, sp, #56	; 0x38
 8012124:	4413      	add	r3, r2
 8012126:	4620      	mov	r0, r4
 8012128:	ee18 2a10 	vmov	r2, s16
 801212c:	1dd9      	adds	r1, r3, #7
 801212e:	bf48      	it	mi
 8012130:	f103 010e 	addmi.w	r1, r3, #14
 8012134:	10c9      	asrs	r1, r1, #3
 8012136:	f7fa f8ef 	bl	800c318 <xmp3fixpt_SetBitstreamPointer>
	if (*bitOffset)
 801213a:	9b03      	ldr	r3, [sp, #12]
 801213c:	6819      	ldr	r1, [r3, #0]
 801213e:	2900      	cmp	r1, #0
 8012140:	f040 8180 	bne.w	8012444 <xmp3fixpt_UnpackScaleFactors+0x35c>
		GetBits(bsi, *bitOffset);

	if (fh->ver == MPEG1) 
 8012144:	782b      	ldrb	r3, [r5, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	f000 80d7 	beq.w	80122fa <xmp3fixpt_UnpackScaleFactors+0x212>
	sfCompress = sis->sfCompress;
 801214c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801214e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8012150:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);
 8012154:	6a2a      	ldr	r2, [r5, #32]
	sfCompress = sis->sfCompress;
 8012156:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801215a:	011b      	lsls	r3, r3, #4
 801215c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8012160:	9900      	ldr	r1, [sp, #0]
 8012162:	440b      	add	r3, r1
 8012164:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012166:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012168:	00db      	lsls	r3, r3, #3
 801216a:	9302      	str	r3, [sp, #8]
 801216c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801216e:	00db      	lsls	r3, r3, #3
 8012170:	9301      	str	r3, [sp, #4]
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8012172:	f012 0301 	ands.w	r3, r2, #1
 8012176:	9305      	str	r3, [sp, #20]
 8012178:	d006      	beq.n	8012188 <xmp3fixpt_UnpackScaleFactors+0xa0>
 801217a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801217c:	1e5a      	subs	r2, r3, #1
 801217e:	bf18      	it	ne
 8012180:	2201      	movne	r2, #1
 8012182:	2a00      	cmp	r2, #0
 8012184:	f000 831b 	beq.w	80127be <xmp3fixpt_UnpackScaleFactors+0x6d6>
		if (sfCompress < 400) {
 8012188:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 801218c:	f280 8162 	bge.w	8012454 <xmp3fixpt_UnpackScaleFactors+0x36c>
			slen[0] = (sfCompress >> 4) / 5;
 8012190:	1103      	asrs	r3, r0, #4
 8012192:	4aae      	ldr	r2, [pc, #696]	; (801244c <xmp3fixpt_UnpackScaleFactors+0x364>)
 8012194:	2103      	movs	r1, #3
	intensityScale = 0;
 8012196:	f04f 0e00 	mov.w	lr, #0
			slen[0] = (sfCompress >> 4) / 5;
 801219a:	fb82 2803 	smull	r2, r8, r2, r3
 801219e:	17c2      	asrs	r2, r0, #31
 80121a0:	4689      	mov	r9, r1
 80121a2:	2706      	movs	r7, #6
 80121a4:	ebc2 0868 	rsb	r8, r2, r8, asr #1
 80121a8:	468c      	mov	ip, r1
	preFlag = 0;
 80121aa:	46f3      	mov	fp, lr
 80121ac:	9109      	str	r1, [sp, #36]	; 0x24
			slen[1]= (sfCompress >> 4) % 5;
 80121ae:	eb08 0288 	add.w	r2, r8, r8, lsl #2
			slen[0] = (sfCompress >> 4) / 5;
 80121b2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
			slen[1]= (sfCompress >> 4) % 5;
 80121b6:	1a9b      	subs	r3, r3, r2
 80121b8:	2205      	movs	r2, #5
 80121ba:	930b      	str	r3, [sp, #44]	; 0x2c
			slen[2]= (sfCompress & 0x0f) >> 2;
 80121bc:	f3c0 0381 	ubfx	r3, r0, #2, #2
			slen[3]= (sfCompress & 0x03);
 80121c0:	4008      	ands	r0, r1
 80121c2:	4616      	mov	r6, r2
			slen[2]= (sfCompress & 0x0f) >> 2;
 80121c4:	930c      	str	r3, [sp, #48]	; 0x30
			slen[3]= (sfCompress & 0x03);
 80121c6:	900d      	str	r0, [sp, #52]	; 0x34
			sfcIdx = 0;
 80121c8:	4610      	mov	r0, r2
 80121ca:	e9cd 1107 	strd	r1, r1, [sp, #28]
	if (sis->blockType == 2) 
 80121ce:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80121d0:	9b01      	ldr	r3, [sp, #4]
 80121d2:	442b      	add	r3, r5
 80121d4:	9d02      	ldr	r5, [sp, #8]
 80121d6:	011b      	lsls	r3, r3, #4
 80121d8:	9304      	str	r3, [sp, #16]
 80121da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80121dc:	441d      	add	r5, r3
 80121de:	9b04      	ldr	r3, [sp, #16]
 80121e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80121e4:	9d00      	ldr	r5, [sp, #0]
 80121e6:	442b      	add	r3, r5
 80121e8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80121ea:	2d02      	cmp	r5, #2
 80121ec:	f000 829d 	beq.w	801272a <xmp3fixpt_UnpackScaleFactors+0x642>
	if( (modeExt & 0x01) && (ch == 1) ) {
 80121f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80121f2:	2b01      	cmp	r3, #1
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 80121f4:	e9cd 7612 	strd	r7, r6, [sp, #72]	; 0x48
 80121f8:	e9cd 0214 	strd	r0, r2, [sp, #80]	; 0x50
	if( (modeExt & 0x01) && (ch == 1) ) {
 80121fc:	d103      	bne.n	8012206 <xmp3fixpt_UnpackScaleFactors+0x11e>
 80121fe:	9b05      	ldr	r3, [sp, #20]
 8012200:	2b00      	cmp	r3, #0
 8012202:	f040 8306 	bne.w	8012812 <xmp3fixpt_UnpackScaleFactors+0x72a>
 8012206:	ae0a      	add	r6, sp, #40	; 0x28
 8012208:	af12      	add	r7, sp, #72	; 0x48
	sis->preFlag = preFlag;
 801220a:	9a22      	ldr	r2, [sp, #136]	; 0x88
	if(sis->blockType == 2) {
 801220c:	2d02      	cmp	r5, #2
	sis->preFlag = preFlag;
 801220e:	9b01      	ldr	r3, [sp, #4]
 8012210:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8012212:	4413      	add	r3, r2
 8012214:	9a02      	ldr	r2, [sp, #8]
 8012216:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801221a:	440a      	add	r2, r1
 801221c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012220:	9a00      	ldr	r2, [sp, #0]
 8012222:	4413      	add	r3, r2
 8012224:	f8c3 b064 	str.w	fp, [r3, #100]	; 0x64
	if(sis->blockType == 2) {
 8012228:	f000 821f 	beq.w	801266a <xmp3fixpt_UnpackScaleFactors+0x582>
 801222c:	9b22      	ldr	r3, [sp, #136]	; 0x88
		sfb = 0;
 801222e:	f04f 0800 	mov.w	r8, #0
 8012232:	46b9      	mov	r9, r7
 8012234:	f8cd a01c 	str.w	sl, [sp, #28]
 8012238:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 801223c:	009a      	lsls	r2, r3, #2
 801223e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012240:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8012244:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8012248:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801224a:	0152      	lsls	r2, r2, #5
 801224c:	9308      	str	r3, [sp, #32]
 801224e:	4453      	add	r3, sl
 8012250:	9204      	str	r2, [sp, #16]
 8012252:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012254:	9309      	str	r3, [sp, #36]	; 0x24
 8012256:	0152      	lsls	r2, r2, #5
 8012258:	9205      	str	r2, [sp, #20]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 801225a:	f859 7b04 	ldr.w	r7, [r9], #4
			iipTest = (1 << slen[nrIdx]) - 1;
 801225e:	f856 ab04 	ldr.w	sl, [r6], #4
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8012262:	2f00      	cmp	r7, #0
 8012264:	dd11      	ble.n	801228a <xmp3fixpt_UnpackScaleFactors+0x1a2>
 8012266:	9b08      	ldr	r3, [sp, #32]
 8012268:	9a07      	ldr	r2, [sp, #28]
 801226a:	4443      	add	r3, r8
 801226c:	eb02 0b03 	add.w	fp, r2, r3
 8012270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012272:	eb08 0503 	add.w	r5, r8, r3
 8012276:	443d      	add	r5, r7
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 8012278:	4651      	mov	r1, sl
 801227a:	4620      	mov	r0, r4
 801227c:	f7fa f852 	bl	800c324 <xmp3fixpt_GetBits>
 8012280:	f80b 0b01 	strb.w	r0, [fp], #1
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8012284:	45ab      	cmp	fp, r5
 8012286:	d1f7      	bne.n	8012278 <xmp3fixpt_UnpackScaleFactors+0x190>
 8012288:	44b8      	add	r8, r7
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 801228a:	42a6      	cmp	r6, r4
 801228c:	d1e5      	bne.n	801225a <xmp3fixpt_UnpackScaleFactors+0x172>
		sfis->l[21] = sfis->l[22] = 0;
 801228e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012292:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012294:	9b05      	ldr	r3, [sp, #20]
 8012296:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8012298:	1a9b      	subs	r3, r3, r2
 801229a:	9a04      	ldr	r2, [sp, #16]
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	1a52      	subs	r2, r2, r1
 80122a0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80122a4:	2200      	movs	r2, #0
 80122a6:	3315      	adds	r3, #21
 80122a8:	f82a 2003 	strh.w	r2, [sl, r3]

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 80122ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80122ae:	9a01      	ldr	r2, [sp, #4]
 80122b0:	9802      	ldr	r0, [sp, #8]
 80122b2:	441a      	add	r2, r3
 80122b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80122b6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80122b8:	4418      	add	r0, r3
 80122ba:	0112      	lsls	r2, r2, #4
 80122bc:	eb03 0341 	add.w	r3, r3, r1, lsl #1

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 80122c0:	ee18 1a10 	vmov	r1, s16
	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 80122c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80122c8:	9800      	ldr	r0, [sp, #0]
 80122ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80122ce:	4410      	add	r0, r2
 80122d0:	4602      	mov	r2, r0
	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 80122d2:	4620      	mov	r0, r4
	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 80122d4:	9c06      	ldr	r4, [sp, #24]
 80122d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80122d8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 80122dc:	9c03      	ldr	r4, [sp, #12]
 80122de:	6822      	ldr	r2, [r4, #0]
 80122e0:	f7fa f888 	bl	800c3f4 <xmp3fixpt_CalcBitsUsed>
	buf += (bitsUsed + *bitOffset) >> 3;
 80122e4:	6823      	ldr	r3, [r4, #0]
 80122e6:	4418      	add	r0, r3
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 80122e8:	f000 0307 	and.w	r3, r0, #7
	buf += (bitsUsed + *bitOffset) >> 3;
 80122ec:	10c0      	asrs	r0, r0, #3
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 80122ee:	6023      	str	r3, [r4, #0]

	return (buf - startBuf);
}
 80122f0:	b017      	add	sp, #92	; 0x5c
 80122f2:	ecbd 8b02 	vpop	{d8}
 80122f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 80122fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80122fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80122fe:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8012302:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8012304:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8012308:	00c9      	lsls	r1, r1, #3
 801230a:	011b      	lsls	r3, r3, #4
 801230c:	9102      	str	r1, [sp, #8]
 801230e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012312:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012314:	9a00      	ldr	r2, [sp, #0]
 8012316:	00c9      	lsls	r1, r1, #3
 8012318:	4413      	add	r3, r2
 801231a:	4a4d      	ldr	r2, [pc, #308]	; (8012450 <xmp3fixpt_UnpackScaleFactors+0x368>)
 801231c:	9101      	str	r1, [sp, #4]
 801231e:	6b58      	ldr	r0, [r3, #52]	; 0x34
	if (sis->blockType == 2) {
 8012320:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 8012322:	eb02 0540 	add.w	r5, r2, r0, lsl #1
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8012326:	f812 9010 	ldrb.w	r9, [r2, r0, lsl #1]
	if (sis->blockType == 2) {
 801232a:	2902      	cmp	r1, #2
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 801232c:	786e      	ldrb	r6, [r5, #1]
	if (sis->blockType == 2) {
 801232e:	f000 8143 	beq.w	80125b8 <xmp3fixpt_UnpackScaleFactors+0x4d0>
		if(gr == 0) {
 8012332:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012334:	2b00      	cmp	r3, #0
 8012336:	f000 8200 	beq.w	801273a <xmp3fixpt_UnpackScaleFactors+0x652>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 801233a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801233c:	9a00      	ldr	r2, [sp, #0]
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 801233e:	011f      	lsls	r7, r3, #4
 8012340:	3708      	adds	r7, #8
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8012342:	59d3      	ldr	r3, [r2, r7]
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 8012344:	4417      	add	r7, r2
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8012346:	2b00      	cmp	r3, #0
 8012348:	f000 80be 	beq.w	80124c8 <xmp3fixpt_UnpackScaleFactors+0x3e0>
 801234c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801234e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8012352:	015b      	lsls	r3, r3, #5
 8012354:	0092      	lsls	r2, r2, #2
 8012356:	9305      	str	r3, [sp, #20]
 8012358:	1e53      	subs	r3, r2, #1
 801235a:	2b02      	cmp	r3, #2
 801235c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801235e:	f240 82d6 	bls.w	801290e <xmp3fixpt_UnpackScaleFactors+0x826>
 8012362:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8012366:	eb0a 0102 	add.w	r1, sl, r2
 801236a:	f85a 0013 	ldr.w	r0, [sl, r3, lsl #1]
 801236e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8012372:	f841 0013 	str.w	r0, [r1, r3, lsl #1]
 8012376:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 801237a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801237c:	4452      	add	r2, sl
 801237e:	0149      	lsls	r1, r1, #5
 8012380:	9104      	str	r1, [sp, #16]
 8012382:	7919      	ldrb	r1, [r3, #4]
 8012384:	7111      	strb	r1, [r2, #4]
 8012386:	795b      	ldrb	r3, [r3, #5]
 8012388:	7153      	strb	r3, [r2, #5]
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2b00      	cmp	r3, #0
 801238e:	f000 80bb 	beq.w	8012508 <xmp3fixpt_UnpackScaleFactors+0x420>
 8012392:	9b04      	ldr	r3, [sp, #16]
 8012394:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8012396:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012398:	1a9a      	subs	r2, r3, r2
 801239a:	9b05      	ldr	r3, [sp, #20]
 801239c:	0052      	lsls	r2, r2, #1
 801239e:	1a5b      	subs	r3, r3, r1
 80123a0:	1e51      	subs	r1, r2, #1
 80123a2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80123a6:	009b      	lsls	r3, r3, #2
 80123a8:	1a89      	subs	r1, r1, r2
 80123aa:	2902      	cmp	r1, #2
 80123ac:	f240 82a1 	bls.w	80128f2 <xmp3fixpt_UnpackScaleFactors+0x80a>
 80123b0:	1d91      	adds	r1, r2, #6
 80123b2:	eb0a 0003 	add.w	r0, sl, r3
 80123b6:	4413      	add	r3, r2
 80123b8:	4452      	add	r2, sl
 80123ba:	f85a 5001 	ldr.w	r5, [sl, r1]
 80123be:	4453      	add	r3, sl
 80123c0:	5045      	str	r5, [r0, r1]
 80123c2:	7a92      	ldrb	r2, [r2, #10]
 80123c4:	729a      	strb	r2, [r3, #10]
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	f000 80b9 	beq.w	8012540 <xmp3fixpt_UnpackScaleFactors+0x458>
 80123ce:	9b04      	ldr	r3, [sp, #16]
 80123d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80123d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80123d4:	1a9a      	subs	r2, r3, r2
 80123d6:	9b05      	ldr	r3, [sp, #20]
 80123d8:	0052      	lsls	r2, r2, #1
 80123da:	1a59      	subs	r1, r3, r1
 80123dc:	1e53      	subs	r3, r2, #1
 80123de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80123e2:	0089      	lsls	r1, r1, #2
 80123e4:	1a9b      	subs	r3, r3, r2
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	f240 82d7 	bls.w	801299a <xmp3fixpt_UnpackScaleFactors+0x8b2>
 80123ec:	f102 030b 	add.w	r3, r2, #11
 80123f0:	eb0a 0002 	add.w	r0, sl, r2
 80123f4:	440a      	add	r2, r1
 80123f6:	f85a 5003 	ldr.w	r5, [sl, r3]
 80123fa:	4453      	add	r3, sl
 80123fc:	4452      	add	r2, sl
 80123fe:	505d      	str	r5, [r3, r1]
 8012400:	7bc3      	ldrb	r3, [r0, #15]
 8012402:	73d3      	strb	r3, [r2, #15]
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	2b00      	cmp	r3, #0
 8012408:	f000 81bc 	beq.w	8012784 <xmp3fixpt_UnpackScaleFactors+0x69c>
 801240c:	9b04      	ldr	r3, [sp, #16]
 801240e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8012410:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012412:	1a9a      	subs	r2, r3, r2
 8012414:	9b05      	ldr	r3, [sp, #20]
 8012416:	0052      	lsls	r2, r2, #1
 8012418:	1a5b      	subs	r3, r3, r1
 801241a:	1e51      	subs	r1, r2, #1
 801241c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	1a89      	subs	r1, r1, r2
 8012424:	2902      	cmp	r1, #2
 8012426:	f240 82aa 	bls.w	801297e <xmp3fixpt_UnpackScaleFactors+0x896>
 801242a:	f102 0110 	add.w	r1, r2, #16
 801242e:	eb0a 0003 	add.w	r0, sl, r3
 8012432:	4413      	add	r3, r2
 8012434:	4452      	add	r2, sl
 8012436:	f85a 5001 	ldr.w	r5, [sl, r1]
 801243a:	4453      	add	r3, sl
 801243c:	5045      	str	r5, [r0, r1]
 801243e:	7d12      	ldrb	r2, [r2, #20]
 8012440:	751a      	strb	r2, [r3, #20]
 8012442:	e726      	b.n	8012292 <xmp3fixpt_UnpackScaleFactors+0x1aa>
		GetBits(bsi, *bitOffset);
 8012444:	4620      	mov	r0, r4
 8012446:	f7f9 ff6d 	bl	800c324 <xmp3fixpt_GetBits>
 801244a:	e67b      	b.n	8012144 <xmp3fixpt_UnpackScaleFactors+0x5c>
 801244c:	66666667 	.word	0x66666667
 8012450:	0802316c 	.word	0x0802316c
		} else if (sfCompress < 500) {
 8012454:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8012458:	f2c0 808b 	blt.w	8012572 <xmp3fixpt_UnpackScaleFactors+0x48a>
			sfCompress -= 500;
 801245c:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
			slen[0] = sfCompress / 3;
 8012460:	4bc6      	ldr	r3, [pc, #792]	; (801277c <xmp3fixpt_UnpackScaleFactors+0x694>)
			if (sis->mixedBlock) {
 8012462:	9a22      	ldr	r2, [sp, #136]	; 0x88
			slen[0] = sfCompress / 3;
 8012464:	fba3 3800 	umull	r3, r8, r3, r0
			if (sis->mixedBlock) {
 8012468:	9b01      	ldr	r3, [sp, #4]
 801246a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801246c:	4413      	add	r3, r2
 801246e:	9a02      	ldr	r2, [sp, #8]
			slen[0] = sfCompress / 3;
 8012470:	ea4f 0858 	mov.w	r8, r8, lsr #1
			if (sis->mixedBlock) {
 8012474:	440a      	add	r2, r1
 8012476:	011b      	lsls	r3, r3, #4
			slen[0] = sfCompress / 3;
 8012478:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
			if (sis->mixedBlock) {
 801247c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012480:	9a00      	ldr	r2, [sp, #0]
 8012482:	4413      	add	r3, r2
			slen[2] = slen[3] = 0;
 8012484:	2200      	movs	r2, #0
			if (sis->mixedBlock) {
 8012486:	f8d3 c040 	ldr.w	ip, [r3, #64]	; 0x40
			slen[1] = sfCompress % 3;
 801248a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801248e:	1ac0      	subs	r0, r0, r3
			slen[2] = slen[3] = 0;
 8012490:	2300      	movs	r3, #0
			slen[1] = sfCompress % 3;
 8012492:	900b      	str	r0, [sp, #44]	; 0x2c
			slen[2] = slen[3] = 0;
 8012494:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (sis->mixedBlock) {
 8012498:	f1bc 0f00 	cmp.w	ip, #0
 801249c:	f000 81f1 	beq.w	8012882 <xmp3fixpt_UnpackScaleFactors+0x79a>
				slen[1] = slen[0];
 80124a0:	2100      	movs	r1, #0
 80124a2:	f04f 0906 	mov.w	r9, #6
 80124a6:	2303      	movs	r3, #3
 80124a8:	260a      	movs	r6, #10
 80124aa:	270b      	movs	r7, #11
 80124ac:	460a      	mov	r2, r1
 80124ae:	468c      	mov	ip, r1
	intensityScale = 0;
 80124b0:	468e      	mov	lr, r1
			preFlag = 1;
 80124b2:	f04f 0b01 	mov.w	fp, #1
				slen[1] = slen[0];
 80124b6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80124ba:	f8cd 9020 	str.w	r9, [sp, #32]
 80124be:	9307      	str	r3, [sp, #28]
 80124c0:	e9cd 800b 	strd	r8, r0, [sp, #44]	; 0x2c
 80124c4:	4608      	mov	r0, r1
 80124c6:	e682      	b.n	80121ce <xmp3fixpt_UnpackScaleFactors+0xe6>
 80124c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80124ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80124cc:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 80124d0:	ebc2 1542 	rsb	r5, r2, r2, lsl #5
 80124d4:	009b      	lsls	r3, r3, #2
 80124d6:	0152      	lsls	r2, r2, #5
 80124d8:	eb03 0845 	add.w	r8, r3, r5, lsl #1
 80124dc:	9204      	str	r2, [sp, #16]
 80124de:	4645      	mov	r5, r8
 80124e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80124e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80124e6:	3505      	adds	r5, #5
 80124e8:	0152      	lsls	r2, r2, #5
 80124ea:	44d0      	add	r8, sl
 80124ec:	4455      	add	r5, sl
 80124ee:	9205      	str	r2, [sp, #20]
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 80124f0:	4649      	mov	r1, r9
 80124f2:	4620      	mov	r0, r4
 80124f4:	f7f9 ff16 	bl	800c324 <xmp3fixpt_GetBits>
 80124f8:	f808 0f01 	strb.w	r0, [r8, #1]!
 80124fc:	45a8      	cmp	r8, r5
 80124fe:	d1f7      	bne.n	80124f0 <xmp3fixpt_UnpackScaleFactors+0x408>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	f47f af45 	bne.w	8012392 <xmp3fixpt_UnpackScaleFactors+0x2aa>
 8012508:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801250a:	9b04      	ldr	r3, [sp, #16]
 801250c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801250e:	1a9b      	subs	r3, r3, r2
 8012510:	9a05      	ldr	r2, [sp, #20]
 8012512:	005b      	lsls	r3, r3, #1
 8012514:	1a55      	subs	r5, r2, r1
 8012516:	f103 0806 	add.w	r8, r3, #6
 801251a:	330b      	adds	r3, #11
 801251c:	eb08 0885 	add.w	r8, r8, r5, lsl #2
 8012520:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012524:	44d0      	add	r8, sl
 8012526:	4455      	add	r5, sl
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8012528:	4649      	mov	r1, r9
 801252a:	4620      	mov	r0, r4
 801252c:	f7f9 fefa 	bl	800c324 <xmp3fixpt_GetBits>
 8012530:	f808 0b01 	strb.w	r0, [r8], #1
 8012534:	45a8      	cmp	r8, r5
 8012536:	d1f7      	bne.n	8012528 <xmp3fixpt_UnpackScaleFactors+0x440>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	f47f af47 	bne.w	80123ce <xmp3fixpt_UnpackScaleFactors+0x2e6>
 8012540:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8012542:	9b04      	ldr	r3, [sp, #16]
 8012544:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012546:	1a9b      	subs	r3, r3, r2
 8012548:	9a05      	ldr	r2, [sp, #20]
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	1a55      	subs	r5, r2, r1
 801254e:	f103 080b 	add.w	r8, r3, #11
 8012552:	3310      	adds	r3, #16
 8012554:	eb08 0885 	add.w	r8, r8, r5, lsl #2
 8012558:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801255c:	44d0      	add	r8, sl
 801255e:	4455      	add	r5, sl
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8012560:	4631      	mov	r1, r6
 8012562:	4620      	mov	r0, r4
 8012564:	f7f9 fede 	bl	800c324 <xmp3fixpt_GetBits>
 8012568:	f808 0b01 	strb.w	r0, [r8], #1
 801256c:	45a8      	cmp	r8, r5
 801256e:	d1f7      	bne.n	8012560 <xmp3fixpt_UnpackScaleFactors+0x478>
 8012570:	e748      	b.n	8012404 <xmp3fixpt_UnpackScaleFactors+0x31c>
			slen[3]= 0;
 8012572:	2300      	movs	r3, #0
			sfCompress -= 400;
 8012574:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
			slen[0] = (sfCompress >> 2) / 5;
 8012578:	4a81      	ldr	r2, [pc, #516]	; (8012780 <xmp3fixpt_UnpackScaleFactors+0x698>)
 801257a:	f04f 0903 	mov.w	r9, #3
	intensityScale = 0;
 801257e:	469e      	mov	lr, r3
			slen[3]= 0;
 8012580:	930d      	str	r3, [sp, #52]	; 0x34
			slen[0] = (sfCompress >> 2) / 5;
 8012582:	1083      	asrs	r3, r0, #2
 8012584:	2104      	movs	r1, #4
			slen[2]= (sfCompress & 0x03);
 8012586:	f000 0003 	and.w	r0, r0, #3
 801258a:	2605      	movs	r6, #5
			slen[0] = (sfCompress >> 2) / 5;
 801258c:	fba2 2803 	umull	r2, r8, r2, r3
 8012590:	2706      	movs	r7, #6
			slen[2]= (sfCompress & 0x03);
 8012592:	900c      	str	r0, [sp, #48]	; 0x30
 8012594:	f04f 0c02 	mov.w	ip, #2
			slen[0] = (sfCompress >> 2) / 5;
 8012598:	ea4f 0898 	mov.w	r8, r8, lsr #2
 801259c:	2007      	movs	r0, #7
	preFlag = 0;
 801259e:	46f3      	mov	fp, lr
 80125a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
			slen[1]= (sfCompress >> 2) % 5;
 80125a4:	eb08 0288 	add.w	r2, r8, r8, lsl #2
			slen[0] = (sfCompress >> 2) / 5;
 80125a8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
			slen[1]= (sfCompress >> 2) % 5;
 80125ac:	1a9b      	subs	r3, r3, r2
 80125ae:	464a      	mov	r2, r9
 80125b0:	930b      	str	r3, [sp, #44]	; 0x2c
			sfcIdx = 1;
 80125b2:	e9cd 9107 	strd	r9, r1, [sp, #28]
 80125b6:	e60a      	b.n	80121ce <xmp3fixpt_UnpackScaleFactors+0xe6>
		if (sis->mixedBlock) {          
 80125b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	f040 8144 	bne.w	8012848 <xmp3fixpt_UnpackScaleFactors+0x760>
 80125c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80125c2:	0152      	lsls	r2, r2, #5
 80125c4:	9204      	str	r2, [sp, #16]
 80125c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80125c8:	0152      	lsls	r2, r2, #5
 80125ca:	9205      	str	r2, [sp, #20]
 80125cc:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 80125d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80125d2:	9b05      	ldr	r3, [sp, #20]
 80125d4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80125d6:	1a9b      	subs	r3, r3, r2
 80125d8:	9a04      	ldr	r2, [sp, #16]
 80125da:	009b      	lsls	r3, r3, #2
 80125dc:	1a57      	subs	r7, r2, r1
 80125de:	eb03 0547 	add.w	r5, r3, r7, lsl #1
 80125e2:	462f      	mov	r7, r5
 80125e4:	44a8      	add	r8, r5
 80125e6:	3712      	adds	r7, #18
 80125e8:	44d0      	add	r8, sl
 80125ea:	4457      	add	r7, sl
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 80125ec:	4649      	mov	r1, r9
 80125ee:	4620      	mov	r0, r4
 80125f0:	f7f9 fe98 	bl	800c324 <xmp3fixpt_GetBits>
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 80125f4:	4649      	mov	r1, r9
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 80125f6:	f888 0017 	strb.w	r0, [r8, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 80125fa:	4620      	mov	r0, r4
 80125fc:	f7f9 fe92 	bl	800c324 <xmp3fixpt_GetBits>
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 8012600:	4649      	mov	r1, r9
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 8012602:	f888 0018 	strb.w	r0, [r8, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 8012606:	4620      	mov	r0, r4
 8012608:	f7f9 fe8c 	bl	800c324 <xmp3fixpt_GetBits>
		for (      ; sfb < 6; sfb++) {
 801260c:	f108 0803 	add.w	r8, r8, #3
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 8012610:	f888 0016 	strb.w	r0, [r8, #22]
		for (      ; sfb < 6; sfb++) {
 8012614:	4547      	cmp	r7, r8
 8012616:	d1e9      	bne.n	80125ec <xmp3fixpt_UnpackScaleFactors+0x504>
 8012618:	4455      	add	r5, sl
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 801261a:	4631      	mov	r1, r6
 801261c:	4620      	mov	r0, r4
 801261e:	f7f9 fe81 	bl	800c324 <xmp3fixpt_GetBits>
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8012622:	4631      	mov	r1, r6
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 8012624:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8012628:	4620      	mov	r0, r4
 801262a:	f7f9 fe7b 	bl	800c324 <xmp3fixpt_GetBits>
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 801262e:	4631      	mov	r1, r6
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8012630:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 8012634:	4620      	mov	r0, r4
 8012636:	f7f9 fe75 	bl	800c324 <xmp3fixpt_GetBits>
		for (      ; sfb < 12; sfb++) {
 801263a:	3503      	adds	r5, #3
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 801263c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
		for (      ; sfb < 12; sfb++) {
 8012640:	42bd      	cmp	r5, r7
 8012642:	d1ea      	bne.n	801261a <xmp3fixpt_UnpackScaleFactors+0x532>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 8012644:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012646:	9b05      	ldr	r3, [sp, #20]
 8012648:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801264a:	1a9b      	subs	r3, r3, r2
 801264c:	9a04      	ldr	r2, [sp, #16]
 801264e:	009b      	lsls	r3, r3, #2
 8012650:	1a52      	subs	r2, r2, r1
 8012652:	2100      	movs	r1, #0
 8012654:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8012658:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801265c:	4453      	add	r3, sl
 801265e:	4452      	add	r2, sl
 8012660:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 8012664:	f8a2 1007 	strh.w	r1, [r2, #7]
 8012668:	e620      	b.n	80122ac <xmp3fixpt_UnpackScaleFactors+0x1c4>
		if(sis->mixedBlock) {
 801266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801266c:	2b00      	cmp	r3, #0
 801266e:	f000 80c9 	beq.w	8012804 <xmp3fixpt_UnpackScaleFactors+0x71c>
 8012672:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012674:	ebc1 1541 	rsb	r5, r1, r1, lsl #5
 8012678:	014a      	lsls	r2, r1, #5
 801267a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 801267e:	9204      	str	r2, [sp, #16]
 8012680:	009b      	lsls	r3, r3, #2
 8012682:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012684:	eb03 0945 	add.w	r9, r3, r5, lsl #1
 8012688:	0152      	lsls	r2, r2, #5
 801268a:	464d      	mov	r5, r9
 801268c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012690:	9205      	str	r2, [sp, #20]
 8012692:	3505      	adds	r5, #5
 8012694:	44d1      	add	r9, sl
 8012696:	4455      	add	r5, sl
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 8012698:	4641      	mov	r1, r8
 801269a:	4620      	mov	r0, r4
 801269c:	f7f9 fe42 	bl	800c324 <xmp3fixpt_GetBits>
 80126a0:	f809 0f01 	strb.w	r0, [r9, #1]!
			for (sfb=0; sfb < 6; sfb++) {
 80126a4:	45a9      	cmp	r9, r5
 80126a6:	d1f7      	bne.n	8012698 <xmp3fixpt_UnpackScaleFactors+0x5b0>
			sfb = 3;  /* start sfb for short */
 80126a8:	f04f 0b03 	mov.w	fp, #3
			nrIdx = 1;
 80126ac:	2301      	movs	r3, #1
 80126ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80126b0:	eb06 0883 	add.w	r8, r6, r3, lsl #2
 80126b4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80126b8:	9b05      	ldr	r3, [sp, #20]
 80126ba:	eba3 0902 	sub.w	r9, r3, r2
 80126be:	9b04      	ldr	r3, [sp, #16]
 80126c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80126c2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80126c6:	1a9b      	subs	r3, r3, r2
 80126c8:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 80126cc:	9307      	str	r3, [sp, #28]
 80126ce:	4453      	add	r3, sl
 80126d0:	9308      	str	r3, [sp, #32]
 80126d2:	465b      	mov	r3, fp
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 80126d4:	f857 6b04 	ldr.w	r6, [r7], #4
			iipTest = (1 << slen[nrIdx]) - 1;
 80126d8:	f858 bb04 	ldr.w	fp, [r8], #4
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 80126dc:	2e00      	cmp	r6, #0
 80126de:	dd21      	ble.n	8012724 <xmp3fixpt_UnpackScaleFactors+0x63c>
 80126e0:	441e      	add	r6, r3
 80126e2:	9a07      	ldr	r2, [sp, #28]
 80126e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80126e8:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80126ec:	4413      	add	r3, r2
 80126ee:	eb0a 0903 	add.w	r9, sl, r3
 80126f2:	9b08      	ldr	r3, [sp, #32]
 80126f4:	441d      	add	r5, r3
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 80126f6:	4659      	mov	r1, fp
 80126f8:	4620      	mov	r0, r4
 80126fa:	f7f9 fe13 	bl	800c324 <xmp3fixpt_GetBits>
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 80126fe:	4659      	mov	r1, fp
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 8012700:	f889 0017 	strb.w	r0, [r9, #23]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 8012704:	4620      	mov	r0, r4
 8012706:	f7f9 fe0d 	bl	800c324 <xmp3fixpt_GetBits>
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 801270a:	4659      	mov	r1, fp
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 801270c:	f889 0018 	strb.w	r0, [r9, #24]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8012710:	4620      	mov	r0, r4
 8012712:	f7f9 fe07 	bl	800c324 <xmp3fixpt_GetBits>
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8012716:	f109 0903 	add.w	r9, r9, #3
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 801271a:	f889 0016 	strb.w	r0, [r9, #22]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 801271e:	45a9      	cmp	r9, r5
 8012720:	d1e9      	bne.n	80126f6 <xmp3fixpt_UnpackScaleFactors+0x60e>
 8012722:	4633      	mov	r3, r6
		for (    ; nrIdx <= 3; nrIdx++) {
 8012724:	45a0      	cmp	r8, r4
 8012726:	d1d5      	bne.n	80126d4 <xmp3fixpt_UnpackScaleFactors+0x5ec>
 8012728:	e78c      	b.n	8012644 <xmp3fixpt_UnpackScaleFactors+0x55c>
		btIdx = (sis->mixedBlock ? 2 : 1);
 801272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801272c:	4662      	mov	r2, ip
 801272e:	2b00      	cmp	r3, #0
 8012730:	d141      	bne.n	80127b6 <xmp3fixpt_UnpackScaleFactors+0x6ce>
 8012732:	4608      	mov	r0, r1
 8012734:	464e      	mov	r6, r9
 8012736:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012738:	e55a      	b.n	80121f0 <xmp3fixpt_UnpackScaleFactors+0x108>
 801273a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801273c:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
 8012740:	006d      	lsls	r5, r5, #1
 8012742:	f105 38ff 	add.w	r8, r5, #4294967295
 8012746:	f105 070a 	add.w	r7, r5, #10
 801274a:	44d0      	add	r8, sl
 801274c:	4457      	add	r7, sl
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 801274e:	4649      	mov	r1, r9
 8012750:	4620      	mov	r0, r4
 8012752:	f7f9 fde7 	bl	800c324 <xmp3fixpt_GetBits>
 8012756:	f808 0f01 	strb.w	r0, [r8, #1]!
			for (sfb = 0;  sfb < 11; sfb++) 
 801275a:	45b8      	cmp	r8, r7
 801275c:	d1f7      	bne.n	801274e <xmp3fixpt_UnpackScaleFactors+0x666>
 801275e:	f105 070b 	add.w	r7, r5, #11
 8012762:	3515      	adds	r5, #21
 8012764:	4457      	add	r7, sl
 8012766:	4455      	add	r5, sl
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8012768:	4631      	mov	r1, r6
 801276a:	4620      	mov	r0, r4
 801276c:	f7f9 fdda 	bl	800c324 <xmp3fixpt_GetBits>
 8012770:	f807 0b01 	strb.w	r0, [r7], #1
			for (sfb = 11; sfb < 21; sfb++) 
 8012774:	42bd      	cmp	r5, r7
 8012776:	d1f7      	bne.n	8012768 <xmp3fixpt_UnpackScaleFactors+0x680>
 8012778:	e598      	b.n	80122ac <xmp3fixpt_UnpackScaleFactors+0x1c4>
 801277a:	bf00      	nop
 801277c:	aaaaaaab 	.word	0xaaaaaaab
 8012780:	cccccccd 	.word	0xcccccccd
 8012784:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8012786:	9b04      	ldr	r3, [sp, #16]
 8012788:	9922      	ldr	r1, [sp, #136]	; 0x88
 801278a:	1a9b      	subs	r3, r3, r2
 801278c:	9a05      	ldr	r2, [sp, #20]
 801278e:	005b      	lsls	r3, r3, #1
 8012790:	1a55      	subs	r5, r2, r1
 8012792:	f103 0710 	add.w	r7, r3, #16
 8012796:	3315      	adds	r3, #21
 8012798:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 801279c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80127a0:	4457      	add	r7, sl
 80127a2:	4455      	add	r5, sl
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 80127a4:	4631      	mov	r1, r6
 80127a6:	4620      	mov	r0, r4
 80127a8:	f7f9 fdbc 	bl	800c324 <xmp3fixpt_GetBits>
 80127ac:	f807 0b01 	strb.w	r0, [r7], #1
 80127b0:	42bd      	cmp	r5, r7
 80127b2:	d1f7      	bne.n	80127a4 <xmp3fixpt_UnpackScaleFactors+0x6bc>
 80127b4:	e56d      	b.n	8012292 <xmp3fixpt_UnpackScaleFactors+0x1aa>
 80127b6:	e9dd 6007 	ldrd	r6, r0, [sp, #28]
 80127ba:	2706      	movs	r7, #6
 80127bc:	e518      	b.n	80121f0 <xmp3fixpt_UnpackScaleFactors+0x108>
		if (sfCompress < 180) {
 80127be:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
		intensityScale = sfCompress & 0x01;
 80127c2:	f000 0e01 	and.w	lr, r0, #1
		sfCompress >>= 1;
 80127c6:	ea4f 0360 	mov.w	r3, r0, asr #1
		if (sfCompress < 180) {
 80127ca:	db6b      	blt.n	80128a4 <xmp3fixpt_UnpackScaleFactors+0x7bc>
		} else if (sfCompress < 244) {
 80127cc:	2bf3      	cmp	r3, #243	; 0xf3
 80127ce:	f300 80b7 	bgt.w	8012940 <xmp3fixpt_UnpackScaleFactors+0x858>
			sfCompress -= 180;
 80127d2:	2103      	movs	r1, #3
 80127d4:	3bb4      	subs	r3, #180	; 0xb4
	preFlag = 0;
 80127d6:	4693      	mov	fp, r2
			slen[3] = 0;
 80127d8:	920d      	str	r2, [sp, #52]	; 0x34
			slen[0] = (sfCompress & 0x3f) >> 4;
 80127da:	ea4f 1823 	mov.w	r8, r3, asr #4
			slen[1] = (sfCompress & 0x0f) >> 2;
 80127de:	f3c3 0281 	ubfx	r2, r3, #2, #2
			slen[2] = (sfCompress & 0x03);
 80127e2:	400b      	ands	r3, r1
 80127e4:	2006      	movs	r0, #6
			slen[1] = (sfCompress & 0x0f) >> 2;
 80127e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80127e8:	4689      	mov	r9, r1
			slen[2] = (sfCompress & 0x03);
 80127ea:	930c      	str	r3, [sp, #48]	; 0x30
 80127ec:	2304      	movs	r3, #4
 80127ee:	460a      	mov	r2, r1
 80127f0:	4606      	mov	r6, r0
 80127f2:	4607      	mov	r7, r0
 80127f4:	f04f 0c02 	mov.w	ip, #2
			slen[0] = (sfCompress & 0x3f) >> 4;
 80127f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
			sfcIdx = 4;
 80127fc:	9309      	str	r3, [sp, #36]	; 0x24
 80127fe:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8012802:	e4e4      	b.n	80121ce <xmp3fixpt_UnpackScaleFactors+0xe6>
 8012804:	014a      	lsls	r2, r1, #5
			sfb = 0;
 8012806:	469b      	mov	fp, r3
 8012808:	9204      	str	r2, [sp, #16]
 801280a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801280c:	0152      	lsls	r2, r2, #5
 801280e:	9205      	str	r2, [sp, #20]
 8012810:	e74d      	b.n	80126ae <xmp3fixpt_UnpackScaleFactors+0x5c6>
			sfjs->slen[i] = slen[i];
 8012812:	ae0a      	add	r6, sp, #40	; 0x28
			sfjs->nr[i] = nr[i];
 8012814:	af12      	add	r7, sp, #72	; 0x48
		sfjs->intensityScale = intensityScale;
 8012816:	f8ca e0f8 	str.w	lr, [sl, #248]	; 0xf8
			sfjs->slen[i] = slen[i];
 801281a:	46b6      	mov	lr, r6
			sfjs->nr[i] = nr[i];
 801281c:	46bc      	mov	ip, r7
			sfjs->slen[i] = slen[i];
 801281e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012822:	f8ca 00fc 	str.w	r0, [sl, #252]	; 0xfc
 8012826:	f8ca 1100 	str.w	r1, [sl, #256]	; 0x100
 801282a:	f8ca 2104 	str.w	r2, [sl, #260]	; 0x104
 801282e:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
			sfjs->nr[i] = nr[i];
 8012832:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012836:	f8ca 010c 	str.w	r0, [sl, #268]	; 0x10c
 801283a:	f8ca 1110 	str.w	r1, [sl, #272]	; 0x110
 801283e:	f8ca 2114 	str.w	r2, [sl, #276]	; 0x114
 8012842:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
		sfjs->intensityScale = intensityScale;
 8012846:	e4e0      	b.n	801220a <xmp3fixpt_UnpackScaleFactors+0x122>
 8012848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801284a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801284c:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8012850:	ebc2 1542 	rsb	r5, r2, r2, lsl #5
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	0152      	lsls	r2, r2, #5
 8012858:	eb03 0745 	add.w	r7, r3, r5, lsl #1
 801285c:	9204      	str	r2, [sp, #16]
 801285e:	463d      	mov	r5, r7
 8012860:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012862:	3f01      	subs	r7, #1
 8012864:	3507      	adds	r5, #7
 8012866:	0152      	lsls	r2, r2, #5
 8012868:	4457      	add	r7, sl
 801286a:	4455      	add	r5, sl
 801286c:	9205      	str	r2, [sp, #20]
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 801286e:	4649      	mov	r1, r9
 8012870:	4620      	mov	r0, r4
 8012872:	f7f9 fd57 	bl	800c324 <xmp3fixpt_GetBits>
 8012876:	f807 0f01 	strb.w	r0, [r7, #1]!
			for (sfb = 0; sfb < 8; sfb++)
 801287a:	42bd      	cmp	r5, r7
 801287c:	d1f7      	bne.n	801286e <xmp3fixpt_UnpackScaleFactors+0x786>
			sfb = 3;
 801287e:	2303      	movs	r3, #3
 8012880:	e6a4      	b.n	80125cc <xmp3fixpt_UnpackScaleFactors+0x4e4>
 8012882:	f04f 0906 	mov.w	r9, #6
 8012886:	2303      	movs	r3, #3
 8012888:	4661      	mov	r1, ip
 801288a:	4662      	mov	r2, ip
 801288c:	4660      	mov	r0, ip
	intensityScale = 0;
 801288e:	46e6      	mov	lr, ip
 8012890:	260a      	movs	r6, #10
 8012892:	270b      	movs	r7, #11
			preFlag = 1;
 8012894:	f04f 0b01 	mov.w	fp, #1
 8012898:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801289c:	f8cd 9020 	str.w	r9, [sp, #32]
 80128a0:	9307      	str	r3, [sp, #28]
 80128a2:	e494      	b.n	80121ce <xmp3fixpt_UnpackScaleFactors+0xe6>
			slen[0] = (sfCompress / 36);
 80128a4:	4946      	ldr	r1, [pc, #280]	; (80129c0 <xmp3fixpt_UnpackScaleFactors+0x8d8>)
 80128a6:	17c0      	asrs	r0, r0, #31
 80128a8:	4694      	mov	ip, r2
	preFlag = 0;
 80128aa:	4693      	mov	fp, r2
			slen[0] = (sfCompress / 36);
 80128ac:	fb81 1803 	smull	r1, r8, r1, r3
			slen[3] = 0;
 80128b0:	920d      	str	r2, [sp, #52]	; 0x34
			slen[0] = (sfCompress / 36);
 80128b2:	ebc0 08e8 	rsb	r8, r0, r8, asr #3
			slen[1] = (sfCompress % 36) / 6;
 80128b6:	eb08 01c8 	add.w	r1, r8, r8, lsl #3
			slen[0] = (sfCompress / 36);
 80128ba:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
			slen[1] = (sfCompress % 36) / 6;
 80128be:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 80128c2:	4940      	ldr	r1, [pc, #256]	; (80129c4 <xmp3fixpt_UnpackScaleFactors+0x8dc>)
 80128c4:	fb81 0103 	smull	r0, r1, r1, r3
 80128c8:	2007      	movs	r0, #7
 80128ca:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80128ce:	4606      	mov	r6, r0
 80128d0:	4607      	mov	r7, r0
 80128d2:	910b      	str	r1, [sp, #44]	; 0x2c
			slen[2] = (sfCompress % 36) % 6;
 80128d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80128d8:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 80128dc:	2305      	movs	r3, #5
 80128de:	910c      	str	r1, [sp, #48]	; 0x30
			sfcIdx = 3;
 80128e0:	2104      	movs	r1, #4
 80128e2:	9307      	str	r3, [sp, #28]
 80128e4:	4689      	mov	r9, r1
 80128e6:	9109      	str	r1, [sp, #36]	; 0x24
 80128e8:	9108      	str	r1, [sp, #32]
 80128ea:	e470      	b.n	80121ce <xmp3fixpt_UnpackScaleFactors+0xe6>
		return -1;
 80128ec:	f04f 30ff 	mov.w	r0, #4294967295
 80128f0:	e4fe      	b.n	80122f0 <xmp3fixpt_UnpackScaleFactors+0x208>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 80128f2:	4413      	add	r3, r2
 80128f4:	4452      	add	r2, sl
 80128f6:	4453      	add	r3, sl
 80128f8:	7991      	ldrb	r1, [r2, #6]
 80128fa:	7199      	strb	r1, [r3, #6]
 80128fc:	79d1      	ldrb	r1, [r2, #7]
 80128fe:	71d9      	strb	r1, [r3, #7]
 8012900:	7a11      	ldrb	r1, [r2, #8]
 8012902:	7219      	strb	r1, [r3, #8]
 8012904:	7a51      	ldrb	r1, [r2, #9]
 8012906:	7259      	strb	r1, [r3, #9]
 8012908:	7a92      	ldrb	r2, [r2, #10]
 801290a:	729a      	strb	r2, [r3, #10]
 801290c:	e55b      	b.n	80123c6 <xmp3fixpt_UnpackScaleFactors+0x2de>
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801290e:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 8012912:	eb02 0341 	add.w	r3, r2, r1, lsl #1
 8012916:	f81a 2011 	ldrb.w	r2, [sl, r1, lsl #1]
 801291a:	f80a 2003 	strb.w	r2, [sl, r3]
 801291e:	eb0a 0241 	add.w	r2, sl, r1, lsl #1
 8012922:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8012924:	4453      	add	r3, sl
 8012926:	0149      	lsls	r1, r1, #5
 8012928:	9104      	str	r1, [sp, #16]
 801292a:	7851      	ldrb	r1, [r2, #1]
 801292c:	7059      	strb	r1, [r3, #1]
 801292e:	7891      	ldrb	r1, [r2, #2]
 8012930:	7099      	strb	r1, [r3, #2]
 8012932:	78d1      	ldrb	r1, [r2, #3]
 8012934:	70d9      	strb	r1, [r3, #3]
 8012936:	7911      	ldrb	r1, [r2, #4]
 8012938:	7119      	strb	r1, [r3, #4]
 801293a:	7952      	ldrb	r2, [r2, #5]
 801293c:	715a      	strb	r2, [r3, #5]
 801293e:	e524      	b.n	801238a <xmp3fixpt_UnpackScaleFactors+0x2a2>
			sfCompress -= 244;
 8012940:	3bf4      	subs	r3, #244	; 0xf4
			slen[0] = (sfCompress / 3);
 8012942:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80129c8 <xmp3fixpt_UnpackScaleFactors+0x8e0>
			slen[2] = slen[3] = 0;
 8012946:	2608      	movs	r6, #8
 8012948:	f04f 0904 	mov.w	r9, #4
			slen[0] = (sfCompress / 3);
 801294c:	fba8 1803 	umull	r1, r8, r8, r3
			slen[2] = slen[3] = 0;
 8012950:	4694      	mov	ip, r2
 8012952:	4637      	mov	r7, r6
	preFlag = 0;
 8012954:	4693      	mov	fp, r2
			slen[0] = (sfCompress / 3);
 8012956:	ea4f 0858 	mov.w	r8, r8, lsr #1
			slen[1] = (sfCompress % 3);
 801295a:	eb08 0148 	add.w	r1, r8, r8, lsl #1
			slen[0] = (sfCompress / 3);
 801295e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
			slen[1] = (sfCompress % 3);
 8012962:	1a5b      	subs	r3, r3, r1
			slen[2] = slen[3] = 0;
 8012964:	2103      	movs	r1, #3
			slen[1] = (sfCompress % 3);
 8012966:	930b      	str	r3, [sp, #44]	; 0x2c
			slen[2] = slen[3] = 0;
 8012968:	2305      	movs	r3, #5
 801296a:	9108      	str	r1, [sp, #32]
 801296c:	4618      	mov	r0, r3
 801296e:	9309      	str	r3, [sp, #36]	; 0x24
 8012970:	2306      	movs	r3, #6
 8012972:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80129b8 <xmp3fixpt_UnpackScaleFactors+0x8d0>
 8012976:	9307      	str	r3, [sp, #28]
 8012978:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
			sfcIdx = 5;
 801297c:	e427      	b.n	80121ce <xmp3fixpt_UnpackScaleFactors+0xe6>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801297e:	4413      	add	r3, r2
 8012980:	4452      	add	r2, sl
 8012982:	4453      	add	r3, sl
 8012984:	7c11      	ldrb	r1, [r2, #16]
 8012986:	7419      	strb	r1, [r3, #16]
 8012988:	7c51      	ldrb	r1, [r2, #17]
 801298a:	7459      	strb	r1, [r3, #17]
 801298c:	7c91      	ldrb	r1, [r2, #18]
 801298e:	7499      	strb	r1, [r3, #18]
 8012990:	7cd1      	ldrb	r1, [r2, #19]
 8012992:	74d9      	strb	r1, [r3, #19]
 8012994:	7d12      	ldrb	r2, [r2, #20]
 8012996:	751a      	strb	r2, [r3, #20]
 8012998:	e47b      	b.n	8012292 <xmp3fixpt_UnpackScaleFactors+0x1aa>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801299a:	1853      	adds	r3, r2, r1
 801299c:	4452      	add	r2, sl
 801299e:	4453      	add	r3, sl
 80129a0:	7ad1      	ldrb	r1, [r2, #11]
 80129a2:	72d9      	strb	r1, [r3, #11]
 80129a4:	7b11      	ldrb	r1, [r2, #12]
 80129a6:	7319      	strb	r1, [r3, #12]
 80129a8:	7b51      	ldrb	r1, [r2, #13]
 80129aa:	7359      	strb	r1, [r3, #13]
 80129ac:	7b91      	ldrb	r1, [r2, #14]
 80129ae:	7399      	strb	r1, [r3, #14]
 80129b0:	7bd2      	ldrb	r2, [r2, #15]
 80129b2:	73da      	strb	r2, [r3, #15]
 80129b4:	e526      	b.n	8012404 <xmp3fixpt_UnpackScaleFactors+0x31c>
 80129b6:	bf00      	nop
	...
 80129c0:	38e38e39 	.word	0x38e38e39
 80129c4:	2aaaaaab 	.word	0x2aaaaaab
 80129c8:	aaaaaaab 	.word	0xaaaaaaab

080129cc <xmp3fixpt_MidSideProc>:
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
	for(i = 0; i < nSamps; i++) {
 80129cc:	2900      	cmp	r1, #0
{
 80129ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for(i = 0; i < nSamps; i++) {
 80129d2:	dd2b      	ble.n	8012a2c <xmp3fixpt_MidSideProc+0x60>
	mOutL = mOutR = 0;
 80129d4:	2600      	movs	r6, #0
 80129d6:	f1a0 0c04 	sub.w	ip, r0, #4
 80129da:	f600 0efc 	addw	lr, r0, #2300	; 0x8fc
 80129de:	4637      	mov	r7, r6
	for(i = 0; i < nSamps; i++) {
 80129e0:	4634      	mov	r4, r6
	__asm__ volatile (
 80129e2:	46b0      	mov	r8, r6
		xl = x[0][i];
 80129e4:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 80129e8:	4640      	mov	r0, r8
		xr = x[1][i];
 80129ea:	f85e 5f04 	ldr.w	r5, [lr, #4]!
		x[0][i] = xl + xr;
 80129ee:	eb03 0905 	add.w	r9, r3, r5
		x[1][i] = xl - xr;
 80129f2:	1b5b      	subs	r3, r3, r5
		x[0][i] = xl + xr;
 80129f4:	f8cc 9000 	str.w	r9, [ip]
		x[1][i] = xl - xr;
 80129f8:	f8ce 3000 	str.w	r3, [lr]
 80129fc:	f8dc 5000 	ldr.w	r5, [ip]
 8012a00:	ea85 70e5 	eor.w	r0, r5, r5, asr #31
 8012a04:	eba0 70e5 	sub.w	r0, r0, r5, asr #31
		mOutL |= FASTABS(x[0][i]);
 8012a08:	4307      	orrs	r7, r0
 8012a0a:	4640      	mov	r0, r8
 8012a0c:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8012a10:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
	for(i = 0; i < nSamps; i++) {
 8012a14:	3401      	adds	r4, #1
		mOutR |= FASTABS(x[1][i]);
 8012a16:	4306      	orrs	r6, r0
	for(i = 0; i < nSamps; i++) {
 8012a18:	42a1      	cmp	r1, r4
 8012a1a:	d1e3      	bne.n	80129e4 <xmp3fixpt_MidSideProc+0x18>
	}
	mOut[0] |= mOutL;
	mOut[1] |= mOutR;
 8012a1c:	e9d2 1300 	ldrd	r1, r3, [r2]
	mOut[0] |= mOutL;
 8012a20:	4339      	orrs	r1, r7
	mOut[1] |= mOutR;
 8012a22:	4333      	orrs	r3, r6
 8012a24:	e9c2 1300 	strd	r1, r3, [r2]
}
 8012a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mOutL = mOutR = 0;
 8012a2c:	2600      	movs	r6, #0
 8012a2e:	4637      	mov	r7, r6
 8012a30:	e7f4      	b.n	8012a1c <xmp3fixpt_MidSideProc+0x50>
 8012a32:	bf00      	nop

08012a34 <xmp3fixpt_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 8012a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a38:	b091      	sub	sp, #68	; 0x44
 8012a3a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8012a3c:	900d      	str	r0, [sp, #52]	; 0x34
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 8012a3e:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8012a42:	f1ba 0f00 	cmp.w	sl, #0
 8012a46:	f000 811d 	beq.w	8012c84 <xmp3fixpt_IntensityProcMPEG1+0x250>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
		cbEndL =   cbi[0].cbEndL + 1;
		cbStartS = cbEndS = 0;
		i = fh->sfBand->l[cbStartL];
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 8012a4a:	f10a 30ff 	add.w	r0, sl, #4294967295
 8012a4e:	2801      	cmp	r0, #1
 8012a50:	d908      	bls.n	8012a64 <xmp3fixpt_IntensityProcMPEG1+0x30>
		i = 3 * fh->sfBand->s[cbStartS];
	}

	sampsLeft = nSamps - i;		/* process to length of left */
	isfTab = (int *)ISFMpeg1[midSideFlag];
	mOutL = mOutR = 0;
 8012a52:	f04f 0800 	mov.w	r8, #0
 8012a56:	46c2      	mov	sl, r8
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
			sampsLeft -= 3;
		}
	}
	mOut[0] = mOutL;
 8012a58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
	mOut[1] = mOutR;
 8012a5a:	e9c3 a800 	strd	sl, r8, [r3]
	
	return;
}
 8012a5e:	b011      	add	sp, #68	; 0x44
 8012a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cbStartS = cbi[1].cbEndSMax + 1;
 8012a64:	6aac      	ldr	r4, [r5, #40]	; 0x28
		i = 3 * fh->sfBand->s[cbStartS];
 8012a66:	6b56      	ldr	r6, [r2, #52]	; 0x34
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012a68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
		i = 3 * fh->sfBand->s[cbStartS];
 8012a6a:	eb06 0044 	add.w	r0, r6, r4, lsl #1
		cbEndS =   cbi[0].cbEndSMax + 1;
 8012a6e:	692d      	ldr	r5, [r5, #16]
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012a70:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		i = 3 * fh->sfBand->s[cbStartS];
 8012a74:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
		cbEndS =   cbi[0].cbEndSMax + 1;
 8012a78:	950f      	str	r5, [sp, #60]	; 0x3c
		i = 3 * fh->sfBand->s[cbStartS];
 8012a7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sampsLeft = nSamps - i;		/* process to length of left */
 8012a7e:	eba1 0c00 	sub.w	ip, r1, r0
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012a82:	497e      	ldr	r1, [pc, #504]	; (8012c7c <xmp3fixpt_IntensityProcMPEG1+0x248>)
 8012a84:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8012a88:	f1bc 0f02 	cmp.w	ip, #2
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012a8c:	920b      	str	r2, [sp, #44]	; 0x2c
		cbStartS = cbi[1].cbEndSMax + 1;
 8012a8e:	f104 0201 	add.w	r2, r4, #1
 8012a92:	9209      	str	r2, [sp, #36]	; 0x24
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012a94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012a96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8012a9a:	ddda      	ble.n	8012a52 <xmp3fixpt_IntensityProcMPEG1+0x1e>
 8012a9c:	42ac      	cmp	r4, r5
 8012a9e:	dad8      	bge.n	8012a52 <xmp3fixpt_IntensityProcMPEG1+0x1e>
 8012aa0:	3418      	adds	r4, #24
	mOutL = mOutR = 0;
 8012aa2:	f04f 0800 	mov.w	r8, #0
 8012aa6:	eb06 0144 	add.w	r1, r6, r4, lsl #1
 8012aaa:	46c2      	mov	sl, r8
 8012aac:	4646      	mov	r6, r8
 8012aae:	46c1      	mov	r9, r8
			isf = sfis->s[cb][w];
 8012ab0:	910a      	str	r1, [sp, #40]	; 0x28
 8012ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ab4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012ab8:	440b      	add	r3, r1
 8012aba:	9308      	str	r3, [sp, #32]
				frs[w] = ISFIIP[midSideFlag][1];
 8012abc:	4b70      	ldr	r3, [pc, #448]	; (8012c80 <xmp3fixpt_IntensityProcMPEG1+0x24c>)
 8012abe:	4413      	add	r3, r2
 8012ac0:	930e      	str	r3, [sp, #56]	; 0x38
			isf = sfis->s[cb][w];
 8012ac2:	9b08      	ldr	r3, [sp, #32]
 8012ac4:	7ddb      	ldrb	r3, [r3, #23]
			if (isf == 7) {
 8012ac6:	2b07      	cmp	r3, #7
 8012ac8:	f000 80b4 	beq.w	8012c34 <xmp3fixpt_IntensityProcMPEG1+0x200>
				fls[w] = isfTab[isf];
 8012acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ace:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
				frs[w] = isfTab[6] - isfTab[isf];
 8012ad2:	6993      	ldr	r3, [r2, #24]
				fls[w] = isfTab[isf];
 8012ad4:	9103      	str	r1, [sp, #12]
				frs[w] = isfTab[6] - isfTab[isf];
 8012ad6:	1a5b      	subs	r3, r3, r1
 8012ad8:	9304      	str	r3, [sp, #16]
			isf = sfis->s[cb][w];
 8012ada:	9b08      	ldr	r3, [sp, #32]
 8012adc:	7e1b      	ldrb	r3, [r3, #24]
			if (isf == 7) {
 8012ade:	2b07      	cmp	r3, #7
 8012ae0:	f000 80b5 	beq.w	8012c4e <xmp3fixpt_IntensityProcMPEG1+0x21a>
				fls[w] = isfTab[isf];
 8012ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ae6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
				frs[w] = isfTab[6] - isfTab[isf];
 8012aea:	6993      	ldr	r3, [r2, #24]
				fls[w] = isfTab[isf];
 8012aec:	9101      	str	r1, [sp, #4]
				frs[w] = isfTab[6] - isfTab[isf];
 8012aee:	1a5b      	subs	r3, r3, r1
 8012af0:	9305      	str	r3, [sp, #20]
			isf = sfis->s[cb][w];
 8012af2:	9b08      	ldr	r3, [sp, #32]
 8012af4:	7e5b      	ldrb	r3, [r3, #25]
			if (isf == 7) {
 8012af6:	2b07      	cmp	r3, #7
 8012af8:	f000 80b6 	beq.w	8012c68 <xmp3fixpt_IntensityProcMPEG1+0x234>
				fls[w] = isfTab[isf];
 8012afc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012afe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
				frs[w] = isfTab[6] - isfTab[isf];
 8012b02:	6993      	ldr	r3, [r2, #24]
				fls[w] = isfTab[isf];
 8012b04:	9102      	str	r1, [sp, #8]
				frs[w] = isfTab[6] - isfTab[isf];
 8012b06:	1a5b      	subs	r3, r3, r1
 8012b08:	9306      	str	r3, [sp, #24]
		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8012b0a:	990a      	ldr	r1, [sp, #40]	; 0x28
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8012b0c:	f1bc 0f02 	cmp.w	ip, #2
		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8012b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b12:	460b      	mov	r3, r1
 8012b14:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8012b18:	f102 0201 	add.w	r2, r2, #1
 8012b1c:	f101 0102 	add.w	r1, r1, #2
 8012b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b24:	920c      	str	r2, [sp, #48]	; 0x30
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8012b26:	bfd8      	it	le
 8012b28:	2200      	movle	r2, #0
		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8012b2a:	eba8 0803 	sub.w	r8, r8, r3
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8012b2e:	bfc8      	it	gt
 8012b30:	2201      	movgt	r2, #1
		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8012b32:	910a      	str	r1, [sp, #40]	; 0x28
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8012b34:	f1b8 0f00 	cmp.w	r8, #0
 8012b38:	dd6a      	ble.n	8012c10 <xmp3fixpt_IntensityProcMPEG1+0x1dc>
 8012b3a:	2a00      	cmp	r2, #0
 8012b3c:	d068      	beq.n	8012c10 <xmp3fixpt_IntensityProcMPEG1+0x1dc>
 8012b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b40:	eb0c 0200 	add.w	r2, ip, r0
 8012b44:	f04f 0e00 	mov.w	lr, #0
 8012b48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8012b4c:	9207      	str	r2, [sp, #28]
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 8012b4e:	681a      	ldr	r2, [r3, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012b50:	9c04      	ldr	r4, [sp, #16]
 8012b52:	4611      	mov	r1, r2
 8012b54:	fb84 0101 	smull	r0, r1, r4, r1
 8012b58:	0089      	lsls	r1, r1, #2
	__asm__ volatile (
 8012b5a:	4637      	mov	r7, r6
 8012b5c:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
 8012b60:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
 8012b64:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012b68:	9803      	ldr	r0, [sp, #12]
 8012b6a:	fb80 1202 	smull	r1, r2, r0, r2
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 8012b6e:	0092      	lsls	r2, r2, #2
	__asm__ volatile (
 8012b70:	4635      	mov	r5, r6
 8012b72:	601a      	str	r2, [r3, #0]
 8012b74:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 8012b78:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 8012b7c:	685a      	ldr	r2, [r3, #4]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012b7e:	9c05      	ldr	r4, [sp, #20]
 8012b80:	4611      	mov	r1, r2
 8012b82:	fb84 0101 	smull	r0, r1, r4, r1
 8012b86:	0089      	lsls	r1, r1, #2
	__asm__ volatile (
 8012b88:	4630      	mov	r0, r6
 8012b8a:	f8c3 1904 	str.w	r1, [r3, #2308]	; 0x904
 8012b8e:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 8012b92:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012b96:	9c01      	ldr	r4, [sp, #4]
 8012b98:	fb84 1202 	smull	r1, r2, r4, r2
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 8012b9c:	0092      	lsls	r2, r2, #2
	__asm__ volatile (
 8012b9e:	4631      	mov	r1, r6
 8012ba0:	605a      	str	r2, [r3, #4]
 8012ba2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8012ba6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 8012baa:	689a      	ldr	r2, [r3, #8]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012bac:	4614      	mov	r4, r2
 8012bae:	9200      	str	r2, [sp, #0]
 8012bb0:	9a06      	ldr	r2, [sp, #24]
 8012bb2:	fb82 b404 	smull	fp, r4, r2, r4
 8012bb6:	00a4      	lsls	r4, r4, #2
	__asm__ volatile (
 8012bb8:	46b3      	mov	fp, r6
 8012bba:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
 8012bbe:	ea84 7be4 	eor.w	fp, r4, r4, asr #31
 8012bc2:	ebab 7be4 	sub.w	fp, fp, r4, asr #31
 8012bc6:	4338      	orrs	r0, r7
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012bc8:	9a00      	ldr	r2, [sp, #0]
 8012bca:	9c02      	ldr	r4, [sp, #8]
 8012bcc:	ea40 000b 	orr.w	r0, r0, fp
 8012bd0:	ea49 0900 	orr.w	r9, r9, r0
 8012bd4:	fb84 0202 	smull	r0, r2, r4, r2
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8012bd8:	0092      	lsls	r2, r2, #2
	__asm__ volatile (
 8012bda:	4630      	mov	r0, r6
 8012bdc:	609a      	str	r2, [r3, #8]
 8012bde:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 8012be2:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
			sampsLeft -= 3;
 8012be6:	f1ac 0c03 	sub.w	ip, ip, #3
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8012bea:	4329      	orrs	r1, r5
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8012bec:	f10e 0e01 	add.w	lr, lr, #1
 8012bf0:	330c      	adds	r3, #12
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8012bf2:	4301      	orrs	r1, r0
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8012bf4:	f1bc 0f02 	cmp.w	ip, #2
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8012bf8:	ea4a 0a01 	orr.w	sl, sl, r1
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8012bfc:	bfd4      	ite	le
 8012bfe:	2200      	movle	r2, #0
 8012c00:	2201      	movgt	r2, #1
 8012c02:	9907      	ldr	r1, [sp, #28]
 8012c04:	45f0      	cmp	r8, lr
 8012c06:	eba1 000c 	sub.w	r0, r1, ip
 8012c0a:	dd01      	ble.n	8012c10 <xmp3fixpt_IntensityProcMPEG1+0x1dc>
 8012c0c:	2a00      	cmp	r2, #0
 8012c0e:	d19e      	bne.n	8012b4e <xmp3fixpt_IntensityProcMPEG1+0x11a>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8012c10:	9b08      	ldr	r3, [sp, #32]
 8012c12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c14:	3303      	adds	r3, #3
 8012c16:	9308      	str	r3, [sp, #32]
 8012c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c1a:	428b      	cmp	r3, r1
 8012c1c:	f340 80b4 	ble.w	8012d88 <xmp3fixpt_IntensityProcMPEG1+0x354>
 8012c20:	2a00      	cmp	r2, #0
 8012c22:	f000 80b1 	beq.w	8012d88 <xmp3fixpt_IntensityProcMPEG1+0x354>
 8012c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c28:	9309      	str	r3, [sp, #36]	; 0x24
			isf = sfis->s[cb][w];
 8012c2a:	9b08      	ldr	r3, [sp, #32]
 8012c2c:	7ddb      	ldrb	r3, [r3, #23]
			if (isf == 7) {
 8012c2e:	2b07      	cmp	r3, #7
 8012c30:	f47f af4c 	bne.w	8012acc <xmp3fixpt_IntensityProcMPEG1+0x98>
				fls[w] = ISFIIP[midSideFlag][0];
 8012c34:	4b12      	ldr	r3, [pc, #72]	; (8012c80 <xmp3fixpt_IntensityProcMPEG1+0x24c>)
 8012c36:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012c38:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8012c3c:	9303      	str	r3, [sp, #12]
				frs[w] = ISFIIP[midSideFlag][1];
 8012c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	9304      	str	r3, [sp, #16]
			isf = sfis->s[cb][w];
 8012c44:	9b08      	ldr	r3, [sp, #32]
 8012c46:	7e1b      	ldrb	r3, [r3, #24]
			if (isf == 7) {
 8012c48:	2b07      	cmp	r3, #7
 8012c4a:	f47f af4b 	bne.w	8012ae4 <xmp3fixpt_IntensityProcMPEG1+0xb0>
				fls[w] = ISFIIP[midSideFlag][0];
 8012c4e:	4b0c      	ldr	r3, [pc, #48]	; (8012c80 <xmp3fixpt_IntensityProcMPEG1+0x24c>)
 8012c50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012c52:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8012c56:	9301      	str	r3, [sp, #4]
				frs[w] = ISFIIP[midSideFlag][1];
 8012c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	9305      	str	r3, [sp, #20]
			isf = sfis->s[cb][w];
 8012c5e:	9b08      	ldr	r3, [sp, #32]
 8012c60:	7e5b      	ldrb	r3, [r3, #25]
			if (isf == 7) {
 8012c62:	2b07      	cmp	r3, #7
 8012c64:	f47f af4a 	bne.w	8012afc <xmp3fixpt_IntensityProcMPEG1+0xc8>
				fls[w] = ISFIIP[midSideFlag][0];
 8012c68:	4b05      	ldr	r3, [pc, #20]	; (8012c80 <xmp3fixpt_IntensityProcMPEG1+0x24c>)
 8012c6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012c6c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8012c70:	9302      	str	r3, [sp, #8]
				frs[w] = ISFIIP[midSideFlag][1];
 8012c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	9306      	str	r3, [sp, #24]
 8012c78:	e747      	b.n	8012b0a <xmp3fixpt_IntensityProcMPEG1+0xd6>
 8012c7a:	bf00      	nop
 8012c7c:	0802319c 	.word	0x0802319c
 8012c80:	0802318c 	.word	0x0802318c
		i = fh->sfBand->l[cbStartL];
 8012c84:	6b50      	ldr	r0, [r2, #52]	; 0x34
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012c86:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
		cbStartL = cbi[1].cbEndL + 1;
 8012c88:	6aec      	ldr	r4, [r5, #44]	; 0x2c
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012c8a:	ebc2 0bc2 	rsb	fp, r2, r2, lsl #3
 8012c8e:	4a43      	ldr	r2, [pc, #268]	; (8012d9c <xmp3fixpt_IntensityProcMPEG1+0x368>)
		cbEndL =   cbi[0].cbEndL + 1;
 8012c90:	696d      	ldr	r5, [r5, #20]
		i = fh->sfBand->l[cbStartL];
 8012c92:	f104 0801 	add.w	r8, r4, #1
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012c96:	eb02 028b 	add.w	r2, r2, fp, lsl #2
		i = fh->sfBand->l[cbStartL];
 8012c9a:	f930 9018 	ldrsh.w	r9, [r0, r8, lsl #1]
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8012c9e:	42ac      	cmp	r4, r5
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012ca0:	9203      	str	r2, [sp, #12]
 8012ca2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	sampsLeft = nSamps - i;		/* process to length of left */
 8012ca4:	eba1 0709 	sub.w	r7, r1, r9
		cbEndL =   cbi[0].cbEndL + 1;
 8012ca8:	9501      	str	r5, [sp, #4]
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8012caa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8012cae:	da72      	bge.n	8012d96 <xmp3fixpt_IntensityProcMPEG1+0x362>
 8012cb0:	2f00      	cmp	r7, #0
 8012cb2:	dd70      	ble.n	8012d96 <xmp3fixpt_IntensityProcMPEG1+0x362>
 8012cb4:	eb03 0b08 	add.w	fp, r3, r8
 8012cb8:	43db      	mvns	r3, r3
 8012cba:	eb00 0148 	add.w	r1, r0, r8, lsl #1
 8012cbe:	4656      	mov	r6, sl
 8012cc0:	9302      	str	r3, [sp, #8]
	mOutL = mOutR = 0;
 8012cc2:	46d0      	mov	r8, sl
			fr = ISFIIP[midSideFlag][1];
 8012cc4:	4b36      	ldr	r3, [pc, #216]	; (8012da0 <xmp3fixpt_IntensityProcMPEG1+0x36c>)
 8012cc6:	9100      	str	r1, [sp, #0]
 8012cc8:	4413      	add	r3, r2
 8012cca:	9304      	str	r3, [sp, #16]
		isf = sfis->l[cb];
 8012ccc:	f81b 3b01 	ldrb.w	r3, [fp], #1
		if (isf == 7) {
 8012cd0:	2b07      	cmp	r3, #7
 8012cd2:	d052      	beq.n	8012d7a <xmp3fixpt_IntensityProcMPEG1+0x346>
			fl = isfTab[isf];	
 8012cd4:	9a03      	ldr	r2, [sp, #12]
 8012cd6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
			fr = isfTab[6] - isfTab[isf];
 8012cda:	6994      	ldr	r4, [r2, #24]
 8012cdc:	1b64      	subs	r4, r4, r5
		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8012cde:	9900      	ldr	r1, [sp, #0]
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8012ce0:	2f00      	cmp	r7, #0
 8012ce2:	460a      	mov	r2, r1
		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8012ce4:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8012ce8:	bfd4      	ite	le
 8012cea:	2300      	movle	r3, #0
 8012cec:	2301      	movgt	r3, #1
		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8012cee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012cf2:	3102      	adds	r1, #2
 8012cf4:	ebac 0c02 	sub.w	ip, ip, r2
 8012cf8:	9100      	str	r1, [sp, #0]
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8012cfa:	f1bc 0f00 	cmp.w	ip, #0
 8012cfe:	dd2f      	ble.n	8012d60 <xmp3fixpt_IntensityProcMPEG1+0x32c>
 8012d00:	b373      	cbz	r3, 8012d60 <xmp3fixpt_IntensityProcMPEG1+0x32c>
 8012d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d04:	eb07 0e09 	add.w	lr, r7, r9
 8012d08:	4639      	mov	r1, r7
 8012d0a:	eb03 0089 	add.w	r0, r3, r9, lsl #2
 8012d0e:	3804      	subs	r0, #4
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 8012d10:	f850 3f04 	ldr.w	r3, [r0, #4]!
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012d14:	461a      	mov	r2, r3
 8012d16:	fb84 9202 	smull	r9, r2, r4, r2
 8012d1a:	0092      	lsls	r2, r2, #2
	__asm__ volatile (
 8012d1c:	46b1      	mov	r9, r6
 8012d1e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8012d22:	ea82 79e2 	eor.w	r9, r2, r2, asr #31
 8012d26:	eba9 79e2 	sub.w	r9, r9, r2, asr #31
 8012d2a:	ea48 0809 	orr.w	r8, r8, r9
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012d2e:	fb85 2303 	smull	r2, r3, r5, r3
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 8012d32:	009b      	lsls	r3, r3, #2
	__asm__ volatile (
 8012d34:	4632      	mov	r2, r6
 8012d36:	6003      	str	r3, [r0, #0]
 8012d38:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8012d3c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
			sampsLeft--;
 8012d40:	3901      	subs	r1, #1
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 8012d42:	ea4a 0a02 	orr.w	sl, sl, r2
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8012d46:	2900      	cmp	r1, #0
 8012d48:	eba7 0201 	sub.w	r2, r7, r1
 8012d4c:	ebae 0901 	sub.w	r9, lr, r1
 8012d50:	bfd4      	ite	le
 8012d52:	2300      	movle	r3, #0
 8012d54:	2301      	movgt	r3, #1
 8012d56:	4594      	cmp	ip, r2
 8012d58:	dd01      	ble.n	8012d5e <xmp3fixpt_IntensityProcMPEG1+0x32a>
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d1d8      	bne.n	8012d10 <xmp3fixpt_IntensityProcMPEG1+0x2dc>
			sampsLeft--;
 8012d5e:	460f      	mov	r7, r1
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8012d60:	9a02      	ldr	r2, [sp, #8]
 8012d62:	9901      	ldr	r1, [sp, #4]
 8012d64:	445a      	add	r2, fp
 8012d66:	4291      	cmp	r1, r2
 8012d68:	f77f ae76 	ble.w	8012a58 <xmp3fixpt_IntensityProcMPEG1+0x24>
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	f43f ae73 	beq.w	8012a58 <xmp3fixpt_IntensityProcMPEG1+0x24>
		isf = sfis->l[cb];
 8012d72:	f81b 3b01 	ldrb.w	r3, [fp], #1
		if (isf == 7) {
 8012d76:	2b07      	cmp	r3, #7
 8012d78:	d1ac      	bne.n	8012cd4 <xmp3fixpt_IntensityProcMPEG1+0x2a0>
			fl = ISFIIP[midSideFlag][0];
 8012d7a:	4b09      	ldr	r3, [pc, #36]	; (8012da0 <xmp3fixpt_IntensityProcMPEG1+0x36c>)
 8012d7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012d7e:	f853 5032 	ldr.w	r5, [r3, r2, lsl #3]
			fr = ISFIIP[midSideFlag][1];
 8012d82:	9b04      	ldr	r3, [sp, #16]
 8012d84:	685c      	ldr	r4, [r3, #4]
 8012d86:	e7aa      	b.n	8012cde <xmp3fixpt_IntensityProcMPEG1+0x2aa>
 8012d88:	46c8      	mov	r8, r9
	mOut[0] = mOutL;
 8012d8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
	mOut[1] = mOutR;
 8012d8c:	e9c3 a800 	strd	sl, r8, [r3]
}
 8012d90:	b011      	add	sp, #68	; 0x44
 8012d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mOutL = mOutR = 0;
 8012d96:	f04f 0800 	mov.w	r8, #0
 8012d9a:	e65d      	b.n	8012a58 <xmp3fixpt_IntensityProcMPEG1+0x24>
 8012d9c:	0802319c 	.word	0x0802319c
 8012da0:	0802318c 	.word	0x0802318c

08012da4 <xmp3fixpt_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 8012da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da8:	b0a1      	sub	sp, #132	; 0x84
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8012daa:	4e9c      	ldr	r6, [pc, #624]	; (801301c <xmp3fixpt_IntensityProcMPEG2+0x278>)
	mOutL = mOutR = 0;

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
		tmp = (1 << sfjs->slen[r]) - 1;
 8012dac:	f04f 0e01 	mov.w	lr, #1
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8012db0:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
{
 8012db2:	e9dd 842a 	ldrd	r8, r4, [sp, #168]	; 0xa8
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8012db6:	46a4      	mov	ip, r4
 8012db8:	f104 0914 	add.w	r9, r4, #20
	for (k = r = 0; r < 4; r++) {
 8012dbc:	2400      	movs	r4, #0
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8012dbe:	f85c 5b04 	ldr.w	r5, [ip], #4
 8012dc2:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 8012dc6:	eb06 1585 	add.w	r5, r6, r5, lsl #6
 8012dca:	9503      	str	r5, [sp, #12]
		tmp = (1 << sfjs->slen[r]) - 1;
 8012dcc:	f85c 5b04 	ldr.w	r5, [ip], #4
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8012dd0:	f8dc 700c 	ldr.w	r7, [ip, #12]
		tmp = (1 << sfjs->slen[r]) - 1;
 8012dd4:	fa0e f505 	lsl.w	r5, lr, r5
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8012dd8:	2f00      	cmp	r7, #0
		tmp = (1 << sfjs->slen[r]) - 1;
 8012dda:	f105 35ff 	add.w	r5, r5, #4294967295
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8012dde:	dd0a      	ble.n	8012df6 <xmp3fixpt_IntensityProcMPEG2+0x52>
 8012de0:	4427      	add	r7, r4
 8012de2:	ae09      	add	r6, sp, #36	; 0x24
 8012de4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8012de8:	eb06 0687 	add.w	r6, r6, r7, lsl #2
			il[k] = tmp;
 8012dec:	f844 5b04 	str.w	r5, [r4], #4
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8012df0:	42b4      	cmp	r4, r6
 8012df2:	d1fb      	bne.n	8012dec <xmp3fixpt_IntensityProcMPEG2+0x48>
 8012df4:	463c      	mov	r4, r7
	for (k = r = 0; r < 4; r++) {
 8012df6:	45cc      	cmp	ip, r9
 8012df8:	d1e8      	bne.n	8012dcc <xmp3fixpt_IntensityProcMPEG2+0x28>
	}

	if (cbi[1].cbType == 0) {
 8012dfa:	f8d8 4018 	ldr.w	r4, [r8, #24]
 8012dfe:	2c00      	cmp	r4, #0
 8012e00:	f040 8082 	bne.w	8012f08 <xmp3fixpt_IntensityProcMPEG2+0x164>
		/* long blocks */
		il[21] = il[22] = 1;
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
		i = fh->sfBand->l[cbStartL];
 8012e04:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8012e06:	4627      	mov	r7, r4
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 8012e08:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 8012e0c:	f8d8 6014 	ldr.w	r6, [r8, #20]
 8012e10:	eb03 0902 	add.w	r9, r3, r2
 8012e14:	f1c3 0301 	rsb	r3, r3, #1
 8012e18:	9602      	str	r6, [sp, #8]
		il[21] = il[22] = 1;
 8012e1a:	2601      	movs	r6, #1
 8012e1c:	9304      	str	r3, [sp, #16]
 8012e1e:	ab09      	add	r3, sp, #36	; 0x24
 8012e20:	e9cd 661e 	strd	r6, r6, [sp, #120]	; 0x78
		i = fh->sfBand->l[cbStartL];
 8012e24:	1996      	adds	r6, r2, r6
 8012e26:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8012e2a:	f935 2016 	ldrsh.w	r2, [r5, r6, lsl #1]
		sampsLeft = nSamps - i;
 8012e2e:	eb05 0a46 	add.w	sl, r5, r6, lsl #1

		for(cb = cbStartL; cb < cbEndL; cb++) {
			sfIdx = sfis->l[cb];
			if (sfIdx == il[cb]) {
				fl = ISFIIP[midSideFlag][0];
				fr = ISFIIP[midSideFlag][1];
 8012e32:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8012e34:	9301      	str	r3, [sp, #4]
		sampsLeft = nSamps - i;
 8012e36:	eba1 0802 	sub.w	r8, r1, r2
				fr = ISFIIP[midSideFlag][1];
 8012e3a:	4b79      	ldr	r3, [pc, #484]	; (8013020 <xmp3fixpt_IntensityProcMPEG2+0x27c>)
	mOutL = mOutR = 0;
 8012e3c:	4621      	mov	r1, r4
				fr = ISFIIP[midSideFlag][1];
 8012e3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012e42:	e9cd 0305 	strd	r0, r3, [sp, #20]
		for(cb = cbStartL; cb < cbEndL; cb++) {
 8012e46:	9b04      	ldr	r3, [sp, #16]
 8012e48:	9802      	ldr	r0, [sp, #8]
 8012e4a:	444b      	add	r3, r9
 8012e4c:	4298      	cmp	r0, r3
 8012e4e:	db49      	blt.n	8012ee4 <xmp3fixpt_IntensityProcMPEG2+0x140>
			if (sfIdx == il[cb]) {
 8012e50:	9d01      	ldr	r5, [sp, #4]
			sfIdx = sfis->l[cb];
 8012e52:	f819 0f01 	ldrb.w	r0, [r9, #1]!
			if (sfIdx == il[cb]) {
 8012e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e5a:	4283      	cmp	r3, r0
 8012e5c:	9501      	str	r5, [sp, #4]
 8012e5e:	d047      	beq.n	8012ef0 <xmp3fixpt_IntensityProcMPEG2+0x14c>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
 8012e60:	1c43      	adds	r3, r0, #1
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8012e62:	07c6      	lsls	r6, r0, #31
				isf = (sfis->l[cb] + 1) >> 1;
 8012e64:	ea4f 0363 	mov.w	r3, r3, asr #1
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8012e68:	d549      	bpl.n	8012efe <xmp3fixpt_IntensityProcMPEG2+0x15a>
 8012e6a:	9d03      	ldr	r5, [sp, #12]
 8012e6c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8012e70:	462b      	mov	r3, r5
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8012e72:	681d      	ldr	r5, [r3, #0]
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 8012e74:	4653      	mov	r3, sl
 8012e76:	f9ba c002 	ldrsh.w	ip, [sl, #2]
 8012e7a:	f10a 0a02 	add.w	sl, sl, #2
 8012e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e82:	ebac 0c03 	sub.w	ip, ip, r3
 8012e86:	45c4      	cmp	ip, r8
 8012e88:	bfa8      	it	ge
 8012e8a:	46c4      	movge	ip, r8

			for(j = 0; j < n; j++, i++) {
 8012e8c:	f1bc 0f00 	cmp.w	ip, #0
 8012e90:	dd25      	ble.n	8012ede <xmp3fixpt_IntensityProcMPEG2+0x13a>
 8012e92:	eb0c 0e02 	add.w	lr, ip, r2
 8012e96:	9b05      	ldr	r3, [sp, #20]
 8012e98:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8012e9c:	eb03 068e 	add.w	r6, r3, lr, lsl #2
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 8012ea0:	f852 3b04 	ldr.w	r3, [r2], #4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012ea4:	fb85 b303 	smull	fp, r3, r5, r3
 8012ea8:	009b      	lsls	r3, r3, #2
	__asm__ volatile (
 8012eaa:	46bb      	mov	fp, r7
 8012eac:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8012eb0:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 8012eb4:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
 8012eb8:	ea41 010b 	orr.w	r1, r1, fp
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012ebc:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8012ec0:	fb80 b303 	smull	fp, r3, r0, r3
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8012ec4:	009b      	lsls	r3, r3, #2
	__asm__ volatile (
 8012ec6:	46bb      	mov	fp, r7
 8012ec8:	f842 3c04 	str.w	r3, [r2, #-4]
 8012ecc:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 8012ed0:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
			for(j = 0; j < n; j++, i++) {
 8012ed4:	4296      	cmp	r6, r2
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8012ed6:	ea44 040b 	orr.w	r4, r4, fp
			for(j = 0; j < n; j++, i++) {
 8012eda:	d1e1      	bne.n	8012ea0 <xmp3fixpt_IntensityProcMPEG2+0xfc>
 8012edc:	4672      	mov	r2, lr
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
			if (sampsLeft == 0)		
 8012ede:	ebb8 080c 	subs.w	r8, r8, ip
 8012ee2:	d1b0      	bne.n	8012e46 <xmp3fixpt_IntensityProcMPEG2+0xa2>
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
				}
			}
		}
	}
	mOut[0] = mOutL;
 8012ee4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
	mOut[1] = mOutR;
 8012ee6:	e9c3 4100 	strd	r4, r1, [r3]

	return;
}
 8012eea:	b021      	add	sp, #132	; 0x84
 8012eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fl = ISFIIP[midSideFlag][0];
 8012ef0:	4b4b      	ldr	r3, [pc, #300]	; (8013020 <xmp3fixpt_IntensityProcMPEG2+0x27c>)
 8012ef2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012ef4:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
				fr = ISFIIP[midSideFlag][1];
 8012ef8:	9b06      	ldr	r3, [sp, #24]
 8012efa:	685d      	ldr	r5, [r3, #4]
 8012efc:	e7ba      	b.n	8012e74 <xmp3fixpt_IntensityProcMPEG2+0xd0>
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8012efe:	9803      	ldr	r0, [sp, #12]
 8012f00:	eb00 0383 	add.w	r3, r0, r3, lsl #2
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8012f04:	6800      	ldr	r0, [r0, #0]
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8012f06:	e7b4      	b.n	8012e72 <xmp3fixpt_IntensityProcMPEG2+0xce>
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8012f08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012f0a:	3317      	adds	r3, #23
	mOutL = mOutR = 0;
 8012f0c:	2100      	movs	r1, #0
 8012f0e:	f500 6a10 	add.w	sl, r0, #2304	; 0x900
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8012f12:	9207      	str	r2, [sp, #28]
 8012f14:	f108 0204 	add.w	r2, r8, #4
 8012f18:	9301      	str	r3, [sp, #4]
		il[12] = 1;
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	9206      	str	r2, [sp, #24]
	mOutL = mOutR = 0;
 8012f1e:	460c      	mov	r4, r1
					fr = ISFIIP[midSideFlag][1];
 8012f20:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8012f22:	468e      	mov	lr, r1
		il[12] = 1;
 8012f24:	9315      	str	r3, [sp, #84]	; 0x54
					fr = ISFIIP[midSideFlag][1];
 8012f26:	4b3e      	ldr	r3, [pc, #248]	; (8013020 <xmp3fixpt_IntensityProcMPEG2+0x27c>)
		for(w = 0; w < 3; w++) {
 8012f28:	9104      	str	r1, [sp, #16]
					fr = ISFIIP[midSideFlag][1];
 8012f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f2e:	9305      	str	r3, [sp, #20]
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8012f30:	9a06      	ldr	r2, [sp, #24]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8012f32:	2703      	movs	r7, #3
 8012f34:	9e07      	ldr	r6, [sp, #28]
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8012f36:	6993      	ldr	r3, [r2, #24]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8012f38:	46bc      	mov	ip, r7
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 8012f3a:	f852 5b04 	ldr.w	r5, [r2], #4
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8012f3e:	9f04      	ldr	r7, [sp, #16]
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 8012f40:	9206      	str	r2, [sp, #24]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8012f42:	eb06 0243 	add.w	r2, r6, r3, lsl #1
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 8012f46:	9502      	str	r5, [sp, #8]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8012f48:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8012f4a:	fb12 720c 	smlabb	r2, r2, ip, r7
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8012f4e:	f103 0c01 	add.w	ip, r3, #1
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8012f52:	4565      	cmp	r5, ip
 8012f54:	db48      	blt.n	8012fe8 <xmp3fixpt_IntensityProcMPEG2+0x244>
 8012f56:	3318      	adds	r3, #24
 8012f58:	eb06 0843 	add.w	r8, r6, r3, lsl #1
 8012f5c:	ab09      	add	r3, sp, #36	; 0x24
 8012f5e:	eb03 098c 	add.w	r9, r3, ip, lsl #2
				sfIdx = sfis->s[cb][w];
 8012f62:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8012f66:	9d01      	ldr	r5, [sp, #4]
 8012f68:	5ced      	ldrb	r5, [r5, r3]
				if (sfIdx == il[cb]) {
 8012f6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8012f6e:	42ab      	cmp	r3, r5
 8012f70:	d048      	beq.n	8013004 <xmp3fixpt_IntensityProcMPEG2+0x260>
					isf = (sfis->s[cb][w] + 1) >> 1;
 8012f72:	1c6b      	adds	r3, r5, #1
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8012f74:	07ed      	lsls	r5, r5, #31
					isf = (sfis->s[cb][w] + 1) >> 1;
 8012f76:	ea4f 0363 	mov.w	r3, r3, asr #1
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8012f7a:	d54a      	bpl.n	8013012 <xmp3fixpt_IntensityProcMPEG2+0x26e>
 8012f7c:	9e03      	ldr	r6, [sp, #12]
 8012f7e:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8012f82:	4633      	mov	r3, r6
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8012f84:	681e      	ldr	r6, [r3, #0]
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8012f86:	4643      	mov	r3, r8
 8012f88:	f9b8 7002 	ldrsh.w	r7, [r8, #2]
 8012f8c:	f10c 0c01 	add.w	ip, ip, #1
 8012f90:	f108 0802 	add.w	r8, r8, #2
 8012f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f98:	1aff      	subs	r7, r7, r3
				for(j = 0; j < n; j++, i+=3) {
 8012f9a:	2f00      	cmp	r7, #0
 8012f9c:	dd21      	ble.n	8012fe2 <xmp3fixpt_IntensityProcMPEG2+0x23e>
 8012f9e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012fa2:	4417      	add	r7, r2
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012fa4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8012fa8:	fb86 b303 	smull	fp, r3, r6, r3
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 8012fac:	009b      	lsls	r3, r3, #2
	__asm__ volatile (
 8012fae:	46f3      	mov	fp, lr
 8012fb0:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
 8012fb4:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 8012fb8:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
 8012fbc:	ea41 010b 	orr.w	r1, r1, fp
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8012fc0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8012fc4:	fb85 b303 	smull	fp, r3, r5, r3
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8012fc8:	009b      	lsls	r3, r3, #2
	__asm__ volatile (
 8012fca:	46f3      	mov	fp, lr
 8012fcc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012fd0:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 8012fd4:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
				for(j = 0; j < n; j++, i+=3) {
 8012fd8:	3203      	adds	r2, #3
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8012fda:	ea44 040b 	orr.w	r4, r4, fp
				for(j = 0; j < n; j++, i+=3) {
 8012fde:	42ba      	cmp	r2, r7
 8012fe0:	d1e0      	bne.n	8012fa4 <xmp3fixpt_IntensityProcMPEG2+0x200>
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8012fe2:	9b02      	ldr	r3, [sp, #8]
 8012fe4:	4563      	cmp	r3, ip
 8012fe6:	dabc      	bge.n	8012f62 <xmp3fixpt_IntensityProcMPEG2+0x1be>
		for(w = 0; w < 3; w++) {
 8012fe8:	9b04      	ldr	r3, [sp, #16]
 8012fea:	9a01      	ldr	r2, [sp, #4]
 8012fec:	3301      	adds	r3, #1
 8012fee:	3201      	adds	r2, #1
 8012ff0:	2b03      	cmp	r3, #3
 8012ff2:	9304      	str	r3, [sp, #16]
 8012ff4:	9201      	str	r2, [sp, #4]
 8012ff6:	d19b      	bne.n	8012f30 <xmp3fixpt_IntensityProcMPEG2+0x18c>
	mOut[0] = mOutL;
 8012ff8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
	mOut[1] = mOutR;
 8012ffa:	e9c3 4100 	strd	r4, r1, [r3]
}
 8012ffe:	b021      	add	sp, #132	; 0x84
 8013000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					fl = ISFIIP[midSideFlag][0];
 8013004:	4b06      	ldr	r3, [pc, #24]	; (8013020 <xmp3fixpt_IntensityProcMPEG2+0x27c>)
 8013006:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8013008:	f853 5035 	ldr.w	r5, [r3, r5, lsl #3]
					fr = ISFIIP[midSideFlag][1];
 801300c:	9b05      	ldr	r3, [sp, #20]
 801300e:	685e      	ldr	r6, [r3, #4]
 8013010:	e7b9      	b.n	8012f86 <xmp3fixpt_IntensityProcMPEG2+0x1e2>
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8013012:	9d03      	ldr	r5, [sp, #12]
 8013014:	eb05 0383 	add.w	r3, r5, r3, lsl #2
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8013018:	682d      	ldr	r5, [r5, #0]
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 801301a:	e7b3      	b.n	8012f84 <xmp3fixpt_IntensityProcMPEG2+0x1e0>
 801301c:	080231d4 	.word	0x080231d4
 8013020:	0802318c 	.word	0x0802318c

08013024 <xmp3fixpt_Subband>:
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 8013024:	2800      	cmp	r0, #0
 8013026:	f000 8083 	beq.w	8013130 <xmp3fixpt_Subband+0x10c>
 801302a:	68c3      	ldr	r3, [r0, #12]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d07f      	beq.n	8013130 <xmp3fixpt_Subband+0x10c>
{
 8013030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 8013034:	6946      	ldr	r6, [r0, #20]
{
 8013036:	b085      	sub	sp, #20
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 8013038:	2e00      	cmp	r6, #0
 801303a:	d076      	beq.n	801312a <xmp3fixpt_Subband+0x106>
 801303c:	6987      	ldr	r7, [r0, #24]
 801303e:	2f00      	cmp	r7, #0
 8013040:	d073      	beq.n	801312a <xmp3fixpt_Subband+0x106>

	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);

	if (mp3DecInfo->nChans == 2) {
 8013042:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
		/* stereo */
		for (b = 0; b < BLOCK_SIZE; b++) {
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 8013046:	f507 5400 	add.w	r4, r7, #8192	; 0x2000
 801304a:	460d      	mov	r5, r1
	if (mp3DecInfo->nChans == 2) {
 801304c:	2b02      	cmp	r3, #2
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 801304e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
	if (mp3DecInfo->nChans == 2) {
 8013052:	d030      	beq.n	80130b6 <xmp3fixpt_Subband+0x92>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += (2 * NBANDS);
		}
	} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
 8013054:	f04f 0900 	mov.w	r9, #0
 8013058:	f506 5880 	add.w	r8, r6, #4096	; 0x1000
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 801305c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8013138 <xmp3fixpt_Subband+0x114>
 8013060:	9603      	str	r6, [sp, #12]
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 8013062:	f009 0b01 	and.w	fp, r9, #1
 8013066:	9b03      	ldr	r3, [sp, #12]
 8013068:	f8d8 6b18 	ldr.w	r6, [r8, #2840]	; 0xb18
 801306c:	4639      	mov	r1, r7
 801306e:	eb03 10c9 	add.w	r0, r3, r9, lsl #7
 8013072:	465b      	mov	r3, fp
 8013074:	9600      	str	r6, [sp, #0]
		for (b = 0; b < BLOCK_SIZE; b++) {
 8013076:	f109 0901 	add.w	r9, r9, #1
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 801307a:	f7fa fbab 	bl	800d7d4 <xmp3fixpt_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 801307e:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 8013082:	eb0b 130b 	add.w	r3, fp, fp, lsl #4
 8013086:	4628      	mov	r0, r5
 8013088:	4652      	mov	r2, sl
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += NBANDS;
 801308a:	3540      	adds	r5, #64	; 0x40
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 801308c:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 8013090:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8013094:	f7fe fb72 	bl	801177c <xmp3fixpt_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8013098:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 801309c:	f1b9 0f12 	cmp.w	r9, #18
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80130a0:	eba2 020b 	sub.w	r2, r2, fp
 80130a4:	f002 0207 	and.w	r2, r2, #7
 80130a8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 80130ac:	d1d9      	bne.n	8013062 <xmp3fixpt_Subband+0x3e>
		}
	}

	return 0;
 80130ae:	2000      	movs	r0, #0
}
 80130b0:	b005      	add	sp, #20
 80130b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b6:	f506 6310 	add.w	r3, r6, #2304	; 0x900
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 80130ba:	f107 0b80 	add.w	fp, r7, #128	; 0x80
		for (b = 0; b < BLOCK_SIZE; b++) {
 80130be:	f04f 0900 	mov.w	r9, #0
 80130c2:	f506 5880 	add.w	r8, r6, #4096	; 0x1000
 80130c6:	9303      	str	r3, [sp, #12]
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 80130c8:	f8d8 1b18 	ldr.w	r1, [r8, #2840]	; 0xb18
 80130cc:	f009 0301 	and.w	r3, r9, #1
 80130d0:	4630      	mov	r0, r6
 80130d2:	f109 0901 	add.w	r9, r9, #1
 80130d6:	9100      	str	r1, [sp, #0]
 80130d8:	4639      	mov	r1, r7
 80130da:	469a      	mov	sl, r3
 80130dc:	f7fa fb7a 	bl	800d7d4 <xmp3fixpt_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 80130e0:	f8d8 1b1c 	ldr.w	r1, [r8, #2844]	; 0xb1c
 80130e4:	f506 6010 	add.w	r0, r6, #2304	; 0x900
 80130e8:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80130ec:	4653      	mov	r3, sl
 80130ee:	9100      	str	r1, [sp, #0]
 80130f0:	4659      	mov	r1, fp
 80130f2:	f7fa fb6f 	bl	800d7d4 <xmp3fixpt_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 80130f6:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 80130fa:	eb0a 120a 	add.w	r2, sl, sl, lsl #4
 80130fe:	4628      	mov	r0, r5
		for (b = 0; b < BLOCK_SIZE; b++) {
 8013100:	3680      	adds	r6, #128	; 0x80
			pcmBuf += (2 * NBANDS);
 8013102:	3580      	adds	r5, #128	; 0x80
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 8013104:	eb01 1182 	add.w	r1, r1, r2, lsl #6
 8013108:	4a0b      	ldr	r2, [pc, #44]	; (8013138 <xmp3fixpt_Subband+0x114>)
 801310a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 801310e:	f7fe fcc3 	bl	8011a98 <xmp3fixpt_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8013112:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 8013116:	9b03      	ldr	r3, [sp, #12]
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8013118:	eba2 020a 	sub.w	r2, r2, sl
		for (b = 0; b < BLOCK_SIZE; b++) {
 801311c:	42b3      	cmp	r3, r6
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 801311e:	f002 0207 	and.w	r2, r2, #7
 8013122:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 8013126:	d1cf      	bne.n	80130c8 <xmp3fixpt_Subband+0xa4>
 8013128:	e7c1      	b.n	80130ae <xmp3fixpt_Subband+0x8a>
		return -1;
 801312a:	f04f 30ff 	mov.w	r0, #4294967295
 801312e:	e7bf      	b.n	80130b0 <xmp3fixpt_Subband+0x8c>
 8013130:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	08023554 	.word	0x08023554

0801313c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801313c:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 801313e:	2301      	movs	r3, #1
{
 8013140:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8013142:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013146:	f005 fdcd 	bl	8018ce4 <BSP_PlatformIsDetected>
 801314a:	b908      	cbnz	r0, 8013150 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 801314c:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8013150:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8013154:	b003      	add	sp, #12
 8013156:	f85d fb04 	ldr.w	pc, [sp], #4
 801315a:	bf00      	nop

0801315c <DrawString.constprop.0>:
		break;
	}
	}
}

void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
 801315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	hdma2d.Init.Mode = DMA2D_R2M;
 8013160:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8013164:	4d87      	ldr	r5, [pc, #540]	; (8013384 <DrawString.constprop.0+0x228>)
void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
 8013166:	b087      	sub	sp, #28
 8013168:	4604      	mov	r4, r0
	hdma2d.Init.Mode = DMA2D_R2M;
 801316a:	606b      	str	r3, [r5, #4]
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 801316c:	2302      	movs	r3, #2
	hdma2d.Init.OutputOffset = Xpos;
	hdma2d.Instance = DMA2D;
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801316e:	4628      	mov	r0, r5
void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
 8013170:	460f      	mov	r7, r1
 8013172:	4616      	mov	r6, r2
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 8013174:	e9c5 3102 	strd	r3, r1, [r5, #8]
	hdma2d.Instance = DMA2D;
 8013178:	4b83      	ldr	r3, [pc, #524]	; (8013388 <DrawString.constprop.0+0x22c>)
 801317a:	602b      	str	r3, [r5, #0]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801317c:	f7ee fba2 	bl	80018c4 <HAL_DMA2D_Init>
 8013180:	2800      	cmp	r0, #0
 8013182:	f000 80d6 	beq.w	8013332 <DrawString.constprop.0+0x1d6>
			{
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
			}
		}
	}
	int xpos = Xpos + 5;
 8013186:	1d7b      	adds	r3, r7, #5
	Ypos -= 4;
 8013188:	3e04      	subs	r6, #4
	uint16_t k = 0;
	int i = 0;
	int l = 0;
	while(str[l] != 0) {
 801318a:	7822      	ldrb	r2, [r4, #0]
	int xpos = Xpos + 5;
 801318c:	9302      	str	r3, [sp, #8]
	Ypos -= 4;
 801318e:	b2b3      	uxth	r3, r6
 8013190:	9303      	str	r3, [sp, #12]
	while(str[l] != 0) {
 8013192:	2a00      	cmp	r2, #0
 8013194:	f000 80c8 	beq.w	8013328 <DrawString.constprop.0+0x1cc>
 8013198:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8013394 <DrawString.constprop.0+0x238>
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
						}
						else {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 801319c:	2034      	movs	r0, #52	; 0x34
 801319e:	4e7b      	ldr	r6, [pc, #492]	; (801338c <DrawString.constprop.0+0x230>)
 80131a0:	4d7b      	ldr	r5, [pc, #492]	; (8013390 <DrawString.constprop.0+0x234>)
 80131a2:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8013398 <DrawString.constprop.0+0x23c>
 80131a6:	e00b      	b.n	80131c0 <DrawString.constprop.0+0x64>
				}
			}
			while(i < 12);
			xpos += i;
		}
		if(str[l] > 191) {
 80131a8:	2abf      	cmp	r2, #191	; 0xbf
 80131aa:	d85f      	bhi.n	801326c <DrawString.constprop.0+0x110>
				}
			}
			while(i < 12);
			xpos += i;
		}
		if(str[l] == 32) {
 80131ac:	2a20      	cmp	r2, #32
 80131ae:	d102      	bne.n	80131b6 <DrawString.constprop.0+0x5a>
			xpos += 5;
 80131b0:	9b02      	ldr	r3, [sp, #8]
 80131b2:	3305      	adds	r3, #5
 80131b4:	9302      	str	r3, [sp, #8]
	while(str[l] != 0) {
 80131b6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80131ba:	2a00      	cmp	r2, #0
 80131bc:	f000 80b4 	beq.w	8013328 <DrawString.constprop.0+0x1cc>
		if((str[l] > 32) && (str[l] < 128)) {
 80131c0:	f1a2 0121 	sub.w	r1, r2, #33	; 0x21
 80131c4:	b2cb      	uxtb	r3, r1
 80131c6:	2b5e      	cmp	r3, #94	; 0x5e
 80131c8:	d8ee      	bhi.n	80131a8 <DrawString.constprop.0+0x4c>
 80131ca:	9b02      	ldr	r3, [sp, #8]
 80131cc:	f04f 0c01 	mov.w	ip, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 80131d0:	f04f 0a1f 	mov.w	sl, #31
 80131d4:	3b01      	subs	r3, #1
 80131d6:	9305      	str	r3, [sp, #20]
 80131d8:	e012      	b.n	8013200 <DrawString.constprop.0+0xa4>
				if(font[(str[l]-33)*12+i] == 0) {
 80131da:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80131de:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80131e2:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
 80131e6:	b92b      	cbnz	r3, 80131f4 <DrawString.constprop.0+0x98>
					if(font[(str[l]-33)*12+i+1] == 0) {
 80131e8:	3701      	adds	r7, #1
 80131ea:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	f000 808f 	beq.w	8013312 <DrawString.constprop.0+0x1b6>
			while(i < 12);
 80131f4:	f10c 0c01 	add.w	ip, ip, #1
 80131f8:	f1bc 0f0d 	cmp.w	ip, #13
 80131fc:	f000 8087 	beq.w	801330e <DrawString.constprop.0+0x1b2>
				if(xpos < 470) {
 8013200:	9b02      	ldr	r3, [sp, #8]
 8013202:	f10c 37ff 	add.w	r7, ip, #4294967295
 8013206:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 801320a:	dae6      	bge.n	80131da <DrawString.constprop.0+0x7e>
 801320c:	9b05      	ldr	r3, [sp, #20]
 801320e:	9a03      	ldr	r2, [sp, #12]
 8013210:	eb03 0e0c 	add.w	lr, r3, ip
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013214:	f8cd c010 	str.w	ip, [sp, #16]
 8013218:	2300      	movs	r3, #0
 801321a:	e009      	b.n	8013230 <DrawString.constprop.0+0xd4>
					while(k < 13) {
 801321c:	3301      	adds	r3, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801321e:	f04f 3cff 	mov.w	ip, #4294967295
					while(k < 13) {
 8013222:	3a01      	subs	r2, #1
 8013224:	2b0d      	cmp	r3, #13
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013226:	f821 c01b 	strh.w	ip, [r1, fp, lsl #1]
					while(k < 13) {
 801322a:	d018      	beq.n	801325e <DrawString.constprop.0+0x102>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 801322c:	7821      	ldrb	r1, [r4, #0]
 801322e:	3921      	subs	r1, #33	; 0x21
 8013230:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013234:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8013238:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
 801323c:	4119      	asrs	r1, r3
 801323e:	f011 0f01 	tst.w	r1, #1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8013242:	7831      	ldrb	r1, [r6, #0]
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013244:	fb00 5101 	mla	r1, r0, r1, r5
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8013248:	e9d1 1b17 	ldrd	r1, fp, [r1, #92]	; 0x5c
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801324c:	fb0b eb02 	mla	fp, fp, r2, lr
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 8013250:	d1e4      	bne.n	801321c <DrawString.constprop.0+0xc0>
					while(k < 13) {
 8013252:	3301      	adds	r3, #1
 8013254:	3a01      	subs	r2, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 8013256:	f821 a01b 	strh.w	sl, [r1, fp, lsl #1]
					while(k < 13) {
 801325a:	2b0d      	cmp	r3, #13
 801325c:	d1e6      	bne.n	801322c <DrawString.constprop.0+0xd0>
				if(font[(str[l]-33)*12+i] == 0) {
 801325e:	7823      	ldrb	r3, [r4, #0]
 8013260:	f8dd c010 	ldr.w	ip, [sp, #16]
 8013264:	461a      	mov	r2, r3
 8013266:	f1a3 0121 	sub.w	r1, r3, #33	; 0x21
 801326a:	e7b6      	b.n	80131da <DrawString.constprop.0+0x7e>
 801326c:	9902      	ldr	r1, [sp, #8]
 801326e:	f04f 0c01 	mov.w	ip, #1
 8013272:	f1a2 03c0 	sub.w	r3, r2, #192	; 0xc0
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 8013276:	f04f 0e1f 	mov.w	lr, #31
 801327a:	3901      	subs	r1, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801327c:	4692      	mov	sl, r2
 801327e:	9105      	str	r1, [sp, #20]
 8013280:	e010      	b.n	80132a4 <DrawString.constprop.0+0x148>
				if(ru_font[(str[l]-192)*12+i] == 0) {
 8013282:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8013286:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 801328a:	f839 1017 	ldrh.w	r1, [r9, r7, lsl #1]
 801328e:	b921      	cbnz	r1, 801329a <DrawString.constprop.0+0x13e>
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
 8013290:	3701      	adds	r7, #1
 8013292:	f839 1017 	ldrh.w	r1, [r9, r7, lsl #1]
 8013296:	2900      	cmp	r1, #0
 8013298:	d049      	beq.n	801332e <DrawString.constprop.0+0x1d2>
			while(i < 12);
 801329a:	f10c 0c01 	add.w	ip, ip, #1
 801329e:	f1bc 0f0d 	cmp.w	ip, #13
 80132a2:	d03a      	beq.n	801331a <DrawString.constprop.0+0x1be>
				if(xpos < 470) {
 80132a4:	9a02      	ldr	r2, [sp, #8]
 80132a6:	f10c 37ff 	add.w	r7, ip, #4294967295
 80132aa:	f5b2 7feb 	cmp.w	r2, #470	; 0x1d6
 80132ae:	dae8      	bge.n	8013282 <DrawString.constprop.0+0x126>
 80132b0:	9a05      	ldr	r2, [sp, #20]
 80132b2:	9903      	ldr	r1, [sp, #12]
 80132b4:	eb02 0a0c 	add.w	sl, r2, ip
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80132b8:	f8cd c010 	str.w	ip, [sp, #16]
 80132bc:	2200      	movs	r2, #0
 80132be:	e009      	b.n	80132d4 <DrawString.constprop.0+0x178>
					while(k < 13) {
 80132c0:	3201      	adds	r2, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80132c2:	f04f 3cff 	mov.w	ip, #4294967295
					while(k < 13) {
 80132c6:	3901      	subs	r1, #1
 80132c8:	2a0d      	cmp	r2, #13
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80132ca:	f823 c01b 	strh.w	ip, [r3, fp, lsl #1]
					while(k < 13) {
 80132ce:	d018      	beq.n	8013302 <DrawString.constprop.0+0x1a6>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 80132d0:	7823      	ldrb	r3, [r4, #0]
 80132d2:	3bc0      	subs	r3, #192	; 0xc0
 80132d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80132d8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80132dc:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 80132e0:	4113      	asrs	r3, r2
 80132e2:	f013 0f01 	tst.w	r3, #1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 80132e6:	7833      	ldrb	r3, [r6, #0]
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80132e8:	fb00 5303 	mla	r3, r0, r3, r5
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 80132ec:	e9d3 3b17 	ldrd	r3, fp, [r3, #92]	; 0x5c
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80132f0:	fb0b ab01 	mla	fp, fp, r1, sl
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 80132f4:	d1e4      	bne.n	80132c0 <DrawString.constprop.0+0x164>
					while(k < 13) {
 80132f6:	3201      	adds	r2, #1
 80132f8:	3901      	subs	r1, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 80132fa:	f823 e01b 	strh.w	lr, [r3, fp, lsl #1]
					while(k < 13) {
 80132fe:	2a0d      	cmp	r2, #13
 8013300:	d1e6      	bne.n	80132d0 <DrawString.constprop.0+0x174>
				if(ru_font[(str[l]-192)*12+i] == 0) {
 8013302:	7823      	ldrb	r3, [r4, #0]
 8013304:	f8dd c010 	ldr.w	ip, [sp, #16]
 8013308:	469a      	mov	sl, r3
 801330a:	3bc0      	subs	r3, #192	; 0xc0
 801330c:	e7b9      	b.n	8013282 <DrawString.constprop.0+0x126>
 801330e:	f04f 0c0c 	mov.w	ip, #12
			xpos += i;
 8013312:	9b02      	ldr	r3, [sp, #8]
 8013314:	4463      	add	r3, ip
 8013316:	9302      	str	r3, [sp, #8]
 8013318:	e746      	b.n	80131a8 <DrawString.constprop.0+0x4c>
 801331a:	4652      	mov	r2, sl
 801331c:	f04f 0c0c 	mov.w	ip, #12
			xpos += i;
 8013320:	9b02      	ldr	r3, [sp, #8]
 8013322:	4463      	add	r3, ip
 8013324:	9302      	str	r3, [sp, #8]
 8013326:	e741      	b.n	80131ac <DrawString.constprop.0+0x50>
		}
		l++;
	}
}
 8013328:	b007      	add	sp, #28
 801332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						i++;
 801332e:	4652      	mov	r2, sl
						break;
 8013330:	e7f6      	b.n	8013320 <DrawString.constprop.0+0x1c4>
		if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK)
 8013332:	f8df 8058 	ldr.w	r8, [pc, #88]	; 801338c <DrawString.constprop.0+0x230>
 8013336:	4628      	mov	r0, r5
 8013338:	f898 1000 	ldrb.w	r1, [r8]
 801333c:	f7ee fc24 	bl	8001b88 <HAL_DMA2D_ConfigLayer>
 8013340:	2800      	cmp	r0, #0
 8013342:	f47f af20 	bne.w	8013186 <DrawString.constprop.0+0x2a>
			if (HAL_DMA2D_Start(&hdma2d, fontcolor, hltdc.LayerCfg[ActiveLayer].FBStartAdress + 2*(480*(Ypos-20)+Xpos),
 8013346:	f898 1000 	ldrb.w	r1, [r8]
 801334a:	2034      	movs	r0, #52	; 0x34
 801334c:	f1a6 0314 	sub.w	r3, r6, #20
 8013350:	4a0f      	ldr	r2, [pc, #60]	; (8013390 <DrawString.constprop.0+0x234>)
 8013352:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8013356:	fb00 2201 	mla	r2, r0, r1, r2
 801335a:	21ff      	movs	r1, #255	; 0xff
 801335c:	4628      	mov	r0, r5
 801335e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 8013362:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8013364:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8013368:	2314      	movs	r3, #20
 801336a:	9300      	str	r3, [sp, #0]
 801336c:	f5c7 73f0 	rsb	r3, r7, #480	; 0x1e0
 8013370:	f7ee fafe 	bl	8001970 <HAL_DMA2D_Start>
 8013374:	2800      	cmp	r0, #0
 8013376:	f47f af06 	bne.w	8013186 <DrawString.constprop.0+0x2a>
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801337a:	210a      	movs	r1, #10
 801337c:	4628      	mov	r0, r5
 801337e:	f7ee fb6d 	bl	8001a5c <HAL_DMA2D_PollForTransfer>
 8013382:	e700      	b.n	8013186 <DrawString.constprop.0+0x2a>
 8013384:	200009ac 	.word	0x200009ac
 8013388:	4002b000 	.word	0x4002b000
 801338c:	20000b44 	.word	0x20000b44
 8013390:	20000a9c 	.word	0x20000a9c
 8013394:	08023ad4 	.word	0x08023ad4
 8013398:	08024668 	.word	0x08024668

0801339c <DrawString.constprop.1>:
void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
 801339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hdma2d.Init.Mode = DMA2D_R2M;
 80133a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80133a4:	4d86      	ldr	r5, [pc, #536]	; (80135c0 <DrawString.constprop.1+0x224>)
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 80133a6:	2302      	movs	r3, #2
void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
 80133a8:	b087      	sub	sp, #28
 80133aa:	4604      	mov	r4, r0
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80133ac:	4628      	mov	r0, r5
void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
 80133ae:	460e      	mov	r6, r1
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 80133b0:	e9c5 2301 	strd	r2, r3, [r5, #4]
	hdma2d.Init.OutputOffset = Xpos;
 80133b4:	220b      	movs	r2, #11
	hdma2d.Instance = DMA2D;
 80133b6:	4b83      	ldr	r3, [pc, #524]	; (80135c4 <DrawString.constprop.1+0x228>)
	hdma2d.Init.OutputOffset = Xpos;
 80133b8:	60ea      	str	r2, [r5, #12]
	hdma2d.Instance = DMA2D;
 80133ba:	602b      	str	r3, [r5, #0]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80133bc:	f7ee fa82 	bl	80018c4 <HAL_DMA2D_Init>
 80133c0:	2800      	cmp	r0, #0
 80133c2:	f000 80d6 	beq.w	8013572 <DrawString.constprop.1+0x1d6>
	Ypos -= 4;
 80133c6:	3e04      	subs	r6, #4
	while(str[l] != 0) {
 80133c8:	7822      	ldrb	r2, [r4, #0]
	Ypos -= 4;
 80133ca:	b2b3      	uxth	r3, r6
 80133cc:	9303      	str	r3, [sp, #12]
	while(str[l] != 0) {
 80133ce:	2a00      	cmp	r2, #0
 80133d0:	f000 80ca 	beq.w	8013568 <DrawString.constprop.1+0x1cc>
	int xpos = Xpos + 5;
 80133d4:	2310      	movs	r3, #16
 80133d6:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 80135d0 <DrawString.constprop.1+0x234>
 80133da:	4e7b      	ldr	r6, [pc, #492]	; (80135c8 <DrawString.constprop.1+0x22c>)
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 80133dc:	2034      	movs	r0, #52	; 0x34
 80133de:	4d7b      	ldr	r5, [pc, #492]	; (80135cc <DrawString.constprop.1+0x230>)
 80133e0:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 80135d4 <DrawString.constprop.1+0x238>
	int xpos = Xpos + 5;
 80133e4:	9302      	str	r3, [sp, #8]
 80133e6:	e00b      	b.n	8013400 <DrawString.constprop.1+0x64>
		if(str[l] > 191) {
 80133e8:	2abf      	cmp	r2, #191	; 0xbf
 80133ea:	d85f      	bhi.n	80134ac <DrawString.constprop.1+0x110>
		if(str[l] == 32) {
 80133ec:	2a20      	cmp	r2, #32
 80133ee:	d102      	bne.n	80133f6 <DrawString.constprop.1+0x5a>
			xpos += 5;
 80133f0:	9b02      	ldr	r3, [sp, #8]
 80133f2:	3305      	adds	r3, #5
 80133f4:	9302      	str	r3, [sp, #8]
	while(str[l] != 0) {
 80133f6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80133fa:	2a00      	cmp	r2, #0
 80133fc:	f000 80b4 	beq.w	8013568 <DrawString.constprop.1+0x1cc>
		if((str[l] > 32) && (str[l] < 128)) {
 8013400:	f1a2 0121 	sub.w	r1, r2, #33	; 0x21
 8013404:	b2cb      	uxtb	r3, r1
 8013406:	2b5e      	cmp	r3, #94	; 0x5e
 8013408:	d8ee      	bhi.n	80133e8 <DrawString.constprop.1+0x4c>
 801340a:	9b02      	ldr	r3, [sp, #8]
 801340c:	f04f 0c01 	mov.w	ip, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 8013410:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8013414:	3b01      	subs	r3, #1
 8013416:	9305      	str	r3, [sp, #20]
 8013418:	e012      	b.n	8013440 <DrawString.constprop.1+0xa4>
				if(font[(str[l]-33)*12+i] == 0) {
 801341a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 801341e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8013422:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
 8013426:	b92b      	cbnz	r3, 8013434 <DrawString.constprop.1+0x98>
					if(font[(str[l]-33)*12+i+1] == 0) {
 8013428:	3701      	adds	r7, #1
 801342a:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
 801342e:	2b00      	cmp	r3, #0
 8013430:	f000 808f 	beq.w	8013552 <DrawString.constprop.1+0x1b6>
			while(i < 12);
 8013434:	f10c 0c01 	add.w	ip, ip, #1
 8013438:	f1bc 0f0d 	cmp.w	ip, #13
 801343c:	f000 8087 	beq.w	801354e <DrawString.constprop.1+0x1b2>
				if(xpos < 470) {
 8013440:	9b02      	ldr	r3, [sp, #8]
 8013442:	f10c 37ff 	add.w	r7, ip, #4294967295
 8013446:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 801344a:	dae6      	bge.n	801341a <DrawString.constprop.1+0x7e>
 801344c:	9b05      	ldr	r3, [sp, #20]
 801344e:	9a03      	ldr	r2, [sp, #12]
 8013450:	eb03 0e0c 	add.w	lr, r3, ip
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013454:	f8cd c010 	str.w	ip, [sp, #16]
 8013458:	2300      	movs	r3, #0
 801345a:	e009      	b.n	8013470 <DrawString.constprop.1+0xd4>
					while(k < 13) {
 801345c:	3301      	adds	r3, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801345e:	f04f 0c00 	mov.w	ip, #0
					while(k < 13) {
 8013462:	3a01      	subs	r2, #1
 8013464:	2b0d      	cmp	r3, #13
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013466:	f821 c01b 	strh.w	ip, [r1, fp, lsl #1]
					while(k < 13) {
 801346a:	d018      	beq.n	801349e <DrawString.constprop.1+0x102>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 801346c:	7821      	ldrb	r1, [r4, #0]
 801346e:	3921      	subs	r1, #33	; 0x21
 8013470:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013474:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8013478:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
 801347c:	4119      	asrs	r1, r3
 801347e:	f011 0f01 	tst.w	r1, #1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8013482:	7831      	ldrb	r1, [r6, #0]
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013484:	fb00 5101 	mla	r1, r0, r1, r5
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8013488:	e9d1 1b17 	ldrd	r1, fp, [r1, #92]	; 0x5c
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801348c:	fb0b eb02 	mla	fp, fp, r2, lr
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 8013490:	d1e4      	bne.n	801345c <DrawString.constprop.1+0xc0>
					while(k < 13) {
 8013492:	3301      	adds	r3, #1
 8013494:	3a01      	subs	r2, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 8013496:	f821 a01b 	strh.w	sl, [r1, fp, lsl #1]
					while(k < 13) {
 801349a:	2b0d      	cmp	r3, #13
 801349c:	d1e6      	bne.n	801346c <DrawString.constprop.1+0xd0>
				if(font[(str[l]-33)*12+i] == 0) {
 801349e:	7823      	ldrb	r3, [r4, #0]
 80134a0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80134a4:	461a      	mov	r2, r3
 80134a6:	f1a3 0121 	sub.w	r1, r3, #33	; 0x21
 80134aa:	e7b6      	b.n	801341a <DrawString.constprop.1+0x7e>
 80134ac:	9902      	ldr	r1, [sp, #8]
 80134ae:	f04f 0c01 	mov.w	ip, #1
 80134b2:	f1a2 03c0 	sub.w	r3, r2, #192	; 0xc0
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 80134b6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80134ba:	3901      	subs	r1, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80134bc:	4692      	mov	sl, r2
 80134be:	9105      	str	r1, [sp, #20]
 80134c0:	e010      	b.n	80134e4 <DrawString.constprop.1+0x148>
				if(ru_font[(str[l]-192)*12+i] == 0) {
 80134c2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80134c6:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 80134ca:	f839 1017 	ldrh.w	r1, [r9, r7, lsl #1]
 80134ce:	b921      	cbnz	r1, 80134da <DrawString.constprop.1+0x13e>
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
 80134d0:	3701      	adds	r7, #1
 80134d2:	f839 1017 	ldrh.w	r1, [r9, r7, lsl #1]
 80134d6:	2900      	cmp	r1, #0
 80134d8:	d049      	beq.n	801356e <DrawString.constprop.1+0x1d2>
			while(i < 12);
 80134da:	f10c 0c01 	add.w	ip, ip, #1
 80134de:	f1bc 0f0d 	cmp.w	ip, #13
 80134e2:	d03a      	beq.n	801355a <DrawString.constprop.1+0x1be>
				if(xpos < 470) {
 80134e4:	9a02      	ldr	r2, [sp, #8]
 80134e6:	f10c 37ff 	add.w	r7, ip, #4294967295
 80134ea:	f5b2 7feb 	cmp.w	r2, #470	; 0x1d6
 80134ee:	dae8      	bge.n	80134c2 <DrawString.constprop.1+0x126>
 80134f0:	9a05      	ldr	r2, [sp, #20]
 80134f2:	9903      	ldr	r1, [sp, #12]
 80134f4:	eb02 0a0c 	add.w	sl, r2, ip
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80134f8:	f8cd c010 	str.w	ip, [sp, #16]
 80134fc:	2200      	movs	r2, #0
 80134fe:	e009      	b.n	8013514 <DrawString.constprop.1+0x178>
					while(k < 13) {
 8013500:	3201      	adds	r2, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013502:	f04f 0c00 	mov.w	ip, #0
					while(k < 13) {
 8013506:	3901      	subs	r1, #1
 8013508:	2a0d      	cmp	r2, #13
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801350a:	f823 c01b 	strh.w	ip, [r3, fp, lsl #1]
					while(k < 13) {
 801350e:	d018      	beq.n	8013542 <DrawString.constprop.1+0x1a6>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 8013510:	7823      	ldrb	r3, [r4, #0]
 8013512:	3bc0      	subs	r3, #192	; 0xc0
 8013514:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013518:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801351c:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8013520:	4113      	asrs	r3, r2
 8013522:	f013 0f01 	tst.w	r3, #1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8013526:	7833      	ldrb	r3, [r6, #0]
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013528:	fb00 5303 	mla	r3, r0, r3, r5
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801352c:	e9d3 3b17 	ldrd	r3, fp, [r3, #92]	; 0x5c
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8013530:	fb0b ab01 	mla	fp, fp, r1, sl
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 8013534:	d1e4      	bne.n	8013500 <DrawString.constprop.1+0x164>
					while(k < 13) {
 8013536:	3201      	adds	r2, #1
 8013538:	3901      	subs	r1, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 801353a:	f823 e01b 	strh.w	lr, [r3, fp, lsl #1]
					while(k < 13) {
 801353e:	2a0d      	cmp	r2, #13
 8013540:	d1e6      	bne.n	8013510 <DrawString.constprop.1+0x174>
				if(ru_font[(str[l]-192)*12+i] == 0) {
 8013542:	7823      	ldrb	r3, [r4, #0]
 8013544:	f8dd c010 	ldr.w	ip, [sp, #16]
 8013548:	469a      	mov	sl, r3
 801354a:	3bc0      	subs	r3, #192	; 0xc0
 801354c:	e7b9      	b.n	80134c2 <DrawString.constprop.1+0x126>
 801354e:	f04f 0c0c 	mov.w	ip, #12
			xpos += i;
 8013552:	9b02      	ldr	r3, [sp, #8]
 8013554:	4463      	add	r3, ip
 8013556:	9302      	str	r3, [sp, #8]
 8013558:	e746      	b.n	80133e8 <DrawString.constprop.1+0x4c>
 801355a:	4652      	mov	r2, sl
 801355c:	f04f 0c0c 	mov.w	ip, #12
			xpos += i;
 8013560:	9b02      	ldr	r3, [sp, #8]
 8013562:	4463      	add	r3, ip
 8013564:	9302      	str	r3, [sp, #8]
 8013566:	e741      	b.n	80133ec <DrawString.constprop.1+0x50>
}
 8013568:	b007      	add	sp, #28
 801356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						i++;
 801356e:	4652      	mov	r2, sl
						break;
 8013570:	e7f6      	b.n	8013560 <DrawString.constprop.1+0x1c4>
		if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK)
 8013572:	4f15      	ldr	r7, [pc, #84]	; (80135c8 <DrawString.constprop.1+0x22c>)
 8013574:	4628      	mov	r0, r5
 8013576:	7839      	ldrb	r1, [r7, #0]
 8013578:	f7ee fb06 	bl	8001b88 <HAL_DMA2D_ConfigLayer>
 801357c:	2800      	cmp	r0, #0
 801357e:	f47f af22 	bne.w	80133c6 <DrawString.constprop.1+0x2a>
			if (HAL_DMA2D_Start(&hdma2d, fontcolor, hltdc.LayerCfg[ActiveLayer].FBStartAdress + 2*(480*(Ypos-20)+Xpos),
 8013582:	f1a6 0314 	sub.w	r3, r6, #20
 8013586:	7839      	ldrb	r1, [r7, #0]
 8013588:	2034      	movs	r0, #52	; 0x34
 801358a:	4a10      	ldr	r2, [pc, #64]	; (80135cc <DrawString.constprop.1+0x230>)
 801358c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8013590:	fb00 2201 	mla	r2, r0, r1, r2
 8013594:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013598:	019b      	lsls	r3, r3, #6
 801359a:	4628      	mov	r0, r5
 801359c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801359e:	3316      	adds	r3, #22
 80135a0:	441a      	add	r2, r3
 80135a2:	2314      	movs	r3, #20
 80135a4:	9300      	str	r3, [sp, #0]
 80135a6:	f240 13d5 	movw	r3, #469	; 0x1d5
 80135aa:	f7ee f9e1 	bl	8001970 <HAL_DMA2D_Start>
 80135ae:	2800      	cmp	r0, #0
 80135b0:	f47f af09 	bne.w	80133c6 <DrawString.constprop.1+0x2a>
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80135b4:	210a      	movs	r1, #10
 80135b6:	4628      	mov	r0, r5
 80135b8:	f7ee fa50 	bl	8001a5c <HAL_DMA2D_PollForTransfer>
 80135bc:	e703      	b.n	80133c6 <DrawString.constprop.1+0x2a>
 80135be:	bf00      	nop
 80135c0:	200009ac 	.word	0x200009ac
 80135c4:	4002b000 	.word	0x4002b000
 80135c8:	20000b44 	.word	0x20000b44
 80135cc:	20000a9c 	.word	0x20000a9c
 80135d0:	08023ad4 	.word	0x08023ad4
 80135d4:	08024668 	.word	0x08024668

080135d8 <VLine.constprop.0>:
void VLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
 80135d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80135dc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8013660 <VLine.constprop.0+0x88>
void VLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
 80135e0:	4616      	mov	r6, r2
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80135e2:	4b1c      	ldr	r3, [pc, #112]	; (8013654 <VLine.constprop.0+0x7c>)
 80135e4:	2234      	movs	r2, #52	; 0x34
 80135e6:	f898 4000 	ldrb.w	r4, [r8]
void VLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
 80135ea:	b082      	sub	sp, #8
 80135ec:	4605      	mov	r5, r0
 80135ee:	460f      	mov	r7, r1
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80135f0:	fb02 3304 	mla	r3, r2, r4, r3
    hdma2d.Init.Mode = DMA2D_R2M;
 80135f4:	4c18      	ldr	r4, [pc, #96]	; (8013658 <VLine.constprop.0+0x80>)
 80135f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 80135fa:	4620      	mov	r0, r4
    hdma2d.Init.Mode = DMA2D_R2M;
 80135fc:	6062      	str	r2, [r4, #4]
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80135fe:	e9d3 a917 	ldrd	sl, r9, [r3, #92]	; 0x5c
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 8013602:	2302      	movs	r3, #2
 8013604:	60a3      	str	r3, [r4, #8]
    hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - 1;
 8013606:	f109 33ff 	add.w	r3, r9, #4294967295
 801360a:	60e3      	str	r3, [r4, #12]
    hdma2d.Instance = DMA2D;
 801360c:	4b13      	ldr	r3, [pc, #76]	; (801365c <VLine.constprop.0+0x84>)
 801360e:	6023      	str	r3, [r4, #0]
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8013610:	f7ee f958 	bl	80018c4 <HAL_DMA2D_Init>
 8013614:	b110      	cbz	r0, 801361c <VLine.constprop.0+0x44>
}
 8013616:	b002      	add	sp, #8
 8013618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 801361c:	f898 1000 	ldrb.w	r1, [r8]
 8013620:	4620      	mov	r0, r4
 8013622:	f7ee fab1 	bl	8001b88 <HAL_DMA2D_ConfigLayer>
 8013626:	2800      	cmp	r0, #0
 8013628:	d1f5      	bne.n	8013616 <VLine.constprop.0+0x3e>
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 801362a:	2304      	movs	r3, #4
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 801362c:	fb09 5207 	mla	r2, r9, r7, r5
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 8013630:	4631      	mov	r1, r6
 8013632:	4620      	mov	r0, r4
 8013634:	9300      	str	r3, [sp, #0]
 8013636:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801363a:	2301      	movs	r3, #1
 801363c:	f7ee f998 	bl	8001970 <HAL_DMA2D_Start>
 8013640:	2800      	cmp	r0, #0
 8013642:	d1e8      	bne.n	8013616 <VLine.constprop.0+0x3e>
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8013644:	210a      	movs	r1, #10
 8013646:	4620      	mov	r0, r4
}
 8013648:	b002      	add	sp, #8
 801364a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801364e:	f7ee ba05 	b.w	8001a5c <HAL_DMA2D_PollForTransfer>
 8013652:	bf00      	nop
 8013654:	20000a9c 	.word	0x20000a9c
 8013658:	200009ac 	.word	0x200009ac
 801365c:	4002b000 	.word	0x4002b000
 8013660:	20000b44 	.word	0x20000b44

08013664 <dbgAddText>:
{
 8013664:	b538      	push	{r3, r4, r5, lr}
	if (DebugLines < MAXDEBUG){
 8013666:	4d08      	ldr	r5, [pc, #32]	; (8013688 <dbgAddText+0x24>)
 8013668:	782c      	ldrb	r4, [r5, #0]
 801366a:	2c09      	cmp	r4, #9
 801366c:	d900      	bls.n	8013670 <dbgAddText+0xc>
}
 801366e:	bd38      	pop	{r3, r4, r5, pc}
		strcpy(DebugText[DebugLines],text+'\0');
 8013670:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8013674:	4a05      	ldr	r2, [pc, #20]	; (801368c <dbgAddText+0x28>)
		DebugLines++;
 8013676:	3401      	adds	r4, #1
		strcpy(DebugText[DebugLines],text+'\0');
 8013678:	4601      	mov	r1, r0
 801367a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801367e:	18d0      	adds	r0, r2, r3
 8013680:	f00b fea5 	bl	801f3ce <strcpy>
		DebugLines++;
 8013684:	702c      	strb	r4, [r5, #0]
}
 8013686:	bd38      	pop	{r3, r4, r5, pc}
 8013688:	200007b0 	.word	0x200007b0
 801368c:	200007b4 	.word	0x200007b4

08013690 <ClearLayer>:
{
 8013690:	b510      	push	{r4, lr}
	hdma2d.Init.OutputOffset = 0;
 8013692:	4c11      	ldr	r4, [pc, #68]	; (80136d8 <ClearLayer+0x48>)
 8013694:	2300      	movs	r3, #0
{
 8013696:	b082      	sub	sp, #8
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8013698:	4620      	mov	r0, r4
	hdma2d.Init.OutputOffset = 0;
 801369a:	60e3      	str	r3, [r4, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 801369c:	f7ee f912 	bl	80018c4 <HAL_DMA2D_Init>
 80136a0:	b108      	cbz	r0, 80136a6 <ClearLayer+0x16>
}
 80136a2:	b002      	add	sp, #8
 80136a4:	bd10      	pop	{r4, pc}
		if(HAL_DMA2D_Start(&hdma2d, 0, hltdc.LayerCfg[ActiveLayer].FBStartAdress,
 80136a6:	4b0d      	ldr	r3, [pc, #52]	; (80136dc <ClearLayer+0x4c>)
 80136a8:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80136ac:	4a0c      	ldr	r2, [pc, #48]	; (80136e0 <ClearLayer+0x50>)
 80136ae:	4601      	mov	r1, r0
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	fb0c 2203 	mla	r2, ip, r3, r2
 80136b6:	e9d2 3018 	ldrd	r3, r0, [r2, #96]	; 0x60
 80136ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80136bc:	9000      	str	r0, [sp, #0]
 80136be:	4620      	mov	r0, r4
 80136c0:	f7ee f956 	bl	8001970 <HAL_DMA2D_Start>
 80136c4:	2800      	cmp	r0, #0
 80136c6:	d1ec      	bne.n	80136a2 <ClearLayer+0x12>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 80136c8:	2164      	movs	r1, #100	; 0x64
 80136ca:	4620      	mov	r0, r4
}
 80136cc:	b002      	add	sp, #8
 80136ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 80136d2:	f7ee b9c3 	b.w	8001a5c <HAL_DMA2D_PollForTransfer>
 80136d6:	bf00      	nop
 80136d8:	200009ac 	.word	0x200009ac
 80136dc:	20000b44 	.word	0x20000b44
 80136e0:	20000a9c 	.word	0x20000a9c

080136e4 <ChangeLayers>:
{
 80136e4:	b538      	push	{r3, r4, r5, lr}
	if(ActiveLayer == 0) {
 80136e6:	4c0d      	ldr	r4, [pc, #52]	; (801371c <ChangeLayers+0x38>)
 80136e8:	7825      	ldrb	r5, [r4, #0]
 80136ea:	b98d      	cbnz	r5, 8013710 <ChangeLayers+0x2c>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer++);
 80136ec:	2301      	movs	r3, #1
 80136ee:	462a      	mov	r2, r5
 80136f0:	21ff      	movs	r1, #255	; 0xff
 80136f2:	480b      	ldr	r0, [pc, #44]	; (8013720 <ChangeLayers+0x3c>)
 80136f4:	7023      	strb	r3, [r4, #0]
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 80136f6:	f7f0 fb05 	bl	8003d04 <HAL_LTDC_SetAlpha_NoReload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
 80136fa:	7822      	ldrb	r2, [r4, #0]
 80136fc:	2100      	movs	r1, #0
 80136fe:	4808      	ldr	r0, [pc, #32]	; (8013720 <ChangeLayers+0x3c>)
 8013700:	f7f0 fb00 	bl	8003d04 <HAL_LTDC_SetAlpha_NoReload>
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8013704:	2102      	movs	r1, #2
 8013706:	4806      	ldr	r0, [pc, #24]	; (8013720 <ChangeLayers+0x3c>)
}
 8013708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 801370c:	f7f0 bad4 	b.w	8003cb8 <HAL_LTDC_Reload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 8013710:	1e6b      	subs	r3, r5, #1
 8013712:	462a      	mov	r2, r5
 8013714:	21ff      	movs	r1, #255	; 0xff
 8013716:	4802      	ldr	r0, [pc, #8]	; (8013720 <ChangeLayers+0x3c>)
 8013718:	7023      	strb	r3, [r4, #0]
 801371a:	e7ec      	b.n	80136f6 <ChangeLayers+0x12>
 801371c:	20000b44 	.word	0x20000b44
 8013720:	20000a9c 	.word	0x20000a9c

08013724 <SetBeatGrid>:
	if(position != file_pos_wide) {
 8013724:	4a4b      	ldr	r2, [pc, #300]	; (8013854 <SetBeatGrid+0x130>)
 8013726:	4b4c      	ldr	r3, [pc, #304]	; (8013858 <SetBeatGrid+0x134>)
 8013728:	6811      	ldr	r1, [r2, #0]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	4299      	cmp	r1, r3
{
 801372e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(position != file_pos_wide) {
 8013732:	f000 8087 	beq.w	8013844 <SetBeatGrid+0x120>
		if(stretch > 1) {
 8013736:	4949      	ldr	r1, [pc, #292]	; (801385c <SetBeatGrid+0x138>)
 8013738:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		position = file_pos_wide;
 801373c:	6013      	str	r3, [r2, #0]
		if(stretch > 1) {
 801373e:	ed91 7a00 	vldr	s14, [r1]
 8013742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801374a:	dd1f      	ble.n	801378c <SetBeatGrid+0x68>
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 801374c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013750:	6811      	ldr	r1, [r2, #0]
 8013752:	4e43      	ldr	r6, [pc, #268]	; (8013860 <SetBeatGrid+0x13c>)
 8013754:	ee17 0a90 	vmov	r0, s15
 8013758:	6833      	ldr	r3, [r6, #0]
 801375a:	fb91 f4f0 	sdiv	r4, r1, r0
 801375e:	fb00 1114 	mls	r1, r0, r4, r1
 8013762:	fb93 f4f0 	sdiv	r4, r3, r0
 8013766:	fb00 3314 	mls	r3, r0, r4, r3
 801376a:	4299      	cmp	r1, r3
 801376c:	d00e      	beq.n	801378c <SetBeatGrid+0x68>
				position++;
 801376e:	6813      	ldr	r3, [r2, #0]
 8013770:	3301      	adds	r3, #1
 8013772:	6013      	str	r3, [r2, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 8013774:	6811      	ldr	r1, [r2, #0]
 8013776:	6833      	ldr	r3, [r6, #0]
 8013778:	fb91 f5f0 	sdiv	r5, r1, r0
 801377c:	fb93 f4f0 	sdiv	r4, r3, r0
 8013780:	fb00 1115 	mls	r1, r0, r5, r1
 8013784:	fb00 3314 	mls	r3, r0, r4, r3
 8013788:	4299      	cmp	r1, r3
 801378a:	d1f0      	bne.n	801376e <SetBeatGrid+0x4a>
	int32_t check = position + (-240)*stretch;
 801378c:	edd2 7a00 	vldr	s15, [r2]
	beat = 0;
 8013790:	2100      	movs	r1, #0
	int32_t check = position + (-240)*stretch;
 8013792:	eddf 6a34 	vldr	s13, [pc, #208]	; 8013864 <SetBeatGrid+0x140>
 8013796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	beat = 0;
 801379a:	4d33      	ldr	r5, [pc, #204]	; (8013868 <SetBeatGrid+0x144>)
	first_beat = 0;
 801379c:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8013878 <SetBeatGrid+0x154>
	beat = 0;
 80137a0:	6029      	str	r1, [r5, #0]
	int32_t check = position + (-240)*stretch;
 80137a2:	eee7 7a26 	vfma.f32	s15, s14, s13
	first_beat = 0;
 80137a6:	f8ce 1000 	str.w	r1, [lr]
	int32_t check = position + (-240)*stretch;
 80137aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137ae:	ee17 0a90 	vmov	r0, s15
	if(check > 0) {
 80137b2:	4288      	cmp	r0, r1
 80137b4:	dd1e      	ble.n	80137f4 <SetBeatGrid+0xd0>
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
 80137b6:	4c2d      	ldr	r4, [pc, #180]	; (801386c <SetBeatGrid+0x148>)
 80137b8:	2696      	movs	r6, #150	; 0x96
 80137ba:	4f2d      	ldr	r7, [pc, #180]	; (8013870 <SetBeatGrid+0x14c>)
 80137bc:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80137c0:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 80137c4:	fb06 f303 	mul.w	r3, r6, r3
 80137c8:	fba7 c303 	umull	ip, r3, r7, r3
 80137cc:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
 80137d0:	d310      	bcc.n	80137f4 <SetBeatGrid+0xd0>
 80137d2:	f8d4 c500 	ldr.w	ip, [r4, #1280]	; 0x500
 80137d6:	4c27      	ldr	r4, [pc, #156]	; (8013874 <SetBeatGrid+0x150>)
 80137d8:	f854 3f04 	ldr.w	r3, [r4, #4]!
			first_beat++;
 80137dc:	3101      	adds	r1, #1
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
 80137de:	fb06 f303 	mul.w	r3, r6, r3
 80137e2:	fba7 8303 	umull	r8, r3, r7, r3
 80137e6:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
 80137ea:	d301      	bcc.n	80137f0 <SetBeatGrid+0xcc>
 80137ec:	4561      	cmp	r1, ip
 80137ee:	d9f3      	bls.n	80137d8 <SetBeatGrid+0xb4>
 80137f0:	f8ce 1000 	str.w	r1, [lr]
	if(position > 0) {
 80137f4:	6813      	ldr	r3, [r2, #0]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	dd22      	ble.n	8013840 <SetBeatGrid+0x11c>
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
 80137fa:	491c      	ldr	r1, [pc, #112]	; (801386c <SetBeatGrid+0x148>)
 80137fc:	f04f 0c96 	mov.w	ip, #150	; 0x96
 8013800:	4e1b      	ldr	r6, [pc, #108]	; (8013870 <SetBeatGrid+0x14c>)
 8013802:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8013806:	6810      	ldr	r0, [r2, #0]
 8013808:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 801380c:	fb0c f303 	mul.w	r3, ip, r3
 8013810:	fba6 4303 	umull	r4, r3, r6, r3
 8013814:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
 8013818:	d318      	bcc.n	801384c <SetBeatGrid+0x128>
 801381a:	f8d1 e500 	ldr.w	lr, [r1, #1280]	; 0x500
 801381e:	2100      	movs	r1, #0
 8013820:	4814      	ldr	r0, [pc, #80]	; (8013874 <SetBeatGrid+0x150>)
 8013822:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8013826:	460f      	mov	r7, r1
 8013828:	6814      	ldr	r4, [r2, #0]
			beat++;
 801382a:	3101      	adds	r1, #1
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
 801382c:	fb0c f303 	mul.w	r3, ip, r3
 8013830:	fba6 8303 	umull	r8, r3, r6, r3
 8013834:	ebb4 1f93 	cmp.w	r4, r3, lsr #6
 8013838:	d301      	bcc.n	801383e <SetBeatGrid+0x11a>
 801383a:	458e      	cmp	lr, r1
 801383c:	d2f1      	bcs.n	8013822 <SetBeatGrid+0xfe>
		beat--;
 801383e:	602f      	str	r7, [r5, #0]
}
 8013840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(stretch > 1) {
 8013844:	4b05      	ldr	r3, [pc, #20]	; (801385c <SetBeatGrid+0x138>)
 8013846:	ed93 7a00 	vldr	s14, [r3]
 801384a:	e79f      	b.n	801378c <SetBeatGrid+0x68>
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
 801384c:	f04f 37ff 	mov.w	r7, #4294967295
 8013850:	e7f5      	b.n	801383e <SetBeatGrid+0x11a>
 8013852:	bf00      	nop
 8013854:	200009a8 	.word	0x200009a8
 8013858:	2000e9a4 	.word	0x2000e9a4
 801385c:	20000028 	.word	0x20000028
 8013860:	20000980 	.word	0x20000980
 8013864:	c3700000 	.word	0xc3700000
 8013868:	2000097c 	.word	0x2000097c
 801386c:	20015208 	.word	0x20015208
 8013870:	10624dd3 	.word	0x10624dd3
 8013874:	200169cc 	.word	0x200169cc
 8013878:	2000099c 	.word	0x2000099c

0801387c <VLine>:
{
 801387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8013880:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8013904 <VLine+0x88>
{
 8013884:	461f      	mov	r7, r3
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8013886:	4c1c      	ldr	r4, [pc, #112]	; (80138f8 <VLine+0x7c>)
 8013888:	2334      	movs	r3, #52	; 0x34
 801388a:	f899 c000 	ldrb.w	ip, [r9]
{
 801388e:	b083      	sub	sp, #12
 8013890:	4605      	mov	r5, r0
 8013892:	4688      	mov	r8, r1
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8013894:	fb03 4c0c 	mla	ip, r3, ip, r4
    hdma2d.Init.Mode = DMA2D_R2M;
 8013898:	4c18      	ldr	r4, [pc, #96]	; (80138fc <VLine+0x80>)
 801389a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 801389e:	4616      	mov	r6, r2
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 80138a0:	4620      	mov	r0, r4
    hdma2d.Init.Mode = DMA2D_R2M;
 80138a2:	6063      	str	r3, [r4, #4]
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 80138a4:	2302      	movs	r3, #2
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80138a6:	e9dc ba17 	ldrd	fp, sl, [ip, #92]	; 0x5c
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 80138aa:	60a3      	str	r3, [r4, #8]
    hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - 1;
 80138ac:	f10a 33ff 	add.w	r3, sl, #4294967295
 80138b0:	60e3      	str	r3, [r4, #12]
    hdma2d.Instance = DMA2D;
 80138b2:	4b13      	ldr	r3, [pc, #76]	; (8013900 <VLine+0x84>)
 80138b4:	6023      	str	r3, [r4, #0]
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 80138b6:	f7ee f805 	bl	80018c4 <HAL_DMA2D_Init>
 80138ba:	b110      	cbz	r0, 80138c2 <VLine+0x46>
}
 80138bc:	b003      	add	sp, #12
 80138be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 80138c2:	f899 1000 	ldrb.w	r1, [r9]
 80138c6:	4620      	mov	r0, r4
 80138c8:	f7ee f95e 	bl	8001b88 <HAL_DMA2D_ConfigLayer>
 80138cc:	2800      	cmp	r0, #0
 80138ce:	d1f5      	bne.n	80138bc <VLine+0x40>
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80138d0:	fb0a 5208 	mla	r2, sl, r8, r5
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 80138d4:	4639      	mov	r1, r7
 80138d6:	2301      	movs	r3, #1
 80138d8:	4620      	mov	r0, r4
 80138da:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 80138de:	9600      	str	r6, [sp, #0]
 80138e0:	f7ee f846 	bl	8001970 <HAL_DMA2D_Start>
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d1e9      	bne.n	80138bc <VLine+0x40>
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80138e8:	210a      	movs	r1, #10
 80138ea:	4620      	mov	r0, r4
}
 80138ec:	b003      	add	sp, #12
 80138ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80138f2:	f7ee b8b3 	b.w	8001a5c <HAL_DMA2D_PollForTransfer>
 80138f6:	bf00      	nop
 80138f8:	20000a9c 	.word	0x20000a9c
 80138fc:	200009ac 	.word	0x200009ac
 8013900:	4002b000 	.word	0x4002b000
 8013904:	20000b44 	.word	0x20000b44

08013908 <HLine>:
{
 8013908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 801390c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8013990 <HLine+0x88>
{
 8013910:	461e      	mov	r6, r3
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8013912:	4c1c      	ldr	r4, [pc, #112]	; (8013984 <HLine+0x7c>)
 8013914:	2334      	movs	r3, #52	; 0x34
 8013916:	f899 c000 	ldrb.w	ip, [r9]
{
 801391a:	4617      	mov	r7, r2
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 801391c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
{
 8013920:	b083      	sub	sp, #12
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8013922:	fb03 4c0c 	mla	ip, r3, ip, r4
	hdma2d.Init.Mode = DMA2D_R2M;
 8013926:	4c18      	ldr	r4, [pc, #96]	; (8013988 <HLine+0x80>)
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 8013928:	2302      	movs	r3, #2
{
 801392a:	4605      	mov	r5, r0
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 801392c:	4620      	mov	r0, r4
{
 801392e:	4688      	mov	r8, r1
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 8013930:	e9c4 2301 	strd	r2, r3, [r4, #4]
	hdma2d.Init.OutputOffset = 0;
 8013934:	2300      	movs	r3, #0
 8013936:	60e3      	str	r3, [r4, #12]
	hdma2d.Instance = DMA2D;
 8013938:	4b14      	ldr	r3, [pc, #80]	; (801398c <HLine+0x84>)
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 801393a:	e9dc ab17 	ldrd	sl, fp, [ip, #92]	; 0x5c
	hdma2d.Instance = DMA2D;
 801393e:	6023      	str	r3, [r4, #0]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8013940:	f7ed ffc0 	bl	80018c4 <HAL_DMA2D_Init>
 8013944:	b110      	cbz	r0, 801394c <HLine+0x44>
}
 8013946:	b003      	add	sp, #12
 8013948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 801394c:	f899 1000 	ldrb.w	r1, [r9]
 8013950:	4620      	mov	r0, r4
 8013952:	f7ee f919 	bl	8001b88 <HAL_DMA2D_ConfigLayer>
 8013956:	2800      	cmp	r0, #0
 8013958:	d1f5      	bne.n	8013946 <HLine+0x3e>
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 801395a:	fb0b 5208 	mla	r2, fp, r8, r5
	   		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, Length, 1) == HAL_OK) {
 801395e:	2501      	movs	r5, #1
 8013960:	463b      	mov	r3, r7
 8013962:	4631      	mov	r1, r6
 8013964:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8013968:	4620      	mov	r0, r4
 801396a:	9500      	str	r5, [sp, #0]
 801396c:	f7ee f800 	bl	8001970 <HAL_DMA2D_Start>
 8013970:	2800      	cmp	r0, #0
 8013972:	d1e8      	bne.n	8013946 <HLine+0x3e>
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8013974:	210a      	movs	r1, #10
 8013976:	4620      	mov	r0, r4
}
 8013978:	b003      	add	sp, #12
 801397a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801397e:	f7ee b86d 	b.w	8001a5c <HAL_DMA2D_PollForTransfer>
 8013982:	bf00      	nop
 8013984:	20000a9c 	.word	0x20000a9c
 8013988:	200009ac 	.word	0x200009ac
 801398c:	4002b000 	.word	0x4002b000
 8013990:	20000b44 	.word	0x20000b44

08013994 <DrawDigit>:
{
 8013994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013998:	ed2d 8b02 	vpush	{d8}
 801399c:	b085      	sub	sp, #20
 801399e:	461e      	mov	r6, r3
 80139a0:	460d      	mov	r5, r1
 80139a2:	4614      	mov	r4, r2
 80139a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch(digit) {
 80139a6:	2809      	cmp	r0, #9
 80139a8:	f200 83c7 	bhi.w	801413a <DrawDigit+0x7a6>
 80139ac:	e8df f010 	tbh	[pc, r0, lsl #1]
 80139b0:	00fb0083 	.word	0x00fb0083
 80139b4:	01900126 	.word	0x01900126
 80139b8:	023f01ef 	.word	0x023f01ef
 80139bc:	030a029a 	.word	0x030a029a
 80139c0:	000a0342 	.word	0x000a0342
		HLine(Xpos + 1, Ypos, width - 2, color);
 80139c4:	f101 0801 	add.w	r8, r1, #1
 80139c8:	1eb7      	subs	r7, r6, #2
 80139ca:	b2b6      	uxth	r6, r6
 80139cc:	4621      	mov	r1, r4
 80139ce:	b2bf      	uxth	r7, r7
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 80139d0:	f105 0a02 	add.w	sl, r5, #2
		HLine(Xpos + 1, Ypos, width - 2, color);
 80139d4:	fa1f f888 	uxth.w	r8, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 80139d8:	f104 0901 	add.w	r9, r4, #1
		HLine(Xpos + 1, Ypos, width - 2, color);
 80139dc:	463a      	mov	r2, r7
 80139de:	9302      	str	r3, [sp, #8]
 80139e0:	4640      	mov	r0, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 80139e2:	fa1f fa8a 	uxth.w	sl, sl
		HLine(Xpos + 1, Ypos, width - 2, color);
 80139e6:	f7ff ff8f 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 80139ea:	9601      	str	r6, [sp, #4]
 80139ec:	3e04      	subs	r6, #4
 80139ee:	fa1f f989 	uxth.w	r9, r9
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 80139f2:	f104 0b02 	add.w	fp, r4, #2
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 80139f6:	9b02      	ldr	r3, [sp, #8]
 80139f8:	b2b6      	uxth	r6, r6
 80139fa:	4649      	mov	r1, r9
 80139fc:	4650      	mov	r0, sl
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 80139fe:	fa1f fb8b 	uxth.w	fp, fp
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013a02:	4632      	mov	r2, r6
 8013a04:	f7ff ff80 	bl	8013908 <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8013a08:	4628      	mov	r0, r5
 8013a0a:	9b02      	ldr	r3, [sp, #8]
 8013a0c:	463a      	mov	r2, r7
 8013a0e:	4649      	mov	r1, r9
 8013a10:	f7ff ff34 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013a14:	4640      	mov	r0, r8
 8013a16:	9b02      	ldr	r3, [sp, #8]
 8013a18:	4632      	mov	r2, r6
 8013a1a:	4659      	mov	r1, fp
 8013a1c:	f7ff ff2e 	bl	801387c <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8013a20:	9b01      	ldr	r3, [sp, #4]
 8013a22:	4640      	mov	r0, r8
 8013a24:	463a      	mov	r2, r7
 8013a26:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013a2a:	9b02      	ldr	r3, [sp, #8]
 8013a2c:	b2a4      	uxth	r4, r4
 8013a2e:	1ea1      	subs	r1, r4, #2
 8013a30:	b289      	uxth	r1, r1
 8013a32:	f7ff ff69 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8013a36:	1ee1      	subs	r1, r4, #3
 8013a38:	9b02      	ldr	r3, [sp, #8]
 8013a3a:	4632      	mov	r2, r6
 8013a3c:	b289      	uxth	r1, r1
 8013a3e:	4650      	mov	r0, sl
 8013a40:	f7ff ff62 	bl	8013908 <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013a44:	9b01      	ldr	r3, [sp, #4]
 8013a46:	4640      	mov	r0, r8
 8013a48:	463a      	mov	r2, r7
 8013a4a:	1ae4      	subs	r4, r4, r3
 8013a4c:	9b02      	ldr	r3, [sp, #8]
 8013a4e:	b2a4      	uxth	r4, r4
 8013a50:	1e61      	subs	r1, r4, #1
 8013a52:	b289      	uxth	r1, r1
 8013a54:	f7ff ff58 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8013a58:	1ea1      	subs	r1, r4, #2
 8013a5a:	4650      	mov	r0, sl
 8013a5c:	9b02      	ldr	r3, [sp, #8]
 8013a5e:	b289      	uxth	r1, r1
 8013a60:	4632      	mov	r2, r6
 8013a62:	f7ff ff51 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013a66:	9b01      	ldr	r3, [sp, #4]
 8013a68:	4621      	mov	r1, r4
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013a6a:	3401      	adds	r4, #1
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013a6c:	441d      	add	r5, r3
 8013a6e:	9b02      	ldr	r3, [sp, #8]
 8013a70:	463a      	mov	r2, r7
 8013a72:	b2ad      	uxth	r5, r5
 8013a74:	9301      	str	r3, [sp, #4]
 8013a76:	f105 38ff 	add.w	r8, r5, #4294967295
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013a7a:	3d02      	subs	r5, #2
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013a7c:	fa1f f888 	uxth.w	r8, r8
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013a80:	b2ad      	uxth	r5, r5
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013a82:	4640      	mov	r0, r8
 8013a84:	f7ff fefa 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013a88:	9b01      	ldr	r3, [sp, #4]
 8013a8a:	b2a1      	uxth	r1, r4
 8013a8c:	4632      	mov	r2, r6
 8013a8e:	4628      	mov	r0, r5
 8013a90:	f7ff fef4 	bl	801387c <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8013a94:	9b01      	ldr	r3, [sp, #4]
 8013a96:	463a      	mov	r2, r7
 8013a98:	4649      	mov	r1, r9
 8013a9a:	4640      	mov	r0, r8
 8013a9c:	f7ff feee 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8013aa0:	9b01      	ldr	r3, [sp, #4]
 8013aa2:	4632      	mov	r2, r6
 8013aa4:	4659      	mov	r1, fp
 8013aa6:	4628      	mov	r0, r5
}
 8013aa8:	b005      	add	sp, #20
 8013aaa:	ecbd 8b02 	vpop	{d8}
 8013aae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8013ab2:	f7ff bee3 	b.w	801387c <VLine>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013ab6:	f101 0801 	add.w	r8, r1, #1
 8013aba:	1eb7      	subs	r7, r6, #2
 8013abc:	b2b6      	uxth	r6, r6
 8013abe:	4621      	mov	r1, r4
 8013ac0:	b2bf      	uxth	r7, r7
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013ac2:	f105 0b02 	add.w	fp, r5, #2
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013ac6:	fa1f f888 	uxth.w	r8, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013aca:	f104 0901 	add.w	r9, r4, #1
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013ace:	463a      	mov	r2, r7
 8013ad0:	9302      	str	r3, [sp, #8]
 8013ad2:	4640      	mov	r0, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013ad4:	fa1f f989 	uxth.w	r9, r9
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013ad8:	f7ff ff16 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013adc:	9601      	str	r6, [sp, #4]
 8013ade:	3e04      	subs	r6, #4
 8013ae0:	fa1f fb8b 	uxth.w	fp, fp
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013ae4:	f104 0a02 	add.w	sl, r4, #2
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013ae8:	9b02      	ldr	r3, [sp, #8]
 8013aea:	b2b6      	uxth	r6, r6
 8013aec:	4649      	mov	r1, r9
 8013aee:	4658      	mov	r0, fp
 8013af0:	4632      	mov	r2, r6
 8013af2:	f7ff ff09 	bl	8013908 <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8013af6:	4628      	mov	r0, r5
 8013af8:	9b02      	ldr	r3, [sp, #8]
 8013afa:	463a      	mov	r2, r7
 8013afc:	4649      	mov	r1, r9
 8013afe:	f7ff febd 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013b02:	4640      	mov	r0, r8
 8013b04:	fa1f f18a 	uxth.w	r1, sl
 8013b08:	9b02      	ldr	r3, [sp, #8]
 8013b0a:	4632      	mov	r2, r6
 8013b0c:	ee08 1a10 	vmov	s16, r1
 8013b10:	f7ff feb4 	bl	801387c <VLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 8013b14:	9b01      	ldr	r3, [sp, #4]
 8013b16:	4628      	mov	r0, r5
 8013b18:	463a      	mov	r2, r7
 8013b1a:	441c      	add	r4, r3
 8013b1c:	9b02      	ldr	r3, [sp, #8]
 8013b1e:	fa1f fa84 	uxth.w	sl, r4
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8013b22:	f10a 0401 	add.w	r4, sl, #1
		VLine(Xpos, Ypos + width, width - 2, color);
 8013b26:	4651      	mov	r1, sl
 8013b28:	f7ff fea8 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8013b2c:	4640      	mov	r0, r8
 8013b2e:	b2a4      	uxth	r4, r4
 8013b30:	9b02      	ldr	r3, [sp, #8]
 8013b32:	4632      	mov	r2, r6
 8013b34:	4621      	mov	r1, r4
 8013b36:	f7ff fea1 	bl	801387c <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8013b3a:	9b01      	ldr	r3, [sp, #4]
 8013b3c:	4640      	mov	r0, r8
 8013b3e:	463a      	mov	r2, r7
 8013b40:	eb03 080a 	add.w	r8, r3, sl
 8013b44:	9b02      	ldr	r3, [sp, #8]
 8013b46:	fa1f f888 	uxth.w	r8, r8
 8013b4a:	f1a8 0102 	sub.w	r1, r8, #2
 8013b4e:	b289      	uxth	r1, r1
 8013b50:	f7ff feda 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8013b54:	f1a8 0103 	sub.w	r1, r8, #3
 8013b58:	4658      	mov	r0, fp
 8013b5a:	9b02      	ldr	r3, [sp, #8]
 8013b5c:	b289      	uxth	r1, r1
 8013b5e:	4632      	mov	r2, r6
 8013b60:	f7ff fed2 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013b64:	9b01      	ldr	r3, [sp, #4]
 8013b66:	4651      	mov	r1, sl
 8013b68:	463a      	mov	r2, r7
 8013b6a:	441d      	add	r5, r3
 8013b6c:	9b02      	ldr	r3, [sp, #8]
 8013b6e:	b2ad      	uxth	r5, r5
 8013b70:	9301      	str	r3, [sp, #4]
 8013b72:	f105 38ff 	add.w	r8, r5, #4294967295
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013b76:	3d02      	subs	r5, #2
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013b78:	fa1f f888 	uxth.w	r8, r8
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013b7c:	b2ad      	uxth	r5, r5
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013b7e:	4640      	mov	r0, r8
 8013b80:	f7ff fe7c 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013b84:	4621      	mov	r1, r4
 8013b86:	9b01      	ldr	r3, [sp, #4]
 8013b88:	4632      	mov	r2, r6
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	f7ff fe76 	bl	801387c <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8013b90:	9b01      	ldr	r3, [sp, #4]
 8013b92:	463a      	mov	r2, r7
 8013b94:	4649      	mov	r1, r9
 8013b96:	4640      	mov	r0, r8
 8013b98:	f7ff fe70 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8013b9c:	9b01      	ldr	r3, [sp, #4]
 8013b9e:	4632      	mov	r2, r6
 8013ba0:	ee18 1a10 	vmov	r1, s16
 8013ba4:	e77f      	b.n	8013aa6 <DrawDigit+0x112>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013ba6:	4435      	add	r5, r6
 8013ba8:	b2b7      	uxth	r7, r6
 8013baa:	eb06 0804 	add.w	r8, r6, r4
 8013bae:	3e02      	subs	r6, #2
 8013bb0:	b2ad      	uxth	r5, r5
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013bb2:	3f04      	subs	r7, #4
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013bb4:	fa1f f888 	uxth.w	r8, r8
 8013bb8:	9301      	str	r3, [sp, #4]
 8013bba:	f105 39ff 	add.w	r9, r5, #4294967295
 8013bbe:	b2b6      	uxth	r6, r6
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013bc0:	3d02      	subs	r5, #2
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013bc2:	4641      	mov	r1, r8
 8013bc4:	fa1f f989 	uxth.w	r9, r9
 8013bc8:	4632      	mov	r2, r6
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013bca:	b2ad      	uxth	r5, r5
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013bcc:	4648      	mov	r0, r9
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013bce:	b2bf      	uxth	r7, r7
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013bd0:	f7ff fe54 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013bd4:	f108 0101 	add.w	r1, r8, #1
 8013bd8:	9b01      	ldr	r3, [sp, #4]
 8013bda:	4628      	mov	r0, r5
 8013bdc:	b289      	uxth	r1, r1
 8013bde:	463a      	mov	r2, r7
 8013be0:	f7ff fe4c 	bl	801387c <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8013be4:	1c61      	adds	r1, r4, #1
 8013be6:	4632      	mov	r2, r6
 8013be8:	4648      	mov	r0, r9
 8013bea:	b289      	uxth	r1, r1
 8013bec:	9b01      	ldr	r3, [sp, #4]
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8013bee:	f7ff fe45 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8013bf2:	1ca1      	adds	r1, r4, #2
 8013bf4:	9b01      	ldr	r3, [sp, #4]
 8013bf6:	463a      	mov	r2, r7
 8013bf8:	b289      	uxth	r1, r1
 8013bfa:	e754      	b.n	8013aa6 <DrawDigit+0x112>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013bfc:	f101 0801 	add.w	r8, r1, #1
 8013c00:	1eb7      	subs	r7, r6, #2
 8013c02:	b2b6      	uxth	r6, r6
 8013c04:	4621      	mov	r1, r4
 8013c06:	b2bf      	uxth	r7, r7
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013c08:	f105 0a02 	add.w	sl, r5, #2
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013c0c:	fa1f f888 	uxth.w	r8, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013c10:	f104 0b01 	add.w	fp, r4, #1
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013c14:	463a      	mov	r2, r7
 8013c16:	9302      	str	r3, [sp, #8]
 8013c18:	4640      	mov	r0, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013c1a:	fa1f fa8a 	uxth.w	sl, sl
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013c1e:	f7ff fe73 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013c22:	9601      	str	r6, [sp, #4]
 8013c24:	3e04      	subs	r6, #4
 8013c26:	fa1f f28b 	uxth.w	r2, fp
 8013c2a:	9b02      	ldr	r3, [sp, #8]
 8013c2c:	4650      	mov	r0, sl
 8013c2e:	b2b6      	uxth	r6, r6
 8013c30:	4611      	mov	r1, r2
 8013c32:	ee08 2a10 	vmov	s16, r2
 8013c36:	4632      	mov	r2, r6
 8013c38:	f7ff fe66 	bl	8013908 <HLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 8013c3c:	9b01      	ldr	r3, [sp, #4]
 8013c3e:	4628      	mov	r0, r5
 8013c40:	463a      	mov	r2, r7
 8013c42:	1919      	adds	r1, r3, r4
 8013c44:	9b02      	ldr	r3, [sp, #8]
 8013c46:	fa1f fb81 	uxth.w	fp, r1
 8013c4a:	4659      	mov	r1, fp
 8013c4c:	f7ff fe16 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8013c50:	f10b 0101 	add.w	r1, fp, #1
 8013c54:	9b02      	ldr	r3, [sp, #8]
 8013c56:	4632      	mov	r2, r6
 8013c58:	b289      	uxth	r1, r1
 8013c5a:	4640      	mov	r0, r8
 8013c5c:	f7ff fe0e 	bl	801387c <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8013c60:	9b01      	ldr	r3, [sp, #4]
 8013c62:	463a      	mov	r2, r7
 8013c64:	4640      	mov	r0, r8
 8013c66:	eb03 090b 	add.w	r9, r3, fp
 8013c6a:	9b02      	ldr	r3, [sp, #8]
 8013c6c:	fa1f f989 	uxth.w	r9, r9
 8013c70:	f1a9 0102 	sub.w	r1, r9, #2
 8013c74:	b289      	uxth	r1, r1
 8013c76:	f7ff fe47 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8013c7a:	f1a9 0103 	sub.w	r1, r9, #3
 8013c7e:	9b02      	ldr	r3, [sp, #8]
 8013c80:	4632      	mov	r2, r6
 8013c82:	b289      	uxth	r1, r1
 8013c84:	4650      	mov	r0, sl
 8013c86:	f7ff fe3f 	bl	8013908 <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013c8a:	f10b 31ff 	add.w	r1, fp, #4294967295
 8013c8e:	4640      	mov	r0, r8
 8013c90:	9b02      	ldr	r3, [sp, #8]
 8013c92:	b289      	uxth	r1, r1
 8013c94:	463a      	mov	r2, r7
 8013c96:	f7ff fe37 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8013c9a:	f1ab 0102 	sub.w	r1, fp, #2
 8013c9e:	4650      	mov	r0, sl
 8013ca0:	9b02      	ldr	r3, [sp, #8]
 8013ca2:	b289      	uxth	r1, r1
 8013ca4:	4632      	mov	r2, r6
 8013ca6:	f7ff fe2f 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8013caa:	9b01      	ldr	r3, [sp, #4]
 8013cac:	463a      	mov	r2, r7
 8013cae:	ee18 1a10 	vmov	r1, s16
 8013cb2:	441d      	add	r5, r3
 8013cb4:	9b02      	ldr	r3, [sp, #8]
 8013cb6:	b2ad      	uxth	r5, r5
 8013cb8:	9301      	str	r3, [sp, #4]
 8013cba:	1e68      	subs	r0, r5, #1
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8013cbc:	3d02      	subs	r5, #2
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8013cbe:	b280      	uxth	r0, r0
 8013cc0:	f7ff fddc 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8013cc4:	1ca1      	adds	r1, r4, #2
 8013cc6:	9b01      	ldr	r3, [sp, #4]
 8013cc8:	4632      	mov	r2, r6
 8013cca:	b289      	uxth	r1, r1
 8013ccc:	b2a8      	uxth	r0, r5
 8013cce:	e6eb      	b.n	8013aa8 <DrawDigit+0x114>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013cd0:	f101 0a01 	add.w	sl, r1, #1
 8013cd4:	f1a6 0802 	sub.w	r8, r6, #2
 8013cd8:	b2b6      	uxth	r6, r6
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013cda:	f105 0902 	add.w	r9, r5, #2
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013cde:	fa1f f888 	uxth.w	r8, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013ce2:	f104 0b01 	add.w	fp, r4, #1
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013ce6:	fa1f fa8a 	uxth.w	sl, sl
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013cea:	1f37      	subs	r7, r6, #4
 8013cec:	fa1f f989 	uxth.w	r9, r9
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013cf0:	4621      	mov	r1, r4
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013cf2:	b2bf      	uxth	r7, r7
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013cf4:	4650      	mov	r0, sl
 8013cf6:	4642      	mov	r2, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013cf8:	fa1f fb8b 	uxth.w	fp, fp
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013cfc:	9301      	str	r3, [sp, #4]
 8013cfe:	f7ff fe03 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013d02:	9b01      	ldr	r3, [sp, #4]
 8013d04:	4648      	mov	r0, r9
 8013d06:	4659      	mov	r1, fp
 8013d08:	463a      	mov	r2, r7
 8013d0a:	9302      	str	r3, [sp, #8]
 8013d0c:	f7ff fdfc 	bl	8013908 <HLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8013d10:	9601      	str	r6, [sp, #4]
 8013d12:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8013d16:	9b02      	ldr	r3, [sp, #8]
 8013d18:	4642      	mov	r2, r8
 8013d1a:	b2b6      	uxth	r6, r6
 8013d1c:	4650      	mov	r0, sl
 8013d1e:	1eb1      	subs	r1, r6, #2
 8013d20:	b289      	uxth	r1, r1
 8013d22:	f7ff fdf1 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8013d26:	1ef1      	subs	r1, r6, #3
 8013d28:	4648      	mov	r0, r9
 8013d2a:	9b02      	ldr	r3, [sp, #8]
 8013d2c:	b289      	uxth	r1, r1
 8013d2e:	463a      	mov	r2, r7
 8013d30:	f7ff fdea 	bl	8013908 <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013d34:	9b01      	ldr	r3, [sp, #4]
 8013d36:	4650      	mov	r0, sl
 8013d38:	4642      	mov	r2, r8
 8013d3a:	1af6      	subs	r6, r6, r3
 8013d3c:	9b02      	ldr	r3, [sp, #8]
 8013d3e:	b2b6      	uxth	r6, r6
 8013d40:	1e71      	subs	r1, r6, #1
 8013d42:	b289      	uxth	r1, r1
 8013d44:	f7ff fde0 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8013d48:	1eb1      	subs	r1, r6, #2
 8013d4a:	4648      	mov	r0, r9
 8013d4c:	9b02      	ldr	r3, [sp, #8]
 8013d4e:	b289      	uxth	r1, r1
 8013d50:	463a      	mov	r2, r7
 8013d52:	f7ff fdd9 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013d56:	9b01      	ldr	r3, [sp, #4]
 8013d58:	4631      	mov	r1, r6
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013d5a:	3601      	adds	r6, #1
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013d5c:	441d      	add	r5, r3
 8013d5e:	9b02      	ldr	r3, [sp, #8]
 8013d60:	4642      	mov	r2, r8
 8013d62:	b2ad      	uxth	r5, r5
 8013d64:	9301      	str	r3, [sp, #4]
 8013d66:	f105 39ff 	add.w	r9, r5, #4294967295
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013d6a:	3d02      	subs	r5, #2
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013d6c:	fa1f f989 	uxth.w	r9, r9
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013d70:	b2ad      	uxth	r5, r5
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013d72:	4648      	mov	r0, r9
 8013d74:	f7ff fd82 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013d78:	9b01      	ldr	r3, [sp, #4]
 8013d7a:	b2b1      	uxth	r1, r6
 8013d7c:	463a      	mov	r2, r7
 8013d7e:	4628      	mov	r0, r5
 8013d80:	f7ff fd7c 	bl	801387c <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8013d84:	9b01      	ldr	r3, [sp, #4]
 8013d86:	4642      	mov	r2, r8
 8013d88:	4659      	mov	r1, fp
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8013d8a:	4648      	mov	r0, r9
 8013d8c:	e72f      	b.n	8013bee <DrawDigit+0x25a>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8013d8e:	f104 0901 	add.w	r9, r4, #1
 8013d92:	f1a6 0802 	sub.w	r8, r6, #2
 8013d96:	b2b6      	uxth	r6, r6
 8013d98:	4628      	mov	r0, r5
 8013d9a:	fa1f f888 	uxth.w	r8, r8
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013d9e:	f104 0a02 	add.w	sl, r4, #2
		VLine(Xpos, Ypos + 1, width - 2, color);
 8013da2:	fa1f f989 	uxth.w	r9, r9
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013da6:	1f37      	subs	r7, r6, #4
		VLine(Xpos, Ypos + 1, width - 2, color);
 8013da8:	4642      	mov	r2, r8
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013daa:	4434      	add	r4, r6
		VLine(Xpos, Ypos + 1, width - 2, color);
 8013dac:	4649      	mov	r1, r9
 8013dae:	9301      	str	r3, [sp, #4]
 8013db0:	f7ff fd64 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013db4:	1c68      	adds	r0, r5, #1
 8013db6:	b2bf      	uxth	r7, r7
 8013db8:	9b01      	ldr	r3, [sp, #4]
 8013dba:	fa1f fa8a 	uxth.w	sl, sl
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013dbe:	442e      	add	r6, r5
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013dc0:	b2a4      	uxth	r4, r4
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013dc2:	463a      	mov	r2, r7
 8013dc4:	b280      	uxth	r0, r0
 8013dc6:	4651      	mov	r1, sl
 8013dc8:	9302      	str	r3, [sp, #8]
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013dca:	b2b6      	uxth	r6, r6
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013dcc:	9001      	str	r0, [sp, #4]
 8013dce:	f7ff fd55 	bl	801387c <VLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013dd2:	1e61      	subs	r1, r4, #1
 8013dd4:	9b02      	ldr	r3, [sp, #8]
 8013dd6:	9801      	ldr	r0, [sp, #4]
 8013dd8:	4642      	mov	r2, r8
 8013dda:	b289      	uxth	r1, r1
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013ddc:	f106 3bff 	add.w	fp, r6, #4294967295
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013de0:	9301      	str	r3, [sp, #4]
 8013de2:	f7ff fd91 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8013de6:	1ea1      	subs	r1, r4, #2
 8013de8:	1ca8      	adds	r0, r5, #2
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013dea:	3e02      	subs	r6, #2
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8013dec:	9b01      	ldr	r3, [sp, #4]
 8013dee:	b289      	uxth	r1, r1
 8013df0:	463a      	mov	r2, r7
 8013df2:	b280      	uxth	r0, r0
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013df4:	fa1f fb8b 	uxth.w	fp, fp
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8013df8:	f7ff fd86 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013dfc:	4621      	mov	r1, r4
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013dfe:	b2b6      	uxth	r6, r6
 8013e00:	3401      	adds	r4, #1
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013e02:	9b01      	ldr	r3, [sp, #4]
 8013e04:	4642      	mov	r2, r8
 8013e06:	4658      	mov	r0, fp
 8013e08:	f7ff fd38 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013e0c:	9b01      	ldr	r3, [sp, #4]
 8013e0e:	b2a1      	uxth	r1, r4
 8013e10:	463a      	mov	r2, r7
 8013e12:	4630      	mov	r0, r6
 8013e14:	f7ff fd32 	bl	801387c <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8013e18:	9b01      	ldr	r3, [sp, #4]
 8013e1a:	4642      	mov	r2, r8
 8013e1c:	4649      	mov	r1, r9
 8013e1e:	4658      	mov	r0, fp
 8013e20:	f7ff fd2c 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8013e24:	9b01      	ldr	r3, [sp, #4]
 8013e26:	463a      	mov	r2, r7
 8013e28:	4651      	mov	r1, sl
 8013e2a:	4630      	mov	r0, r6
 8013e2c:	e63c      	b.n	8013aa8 <DrawDigit+0x114>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013e2e:	f101 0901 	add.w	r9, r1, #1
 8013e32:	f1a6 0802 	sub.w	r8, r6, #2
 8013e36:	b2b6      	uxth	r6, r6
 8013e38:	4621      	mov	r1, r4
 8013e3a:	fa1f f888 	uxth.w	r8, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013e3e:	f105 0a02 	add.w	sl, r5, #2
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013e42:	fa1f f989 	uxth.w	r9, r9
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013e46:	1f37      	subs	r7, r6, #4
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013e48:	4642      	mov	r2, r8
 8013e4a:	9301      	str	r3, [sp, #4]
 8013e4c:	4648      	mov	r0, r9
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013e4e:	b2bf      	uxth	r7, r7
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013e50:	f7ff fd5a 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013e54:	1c61      	adds	r1, r4, #1
 8013e56:	fa1f fa8a 	uxth.w	sl, sl
 8013e5a:	9b01      	ldr	r3, [sp, #4]
 8013e5c:	b289      	uxth	r1, r1
 8013e5e:	463a      	mov	r2, r7
 8013e60:	4650      	mov	r0, sl
 8013e62:	9102      	str	r1, [sp, #8]
 8013e64:	f7ff fd50 	bl	8013908 <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8013e68:	9b01      	ldr	r3, [sp, #4]
 8013e6a:	4642      	mov	r2, r8
 8013e6c:	9902      	ldr	r1, [sp, #8]
 8013e6e:	4628      	mov	r0, r5
 8013e70:	f7ff fd04 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013e74:	1ca1      	adds	r1, r4, #2
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8013e76:	eb04 0446 	add.w	r4, r4, r6, lsl #1
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013e7a:	9b01      	ldr	r3, [sp, #4]
 8013e7c:	b289      	uxth	r1, r1
 8013e7e:	463a      	mov	r2, r7
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8013e80:	b2a4      	uxth	r4, r4
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013e82:	4648      	mov	r0, r9
 8013e84:	f7ff fcfa 	bl	801387c <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8013e88:	9b01      	ldr	r3, [sp, #4]
 8013e8a:	1ea1      	subs	r1, r4, #2
 8013e8c:	4642      	mov	r2, r8
 8013e8e:	4648      	mov	r0, r9
 8013e90:	b289      	uxth	r1, r1
 8013e92:	f7ff fd39 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8013e96:	1ee1      	subs	r1, r4, #3
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013e98:	1ba4      	subs	r4, r4, r6
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8013e9a:	9b01      	ldr	r3, [sp, #4]
 8013e9c:	b289      	uxth	r1, r1
 8013e9e:	463a      	mov	r2, r7
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013ea0:	b2a4      	uxth	r4, r4
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8013ea2:	4650      	mov	r0, sl
 8013ea4:	f7ff fd30 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013ea8:	442e      	add	r6, r5
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013eaa:	1e61      	subs	r1, r4, #1
 8013eac:	4648      	mov	r0, r9
 8013eae:	9b01      	ldr	r3, [sp, #4]
 8013eb0:	4642      	mov	r2, r8
 8013eb2:	b289      	uxth	r1, r1
 8013eb4:	f7ff fd28 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8013eb8:	1ea1      	subs	r1, r4, #2
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013eba:	b2b6      	uxth	r6, r6
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8013ebc:	4650      	mov	r0, sl
 8013ebe:	b289      	uxth	r1, r1
 8013ec0:	9b01      	ldr	r3, [sp, #4]
 8013ec2:	463a      	mov	r2, r7
 8013ec4:	f7ff fd20 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013ec8:	1e70      	subs	r0, r6, #1
 8013eca:	4642      	mov	r2, r8
 8013ecc:	9b01      	ldr	r3, [sp, #4]
 8013ece:	4621      	mov	r1, r4
 8013ed0:	b280      	uxth	r0, r0
 8013ed2:	f7ff fcd3 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013ed6:	3e02      	subs	r6, #2
 8013ed8:	1c61      	adds	r1, r4, #1
 8013eda:	9b01      	ldr	r3, [sp, #4]
 8013edc:	463a      	mov	r2, r7
 8013ede:	b2b0      	uxth	r0, r6
 8013ee0:	b289      	uxth	r1, r1
 8013ee2:	e5e1      	b.n	8013aa8 <DrawDigit+0x114>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013ee4:	f101 0801 	add.w	r8, r1, #1
 8013ee8:	1eb7      	subs	r7, r6, #2
 8013eea:	b2b6      	uxth	r6, r6
 8013eec:	4621      	mov	r1, r4
 8013eee:	b2bf      	uxth	r7, r7
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013ef0:	f105 0a02 	add.w	sl, r5, #2
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013ef4:	fa1f f888 	uxth.w	r8, r8
 8013ef8:	9302      	str	r3, [sp, #8]
 8013efa:	463a      	mov	r2, r7
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013efc:	fa1f fa8a 	uxth.w	sl, sl
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013f00:	4640      	mov	r0, r8
 8013f02:	f7ff fd01 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013f06:	9601      	str	r6, [sp, #4]
 8013f08:	3e04      	subs	r6, #4
 8013f0a:	1c61      	adds	r1, r4, #1
 8013f0c:	9b02      	ldr	r3, [sp, #8]
 8013f0e:	4650      	mov	r0, sl
 8013f10:	b2b6      	uxth	r6, r6
 8013f12:	b289      	uxth	r1, r1
 8013f14:	4632      	mov	r2, r6
 8013f16:	9103      	str	r1, [sp, #12]
 8013f18:	f7ff fcf6 	bl	8013908 <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	9b02      	ldr	r3, [sp, #8]
 8013f20:	463a      	mov	r2, r7
 8013f22:	9903      	ldr	r1, [sp, #12]
 8013f24:	f7ff fcaa 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8013f28:	1ca1      	adds	r1, r4, #2
 8013f2a:	9b02      	ldr	r3, [sp, #8]
 8013f2c:	4632      	mov	r2, r6
 8013f2e:	b289      	uxth	r1, r1
 8013f30:	4640      	mov	r0, r8
 8013f32:	f7ff fca3 	bl	801387c <VLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 8013f36:	9b01      	ldr	r3, [sp, #4]
 8013f38:	4628      	mov	r0, r5
 8013f3a:	463a      	mov	r2, r7
 8013f3c:	441c      	add	r4, r3
 8013f3e:	9b02      	ldr	r3, [sp, #8]
 8013f40:	b2a4      	uxth	r4, r4
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8013f42:	f104 0b01 	add.w	fp, r4, #1
		VLine(Xpos, Ypos + width, width - 2, color);
 8013f46:	4621      	mov	r1, r4
 8013f48:	f7ff fc98 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8013f4c:	9b02      	ldr	r3, [sp, #8]
 8013f4e:	fa1f fb8b 	uxth.w	fp, fp
 8013f52:	4632      	mov	r2, r6
 8013f54:	4640      	mov	r0, r8
 8013f56:	4659      	mov	r1, fp
 8013f58:	f7ff fc90 	bl	801387c <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8013f5c:	9b01      	ldr	r3, [sp, #4]
 8013f5e:	463a      	mov	r2, r7
 8013f60:	4640      	mov	r0, r8
 8013f62:	eb03 0904 	add.w	r9, r3, r4
 8013f66:	9b02      	ldr	r3, [sp, #8]
 8013f68:	fa1f f989 	uxth.w	r9, r9
 8013f6c:	f1a9 0102 	sub.w	r1, r9, #2
 8013f70:	b289      	uxth	r1, r1
 8013f72:	f7ff fcc9 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8013f76:	f1a9 0103 	sub.w	r1, r9, #3
 8013f7a:	9b02      	ldr	r3, [sp, #8]
 8013f7c:	4632      	mov	r2, r6
 8013f7e:	b289      	uxth	r1, r1
 8013f80:	4650      	mov	r0, sl
 8013f82:	f7ff fcc1 	bl	8013908 <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8013f86:	1e61      	subs	r1, r4, #1
 8013f88:	4640      	mov	r0, r8
 8013f8a:	9b02      	ldr	r3, [sp, #8]
 8013f8c:	b289      	uxth	r1, r1
 8013f8e:	463a      	mov	r2, r7
 8013f90:	f7ff fcba 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8013f94:	1ea1      	subs	r1, r4, #2
 8013f96:	4650      	mov	r0, sl
 8013f98:	9b02      	ldr	r3, [sp, #8]
 8013f9a:	b289      	uxth	r1, r1
 8013f9c:	4632      	mov	r2, r6
 8013f9e:	f7ff fcb3 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013fa2:	9b01      	ldr	r3, [sp, #4]
 8013fa4:	463a      	mov	r2, r7
 8013fa6:	4621      	mov	r1, r4
 8013fa8:	441d      	add	r5, r3
 8013faa:	9b02      	ldr	r3, [sp, #8]
 8013fac:	b2ad      	uxth	r5, r5
 8013fae:	9301      	str	r3, [sp, #4]
 8013fb0:	1e68      	subs	r0, r5, #1
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013fb2:	3d02      	subs	r5, #2
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013fb4:	b280      	uxth	r0, r0
 8013fb6:	f7ff fc61 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8013fba:	9b01      	ldr	r3, [sp, #4]
 8013fbc:	4632      	mov	r2, r6
 8013fbe:	4659      	mov	r1, fp
 8013fc0:	b2a8      	uxth	r0, r5
 8013fc2:	e571      	b.n	8013aa8 <DrawDigit+0x114>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013fc4:	fa1f f986 	uxth.w	r9, r6
 8013fc8:	3e02      	subs	r6, #2
 8013fca:	1c48      	adds	r0, r1, #1
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013fcc:	f104 0801 	add.w	r8, r4, #1
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013fd0:	b2b6      	uxth	r6, r6
 8013fd2:	4621      	mov	r1, r4
 8013fd4:	b280      	uxth	r0, r0
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013fd6:	f1a9 0704 	sub.w	r7, r9, #4
		HLine(Xpos + 1, Ypos, width - 2, color);
 8013fda:	4632      	mov	r2, r6
 8013fdc:	9301      	str	r3, [sp, #4]
 8013fde:	f7ff fc93 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013fe2:	1ca8      	adds	r0, r5, #2
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013fe4:	444d      	add	r5, r9
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013fe6:	fa1f f888 	uxth.w	r8, r8
 8013fea:	b2bf      	uxth	r7, r7
 8013fec:	9b01      	ldr	r3, [sp, #4]
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013fee:	b2ad      	uxth	r5, r5
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8013ff0:	4641      	mov	r1, r8
 8013ff2:	b280      	uxth	r0, r0
 8013ff4:	463a      	mov	r2, r7
 8013ff6:	f7ff fc87 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8013ffa:	eb09 0004 	add.w	r0, r9, r4
 8013ffe:	f105 39ff 	add.w	r9, r5, #4294967295
 8014002:	9b01      	ldr	r3, [sp, #4]
 8014004:	fa1f fa80 	uxth.w	sl, r0
 8014008:	4632      	mov	r2, r6
 801400a:	fa1f f989 	uxth.w	r9, r9
 801400e:	4651      	mov	r1, sl
 8014010:	4648      	mov	r0, r9
 8014012:	f7ff fc33 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8014016:	1ea8      	subs	r0, r5, #2
 8014018:	f10a 0101 	add.w	r1, sl, #1
 801401c:	9b01      	ldr	r3, [sp, #4]
 801401e:	b285      	uxth	r5, r0
 8014020:	463a      	mov	r2, r7
 8014022:	b289      	uxth	r1, r1
 8014024:	4628      	mov	r0, r5
 8014026:	f7ff fc29 	bl	801387c <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801402a:	9b01      	ldr	r3, [sp, #4]
 801402c:	4632      	mov	r2, r6
 801402e:	4641      	mov	r1, r8
 8014030:	4648      	mov	r0, r9
 8014032:	e5dc      	b.n	8013bee <DrawDigit+0x25a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8014034:	f101 0801 	add.w	r8, r1, #1
 8014038:	1eb7      	subs	r7, r6, #2
 801403a:	b2b6      	uxth	r6, r6
 801403c:	4621      	mov	r1, r4
 801403e:	b2bf      	uxth	r7, r7
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8014040:	f105 0a02 	add.w	sl, r5, #2
		HLine(Xpos + 1, Ypos, width - 2, color);
 8014044:	fa1f f888 	uxth.w	r8, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8014048:	f104 0901 	add.w	r9, r4, #1
		HLine(Xpos + 1, Ypos, width - 2, color);
 801404c:	463a      	mov	r2, r7
 801404e:	9302      	str	r3, [sp, #8]
 8014050:	4640      	mov	r0, r8
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8014052:	fa1f fa8a 	uxth.w	sl, sl
		HLine(Xpos + 1, Ypos, width - 2, color);
 8014056:	f7ff fc57 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801405a:	9601      	str	r6, [sp, #4]
 801405c:	3e04      	subs	r6, #4
 801405e:	fa1f f989 	uxth.w	r9, r9
 8014062:	9b02      	ldr	r3, [sp, #8]
 8014064:	4650      	mov	r0, sl
 8014066:	b2b6      	uxth	r6, r6
 8014068:	4649      	mov	r1, r9
 801406a:	4632      	mov	r2, r6
 801406c:	f7ff fc4c 	bl	8013908 <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8014070:	4628      	mov	r0, r5
 8014072:	9b02      	ldr	r3, [sp, #8]
 8014074:	463a      	mov	r2, r7
 8014076:	4649      	mov	r1, r9
 8014078:	f7ff fc00 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 801407c:	1ca2      	adds	r2, r4, #2
 801407e:	9b02      	ldr	r3, [sp, #8]
 8014080:	4640      	mov	r0, r8
 8014082:	b291      	uxth	r1, r2
 8014084:	4632      	mov	r2, r6
 8014086:	ee08 1a10 	vmov	s16, r1
 801408a:	f7ff fbf7 	bl	801387c <VLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 801408e:	9b01      	ldr	r3, [sp, #4]
 8014090:	4628      	mov	r0, r5
 8014092:	463a      	mov	r2, r7
 8014094:	441c      	add	r4, r3
 8014096:	9b02      	ldr	r3, [sp, #8]
 8014098:	b2a4      	uxth	r4, r4
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 801409a:	f104 0b01 	add.w	fp, r4, #1
		VLine(Xpos, Ypos + width, width - 2, color);
 801409e:	4621      	mov	r1, r4
 80140a0:	f7ff fbec 	bl	801387c <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 80140a4:	9b02      	ldr	r3, [sp, #8]
 80140a6:	fa1f fb8b 	uxth.w	fp, fp
 80140aa:	4632      	mov	r2, r6
 80140ac:	4640      	mov	r0, r8
 80140ae:	4659      	mov	r1, fp
 80140b0:	f7ff fbe4 	bl	801387c <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 80140b4:	9b01      	ldr	r3, [sp, #4]
 80140b6:	4640      	mov	r0, r8
 80140b8:	191a      	adds	r2, r3, r4
 80140ba:	9b02      	ldr	r3, [sp, #8]
 80140bc:	b292      	uxth	r2, r2
 80140be:	9303      	str	r3, [sp, #12]
 80140c0:	4611      	mov	r1, r2
 80140c2:	463a      	mov	r2, r7
 80140c4:	9102      	str	r1, [sp, #8]
 80140c6:	3902      	subs	r1, #2
 80140c8:	b289      	uxth	r1, r1
 80140ca:	f7ff fc1d 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 80140ce:	9a02      	ldr	r2, [sp, #8]
 80140d0:	9b03      	ldr	r3, [sp, #12]
 80140d2:	4650      	mov	r0, sl
 80140d4:	1ed1      	subs	r1, r2, #3
 80140d6:	4632      	mov	r2, r6
 80140d8:	9302      	str	r3, [sp, #8]
 80140da:	b289      	uxth	r1, r1
 80140dc:	f7ff fc14 	bl	8013908 <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 80140e0:	1e61      	subs	r1, r4, #1
 80140e2:	4640      	mov	r0, r8
 80140e4:	9b02      	ldr	r3, [sp, #8]
 80140e6:	b289      	uxth	r1, r1
 80140e8:	463a      	mov	r2, r7
 80140ea:	f7ff fc0d 	bl	8013908 <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 80140ee:	1ea1      	subs	r1, r4, #2
 80140f0:	4650      	mov	r0, sl
 80140f2:	9b02      	ldr	r3, [sp, #8]
 80140f4:	b289      	uxth	r1, r1
 80140f6:	4632      	mov	r2, r6
 80140f8:	f7ff fc06 	bl	8013908 <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 80140fc:	9b01      	ldr	r3, [sp, #4]
 80140fe:	4621      	mov	r1, r4
 8014100:	463a      	mov	r2, r7
 8014102:	441d      	add	r5, r3
 8014104:	9b02      	ldr	r3, [sp, #8]
 8014106:	b2ad      	uxth	r5, r5
 8014108:	9301      	str	r3, [sp, #4]
 801410a:	1e6c      	subs	r4, r5, #1
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801410c:	3d02      	subs	r5, #2
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 801410e:	b2a4      	uxth	r4, r4
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8014110:	b2ad      	uxth	r5, r5
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8014112:	4620      	mov	r0, r4
 8014114:	f7ff fbb2 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8014118:	4659      	mov	r1, fp
 801411a:	9b01      	ldr	r3, [sp, #4]
 801411c:	4632      	mov	r2, r6
 801411e:	4628      	mov	r0, r5
 8014120:	f7ff fbac 	bl	801387c <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8014124:	9b01      	ldr	r3, [sp, #4]
 8014126:	463a      	mov	r2, r7
 8014128:	4649      	mov	r1, r9
 801412a:	4620      	mov	r0, r4
 801412c:	f7ff fba6 	bl	801387c <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8014130:	9b01      	ldr	r3, [sp, #4]
 8014132:	4632      	mov	r2, r6
 8014134:	ee18 1a10 	vmov	r1, s16
 8014138:	e4b5      	b.n	8013aa6 <DrawDigit+0x112>
}
 801413a:	b005      	add	sp, #20
 801413c:	ecbd 8b02 	vpop	{d8}
 8014140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014144 <DrawLowSpectrum>:
{
 8014144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014148:	4cd0      	ldr	r4, [pc, #832]	; (801448c <DrawLowSpectrum+0x348>)
 801414a:	b089      	sub	sp, #36	; 0x24
 801414c:	f8df a35c 	ldr.w	sl, [pc, #860]	; 80144ac <DrawLowSpectrum+0x368>
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8014150:	f04f 0834 	mov.w	r8, #52	; 0x34
 8014154:	1c63      	adds	r3, r4, #1
 8014156:	f8df b358 	ldr.w	fp, [pc, #856]	; 80144b0 <DrawLowSpectrum+0x36c>
 801415a:	f8df 9348 	ldr.w	r9, [pc, #840]	; 80144a4 <DrawLowSpectrum+0x360>
 801415e:	9304      	str	r3, [sp, #16]
 8014160:	e002      	b.n	8014168 <DrawLowSpectrum+0x24>
	for(i = 0; i < 400; i++)
 8014162:	4bcb      	ldr	r3, [pc, #812]	; (8014490 <DrawLowSpectrum+0x34c>)
 8014164:	42a3      	cmp	r3, r4
 8014166:	d044      	beq.n	80141f2 <DrawLowSpectrum+0xae>
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8014168:	f89a 3000 	ldrb.w	r3, [sl]
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 801416c:	2202      	movs	r2, #2
    hdma2d.Init.Mode = DMA2D_R2M;
 801416e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8014172:	4648      	mov	r0, r9
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8014174:	fb08 b303 	mla	r3, r8, r3, fp
 8014178:	4627      	mov	r7, r4
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 801417a:	f8c9 2008 	str.w	r2, [r9, #8]
    hdma2d.Instance = DMA2D;
 801417e:	4ac5      	ldr	r2, [pc, #788]	; (8014494 <DrawLowSpectrum+0x350>)
		color = (uint32_t)(lowp_wavebuffer[i] & 0xE0); // read color data - first 3 bits
 8014180:	f814 6f01 	ldrb.w	r6, [r4, #1]!
    hdma2d.Init.Mode = DMA2D_R2M;
 8014184:	f8c9 1004 	str.w	r1, [r9, #4]
    hdma2d.Instance = DMA2D;
 8014188:	f8c9 2000 	str.w	r2, [r9]
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 801418c:	e9d3 3517 	ldrd	r3, r5, [r3, #92]	; 0x5c
 8014190:	9303      	str	r3, [sp, #12]
    hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - 1;
 8014192:	1e6b      	subs	r3, r5, #1
 8014194:	f8c9 300c 	str.w	r3, [r9, #12]
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8014198:	f7ed fb94 	bl	80018c4 <HAL_DMA2D_Init>
 801419c:	2800      	cmp	r0, #0
 801419e:	d1e0      	bne.n	8014162 <DrawLowSpectrum+0x1e>
    	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 80141a0:	f89a 1000 	ldrb.w	r1, [sl]
 80141a4:	4648      	mov	r0, r9
 80141a6:	f7ed fcef 	bl	8001b88 <HAL_DMA2D_ConfigLayer>
 80141aa:	2800      	cmp	r0, #0
 80141ac:	d1d9      	bne.n	8014162 <DrawLowSpectrum+0x1e>
 80141ae:	f006 031f 	and.w	r3, r6, #31
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80141b2:	9904      	ldr	r1, [sp, #16]
		color = (uint32_t)(lowp_wavebuffer[i] & 0xE0); // read color data - first 3 bits
 80141b4:	f006 06e0 	and.w	r6, r6, #224	; 0xe0
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80141b8:	3729      	adds	r7, #41	; 0x29
		VLine(i + 40, 250 - height, height, color);
 80141ba:	f1c3 02fa 	rsb	r2, r3, #250	; 0xfa
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 80141be:	9300      	str	r3, [sp, #0]
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80141c0:	1a7f      	subs	r7, r7, r1
		color |= (uint32_t)(lowp_wavebuffer[i] & 0xE0);
 80141c2:	ea46 2606 	orr.w	r6, r6, r6, lsl #8
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80141c6:	b292      	uxth	r2, r2
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 80141c8:	2301      	movs	r3, #1
		color <<= 8;
 80141ca:	0231      	lsls	r1, r6, #8
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 80141cc:	4648      	mov	r0, r9
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 80141ce:	fb05 7202 	mla	r2, r5, r2, r7
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 80141d2:	9d03      	ldr	r5, [sp, #12]
 80141d4:	f041 01ff 	orr.w	r1, r1, #255	; 0xff
 80141d8:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80141dc:	f7ed fbc8 	bl	8001970 <HAL_DMA2D_Start>
 80141e0:	2800      	cmp	r0, #0
 80141e2:	d1be      	bne.n	8014162 <DrawLowSpectrum+0x1e>
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80141e4:	210a      	movs	r1, #10
 80141e6:	4648      	mov	r0, r9
 80141e8:	f7ed fc38 	bl	8001a5c <HAL_DMA2D_PollForTransfer>
	for(i = 0; i < 400; i++)
 80141ec:	4ba8      	ldr	r3, [pc, #672]	; (8014490 <DrawLowSpectrum+0x34c>)
 80141ee:	42a3      	cmp	r3, r4
 80141f0:	d1ba      	bne.n	8014168 <DrawLowSpectrum+0x24>
	VLine(397, 174, 32, 0x00FFFFFF);
 80141f2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80141f6:	2220      	movs	r2, #32
 80141f8:	21ae      	movs	r1, #174	; 0xae
 80141fa:	f240 108d 	movw	r0, #397	; 0x18d
 80141fe:	f7ff fb3d 	bl	801387c <VLine>
	VLine(453, 174, 32, 0x00FFFFFF);
 8014202:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014206:	2220      	movs	r2, #32
 8014208:	21ae      	movs	r1, #174	; 0xae
 801420a:	f240 10c5 	movw	r0, #453	; 0x1c5
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 801420e:	25ad      	movs	r5, #173	; 0xad
	VLine(453, 174, 32, 0x00FFFFFF);
 8014210:	f7ff fb34 	bl	801387c <VLine>
	HLine(399, 172, 53, 0x00FFFFFF);
 8014214:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014218:	2235      	movs	r2, #53	; 0x35
 801421a:	21ac      	movs	r1, #172	; 0xac
 801421c:	f240 108f 	movw	r0, #399	; 0x18f
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8014220:	f240 76ff 	movw	r6, #2047	; 0x7ff
	HLine(399, 172, 53, 0x00FFFFFF);
 8014224:	f7ff fb70 	bl	8013908 <HLine>
	HLine(399, 207, 53, 0x00FFFFFF);
 8014228:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801422c:	2235      	movs	r2, #53	; 0x35
 801422e:	21cf      	movs	r1, #207	; 0xcf
 8014230:	f240 108f 	movw	r0, #399	; 0x18f
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8014234:	24ce      	movs	r4, #206	; 0xce
	HLine(399, 207, 53, 0x00FFFFFF);
 8014236:	f7ff fb67 	bl	8013908 <HLine>
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 801423a:	f89a 2000 	ldrb.w	r2, [sl]
 801423e:	2134      	movs	r1, #52	; 0x34
 8014240:	4895      	ldr	r0, [pc, #596]	; (8014498 <DrawLowSpectrum+0x354>)
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014242:	f04f 0ecd 	mov.w	lr, #205	; 0xcd
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8014246:	fb01 b202 	mla	r2, r1, r2, fp
 801424a:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 801424e:	e9d2 2317 	ldrd	r2, r3, [r2, #92]	; 0x5c
 8014252:	fb05 f303 	mul.w	r3, r5, r3
 8014256:	f503 73c7 	add.w	r3, r3, #398	; 0x18e
 801425a:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
 801425e:	2200      	movs	r2, #0
 8014260:	f89a 7000 	ldrb.w	r7, [sl]
 8014264:	fb01 b707 	mla	r7, r1, r7, fp
 8014268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801426a:	fb05 f303 	mul.w	r3, r5, r3
 801426e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8014270:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8014274:	f825 6013 	strh.w	r6, [r5, r3, lsl #1]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014278:	f64f 75ff 	movw	r5, #65535	; 0xffff
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 801427c:	f89a 8000 	ldrb.w	r8, [sl]
 8014280:	fb01 b808 	mla	r8, r1, r8, fp
 8014284:	e9d8 8317 	ldrd	r8, r3, [r8, #92]	; 0x5c
 8014288:	fb04 f303 	mul.w	r3, r4, r3
 801428c:	f503 73c7 	add.w	r3, r3, #398	; 0x18e
 8014290:	f828 6013 	strh.w	r6, [r8, r3, lsl #1]
 8014294:	f89a 8000 	ldrb.w	r8, [sl]
 8014298:	fb01 b808 	mla	r8, r1, r8, fp
 801429c:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 80142a0:	fb04 f303 	mul.w	r3, r4, r3
 80142a4:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
 80142a8:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80142ac:	f824 6013 	strh.w	r6, [r4, r3, lsl #1]
	while(i < width) {
 80142b0:	e04f      	b.n	8014352 <DrawLowSpectrum+0x20e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80142b2:	f89a 8000 	ldrb.w	r8, [sl]
 80142b6:	fb01 b808 	mla	r8, r1, r8, fp
 80142ba:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 80142be:	fb0e 2404 	mla	r4, lr, r4, r2
 80142c2:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
 80142c6:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80142ca:	f013 0602 	ands.w	r6, r3, #2
 80142ce:	d154      	bne.n	801437a <DrawLowSpectrum+0x236>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80142d0:	f89a 8000 	ldrb.w	r8, [sl]
 80142d4:	27cc      	movs	r7, #204	; 0xcc
 80142d6:	fb01 b808 	mla	r8, r1, r8, fp
 80142da:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 80142de:	fb07 2404 	mla	r4, r7, r4, r2
 80142e2:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
 80142e6:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80142ea:	f013 0604 	ands.w	r6, r3, #4
 80142ee:	d154      	bne.n	801439a <DrawLowSpectrum+0x256>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80142f0:	f89a 8000 	ldrb.w	r8, [sl]
 80142f4:	27cb      	movs	r7, #203	; 0xcb
 80142f6:	fb01 b808 	mla	r8, r1, r8, fp
 80142fa:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 80142fe:	fb07 2404 	mla	r4, r7, r4, r2
 8014302:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
 8014306:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801430a:	f013 0608 	ands.w	r6, r3, #8
 801430e:	d154      	bne.n	80143ba <DrawLowSpectrum+0x276>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014310:	f89a 8000 	ldrb.w	r8, [sl]
 8014314:	27ca      	movs	r7, #202	; 0xca
			if(((element[i] >> k) & 1) == 1) {
 8014316:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801431a:	fb01 b808 	mla	r8, r1, r8, fp
 801431e:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 8014322:	fb07 2404 	mla	r4, r7, r4, r2
 8014326:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
 801432a:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801432e:	d154      	bne.n	80143da <DrawLowSpectrum+0x296>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014330:	f89a 6000 	ldrb.w	r6, [sl]
 8014334:	27c9      	movs	r7, #201	; 0xc9
	while(i < width) {
 8014336:	4584      	cmp	ip, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014338:	fb01 b606 	mla	r6, r1, r6, fp
 801433c:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014340:	fb07 2404 	mla	r4, r7, r4, r2
	while(i < width) {
 8014344:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014348:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
 801434c:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 8014350:	d054      	beq.n	80143fc <DrawLowSpectrum+0x2b8>
			if(((element[i] >> k) & 1) == 1) {
 8014352:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014356:	f013 0601 	ands.w	r6, r3, #1
 801435a:	d0aa      	beq.n	80142b2 <DrawLowSpectrum+0x16e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801435c:	f89a 6000 	ldrb.w	r6, [sl]
 8014360:	fb01 b606 	mla	r6, r1, r6, fp
 8014364:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014368:	fb0e 2404 	mla	r4, lr, r4, r2
 801436c:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
 8014370:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014374:	f013 0602 	ands.w	r6, r3, #2
 8014378:	d0aa      	beq.n	80142d0 <DrawLowSpectrum+0x18c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801437a:	f89a 6000 	ldrb.w	r6, [sl]
 801437e:	27cc      	movs	r7, #204	; 0xcc
 8014380:	fb01 b606 	mla	r6, r1, r6, fp
 8014384:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014388:	fb07 2404 	mla	r4, r7, r4, r2
 801438c:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
 8014390:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014394:	f013 0604 	ands.w	r6, r3, #4
 8014398:	d0aa      	beq.n	80142f0 <DrawLowSpectrum+0x1ac>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801439a:	f89a 6000 	ldrb.w	r6, [sl]
 801439e:	27cb      	movs	r7, #203	; 0xcb
 80143a0:	fb01 b606 	mla	r6, r1, r6, fp
 80143a4:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80143a8:	fb07 2404 	mla	r4, r7, r4, r2
 80143ac:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
 80143b0:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80143b4:	f013 0608 	ands.w	r6, r3, #8
 80143b8:	d0aa      	beq.n	8014310 <DrawLowSpectrum+0x1cc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80143ba:	f89a 6000 	ldrb.w	r6, [sl]
 80143be:	27ca      	movs	r7, #202	; 0xca
			if(((element[i] >> k) & 1) == 1) {
 80143c0:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80143c4:	fb01 b606 	mla	r6, r1, r6, fp
 80143c8:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80143cc:	fb07 2404 	mla	r4, r7, r4, r2
 80143d0:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
 80143d4:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80143d8:	d0aa      	beq.n	8014330 <DrawLowSpectrum+0x1ec>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80143da:	f89a 4000 	ldrb.w	r4, [sl]
 80143de:	26c9      	movs	r6, #201	; 0xc9
	while(i < width) {
 80143e0:	4584      	cmp	ip, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80143e2:	fb01 b404 	mla	r4, r1, r4, fp
 80143e6:	e9d4 4317 	ldrd	r4, r3, [r4, #92]	; 0x5c
 80143ea:	fb06 2303 	mla	r3, r6, r3, r2
	while(i < width) {
 80143ee:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80143f2:	f503 73d7 	add.w	r3, r3, #430	; 0x1ae
 80143f6:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
	while(i < width) {
 80143fa:	d1aa      	bne.n	8014352 <DrawLowSpectrum+0x20e>
	VLine(40, 252, 4, 0x00FFFFFF);
 80143fc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8014400:	21fc      	movs	r1, #252	; 0xfc
 8014402:	2028      	movs	r0, #40	; 0x28
 8014404:	f7ff f8e8 	bl	80135d8 <VLine.constprop.0>
	VLine(440, 252, 4, 0x00FFFFFF);
 8014408:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801440c:	21fc      	movs	r1, #252	; 0xfc
 801440e:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8014412:	f7ff f8e1 	bl	80135d8 <VLine.constprop.0>
	HLine(40, 252, 400, 0x00FFFFFF);
 8014416:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801441a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801441e:	21fc      	movs	r1, #252	; 0xfc
 8014420:	2028      	movs	r0, #40	; 0x28
 8014422:	f7ff fa71 	bl	8013908 <HLine>
	HLine(40, 256, 401, 0x00FFFFFF);
 8014426:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801442a:	f240 1291 	movw	r2, #401	; 0x191
 801442e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014432:	2028      	movs	r0, #40	; 0x28
 8014434:	f7ff fa68 	bl	8013908 <HLine>
	if(display.timemode == 0) {
 8014438:	4b18      	ldr	r3, [pc, #96]	; (801449c <DrawLowSpectrum+0x358>)
 801443a:	781a      	ldrb	r2, [r3, #0]
 801443c:	2a00      	cmp	r2, #0
 801443e:	f001 85ad 	beq.w	8015f9c <DrawLowSpectrum+0x1e58>
	if(display.trackbarmode == 0) {
 8014442:	4b16      	ldr	r3, [pc, #88]	; (801449c <DrawLowSpectrum+0x358>)
 8014444:	791b      	ldrb	r3, [r3, #4]
 8014446:	2b00      	cmp	r3, #0
 8014448:	f040 84b7 	bne.w	8014dba <DrawLowSpectrum+0xc76>
		Rectangle(file_pos+40, 253, 400-file_pos, 3, 0x00FFFFFF);
 801444c:	4914      	ldr	r1, [pc, #80]	; (80144a0 <DrawLowSpectrum+0x35c>)
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 801444e:	2334      	movs	r3, #52	; 0x34
 8014450:	f89a 2000 	ldrb.w	r2, [sl]
		Rectangle(file_pos+40, 253, 400-file_pos, 3, 0x00FFFFFF);
 8014454:	880f      	ldrh	r7, [r1, #0]
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8014456:	fb03 b202 	mla	r2, r3, r2, fp
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 801445a:	4812      	ldr	r0, [pc, #72]	; (80144a4 <DrawLowSpectrum+0x360>)
		Rectangle(file_pos+40, 253, 400-file_pos, 3, 0x00FFFFFF);
 801445c:	f5c7 74c8 	rsb	r4, r7, #400	; 0x190
 8014460:	9107      	str	r1, [sp, #28]
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8014462:	b2a4      	uxth	r4, r4
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8014464:	e9d2 5617 	ldrd	r5, r6, [r2, #92]	; 0x5c
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8014468:	1b33      	subs	r3, r6, r4
 801446a:	f8c9 300c 	str.w	r3, [r9, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 801446e:	f7ed fa29 	bl	80018c4 <HAL_DMA2D_Init>
 8014472:	2800      	cmp	r0, #0
 8014474:	f002 8596 	beq.w	8016fa4 <DrawLowSpectrum+0x2e60>
	while(i < rekordbox.minutes) {
 8014478:	4b0b      	ldr	r3, [pc, #44]	; (80144a8 <DrawLowSpectrum+0x364>)
 801447a:	f893 3b90 	ldrb.w	r3, [r3, #2960]	; 0xb90
 801447e:	2b00      	cmp	r3, #0
 8014480:	d036      	beq.n	80144f0 <DrawLowSpectrum+0x3ac>
 8014482:	4b09      	ldr	r3, [pc, #36]	; (80144a8 <DrawLowSpectrum+0x364>)
 8014484:	2400      	movs	r4, #0
 8014486:	f503 6529 	add.w	r5, r3, #2704	; 0xa90
 801448a:	e01f      	b.n	80144cc <DrawLowSpectrum+0x388>
 801448c:	2000edf7 	.word	0x2000edf7
 8014490:	2000ef87 	.word	0x2000ef87
 8014494:	4002b000 	.word	0x4002b000
 8014498:	08023a62 	.word	0x08023a62
 801449c:	20000988 	.word	0x20000988
 80144a0:	2000e9a0 	.word	0x2000e9a0
 80144a4:	200009ac 	.word	0x200009ac
 80144a8:	20017208 	.word	0x20017208
 80144ac:	20000b44 	.word	0x20000b44
 80144b0:	20000a9c 	.word	0x20000a9c
			VLine(40 + rekordbox.remminticks[i], 260, 4, 0x00FFFFFF);
 80144b4:	f835 0b02 	ldrh.w	r0, [r5], #2
		i++;
 80144b8:	3401      	adds	r4, #1
			VLine(40 + rekordbox.remminticks[i], 260, 4, 0x00FFFFFF);
 80144ba:	3028      	adds	r0, #40	; 0x28
			VLine(40 + rekordbox.elminticks[i], 260, 4, 0x00FFFFFF);
 80144bc:	b280      	uxth	r0, r0
 80144be:	f7ff f88b 	bl	80135d8 <VLine.constprop.0>
	while(i < rekordbox.minutes) {
 80144c2:	4ba5      	ldr	r3, [pc, #660]	; (8014758 <DrawLowSpectrum+0x614>)
 80144c4:	f893 3b90 	ldrb.w	r3, [r3, #2960]	; 0xb90
 80144c8:	42a3      	cmp	r3, r4
 80144ca:	d911      	bls.n	80144f0 <DrawLowSpectrum+0x3ac>
		if(display.timemode == 0) {
 80144cc:	4ba3      	ldr	r3, [pc, #652]	; (801475c <DrawLowSpectrum+0x618>)
			VLine(40 + rekordbox.remminticks[i], 260, 4, 0x00FFFFFF);
 80144ce:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80144d2:	f44f 7182 	mov.w	r1, #260	; 0x104
		if(display.timemode == 0) {
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d0eb      	beq.n	80144b4 <DrawLowSpectrum+0x370>
			VLine(40 + rekordbox.elminticks[i], 260, 4, 0x00FFFFFF);
 80144dc:	f8b5 0080 	ldrh.w	r0, [r5, #128]	; 0x80
 80144e0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80144e4:	f44f 7182 	mov.w	r1, #260	; 0x104
		i++;
 80144e8:	3401      	adds	r4, #1
			VLine(40 + rekordbox.elminticks[i], 260, 4, 0x00FFFFFF);
 80144ea:	3028      	adds	r0, #40	; 0x28
	while(i < rekordbox.minutes) {
 80144ec:	3502      	adds	r5, #2
 80144ee:	e7e5      	b.n	80144bc <DrawLowSpectrum+0x378>
 80144f0:	4c9b      	ldr	r4, [pc, #620]	; (8014760 <DrawLowSpectrum+0x61c>)
 80144f2:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80144f4:	2134      	movs	r1, #52	; 0x34
 80144f6:	f04f 0ecc 	mov.w	lr, #204	; 0xcc
 80144fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80144fe:	f04f 0ccb 	mov.w	ip, #203	; 0xcb
 8014502:	27ca      	movs	r7, #202	; 0xca
 8014504:	e087      	b.n	8014616 <DrawLowSpectrum+0x4d2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014506:	f89a 9000 	ldrb.w	r9, [sl]
 801450a:	fb01 b909 	mla	r9, r1, r9, fp
 801450e:	e9d9 9517 	ldrd	r9, r5, [r9, #92]	; 0x5c
 8014512:	fb0e 2505 	mla	r5, lr, r5, r2
 8014516:	f205 1577 	addw	r5, r5, #375	; 0x177
 801451a:	f829 8015 	strh.w	r8, [r9, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801451e:	f013 0802 	ands.w	r8, r3, #2
 8014522:	f040 808e 	bne.w	8014642 <DrawLowSpectrum+0x4fe>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014526:	f89a 9000 	ldrb.w	r9, [sl]
 801452a:	fb01 b909 	mla	r9, r1, r9, fp
 801452e:	e9d9 9517 	ldrd	r9, r5, [r9, #92]	; 0x5c
 8014532:	fb0c 2505 	mla	r5, ip, r5, r2
 8014536:	f205 1577 	addw	r5, r5, #375	; 0x177
 801453a:	f829 8015 	strh.w	r8, [r9, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801453e:	f013 0804 	ands.w	r8, r3, #4
 8014542:	f040 808e 	bne.w	8014662 <DrawLowSpectrum+0x51e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014546:	f89a 9000 	ldrb.w	r9, [sl]
 801454a:	fb01 b909 	mla	r9, r1, r9, fp
 801454e:	e9d9 9517 	ldrd	r9, r5, [r9, #92]	; 0x5c
 8014552:	fb07 2505 	mla	r5, r7, r5, r2
 8014556:	f205 1577 	addw	r5, r5, #375	; 0x177
 801455a:	f829 8015 	strh.w	r8, [r9, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801455e:	f013 0808 	ands.w	r8, r3, #8
 8014562:	f040 808e 	bne.w	8014682 <DrawLowSpectrum+0x53e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014566:	f89a 9000 	ldrb.w	r9, [sl]
 801456a:	26c9      	movs	r6, #201	; 0xc9
 801456c:	fb01 b909 	mla	r9, r1, r9, fp
 8014570:	e9d9 9517 	ldrd	r9, r5, [r9, #92]	; 0x5c
 8014574:	fb06 2505 	mla	r5, r6, r5, r2
 8014578:	f205 1577 	addw	r5, r5, #375	; 0x177
 801457c:	f829 8015 	strh.w	r8, [r9, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014580:	f013 0810 	ands.w	r8, r3, #16
 8014584:	f040 808e 	bne.w	80146a4 <DrawLowSpectrum+0x560>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014588:	f89a 9000 	ldrb.w	r9, [sl]
 801458c:	26c8      	movs	r6, #200	; 0xc8
 801458e:	fb01 b909 	mla	r9, r1, r9, fp
 8014592:	e9d9 9517 	ldrd	r9, r5, [r9, #92]	; 0x5c
 8014596:	fb06 2505 	mla	r5, r6, r5, r2
 801459a:	f205 1577 	addw	r5, r5, #375	; 0x177
 801459e:	f829 8015 	strh.w	r8, [r9, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80145a2:	f013 0820 	ands.w	r8, r3, #32
 80145a6:	f040 808e 	bne.w	80146c6 <DrawLowSpectrum+0x582>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80145aa:	f89a 9000 	ldrb.w	r9, [sl]
 80145ae:	26c7      	movs	r6, #199	; 0xc7
 80145b0:	fb01 b909 	mla	r9, r1, r9, fp
 80145b4:	e9d9 9517 	ldrd	r9, r5, [r9, #92]	; 0x5c
 80145b8:	fb06 2505 	mla	r5, r6, r5, r2
 80145bc:	f205 1577 	addw	r5, r5, #375	; 0x177
 80145c0:	f829 8015 	strh.w	r8, [r9, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80145c4:	f013 0840 	ands.w	r8, r3, #64	; 0x40
 80145c8:	f040 808e 	bne.w	80146e8 <DrawLowSpectrum+0x5a4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80145cc:	f89a 9000 	ldrb.w	r9, [sl]
 80145d0:	26c6      	movs	r6, #198	; 0xc6
			if(((element[i] >> k) & 1) == 1) {
 80145d2:	f013 0380 	ands.w	r3, r3, #128	; 0x80
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80145d6:	fb01 b909 	mla	r9, r1, r9, fp
 80145da:	e9d9 9517 	ldrd	r9, r5, [r9, #92]	; 0x5c
 80145de:	fb06 2505 	mla	r5, r6, r5, r2
 80145e2:	f205 1577 	addw	r5, r5, #375	; 0x177
 80145e6:	f829 8015 	strh.w	r8, [r9, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80145ea:	f040 808e 	bne.w	801470a <DrawLowSpectrum+0x5c6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80145ee:	f89a 8000 	ldrb.w	r8, [sl]
 80145f2:	f04f 09c5 	mov.w	r9, #197	; 0xc5
 80145f6:	fb01 b808 	mla	r8, r1, r8, fp
 80145fa:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80145fe:	f8d8 805c 	ldr.w	r8, [r8, #92]	; 0x5c
 8014602:	fb09 2505 	mla	r5, r9, r5, r2
	while(i < width) {
 8014606:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014608:	f205 1577 	addw	r5, r5, #375	; 0x177
	while(i < width) {
 801460c:	2a07      	cmp	r2, #7
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801460e:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	while(i < width) {
 8014612:	f000 808c 	beq.w	801472e <DrawLowSpectrum+0x5ea>
			if(((element[i] >> k) & 1) == 1) {
 8014616:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 801461a:	f013 0801 	ands.w	r8, r3, #1
 801461e:	f43f af72 	beq.w	8014506 <DrawLowSpectrum+0x3c2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014622:	f89a 8000 	ldrb.w	r8, [sl]
 8014626:	fb01 b808 	mla	r8, r1, r8, fp
 801462a:	e9d8 8517 	ldrd	r8, r5, [r8, #92]	; 0x5c
 801462e:	fb0e 2505 	mla	r5, lr, r5, r2
 8014632:	f205 1577 	addw	r5, r5, #375	; 0x177
 8014636:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801463a:	f013 0802 	ands.w	r8, r3, #2
 801463e:	f43f af72 	beq.w	8014526 <DrawLowSpectrum+0x3e2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014642:	f89a 8000 	ldrb.w	r8, [sl]
 8014646:	fb01 b808 	mla	r8, r1, r8, fp
 801464a:	e9d8 8517 	ldrd	r8, r5, [r8, #92]	; 0x5c
 801464e:	fb0c 2505 	mla	r5, ip, r5, r2
 8014652:	f205 1577 	addw	r5, r5, #375	; 0x177
 8014656:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801465a:	f013 0804 	ands.w	r8, r3, #4
 801465e:	f43f af72 	beq.w	8014546 <DrawLowSpectrum+0x402>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014662:	f89a 8000 	ldrb.w	r8, [sl]
 8014666:	fb01 b808 	mla	r8, r1, r8, fp
 801466a:	e9d8 8517 	ldrd	r8, r5, [r8, #92]	; 0x5c
 801466e:	fb07 2505 	mla	r5, r7, r5, r2
 8014672:	f205 1577 	addw	r5, r5, #375	; 0x177
 8014676:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801467a:	f013 0808 	ands.w	r8, r3, #8
 801467e:	f43f af72 	beq.w	8014566 <DrawLowSpectrum+0x422>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014682:	f89a 8000 	ldrb.w	r8, [sl]
 8014686:	26c9      	movs	r6, #201	; 0xc9
 8014688:	fb01 b808 	mla	r8, r1, r8, fp
 801468c:	e9d8 8517 	ldrd	r8, r5, [r8, #92]	; 0x5c
 8014690:	fb06 2505 	mla	r5, r6, r5, r2
 8014694:	f205 1577 	addw	r5, r5, #375	; 0x177
 8014698:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801469c:	f013 0810 	ands.w	r8, r3, #16
 80146a0:	f43f af72 	beq.w	8014588 <DrawLowSpectrum+0x444>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80146a4:	f89a 8000 	ldrb.w	r8, [sl]
 80146a8:	26c8      	movs	r6, #200	; 0xc8
 80146aa:	fb01 b808 	mla	r8, r1, r8, fp
 80146ae:	e9d8 8517 	ldrd	r8, r5, [r8, #92]	; 0x5c
 80146b2:	fb06 2505 	mla	r5, r6, r5, r2
 80146b6:	f205 1577 	addw	r5, r5, #375	; 0x177
 80146ba:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80146be:	f013 0820 	ands.w	r8, r3, #32
 80146c2:	f43f af72 	beq.w	80145aa <DrawLowSpectrum+0x466>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80146c6:	f89a 8000 	ldrb.w	r8, [sl]
 80146ca:	26c7      	movs	r6, #199	; 0xc7
 80146cc:	fb01 b808 	mla	r8, r1, r8, fp
 80146d0:	e9d8 8517 	ldrd	r8, r5, [r8, #92]	; 0x5c
 80146d4:	fb06 2505 	mla	r5, r6, r5, r2
 80146d8:	f205 1577 	addw	r5, r5, #375	; 0x177
 80146dc:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80146e0:	f013 0840 	ands.w	r8, r3, #64	; 0x40
 80146e4:	f43f af72 	beq.w	80145cc <DrawLowSpectrum+0x488>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80146e8:	f89a 8000 	ldrb.w	r8, [sl]
 80146ec:	26c6      	movs	r6, #198	; 0xc6
			if(((element[i] >> k) & 1) == 1) {
 80146ee:	f013 0380 	ands.w	r3, r3, #128	; 0x80
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80146f2:	fb01 b808 	mla	r8, r1, r8, fp
 80146f6:	e9d8 8517 	ldrd	r8, r5, [r8, #92]	; 0x5c
 80146fa:	fb06 2505 	mla	r5, r6, r5, r2
 80146fe:	f205 1577 	addw	r5, r5, #375	; 0x177
 8014702:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014706:	f43f af72 	beq.w	80145ee <DrawLowSpectrum+0x4aa>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801470a:	f89a 5000 	ldrb.w	r5, [sl]
 801470e:	f04f 08c5 	mov.w	r8, #197	; 0xc5
 8014712:	fb01 b505 	mla	r5, r1, r5, fp
 8014716:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8014718:	6ded      	ldr	r5, [r5, #92]	; 0x5c
 801471a:	fb08 2303 	mla	r3, r8, r3, r2
	while(i < width) {
 801471e:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014720:	f203 1377 	addw	r3, r3, #375	; 0x177
	while(i < width) {
 8014724:	2a07      	cmp	r2, #7
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014726:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
	while(i < width) {
 801472a:	f47f af74 	bne.w	8014616 <DrawLowSpectrum+0x4d2>
	if(trak.percent < 0) DrawElement(10, 2, 308, 195, 0x00FFFFFF, minus);
 801472e:	4b0d      	ldr	r3, [pc, #52]	; (8014764 <DrawLowSpectrum+0x620>)
 8014730:	edd3 7a01 	vldr	s15, [r3, #4]
 8014734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801473c:	f100 874a 	bmi.w	80155d4 <DrawLowSpectrum+0x1490>
 8014740:	4d09      	ldr	r5, [pc, #36]	; (8014768 <DrawLowSpectrum+0x624>)
 8014742:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014744:	2134      	movs	r1, #52	; 0x34
 8014746:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
 801474a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801474e:	f04f 0cc6 	mov.w	ip, #198	; 0xc6
 8014752:	27c5      	movs	r7, #197	; 0xc5
 8014754:	e0bd      	b.n	80148d2 <DrawLowSpectrum+0x78e>
 8014756:	bf00      	nop
 8014758:	20017208 	.word	0x20017208
 801475c:	20000988 	.word	0x20000988
 8014760:	08024486 	.word	0x08024486
 8014764:	2000f794 	.word	0x2000f794
 8014768:	080245a8 	.word	0x080245a8
 801476c:	461c4000 	.word	0x461c4000
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014770:	f89a 8000 	ldrb.w	r8, [sl]
 8014774:	fb01 b808 	mla	r8, r1, r8, fp
 8014778:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 801477c:	fb0e 2404 	mla	r4, lr, r4, r2
 8014780:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8014784:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014788:	f013 0602 	ands.w	r6, r3, #2
 801478c:	f040 80b7 	bne.w	80148fe <DrawLowSpectrum+0x7ba>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014790:	f89a 8000 	ldrb.w	r8, [sl]
 8014794:	fb01 b808 	mla	r8, r1, r8, fp
 8014798:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 801479c:	fb0c 2404 	mla	r4, ip, r4, r2
 80147a0:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80147a4:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80147a8:	f013 0604 	ands.w	r6, r3, #4
 80147ac:	f040 80b7 	bne.w	801491e <DrawLowSpectrum+0x7da>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80147b0:	f89a 8000 	ldrb.w	r8, [sl]
 80147b4:	fb01 b808 	mla	r8, r1, r8, fp
 80147b8:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 80147bc:	fb07 2404 	mla	r4, r7, r4, r2
 80147c0:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80147c4:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80147c8:	f013 0608 	ands.w	r6, r3, #8
 80147cc:	f040 80b7 	bne.w	801493e <DrawLowSpectrum+0x7fa>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80147d0:	f89a 8000 	ldrb.w	r8, [sl]
 80147d4:	f04f 09c4 	mov.w	r9, #196	; 0xc4
 80147d8:	fb01 b808 	mla	r8, r1, r8, fp
 80147dc:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 80147e0:	fb09 2404 	mla	r4, r9, r4, r2
 80147e4:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80147e8:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80147ec:	f013 0610 	ands.w	r6, r3, #16
 80147f0:	f040 80b7 	bne.w	8014962 <DrawLowSpectrum+0x81e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80147f4:	f89a 8000 	ldrb.w	r8, [sl]
 80147f8:	fb01 b808 	mla	r8, r1, r8, fp
 80147fc:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 8014800:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014804:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 8014808:	f504 749a 	add.w	r4, r4, #308	; 0x134
 801480c:	4414      	add	r4, r2
 801480e:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014812:	f013 0620 	ands.w	r6, r3, #32
 8014816:	f040 80b7 	bne.w	8014988 <DrawLowSpectrum+0x844>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801481a:	f89a 8000 	ldrb.w	r8, [sl]
 801481e:	f04f 09c2 	mov.w	r9, #194	; 0xc2
 8014822:	fb01 b808 	mla	r8, r1, r8, fp
 8014826:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 801482a:	fb09 2404 	mla	r4, r9, r4, r2
 801482e:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8014832:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014836:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 801483a:	f040 80b7 	bne.w	80149ac <DrawLowSpectrum+0x868>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801483e:	f89a 8000 	ldrb.w	r8, [sl]
 8014842:	fb01 b808 	mla	r8, r1, r8, fp
 8014846:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 801484a:	eb04 0944 	add.w	r9, r4, r4, lsl #1
 801484e:	eb04 1489 	add.w	r4, r4, r9, lsl #6
 8014852:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8014856:	4414      	add	r4, r2
 8014858:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801485c:	f013 0680 	ands.w	r6, r3, #128	; 0x80
 8014860:	f040 80b7 	bne.w	80149d2 <DrawLowSpectrum+0x88e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014864:	f89a 8000 	ldrb.w	r8, [sl]
 8014868:	fb01 b808 	mla	r8, r1, r8, fp
 801486c:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 8014870:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014874:	eb02 1484 	add.w	r4, r2, r4, lsl #6
 8014878:	f504 749a 	add.w	r4, r4, #308	; 0x134
 801487c:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014880:	f413 7680 	ands.w	r6, r3, #256	; 0x100
 8014884:	f040 80b7 	bne.w	80149f6 <DrawLowSpectrum+0x8b2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014888:	f89a 8000 	ldrb.w	r8, [sl]
			if(((element[i] >> k) & 1) == 1) {
 801488c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014890:	fb01 b808 	mla	r8, r1, r8, fp
 8014894:	e9d8 8417 	ldrd	r8, r4, [r8, #92]	; 0x5c
 8014898:	eb04 0944 	add.w	r9, r4, r4, lsl #1
 801489c:	ebc4 1489 	rsb	r4, r4, r9, lsl #6
 80148a0:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80148a4:	4414      	add	r4, r2
 80148a6:	f828 6014 	strh.w	r6, [r8, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80148aa:	f040 80b7 	bne.w	8014a1c <DrawLowSpectrum+0x8d8>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80148ae:	f89a 6000 	ldrb.w	r6, [sl]
 80148b2:	f04f 08be 	mov.w	r8, #190	; 0xbe
 80148b6:	fb01 b606 	mla	r6, r1, r6, fp
 80148ba:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80148be:	fb08 2404 	mla	r4, r8, r4, r2
	while(i < width) {
 80148c2:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80148c4:	f504 749a 	add.w	r4, r4, #308	; 0x134
	while(i < width) {
 80148c8:	2a0a      	cmp	r2, #10
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80148ca:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 80148ce:	f000 80b6 	beq.w	8014a3e <DrawLowSpectrum+0x8fa>
			if(((element[i] >> k) & 1) == 1) {
 80148d2:	f835 3b02 	ldrh.w	r3, [r5], #2
 80148d6:	f013 0601 	ands.w	r6, r3, #1
 80148da:	f43f af49 	beq.w	8014770 <DrawLowSpectrum+0x62c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80148de:	f89a 6000 	ldrb.w	r6, [sl]
 80148e2:	fb01 b606 	mla	r6, r1, r6, fp
 80148e6:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80148ea:	fb0e 2404 	mla	r4, lr, r4, r2
 80148ee:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80148f2:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80148f6:	f013 0602 	ands.w	r6, r3, #2
 80148fa:	f43f af49 	beq.w	8014790 <DrawLowSpectrum+0x64c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80148fe:	f89a 6000 	ldrb.w	r6, [sl]
 8014902:	fb01 b606 	mla	r6, r1, r6, fp
 8014906:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 801490a:	fb0c 2404 	mla	r4, ip, r4, r2
 801490e:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8014912:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014916:	f013 0604 	ands.w	r6, r3, #4
 801491a:	f43f af49 	beq.w	80147b0 <DrawLowSpectrum+0x66c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801491e:	f89a 6000 	ldrb.w	r6, [sl]
 8014922:	fb01 b606 	mla	r6, r1, r6, fp
 8014926:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 801492a:	fb07 2404 	mla	r4, r7, r4, r2
 801492e:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8014932:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014936:	f013 0608 	ands.w	r6, r3, #8
 801493a:	f43f af49 	beq.w	80147d0 <DrawLowSpectrum+0x68c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801493e:	f89a 6000 	ldrb.w	r6, [sl]
 8014942:	f04f 08c4 	mov.w	r8, #196	; 0xc4
 8014946:	fb01 b606 	mla	r6, r1, r6, fp
 801494a:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 801494e:	fb08 2404 	mla	r4, r8, r4, r2
 8014952:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8014956:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801495a:	f013 0610 	ands.w	r6, r3, #16
 801495e:	f43f af49 	beq.w	80147f4 <DrawLowSpectrum+0x6b0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014962:	f89a 6000 	ldrb.w	r6, [sl]
 8014966:	fb01 b606 	mla	r6, r1, r6, fp
 801496a:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 801496e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014972:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 8014976:	f504 749a 	add.w	r4, r4, #308	; 0x134
 801497a:	4414      	add	r4, r2
 801497c:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014980:	f013 0620 	ands.w	r6, r3, #32
 8014984:	f43f af49 	beq.w	801481a <DrawLowSpectrum+0x6d6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014988:	f89a 6000 	ldrb.w	r6, [sl]
 801498c:	f04f 08c2 	mov.w	r8, #194	; 0xc2
 8014990:	fb01 b606 	mla	r6, r1, r6, fp
 8014994:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014998:	fb08 2404 	mla	r4, r8, r4, r2
 801499c:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80149a0:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80149a4:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 80149a8:	f43f af49 	beq.w	801483e <DrawLowSpectrum+0x6fa>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80149ac:	f89a 6000 	ldrb.w	r6, [sl]
 80149b0:	fb01 b606 	mla	r6, r1, r6, fp
 80149b4:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80149b8:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80149bc:	eb04 1488 	add.w	r4, r4, r8, lsl #6
 80149c0:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80149c4:	4414      	add	r4, r2
 80149c6:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80149ca:	f013 0680 	ands.w	r6, r3, #128	; 0x80
 80149ce:	f43f af49 	beq.w	8014864 <DrawLowSpectrum+0x720>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80149d2:	f89a 6000 	ldrb.w	r6, [sl]
 80149d6:	fb01 b606 	mla	r6, r1, r6, fp
 80149da:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80149de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80149e2:	eb02 1484 	add.w	r4, r2, r4, lsl #6
 80149e6:	f504 749a 	add.w	r4, r4, #308	; 0x134
 80149ea:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80149ee:	f413 7680 	ands.w	r6, r3, #256	; 0x100
 80149f2:	f43f af49 	beq.w	8014888 <DrawLowSpectrum+0x744>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80149f6:	f89a 6000 	ldrb.w	r6, [sl]
			if(((element[i] >> k) & 1) == 1) {
 80149fa:	f413 7300 	ands.w	r3, r3, #512	; 0x200
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80149fe:	fb01 b606 	mla	r6, r1, r6, fp
 8014a02:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014a06:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8014a0a:	ebc4 1488 	rsb	r4, r4, r8, lsl #6
 8014a0e:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8014a12:	4414      	add	r4, r2
 8014a14:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014a18:	f43f af49 	beq.w	80148ae <DrawLowSpectrum+0x76a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014a1c:	f89a 4000 	ldrb.w	r4, [sl]
 8014a20:	26be      	movs	r6, #190	; 0xbe
 8014a22:	fb01 b404 	mla	r4, r1, r4, fp
 8014a26:	e9d4 4317 	ldrd	r4, r3, [r4, #92]	; 0x5c
 8014a2a:	fb06 2303 	mla	r3, r6, r3, r2
	while(i < width) {
 8014a2e:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014a30:	f503 739a 	add.w	r3, r3, #308	; 0x134
	while(i < width) {
 8014a34:	2a0a      	cmp	r2, #10
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014a36:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
	while(i < width) {
 8014a3a:	f47f af4a 	bne.w	80148d2 <DrawLowSpectrum+0x78e>
	uint16_t percent = (abs)(trak.percent * 10000);
 8014a3e:	ed1f 7ab5 	vldr	s14, [pc, #-724]	; 801476c <DrawLowSpectrum+0x628>
	if(display.pitchmode == 0) {
 8014a42:	4bc6      	ldr	r3, [pc, #792]	; (8014d5c <DrawLowSpectrum+0xc18>)
	uint16_t percent = (abs)(trak.percent * 10000);
 8014a44:	ee67 7a87 	vmul.f32	s15, s15, s14
	if(display.pitchmode == 0) {
 8014a48:	785a      	ldrb	r2, [r3, #1]
	uint16_t percent = (abs)(trak.percent * 10000);
 8014a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a4e:	ee17 8a90 	vmov	r8, s15
 8014a52:	f1b8 0f00 	cmp.w	r8, #0
 8014a56:	bfb8      	it	lt
 8014a58:	f1c8 0800 	rsblt	r8, r8, #0
 8014a5c:	fa1f f388 	uxth.w	r3, r8
 8014a60:	9303      	str	r3, [sp, #12]
	if(display.pitchmode == 0) {
 8014a62:	2a00      	cmp	r2, #0
 8014a64:	f001 8347 	beq.w	80160f6 <DrawLowSpectrum+0x1fb2>
	else if(display.pitchmode == 1) {
 8014a68:	2a01      	cmp	r2, #1
 8014a6a:	f002 8486 	beq.w	801737a <DrawLowSpectrum+0x3236>
	else if(display.pitchmode == 2) {
 8014a6e:	2a02      	cmp	r2, #2
 8014a70:	f002 82b3 	beq.w	8016fda <DrawLowSpectrum+0x2e96>
	else if(display.pitchmode == 3) {
 8014a74:	2a03      	cmp	r2, #3
 8014a76:	f002 8656 	beq.w	8017726 <DrawLowSpectrum+0x35e2>
 8014a7a:	48b9      	ldr	r0, [pc, #740]	; (8014d60 <DrawLowSpectrum+0xc1c>)
 8014a7c:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014a7e:	2134      	movs	r1, #52	; 0x34
 8014a80:	f04f 08b2 	mov.w	r8, #178	; 0xb2
 8014a84:	f100 0e44 	add.w	lr, r0, #68	; 0x44
 8014a88:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8014a8c:	f04f 0cb1 	mov.w	ip, #177	; 0xb1
 8014a90:	e04b      	b.n	8014b2a <DrawLowSpectrum+0x9e6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014a92:	f89a 9000 	ldrb.w	r9, [sl]
 8014a96:	fb01 b909 	mla	r9, r1, r9, fp
 8014a9a:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014a9e:	fb08 2404 	mla	r4, r8, r4, r2
 8014aa2:	3428      	adds	r4, #40	; 0x28
 8014aa4:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014aa8:	f013 0602 	ands.w	r6, r3, #2
 8014aac:	d150      	bne.n	8014b50 <DrawLowSpectrum+0xa0c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014aae:	f89a 9000 	ldrb.w	r9, [sl]
 8014ab2:	fb01 b909 	mla	r9, r1, r9, fp
 8014ab6:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014aba:	fb0c 2404 	mla	r4, ip, r4, r2
 8014abe:	3428      	adds	r4, #40	; 0x28
 8014ac0:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014ac4:	f013 0604 	ands.w	r6, r3, #4
 8014ac8:	d150      	bne.n	8014b6c <DrawLowSpectrum+0xa28>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014aca:	f89a 9000 	ldrb.w	r9, [sl]
 8014ace:	27b0      	movs	r7, #176	; 0xb0
 8014ad0:	fb01 b909 	mla	r9, r1, r9, fp
 8014ad4:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014ad8:	fb07 2404 	mla	r4, r7, r4, r2
 8014adc:	3428      	adds	r4, #40	; 0x28
 8014ade:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014ae2:	f013 0608 	ands.w	r6, r3, #8
 8014ae6:	d150      	bne.n	8014b8a <DrawLowSpectrum+0xa46>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014ae8:	f89a 9000 	ldrb.w	r9, [sl]
 8014aec:	27af      	movs	r7, #175	; 0xaf
			if(((element[i] >> k) & 1) == 1) {
 8014aee:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014af2:	fb01 b909 	mla	r9, r1, r9, fp
 8014af6:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014afa:	fb07 2404 	mla	r4, r7, r4, r2
 8014afe:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8014b02:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014b06:	d150      	bne.n	8014baa <DrawLowSpectrum+0xa66>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014b08:	f89a 6000 	ldrb.w	r6, [sl]
 8014b0c:	27ae      	movs	r7, #174	; 0xae
	while(i < width) {
 8014b0e:	4586      	cmp	lr, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014b10:	fb01 b606 	mla	r6, r1, r6, fp
 8014b14:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014b18:	fb07 2404 	mla	r4, r7, r4, r2
	while(i < width) {
 8014b1c:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014b20:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8014b24:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 8014b28:	d050      	beq.n	8014bcc <DrawLowSpectrum+0xa88>
			if(((element[i] >> k) & 1) == 1) {
 8014b2a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014b2e:	f013 0601 	ands.w	r6, r3, #1
 8014b32:	d0ae      	beq.n	8014a92 <DrawLowSpectrum+0x94e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014b34:	f89a 6000 	ldrb.w	r6, [sl]
 8014b38:	fb01 b606 	mla	r6, r1, r6, fp
 8014b3c:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014b40:	fb08 2404 	mla	r4, r8, r4, r2
 8014b44:	3428      	adds	r4, #40	; 0x28
 8014b46:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014b4a:	f013 0602 	ands.w	r6, r3, #2
 8014b4e:	d0ae      	beq.n	8014aae <DrawLowSpectrum+0x96a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014b50:	f89a 6000 	ldrb.w	r6, [sl]
 8014b54:	fb01 b606 	mla	r6, r1, r6, fp
 8014b58:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014b5c:	fb0c 2404 	mla	r4, ip, r4, r2
 8014b60:	3428      	adds	r4, #40	; 0x28
 8014b62:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014b66:	f013 0604 	ands.w	r6, r3, #4
 8014b6a:	d0ae      	beq.n	8014aca <DrawLowSpectrum+0x986>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014b6c:	f89a 6000 	ldrb.w	r6, [sl]
 8014b70:	27b0      	movs	r7, #176	; 0xb0
 8014b72:	fb01 b606 	mla	r6, r1, r6, fp
 8014b76:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014b7a:	fb07 2404 	mla	r4, r7, r4, r2
 8014b7e:	3428      	adds	r4, #40	; 0x28
 8014b80:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014b84:	f013 0608 	ands.w	r6, r3, #8
 8014b88:	d0ae      	beq.n	8014ae8 <DrawLowSpectrum+0x9a4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014b8a:	f89a 6000 	ldrb.w	r6, [sl]
 8014b8e:	27af      	movs	r7, #175	; 0xaf
			if(((element[i] >> k) & 1) == 1) {
 8014b90:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014b94:	fb01 b606 	mla	r6, r1, r6, fp
 8014b98:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014b9c:	fb07 2404 	mla	r4, r7, r4, r2
 8014ba0:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8014ba4:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014ba8:	d0ae      	beq.n	8014b08 <DrawLowSpectrum+0x9c4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014baa:	f89a 4000 	ldrb.w	r4, [sl]
 8014bae:	26ae      	movs	r6, #174	; 0xae
	while(i < width) {
 8014bb0:	4586      	cmp	lr, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014bb2:	fb01 b404 	mla	r4, r1, r4, fp
 8014bb6:	e9d4 4317 	ldrd	r4, r3, [r4, #92]	; 0x5c
 8014bba:	fb06 2303 	mla	r3, r6, r3, r2
	while(i < width) {
 8014bbe:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014bc2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8014bc6:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
	while(i < width) {
 8014bca:	d1ae      	bne.n	8014b2a <DrawLowSpectrum+0x9e6>
 8014bcc:	4865      	ldr	r0, [pc, #404]	; (8014d64 <DrawLowSpectrum+0xc20>)
 8014bce:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014bd0:	2134      	movs	r1, #52	; 0x34
 8014bd2:	f04f 08b2 	mov.w	r8, #178	; 0xb2
 8014bd6:	f100 0e3e 	add.w	lr, r0, #62	; 0x3e
 8014bda:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8014bde:	f04f 0cb1 	mov.w	ip, #177	; 0xb1
 8014be2:	e04e      	b.n	8014c82 <DrawLowSpectrum+0xb3e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014be4:	f89a 9000 	ldrb.w	r9, [sl]
 8014be8:	fb01 b909 	mla	r9, r1, r9, fp
 8014bec:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014bf0:	fb08 2404 	mla	r4, r8, r4, r2
 8014bf4:	f504 749b 	add.w	r4, r4, #310	; 0x136
 8014bf8:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014bfc:	f013 0602 	ands.w	r6, r3, #2
 8014c00:	d153      	bne.n	8014caa <DrawLowSpectrum+0xb66>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014c02:	f89a 9000 	ldrb.w	r9, [sl]
 8014c06:	fb01 b909 	mla	r9, r1, r9, fp
 8014c0a:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014c0e:	fb0c 2404 	mla	r4, ip, r4, r2
 8014c12:	f504 749b 	add.w	r4, r4, #310	; 0x136
 8014c16:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014c1a:	f013 0604 	ands.w	r6, r3, #4
 8014c1e:	d153      	bne.n	8014cc8 <DrawLowSpectrum+0xb84>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014c20:	f89a 9000 	ldrb.w	r9, [sl]
 8014c24:	27b0      	movs	r7, #176	; 0xb0
 8014c26:	fb01 b909 	mla	r9, r1, r9, fp
 8014c2a:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014c2e:	fb07 2404 	mla	r4, r7, r4, r2
 8014c32:	f504 749b 	add.w	r4, r4, #310	; 0x136
 8014c36:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014c3a:	f013 0608 	ands.w	r6, r3, #8
 8014c3e:	d153      	bne.n	8014ce8 <DrawLowSpectrum+0xba4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014c40:	f89a 9000 	ldrb.w	r9, [sl]
 8014c44:	27af      	movs	r7, #175	; 0xaf
			if(((element[i] >> k) & 1) == 1) {
 8014c46:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014c4a:	fb01 b909 	mla	r9, r1, r9, fp
 8014c4e:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014c52:	fb07 2404 	mla	r4, r7, r4, r2
 8014c56:	f504 749b 	add.w	r4, r4, #310	; 0x136
 8014c5a:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014c5e:	d153      	bne.n	8014d08 <DrawLowSpectrum+0xbc4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014c60:	f89a 6000 	ldrb.w	r6, [sl]
 8014c64:	27ae      	movs	r7, #174	; 0xae
	while(i < width) {
 8014c66:	4586      	cmp	lr, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014c68:	fb01 b606 	mla	r6, r1, r6, fp
 8014c6c:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014c70:	fb07 2404 	mla	r4, r7, r4, r2
	while(i < width) {
 8014c74:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014c78:	f504 749b 	add.w	r4, r4, #310	; 0x136
 8014c7c:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 8014c80:	d053      	beq.n	8014d2a <DrawLowSpectrum+0xbe6>
			if(((element[i] >> k) & 1) == 1) {
 8014c82:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014c86:	f013 0601 	ands.w	r6, r3, #1
 8014c8a:	d0ab      	beq.n	8014be4 <DrawLowSpectrum+0xaa0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014c8c:	f89a 6000 	ldrb.w	r6, [sl]
 8014c90:	fb01 b606 	mla	r6, r1, r6, fp
 8014c94:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014c98:	fb08 2404 	mla	r4, r8, r4, r2
 8014c9c:	f504 749b 	add.w	r4, r4, #310	; 0x136
 8014ca0:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014ca4:	f013 0602 	ands.w	r6, r3, #2
 8014ca8:	d0ab      	beq.n	8014c02 <DrawLowSpectrum+0xabe>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014caa:	f89a 6000 	ldrb.w	r6, [sl]
 8014cae:	fb01 b606 	mla	r6, r1, r6, fp
 8014cb2:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014cb6:	fb0c 2404 	mla	r4, ip, r4, r2
 8014cba:	f504 749b 	add.w	r4, r4, #310	; 0x136
 8014cbe:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014cc2:	f013 0604 	ands.w	r6, r3, #4
 8014cc6:	d0ab      	beq.n	8014c20 <DrawLowSpectrum+0xadc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014cc8:	f89a 6000 	ldrb.w	r6, [sl]
 8014ccc:	27b0      	movs	r7, #176	; 0xb0
 8014cce:	fb01 b606 	mla	r6, r1, r6, fp
 8014cd2:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014cd6:	fb07 2404 	mla	r4, r7, r4, r2
 8014cda:	f504 749b 	add.w	r4, r4, #310	; 0x136
 8014cde:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014ce2:	f013 0608 	ands.w	r6, r3, #8
 8014ce6:	d0ab      	beq.n	8014c40 <DrawLowSpectrum+0xafc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014ce8:	f89a 6000 	ldrb.w	r6, [sl]
 8014cec:	27af      	movs	r7, #175	; 0xaf
			if(((element[i] >> k) & 1) == 1) {
 8014cee:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014cf2:	fb01 b606 	mla	r6, r1, r6, fp
 8014cf6:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014cfa:	fb07 2404 	mla	r4, r7, r4, r2
 8014cfe:	f504 749b 	add.w	r4, r4, #310	; 0x136
 8014d02:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014d06:	d0ab      	beq.n	8014c60 <DrawLowSpectrum+0xb1c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014d08:	f89a 4000 	ldrb.w	r4, [sl]
 8014d0c:	26ae      	movs	r6, #174	; 0xae
	while(i < width) {
 8014d0e:	4586      	cmp	lr, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014d10:	fb01 b404 	mla	r4, r1, r4, fp
 8014d14:	e9d4 4317 	ldrd	r4, r3, [r4, #92]	; 0x5c
 8014d18:	fb06 2303 	mla	r3, r6, r3, r2
	while(i < width) {
 8014d1c:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014d20:	f503 739b 	add.w	r3, r3, #310	; 0x136
 8014d24:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
	while(i < width) {
 8014d28:	d1ab      	bne.n	8014c82 <DrawLowSpectrum+0xb3e>
	if(display.cuemode == 1) {
 8014d2a:	4b0c      	ldr	r3, [pc, #48]	; (8014d5c <DrawLowSpectrum+0xc18>)
 8014d2c:	789b      	ldrb	r3, [r3, #2]
 8014d2e:	2b01      	cmp	r3, #1
 8014d30:	f001 85ac 	beq.w	801688c <DrawLowSpectrum+0x2748>
	if(display.quantize == 1) {
 8014d34:	4b09      	ldr	r3, [pc, #36]	; (8014d5c <DrawLowSpectrum+0xc18>)
 8014d36:	7c5b      	ldrb	r3, [r3, #17]
 8014d38:	2b01      	cmp	r3, #1
 8014d3a:	f001 84ff 	beq.w	801673c <DrawLowSpectrum+0x25f8>
	if(display.mastertempomode == 1) {
 8014d3e:	4b07      	ldr	r3, [pc, #28]	; (8014d5c <DrawLowSpectrum+0xc18>)
 8014d40:	795b      	ldrb	r3, [r3, #5]
 8014d42:	2b01      	cmp	r3, #1
 8014d44:	f001 8368 	beq.w	8016418 <DrawLowSpectrum+0x22d4>
 8014d48:	22ff      	movs	r2, #255	; 0xff
 8014d4a:	4c07      	ldr	r4, [pc, #28]	; (8014d68 <DrawLowSpectrum+0xc24>)
 8014d4c:	20a5      	movs	r0, #165	; 0xa5
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014d4e:	2534      	movs	r5, #52	; 0x34
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014d50:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8014d54:	4613      	mov	r3, r2
	if(display.mastertempomode == 1) {
 8014d56:	22cc      	movs	r2, #204	; 0xcc
 8014d58:	e016      	b.n	8014d88 <DrawLowSpectrum+0xc44>
 8014d5a:	bf00      	nop
 8014d5c:	20000988 	.word	0x20000988
 8014d60:	08024cb6 	.word	0x08024cb6
 8014d64:	08024c76 	.word	0x08024c76
 8014d68:	08024468 	.word	0x08024468
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8014d70:	fb05 b303 	mla	r3, r5, r3, fp
 8014d74:	e9d3 7117 	ldrd	r7, r1, [r3, #92]	; 0x5c
 8014d78:	fb01 0302 	mla	r3, r1, r2, r0
		while(k < height) {
 8014d7c:	3a01      	subs	r2, #1
 8014d7e:	2abc      	cmp	r2, #188	; 0xbc
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014d80:	f827 6013 	strh.w	r6, [r7, r3, lsl #1]
		while(k < height) {
 8014d84:	d013      	beq.n	8014dae <DrawLowSpectrum+0xc6a>
			if(((element[i] >> k) & 1) == 1) {
 8014d86:	8823      	ldrh	r3, [r4, #0]
 8014d88:	f1c2 01cc 	rsb	r1, r2, #204	; 0xcc
 8014d8c:	410b      	asrs	r3, r1
 8014d8e:	f013 0301 	ands.w	r3, r3, #1
 8014d92:	d1eb      	bne.n	8014d6c <DrawLowSpectrum+0xc28>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014d94:	f89a 1000 	ldrb.w	r1, [sl]
 8014d98:	fb05 b101 	mla	r1, r5, r1, fp
 8014d9c:	e9d1 c717 	ldrd	ip, r7, [r1, #92]	; 0x5c
 8014da0:	fb07 0102 	mla	r1, r7, r2, r0
		while(k < height) {
 8014da4:	3a01      	subs	r2, #1
 8014da6:	2abc      	cmp	r2, #188	; 0xbc
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014da8:	f82c 3011 	strh.w	r3, [ip, r1, lsl #1]
		while(k < height) {
 8014dac:	d1eb      	bne.n	8014d86 <DrawLowSpectrum+0xc42>
	while(i < width) {
 8014dae:	3001      	adds	r0, #1
 8014db0:	28b4      	cmp	r0, #180	; 0xb4
 8014db2:	d01d      	beq.n	8014df0 <DrawLowSpectrum+0xcac>
			if(((element[i] >> k) & 1) == 1) {
 8014db4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 8014db8:	e7cd      	b.n	8014d56 <DrawLowSpectrum+0xc12>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8014dba:	2234      	movs	r2, #52	; 0x34
 8014dbc:	f89a 3000 	ldrb.w	r3, [sl]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8014dc0:	4881      	ldr	r0, [pc, #516]	; (8014fc8 <DrawLowSpectrum+0xe84>)
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8014dc2:	fb02 b303 	mla	r3, r2, r3, fp
		Rectangle(40, 253, file_pos, 3, 0x00FFFFFF);
 8014dc6:	4a81      	ldr	r2, [pc, #516]	; (8014fcc <DrawLowSpectrum+0xe88>)
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8014dc8:	e9d3 5417 	ldrd	r5, r4, [r3, #92]	; 0x5c
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8014dcc:	8816      	ldrh	r6, [r2, #0]
		Rectangle(40, 253, file_pos, 3, 0x00FFFFFF);
 8014dce:	9207      	str	r2, [sp, #28]
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8014dd0:	1ba3      	subs	r3, r4, r6
 8014dd2:	f8c9 300c 	str.w	r3, [r9, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8014dd6:	f7ec fd75 	bl	80018c4 <HAL_DMA2D_Init>
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	f47f ab4c 	bne.w	8014478 <DrawLowSpectrum+0x334>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8014de0:	ebc4 1284 	rsb	r2, r4, r4, lsl #6
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8014de4:	4633      	mov	r3, r6
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8014de6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014dea:	3228      	adds	r2, #40	; 0x28
 8014dec:	f002 b8e3 	b.w	8016fb6 <DrawLowSpectrum+0x2e72>
 8014df0:	4d77      	ldr	r5, [pc, #476]	; (8014fd0 <DrawLowSpectrum+0xe8c>)
	while(i < width) {
 8014df2:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014df4:	2134      	movs	r1, #52	; 0x34
 8014df6:	f04f 08cc 	mov.w	r8, #204	; 0xcc
 8014dfa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014dfe:	f04f 0ecb 	mov.w	lr, #203	; 0xcb
 8014e02:	f04f 0cca 	mov.w	ip, #202	; 0xca
 8014e06:	e066      	b.n	8014ed6 <DrawLowSpectrum+0xd92>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014e08:	f89a 9000 	ldrb.w	r9, [sl]
 8014e0c:	fb01 b909 	mla	r9, r1, r9, fp
 8014e10:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014e14:	fb08 2404 	mla	r4, r8, r4, r2
 8014e18:	34d5      	adds	r4, #213	; 0xd5
 8014e1a:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014e1e:	f013 0602 	ands.w	r6, r3, #2
 8014e22:	d16b      	bne.n	8014efc <DrawLowSpectrum+0xdb8>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014e24:	f89a 9000 	ldrb.w	r9, [sl]
 8014e28:	fb01 b909 	mla	r9, r1, r9, fp
 8014e2c:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014e30:	fb0e 2404 	mla	r4, lr, r4, r2
 8014e34:	34d5      	adds	r4, #213	; 0xd5
 8014e36:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014e3a:	f013 0604 	ands.w	r6, r3, #4
 8014e3e:	d16b      	bne.n	8014f18 <DrawLowSpectrum+0xdd4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014e40:	f89a 9000 	ldrb.w	r9, [sl]
 8014e44:	fb01 b909 	mla	r9, r1, r9, fp
 8014e48:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014e4c:	fb0c 2404 	mla	r4, ip, r4, r2
 8014e50:	34d5      	adds	r4, #213	; 0xd5
 8014e52:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014e56:	f013 0608 	ands.w	r6, r3, #8
 8014e5a:	d16b      	bne.n	8014f34 <DrawLowSpectrum+0xdf0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014e5c:	f89a 9000 	ldrb.w	r9, [sl]
 8014e60:	27c9      	movs	r7, #201	; 0xc9
 8014e62:	fb01 b909 	mla	r9, r1, r9, fp
 8014e66:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014e6a:	fb07 2404 	mla	r4, r7, r4, r2
 8014e6e:	34d5      	adds	r4, #213	; 0xd5
 8014e70:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014e74:	f013 0610 	ands.w	r6, r3, #16
 8014e78:	d16b      	bne.n	8014f52 <DrawLowSpectrum+0xe0e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014e7a:	f89a 9000 	ldrb.w	r9, [sl]
 8014e7e:	27c8      	movs	r7, #200	; 0xc8
 8014e80:	fb01 b909 	mla	r9, r1, r9, fp
 8014e84:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014e88:	fb07 2404 	mla	r4, r7, r4, r2
 8014e8c:	34d5      	adds	r4, #213	; 0xd5
 8014e8e:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014e92:	f013 0620 	ands.w	r6, r3, #32
 8014e96:	d16b      	bne.n	8014f70 <DrawLowSpectrum+0xe2c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014e98:	f89a 9000 	ldrb.w	r9, [sl]
 8014e9c:	27c7      	movs	r7, #199	; 0xc7
			if(((element[i] >> k) & 1) == 1) {
 8014e9e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014ea2:	fb01 b909 	mla	r9, r1, r9, fp
 8014ea6:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014eaa:	fb07 2404 	mla	r4, r7, r4, r2
 8014eae:	f104 04d5 	add.w	r4, r4, #213	; 0xd5
 8014eb2:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014eb6:	d16b      	bne.n	8014f90 <DrawLowSpectrum+0xe4c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014eb8:	f89a 6000 	ldrb.w	r6, [sl]
 8014ebc:	27c6      	movs	r7, #198	; 0xc6
 8014ebe:	fb01 b606 	mla	r6, r1, r6, fp
 8014ec2:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014ec6:	fb07 2404 	mla	r4, r7, r4, r2
	while(i < width) {
 8014eca:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014ecc:	34d5      	adds	r4, #213	; 0xd5
	while(i < width) {
 8014ece:	2a06      	cmp	r2, #6
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014ed0:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 8014ed4:	d06b      	beq.n	8014fae <DrawLowSpectrum+0xe6a>
			if(((element[i] >> k) & 1) == 1) {
 8014ed6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8014eda:	f013 0601 	ands.w	r6, r3, #1
 8014ede:	d093      	beq.n	8014e08 <DrawLowSpectrum+0xcc4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014ee0:	f89a 6000 	ldrb.w	r6, [sl]
 8014ee4:	fb01 b606 	mla	r6, r1, r6, fp
 8014ee8:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014eec:	fb08 2404 	mla	r4, r8, r4, r2
 8014ef0:	34d5      	adds	r4, #213	; 0xd5
 8014ef2:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014ef6:	f013 0602 	ands.w	r6, r3, #2
 8014efa:	d093      	beq.n	8014e24 <DrawLowSpectrum+0xce0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014efc:	f89a 6000 	ldrb.w	r6, [sl]
 8014f00:	fb01 b606 	mla	r6, r1, r6, fp
 8014f04:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014f08:	fb0e 2404 	mla	r4, lr, r4, r2
 8014f0c:	34d5      	adds	r4, #213	; 0xd5
 8014f0e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014f12:	f013 0604 	ands.w	r6, r3, #4
 8014f16:	d093      	beq.n	8014e40 <DrawLowSpectrum+0xcfc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014f18:	f89a 6000 	ldrb.w	r6, [sl]
 8014f1c:	fb01 b606 	mla	r6, r1, r6, fp
 8014f20:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014f24:	fb0c 2404 	mla	r4, ip, r4, r2
 8014f28:	34d5      	adds	r4, #213	; 0xd5
 8014f2a:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014f2e:	f013 0608 	ands.w	r6, r3, #8
 8014f32:	d093      	beq.n	8014e5c <DrawLowSpectrum+0xd18>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014f34:	f89a 6000 	ldrb.w	r6, [sl]
 8014f38:	27c9      	movs	r7, #201	; 0xc9
 8014f3a:	fb01 b606 	mla	r6, r1, r6, fp
 8014f3e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014f42:	fb07 2404 	mla	r4, r7, r4, r2
 8014f46:	34d5      	adds	r4, #213	; 0xd5
 8014f48:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014f4c:	f013 0610 	ands.w	r6, r3, #16
 8014f50:	d093      	beq.n	8014e7a <DrawLowSpectrum+0xd36>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014f52:	f89a 6000 	ldrb.w	r6, [sl]
 8014f56:	27c8      	movs	r7, #200	; 0xc8
 8014f58:	fb01 b606 	mla	r6, r1, r6, fp
 8014f5c:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014f60:	fb07 2404 	mla	r4, r7, r4, r2
 8014f64:	34d5      	adds	r4, #213	; 0xd5
 8014f66:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014f6a:	f013 0620 	ands.w	r6, r3, #32
 8014f6e:	d093      	beq.n	8014e98 <DrawLowSpectrum+0xd54>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014f70:	f89a 6000 	ldrb.w	r6, [sl]
 8014f74:	27c7      	movs	r7, #199	; 0xc7
			if(((element[i] >> k) & 1) == 1) {
 8014f76:	f013 0340 	ands.w	r3, r3, #64	; 0x40
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014f7a:	fb01 b606 	mla	r6, r1, r6, fp
 8014f7e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8014f82:	fb07 2404 	mla	r4, r7, r4, r2
 8014f86:	f104 04d5 	add.w	r4, r4, #213	; 0xd5
 8014f8a:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014f8e:	d093      	beq.n	8014eb8 <DrawLowSpectrum+0xd74>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014f90:	f89a 4000 	ldrb.w	r4, [sl]
 8014f94:	26c6      	movs	r6, #198	; 0xc6
 8014f96:	fb01 b404 	mla	r4, r1, r4, fp
 8014f9a:	e9d4 4317 	ldrd	r4, r3, [r4, #92]	; 0x5c
 8014f9e:	fb06 2303 	mla	r3, r6, r3, r2
	while(i < width) {
 8014fa2:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014fa4:	33d5      	adds	r3, #213	; 0xd5
	while(i < width) {
 8014fa6:	2a06      	cmp	r2, #6
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014fa8:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
	while(i < width) {
 8014fac:	d193      	bne.n	8014ed6 <DrawLowSpectrum+0xd92>
 8014fae:	4d09      	ldr	r5, [pc, #36]	; (8014fd4 <DrawLowSpectrum+0xe90>)
 8014fb0:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8014fb2:	2134      	movs	r1, #52	; 0x34
 8014fb4:	f04f 08cc 	mov.w	r8, #204	; 0xcc
 8014fb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014fbc:	f04f 0ecb 	mov.w	lr, #203	; 0xcb
 8014fc0:	f04f 0cca 	mov.w	ip, #202	; 0xca
 8014fc4:	e060      	b.n	8015088 <DrawLowSpectrum+0xf44>
 8014fc6:	bf00      	nop
 8014fc8:	200009ac 	.word	0x200009ac
 8014fcc:	2000e9a0 	.word	0x2000e9a0
 8014fd0:	08024c6c 	.word	0x08024c6c
 8014fd4:	0802435c 	.word	0x0802435c
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014fd8:	f89a 9000 	ldrb.w	r9, [sl]
 8014fdc:	fb01 b909 	mla	r9, r1, r9, fp
 8014fe0:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8014fe4:	fb08 2404 	mla	r4, r8, r4, r2
 8014fe8:	34fc      	adds	r4, #252	; 0xfc
 8014fea:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8014fee:	f013 0602 	ands.w	r6, r3, #2
 8014ff2:	d15c      	bne.n	80150ae <DrawLowSpectrum+0xf6a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8014ff4:	f89a 9000 	ldrb.w	r9, [sl]
 8014ff8:	fb01 b909 	mla	r9, r1, r9, fp
 8014ffc:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 8015000:	fb0e 2404 	mla	r4, lr, r4, r2
 8015004:	34fc      	adds	r4, #252	; 0xfc
 8015006:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801500a:	f013 0604 	ands.w	r6, r3, #4
 801500e:	d15c      	bne.n	80150ca <DrawLowSpectrum+0xf86>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015010:	f89a 9000 	ldrb.w	r9, [sl]
 8015014:	fb01 b909 	mla	r9, r1, r9, fp
 8015018:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 801501c:	fb0c 2404 	mla	r4, ip, r4, r2
 8015020:	34fc      	adds	r4, #252	; 0xfc
 8015022:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015026:	f013 0608 	ands.w	r6, r3, #8
 801502a:	d15c      	bne.n	80150e6 <DrawLowSpectrum+0xfa2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801502c:	f89a 9000 	ldrb.w	r9, [sl]
 8015030:	27c9      	movs	r7, #201	; 0xc9
 8015032:	fb01 b909 	mla	r9, r1, r9, fp
 8015036:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 801503a:	fb07 2404 	mla	r4, r7, r4, r2
 801503e:	34fc      	adds	r4, #252	; 0xfc
 8015040:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015044:	f013 0610 	ands.w	r6, r3, #16
 8015048:	d15c      	bne.n	8015104 <DrawLowSpectrum+0xfc0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801504a:	f89a 9000 	ldrb.w	r9, [sl]
 801504e:	27c8      	movs	r7, #200	; 0xc8
			if(((element[i] >> k) & 1) == 1) {
 8015050:	f013 0320 	ands.w	r3, r3, #32
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015054:	fb01 b909 	mla	r9, r1, r9, fp
 8015058:	e9d9 9417 	ldrd	r9, r4, [r9, #92]	; 0x5c
 801505c:	fb07 2404 	mla	r4, r7, r4, r2
 8015060:	f104 04fc 	add.w	r4, r4, #252	; 0xfc
 8015064:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015068:	d15c      	bne.n	8015124 <DrawLowSpectrum+0xfe0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801506a:	f89a 6000 	ldrb.w	r6, [sl]
 801506e:	27c7      	movs	r7, #199	; 0xc7
 8015070:	fb01 b606 	mla	r6, r1, r6, fp
 8015074:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8015078:	fb07 2404 	mla	r4, r7, r4, r2
	while(i < width) {
 801507c:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801507e:	34fc      	adds	r4, #252	; 0xfc
	while(i < width) {
 8015080:	2a05      	cmp	r2, #5
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015082:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 8015086:	d05c      	beq.n	8015142 <DrawLowSpectrum+0xffe>
			if(((element[i] >> k) & 1) == 1) {
 8015088:	f835 3b02 	ldrh.w	r3, [r5], #2
 801508c:	f013 0601 	ands.w	r6, r3, #1
 8015090:	d0a2      	beq.n	8014fd8 <DrawLowSpectrum+0xe94>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015092:	f89a 6000 	ldrb.w	r6, [sl]
 8015096:	fb01 b606 	mla	r6, r1, r6, fp
 801509a:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 801509e:	fb08 2404 	mla	r4, r8, r4, r2
 80150a2:	34fc      	adds	r4, #252	; 0xfc
 80150a4:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80150a8:	f013 0602 	ands.w	r6, r3, #2
 80150ac:	d0a2      	beq.n	8014ff4 <DrawLowSpectrum+0xeb0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80150ae:	f89a 6000 	ldrb.w	r6, [sl]
 80150b2:	fb01 b606 	mla	r6, r1, r6, fp
 80150b6:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80150ba:	fb0e 2404 	mla	r4, lr, r4, r2
 80150be:	34fc      	adds	r4, #252	; 0xfc
 80150c0:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80150c4:	f013 0604 	ands.w	r6, r3, #4
 80150c8:	d0a2      	beq.n	8015010 <DrawLowSpectrum+0xecc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80150ca:	f89a 6000 	ldrb.w	r6, [sl]
 80150ce:	fb01 b606 	mla	r6, r1, r6, fp
 80150d2:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80150d6:	fb0c 2404 	mla	r4, ip, r4, r2
 80150da:	34fc      	adds	r4, #252	; 0xfc
 80150dc:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80150e0:	f013 0608 	ands.w	r6, r3, #8
 80150e4:	d0a2      	beq.n	801502c <DrawLowSpectrum+0xee8>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80150e6:	f89a 6000 	ldrb.w	r6, [sl]
 80150ea:	27c9      	movs	r7, #201	; 0xc9
 80150ec:	fb01 b606 	mla	r6, r1, r6, fp
 80150f0:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80150f4:	fb07 2404 	mla	r4, r7, r4, r2
 80150f8:	34fc      	adds	r4, #252	; 0xfc
 80150fa:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80150fe:	f013 0610 	ands.w	r6, r3, #16
 8015102:	d0a2      	beq.n	801504a <DrawLowSpectrum+0xf06>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015104:	f89a 6000 	ldrb.w	r6, [sl]
 8015108:	27c8      	movs	r7, #200	; 0xc8
			if(((element[i] >> k) & 1) == 1) {
 801510a:	f013 0320 	ands.w	r3, r3, #32
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801510e:	fb01 b606 	mla	r6, r1, r6, fp
 8015112:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8015116:	fb07 2404 	mla	r4, r7, r4, r2
 801511a:	f104 04fc 	add.w	r4, r4, #252	; 0xfc
 801511e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015122:	d0a2      	beq.n	801506a <DrawLowSpectrum+0xf26>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015124:	f89a 4000 	ldrb.w	r4, [sl]
 8015128:	26c7      	movs	r6, #199	; 0xc7
 801512a:	fb01 b404 	mla	r4, r1, r4, fp
 801512e:	e9d4 4317 	ldrd	r4, r3, [r4, #92]	; 0x5c
 8015132:	fb06 2303 	mla	r3, r6, r3, r2
	while(i < width) {
 8015136:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015138:	33fc      	adds	r3, #252	; 0xfc
	while(i < width) {
 801513a:	2a05      	cmp	r2, #5
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801513c:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
	while(i < width) {
 8015140:	d1a2      	bne.n	8015088 <DrawLowSpectrum+0xf44>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015142:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8015146:	f89a 2000 	ldrb.w	r2, [sl]
 801514a:	f04f 08cc 	mov.w	r8, #204	; 0xcc
 801514e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8015152:	fb0c b202 	mla	r2, ip, r2, fp
 8015156:	f04f 0ecb 	mov.w	lr, #203	; 0xcb
 801515a:	20ca      	movs	r0, #202	; 0xca
 801515c:	26c9      	movs	r6, #201	; 0xc9
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 801515e:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015162:	e9d2 2317 	ldrd	r2, r3, [r2, #92]	; 0x5c
 8015166:	fb08 f303 	mul.w	r3, r8, r3
 801516a:	33fc      	adds	r3, #252	; 0xfc
 801516c:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
 8015170:	f89a 2000 	ldrb.w	r2, [sl]
 8015174:	fb0c b202 	mla	r2, ip, r2, fp
 8015178:	e9d2 2317 	ldrd	r2, r3, [r2, #92]	; 0x5c
 801517c:	fb0e f303 	mul.w	r3, lr, r3
 8015180:	33fc      	adds	r3, #252	; 0xfc
 8015182:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 8015186:	230d      	movs	r3, #13
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015188:	f89a 1000 	ldrb.w	r1, [sl]
 801518c:	fb0c b101 	mla	r1, ip, r1, fp
 8015190:	e9d1 1217 	ldrd	r1, r2, [r1, #92]	; 0x5c
 8015194:	fb00 f202 	mul.w	r2, r0, r2
 8015198:	32fc      	adds	r2, #252	; 0xfc
 801519a:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 801519e:	22b7      	movs	r2, #183	; 0xb7
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80151a0:	f89a 5000 	ldrb.w	r5, [sl]
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 80151a4:	2128      	movs	r1, #40	; 0x28
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80151a6:	fb0c b505 	mla	r5, ip, r5, fp
 80151aa:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80151ae:	fb06 f000 	mul.w	r0, r6, r0
 80151b2:	26ca      	movs	r6, #202	; 0xca
 80151b4:	30fc      	adds	r0, #252	; 0xfc
 80151b6:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
 80151ba:	f89a 5000 	ldrb.w	r5, [sl]
 80151be:	fb0c b505 	mla	r5, ip, r5, fp
 80151c2:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80151c6:	fb08 f000 	mul.w	r0, r8, r0
 80151ca:	30fd      	adds	r0, #253	; 0xfd
 80151cc:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
 80151d0:	f89a 5000 	ldrb.w	r5, [sl]
 80151d4:	fb0c b505 	mla	r5, ip, r5, fp
 80151d8:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80151dc:	fb0e f000 	mul.w	r0, lr, r0
 80151e0:	30fd      	adds	r0, #253	; 0xfd
 80151e2:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
 80151e6:	f89a 5000 	ldrb.w	r5, [sl]
 80151ea:	fb0c b505 	mla	r5, ip, r5, fp
 80151ee:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80151f2:	fb06 f000 	mul.w	r0, r6, r0
 80151f6:	26c9      	movs	r6, #201	; 0xc9
 80151f8:	30fd      	adds	r0, #253	; 0xfd
 80151fa:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
 80151fe:	f89a 5000 	ldrb.w	r5, [sl]
 8015202:	fb0c b505 	mla	r5, ip, r5, fp
 8015206:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801520a:	fb06 f000 	mul.w	r0, r6, r0
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 801520e:	4ebc      	ldr	r6, [pc, #752]	; (8015500 <DrawLowSpectrum+0x13bc>)
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015210:	30fd      	adds	r0, #253	; 0xfd
 8015212:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
 8015216:	f89a 9000 	ldrb.w	r9, [sl]
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 801521a:	4dba      	ldr	r5, [pc, #744]	; (8015504 <DrawLowSpectrum+0x13c0>)
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801521c:	fb0c b909 	mla	r9, ip, r9, fp
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 8015220:	6828      	ldr	r0, [r5, #0]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015222:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8015226:	f8d9 905c 	ldr.w	r9, [r9, #92]	; 0x5c
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 801522a:	3001      	adds	r0, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801522c:	fb08 f505 	mul.w	r5, r8, r5
 8015230:	35fe      	adds	r5, #254	; 0xfe
 8015232:	f829 4015 	strh.w	r4, [r9, r5, lsl #1]
 8015236:	f89a 8000 	ldrb.w	r8, [sl]
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 801523a:	fb86 9500 	smull	r9, r5, r6, r0
 801523e:	17c0      	asrs	r0, r0, #31
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015240:	26ca      	movs	r6, #202	; 0xca
 8015242:	fb0c b808 	mla	r8, ip, r8, fp
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 8015246:	ebc0 00a5 	rsb	r0, r0, r5, asr #2
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801524a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 801524e:	f8d8 805c 	ldr.w	r8, [r8, #92]	; 0x5c
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 8015252:	b2c0      	uxtb	r0, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015254:	fb0e f505 	mul.w	r5, lr, r5
 8015258:	35fe      	adds	r5, #254	; 0xfe
 801525a:	f828 4015 	strh.w	r4, [r8, r5, lsl #1]
 801525e:	f89a e000 	ldrb.w	lr, [sl]
 8015262:	fb0c be0e 	mla	lr, ip, lr, fp
 8015266:	f8de 5060 	ldr.w	r5, [lr, #96]	; 0x60
 801526a:	f8de e05c 	ldr.w	lr, [lr, #92]	; 0x5c
 801526e:	fb06 f505 	mul.w	r5, r6, r5
 8015272:	26c9      	movs	r6, #201	; 0xc9
 8015274:	35fe      	adds	r5, #254	; 0xfe
 8015276:	f82e 4015 	strh.w	r4, [lr, r5, lsl #1]
 801527a:	f89a 5000 	ldrb.w	r5, [sl]
 801527e:	fb0c bc05 	mla	ip, ip, r5, fp
 8015282:	f8dc 5060 	ldr.w	r5, [ip, #96]	; 0x60
 8015286:	f8dc c05c 	ldr.w	ip, [ip, #92]	; 0x5c
 801528a:	fb06 f505 	mul.w	r5, r6, r5
	DrawDigit((Track_number + 1) % 10, 60, 183, 13, 0x00FFFFFF);
 801528e:	4e9c      	ldr	r6, [pc, #624]	; (8015500 <DrawLowSpectrum+0x13bc>)
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015290:	35fe      	adds	r5, #254	; 0xfe
 8015292:	f82c 4015 	strh.w	r4, [ip, r5, lsl #1]
	DrawDigit((Track_number + 1) % 10, 60, 183, 13, 0x00FFFFFF);
 8015296:	4d9b      	ldr	r5, [pc, #620]	; (8015504 <DrawLowSpectrum+0x13c0>)
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 8015298:	9700      	str	r7, [sp, #0]
 801529a:	f7fe fb7b 	bl	8013994 <DrawDigit>
	DrawDigit((Track_number + 1) % 10, 60, 183, 13, 0x00FFFFFF);
 801529e:	6828      	ldr	r0, [r5, #0]
 80152a0:	230d      	movs	r3, #13
 80152a2:	22b7      	movs	r2, #183	; 0xb7
 80152a4:	3001      	adds	r0, #1
 80152a6:	213c      	movs	r1, #60	; 0x3c
 80152a8:	9700      	str	r7, [sp, #0]
 80152aa:	fb86 4500 	smull	r4, r5, r6, r0
 80152ae:	17c4      	asrs	r4, r0, #31
 80152b0:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
 80152b4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80152b8:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 80152bc:	b2c0      	uxtb	r0, r0
 80152be:	f7fe fb69 	bl	8013994 <DrawDigit>
	if(display.timemode == 0) {
 80152c2:	4b91      	ldr	r3, [pc, #580]	; (8015508 <DrawLowSpectrum+0x13c4>)
 80152c4:	781b      	ldrb	r3, [r3, #0]
		DrawDigit(rmin / 10, 134, 184, 11, 0x00FFFFFF);
 80152c6:	9700      	str	r7, [sp, #0]
	if(display.timemode == 0) {
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	f040 8133 	bne.w	8015534 <DrawLowSpectrum+0x13f0>
		DrawDigit(rmin / 10, 134, 184, 11, 0x00FFFFFF);
 80152ce:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8015530 <DrawLowSpectrum+0x13ec>
 80152d2:	22b8      	movs	r2, #184	; 0xb8
 80152d4:	230b      	movs	r3, #11
 80152d6:	2186      	movs	r1, #134	; 0x86
 80152d8:	f998 0000 	ldrsb.w	r0, [r8]
		DrawDigit(rsec / 10, 185, 184, 11, 0x00FFFFFF);
 80152dc:	4d8b      	ldr	r5, [pc, #556]	; (801550c <DrawLowSpectrum+0x13c8>)
		DrawDigit(rmin / 10, 134, 184, 11, 0x00FFFFFF);
 80152de:	fb86 6c00 	smull	r6, ip, r6, r0
 80152e2:	17c0      	asrs	r0, r0, #31
		DrawDigit(rmin % 10, 148, 184, 11, 0x00FFFFFF);
 80152e4:	4e86      	ldr	r6, [pc, #536]	; (8015500 <DrawLowSpectrum+0x13bc>)
		DrawDigit(rmin / 10, 134, 184, 11, 0x00FFFFFF);
 80152e6:	ebc0 00ac 	rsb	r0, r0, ip, asr #2
		DrawDigit(rfr / 20, 224, 184, 11, 0x00FFFFFF);
 80152ea:	4c89      	ldr	r4, [pc, #548]	; (8015510 <DrawLowSpectrum+0x13cc>)
		DrawDigit(rmin / 10, 134, 184, 11, 0x00FFFFFF);
 80152ec:	b2c0      	uxtb	r0, r0
 80152ee:	f7fe fb51 	bl	8013994 <DrawDigit>
		DrawDigit(rmin % 10, 148, 184, 11, 0x00FFFFFF);
 80152f2:	f998 1000 	ldrsb.w	r1, [r8]
 80152f6:	230b      	movs	r3, #11
 80152f8:	9700      	str	r7, [sp, #0]
 80152fa:	fb86 2001 	smull	r2, r0, r6, r1
 80152fe:	17ca      	asrs	r2, r1, #31
 8015300:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 8015304:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015308:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 801530c:	2194      	movs	r1, #148	; 0x94
 801530e:	b2d0      	uxtb	r0, r2
 8015310:	22b8      	movs	r2, #184	; 0xb8
 8015312:	f7fe fb3f 	bl	8013994 <DrawDigit>
		DrawDigit(rsec / 10, 185, 184, 11, 0x00FFFFFF);
 8015316:	9700      	str	r7, [sp, #0]
 8015318:	f995 0000 	ldrsb.w	r0, [r5]
 801531c:	22b8      	movs	r2, #184	; 0xb8
 801531e:	230b      	movs	r3, #11
 8015320:	21b9      	movs	r1, #185	; 0xb9
 8015322:	fb86 6c00 	smull	r6, ip, r6, r0
 8015326:	17c0      	asrs	r0, r0, #31
 8015328:	ebc0 00ac 	rsb	r0, r0, ip, asr #2
 801532c:	b2c0      	uxtb	r0, r0
 801532e:	f7fe fb31 	bl	8013994 <DrawDigit>
		DrawDigit(rsec % 10, 199, 184, 11, 0x00FFFFFF);
 8015332:	f995 1000 	ldrsb.w	r1, [r5]
 8015336:	4d72      	ldr	r5, [pc, #456]	; (8015500 <DrawLowSpectrum+0x13bc>)
 8015338:	230b      	movs	r3, #11
 801533a:	9700      	str	r7, [sp, #0]
 801533c:	fb85 2001 	smull	r2, r0, r5, r1
 8015340:	17ca      	asrs	r2, r1, #31
 8015342:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 8015346:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801534a:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 801534e:	21c7      	movs	r1, #199	; 0xc7
 8015350:	b2d0      	uxtb	r0, r2
 8015352:	22b8      	movs	r2, #184	; 0xb8
 8015354:	f7fe fb1e 	bl	8013994 <DrawDigit>
		DrawDigit(rfr / 20, 224, 184, 11, 0x00FFFFFF);
 8015358:	9700      	str	r7, [sp, #0]
 801535a:	f9b4 3000 	ldrsh.w	r3, [r4]
 801535e:	fb85 2003 	smull	r2, r0, r5, r3
 8015362:	17db      	asrs	r3, r3, #31
 8015364:	ebc3 00e0 	rsb	r0, r3, r0, asr #3
 8015368:	b2c0      	uxtb	r0, r0
		DrawDigit(fr / 20, 224, 184, 11, 0x00FFFFFF);
 801536a:	22b8      	movs	r2, #184	; 0xb8
 801536c:	230b      	movs	r3, #11
 801536e:	21e0      	movs	r1, #224	; 0xe0
 8015370:	f7fe fb10 	bl	8013994 <DrawDigit>
		DrawDigit((fr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 8015374:	f9b4 3000 	ldrsh.w	r3, [r4]
 8015378:	4961      	ldr	r1, [pc, #388]	; (8015500 <DrawLowSpectrum+0x13bc>)
 801537a:	2b00      	cmp	r3, #0
 801537c:	bfb8      	it	lt
 801537e:	3301      	addlt	r3, #1
 8015380:	105b      	asrs	r3, r3, #1
 8015382:	fb81 2103 	smull	r2, r1, r1, r3
 8015386:	17da      	asrs	r2, r3, #31
 8015388:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 801538c:	21ee      	movs	r1, #238	; 0xee
 801538e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015392:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015396:	22b8      	movs	r2, #184	; 0xb8
 8015398:	b2d8      	uxtb	r0, r3
 801539a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801539e:	9300      	str	r3, [sp, #0]
 80153a0:	230b      	movs	r3, #11
 80153a2:	f7fe faf7 	bl	8013994 <DrawDigit>
	uint16_t bpm = rekordbox.bpm[beat] * (1 + trak.percent);
 80153a6:	4b5b      	ldr	r3, [pc, #364]	; (8015514 <DrawLowSpectrum+0x13d0>)
 80153a8:	4a5b      	ldr	r2, [pc, #364]	; (8015518 <DrawLowSpectrum+0x13d4>)
 80153aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80153ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80153b2:	4b5a      	ldr	r3, [pc, #360]	; (801551c <DrawLowSpectrum+0x13d8>)
 80153b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80153be:	f8b3 3504 	ldrh.w	r3, [r3, #1284]	; 0x504
 80153c2:	ee07 3a90 	vmov	s15, r3
	if(bpm / 10000 > 0) {
 80153c6:	f242 730f 	movw	r3, #9999	; 0x270f
	uint16_t bpm = rekordbox.bpm[beat] * (1 + trak.percent);
 80153ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80153ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80153d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80153d6:	ee17 2a90 	vmov	r2, s15
 80153da:	b294      	uxth	r4, r2
	if(bpm / 10000 > 0) {
 80153dc:	429c      	cmp	r4, r3
 80153de:	f200 87f3 	bhi.w	80163c8 <DrawLowSpectrum+0x2284>
	if(bpm / 1000 > 0) {
 80153e2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80153e6:	f080 87fc 	bcs.w	80163e2 <DrawLowSpectrum+0x229e>
		DrawDigit(((bpm / 100) % 100) / 10, 415, 176, 10, 0x00FFFFFF);
 80153ea:	4e4d      	ldr	r6, [pc, #308]	; (8015520 <DrawLowSpectrum+0x13dc>)
 80153ec:	fba6 3604 	umull	r3, r6, r6, r4
 80153f0:	0976      	lsrs	r6, r6, #5
	DrawDigit(((bpm / 100) % 100) % 10, 430, 176, 10, 0x00FFFFFF);
 80153f2:	4d4c      	ldr	r5, [pc, #304]	; (8015524 <DrawLowSpectrum+0x13e0>)
 80153f4:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 80153f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80153fc:	fba5 2306 	umull	r2, r3, r5, r6
 8015400:	22b0      	movs	r2, #176	; 0xb0
 8015402:	9700      	str	r7, [sp, #0]
 8015404:	08db      	lsrs	r3, r3, #3
 8015406:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801540a:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801540e:	26c2      	movs	r6, #194	; 0xc2
	DrawDigit(((bpm / 100) % 100) % 10, 430, 176, 10, 0x00FFFFFF);
 8015410:	b2d8      	uxtb	r0, r3
 8015412:	230a      	movs	r3, #10
 8015414:	f7fe fabe 	bl	8013994 <DrawDigit>
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 8015418:	fba5 2304 	umull	r2, r3, r5, r4
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801541c:	f64f 7cff 	movw	ip, #65535	; 0xffff
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 8015420:	08db      	lsrs	r3, r3, #3
 8015422:	fba5 1203 	umull	r1, r2, r5, r3
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015426:	f89a 1000 	ldrb.w	r1, [sl]
 801542a:	2534      	movs	r5, #52	; 0x34
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 801542c:	08d2      	lsrs	r2, r2, #3
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801542e:	fb05 b101 	mla	r1, r5, r1, fp
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 8015432:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015436:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801543a:	e9d1 1217 	ldrd	r1, r2, [r1, #92]	; 0x5c
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 801543e:	b2d8      	uxtb	r0, r3
 8015440:	2307      	movs	r3, #7
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015442:	fb06 f202 	mul.w	r2, r6, r2
 8015446:	f502 72dd 	add.w	r2, r2, #442	; 0x1ba
 801544a:	f821 c012 	strh.w	ip, [r1, r2, lsl #1]
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 801544e:	22b6      	movs	r2, #182	; 0xb6
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015450:	f89a e000 	ldrb.w	lr, [sl]
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 8015454:	f240 11bd 	movw	r1, #445	; 0x1bd
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015458:	fb05 be0e 	mla	lr, r5, lr, fp
 801545c:	e9de e417 	ldrd	lr, r4, [lr, #92]	; 0x5c
 8015460:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8015464:	eb04 1488 	add.w	r4, r4, r8, lsl #6
 8015468:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
 801546c:	f82e c014 	strh.w	ip, [lr, r4, lsl #1]
 8015470:	f89a e000 	ldrb.w	lr, [sl]
 8015474:	fb05 be0e 	mla	lr, r5, lr, fp
 8015478:	f8de 4060 	ldr.w	r4, [lr, #96]	; 0x60
 801547c:	fb06 f404 	mul.w	r4, r6, r4
 8015480:	f8de 605c 	ldr.w	r6, [lr, #92]	; 0x5c
 8015484:	f204 14bb 	addw	r4, r4, #443	; 0x1bb
 8015488:	f826 c014 	strh.w	ip, [r6, r4, lsl #1]
 801548c:	f89a 6000 	ldrb.w	r6, [sl]
 8015490:	fb05 b606 	mla	r6, r5, r6, fp
 8015494:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8015498:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 801549c:	eb04 148e 	add.w	r4, r4, lr, lsl #6
 80154a0:	f204 14bb 	addw	r4, r4, #443	; 0x1bb
 80154a4:	f826 c014 	strh.w	ip, [r6, r4, lsl #1]
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 80154a8:	9700      	str	r7, [sp, #0]
 80154aa:	f7fe fa73 	bl	8013994 <DrawDigit>
	if(rekordbox.state == 1) {
 80154ae:	4b1e      	ldr	r3, [pc, #120]	; (8015528 <DrawLowSpectrum+0x13e4>)
 80154b0:	f893 23d4 	ldrb.w	r2, [r3, #980]	; 0x3d4
 80154b4:	2a01      	cmp	r2, #1
 80154b6:	f000 83a7 	beq.w	8015c08 <DrawLowSpectrum+0x1ac4>
	if(rekordbox.cues > 1) {
 80154ba:	4b1c      	ldr	r3, [pc, #112]	; (801552c <DrawLowSpectrum+0x13e8>)
 80154bc:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	9305      	str	r3, [sp, #20]
 80154c4:	f300 80d3 	bgt.w	801566e <DrawLowSpectrum+0x152a>
	if(display.loop == 1) {
 80154c8:	4b0f      	ldr	r3, [pc, #60]	; (8015508 <DrawLowSpectrum+0x13c4>)
 80154ca:	7c1b      	ldrb	r3, [r3, #16]
 80154cc:	2b01      	cmp	r3, #1
 80154ce:	f001 8357 	beq.w	8016b80 <DrawLowSpectrum+0x2a3c>
	VLine(40 + file_pos, 220, 40, 0x00FFFFFF);
 80154d2:	9c07      	ldr	r4, [sp, #28]
 80154d4:	2228      	movs	r2, #40	; 0x28
 80154d6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80154da:	21dc      	movs	r1, #220	; 0xdc
 80154dc:	6820      	ldr	r0, [r4, #0]
 80154de:	4410      	add	r0, r2
 80154e0:	b280      	uxth	r0, r0
 80154e2:	f7fe f9cb 	bl	801387c <VLine>
	VLine(41 + file_pos, 220, 40, 0x00FFFFFF);
 80154e6:	6820      	ldr	r0, [r4, #0]
 80154e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80154ec:	2228      	movs	r2, #40	; 0x28
 80154ee:	3029      	adds	r0, #41	; 0x29
 80154f0:	21dc      	movs	r1, #220	; 0xdc
 80154f2:	b280      	uxth	r0, r0
}
 80154f4:	b009      	add	sp, #36	; 0x24
 80154f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VLine(41 + file_pos, 220, 40, 0x00FFFFFF);
 80154fa:	f7fe b9bf 	b.w	801387c <VLine>
 80154fe:	bf00      	nop
 8015500:	66666667 	.word	0x66666667
 8015504:	2000e714 	.word	0x2000e714
 8015508:	20000988 	.word	0x20000988
 801550c:	2000f789 	.word	0x2000f789
 8015510:	2000f786 	.word	0x2000f786
 8015514:	2000f794 	.word	0x2000f794
 8015518:	20015208 	.word	0x20015208
 801551c:	2000097c 	.word	0x2000097c
 8015520:	51eb851f 	.word	0x51eb851f
 8015524:	cccccccd 	.word	0xcccccccd
 8015528:	20018208 	.word	0x20018208
 801552c:	20017208 	.word	0x20017208
 8015530:	2000f788 	.word	0x2000f788
		DrawDigit(min / 10, 134, 184, 11, 0x00FFFFFF);
 8015534:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80156a0 <DrawLowSpectrum+0x155c>
 8015538:	22b8      	movs	r2, #184	; 0xb8
 801553a:	4e54      	ldr	r6, [pc, #336]	; (801568c <DrawLowSpectrum+0x1548>)
 801553c:	230b      	movs	r3, #11
 801553e:	f998 0000 	ldrsb.w	r0, [r8]
 8015542:	2186      	movs	r1, #134	; 0x86
		DrawDigit(sec / 10, 185, 184, 11, 0x00FFFFFF);
 8015544:	4d52      	ldr	r5, [pc, #328]	; (8015690 <DrawLowSpectrum+0x154c>)
		DrawDigit(min / 10, 134, 184, 11, 0x00FFFFFF);
 8015546:	fb86 6c00 	smull	r6, ip, r6, r0
 801554a:	17c0      	asrs	r0, r0, #31
		DrawDigit(min % 10, 148, 184, 11, 0x00FFFFFF);
 801554c:	4e4f      	ldr	r6, [pc, #316]	; (801568c <DrawLowSpectrum+0x1548>)
		DrawDigit(min / 10, 134, 184, 11, 0x00FFFFFF);
 801554e:	ebc0 00ac 	rsb	r0, r0, ip, asr #2
		DrawDigit(fr / 20, 224, 184, 11, 0x00FFFFFF);
 8015552:	4c50      	ldr	r4, [pc, #320]	; (8015694 <DrawLowSpectrum+0x1550>)
		DrawDigit(min / 10, 134, 184, 11, 0x00FFFFFF);
 8015554:	b2c0      	uxtb	r0, r0
 8015556:	f7fe fa1d 	bl	8013994 <DrawDigit>
		DrawDigit(min % 10, 148, 184, 11, 0x00FFFFFF);
 801555a:	f998 1000 	ldrsb.w	r1, [r8]
 801555e:	230b      	movs	r3, #11
 8015560:	9700      	str	r7, [sp, #0]
 8015562:	fb86 2001 	smull	r2, r0, r6, r1
 8015566:	17ca      	asrs	r2, r1, #31
 8015568:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801556c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015570:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8015574:	2194      	movs	r1, #148	; 0x94
 8015576:	b2d0      	uxtb	r0, r2
 8015578:	22b8      	movs	r2, #184	; 0xb8
 801557a:	f7fe fa0b 	bl	8013994 <DrawDigit>
		DrawDigit(sec / 10, 185, 184, 11, 0x00FFFFFF);
 801557e:	9700      	str	r7, [sp, #0]
 8015580:	f995 0000 	ldrsb.w	r0, [r5]
 8015584:	22b8      	movs	r2, #184	; 0xb8
 8015586:	230b      	movs	r3, #11
 8015588:	21b9      	movs	r1, #185	; 0xb9
 801558a:	fb86 6c00 	smull	r6, ip, r6, r0
 801558e:	17c0      	asrs	r0, r0, #31
 8015590:	ebc0 00ac 	rsb	r0, r0, ip, asr #2
 8015594:	b2c0      	uxtb	r0, r0
 8015596:	f7fe f9fd 	bl	8013994 <DrawDigit>
		DrawDigit(sec % 10, 199, 184, 11, 0x00FFFFFF);
 801559a:	f995 1000 	ldrsb.w	r1, [r5]
 801559e:	4d3b      	ldr	r5, [pc, #236]	; (801568c <DrawLowSpectrum+0x1548>)
 80155a0:	230b      	movs	r3, #11
 80155a2:	9700      	str	r7, [sp, #0]
 80155a4:	fb85 2001 	smull	r2, r0, r5, r1
 80155a8:	17ca      	asrs	r2, r1, #31
 80155aa:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 80155ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80155b2:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 80155b6:	21c7      	movs	r1, #199	; 0xc7
 80155b8:	b2d0      	uxtb	r0, r2
 80155ba:	22b8      	movs	r2, #184	; 0xb8
 80155bc:	f7fe f9ea 	bl	8013994 <DrawDigit>
		DrawDigit(fr / 20, 224, 184, 11, 0x00FFFFFF);
 80155c0:	9700      	str	r7, [sp, #0]
 80155c2:	f9b4 3000 	ldrsh.w	r3, [r4]
 80155c6:	fb85 2603 	smull	r2, r6, r5, r3
 80155ca:	17db      	asrs	r3, r3, #31
 80155cc:	ebc3 06e6 	rsb	r6, r3, r6, asr #3
 80155d0:	b2f0      	uxtb	r0, r6
 80155d2:	e6ca      	b.n	801536a <DrawLowSpectrum+0x1226>
 80155d4:	4830      	ldr	r0, [pc, #192]	; (8015698 <DrawLowSpectrum+0x1554>)
	if(trak.percent < 0) DrawElement(10, 2, 308, 195, 0x00FFFFFF, minus);
 80155d6:	2100      	movs	r1, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80155d8:	2434      	movs	r4, #52	; 0x34
 80155da:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80155de:	26c2      	movs	r6, #194	; 0xc2
 80155e0:	e021      	b.n	8015626 <DrawLowSpectrum+0x14e2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80155e2:	f89a c000 	ldrb.w	ip, [sl]
			if(((element[i] >> k) & 1) == 1) {
 80155e6:	f013 0302 	ands.w	r3, r3, #2
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80155ea:	fb04 bc0c 	mla	ip, r4, ip, fp
 80155ee:	e9dc c217 	ldrd	ip, r2, [ip, #92]	; 0x5c
 80155f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80155f6:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 80155fa:	f502 729a 	add.w	r2, r2, #308	; 0x134
 80155fe:	440a      	add	r2, r1
 8015600:	f82c 5012 	strh.w	r5, [ip, r2, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015604:	d126      	bne.n	8015654 <DrawLowSpectrum+0x1510>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015606:	f89a 5000 	ldrb.w	r5, [sl]
 801560a:	fb04 b505 	mla	r5, r4, r5, fp
 801560e:	e9d5 5217 	ldrd	r5, r2, [r5, #92]	; 0x5c
 8015612:	fb06 1202 	mla	r2, r6, r2, r1
 8015616:	f502 729a 	add.w	r2, r2, #308	; 0x134
 801561a:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
	while(i < width) {
 801561e:	3101      	adds	r1, #1
 8015620:	290a      	cmp	r1, #10
 8015622:	f43f aa0c 	beq.w	8014a3e <DrawLowSpectrum+0x8fa>
			if(((element[i] >> k) & 1) == 1) {
 8015626:	f830 3b02 	ldrh.w	r3, [r0], #2
 801562a:	f013 0501 	ands.w	r5, r3, #1
 801562e:	d0d8      	beq.n	80155e2 <DrawLowSpectrum+0x149e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015630:	f89a 5000 	ldrb.w	r5, [sl]
			if(((element[i] >> k) & 1) == 1) {
 8015634:	f013 0302 	ands.w	r3, r3, #2
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015638:	fb04 b505 	mla	r5, r4, r5, fp
 801563c:	e9d5 5217 	ldrd	r5, r2, [r5, #92]	; 0x5c
 8015640:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015644:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8015648:	f502 729a 	add.w	r2, r2, #308	; 0x134
 801564c:	440a      	add	r2, r1
 801564e:	f825 7012 	strh.w	r7, [r5, r2, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015652:	d0d8      	beq.n	8015606 <DrawLowSpectrum+0x14c2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015654:	f89a 2000 	ldrb.w	r2, [sl]
 8015658:	fb04 b202 	mla	r2, r4, r2, fp
 801565c:	e9d2 2317 	ldrd	r2, r3, [r2, #92]	; 0x5c
 8015660:	fb06 1303 	mla	r3, r6, r3, r1
 8015664:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8015668:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801566c:	e7d7      	b.n	801561e <DrawLowSpectrum+0x14da>
 801566e:	4d0b      	ldr	r5, [pc, #44]	; (801569c <DrawLowSpectrum+0x1558>)
	if(rekordbox.cues > 1) {
 8015670:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015672:	2134      	movs	r1, #52	; 0x34
 8015674:	f04f 08e6 	mov.w	r8, #230	; 0xe6
 8015678:	f105 0e48 	add.w	lr, r5, #72	; 0x48
 801567c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8015680:	f04f 09e5 	mov.w	r9, #229	; 0xe5
 8015684:	f04f 0cdd 	mov.w	ip, #221	; 0xdd
 8015688:	9503      	str	r5, [sp, #12]
 801568a:	e0bf      	b.n	801580c <DrawLowSpectrum+0x16c8>
 801568c:	66666667 	.word	0x66666667
 8015690:	2000f78a 	.word	0x2000f78a
 8015694:	2000edf0 	.word	0x2000edf0
 8015698:	08024454 	.word	0x08024454
 801569c:	0802440a 	.word	0x0802440a
 80156a0:	2000ef88 	.word	0x2000ef88
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80156a4:	f89a 6000 	ldrb.w	r6, [sl]
 80156a8:	fb01 b606 	mla	r6, r1, r6, fp
 80156ac:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80156b0:	fb08 2000 	mla	r0, r8, r0, r2
 80156b4:	3001      	adds	r0, #1
 80156b6:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80156ba:	f013 0502 	ands.w	r5, r3, #2
 80156be:	f040 80bc 	bne.w	801583a <DrawLowSpectrum+0x16f6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80156c2:	f89a 6000 	ldrb.w	r6, [sl]
 80156c6:	fb01 b606 	mla	r6, r1, r6, fp
 80156ca:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80156ce:	fb09 2000 	mla	r0, r9, r0, r2
 80156d2:	3001      	adds	r0, #1
 80156d4:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80156d8:	f013 0504 	ands.w	r5, r3, #4
 80156dc:	f040 80bc 	bne.w	8015858 <DrawLowSpectrum+0x1714>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80156e0:	f89a 6000 	ldrb.w	r6, [sl]
 80156e4:	27e4      	movs	r7, #228	; 0xe4
 80156e6:	fb01 b606 	mla	r6, r1, r6, fp
 80156ea:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80156ee:	fb07 2000 	mla	r0, r7, r0, r2
 80156f2:	3001      	adds	r0, #1
 80156f4:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80156f8:	f013 0508 	ands.w	r5, r3, #8
 80156fc:	f040 80bc 	bne.w	8015878 <DrawLowSpectrum+0x1734>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015700:	f89a 6000 	ldrb.w	r6, [sl]
 8015704:	27e3      	movs	r7, #227	; 0xe3
 8015706:	fb01 b606 	mla	r6, r1, r6, fp
 801570a:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 801570e:	fb07 2000 	mla	r0, r7, r0, r2
 8015712:	3001      	adds	r0, #1
 8015714:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015718:	f013 0510 	ands.w	r5, r3, #16
 801571c:	f040 80bc 	bne.w	8015898 <DrawLowSpectrum+0x1754>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015720:	f89a 6000 	ldrb.w	r6, [sl]
 8015724:	27e2      	movs	r7, #226	; 0xe2
 8015726:	fb01 b606 	mla	r6, r1, r6, fp
 801572a:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 801572e:	fb07 2000 	mla	r0, r7, r0, r2
 8015732:	3001      	adds	r0, #1
 8015734:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015738:	f013 0520 	ands.w	r5, r3, #32
 801573c:	f040 80bc 	bne.w	80158b8 <DrawLowSpectrum+0x1774>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015740:	f89a 6000 	ldrb.w	r6, [sl]
 8015744:	fb01 b606 	mla	r6, r1, r6, fp
 8015748:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 801574c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015750:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015754:	3001      	adds	r0, #1
 8015756:	4410      	add	r0, r2
 8015758:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801575c:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 8015760:	f040 80bc 	bne.w	80158dc <DrawLowSpectrum+0x1798>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015764:	f89a 6000 	ldrb.w	r6, [sl]
 8015768:	fb01 b606 	mla	r6, r1, r6, fp
 801576c:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015770:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8015774:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 8015778:	3001      	adds	r0, #1
 801577a:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801577e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 8015782:	f040 80bc 	bne.w	80158fe <DrawLowSpectrum+0x17ba>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015786:	f89a 6000 	ldrb.w	r6, [sl]
 801578a:	fb01 b606 	mla	r6, r1, r6, fp
 801578e:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015792:	ebc0 07c0 	rsb	r7, r0, r0, lsl #3
 8015796:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
 801579a:	3001      	adds	r0, #1
 801579c:	4410      	add	r0, r2
 801579e:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80157a2:	f413 7580 	ands.w	r5, r3, #256	; 0x100
 80157a6:	f040 80bc 	bne.w	8015922 <DrawLowSpectrum+0x17de>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80157aa:	f89a 6000 	ldrb.w	r6, [sl]
 80157ae:	27de      	movs	r7, #222	; 0xde
 80157b0:	fb01 b606 	mla	r6, r1, r6, fp
 80157b4:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80157b8:	fb07 2000 	mla	r0, r7, r0, r2
 80157bc:	3001      	adds	r0, #1
 80157be:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80157c2:	f413 7500 	ands.w	r5, r3, #512	; 0x200
 80157c6:	f040 80bc 	bne.w	8015942 <DrawLowSpectrum+0x17fe>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80157ca:	f89a 6000 	ldrb.w	r6, [sl]
			if(((element[i] >> k) & 1) == 1) {
 80157ce:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80157d2:	fb01 b606 	mla	r6, r1, r6, fp
 80157d6:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80157da:	fb0c 2000 	mla	r0, ip, r0, r2
 80157de:	f100 0001 	add.w	r0, r0, #1
 80157e2:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80157e6:	f040 80bc 	bne.w	8015962 <DrawLowSpectrum+0x181e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80157ea:	f89a 5000 	ldrb.w	r5, [sl]
 80157ee:	26dc      	movs	r6, #220	; 0xdc
 80157f0:	fb01 b505 	mla	r5, r1, r5, fp
 80157f4:	6e28      	ldr	r0, [r5, #96]	; 0x60
 80157f6:	6ded      	ldr	r5, [r5, #92]	; 0x5c
 80157f8:	fb06 2000 	mla	r0, r6, r0, r2
	while(i < width) {
 80157fc:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80157fe:	3001      	adds	r0, #1
 8015800:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
	while(i < width) {
 8015804:	9b03      	ldr	r3, [sp, #12]
 8015806:	459e      	cmp	lr, r3
 8015808:	f000 80bc 	beq.w	8015984 <DrawLowSpectrum+0x1840>
			if(((element[i] >> k) & 1) == 1) {
 801580c:	9803      	ldr	r0, [sp, #12]
 801580e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8015812:	f013 0501 	ands.w	r5, r3, #1
 8015816:	9003      	str	r0, [sp, #12]
 8015818:	f43f af44 	beq.w	80156a4 <DrawLowSpectrum+0x1560>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801581c:	f89a 5000 	ldrb.w	r5, [sl]
 8015820:	fb01 b505 	mla	r5, r1, r5, fp
 8015824:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8015828:	fb08 2000 	mla	r0, r8, r0, r2
 801582c:	3001      	adds	r0, #1
 801582e:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015832:	f013 0502 	ands.w	r5, r3, #2
 8015836:	f43f af44 	beq.w	80156c2 <DrawLowSpectrum+0x157e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801583a:	f89a 5000 	ldrb.w	r5, [sl]
 801583e:	fb01 b505 	mla	r5, r1, r5, fp
 8015842:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8015846:	fb09 2000 	mla	r0, r9, r0, r2
 801584a:	3001      	adds	r0, #1
 801584c:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015850:	f013 0504 	ands.w	r5, r3, #4
 8015854:	f43f af44 	beq.w	80156e0 <DrawLowSpectrum+0x159c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015858:	f89a 5000 	ldrb.w	r5, [sl]
 801585c:	26e4      	movs	r6, #228	; 0xe4
 801585e:	fb01 b505 	mla	r5, r1, r5, fp
 8015862:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8015866:	fb06 2000 	mla	r0, r6, r0, r2
 801586a:	3001      	adds	r0, #1
 801586c:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015870:	f013 0508 	ands.w	r5, r3, #8
 8015874:	f43f af44 	beq.w	8015700 <DrawLowSpectrum+0x15bc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015878:	f89a 5000 	ldrb.w	r5, [sl]
 801587c:	26e3      	movs	r6, #227	; 0xe3
 801587e:	fb01 b505 	mla	r5, r1, r5, fp
 8015882:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8015886:	fb06 2000 	mla	r0, r6, r0, r2
 801588a:	3001      	adds	r0, #1
 801588c:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015890:	f013 0510 	ands.w	r5, r3, #16
 8015894:	f43f af44 	beq.w	8015720 <DrawLowSpectrum+0x15dc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015898:	f89a 5000 	ldrb.w	r5, [sl]
 801589c:	26e2      	movs	r6, #226	; 0xe2
 801589e:	fb01 b505 	mla	r5, r1, r5, fp
 80158a2:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80158a6:	fb06 2000 	mla	r0, r6, r0, r2
 80158aa:	3001      	adds	r0, #1
 80158ac:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80158b0:	f013 0520 	ands.w	r5, r3, #32
 80158b4:	f43f af44 	beq.w	8015740 <DrawLowSpectrum+0x15fc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80158b8:	f89a 5000 	ldrb.w	r5, [sl]
 80158bc:	fb01 b505 	mla	r5, r1, r5, fp
 80158c0:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80158c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80158c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80158cc:	3001      	adds	r0, #1
 80158ce:	4410      	add	r0, r2
 80158d0:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80158d4:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 80158d8:	f43f af44 	beq.w	8015764 <DrawLowSpectrum+0x1620>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80158dc:	f89a 5000 	ldrb.w	r5, [sl]
 80158e0:	fb01 b505 	mla	r5, r1, r5, fp
 80158e4:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80158e8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80158ec:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 80158f0:	3001      	adds	r0, #1
 80158f2:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80158f6:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 80158fa:	f43f af44 	beq.w	8015786 <DrawLowSpectrum+0x1642>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80158fe:	f89a 5000 	ldrb.w	r5, [sl]
 8015902:	fb01 b505 	mla	r5, r1, r5, fp
 8015906:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801590a:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
 801590e:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
 8015912:	3001      	adds	r0, #1
 8015914:	4410      	add	r0, r2
 8015916:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801591a:	f413 7580 	ands.w	r5, r3, #256	; 0x100
 801591e:	f43f af44 	beq.w	80157aa <DrawLowSpectrum+0x1666>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015922:	f89a 5000 	ldrb.w	r5, [sl]
 8015926:	26de      	movs	r6, #222	; 0xde
 8015928:	fb01 b505 	mla	r5, r1, r5, fp
 801592c:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8015930:	fb06 2000 	mla	r0, r6, r0, r2
 8015934:	3001      	adds	r0, #1
 8015936:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801593a:	f413 7500 	ands.w	r5, r3, #512	; 0x200
 801593e:	f43f af44 	beq.w	80157ca <DrawLowSpectrum+0x1686>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015942:	f89a 5000 	ldrb.w	r5, [sl]
			if(((element[i] >> k) & 1) == 1) {
 8015946:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801594a:	fb01 b505 	mla	r5, r1, r5, fp
 801594e:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8015952:	fb0c 2000 	mla	r0, ip, r0, r2
 8015956:	f100 0001 	add.w	r0, r0, #1
 801595a:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801595e:	f43f af44 	beq.w	80157ea <DrawLowSpectrum+0x16a6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015962:	f89a 0000 	ldrb.w	r0, [sl]
 8015966:	25dc      	movs	r5, #220	; 0xdc
 8015968:	fb01 b000 	mla	r0, r1, r0, fp
 801596c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801596e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8015970:	fb05 2303 	mla	r3, r5, r3, r2
	while(i < width) {
 8015974:	3201      	adds	r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015976:	3301      	adds	r3, #1
 8015978:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	while(i < width) {
 801597c:	9b03      	ldr	r3, [sp, #12]
 801597e:	459e      	cmp	lr, r3
 8015980:	f47f af44 	bne.w	801580c <DrawLowSpectrum+0x16c8>
		for(i = 1; i < rekordbox.cues; i++) {
 8015984:	4bae      	ldr	r3, [pc, #696]	; (8015c40 <DrawLowSpectrum+0x1afc>)
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015986:	2434      	movs	r4, #52	; 0x34
		for(i = 1; i < rekordbox.cues; i++) {
 8015988:	49ae      	ldr	r1, [pc, #696]	; (8015c44 <DrawLowSpectrum+0x1b00>)
 801598a:	4aaf      	ldr	r2, [pc, #700]	; (8015c48 <DrawLowSpectrum+0x1b04>)
 801598c:	1a5b      	subs	r3, r3, r1
 801598e:	f502 7948 	add.w	r9, r2, #800	; 0x320
 8015992:	9203      	str	r2, [sp, #12]
 8015994:	9306      	str	r3, [sp, #24]
 8015996:	e008      	b.n	80159aa <DrawLowSpectrum+0x1866>
			if(rekordbox.cue_singleloop[i] == 2) {
 8015998:	2b02      	cmp	r3, #2
 801599a:	f000 80d7 	beq.w	8015b4c <DrawLowSpectrum+0x1a08>
		for(i = 1; i < rekordbox.cues; i++) {
 801599e:	9b06      	ldr	r3, [sp, #24]
 80159a0:	9a05      	ldr	r2, [sp, #20]
 80159a2:	444b      	add	r3, r9
 80159a4:	429a      	cmp	r2, r3
 80159a6:	f67f ad8f 	bls.w	80154c8 <DrawLowSpectrum+0x1384>
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80159aa:	4ba8      	ldr	r3, [pc, #672]	; (8015c4c <DrawLowSpectrum+0x1b08>)
 80159ac:	f8d3 2a88 	ldr.w	r2, [r3, #2696]	; 0xa88
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 80159b0:	f8d3 3a8c 	ldr.w	r3, [r3, #2700]	; 0xa8c
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80159b4:	ee07 2a90 	vmov	s15, r2
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 80159b8:	9304      	str	r3, [sp, #16]
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80159ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 80159be:	ee07 3a90 	vmov	s15, r3
 80159c2:	9b03      	ldr	r3, [sp, #12]
 80159c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80159c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80159cc:	3304      	adds	r3, #4
 80159ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80159d2:	9303      	str	r3, [sp, #12]
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80159d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 80159d8:	ee87 6a87 	vdiv.f32	s12, s15, s14
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80159dc:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 80159e0:	ee17 3a90 	vmov	r3, s15
 80159e4:	b29d      	uxth	r5, r3
			if(rekordbox.cue_singleloop[i] == 1) {
 80159e6:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 80159ea:	2b01      	cmp	r3, #1
 80159ec:	d1d4      	bne.n	8015998 <DrawLowSpectrum+0x1854>
				DrawElement(9, 5, 37+start_pos, 219, 0x00FF0000, hot_cue);
 80159ee:	f105 0125 	add.w	r1, r5, #37	; 0x25
 80159f2:	4e97      	ldr	r6, [pc, #604]	; (8015c50 <DrawLowSpectrum+0x1b0c>)
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80159f4:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80159f6:	f04f 0cdb 	mov.w	ip, #219	; 0xdb
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80159fa:	b289      	uxth	r1, r1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80159fc:	f44f 4578 	mov.w	r5, #63488	; 0xf800
 8015a00:	f04f 08da 	mov.w	r8, #218	; 0xda
 8015a04:	f8cd 9010 	str.w	r9, [sp, #16]
 8015a08:	e04c      	b.n	8015aa4 <DrawLowSpectrum+0x1960>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015a0a:	f89a e000 	ldrb.w	lr, [sl]
 8015a0e:	fb04 be0e 	mla	lr, r4, lr, fp
 8015a12:	e9de e017 	ldrd	lr, r0, [lr, #92]	; 0x5c
 8015a16:	fb0c 1000 	mla	r0, ip, r0, r1
 8015a1a:	4410      	add	r0, r2
 8015a1c:	f82e 7010 	strh.w	r7, [lr, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015a20:	f013 0702 	ands.w	r7, r3, #2
 8015a24:	d151      	bne.n	8015aca <DrawLowSpectrum+0x1986>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015a26:	f89a e000 	ldrb.w	lr, [sl]
 8015a2a:	fb04 be0e 	mla	lr, r4, lr, fp
 8015a2e:	e9de e017 	ldrd	lr, r0, [lr, #92]	; 0x5c
 8015a32:	fb08 1000 	mla	r0, r8, r0, r1
 8015a36:	4410      	add	r0, r2
 8015a38:	f82e 7010 	strh.w	r7, [lr, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015a3c:	f013 0704 	ands.w	r7, r3, #4
 8015a40:	d151      	bne.n	8015ae6 <DrawLowSpectrum+0x19a2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015a42:	f89a e000 	ldrb.w	lr, [sl]
 8015a46:	fb04 be0e 	mla	lr, r4, lr, fp
 8015a4a:	e9de e017 	ldrd	lr, r0, [lr, #92]	; 0x5c
 8015a4e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8015a52:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8015a56:	4408      	add	r0, r1
 8015a58:	4410      	add	r0, r2
 8015a5a:	f82e 7010 	strh.w	r7, [lr, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015a5e:	f013 0708 	ands.w	r7, r3, #8
 8015a62:	d151      	bne.n	8015b08 <DrawLowSpectrum+0x19c4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015a64:	f89a e000 	ldrb.w	lr, [sl]
 8015a68:	f04f 09d8 	mov.w	r9, #216	; 0xd8
			if(((element[i] >> k) & 1) == 1) {
 8015a6c:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015a70:	fb04 be0e 	mla	lr, r4, lr, fp
 8015a74:	e9de e017 	ldrd	lr, r0, [lr, #92]	; 0x5c
 8015a78:	fb09 1000 	mla	r0, r9, r0, r1
 8015a7c:	4410      	add	r0, r2
 8015a7e:	f82e 7010 	strh.w	r7, [lr, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015a82:	d151      	bne.n	8015b28 <DrawLowSpectrum+0x19e4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015a84:	f89a 7000 	ldrb.w	r7, [sl]
 8015a88:	f04f 0ed7 	mov.w	lr, #215	; 0xd7
 8015a8c:	fb04 b707 	mla	r7, r4, r7, fp
 8015a90:	e9d7 7017 	ldrd	r7, r0, [r7, #92]	; 0x5c
 8015a94:	fb0e 1000 	mla	r0, lr, r0, r1
 8015a98:	4410      	add	r0, r2
	while(i < width) {
 8015a9a:	3201      	adds	r2, #1
 8015a9c:	2a09      	cmp	r2, #9
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015a9e:	f827 3010 	strh.w	r3, [r7, r0, lsl #1]
	while(i < width) {
 8015aa2:	d050      	beq.n	8015b46 <DrawLowSpectrum+0x1a02>
			if(((element[i] >> k) & 1) == 1) {
 8015aa4:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 8015aa8:	f013 0701 	ands.w	r7, r3, #1
 8015aac:	d0ad      	beq.n	8015a0a <DrawLowSpectrum+0x18c6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015aae:	f89a 7000 	ldrb.w	r7, [sl]
 8015ab2:	fb04 b707 	mla	r7, r4, r7, fp
 8015ab6:	e9d7 7017 	ldrd	r7, r0, [r7, #92]	; 0x5c
 8015aba:	fb0c 1000 	mla	r0, ip, r0, r1
 8015abe:	4410      	add	r0, r2
 8015ac0:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015ac4:	f013 0702 	ands.w	r7, r3, #2
 8015ac8:	d0ad      	beq.n	8015a26 <DrawLowSpectrum+0x18e2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015aca:	f89a 7000 	ldrb.w	r7, [sl]
 8015ace:	fb04 b707 	mla	r7, r4, r7, fp
 8015ad2:	e9d7 7017 	ldrd	r7, r0, [r7, #92]	; 0x5c
 8015ad6:	fb08 1000 	mla	r0, r8, r0, r1
 8015ada:	4410      	add	r0, r2
 8015adc:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015ae0:	f013 0704 	ands.w	r7, r3, #4
 8015ae4:	d0ad      	beq.n	8015a42 <DrawLowSpectrum+0x18fe>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015ae6:	f89a 7000 	ldrb.w	r7, [sl]
 8015aea:	fb04 b707 	mla	r7, r4, r7, fp
 8015aee:	e9d7 7017 	ldrd	r7, r0, [r7, #92]	; 0x5c
 8015af2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8015af6:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8015afa:	4408      	add	r0, r1
 8015afc:	4410      	add	r0, r2
 8015afe:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015b02:	f013 0708 	ands.w	r7, r3, #8
 8015b06:	d0ad      	beq.n	8015a64 <DrawLowSpectrum+0x1920>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015b08:	f89a 7000 	ldrb.w	r7, [sl]
 8015b0c:	f04f 0ed8 	mov.w	lr, #216	; 0xd8
			if(((element[i] >> k) & 1) == 1) {
 8015b10:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015b14:	fb04 b707 	mla	r7, r4, r7, fp
 8015b18:	e9d7 7017 	ldrd	r7, r0, [r7, #92]	; 0x5c
 8015b1c:	fb0e 1000 	mla	r0, lr, r0, r1
 8015b20:	4410      	add	r0, r2
 8015b22:	f827 5010 	strh.w	r5, [r7, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015b26:	d0ad      	beq.n	8015a84 <DrawLowSpectrum+0x1940>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015b28:	f89a 0000 	ldrb.w	r0, [sl]
 8015b2c:	27d7      	movs	r7, #215	; 0xd7
 8015b2e:	fb04 b000 	mla	r0, r4, r0, fp
 8015b32:	e9d0 0317 	ldrd	r0, r3, [r0, #92]	; 0x5c
 8015b36:	fb07 1303 	mla	r3, r7, r3, r1
 8015b3a:	4413      	add	r3, r2
	while(i < width) {
 8015b3c:	3201      	adds	r2, #1
 8015b3e:	2a09      	cmp	r2, #9
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015b40:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
	while(i < width) {
 8015b44:	d1ae      	bne.n	8015aa4 <DrawLowSpectrum+0x1960>
 8015b46:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8015b4a:	e728      	b.n	801599e <DrawLowSpectrum+0x185a>
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 8015b4c:	9b03      	ldr	r3, [sp, #12]
				VLine(40+start_pos, 220, 40, 0x0000FF00);
 8015b4e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015b52:	2228      	movs	r2, #40	; 0x28
 8015b54:	21dc      	movs	r1, #220	; 0xdc
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 8015b56:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
				VLine(40+start_pos, 220, 40, 0x0000FF00);
 8015b5a:	b280      	uxth	r0, r0
				Pixel(41+start_pos, 220, 0x0000FF00);
 8015b5c:	3529      	adds	r5, #41	; 0x29
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015b5e:	f44f 68fc 	mov.w	r8, #2016	; 0x7e0
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 8015b62:	ee07 3a90 	vmov	s15, r3
 8015b66:	9304      	str	r3, [sp, #16]
				VLine(40+start_pos, 220, 40, 0x0000FF00);
 8015b68:	f44f 437f 	mov.w	r3, #65280	; 0xff00
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015b6c:	b2ad      	uxth	r5, r5
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 8015b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8015b72:	ee67 6aa6 	vmul.f32	s13, s15, s13
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 8015b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8015b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015b7e:	ee17 6a90 	vmov	r6, s15
				VLine(40+start_pos, 220, 40, 0x0000FF00);
 8015b82:	f7fd fe7b 	bl	801387c <VLine>
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015b86:	f89a 3000 	ldrb.w	r3, [sl]
 8015b8a:	21dc      	movs	r1, #220	; 0xdc
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8015b8c:	b2b6      	uxth	r6, r6
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015b8e:	fb04 b303 	mla	r3, r4, r3, fp
				VLine(40+end_pos, 220, 40, 0x0000FF00);
 8015b92:	f106 0028 	add.w	r0, r6, #40	; 0x28
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015b96:	e9d3 7217 	ldrd	r7, r2, [r3, #92]	; 0x5c
				VLine(40+end_pos, 220, 40, 0x0000FF00);
 8015b9a:	b280      	uxth	r0, r0
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015b9c:	fb01 5302 	mla	r3, r1, r2, r5
				VLine(40+end_pos, 220, 40, 0x0000FF00);
 8015ba0:	2228      	movs	r2, #40	; 0x28
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015ba2:	f827 8013 	strh.w	r8, [r7, r3, lsl #1]
				VLine(40+end_pos, 220, 40, 0x0000FF00);
 8015ba6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015baa:	f89a 7000 	ldrb.w	r7, [sl]
 8015bae:	fb04 b707 	mla	r7, r4, r7, fp
 8015bb2:	e9d7 ec17 	ldrd	lr, ip, [r7, #92]	; 0x5c
 8015bb6:	eb0c 17cc 	add.w	r7, ip, ip, lsl #7
 8015bba:	eb0c 0747 	add.w	r7, ip, r7, lsl #1
 8015bbe:	442f      	add	r7, r5
 8015bc0:	f82e 8017 	strh.w	r8, [lr, r7, lsl #1]
				VLine(40+end_pos, 220, 40, 0x0000FF00);
 8015bc4:	f7fd fe5a 	bl	801387c <VLine>
				Pixel(39+end_pos, 220, 0x0000FF00);
 8015bc8:	f106 0327 	add.w	r3, r6, #39	; 0x27
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015bcc:	f89a 0000 	ldrb.w	r0, [sl]
 8015bd0:	21dc      	movs	r1, #220	; 0xdc
 8015bd2:	b29a      	uxth	r2, r3
		for(i = 1; i < rekordbox.cues; i++) {
 8015bd4:	4b1d      	ldr	r3, [pc, #116]	; (8015c4c <DrawLowSpectrum+0x1b08>)
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015bd6:	fb04 b000 	mla	r0, r4, r0, fp
		for(i = 1; i < rekordbox.cues; i++) {
 8015bda:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
 8015bde:	9305      	str	r3, [sp, #20]
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8015be0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8015be2:	fb01 2303 	mla	r3, r1, r3, r2
 8015be6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8015be8:	f821 8013 	strh.w	r8, [r1, r3, lsl #1]
 8015bec:	f89a 1000 	ldrb.w	r1, [sl]
 8015bf0:	fb04 b101 	mla	r1, r4, r1, fp
 8015bf4:	e9d1 1317 	ldrd	r1, r3, [r1, #92]	; 0x5c
 8015bf8:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
 8015bfc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015c00:	4413      	add	r3, r2
 8015c02:	f821 8013 	strh.w	r8, [r1, r3, lsl #1]
}
 8015c06:	e6ca      	b.n	801599e <DrawLowSpectrum+0x185a>
		if(rekordbox.cue_start_position[0] != 0) {
 8015c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	f43f ac55 	beq.w	80154ba <DrawLowSpectrum+0x1376>
				*400/rekordbox.spectrum_size), 219, 0x00FFFF00, hot_cue);
 8015c10:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8015c14:	f8df c038 	ldr.w	ip, [pc, #56]	; 8015c50 <DrawLowSpectrum+0x1b0c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015c18:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015c1a:	f04f 0edb 	mov.w	lr, #219	; 0xdb
				*400/rekordbox.spectrum_size), 219, 0x00FFFF00, hot_cue);
 8015c1e:	fb03 f101 	mul.w	r1, r3, r1
 8015c22:	4b0a      	ldr	r3, [pc, #40]	; (8015c4c <DrawLowSpectrum+0x1b08>)
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015c24:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8015c28:	f04f 08da 	mov.w	r8, #218	; 0xda
				*400/rekordbox.spectrum_size), 219, 0x00FFFF00, hot_cue);
 8015c2c:	f8d3 3a8c 	ldr.w	r3, [r3, #2700]	; 0xa8c
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015c30:	f04f 09d8 	mov.w	r9, #216	; 0xd8
				*400/rekordbox.spectrum_size), 219, 0x00FFFF00, hot_cue);
 8015c34:	fbb1 f1f3 	udiv	r1, r1, r3
			DrawElement(9, 5, 36+(rekordbox.cue_start_position[0]
 8015c38:	3124      	adds	r1, #36	; 0x24
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015c3a:	b289      	uxth	r1, r1
 8015c3c:	e054      	b.n	8015ce8 <DrawLowSpectrum+0x1ba4>
 8015c3e:	bf00      	nop
 8015c40:	ffffcc99 	.word	0xffffcc99
 8015c44:	20015208 	.word	0x20015208
 8015c48:	20018250 	.word	0x20018250
 8015c4c:	20017208 	.word	0x20017208
 8015c50:	08024366 	.word	0x08024366
 8015c54:	f89a 7000 	ldrb.w	r7, [sl]
 8015c58:	fb05 b707 	mla	r7, r5, r7, fp
 8015c5c:	e9d7 7017 	ldrd	r7, r0, [r7, #92]	; 0x5c
 8015c60:	fb0e 1000 	mla	r0, lr, r0, r1
 8015c64:	4410      	add	r0, r2
 8015c66:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015c6a:	f013 0602 	ands.w	r6, r3, #2
 8015c6e:	d14e      	bne.n	8015d0e <DrawLowSpectrum+0x1bca>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015c70:	f89a 7000 	ldrb.w	r7, [sl]
 8015c74:	fb05 b707 	mla	r7, r5, r7, fp
 8015c78:	e9d7 7017 	ldrd	r7, r0, [r7, #92]	; 0x5c
 8015c7c:	fb08 1000 	mla	r0, r8, r0, r1
 8015c80:	4410      	add	r0, r2
 8015c82:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015c86:	f013 0604 	ands.w	r6, r3, #4
 8015c8a:	d14e      	bne.n	8015d2a <DrawLowSpectrum+0x1be6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015c8c:	f89a 7000 	ldrb.w	r7, [sl]
 8015c90:	fb05 b707 	mla	r7, r5, r7, fp
 8015c94:	e9d7 7017 	ldrd	r7, r0, [r7, #92]	; 0x5c
 8015c98:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8015c9c:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8015ca0:	4408      	add	r0, r1
 8015ca2:	4410      	add	r0, r2
 8015ca4:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015ca8:	f013 0608 	ands.w	r6, r3, #8
 8015cac:	d14e      	bne.n	8015d4c <DrawLowSpectrum+0x1c08>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015cae:	f89a 7000 	ldrb.w	r7, [sl]
			if(((element[i] >> k) & 1) == 1) {
 8015cb2:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015cb6:	fb05 b707 	mla	r7, r5, r7, fp
 8015cba:	e9d7 7017 	ldrd	r7, r0, [r7, #92]	; 0x5c
 8015cbe:	fb09 1000 	mla	r0, r9, r0, r1
 8015cc2:	4410      	add	r0, r2
 8015cc4:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015cc8:	d14e      	bne.n	8015d68 <DrawLowSpectrum+0x1c24>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015cca:	f89a 6000 	ldrb.w	r6, [sl]
 8015cce:	27d7      	movs	r7, #215	; 0xd7
 8015cd0:	fb05 b606 	mla	r6, r5, r6, fp
 8015cd4:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015cd8:	fb07 1000 	mla	r0, r7, r0, r1
 8015cdc:	4410      	add	r0, r2
	while(i < width) {
 8015cde:	3201      	adds	r2, #1
 8015ce0:	2a09      	cmp	r2, #9
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015ce2:	f826 3010 	strh.w	r3, [r6, r0, lsl #1]
	while(i < width) {
 8015ce6:	d04e      	beq.n	8015d86 <DrawLowSpectrum+0x1c42>
			if(((element[i] >> k) & 1) == 1) {
 8015ce8:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
 8015cec:	f013 0601 	ands.w	r6, r3, #1
 8015cf0:	d0b0      	beq.n	8015c54 <DrawLowSpectrum+0x1b10>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015cf2:	f89a 6000 	ldrb.w	r6, [sl]
 8015cf6:	fb05 b606 	mla	r6, r5, r6, fp
 8015cfa:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015cfe:	fb0e 1000 	mla	r0, lr, r0, r1
 8015d02:	4410      	add	r0, r2
 8015d04:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015d08:	f013 0602 	ands.w	r6, r3, #2
 8015d0c:	d0b0      	beq.n	8015c70 <DrawLowSpectrum+0x1b2c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015d0e:	f89a 6000 	ldrb.w	r6, [sl]
 8015d12:	fb05 b606 	mla	r6, r5, r6, fp
 8015d16:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015d1a:	fb08 1000 	mla	r0, r8, r0, r1
 8015d1e:	4410      	add	r0, r2
 8015d20:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015d24:	f013 0604 	ands.w	r6, r3, #4
 8015d28:	d0b0      	beq.n	8015c8c <DrawLowSpectrum+0x1b48>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015d2a:	f89a 6000 	ldrb.w	r6, [sl]
 8015d2e:	fb05 b606 	mla	r6, r5, r6, fp
 8015d32:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015d36:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8015d3a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8015d3e:	4408      	add	r0, r1
 8015d40:	4410      	add	r0, r2
 8015d42:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015d46:	f013 0608 	ands.w	r6, r3, #8
 8015d4a:	d0b0      	beq.n	8015cae <DrawLowSpectrum+0x1b6a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015d4c:	f89a 6000 	ldrb.w	r6, [sl]
			if(((element[i] >> k) & 1) == 1) {
 8015d50:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015d54:	fb05 b606 	mla	r6, r5, r6, fp
 8015d58:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015d5c:	fb09 1000 	mla	r0, r9, r0, r1
 8015d60:	4410      	add	r0, r2
 8015d62:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015d66:	d0b0      	beq.n	8015cca <DrawLowSpectrum+0x1b86>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015d68:	f89a 0000 	ldrb.w	r0, [sl]
 8015d6c:	26d7      	movs	r6, #215	; 0xd7
 8015d6e:	fb05 b000 	mla	r0, r5, r0, fp
 8015d72:	e9d0 0317 	ldrd	r0, r3, [r0, #92]	; 0x5c
 8015d76:	fb06 1303 	mla	r3, r6, r3, r1
 8015d7a:	4413      	add	r3, r2
	while(i < width) {
 8015d7c:	3201      	adds	r2, #1
 8015d7e:	2a09      	cmp	r2, #9
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015d80:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	while(i < width) {
 8015d84:	d1b0      	bne.n	8015ce8 <DrawLowSpectrum+0x1ba4>
 8015d86:	4de1      	ldr	r5, [pc, #900]	; (801610c <DrawLowSpectrum+0x1fc8>)
 8015d88:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015d8a:	2134      	movs	r1, #52	; 0x34
 8015d8c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8015d90:	f105 0e48 	add.w	lr, r5, #72	; 0x48
 8015d94:	f04f 08fa 	mov.w	r8, #250	; 0xfa
 8015d98:	e0b9      	b.n	8015f0e <DrawLowSpectrum+0x1dca>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015d9a:	f89a 7000 	ldrb.w	r7, [sl]
 8015d9e:	fb01 b707 	mla	r7, r1, r7, fp
 8015da2:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8015da6:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 8015daa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8015dae:	3401      	adds	r4, #1
 8015db0:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015db4:	f013 0602 	ands.w	r6, r3, #2
 8015db8:	f040 80c0 	bne.w	8015f3c <DrawLowSpectrum+0x1df8>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015dbc:	f89a 7000 	ldrb.w	r7, [sl]
 8015dc0:	fb01 b707 	mla	r7, r1, r7, fp
 8015dc4:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8015dc8:	eb04 1cc4 	add.w	ip, r4, r4, lsl #7
 8015dcc:	eb04 044c 	add.w	r4, r4, ip, lsl #1
 8015dd0:	3401      	adds	r4, #1
 8015dd2:	4414      	add	r4, r2
 8015dd4:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015dd8:	f013 0604 	ands.w	r6, r3, #4
 8015ddc:	f040 80c0 	bne.w	8015f60 <DrawLowSpectrum+0x1e1c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015de0:	f89a 7000 	ldrb.w	r7, [sl]
 8015de4:	fb01 b707 	mla	r7, r1, r7, fp
 8015de8:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8015dec:	eb04 14c4 	add.w	r4, r4, r4, lsl #7
 8015df0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015df4:	3401      	adds	r4, #1
 8015df6:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015dfa:	f013 0608 	ands.w	r6, r3, #8
 8015dfe:	f040 80c0 	bne.w	8015f82 <DrawLowSpectrum+0x1e3e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015e02:	f89a 7000 	ldrb.w	r7, [sl]
 8015e06:	fb01 b707 	mla	r7, r1, r7, fp
 8015e0a:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8015e0e:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 8015e12:	3401      	adds	r4, #1
 8015e14:	4414      	add	r4, r2
 8015e16:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015e1a:	f89a 6000 	ldrb.w	r6, [sl]
			if(((element[i] >> k) & 1) == 1) {
 8015e1e:	f013 0710 	ands.w	r7, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015e22:	fb01 b606 	mla	r6, r1, r6, fp
 8015e26:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8015e2a:	eb02 2404 	add.w	r4, r2, r4, lsl #8
 8015e2e:	f104 0401 	add.w	r4, r4, #1
			if(((element[i] >> k) & 1) == 1) {
 8015e32:	f041 8474 	bne.w	801771e <DrawLowSpectrum+0x35da>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015e36:	f826 7014 	strh.w	r7, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015e3a:	f013 0620 	ands.w	r6, r3, #32
 8015e3e:	f041 8460 	bne.w	8017702 <DrawLowSpectrum+0x35be>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015e42:	f89a 7000 	ldrb.w	r7, [sl]
 8015e46:	fb01 b707 	mla	r7, r1, r7, fp
 8015e4a:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8015e4e:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8015e52:	3401      	adds	r4, #1
 8015e54:	4414      	add	r4, r2
 8015e56:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015e5a:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 8015e5e:	f041 8441 	bne.w	80176e4 <DrawLowSpectrum+0x35a0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015e62:	f89a 7000 	ldrb.w	r7, [sl]
 8015e66:	fb01 b707 	mla	r7, r1, r7, fp
 8015e6a:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8015e6e:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 8015e72:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015e76:	3401      	adds	r4, #1
 8015e78:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015e7c:	f013 0680 	ands.w	r6, r3, #128	; 0x80
 8015e80:	f041 8420 	bne.w	80176c4 <DrawLowSpectrum+0x3580>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015e84:	f89a 7000 	ldrb.w	r7, [sl]
 8015e88:	fb01 b707 	mla	r7, r1, r7, fp
 8015e8c:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8015e90:	ebc4 1c84 	rsb	ip, r4, r4, lsl #6
 8015e94:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8015e98:	3401      	adds	r4, #1
 8015e9a:	4414      	add	r4, r2
 8015e9c:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015ea0:	f413 7680 	ands.w	r6, r3, #256	; 0x100
 8015ea4:	f041 83ff 	bne.w	80176a6 <DrawLowSpectrum+0x3562>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015ea8:	f89a 7000 	ldrb.w	r7, [sl]
 8015eac:	fb01 b707 	mla	r7, r1, r7, fp
 8015eb0:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8015eb4:	ebc4 1484 	rsb	r4, r4, r4, lsl #6
 8015eb8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8015ebc:	3401      	adds	r4, #1
 8015ebe:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015ec2:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 8015ec6:	f041 83de 	bne.w	8017686 <DrawLowSpectrum+0x3542>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015eca:	f89a 7000 	ldrb.w	r7, [sl]
 8015ece:	fb01 b707 	mla	r7, r1, r7, fp
 8015ed2:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8015ed6:	ebc4 1c84 	rsb	ip, r4, r4, lsl #6
 8015eda:	ebc4 048c 	rsb	r4, r4, ip, lsl #2
 8015ede:	3401      	adds	r4, #1
 8015ee0:	4414      	add	r4, r2
 8015ee2:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015ee6:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8015eea:	f041 83bf 	bne.w	801766c <DrawLowSpectrum+0x3528>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015eee:	f89a 6000 	ldrb.w	r6, [sl]
 8015ef2:	fb01 b606 	mla	r6, r1, r6, fp
 8015ef6:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8015efa:	fb08 2404 	mla	r4, r8, r4, r2
 8015efe:	3401      	adds	r4, #1
 8015f00:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 8015f04:	45ae      	cmp	lr, r5
 8015f06:	f102 0201 	add.w	r2, r2, #1
 8015f0a:	f43f aad6 	beq.w	80154ba <DrawLowSpectrum+0x1376>
			if(((element[i] >> k) & 1) == 1) {
 8015f0e:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 8015f12:	f013 0601 	ands.w	r6, r3, #1
 8015f16:	f43f af40 	beq.w	8015d9a <DrawLowSpectrum+0x1c56>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015f1a:	f89a 6000 	ldrb.w	r6, [sl]
 8015f1e:	fb01 b606 	mla	r6, r1, r6, fp
 8015f22:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8015f26:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 8015f2a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8015f2e:	3401      	adds	r4, #1
 8015f30:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015f34:	f013 0602 	ands.w	r6, r3, #2
 8015f38:	f43f af40 	beq.w	8015dbc <DrawLowSpectrum+0x1c78>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015f3c:	f89a 6000 	ldrb.w	r6, [sl]
 8015f40:	fb01 b606 	mla	r6, r1, r6, fp
 8015f44:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8015f48:	eb04 17c4 	add.w	r7, r4, r4, lsl #7
 8015f4c:	eb04 0447 	add.w	r4, r4, r7, lsl #1
 8015f50:	3401      	adds	r4, #1
 8015f52:	4414      	add	r4, r2
 8015f54:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015f58:	f013 0604 	ands.w	r6, r3, #4
 8015f5c:	f43f af40 	beq.w	8015de0 <DrawLowSpectrum+0x1c9c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015f60:	f89a 6000 	ldrb.w	r6, [sl]
 8015f64:	fb01 b606 	mla	r6, r1, r6, fp
 8015f68:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8015f6c:	eb04 14c4 	add.w	r4, r4, r4, lsl #7
 8015f70:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015f74:	3401      	adds	r4, #1
 8015f76:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015f7a:	f013 0608 	ands.w	r6, r3, #8
 8015f7e:	f43f af40 	beq.w	8015e02 <DrawLowSpectrum+0x1cbe>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8015f82:	f89a 6000 	ldrb.w	r6, [sl]
 8015f86:	fb01 b606 	mla	r6, r1, r6, fp
 8015f8a:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8015f8e:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 8015f92:	3401      	adds	r4, #1
 8015f94:	4414      	add	r4, r2
 8015f96:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 8015f9a:	e73e      	b.n	8015e1a <DrawLowSpectrum+0x1cd6>
 8015f9c:	4c5c      	ldr	r4, [pc, #368]	; (8016110 <DrawLowSpectrum+0x1fcc>)
 8015f9e:	2134      	movs	r1, #52	; 0x34
 8015fa0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8015fa4:	f04f 08bb 	mov.w	r8, #187	; 0xbb
 8015fa8:	f104 0c4a 	add.w	ip, r4, #74	; 0x4a
 8015fac:	46a6      	mov	lr, r4
 8015fae:	e050      	b.n	8016052 <DrawLowSpectrum+0x1f0e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015fb0:	f89a 6000 	ldrb.w	r6, [sl]
 8015fb4:	fb01 b606 	mla	r6, r1, r6, fp
 8015fb8:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015fbc:	eb00 0740 	add.w	r7, r0, r0, lsl #1
 8015fc0:	ebc0 1087 	rsb	r0, r0, r7, lsl #6
 8015fc4:	3054      	adds	r0, #84	; 0x54
 8015fc6:	4410      	add	r0, r2
 8015fc8:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015fcc:	f013 0402 	ands.w	r4, r3, #2
 8015fd0:	d155      	bne.n	801607e <DrawLowSpectrum+0x1f3a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015fd2:	f89a 6000 	ldrb.w	r6, [sl]
 8015fd6:	27be      	movs	r7, #190	; 0xbe
 8015fd8:	fb01 b606 	mla	r6, r1, r6, fp
 8015fdc:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015fe0:	fb07 2000 	mla	r0, r7, r0, r2
 8015fe4:	3054      	adds	r0, #84	; 0x54
 8015fe6:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8015fea:	f013 0404 	ands.w	r4, r3, #4
 8015fee:	d155      	bne.n	801609c <DrawLowSpectrum+0x1f58>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8015ff0:	f89a 6000 	ldrb.w	r6, [sl]
 8015ff4:	fb01 b606 	mla	r6, r1, r6, fp
 8015ff8:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8015ffc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016000:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
 8016004:	3054      	adds	r0, #84	; 0x54
 8016006:	4410      	add	r0, r2
 8016008:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801600c:	f013 0408 	ands.w	r4, r3, #8
 8016010:	d155      	bne.n	80160be <DrawLowSpectrum+0x1f7a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016012:	f89a 6000 	ldrb.w	r6, [sl]
 8016016:	27bc      	movs	r7, #188	; 0xbc
			if(((element[i] >> k) & 1) == 1) {
 8016018:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801601c:	fb01 b606 	mla	r6, r1, r6, fp
 8016020:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8016024:	fb07 2000 	mla	r0, r7, r0, r2
 8016028:	f100 0054 	add.w	r0, r0, #84	; 0x54
 801602c:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016030:	d155      	bne.n	80160de <DrawLowSpectrum+0x1f9a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016032:	f89a 4000 	ldrb.w	r4, [sl]
 8016036:	fb01 b404 	mla	r4, r1, r4, fp
 801603a:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 801603e:	fb08 2000 	mla	r0, r8, r0, r2
 8016042:	3054      	adds	r0, #84	; 0x54
 8016044:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
	while(i < width) {
 8016048:	45f4      	cmp	ip, lr
 801604a:	f102 0201 	add.w	r2, r2, #1
 801604e:	f43e a9f8 	beq.w	8014442 <DrawLowSpectrum+0x2fe>
			if(((element[i] >> k) & 1) == 1) {
 8016052:	f83e 3f02 	ldrh.w	r3, [lr, #2]!
 8016056:	f013 0401 	ands.w	r4, r3, #1
 801605a:	d0a9      	beq.n	8015fb0 <DrawLowSpectrum+0x1e6c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801605c:	f89a 4000 	ldrb.w	r4, [sl]
 8016060:	fb01 b404 	mla	r4, r1, r4, fp
 8016064:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 8016068:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 801606c:	ebc0 1086 	rsb	r0, r0, r6, lsl #6
 8016070:	3054      	adds	r0, #84	; 0x54
 8016072:	4410      	add	r0, r2
 8016074:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016078:	f013 0402 	ands.w	r4, r3, #2
 801607c:	d0a9      	beq.n	8015fd2 <DrawLowSpectrum+0x1e8e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801607e:	f89a 4000 	ldrb.w	r4, [sl]
 8016082:	26be      	movs	r6, #190	; 0xbe
 8016084:	fb01 b404 	mla	r4, r1, r4, fp
 8016088:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 801608c:	fb06 2000 	mla	r0, r6, r0, r2
 8016090:	3054      	adds	r0, #84	; 0x54
 8016092:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016096:	f013 0404 	ands.w	r4, r3, #4
 801609a:	d0a9      	beq.n	8015ff0 <DrawLowSpectrum+0x1eac>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801609c:	f89a 4000 	ldrb.w	r4, [sl]
 80160a0:	fb01 b404 	mla	r4, r1, r4, fp
 80160a4:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 80160a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80160ac:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
 80160b0:	3054      	adds	r0, #84	; 0x54
 80160b2:	4410      	add	r0, r2
 80160b4:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80160b8:	f013 0408 	ands.w	r4, r3, #8
 80160bc:	d0a9      	beq.n	8016012 <DrawLowSpectrum+0x1ece>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80160be:	f89a 4000 	ldrb.w	r4, [sl]
 80160c2:	26bc      	movs	r6, #188	; 0xbc
			if(((element[i] >> k) & 1) == 1) {
 80160c4:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80160c8:	fb01 b404 	mla	r4, r1, r4, fp
 80160cc:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 80160d0:	fb06 2000 	mla	r0, r6, r0, r2
 80160d4:	f100 0054 	add.w	r0, r0, #84	; 0x54
 80160d8:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80160dc:	d0a9      	beq.n	8016032 <DrawLowSpectrum+0x1eee>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80160de:	f89a 0000 	ldrb.w	r0, [sl]
 80160e2:	fb01 b000 	mla	r0, r1, r0, fp
 80160e6:	e9d0 0317 	ldrd	r0, r3, [r0, #92]	; 0x5c
 80160ea:	fb08 2303 	mla	r3, r8, r3, r2
 80160ee:	3354      	adds	r3, #84	; 0x54
 80160f0:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 80160f4:	e7a8      	b.n	8016048 <DrawLowSpectrum+0x1f04>
 80160f6:	4d07      	ldr	r5, [pc, #28]	; (8016114 <DrawLowSpectrum+0x1fd0>)
 80160f8:	2134      	movs	r1, #52	; 0x34
 80160fa:	f04f 08e6 	mov.w	r8, #230	; 0xe6
 80160fe:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8016102:	f105 0e44 	add.w	lr, r5, #68	; 0x44
 8016106:	f04f 0ce5 	mov.w	ip, #229	; 0xe5
 801610a:	e077      	b.n	80161fc <DrawLowSpectrum+0x20b8>
 801610c:	08023a8a 	.word	0x08023a8a
 8016110:	0802461a 	.word	0x0802461a
 8016114:	08024562 	.word	0x08024562
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016118:	f89a 9000 	ldrb.w	r9, [sl]
 801611c:	fb01 b909 	mla	r9, r1, r9, fp
 8016120:	e9d9 9017 	ldrd	r9, r0, [r9, #92]	; 0x5c
 8016124:	fb08 2000 	mla	r0, r8, r0, r2
 8016128:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801612c:	f829 6010 	strh.w	r6, [r9, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016130:	f013 0602 	ands.w	r6, r3, #2
 8016134:	d176      	bne.n	8016224 <DrawLowSpectrum+0x20e0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016136:	f89a 9000 	ldrb.w	r9, [sl]
 801613a:	fb01 b909 	mla	r9, r1, r9, fp
 801613e:	e9d9 9017 	ldrd	r9, r0, [r9, #92]	; 0x5c
 8016142:	fb0c 2000 	mla	r0, ip, r0, r2
 8016146:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801614a:	f829 6010 	strh.w	r6, [r9, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801614e:	f013 0604 	ands.w	r6, r3, #4
 8016152:	d176      	bne.n	8016242 <DrawLowSpectrum+0x20fe>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016154:	f89a 9000 	ldrb.w	r9, [sl]
 8016158:	27e4      	movs	r7, #228	; 0xe4
 801615a:	fb01 b909 	mla	r9, r1, r9, fp
 801615e:	e9d9 9017 	ldrd	r9, r0, [r9, #92]	; 0x5c
 8016162:	fb07 2000 	mla	r0, r7, r0, r2
 8016166:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801616a:	f829 6010 	strh.w	r6, [r9, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801616e:	f013 0608 	ands.w	r6, r3, #8
 8016172:	d176      	bne.n	8016262 <DrawLowSpectrum+0x211e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016174:	f89a 9000 	ldrb.w	r9, [sl]
 8016178:	27e3      	movs	r7, #227	; 0xe3
 801617a:	fb01 b909 	mla	r9, r1, r9, fp
 801617e:	e9d9 9017 	ldrd	r9, r0, [r9, #92]	; 0x5c
 8016182:	fb07 2000 	mla	r0, r7, r0, r2
 8016186:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801618a:	f829 6010 	strh.w	r6, [r9, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801618e:	f013 0610 	ands.w	r6, r3, #16
 8016192:	d176      	bne.n	8016282 <DrawLowSpectrum+0x213e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016194:	f89a 9000 	ldrb.w	r9, [sl]
 8016198:	27e2      	movs	r7, #226	; 0xe2
 801619a:	fb01 b909 	mla	r9, r1, r9, fp
 801619e:	e9d9 9017 	ldrd	r9, r0, [r9, #92]	; 0x5c
 80161a2:	fb07 2000 	mla	r0, r7, r0, r2
 80161a6:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80161aa:	f829 6010 	strh.w	r6, [r9, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80161ae:	f013 0620 	ands.w	r6, r3, #32
 80161b2:	d176      	bne.n	80162a2 <DrawLowSpectrum+0x215e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80161b4:	f89a 9000 	ldrb.w	r9, [sl]
			if(((element[i] >> k) & 1) == 1) {
 80161b8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80161bc:	fb01 b909 	mla	r9, r1, r9, fp
 80161c0:	e9d9 9017 	ldrd	r9, r0, [r9, #92]	; 0x5c
 80161c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80161c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80161cc:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80161d0:	4410      	add	r0, r2
 80161d2:	f829 6010 	strh.w	r6, [r9, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80161d6:	d176      	bne.n	80162c6 <DrawLowSpectrum+0x2182>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80161d8:	f89a 6000 	ldrb.w	r6, [sl]
	while(i < width) {
 80161dc:	45ae      	cmp	lr, r5
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80161de:	fb01 b606 	mla	r6, r1, r6, fp
 80161e2:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80161e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80161ea:	eb02 1040 	add.w	r0, r2, r0, lsl #5
	while(i < width) {
 80161ee:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80161f2:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80161f6:	f826 3010 	strh.w	r3, [r6, r0, lsl #1]
	while(i < width) {
 80161fa:	d076      	beq.n	80162ea <DrawLowSpectrum+0x21a6>
			if(((element[i] >> k) & 1) == 1) {
 80161fc:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 8016200:	f013 0601 	ands.w	r6, r3, #1
 8016204:	d088      	beq.n	8016118 <DrawLowSpectrum+0x1fd4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016206:	f89a 6000 	ldrb.w	r6, [sl]
 801620a:	fb01 b606 	mla	r6, r1, r6, fp
 801620e:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8016212:	fb08 2000 	mla	r0, r8, r0, r2
 8016216:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801621a:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801621e:	f013 0602 	ands.w	r6, r3, #2
 8016222:	d088      	beq.n	8016136 <DrawLowSpectrum+0x1ff2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016224:	f89a 6000 	ldrb.w	r6, [sl]
 8016228:	fb01 b606 	mla	r6, r1, r6, fp
 801622c:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8016230:	fb0c 2000 	mla	r0, ip, r0, r2
 8016234:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8016238:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801623c:	f013 0604 	ands.w	r6, r3, #4
 8016240:	d088      	beq.n	8016154 <DrawLowSpectrum+0x2010>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016242:	f89a 6000 	ldrb.w	r6, [sl]
 8016246:	27e4      	movs	r7, #228	; 0xe4
 8016248:	fb01 b606 	mla	r6, r1, r6, fp
 801624c:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8016250:	fb07 2000 	mla	r0, r7, r0, r2
 8016254:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8016258:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801625c:	f013 0608 	ands.w	r6, r3, #8
 8016260:	d088      	beq.n	8016174 <DrawLowSpectrum+0x2030>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016262:	f89a 6000 	ldrb.w	r6, [sl]
 8016266:	27e3      	movs	r7, #227	; 0xe3
 8016268:	fb01 b606 	mla	r6, r1, r6, fp
 801626c:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8016270:	fb07 2000 	mla	r0, r7, r0, r2
 8016274:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8016278:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801627c:	f013 0610 	ands.w	r6, r3, #16
 8016280:	d088      	beq.n	8016194 <DrawLowSpectrum+0x2050>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016282:	f89a 6000 	ldrb.w	r6, [sl]
 8016286:	27e2      	movs	r7, #226	; 0xe2
 8016288:	fb01 b606 	mla	r6, r1, r6, fp
 801628c:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8016290:	fb07 2000 	mla	r0, r7, r0, r2
 8016294:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8016298:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801629c:	f013 0620 	ands.w	r6, r3, #32
 80162a0:	d088      	beq.n	80161b4 <DrawLowSpectrum+0x2070>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80162a2:	f89a 6000 	ldrb.w	r6, [sl]
			if(((element[i] >> k) & 1) == 1) {
 80162a6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80162aa:	fb01 b606 	mla	r6, r1, r6, fp
 80162ae:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80162b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80162b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80162ba:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80162be:	4410      	add	r0, r2
 80162c0:	f826 4010 	strh.w	r4, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80162c4:	d088      	beq.n	80161d8 <DrawLowSpectrum+0x2094>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80162c6:	f89a 0000 	ldrb.w	r0, [sl]
	while(i < width) {
 80162ca:	45ae      	cmp	lr, r5
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80162cc:	fb01 b000 	mla	r0, r1, r0, fp
 80162d0:	e9d0 0317 	ldrd	r0, r3, [r0, #92]	; 0x5c
 80162d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80162d8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
	while(i < width) {
 80162dc:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80162e0:	f203 13bd 	addw	r3, r3, #445	; 0x1bd
 80162e4:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	while(i < width) {
 80162e8:	d188      	bne.n	80161fc <DrawLowSpectrum+0x20b8>
		if(percent / 10000 > 0) {
 80162ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80162ee:	9a03      	ldr	r2, [sp, #12]
 80162f0:	429a      	cmp	r2, r3
 80162f2:	f201 8191 	bhi.w	8017618 <DrawLowSpectrum+0x34d4>
		if(percent / 1000 > 0) {
 80162f6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80162fa:	4613      	mov	r3, r2
 80162fc:	f081 819a 	bcs.w	8017634 <DrawLowSpectrum+0x34f0>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 8016300:	4c4b      	ldr	r4, [pc, #300]	; (8016430 <DrawLowSpectrum+0x22ec>)
 8016302:	fba4 3403 	umull	r3, r4, r4, r3
 8016306:	0964      	lsrs	r4, r4, #5
		DrawDigit(((percent / 100) % 100) % 10, 345, 186, 10, 0x00FFFFFF);
 8016308:	4b4a      	ldr	r3, [pc, #296]	; (8016434 <DrawLowSpectrum+0x22f0>)
 801630a:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 801630e:	f240 1159 	movw	r1, #345	; 0x159
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016312:	26cc      	movs	r6, #204	; 0xcc
		DrawDigit(((percent / 100) % 100) % 10, 345, 186, 10, 0x00FFFFFF);
 8016314:	fba3 2304 	umull	r2, r3, r3, r4
 8016318:	22ba      	movs	r2, #186	; 0xba
 801631a:	f8cd 8000 	str.w	r8, [sp]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801631e:	25cb      	movs	r5, #203	; 0xcb
		DrawDigit(((percent / 100) % 100) % 10, 345, 186, 10, 0x00FFFFFF);
 8016320:	08db      	lsrs	r3, r3, #3
 8016322:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016326:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 801632a:	b2d8      	uxtb	r0, r3
 801632c:	230a      	movs	r3, #10
 801632e:	f7fd fb31 	bl	8013994 <DrawDigit>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016332:	f89a 2000 	ldrb.w	r2, [sl]
 8016336:	2034      	movs	r0, #52	; 0x34
 8016338:	f64f 71ff 	movw	r1, #65535	; 0xffff
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 801633c:	9c03      	ldr	r4, [sp, #12]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801633e:	fb00 b202 	mla	r2, r0, r2, fp
 8016342:	e9d2 2317 	ldrd	r2, r3, [r2, #92]	; 0x5c
 8016346:	fb06 f303 	mul.w	r3, r6, r3
 801634a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801634e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8016352:	f89a 7000 	ldrb.w	r7, [sl]
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 8016356:	4b36      	ldr	r3, [pc, #216]	; (8016430 <DrawLowSpectrum+0x22ec>)
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016358:	fb00 b707 	mla	r7, r0, r7, fp
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 801635c:	fba3 c304 	umull	ip, r3, r3, r4
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016360:	e9d7 7217 	ldrd	r7, r2, [r7, #92]	; 0x5c
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 8016364:	095b      	lsrs	r3, r3, #5
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016366:	fb05 f202 	mul.w	r2, r5, r2
 801636a:	f502 72b2 	add.w	r2, r2, #356	; 0x164
 801636e:	f827 1012 	strh.w	r1, [r7, r2, lsl #1]
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 8016372:	2764      	movs	r7, #100	; 0x64
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016374:	f89a 2000 	ldrb.w	r2, [sl]
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 8016378:	fb07 4713 	mls	r7, r7, r3, r4
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801637c:	fb00 b202 	mla	r2, r0, r2, fp
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 8016380:	b2bf      	uxth	r7, r7
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016382:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8016384:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 8016386:	2f04      	cmp	r7, #4
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016388:	fb06 f303 	mul.w	r3, r6, r3
 801638c:	f203 1365 	addw	r3, r3, #357	; 0x165
 8016390:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8016394:	f89a 3000 	ldrb.w	r3, [sl]
 8016398:	fb00 b003 	mla	r0, r0, r3, fp
 801639c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801639e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 80163a0:	bf88      	it	hi
 80163a2:	2005      	movhi	r0, #5
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80163a4:	fb05 f303 	mul.w	r3, r5, r3
		else DrawDigit(0, 360, 186, 10, 0x00FFFFFF);
 80163a8:	bf98      	it	ls
 80163aa:	2000      	movls	r0, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80163ac:	f203 1365 	addw	r3, r3, #357	; 0x165
 80163b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 80163b4:	230a      	movs	r3, #10
 80163b6:	22ba      	movs	r2, #186	; 0xba
 80163b8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80163bc:	f8cd 8000 	str.w	r8, [sp]
		else DrawDigit(0, 360, 186, 10, 0x00FFFFFF);
 80163c0:	f7fd fae8 	bl	8013994 <DrawDigit>
 80163c4:	f7fe bb59 	b.w	8014a7a <DrawLowSpectrum+0x936>
		DrawDigit(bpm / 10000, 400, 176, 10, 0x00FFFFFF);
 80163c8:	481b      	ldr	r0, [pc, #108]	; (8016438 <DrawLowSpectrum+0x22f4>)
 80163ca:	22b0      	movs	r2, #176	; 0xb0
 80163cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80163d0:	fba0 3004 	umull	r3, r0, r0, r4
 80163d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80163d8:	0b40      	lsrs	r0, r0, #13
 80163da:	9300      	str	r3, [sp, #0]
 80163dc:	230a      	movs	r3, #10
 80163de:	f7fd fad9 	bl	8013994 <DrawDigit>
		DrawDigit(((bpm / 100) % 100) / 10, 415, 176, 10, 0x00FFFFFF);
 80163e2:	4a13      	ldr	r2, [pc, #76]	; (8016430 <DrawLowSpectrum+0x22ec>)
 80163e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80163e8:	2064      	movs	r0, #100	; 0x64
 80163ea:	4912      	ldr	r1, [pc, #72]	; (8016434 <DrawLowSpectrum+0x22f0>)
 80163ec:	9300      	str	r3, [sp, #0]
 80163ee:	fba2 5304 	umull	r5, r3, r2, r4
 80163f2:	095b      	lsrs	r3, r3, #5
 80163f4:	fba2 5203 	umull	r5, r2, r2, r3
 80163f8:	0956      	lsrs	r6, r2, #5
 80163fa:	22b0      	movs	r2, #176	; 0xb0
 80163fc:	fb00 3316 	mls	r3, r0, r6, r3
 8016400:	b29e      	uxth	r6, r3
 8016402:	fba1 3106 	umull	r3, r1, r1, r6
 8016406:	230a      	movs	r3, #10
 8016408:	f3c1 00c7 	ubfx	r0, r1, #3, #8
 801640c:	f240 119f 	movw	r1, #415	; 0x19f
 8016410:	f7fd fac0 	bl	8013994 <DrawDigit>
 8016414:	f7fe bfed 	b.w	80153f2 <DrawLowSpectrum+0x12ae>
 8016418:	4d08      	ldr	r5, [pc, #32]	; (801643c <DrawLowSpectrum+0x22f8>)
	if(display.mastertempomode == 1) {
 801641a:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801641c:	2134      	movs	r1, #52	; 0x34
 801641e:	f04f 0eb7 	mov.w	lr, #183	; 0xb7
 8016422:	f105 0844 	add.w	r8, r5, #68	; 0x44
 8016426:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 801642a:	f04f 09b6 	mov.w	r9, #182	; 0xb6
 801642e:	e0c9      	b.n	80165c4 <DrawLowSpectrum+0x2480>
 8016430:	51eb851f 	.word	0x51eb851f
 8016434:	cccccccd 	.word	0xcccccccd
 8016438:	d1b71759 	.word	0xd1b71759
 801643c:	080243c6 	.word	0x080243c6
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016440:	f89a 7000 	ldrb.w	r7, [sl]
 8016444:	fb01 b707 	mla	r7, r1, r7, fp
 8016448:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 801644c:	fb0e 2404 	mla	r4, lr, r4, r2
 8016450:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016454:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016458:	f013 0602 	ands.w	r6, r3, #2
 801645c:	f040 80c8 	bne.w	80165f0 <DrawLowSpectrum+0x24ac>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016460:	f89a 7000 	ldrb.w	r7, [sl]
 8016464:	fb01 b707 	mla	r7, r1, r7, fp
 8016468:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 801646c:	fb09 2404 	mla	r4, r9, r4, r2
 8016470:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016474:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016478:	f013 0604 	ands.w	r6, r3, #4
 801647c:	f040 80c8 	bne.w	8016610 <DrawLowSpectrum+0x24cc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016480:	f89a 7000 	ldrb.w	r7, [sl]
 8016484:	f04f 0cb5 	mov.w	ip, #181	; 0xb5
 8016488:	fb01 b707 	mla	r7, r1, r7, fp
 801648c:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016490:	fb0c 2404 	mla	r4, ip, r4, r2
 8016494:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016498:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801649c:	f013 0608 	ands.w	r6, r3, #8
 80164a0:	f040 80c7 	bne.w	8016632 <DrawLowSpectrum+0x24ee>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80164a4:	f89a 7000 	ldrb.w	r7, [sl]
 80164a8:	f04f 0cb4 	mov.w	ip, #180	; 0xb4
 80164ac:	fb01 b707 	mla	r7, r1, r7, fp
 80164b0:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 80164b4:	fb0c 2404 	mla	r4, ip, r4, r2
 80164b8:	f204 1463 	addw	r4, r4, #355	; 0x163
 80164bc:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80164c0:	f013 0610 	ands.w	r6, r3, #16
 80164c4:	f040 80c6 	bne.w	8016654 <DrawLowSpectrum+0x2510>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80164c8:	f89a 7000 	ldrb.w	r7, [sl]
 80164cc:	f04f 0cb3 	mov.w	ip, #179	; 0xb3
 80164d0:	fb01 b707 	mla	r7, r1, r7, fp
 80164d4:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 80164d8:	fb0c 2404 	mla	r4, ip, r4, r2
 80164dc:	f204 1463 	addw	r4, r4, #355	; 0x163
 80164e0:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80164e4:	f013 0620 	ands.w	r6, r3, #32
 80164e8:	f040 80c5 	bne.w	8016676 <DrawLowSpectrum+0x2532>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80164ec:	f89a 7000 	ldrb.w	r7, [sl]
 80164f0:	f04f 0cb2 	mov.w	ip, #178	; 0xb2
 80164f4:	fb01 b707 	mla	r7, r1, r7, fp
 80164f8:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 80164fc:	fb0c 2404 	mla	r4, ip, r4, r2
 8016500:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016504:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016508:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 801650c:	f040 80c4 	bne.w	8016698 <DrawLowSpectrum+0x2554>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016510:	f89a 7000 	ldrb.w	r7, [sl]
 8016514:	f04f 0cb1 	mov.w	ip, #177	; 0xb1
 8016518:	fb01 b707 	mla	r7, r1, r7, fp
 801651c:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016520:	fb0c 2404 	mla	r4, ip, r4, r2
 8016524:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016528:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801652c:	f013 0680 	ands.w	r6, r3, #128	; 0x80
 8016530:	f040 80c3 	bne.w	80166ba <DrawLowSpectrum+0x2576>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016534:	f89a 7000 	ldrb.w	r7, [sl]
 8016538:	f04f 0cb0 	mov.w	ip, #176	; 0xb0
 801653c:	fb01 b707 	mla	r7, r1, r7, fp
 8016540:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8016542:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 8016544:	fb0c 2404 	mla	r4, ip, r4, r2
 8016548:	f204 1463 	addw	r4, r4, #355	; 0x163
 801654c:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016550:	f413 7680 	ands.w	r6, r3, #256	; 0x100
 8016554:	f040 80c2 	bne.w	80166dc <DrawLowSpectrum+0x2598>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016558:	f89a 7000 	ldrb.w	r7, [sl]
 801655c:	f04f 0caf 	mov.w	ip, #175	; 0xaf
 8016560:	fb01 b707 	mla	r7, r1, r7, fp
 8016564:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8016566:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 8016568:	fb0c 2404 	mla	r4, ip, r4, r2
 801656c:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016570:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016574:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 8016578:	f040 80c1 	bne.w	80166fe <DrawLowSpectrum+0x25ba>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801657c:	f89a 7000 	ldrb.w	r7, [sl]
 8016580:	f04f 0cae 	mov.w	ip, #174	; 0xae
			if(((element[i] >> k) & 1) == 1) {
 8016584:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016588:	fb01 b707 	mla	r7, r1, r7, fp
 801658c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801658e:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 8016590:	fb0c 2404 	mla	r4, ip, r4, r2
 8016594:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016598:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801659c:	f040 80c0 	bne.w	8016720 <DrawLowSpectrum+0x25dc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80165a0:	f89a 6000 	ldrb.w	r6, [sl]
 80165a4:	27ad      	movs	r7, #173	; 0xad
 80165a6:	fb01 b606 	mla	r6, r1, r6, fp
 80165aa:	6e34      	ldr	r4, [r6, #96]	; 0x60
 80165ac:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 80165ae:	fb07 2404 	mla	r4, r7, r4, r2
 80165b2:	f204 1463 	addw	r4, r4, #355	; 0x163
 80165b6:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 80165ba:	45a8      	cmp	r8, r5
 80165bc:	f102 0201 	add.w	r2, r2, #1
 80165c0:	f43e abc2 	beq.w	8014d48 <DrawLowSpectrum+0xc04>
			if(((element[i] >> k) & 1) == 1) {
 80165c4:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 80165c8:	f013 0601 	ands.w	r6, r3, #1
 80165cc:	f43f af38 	beq.w	8016440 <DrawLowSpectrum+0x22fc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80165d0:	f89a 6000 	ldrb.w	r6, [sl]
 80165d4:	fb01 b606 	mla	r6, r1, r6, fp
 80165d8:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80165dc:	fb0e 2404 	mla	r4, lr, r4, r2
 80165e0:	f204 1463 	addw	r4, r4, #355	; 0x163
 80165e4:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80165e8:	f013 0602 	ands.w	r6, r3, #2
 80165ec:	f43f af38 	beq.w	8016460 <DrawLowSpectrum+0x231c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80165f0:	f89a 6000 	ldrb.w	r6, [sl]
 80165f4:	fb01 b606 	mla	r6, r1, r6, fp
 80165f8:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80165fc:	fb09 2404 	mla	r4, r9, r4, r2
 8016600:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016604:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016608:	f013 0604 	ands.w	r6, r3, #4
 801660c:	f43f af38 	beq.w	8016480 <DrawLowSpectrum+0x233c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016610:	f89a 6000 	ldrb.w	r6, [sl]
 8016614:	27b5      	movs	r7, #181	; 0xb5
 8016616:	fb01 b606 	mla	r6, r1, r6, fp
 801661a:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 801661e:	fb07 2404 	mla	r4, r7, r4, r2
 8016622:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016626:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801662a:	f013 0608 	ands.w	r6, r3, #8
 801662e:	f43f af39 	beq.w	80164a4 <DrawLowSpectrum+0x2360>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016632:	f89a 6000 	ldrb.w	r6, [sl]
 8016636:	27b4      	movs	r7, #180	; 0xb4
 8016638:	fb01 b606 	mla	r6, r1, r6, fp
 801663c:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016640:	fb07 2404 	mla	r4, r7, r4, r2
 8016644:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016648:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801664c:	f013 0610 	ands.w	r6, r3, #16
 8016650:	f43f af3a 	beq.w	80164c8 <DrawLowSpectrum+0x2384>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016654:	f89a 6000 	ldrb.w	r6, [sl]
 8016658:	27b3      	movs	r7, #179	; 0xb3
 801665a:	fb01 b606 	mla	r6, r1, r6, fp
 801665e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016662:	fb07 2404 	mla	r4, r7, r4, r2
 8016666:	f204 1463 	addw	r4, r4, #355	; 0x163
 801666a:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801666e:	f013 0620 	ands.w	r6, r3, #32
 8016672:	f43f af3b 	beq.w	80164ec <DrawLowSpectrum+0x23a8>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016676:	f89a 6000 	ldrb.w	r6, [sl]
 801667a:	27b2      	movs	r7, #178	; 0xb2
 801667c:	fb01 b606 	mla	r6, r1, r6, fp
 8016680:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016684:	fb07 2404 	mla	r4, r7, r4, r2
 8016688:	f204 1463 	addw	r4, r4, #355	; 0x163
 801668c:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016690:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 8016694:	f43f af3c 	beq.w	8016510 <DrawLowSpectrum+0x23cc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016698:	f89a 6000 	ldrb.w	r6, [sl]
 801669c:	27b1      	movs	r7, #177	; 0xb1
 801669e:	fb01 b606 	mla	r6, r1, r6, fp
 80166a2:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80166a6:	fb07 2404 	mla	r4, r7, r4, r2
 80166aa:	f204 1463 	addw	r4, r4, #355	; 0x163
 80166ae:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80166b2:	f013 0680 	ands.w	r6, r3, #128	; 0x80
 80166b6:	f43f af3d 	beq.w	8016534 <DrawLowSpectrum+0x23f0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80166ba:	f89a 6000 	ldrb.w	r6, [sl]
 80166be:	27b0      	movs	r7, #176	; 0xb0
 80166c0:	fb01 b606 	mla	r6, r1, r6, fp
 80166c4:	6e34      	ldr	r4, [r6, #96]	; 0x60
 80166c6:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 80166c8:	fb07 2404 	mla	r4, r7, r4, r2
 80166cc:	f204 1463 	addw	r4, r4, #355	; 0x163
 80166d0:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80166d4:	f413 7680 	ands.w	r6, r3, #256	; 0x100
 80166d8:	f43f af3e 	beq.w	8016558 <DrawLowSpectrum+0x2414>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80166dc:	f89a 6000 	ldrb.w	r6, [sl]
 80166e0:	27af      	movs	r7, #175	; 0xaf
 80166e2:	fb01 b606 	mla	r6, r1, r6, fp
 80166e6:	6e34      	ldr	r4, [r6, #96]	; 0x60
 80166e8:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 80166ea:	fb07 2404 	mla	r4, r7, r4, r2
 80166ee:	f204 1463 	addw	r4, r4, #355	; 0x163
 80166f2:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80166f6:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 80166fa:	f43f af3f 	beq.w	801657c <DrawLowSpectrum+0x2438>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80166fe:	f89a 6000 	ldrb.w	r6, [sl]
 8016702:	27ae      	movs	r7, #174	; 0xae
			if(((element[i] >> k) & 1) == 1) {
 8016704:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016708:	fb01 b606 	mla	r6, r1, r6, fp
 801670c:	6e34      	ldr	r4, [r6, #96]	; 0x60
 801670e:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 8016710:	fb07 2404 	mla	r4, r7, r4, r2
 8016714:	f204 1463 	addw	r4, r4, #355	; 0x163
 8016718:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801671c:	f43f af40 	beq.w	80165a0 <DrawLowSpectrum+0x245c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016720:	f89a 4000 	ldrb.w	r4, [sl]
 8016724:	26ad      	movs	r6, #173	; 0xad
 8016726:	fb01 b404 	mla	r4, r1, r4, fp
 801672a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801672c:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 801672e:	fb06 2303 	mla	r3, r6, r3, r2
 8016732:	f203 1363 	addw	r3, r3, #355	; 0x163
 8016736:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
 801673a:	e73e      	b.n	80165ba <DrawLowSpectrum+0x2476>
 801673c:	4859      	ldr	r0, [pc, #356]	; (80168a4 <DrawLowSpectrum+0x2760>)
	if(display.quantize == 1) {
 801673e:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016740:	2134      	movs	r1, #52	; 0x34
 8016742:	f04f 0cb2 	mov.w	ip, #178	; 0xb2
 8016746:	f100 0e60 	add.w	lr, r0, #96	; 0x60
 801674a:	f44f 4578 	mov.w	r5, #63488	; 0xf800
 801674e:	f04f 08b1 	mov.w	r8, #177	; 0xb1
 8016752:	f04f 09b0 	mov.w	r9, #176	; 0xb0
 8016756:	e04d      	b.n	80167f4 <DrawLowSpectrum+0x26b0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016758:	f89a 7000 	ldrb.w	r7, [sl]
 801675c:	fb01 b707 	mla	r7, r1, r7, fp
 8016760:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016764:	fb0c 2404 	mla	r4, ip, r4, r2
 8016768:	34c8      	adds	r4, #200	; 0xc8
 801676a:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801676e:	f013 0602 	ands.w	r6, r3, #2
 8016772:	d152      	bne.n	801681a <DrawLowSpectrum+0x26d6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016774:	f89a 7000 	ldrb.w	r7, [sl]
 8016778:	fb01 b707 	mla	r7, r1, r7, fp
 801677c:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016780:	fb08 2404 	mla	r4, r8, r4, r2
 8016784:	34c8      	adds	r4, #200	; 0xc8
 8016786:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801678a:	f013 0604 	ands.w	r6, r3, #4
 801678e:	d152      	bne.n	8016836 <DrawLowSpectrum+0x26f2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016790:	f89a 7000 	ldrb.w	r7, [sl]
 8016794:	fb01 b707 	mla	r7, r1, r7, fp
 8016798:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 801679c:	fb09 2404 	mla	r4, r9, r4, r2
 80167a0:	34c8      	adds	r4, #200	; 0xc8
 80167a2:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80167a6:	f013 0608 	ands.w	r6, r3, #8
 80167aa:	d152      	bne.n	8016852 <DrawLowSpectrum+0x270e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80167ac:	f89a 7000 	ldrb.w	r7, [sl]
			if(((element[i] >> k) & 1) == 1) {
 80167b0:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80167b4:	fb01 b707 	mla	r7, r1, r7, fp
 80167b8:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 80167bc:	9703      	str	r7, [sp, #12]
 80167be:	f04f 07af 	mov.w	r7, #175	; 0xaf
 80167c2:	fb07 2404 	mla	r4, r7, r4, r2
 80167c6:	9f03      	ldr	r7, [sp, #12]
 80167c8:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80167cc:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80167d0:	d14f      	bne.n	8016872 <DrawLowSpectrum+0x272e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80167d2:	f89a 6000 	ldrb.w	r6, [sl]
 80167d6:	27ae      	movs	r7, #174	; 0xae
 80167d8:	fb01 b606 	mla	r6, r1, r6, fp
 80167dc:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80167e0:	fb07 2404 	mla	r4, r7, r4, r2
 80167e4:	34c8      	adds	r4, #200	; 0xc8
 80167e6:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 80167ea:	4586      	cmp	lr, r0
 80167ec:	f102 0201 	add.w	r2, r2, #1
 80167f0:	f43e aaa5 	beq.w	8014d3e <DrawLowSpectrum+0xbfa>
			if(((element[i] >> k) & 1) == 1) {
 80167f4:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80167f8:	f013 0601 	ands.w	r6, r3, #1
 80167fc:	d0ac      	beq.n	8016758 <DrawLowSpectrum+0x2614>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80167fe:	f89a 6000 	ldrb.w	r6, [sl]
 8016802:	fb01 b606 	mla	r6, r1, r6, fp
 8016806:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 801680a:	fb0c 2404 	mla	r4, ip, r4, r2
 801680e:	34c8      	adds	r4, #200	; 0xc8
 8016810:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016814:	f013 0602 	ands.w	r6, r3, #2
 8016818:	d0ac      	beq.n	8016774 <DrawLowSpectrum+0x2630>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801681a:	f89a 6000 	ldrb.w	r6, [sl]
 801681e:	fb01 b606 	mla	r6, r1, r6, fp
 8016822:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016826:	fb08 2404 	mla	r4, r8, r4, r2
 801682a:	34c8      	adds	r4, #200	; 0xc8
 801682c:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016830:	f013 0604 	ands.w	r6, r3, #4
 8016834:	d0ac      	beq.n	8016790 <DrawLowSpectrum+0x264c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016836:	f89a 6000 	ldrb.w	r6, [sl]
 801683a:	fb01 b606 	mla	r6, r1, r6, fp
 801683e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016842:	fb09 2404 	mla	r4, r9, r4, r2
 8016846:	34c8      	adds	r4, #200	; 0xc8
 8016848:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801684c:	f013 0608 	ands.w	r6, r3, #8
 8016850:	d0ac      	beq.n	80167ac <DrawLowSpectrum+0x2668>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016852:	f89a 6000 	ldrb.w	r6, [sl]
 8016856:	27af      	movs	r7, #175	; 0xaf
			if(((element[i] >> k) & 1) == 1) {
 8016858:	f013 0310 	ands.w	r3, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801685c:	fb01 b606 	mla	r6, r1, r6, fp
 8016860:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016864:	fb07 2404 	mla	r4, r7, r4, r2
 8016868:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801686c:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016870:	d0af      	beq.n	80167d2 <DrawLowSpectrum+0x268e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016872:	f89a 4000 	ldrb.w	r4, [sl]
 8016876:	26ae      	movs	r6, #174	; 0xae
 8016878:	fb01 b404 	mla	r4, r1, r4, fp
 801687c:	e9d4 4317 	ldrd	r4, r3, [r4, #92]	; 0x5c
 8016880:	fb06 2303 	mla	r3, r6, r3, r2
 8016884:	33c8      	adds	r3, #200	; 0xc8
 8016886:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801688a:	e7ae      	b.n	80167ea <DrawLowSpectrum+0x26a6>
 801688c:	4d06      	ldr	r5, [pc, #24]	; (80168a8 <DrawLowSpectrum+0x2764>)
	if(display.cuemode == 1) {
 801688e:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016890:	2134      	movs	r1, #52	; 0x34
 8016892:	f04f 0ecf 	mov.w	lr, #207	; 0xcf
 8016896:	f105 0844 	add.w	r8, r5, #68	; 0x44
 801689a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 801689e:	f04f 09ce 	mov.w	r9, #206	; 0xce
 80168a2:	e0bb      	b.n	8016a1c <DrawLowSpectrum+0x28d8>
 80168a4:	080245ba 	.word	0x080245ba
 80168a8:	080239f6 	.word	0x080239f6
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80168ac:	f89a 7000 	ldrb.w	r7, [sl]
 80168b0:	fb01 b707 	mla	r7, r1, r7, fp
 80168b4:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 80168b8:	fb0e 2404 	mla	r4, lr, r4, r2
 80168bc:	3456      	adds	r4, #86	; 0x56
 80168be:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80168c2:	f013 0602 	ands.w	r6, r3, #2
 80168c6:	f040 80be 	bne.w	8016a46 <DrawLowSpectrum+0x2902>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80168ca:	f89a 7000 	ldrb.w	r7, [sl]
 80168ce:	fb01 b707 	mla	r7, r1, r7, fp
 80168d2:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 80168d6:	fb09 2404 	mla	r4, r9, r4, r2
 80168da:	3456      	adds	r4, #86	; 0x56
 80168dc:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80168e0:	f013 0604 	ands.w	r6, r3, #4
 80168e4:	f040 80be 	bne.w	8016a64 <DrawLowSpectrum+0x2920>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80168e8:	f89a 7000 	ldrb.w	r7, [sl]
 80168ec:	f04f 0ccd 	mov.w	ip, #205	; 0xcd
 80168f0:	fb01 b707 	mla	r7, r1, r7, fp
 80168f4:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 80168f8:	fb0c 2404 	mla	r4, ip, r4, r2
 80168fc:	3456      	adds	r4, #86	; 0x56
 80168fe:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016902:	f013 0608 	ands.w	r6, r3, #8
 8016906:	f040 80bd 	bne.w	8016a84 <DrawLowSpectrum+0x2940>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801690a:	f89a 7000 	ldrb.w	r7, [sl]
 801690e:	f04f 0ccc 	mov.w	ip, #204	; 0xcc
 8016912:	fb01 b707 	mla	r7, r1, r7, fp
 8016916:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 801691a:	fb0c 2404 	mla	r4, ip, r4, r2
 801691e:	3456      	adds	r4, #86	; 0x56
 8016920:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016924:	f013 0610 	ands.w	r6, r3, #16
 8016928:	f040 80bc 	bne.w	8016aa4 <DrawLowSpectrum+0x2960>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801692c:	f89a 7000 	ldrb.w	r7, [sl]
 8016930:	f04f 0ccb 	mov.w	ip, #203	; 0xcb
 8016934:	fb01 b707 	mla	r7, r1, r7, fp
 8016938:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 801693c:	fb0c 2404 	mla	r4, ip, r4, r2
 8016940:	3456      	adds	r4, #86	; 0x56
 8016942:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016946:	f013 0620 	ands.w	r6, r3, #32
 801694a:	f040 80bb 	bne.w	8016ac4 <DrawLowSpectrum+0x2980>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801694e:	f89a 7000 	ldrb.w	r7, [sl]
 8016952:	f04f 0cca 	mov.w	ip, #202	; 0xca
 8016956:	fb01 b707 	mla	r7, r1, r7, fp
 801695a:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 801695e:	fb0c 2404 	mla	r4, ip, r4, r2
 8016962:	3456      	adds	r4, #86	; 0x56
 8016964:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016968:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 801696c:	f040 80ba 	bne.w	8016ae4 <DrawLowSpectrum+0x29a0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016970:	f89a 7000 	ldrb.w	r7, [sl]
 8016974:	f04f 0cc9 	mov.w	ip, #201	; 0xc9
 8016978:	fb01 b707 	mla	r7, r1, r7, fp
 801697c:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016980:	fb0c 2404 	mla	r4, ip, r4, r2
 8016984:	3456      	adds	r4, #86	; 0x56
 8016986:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801698a:	f013 0680 	ands.w	r6, r3, #128	; 0x80
 801698e:	f040 80b9 	bne.w	8016b04 <DrawLowSpectrum+0x29c0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016992:	f89a 7000 	ldrb.w	r7, [sl]
 8016996:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
 801699a:	fb01 b707 	mla	r7, r1, r7, fp
 801699e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80169a0:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 80169a2:	fb0c 2404 	mla	r4, ip, r4, r2
 80169a6:	3456      	adds	r4, #86	; 0x56
 80169a8:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80169ac:	f413 7680 	ands.w	r6, r3, #256	; 0x100
 80169b0:	f040 80b8 	bne.w	8016b24 <DrawLowSpectrum+0x29e0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80169b4:	f89a 7000 	ldrb.w	r7, [sl]
 80169b8:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
 80169bc:	fb01 b707 	mla	r7, r1, r7, fp
 80169c0:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80169c2:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 80169c4:	fb0c 2404 	mla	r4, ip, r4, r2
 80169c8:	3456      	adds	r4, #86	; 0x56
 80169ca:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80169ce:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 80169d2:	f040 80b7 	bne.w	8016b44 <DrawLowSpectrum+0x2a00>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80169d6:	f89a 7000 	ldrb.w	r7, [sl]
 80169da:	f04f 0cc6 	mov.w	ip, #198	; 0xc6
			if(((element[i] >> k) & 1) == 1) {
 80169de:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80169e2:	fb01 b707 	mla	r7, r1, r7, fp
 80169e6:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80169e8:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 80169ea:	fb0c 2404 	mla	r4, ip, r4, r2
 80169ee:	f104 0456 	add.w	r4, r4, #86	; 0x56
 80169f2:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80169f6:	f040 80b6 	bne.w	8016b66 <DrawLowSpectrum+0x2a22>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80169fa:	f89a 6000 	ldrb.w	r6, [sl]
 80169fe:	27c5      	movs	r7, #197	; 0xc5
 8016a00:	fb01 b606 	mla	r6, r1, r6, fp
 8016a04:	6e34      	ldr	r4, [r6, #96]	; 0x60
 8016a06:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 8016a08:	fb07 2404 	mla	r4, r7, r4, r2
 8016a0c:	3456      	adds	r4, #86	; 0x56
 8016a0e:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 8016a12:	45a8      	cmp	r8, r5
 8016a14:	f102 0201 	add.w	r2, r2, #1
 8016a18:	f43e a98c 	beq.w	8014d34 <DrawLowSpectrum+0xbf0>
			if(((element[i] >> k) & 1) == 1) {
 8016a1c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 8016a20:	f013 0601 	ands.w	r6, r3, #1
 8016a24:	f43f af42 	beq.w	80168ac <DrawLowSpectrum+0x2768>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016a28:	f89a 6000 	ldrb.w	r6, [sl]
 8016a2c:	fb01 b606 	mla	r6, r1, r6, fp
 8016a30:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016a34:	fb0e 2404 	mla	r4, lr, r4, r2
 8016a38:	3456      	adds	r4, #86	; 0x56
 8016a3a:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016a3e:	f013 0602 	ands.w	r6, r3, #2
 8016a42:	f43f af42 	beq.w	80168ca <DrawLowSpectrum+0x2786>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016a46:	f89a 6000 	ldrb.w	r6, [sl]
 8016a4a:	fb01 b606 	mla	r6, r1, r6, fp
 8016a4e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016a52:	fb09 2404 	mla	r4, r9, r4, r2
 8016a56:	3456      	adds	r4, #86	; 0x56
 8016a58:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016a5c:	f013 0604 	ands.w	r6, r3, #4
 8016a60:	f43f af42 	beq.w	80168e8 <DrawLowSpectrum+0x27a4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016a64:	f89a 6000 	ldrb.w	r6, [sl]
 8016a68:	27cd      	movs	r7, #205	; 0xcd
 8016a6a:	fb01 b606 	mla	r6, r1, r6, fp
 8016a6e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016a72:	fb07 2404 	mla	r4, r7, r4, r2
 8016a76:	3456      	adds	r4, #86	; 0x56
 8016a78:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016a7c:	f013 0608 	ands.w	r6, r3, #8
 8016a80:	f43f af43 	beq.w	801690a <DrawLowSpectrum+0x27c6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016a84:	f89a 6000 	ldrb.w	r6, [sl]
 8016a88:	27cc      	movs	r7, #204	; 0xcc
 8016a8a:	fb01 b606 	mla	r6, r1, r6, fp
 8016a8e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016a92:	fb07 2404 	mla	r4, r7, r4, r2
 8016a96:	3456      	adds	r4, #86	; 0x56
 8016a98:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016a9c:	f013 0610 	ands.w	r6, r3, #16
 8016aa0:	f43f af44 	beq.w	801692c <DrawLowSpectrum+0x27e8>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016aa4:	f89a 6000 	ldrb.w	r6, [sl]
 8016aa8:	27cb      	movs	r7, #203	; 0xcb
 8016aaa:	fb01 b606 	mla	r6, r1, r6, fp
 8016aae:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016ab2:	fb07 2404 	mla	r4, r7, r4, r2
 8016ab6:	3456      	adds	r4, #86	; 0x56
 8016ab8:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016abc:	f013 0620 	ands.w	r6, r3, #32
 8016ac0:	f43f af45 	beq.w	801694e <DrawLowSpectrum+0x280a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016ac4:	f89a 6000 	ldrb.w	r6, [sl]
 8016ac8:	27ca      	movs	r7, #202	; 0xca
 8016aca:	fb01 b606 	mla	r6, r1, r6, fp
 8016ace:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016ad2:	fb07 2404 	mla	r4, r7, r4, r2
 8016ad6:	3456      	adds	r4, #86	; 0x56
 8016ad8:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016adc:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 8016ae0:	f43f af46 	beq.w	8016970 <DrawLowSpectrum+0x282c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016ae4:	f89a 6000 	ldrb.w	r6, [sl]
 8016ae8:	27c9      	movs	r7, #201	; 0xc9
 8016aea:	fb01 b606 	mla	r6, r1, r6, fp
 8016aee:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016af2:	fb07 2404 	mla	r4, r7, r4, r2
 8016af6:	3456      	adds	r4, #86	; 0x56
 8016af8:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016afc:	f013 0680 	ands.w	r6, r3, #128	; 0x80
 8016b00:	f43f af47 	beq.w	8016992 <DrawLowSpectrum+0x284e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016b04:	f89a 6000 	ldrb.w	r6, [sl]
 8016b08:	27c8      	movs	r7, #200	; 0xc8
 8016b0a:	fb01 b606 	mla	r6, r1, r6, fp
 8016b0e:	6e34      	ldr	r4, [r6, #96]	; 0x60
 8016b10:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 8016b12:	fb07 2404 	mla	r4, r7, r4, r2
 8016b16:	3456      	adds	r4, #86	; 0x56
 8016b18:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016b1c:	f413 7680 	ands.w	r6, r3, #256	; 0x100
 8016b20:	f43f af48 	beq.w	80169b4 <DrawLowSpectrum+0x2870>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016b24:	f89a 6000 	ldrb.w	r6, [sl]
 8016b28:	27c7      	movs	r7, #199	; 0xc7
 8016b2a:	fb01 b606 	mla	r6, r1, r6, fp
 8016b2e:	6e34      	ldr	r4, [r6, #96]	; 0x60
 8016b30:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 8016b32:	fb07 2404 	mla	r4, r7, r4, r2
 8016b36:	3456      	adds	r4, #86	; 0x56
 8016b38:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016b3c:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 8016b40:	f43f af49 	beq.w	80169d6 <DrawLowSpectrum+0x2892>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016b44:	f89a 6000 	ldrb.w	r6, [sl]
 8016b48:	27c6      	movs	r7, #198	; 0xc6
			if(((element[i] >> k) & 1) == 1) {
 8016b4a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016b4e:	fb01 b606 	mla	r6, r1, r6, fp
 8016b52:	6e34      	ldr	r4, [r6, #96]	; 0x60
 8016b54:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 8016b56:	fb07 2404 	mla	r4, r7, r4, r2
 8016b5a:	f104 0456 	add.w	r4, r4, #86	; 0x56
 8016b5e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016b62:	f43f af4a 	beq.w	80169fa <DrawLowSpectrum+0x28b6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016b66:	f89a 4000 	ldrb.w	r4, [sl]
 8016b6a:	26c5      	movs	r6, #197	; 0xc5
 8016b6c:	fb01 b404 	mla	r4, r1, r4, fp
 8016b70:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8016b72:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8016b74:	fb06 2303 	mla	r3, r6, r3, r2
 8016b78:	3356      	adds	r3, #86	; 0x56
 8016b7a:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
 8016b7e:	e748      	b.n	8016a12 <DrawLowSpectrum+0x28ce>
 8016b80:	4d05      	ldr	r5, [pc, #20]	; (8016b98 <DrawLowSpectrum+0x2a54>)
	if(display.loop == 1) {
 8016b82:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016b84:	2134      	movs	r1, #52	; 0x34
 8016b86:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
 8016b8a:	f105 082c 	add.w	r8, r5, #44	; 0x2c
 8016b8e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8016b92:	f04f 09c6 	mov.w	r9, #198	; 0xc6
 8016b96:	e0c8      	b.n	8016d2a <DrawLowSpectrum+0x2be6>
 8016b98:	0802439a 	.word	0x0802439a
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016b9c:	f89a 7000 	ldrb.w	r7, [sl]
 8016ba0:	fb01 b707 	mla	r7, r1, r7, fp
 8016ba4:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016ba8:	fb0e 2404 	mla	r4, lr, r4, r2
 8016bac:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016bb0:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016bb4:	f013 0602 	ands.w	r6, r3, #2
 8016bb8:	f040 80cd 	bne.w	8016d56 <DrawLowSpectrum+0x2c12>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016bbc:	f89a 7000 	ldrb.w	r7, [sl]
 8016bc0:	fb01 b707 	mla	r7, r1, r7, fp
 8016bc4:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016bc8:	fb09 2404 	mla	r4, r9, r4, r2
 8016bcc:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016bd0:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016bd4:	f013 0604 	ands.w	r6, r3, #4
 8016bd8:	f040 80cd 	bne.w	8016d76 <DrawLowSpectrum+0x2c32>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016bdc:	f89a 7000 	ldrb.w	r7, [sl]
 8016be0:	f04f 0cc5 	mov.w	ip, #197	; 0xc5
 8016be4:	fb01 b707 	mla	r7, r1, r7, fp
 8016be8:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016bec:	fb0c 2404 	mla	r4, ip, r4, r2
 8016bf0:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016bf4:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016bf8:	f013 0608 	ands.w	r6, r3, #8
 8016bfc:	f040 80cc 	bne.w	8016d98 <DrawLowSpectrum+0x2c54>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016c00:	f89a 7000 	ldrb.w	r7, [sl]
 8016c04:	f04f 0cc4 	mov.w	ip, #196	; 0xc4
 8016c08:	fb01 b707 	mla	r7, r1, r7, fp
 8016c0c:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016c10:	fb0c 2404 	mla	r4, ip, r4, r2
 8016c14:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016c18:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016c1c:	f013 0610 	ands.w	r6, r3, #16
 8016c20:	f040 80cb 	bne.w	8016dba <DrawLowSpectrum+0x2c76>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016c24:	f89a 7000 	ldrb.w	r7, [sl]
 8016c28:	fb01 b707 	mla	r7, r1, r7, fp
 8016c2c:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016c30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016c34:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 8016c38:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016c3c:	4414      	add	r4, r2
 8016c3e:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016c42:	f013 0620 	ands.w	r6, r3, #32
 8016c46:	f040 80cb 	bne.w	8016de0 <DrawLowSpectrum+0x2c9c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016c4a:	f89a 7000 	ldrb.w	r7, [sl]
 8016c4e:	f04f 0cc2 	mov.w	ip, #194	; 0xc2
 8016c52:	fb01 b707 	mla	r7, r1, r7, fp
 8016c56:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016c5a:	fb0c 2404 	mla	r4, ip, r4, r2
 8016c5e:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016c62:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016c66:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 8016c6a:	f040 80ca 	bne.w	8016e02 <DrawLowSpectrum+0x2cbe>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016c6e:	f89a 7000 	ldrb.w	r7, [sl]
 8016c72:	fb01 b707 	mla	r7, r1, r7, fp
 8016c76:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016c7a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 8016c7e:	eb04 148c 	add.w	r4, r4, ip, lsl #6
 8016c82:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016c86:	4414      	add	r4, r2
 8016c88:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016c8c:	f013 0680 	ands.w	r6, r3, #128	; 0x80
 8016c90:	f040 80ca 	bne.w	8016e28 <DrawLowSpectrum+0x2ce4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016c94:	f89a 7000 	ldrb.w	r7, [sl]
 8016c98:	fb01 b707 	mla	r7, r1, r7, fp
 8016c9c:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016ca0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016ca4:	eb02 1484 	add.w	r4, r2, r4, lsl #6
 8016ca8:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016cac:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016cb0:	f413 7680 	ands.w	r6, r3, #256	; 0x100
 8016cb4:	f040 80ca 	bne.w	8016e4c <DrawLowSpectrum+0x2d08>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016cb8:	f89a 7000 	ldrb.w	r7, [sl]
 8016cbc:	fb01 b707 	mla	r7, r1, r7, fp
 8016cc0:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016cc4:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 8016cc8:	ebc4 148c 	rsb	r4, r4, ip, lsl #6
 8016ccc:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016cd0:	4414      	add	r4, r2
 8016cd2:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016cd6:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 8016cda:	f040 80ca 	bne.w	8016e72 <DrawLowSpectrum+0x2d2e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016cde:	f89a 7000 	ldrb.w	r7, [sl]
 8016ce2:	f04f 0cbe 	mov.w	ip, #190	; 0xbe
			if(((element[i] >> k) & 1) == 1) {
 8016ce6:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016cea:	fb01 b707 	mla	r7, r1, r7, fp
 8016cee:	e9d7 7417 	ldrd	r7, r4, [r7, #92]	; 0x5c
 8016cf2:	fb0c 2404 	mla	r4, ip, r4, r2
 8016cf6:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016cfa:	f827 6014 	strh.w	r6, [r7, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016cfe:	f040 80c9 	bne.w	8016e94 <DrawLowSpectrum+0x2d50>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016d02:	f89a 6000 	ldrb.w	r6, [sl]
	while(i < width) {
 8016d06:	45a8      	cmp	r8, r5
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016d08:	fb01 b606 	mla	r6, r1, r6, fp
 8016d0c:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016d10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016d14:	ebc4 1484 	rsb	r4, r4, r4, lsl #6
 8016d18:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016d1c:	4414      	add	r4, r2
	while(i < width) {
 8016d1e:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8016d22:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
	while(i < width) {
 8016d26:	f000 80c9 	beq.w	8016ebc <DrawLowSpectrum+0x2d78>
			if(((element[i] >> k) & 1) == 1) {
 8016d2a:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 8016d2e:	f013 0601 	ands.w	r6, r3, #1
 8016d32:	f43f af33 	beq.w	8016b9c <DrawLowSpectrum+0x2a58>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016d36:	f89a 6000 	ldrb.w	r6, [sl]
 8016d3a:	fb01 b606 	mla	r6, r1, r6, fp
 8016d3e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016d42:	fb0e 2404 	mla	r4, lr, r4, r2
 8016d46:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016d4a:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016d4e:	f013 0602 	ands.w	r6, r3, #2
 8016d52:	f43f af33 	beq.w	8016bbc <DrawLowSpectrum+0x2a78>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016d56:	f89a 6000 	ldrb.w	r6, [sl]
 8016d5a:	fb01 b606 	mla	r6, r1, r6, fp
 8016d5e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016d62:	fb09 2404 	mla	r4, r9, r4, r2
 8016d66:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016d6a:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016d6e:	f013 0604 	ands.w	r6, r3, #4
 8016d72:	f43f af33 	beq.w	8016bdc <DrawLowSpectrum+0x2a98>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016d76:	f89a 6000 	ldrb.w	r6, [sl]
 8016d7a:	27c5      	movs	r7, #197	; 0xc5
 8016d7c:	fb01 b606 	mla	r6, r1, r6, fp
 8016d80:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016d84:	fb07 2404 	mla	r4, r7, r4, r2
 8016d88:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016d8c:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016d90:	f013 0608 	ands.w	r6, r3, #8
 8016d94:	f43f af34 	beq.w	8016c00 <DrawLowSpectrum+0x2abc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016d98:	f89a 6000 	ldrb.w	r6, [sl]
 8016d9c:	27c4      	movs	r7, #196	; 0xc4
 8016d9e:	fb01 b606 	mla	r6, r1, r6, fp
 8016da2:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016da6:	fb07 2404 	mla	r4, r7, r4, r2
 8016daa:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016dae:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016db2:	f013 0610 	ands.w	r6, r3, #16
 8016db6:	f43f af35 	beq.w	8016c24 <DrawLowSpectrum+0x2ae0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016dba:	f89a 6000 	ldrb.w	r6, [sl]
 8016dbe:	fb01 b606 	mla	r6, r1, r6, fp
 8016dc2:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016dc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016dca:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 8016dce:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016dd2:	4414      	add	r4, r2
 8016dd4:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016dd8:	f013 0620 	ands.w	r6, r3, #32
 8016ddc:	f43f af35 	beq.w	8016c4a <DrawLowSpectrum+0x2b06>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016de0:	f89a 6000 	ldrb.w	r6, [sl]
 8016de4:	27c2      	movs	r7, #194	; 0xc2
 8016de6:	fb01 b606 	mla	r6, r1, r6, fp
 8016dea:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016dee:	fb07 2404 	mla	r4, r7, r4, r2
 8016df2:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016df6:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016dfa:	f013 0640 	ands.w	r6, r3, #64	; 0x40
 8016dfe:	f43f af36 	beq.w	8016c6e <DrawLowSpectrum+0x2b2a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016e02:	f89a 6000 	ldrb.w	r6, [sl]
 8016e06:	fb01 b606 	mla	r6, r1, r6, fp
 8016e0a:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016e0e:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8016e12:	eb04 1487 	add.w	r4, r4, r7, lsl #6
 8016e16:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016e1a:	4414      	add	r4, r2
 8016e1c:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016e20:	f013 0680 	ands.w	r6, r3, #128	; 0x80
 8016e24:	f43f af36 	beq.w	8016c94 <DrawLowSpectrum+0x2b50>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016e28:	f89a 6000 	ldrb.w	r6, [sl]
 8016e2c:	fb01 b606 	mla	r6, r1, r6, fp
 8016e30:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016e34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016e38:	eb02 1484 	add.w	r4, r2, r4, lsl #6
 8016e3c:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016e40:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016e44:	f413 7680 	ands.w	r6, r3, #256	; 0x100
 8016e48:	f43f af36 	beq.w	8016cb8 <DrawLowSpectrum+0x2b74>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016e4c:	f89a 6000 	ldrb.w	r6, [sl]
 8016e50:	fb01 b606 	mla	r6, r1, r6, fp
 8016e54:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016e58:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8016e5c:	ebc4 1487 	rsb	r4, r4, r7, lsl #6
 8016e60:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016e64:	4414      	add	r4, r2
 8016e66:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016e6a:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 8016e6e:	f43f af36 	beq.w	8016cde <DrawLowSpectrum+0x2b9a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016e72:	f89a 6000 	ldrb.w	r6, [sl]
 8016e76:	27be      	movs	r7, #190	; 0xbe
			if(((element[i] >> k) & 1) == 1) {
 8016e78:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016e7c:	fb01 b606 	mla	r6, r1, r6, fp
 8016e80:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8016e84:	fb07 2404 	mla	r4, r7, r4, r2
 8016e88:	f504 7487 	add.w	r4, r4, #270	; 0x10e
 8016e8c:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8016e90:	f43f af37 	beq.w	8016d02 <DrawLowSpectrum+0x2bbe>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016e94:	f89a 4000 	ldrb.w	r4, [sl]
	while(i < width) {
 8016e98:	45a8      	cmp	r8, r5
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016e9a:	fb01 b404 	mla	r4, r1, r4, fp
 8016e9e:	e9d4 4317 	ldrd	r4, r3, [r4, #92]	; 0x5c
 8016ea2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016ea6:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8016eaa:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8016eae:	4413      	add	r3, r2
	while(i < width) {
 8016eb0:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016eb4:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
	while(i < width) {
 8016eb8:	f47f af37 	bne.w	8016d2a <DrawLowSpectrum+0x2be6>
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8016ebc:	4b4c      	ldr	r3, [pc, #304]	; (8016ff0 <DrawLowSpectrum+0x2eac>)
		VLine(40+start_pos, 220, 40, 0x0000FF00);
 8016ebe:	21dc      	movs	r1, #220	; 0xdc
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8016ec0:	2634      	movs	r6, #52	; 0x34
 8016ec2:	f04f 09dc 	mov.w	r9, #220	; 0xdc
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8016ec6:	f8d3 2a88 	ldr.w	r2, [r3, #2696]	; 0xa88
				(float)display.loopstart/rekordbox.spectrum_size;
 8016eca:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8016ece:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
				(float)display.loopstart/rekordbox.spectrum_size;
 8016ed2:	ed93 6a00 	vldr	s12, [r3]
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8016ed6:	ee07 2a90 	vmov	s15, r2
				(float)display.loopstart/rekordbox.spectrum_size;
 8016eda:	4b46      	ldr	r3, [pc, #280]	; (8016ff4 <DrawLowSpectrum+0x2eb0>)
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8016edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ee0:	9203      	str	r2, [sp, #12]
				(float)display.loopstart/rekordbox.spectrum_size;
 8016ee2:	edd3 6a02 	vldr	s13, [r3, #8]
 8016ee6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
				(float)display.loopend/rekordbox.spectrum_size;
 8016eea:	ed93 7a03 	vldr	s14, [r3, #12]
		VLine(40+start_pos, 220, 40, 0x0000FF00);
 8016eee:	2228      	movs	r2, #40	; 0x28
				(float)display.loopstart/rekordbox.spectrum_size;
 8016ef0:	eef8 6a66 	vcvt.f32.u32	s13, s13
				(float)display.loopend/rekordbox.spectrum_size;
 8016ef4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8016ef8:	ee66 6aa7 	vmul.f32	s13, s13, s15
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8016efc:	ee27 7a27 	vmul.f32	s14, s14, s15
				(float)display.loopstart/rekordbox.spectrum_size;
 8016f00:	eec6 7a86 	vdiv.f32	s15, s13, s12
				(float)display.loopend/rekordbox.spectrum_size;
 8016f04:	eec7 6a06 	vdiv.f32	s13, s14, s12
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8016f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f0c:	ee17 3a90 	vmov	r3, s15
 8016f10:	b29d      	uxth	r5, r3
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8016f12:	eebc 7ae6 	vcvt.u32.f32	s14, s13
		VLine(40+start_pos, 220, 40, 0x0000FF00);
 8016f16:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8016f1a:	18a8      	adds	r0, r5, r2
		Pixel(41+start_pos, 220, 0x0000FF00);
 8016f1c:	3529      	adds	r5, #41	; 0x29
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8016f1e:	ee17 4a10 	vmov	r4, s14
		VLine(40+start_pos, 220, 40, 0x0000FF00);
 8016f22:	b280      	uxth	r0, r0
 8016f24:	f7fc fcaa 	bl	801387c <VLine>
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8016f28:	f89a 3000 	ldrb.w	r3, [sl]
 8016f2c:	b2ad      	uxth	r5, r5
 8016f2e:	fb06 b303 	mla	r3, r6, r3, fp
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 8016f32:	b2a4      	uxth	r4, r4
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8016f34:	e9d3 1217 	ldrd	r1, r2, [r3, #92]	; 0x5c
		VLine(40+end_pos, 220, 40, 0x0000FF00);
 8016f38:	f104 0028 	add.w	r0, r4, #40	; 0x28
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8016f3c:	fb09 5302 	mla	r3, r9, r2, r5
		VLine(40+end_pos, 220, 40, 0x0000FF00);
 8016f40:	2228      	movs	r2, #40	; 0x28
 8016f42:	b280      	uxth	r0, r0
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8016f44:	f821 7013 	strh.w	r7, [r1, r3, lsl #1]
		VLine(40+end_pos, 220, 40, 0x0000FF00);
 8016f48:	f44f 437f 	mov.w	r3, #65280	; 0xff00
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8016f4c:	f89a e000 	ldrb.w	lr, [sl]
		VLine(40+end_pos, 220, 40, 0x0000FF00);
 8016f50:	4649      	mov	r1, r9
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8016f52:	fb06 be0e 	mla	lr, r6, lr, fp
 8016f56:	e9de ec17 	ldrd	lr, ip, [lr, #92]	; 0x5c
 8016f5a:	eb0c 18cc 	add.w	r8, ip, ip, lsl #7
 8016f5e:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 8016f62:	4465      	add	r5, ip
 8016f64:	f82e 7015 	strh.w	r7, [lr, r5, lsl #1]
		VLine(40+end_pos, 220, 40, 0x0000FF00);
 8016f68:	f7fc fc88 	bl	801387c <VLine>
		Pixel(39+end_pos, 220, 0x0000FF00);
 8016f6c:	f104 0327 	add.w	r3, r4, #39	; 0x27
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8016f70:	b299      	uxth	r1, r3
 8016f72:	f89a 3000 	ldrb.w	r3, [sl]
 8016f76:	fb06 b303 	mla	r3, r6, r3, fp
 8016f7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8016f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f7e:	fb09 1202 	mla	r2, r9, r2, r1
 8016f82:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
 8016f86:	f89a 3000 	ldrb.w	r3, [sl]
 8016f8a:	fb06 b303 	mla	r3, r6, r3, fp
 8016f8e:	e9d3 0217 	ldrd	r0, r2, [r3, #92]	; 0x5c
 8016f92:	eb02 13c2 	add.w	r3, r2, r2, lsl #7
 8016f96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016f9a:	440b      	add	r3, r1
 8016f9c:	f820 7013 	strh.w	r7, [r0, r3, lsl #1]
}
 8016fa0:	f7fe ba97 	b.w	80154d2 <DrawLowSpectrum+0x138e>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8016fa4:	ebc6 1186 	rsb	r1, r6, r6, lsl #6
		Rectangle(file_pos+40, 253, 400-file_pos, 3, 0x00FFFFFF);
 8016fa8:	f107 0228 	add.w	r2, r7, #40	; 0x28
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8016fac:	4623      	mov	r3, r4
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8016fae:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8016fb2:	fa11 f282 	uxtah	r2, r1, r2
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8016fb6:	2103      	movs	r1, #3
 8016fb8:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8016fbc:	480e      	ldr	r0, [pc, #56]	; (8016ff8 <DrawLowSpectrum+0x2eb4>)
 8016fbe:	9100      	str	r1, [sp, #0]
 8016fc0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016fc4:	f7ea fcd4 	bl	8001970 <HAL_DMA2D_Start>
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	f47d aa55 	bne.w	8014478 <DrawLowSpectrum+0x334>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8016fce:	2164      	movs	r1, #100	; 0x64
 8016fd0:	4809      	ldr	r0, [pc, #36]	; (8016ff8 <DrawLowSpectrum+0x2eb4>)
 8016fd2:	f7ea fd43 	bl	8001a5c <HAL_DMA2D_PollForTransfer>
}
 8016fd6:	f7fd ba4f 	b.w	8014478 <DrawLowSpectrum+0x334>
 8016fda:	f8df c020 	ldr.w	ip, [pc, #32]	; 8016ffc <DrawLowSpectrum+0x2eb8>
	else if(display.pitchmode == 2) {
 8016fde:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8016fe0:	2134      	movs	r1, #52	; 0x34
 8016fe2:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8016fe6:	f10c 0e44 	add.w	lr, ip, #68	; 0x44
 8016fea:	f04f 09fa 	mov.w	r9, #250	; 0xfa
 8016fee:	e0a8      	b.n	8017142 <DrawLowSpectrum+0x2ffe>
 8016ff0:	20017208 	.word	0x20017208
 8016ff4:	20000988 	.word	0x20000988
 8016ff8:	200009ac 	.word	0x200009ac
 8016ffc:	08024496 	.word	0x08024496
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017000:	f89a 6000 	ldrb.w	r6, [sl]
 8017004:	fb01 b606 	mla	r6, r1, r6, fp
 8017008:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 801700c:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
 8017010:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8017014:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017018:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801701c:	f013 0502 	ands.w	r5, r3, #2
 8017020:	f040 80a7 	bne.w	8017172 <DrawLowSpectrum+0x302e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017024:	f89a 6000 	ldrb.w	r6, [sl]
 8017028:	fb01 b606 	mla	r6, r1, r6, fp
 801702c:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8017030:	ebc0 1780 	rsb	r7, r0, r0, lsl #6
 8017034:	ebc0 0087 	rsb	r0, r0, r7, lsl #2
 8017038:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801703c:	4410      	add	r0, r2
 801703e:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017042:	f013 0504 	ands.w	r5, r3, #4
 8017046:	f040 80a7 	bne.w	8017198 <DrawLowSpectrum+0x3054>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801704a:	f89a 6000 	ldrb.w	r6, [sl]
 801704e:	fb01 b606 	mla	r6, r1, r6, fp
 8017052:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8017056:	fb09 2000 	mla	r0, r9, r0, r2
 801705a:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801705e:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017062:	f013 0508 	ands.w	r5, r3, #8
 8017066:	f040 80a7 	bne.w	80171b8 <DrawLowSpectrum+0x3074>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801706a:	f89a 6000 	ldrb.w	r6, [sl]
 801706e:	fb01 b606 	mla	r6, r1, r6, fp
 8017072:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8017076:	ebc0 1740 	rsb	r7, r0, r0, lsl #5
 801707a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 801707e:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017082:	4410      	add	r0, r2
 8017084:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017088:	f013 0510 	ands.w	r5, r3, #16
 801708c:	f040 80a7 	bne.w	80171de <DrawLowSpectrum+0x309a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017090:	f89a 6000 	ldrb.w	r6, [sl]
 8017094:	fb01 b606 	mla	r6, r1, r6, fp
 8017098:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 801709c:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80170a0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80170a4:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80170a8:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80170ac:	f013 0520 	ands.w	r5, r3, #32
 80170b0:	f040 80a7 	bne.w	8017202 <DrawLowSpectrum+0x30be>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80170b4:	f89a 6000 	ldrb.w	r6, [sl]
 80170b8:	fb01 b606 	mla	r6, r1, r6, fp
 80170bc:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80170c0:	ebc0 1740 	rsb	r7, r0, r0, lsl #5
 80170c4:	ebc0 00c7 	rsb	r0, r0, r7, lsl #3
 80170c8:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80170cc:	4410      	add	r0, r2
 80170ce:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80170d2:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 80170d6:	f040 80a7 	bne.w	8017228 <DrawLowSpectrum+0x30e4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80170da:	f89a 6000 	ldrb.w	r6, [sl]
 80170de:	27f6      	movs	r7, #246	; 0xf6
 80170e0:	fb01 b606 	mla	r6, r1, r6, fp
 80170e4:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80170e8:	fb07 2000 	mla	r0, r7, r0, r2
 80170ec:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80170f0:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80170f4:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 80170f8:	f040 80a7 	bne.w	801724a <DrawLowSpectrum+0x3106>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80170fc:	f89a 6000 	ldrb.w	r6, [sl]
 8017100:	27f5      	movs	r7, #245	; 0xf5
			if(((element[i] >> k) & 1) == 1) {
 8017102:	f413 7380 	ands.w	r3, r3, #256	; 0x100
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017106:	fb01 b606 	mla	r6, r1, r6, fp
 801710a:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 801710e:	fb07 2000 	mla	r0, r7, r0, r2
 8017112:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017116:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801711a:	f040 80a7 	bne.w	801726c <DrawLowSpectrum+0x3128>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801711e:	f89a 5000 	ldrb.w	r5, [sl]
 8017122:	26f4      	movs	r6, #244	; 0xf4
	while(i < width) {
 8017124:	45e6      	cmp	lr, ip
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017126:	fb01 b505 	mla	r5, r1, r5, fp
 801712a:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801712e:	fb06 2000 	mla	r0, r6, r0, r2
	while(i < width) {
 8017132:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017136:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801713a:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
	while(i < width) {
 801713e:	f000 80a7 	beq.w	8017290 <DrawLowSpectrum+0x314c>
			if(((element[i] >> k) & 1) == 1) {
 8017142:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
 8017146:	f013 0501 	ands.w	r5, r3, #1
 801714a:	f43f af59 	beq.w	8017000 <DrawLowSpectrum+0x2ebc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801714e:	f89a 5000 	ldrb.w	r5, [sl]
 8017152:	fb01 b505 	mla	r5, r1, r5, fp
 8017156:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801715a:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
 801715e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8017162:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017166:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801716a:	f013 0502 	ands.w	r5, r3, #2
 801716e:	f43f af59 	beq.w	8017024 <DrawLowSpectrum+0x2ee0>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017172:	f89a 5000 	ldrb.w	r5, [sl]
 8017176:	fb01 b505 	mla	r5, r1, r5, fp
 801717a:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801717e:	ebc0 1680 	rsb	r6, r0, r0, lsl #6
 8017182:	ebc0 0086 	rsb	r0, r0, r6, lsl #2
 8017186:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801718a:	4410      	add	r0, r2
 801718c:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017190:	f013 0504 	ands.w	r5, r3, #4
 8017194:	f43f af59 	beq.w	801704a <DrawLowSpectrum+0x2f06>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017198:	f89a 5000 	ldrb.w	r5, [sl]
 801719c:	fb01 b505 	mla	r5, r1, r5, fp
 80171a0:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80171a4:	fb09 2000 	mla	r0, r9, r0, r2
 80171a8:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80171ac:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80171b0:	f013 0508 	ands.w	r5, r3, #8
 80171b4:	f43f af59 	beq.w	801706a <DrawLowSpectrum+0x2f26>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80171b8:	f89a 5000 	ldrb.w	r5, [sl]
 80171bc:	fb01 b505 	mla	r5, r1, r5, fp
 80171c0:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80171c4:	ebc0 1640 	rsb	r6, r0, r0, lsl #5
 80171c8:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80171cc:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80171d0:	4410      	add	r0, r2
 80171d2:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80171d6:	f013 0510 	ands.w	r5, r3, #16
 80171da:	f43f af59 	beq.w	8017090 <DrawLowSpectrum+0x2f4c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80171de:	f89a 5000 	ldrb.w	r5, [sl]
 80171e2:	fb01 b505 	mla	r5, r1, r5, fp
 80171e6:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80171ea:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80171ee:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80171f2:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80171f6:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80171fa:	f013 0520 	ands.w	r5, r3, #32
 80171fe:	f43f af59 	beq.w	80170b4 <DrawLowSpectrum+0x2f70>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017202:	f89a 5000 	ldrb.w	r5, [sl]
 8017206:	fb01 b505 	mla	r5, r1, r5, fp
 801720a:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801720e:	ebc0 1640 	rsb	r6, r0, r0, lsl #5
 8017212:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 8017216:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801721a:	4410      	add	r0, r2
 801721c:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017220:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 8017224:	f43f af59 	beq.w	80170da <DrawLowSpectrum+0x2f96>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017228:	f89a 5000 	ldrb.w	r5, [sl]
 801722c:	26f6      	movs	r6, #246	; 0xf6
 801722e:	fb01 b505 	mla	r5, r1, r5, fp
 8017232:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8017236:	fb06 2000 	mla	r0, r6, r0, r2
 801723a:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801723e:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017242:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 8017246:	f43f af59 	beq.w	80170fc <DrawLowSpectrum+0x2fb8>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801724a:	f89a 5000 	ldrb.w	r5, [sl]
 801724e:	26f5      	movs	r6, #245	; 0xf5
			if(((element[i] >> k) & 1) == 1) {
 8017250:	f413 7380 	ands.w	r3, r3, #256	; 0x100
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017254:	fb01 b505 	mla	r5, r1, r5, fp
 8017258:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801725c:	fb06 2000 	mla	r0, r6, r0, r2
 8017260:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017264:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017268:	f43f af59 	beq.w	801711e <DrawLowSpectrum+0x2fda>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801726c:	f89a 0000 	ldrb.w	r0, [sl]
 8017270:	25f4      	movs	r5, #244	; 0xf4
	while(i < width) {
 8017272:	45e6      	cmp	lr, ip
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017274:	fb01 b000 	mla	r0, r1, r0, fp
 8017278:	e9d0 0317 	ldrd	r0, r3, [r0, #92]	; 0x5c
 801727c:	fb05 2303 	mla	r3, r5, r3, r2
	while(i < width) {
 8017280:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017284:	f203 13bd 	addw	r3, r3, #445	; 0x1bd
 8017288:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	while(i < width) {
 801728c:	f47f af59 	bne.w	8017142 <DrawLowSpectrum+0x2ffe>
		if(percent / 1000 > 0) {
 8017290:	9b03      	ldr	r3, [sp, #12]
 8017292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017296:	f080 83e9 	bcs.w	8017a6c <DrawLowSpectrum+0x3928>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 801729a:	4cdc      	ldr	r4, [pc, #880]	; (801760c <DrawLowSpectrum+0x34c8>)
 801729c:	fba4 3403 	umull	r3, r4, r4, r3
 80172a0:	0964      	lsrs	r4, r4, #5
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 80172a2:	4ddb      	ldr	r5, [pc, #876]	; (8017610 <DrawLowSpectrum+0x34cc>)
 80172a4:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 80172a8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80172ac:	22ba      	movs	r2, #186	; 0xba
 80172ae:	fba5 3004 	umull	r3, r0, r5, r4
 80172b2:	230a      	movs	r3, #10
 80172b4:	f8cd 9000 	str.w	r9, [sp]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80172b8:	f64f 77ff 	movw	r7, #65535	; 0xffff
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 80172bc:	08c0      	lsrs	r0, r0, #3
 80172be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80172c2:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
 80172c6:	b2c0      	uxtb	r0, r0
 80172c8:	f7fc fb64 	bl	8013994 <DrawDigit>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 80172cc:	9b03      	ldr	r3, [sp, #12]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80172ce:	f04f 0ccc 	mov.w	ip, #204	; 0xcc
 80172d2:	f04f 0ecb 	mov.w	lr, #203	; 0xcb
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 80172d6:	fba5 3203 	umull	r3, r2, r5, r3
 80172da:	08d2      	lsrs	r2, r2, #3
 80172dc:	fba5 1302 	umull	r1, r3, r5, r2
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80172e0:	2534      	movs	r5, #52	; 0x34
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 80172e2:	f240 1159 	movw	r1, #345	; 0x159
 80172e6:	08db      	lsrs	r3, r3, #3
 80172e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80172ec:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80172f0:	f89a 2000 	ldrb.w	r2, [sl]
 80172f4:	fb05 b202 	mla	r2, r5, r2, fp
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 80172f8:	b2d8      	uxtb	r0, r3
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80172fa:	e9d2 2317 	ldrd	r2, r3, [r2, #92]	; 0x5c
 80172fe:	fb0c f303 	mul.w	r3, ip, r3
 8017302:	f203 1355 	addw	r3, r3, #341	; 0x155
 8017306:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 801730a:	230a      	movs	r3, #10
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801730c:	f89a 6000 	ldrb.w	r6, [sl]
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8017310:	22ba      	movs	r2, #186	; 0xba
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017312:	fb05 b606 	mla	r6, r5, r6, fp
 8017316:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 801731a:	fb0e f404 	mul.w	r4, lr, r4
 801731e:	f204 1455 	addw	r4, r4, #341	; 0x155
 8017322:	f826 7014 	strh.w	r7, [r6, r4, lsl #1]
 8017326:	f89a 6000 	ldrb.w	r6, [sl]
 801732a:	fb05 b606 	mla	r6, r5, r6, fp
 801732e:	6e34      	ldr	r4, [r6, #96]	; 0x60
 8017330:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 8017332:	fb0c f404 	mul.w	r4, ip, r4
 8017336:	f504 74ab 	add.w	r4, r4, #342	; 0x156
 801733a:	f826 7014 	strh.w	r7, [r6, r4, lsl #1]
 801733e:	f89a 4000 	ldrb.w	r4, [sl]
 8017342:	fb05 b504 	mla	r5, r5, r4, fp
 8017346:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8017348:	6ded      	ldr	r5, [r5, #92]	; 0x5c
 801734a:	fb0e f404 	mul.w	r4, lr, r4
 801734e:	f504 74ab 	add.w	r4, r4, #342	; 0x156
 8017352:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8017356:	f8cd 9000 	str.w	r9, [sp]
 801735a:	f7fc fb1b 	bl	8013994 <DrawDigit>
		DrawDigit((percent % 2) * 5, 360, 186, 10, 0x00FFFFFF);
 801735e:	f008 0001 	and.w	r0, r8, #1
 8017362:	230a      	movs	r3, #10
 8017364:	22ba      	movs	r2, #186	; 0xba
 8017366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801736a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801736e:	f8cd 9000 	str.w	r9, [sp]
 8017372:	f7fc fb0f 	bl	8013994 <DrawDigit>
 8017376:	f7fd bb80 	b.w	8014a7a <DrawLowSpectrum+0x936>
 801737a:	f8df c298 	ldr.w	ip, [pc, #664]	; 8017614 <DrawLowSpectrum+0x34d0>
	else if(display.pitchmode == 1) {
 801737e:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017380:	2134      	movs	r1, #52	; 0x34
 8017382:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8017386:	f10c 0e44 	add.w	lr, ip, #68	; 0x44
 801738a:	f04f 09ee 	mov.w	r9, #238	; 0xee
 801738e:	e09d      	b.n	80174cc <DrawLowSpectrum+0x3388>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017390:	f89a 6000 	ldrb.w	r6, [sl]
 8017394:	fb01 b606 	mla	r6, r1, r6, fp
 8017398:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 801739c:	ebc0 1700 	rsb	r7, r0, r0, lsl #4
 80173a0:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80173a4:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80173a8:	4410      	add	r0, r2
 80173aa:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80173ae:	f013 0502 	ands.w	r5, r3, #2
 80173b2:	f040 80a4 	bne.w	80174fe <DrawLowSpectrum+0x33ba>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80173b6:	f89a 6000 	ldrb.w	r6, [sl]
 80173ba:	fb01 b606 	mla	r6, r1, r6, fp
 80173be:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80173c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80173c6:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80173ca:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80173ce:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80173d2:	f013 0504 	ands.w	r5, r3, #4
 80173d6:	f040 80a4 	bne.w	8017522 <DrawLowSpectrum+0x33de>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80173da:	f89a 6000 	ldrb.w	r6, [sl]
 80173de:	fb01 b606 	mla	r6, r1, r6, fp
 80173e2:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 80173e6:	ebc0 1700 	rsb	r7, r0, r0, lsl #4
 80173ea:	ebc0 1007 	rsb	r0, r0, r7, lsl #4
 80173ee:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80173f2:	4410      	add	r0, r2
 80173f4:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80173f8:	f013 0508 	ands.w	r5, r3, #8
 80173fc:	f040 80a4 	bne.w	8017548 <DrawLowSpectrum+0x3404>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017400:	f89a 6000 	ldrb.w	r6, [sl]
 8017404:	fb01 b606 	mla	r6, r1, r6, fp
 8017408:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 801740c:	fb09 2000 	mla	r0, r9, r0, r2
 8017410:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017414:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017418:	f013 0510 	ands.w	r5, r3, #16
 801741c:	f040 80a4 	bne.w	8017568 <DrawLowSpectrum+0x3424>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017420:	f89a 6000 	ldrb.w	r6, [sl]
 8017424:	27ed      	movs	r7, #237	; 0xed
 8017426:	fb01 b606 	mla	r6, r1, r6, fp
 801742a:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 801742e:	fb07 2000 	mla	r0, r7, r0, r2
 8017432:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017436:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801743a:	f013 0520 	ands.w	r5, r3, #32
 801743e:	f040 80a4 	bne.w	801758a <DrawLowSpectrum+0x3446>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017442:	f89a 6000 	ldrb.w	r6, [sl]
 8017446:	27ec      	movs	r7, #236	; 0xec
 8017448:	fb01 b606 	mla	r6, r1, r6, fp
 801744c:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8017450:	fb07 2000 	mla	r0, r7, r0, r2
 8017454:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017458:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801745c:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 8017460:	f040 80a4 	bne.w	80175ac <DrawLowSpectrum+0x3468>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017464:	f89a 6000 	ldrb.w	r6, [sl]
 8017468:	27eb      	movs	r7, #235	; 0xeb
 801746a:	fb01 b606 	mla	r6, r1, r6, fp
 801746e:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8017472:	fb07 2000 	mla	r0, r7, r0, r2
 8017476:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801747a:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801747e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 8017482:	f040 80a4 	bne.w	80175ce <DrawLowSpectrum+0x348a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017486:	f89a 6000 	ldrb.w	r6, [sl]
 801748a:	27ea      	movs	r7, #234	; 0xea
			if(((element[i] >> k) & 1) == 1) {
 801748c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017490:	fb01 b606 	mla	r6, r1, r6, fp
 8017494:	e9d6 6017 	ldrd	r6, r0, [r6, #92]	; 0x5c
 8017498:	fb07 2000 	mla	r0, r7, r0, r2
 801749c:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80174a0:	f826 5010 	strh.w	r5, [r6, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80174a4:	f040 80a4 	bne.w	80175f0 <DrawLowSpectrum+0x34ac>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80174a8:	f89a 5000 	ldrb.w	r5, [sl]
 80174ac:	26e9      	movs	r6, #233	; 0xe9
 80174ae:	fb01 b505 	mla	r5, r1, r5, fp
 80174b2:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80174b6:	fb06 2000 	mla	r0, r6, r0, r2
 80174ba:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80174be:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
	while(i < width) {
 80174c2:	45e6      	cmp	lr, ip
 80174c4:	f102 0201 	add.w	r2, r2, #1
 80174c8:	f43f aee2 	beq.w	8017290 <DrawLowSpectrum+0x314c>
			if(((element[i] >> k) & 1) == 1) {
 80174cc:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
 80174d0:	f013 0501 	ands.w	r5, r3, #1
 80174d4:	f43f af5c 	beq.w	8017390 <DrawLowSpectrum+0x324c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80174d8:	f89a 5000 	ldrb.w	r5, [sl]
 80174dc:	fb01 b505 	mla	r5, r1, r5, fp
 80174e0:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80174e4:	ebc0 1600 	rsb	r6, r0, r0, lsl #4
 80174e8:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 80174ec:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80174f0:	4410      	add	r0, r2
 80174f2:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80174f6:	f013 0502 	ands.w	r5, r3, #2
 80174fa:	f43f af5c 	beq.w	80173b6 <DrawLowSpectrum+0x3272>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80174fe:	f89a 5000 	ldrb.w	r5, [sl]
 8017502:	fb01 b505 	mla	r5, r1, r5, fp
 8017506:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801750a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801750e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8017512:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017516:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801751a:	f013 0504 	ands.w	r5, r3, #4
 801751e:	f43f af5c 	beq.w	80173da <DrawLowSpectrum+0x3296>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017522:	f89a 5000 	ldrb.w	r5, [sl]
 8017526:	fb01 b505 	mla	r5, r1, r5, fp
 801752a:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801752e:	ebc0 1600 	rsb	r6, r0, r0, lsl #4
 8017532:	ebc0 1006 	rsb	r0, r0, r6, lsl #4
 8017536:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801753a:	4410      	add	r0, r2
 801753c:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017540:	f013 0508 	ands.w	r5, r3, #8
 8017544:	f43f af5c 	beq.w	8017400 <DrawLowSpectrum+0x32bc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017548:	f89a 5000 	ldrb.w	r5, [sl]
 801754c:	fb01 b505 	mla	r5, r1, r5, fp
 8017550:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8017554:	fb09 2000 	mla	r0, r9, r0, r2
 8017558:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801755c:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017560:	f013 0510 	ands.w	r5, r3, #16
 8017564:	f43f af5c 	beq.w	8017420 <DrawLowSpectrum+0x32dc>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017568:	f89a 5000 	ldrb.w	r5, [sl]
 801756c:	26ed      	movs	r6, #237	; 0xed
 801756e:	fb01 b505 	mla	r5, r1, r5, fp
 8017572:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8017576:	fb06 2000 	mla	r0, r6, r0, r2
 801757a:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801757e:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017582:	f013 0520 	ands.w	r5, r3, #32
 8017586:	f43f af5c 	beq.w	8017442 <DrawLowSpectrum+0x32fe>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801758a:	f89a 5000 	ldrb.w	r5, [sl]
 801758e:	26ec      	movs	r6, #236	; 0xec
 8017590:	fb01 b505 	mla	r5, r1, r5, fp
 8017594:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8017598:	fb06 2000 	mla	r0, r6, r0, r2
 801759c:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80175a0:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80175a4:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 80175a8:	f43f af5c 	beq.w	8017464 <DrawLowSpectrum+0x3320>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80175ac:	f89a 5000 	ldrb.w	r5, [sl]
 80175b0:	26eb      	movs	r6, #235	; 0xeb
 80175b2:	fb01 b505 	mla	r5, r1, r5, fp
 80175b6:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80175ba:	fb06 2000 	mla	r0, r6, r0, r2
 80175be:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80175c2:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80175c6:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 80175ca:	f43f af5c 	beq.w	8017486 <DrawLowSpectrum+0x3342>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80175ce:	f89a 5000 	ldrb.w	r5, [sl]
 80175d2:	26ea      	movs	r6, #234	; 0xea
			if(((element[i] >> k) & 1) == 1) {
 80175d4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80175d8:	fb01 b505 	mla	r5, r1, r5, fp
 80175dc:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80175e0:	fb06 2000 	mla	r0, r6, r0, r2
 80175e4:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80175e8:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80175ec:	f43f af5c 	beq.w	80174a8 <DrawLowSpectrum+0x3364>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80175f0:	f89a 0000 	ldrb.w	r0, [sl]
 80175f4:	25e9      	movs	r5, #233	; 0xe9
 80175f6:	fb01 b000 	mla	r0, r1, r0, fp
 80175fa:	e9d0 0317 	ldrd	r0, r3, [r0, #92]	; 0x5c
 80175fe:	fb05 2303 	mla	r3, r5, r3, r2
 8017602:	f203 13bd 	addw	r3, r3, #445	; 0x1bd
 8017606:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 801760a:	e75a      	b.n	80174c2 <DrawLowSpectrum+0x337e>
 801760c:	51eb851f 	.word	0x51eb851f
 8017610:	cccccccd 	.word	0xcccccccd
 8017614:	080244da 	.word	0x080244da
			DrawDigit(percent / 10000, 315, 186, 10, 0x00FFFFFF);
 8017618:	4613      	mov	r3, r2
 801761a:	48d1      	ldr	r0, [pc, #836]	; (8017960 <DrawLowSpectrum+0x381c>)
 801761c:	22ba      	movs	r2, #186	; 0xba
 801761e:	f240 113b 	movw	r1, #315	; 0x13b
 8017622:	fba0 3003 	umull	r3, r0, r0, r3
 8017626:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801762a:	0b40      	lsrs	r0, r0, #13
 801762c:	9300      	str	r3, [sp, #0]
 801762e:	230a      	movs	r3, #10
 8017630:	f7fc f9b0 	bl	8013994 <DrawDigit>
			DrawDigit(((percent / 100) % 100) / 10, 330, 186, 10, 0x00FFFFFF);
 8017634:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017638:	4aca      	ldr	r2, [pc, #808]	; (8017964 <DrawLowSpectrum+0x3820>)
 801763a:	2064      	movs	r0, #100	; 0x64
 801763c:	49ca      	ldr	r1, [pc, #808]	; (8017968 <DrawLowSpectrum+0x3824>)
 801763e:	9300      	str	r3, [sp, #0]
 8017640:	9b03      	ldr	r3, [sp, #12]
 8017642:	fba2 4303 	umull	r4, r3, r2, r3
 8017646:	095b      	lsrs	r3, r3, #5
 8017648:	fba2 4203 	umull	r4, r2, r2, r3
 801764c:	0954      	lsrs	r4, r2, #5
 801764e:	22ba      	movs	r2, #186	; 0xba
 8017650:	fb00 3314 	mls	r3, r0, r4, r3
 8017654:	b29c      	uxth	r4, r3
 8017656:	fba1 3104 	umull	r3, r1, r1, r4
 801765a:	230a      	movs	r3, #10
 801765c:	f3c1 00c7 	ubfx	r0, r1, #3, #8
 8017660:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8017664:	f7fc f996 	bl	8013994 <DrawDigit>
 8017668:	f7fe be4e 	b.w	8016308 <DrawLowSpectrum+0x21c4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801766c:	f89a 4000 	ldrb.w	r4, [sl]
 8017670:	fb01 b404 	mla	r4, r1, r4, fp
 8017674:	e9d4 4317 	ldrd	r4, r3, [r4, #92]	; 0x5c
 8017678:	fb08 2303 	mla	r3, r8, r3, r2
 801767c:	3301      	adds	r3, #1
 801767e:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
 8017682:	f7fe bc3f 	b.w	8015f04 <DrawLowSpectrum+0x1dc0>
 8017686:	f89a 6000 	ldrb.w	r6, [sl]
 801768a:	fb01 b606 	mla	r6, r1, r6, fp
 801768e:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 8017692:	ebc4 1784 	rsb	r7, r4, r4, lsl #6
 8017696:	ebc4 0487 	rsb	r4, r4, r7, lsl #2
 801769a:	3401      	adds	r4, #1
 801769c:	4414      	add	r4, r2
 801769e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 80176a2:	f7fe bc20 	b.w	8015ee6 <DrawLowSpectrum+0x1da2>
 80176a6:	f89a 6000 	ldrb.w	r6, [sl]
 80176aa:	fb01 b606 	mla	r6, r1, r6, fp
 80176ae:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80176b2:	ebc4 1484 	rsb	r4, r4, r4, lsl #6
 80176b6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80176ba:	3401      	adds	r4, #1
 80176bc:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 80176c0:	f7fe bbff 	b.w	8015ec2 <DrawLowSpectrum+0x1d7e>
 80176c4:	f89a 6000 	ldrb.w	r6, [sl]
 80176c8:	fb01 b606 	mla	r6, r1, r6, fp
 80176cc:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80176d0:	ebc4 1784 	rsb	r7, r4, r4, lsl #6
 80176d4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 80176d8:	3401      	adds	r4, #1
 80176da:	4414      	add	r4, r2
 80176dc:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 80176e0:	f7fe bbde 	b.w	8015ea0 <DrawLowSpectrum+0x1d5c>
 80176e4:	f89a 6000 	ldrb.w	r6, [sl]
 80176e8:	fb01 b606 	mla	r6, r1, r6, fp
 80176ec:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 80176f0:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 80176f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80176f8:	3401      	adds	r4, #1
 80176fa:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 80176fe:	f7fe bbbd 	b.w	8015e7c <DrawLowSpectrum+0x1d38>
 8017702:	f89a 6000 	ldrb.w	r6, [sl]
 8017706:	fb01 b606 	mla	r6, r1, r6, fp
 801770a:	e9d6 6417 	ldrd	r6, r4, [r6, #92]	; 0x5c
 801770e:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8017712:	3401      	adds	r4, #1
 8017714:	4414      	add	r4, r2
 8017716:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 801771a:	f7fe bb9e 	b.w	8015e5a <DrawLowSpectrum+0x1d16>
 801771e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 8017722:	f7fe bb8a 	b.w	8015e3a <DrawLowSpectrum+0x1cf6>
 8017726:	f8df c244 	ldr.w	ip, [pc, #580]	; 801796c <DrawLowSpectrum+0x3828>
	else if(display.pitchmode == 3) {
 801772a:	2200      	movs	r2, #0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801772c:	2134      	movs	r1, #52	; 0x34
 801772e:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
 8017732:	f10c 0e44 	add.w	lr, ip, #68	; 0x44
 8017736:	f44f 7883 	mov.w	r8, #262	; 0x106
 801773a:	e09a      	b.n	8017872 <DrawLowSpectrum+0x372e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801773c:	f89a 5000 	ldrb.w	r5, [sl]
 8017740:	fb01 b505 	mla	r5, r1, r5, fp
 8017744:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 8017748:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 801774c:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 8017750:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017754:	4410      	add	r0, r2
 8017756:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801775a:	f89a 4000 	ldrb.w	r4, [sl]
			if(((element[i] >> k) & 1) == 1) {
 801775e:	f013 0502 	ands.w	r5, r3, #2
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017762:	fb01 b404 	mla	r4, r1, r4, fp
 8017766:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 801776a:	fb08 2000 	mla	r0, r8, r0, r2
 801776e:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
			if(((element[i] >> k) & 1) == 1) {
 8017772:	f040 80f1 	bne.w	8017958 <DrawLowSpectrum+0x3814>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017776:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801777a:	f013 0404 	ands.w	r4, r3, #4
 801777e:	f040 80db 	bne.w	8017938 <DrawLowSpectrum+0x37f4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017782:	f89a 5000 	ldrb.w	r5, [sl]
 8017786:	fb01 b505 	mla	r5, r1, r5, fp
 801778a:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801778e:	eb00 1680 	add.w	r6, r0, r0, lsl #6
 8017792:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8017796:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 801779a:	4410      	add	r0, r2
 801779c:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80177a0:	f013 0408 	ands.w	r4, r3, #8
 80177a4:	f040 80b9 	bne.w	801791a <DrawLowSpectrum+0x37d6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80177a8:	f89a 5000 	ldrb.w	r5, [sl]
 80177ac:	fb01 b505 	mla	r5, r1, r5, fp
 80177b0:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80177b4:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 80177b8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80177bc:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80177c0:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80177c4:	f013 0410 	ands.w	r4, r3, #16
 80177c8:	f040 8097 	bne.w	80178fa <DrawLowSpectrum+0x37b6>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80177cc:	f89a 5000 	ldrb.w	r5, [sl]
 80177d0:	fb01 b505 	mla	r5, r1, r5, fp
 80177d4:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80177d8:	eb00 16c0 	add.w	r6, r0, r0, lsl #7
 80177dc:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80177e0:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80177e4:	4410      	add	r0, r2
 80177e6:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80177ea:	f013 0420 	ands.w	r4, r3, #32
 80177ee:	d175      	bne.n	80178dc <DrawLowSpectrum+0x3798>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80177f0:	f89a 5000 	ldrb.w	r5, [sl]
 80177f4:	fb01 b505 	mla	r5, r1, r5, fp
 80177f8:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 80177fc:	eb00 10c0 	add.w	r0, r0, r0, lsl #7
 8017800:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8017804:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017808:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801780c:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 8017810:	d156      	bne.n	80178c0 <DrawLowSpectrum+0x377c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017812:	f89a 5000 	ldrb.w	r5, [sl]
 8017816:	fb01 b505 	mla	r5, r1, r5, fp
 801781a:	e9d5 5017 	ldrd	r5, r0, [r5, #92]	; 0x5c
 801781e:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8017822:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017826:	4410      	add	r0, r2
 8017828:	f825 4010 	strh.w	r4, [r5, r0, lsl #1]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801782c:	f89a 4000 	ldrb.w	r4, [sl]
			if(((element[i] >> k) & 1) == 1) {
 8017830:	f013 0580 	ands.w	r5, r3, #128	; 0x80
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017834:	fb01 b404 	mla	r4, r1, r4, fp
 8017838:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 801783c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8017840:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
			if(((element[i] >> k) & 1) == 1) {
 8017844:	d139      	bne.n	80178ba <DrawLowSpectrum+0x3776>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017846:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801784a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 801784e:	d126      	bne.n	801789e <DrawLowSpectrum+0x375a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017850:	f89a 4000 	ldrb.w	r4, [sl]
 8017854:	fb01 b404 	mla	r4, r1, r4, fp
 8017858:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 801785c:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8017860:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017864:	4410      	add	r0, r2
 8017866:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
	while(i < width) {
 801786a:	45e6      	cmp	lr, ip
 801786c:	f102 0201 	add.w	r2, r2, #1
 8017870:	d07e      	beq.n	8017970 <DrawLowSpectrum+0x382c>
			if(((element[i] >> k) & 1) == 1) {
 8017872:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
 8017876:	f013 0401 	ands.w	r4, r3, #1
 801787a:	f43f af5f 	beq.w	801773c <DrawLowSpectrum+0x35f8>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801787e:	f89a 4000 	ldrb.w	r4, [sl]
 8017882:	fb01 b404 	mla	r4, r1, r4, fp
 8017886:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 801788a:	eb00 1540 	add.w	r5, r0, r0, lsl #5
 801788e:	ebc0 00c5 	rsb	r0, r0, r5, lsl #3
 8017892:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017896:	4410      	add	r0, r2
 8017898:	f824 7010 	strh.w	r7, [r4, r0, lsl #1]
 801789c:	e75d      	b.n	801775a <DrawLowSpectrum+0x3616>
 801789e:	f89a 0000 	ldrb.w	r0, [sl]
 80178a2:	fb01 b000 	mla	r0, r1, r0, fp
 80178a6:	e9d0 0317 	ldrd	r0, r3, [r0, #92]	; 0x5c
 80178aa:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80178ae:	f203 13bd 	addw	r3, r3, #445	; 0x1bd
 80178b2:	4413      	add	r3, r2
 80178b4:	f820 7013 	strh.w	r7, [r0, r3, lsl #1]
 80178b8:	e7d7      	b.n	801786a <DrawLowSpectrum+0x3726>
 80178ba:	f824 7010 	strh.w	r7, [r4, r0, lsl #1]
 80178be:	e7c4      	b.n	801784a <DrawLowSpectrum+0x3706>
 80178c0:	f89a 4000 	ldrb.w	r4, [sl]
 80178c4:	fb01 b404 	mla	r4, r1, r4, fp
 80178c8:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 80178cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80178d0:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80178d4:	4410      	add	r0, r2
 80178d6:	f824 7010 	strh.w	r7, [r4, r0, lsl #1]
 80178da:	e7a7      	b.n	801782c <DrawLowSpectrum+0x36e8>
 80178dc:	f89a 4000 	ldrb.w	r4, [sl]
 80178e0:	fb01 b404 	mla	r4, r1, r4, fp
 80178e4:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 80178e8:	eb00 10c0 	add.w	r0, r0, r0, lsl #7
 80178ec:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80178f0:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 80178f4:	f824 7010 	strh.w	r7, [r4, r0, lsl #1]
 80178f8:	e788      	b.n	801780c <DrawLowSpectrum+0x36c8>
 80178fa:	f89a 4000 	ldrb.w	r4, [sl]
 80178fe:	fb01 b404 	mla	r4, r1, r4, fp
 8017902:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 8017906:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 801790a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 801790e:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017912:	4410      	add	r0, r2
 8017914:	f824 7010 	strh.w	r7, [r4, r0, lsl #1]
 8017918:	e767      	b.n	80177ea <DrawLowSpectrum+0x36a6>
 801791a:	f89a 4000 	ldrb.w	r4, [sl]
 801791e:	fb01 b404 	mla	r4, r1, r4, fp
 8017922:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 8017926:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 801792a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801792e:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017932:	f824 7010 	strh.w	r7, [r4, r0, lsl #1]
 8017936:	e745      	b.n	80177c4 <DrawLowSpectrum+0x3680>
 8017938:	f89a 4000 	ldrb.w	r4, [sl]
 801793c:	fb01 b404 	mla	r4, r1, r4, fp
 8017940:	e9d4 4017 	ldrd	r4, r0, [r4, #92]	; 0x5c
 8017944:	eb00 1580 	add.w	r5, r0, r0, lsl #6
 8017948:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801794c:	f200 10bd 	addw	r0, r0, #445	; 0x1bd
 8017950:	4410      	add	r0, r2
 8017952:	f824 7010 	strh.w	r7, [r4, r0, lsl #1]
 8017956:	e723      	b.n	80177a0 <DrawLowSpectrum+0x365c>
 8017958:	f824 7010 	strh.w	r7, [r4, r0, lsl #1]
 801795c:	e70d      	b.n	801777a <DrawLowSpectrum+0x3636>
 801795e:	bf00      	nop
 8017960:	d1b71759 	.word	0xd1b71759
 8017964:	51eb851f 	.word	0x51eb851f
 8017968:	cccccccd 	.word	0xcccccccd
 801796c:	0802451e 	.word	0x0802451e
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 8017970:	9e03      	ldr	r6, [sp, #12]
 8017972:	2164      	movs	r1, #100	; 0x64
 8017974:	4a4b      	ldr	r2, [pc, #300]	; (8017aa4 <DrawLowSpectrum+0x3960>)
 8017976:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 801797a:	4c4b      	ldr	r4, [pc, #300]	; (8017aa8 <DrawLowSpectrum+0x3964>)
 801797c:	fba2 0306 	umull	r0, r3, r2, r6
 8017980:	f8cd 8000 	str.w	r8, [sp]
 8017984:	095b      	lsrs	r3, r3, #5
 8017986:	fba2 0203 	umull	r0, r2, r2, r3
 801798a:	0950      	lsrs	r0, r2, #5
 801798c:	22ba      	movs	r2, #186	; 0xba
 801798e:	fb01 3310 	mls	r3, r1, r0, r3
 8017992:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8017996:	b298      	uxth	r0, r3
 8017998:	230a      	movs	r3, #10
 801799a:	fba4 7500 	umull	r7, r5, r4, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801799e:	f64f 77ff 	movw	r7, #65535	; 0xffff
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 80179a2:	08ed      	lsrs	r5, r5, #3
 80179a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80179a8:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80179ac:	2534      	movs	r5, #52	; 0x34
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 80179ae:	b2c0      	uxtb	r0, r0
 80179b0:	f7fb fff0 	bl	8013994 <DrawDigit>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80179b4:	f89a 2000 	ldrb.w	r2, [sl]
 80179b8:	f04f 0ccc 	mov.w	ip, #204	; 0xcc
 80179bc:	f04f 0ecb 	mov.w	lr, #203	; 0xcb
 80179c0:	fb05 b202 	mla	r2, r5, r2, fp
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 80179c4:	9603      	str	r6, [sp, #12]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80179c6:	e9d2 2317 	ldrd	r2, r3, [r2, #92]	; 0x5c
 80179ca:	fb0c f303 	mul.w	r3, ip, r3
 80179ce:	f203 1355 	addw	r3, r3, #341	; 0x155
 80179d2:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 80179d6:	22ba      	movs	r2, #186	; 0xba
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80179d8:	f89a 0000 	ldrb.w	r0, [sl]
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 80179dc:	fba4 3906 	umull	r3, r9, r4, r6
 80179e0:	230a      	movs	r3, #10
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80179e2:	fb05 b000 	mla	r0, r5, r0, fp
 80179e6:	e9d0 0117 	ldrd	r0, r1, [r0, #92]	; 0x5c
 80179ea:	fb0e f101 	mul.w	r1, lr, r1
 80179ee:	f201 1155 	addw	r1, r1, #341	; 0x155
 80179f2:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 80179f6:	ea4f 01d9 	mov.w	r1, r9, lsr #3
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80179fa:	f89a 6000 	ldrb.w	r6, [sl]
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 80179fe:	fba4 4001 	umull	r4, r0, r4, r1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017a02:	fb05 b606 	mla	r6, r5, r6, fp
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8017a06:	08c0      	lsrs	r0, r0, #3
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017a08:	6df4      	ldr	r4, [r6, #92]	; 0x5c
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8017a0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017a0e:	eba1 0040 	sub.w	r0, r1, r0, lsl #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017a12:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8017a14:	fb0c f101 	mul.w	r1, ip, r1
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8017a18:	b2c0      	uxtb	r0, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017a1a:	f501 71ab 	add.w	r1, r1, #342	; 0x156
 8017a1e:	f824 7011 	strh.w	r7, [r4, r1, lsl #1]
 8017a22:	f89a 1000 	ldrb.w	r1, [sl]
 8017a26:	fb05 b501 	mla	r5, r5, r1, fp
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8017a2a:	f240 1159 	movw	r1, #345	; 0x159
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017a2e:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8017a30:	6ded      	ldr	r5, [r5, #92]	; 0x5c
 8017a32:	fb0e f404 	mul.w	r4, lr, r4
 8017a36:	f504 74ab 	add.w	r4, r4, #342	; 0x156
 8017a3a:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8017a3e:	f8cd 8000 	str.w	r8, [sp]
 8017a42:	f7fb ffa7 	bl	8013994 <DrawDigit>
		DrawDigit((percent % 5) * 2, 360, 186, 10, 0x00FFFFFF);
 8017a46:	9e03      	ldr	r6, [sp, #12]
 8017a48:	ea4f 0099 	mov.w	r0, r9, lsr #2
 8017a4c:	230a      	movs	r3, #10
 8017a4e:	22ba      	movs	r2, #186	; 0xba
 8017a50:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8017a54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017a58:	f8cd 8000 	str.w	r8, [sp]
 8017a5c:	1a30      	subs	r0, r6, r0
 8017a5e:	0040      	lsls	r0, r0, #1
 8017a60:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8017a64:	f7fb ff96 	bl	8013994 <DrawDigit>
 8017a68:	f7fd b807 	b.w	8014a7a <DrawLowSpectrum+0x936>
			DrawDigit(((percent / 100) % 100) / 10, 315, 186, 10, 0x00FFFFFF);
 8017a6c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017a70:	4a0c      	ldr	r2, [pc, #48]	; (8017aa4 <DrawLowSpectrum+0x3960>)
 8017a72:	2064      	movs	r0, #100	; 0x64
 8017a74:	490c      	ldr	r1, [pc, #48]	; (8017aa8 <DrawLowSpectrum+0x3964>)
 8017a76:	9300      	str	r3, [sp, #0]
 8017a78:	9b03      	ldr	r3, [sp, #12]
 8017a7a:	fba2 4303 	umull	r4, r3, r2, r3
 8017a7e:	095b      	lsrs	r3, r3, #5
 8017a80:	fba2 4203 	umull	r4, r2, r2, r3
 8017a84:	0954      	lsrs	r4, r2, #5
 8017a86:	22ba      	movs	r2, #186	; 0xba
 8017a88:	fb00 3314 	mls	r3, r0, r4, r3
 8017a8c:	b29c      	uxth	r4, r3
 8017a8e:	fba1 3104 	umull	r3, r1, r1, r4
 8017a92:	230a      	movs	r3, #10
 8017a94:	f3c1 00c7 	ubfx	r0, r1, #3, #8
 8017a98:	f240 113b 	movw	r1, #315	; 0x13b
 8017a9c:	f7fb ff7a 	bl	8013994 <DrawDigit>
 8017aa0:	f7ff bbff 	b.w	80172a2 <DrawLowSpectrum+0x315e>
 8017aa4:	51eb851f 	.word	0x51eb851f
 8017aa8:	cccccccd 	.word	0xcccccccd

08017aac <DrawSpectrum>:
{
 8017aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ab0:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	uint8_t spectrum_frame[480] = {0};
 8017ab4:	2100      	movs	r1, #0
 8017ab6:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
	if(position != file_pos_wide) {
 8017aba:	4da7      	ldr	r5, [pc, #668]	; (8017d58 <DrawSpectrum+0x2ac>)
{
 8017abc:	af02      	add	r7, sp, #8
	uint8_t spectrum_frame[480] = {0};
 8017abe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8017ac2:	6239      	str	r1, [r7, #32]
 8017ac4:	f007 fb46 	bl	801f154 <memset>
	uint32_t new_cues[rekordbox.cues];
 8017ac8:	4ba4      	ldr	r3, [pc, #656]	; (8017d5c <DrawSpectrum+0x2b0>)
	if(position != file_pos_wide) {
 8017aca:	6829      	ldr	r1, [r5, #0]
	uint32_t new_cues[rekordbox.cues];
 8017acc:	f8d3 6b94 	ldr.w	r6, [r3, #2964]	; 0xb94
	if(position != file_pos_wide) {
 8017ad0:	4ba3      	ldr	r3, [pc, #652]	; (8017d60 <DrawSpectrum+0x2b4>)
	uint32_t new_cues[rekordbox.cues];
 8017ad2:	00b0      	lsls	r0, r6, #2
	if(position != file_pos_wide) {
 8017ad4:	681a      	ldr	r2, [r3, #0]
	uint32_t new_cues[rekordbox.cues];
 8017ad6:	1dc3      	adds	r3, r0, #7
	if(position != file_pos_wide) {
 8017ad8:	4291      	cmp	r1, r2
	uint32_t new_cues[rekordbox.cues];
 8017ada:	f023 0307 	bic.w	r3, r3, #7
 8017ade:	ebad 0d03 	sub.w	sp, sp, r3
 8017ae2:	ab02      	add	r3, sp, #8
 8017ae4:	61fb      	str	r3, [r7, #28]
	if(position != file_pos_wide) {
 8017ae6:	f000 8093 	beq.w	8017c10 <DrawSpectrum+0x164>
		if(stretch > 1) {
 8017aea:	f8df a298 	ldr.w	sl, [pc, #664]	; 8017d84 <DrawSpectrum+0x2d8>
 8017aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		position = file_pos_wide;
 8017af2:	602a      	str	r2, [r5, #0]
		if(stretch > 1) {
 8017af4:	edda 7a00 	vldr	s15, [sl]
 8017af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b00:	f340 808a 	ble.w	8017c18 <DrawSpectrum+0x16c>
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 8017b04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017b08:	4c96      	ldr	r4, [pc, #600]	; (8017d64 <DrawSpectrum+0x2b8>)
 8017b0a:	ee17 1a10 	vmov	r1, s14
 8017b0e:	e002      	b.n	8017b16 <DrawSpectrum+0x6a>
				position++;
 8017b10:	682b      	ldr	r3, [r5, #0]
 8017b12:	3301      	adds	r3, #1
 8017b14:	602b      	str	r3, [r5, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 8017b16:	682a      	ldr	r2, [r5, #0]
 8017b18:	6823      	ldr	r3, [r4, #0]
 8017b1a:	fb92 fcf1 	sdiv	ip, r2, r1
 8017b1e:	fb01 221c 	mls	r2, r1, ip, r2
 8017b22:	fb93 fcf1 	sdiv	ip, r3, r1
 8017b26:	fb01 331c 	mls	r3, r1, ip, r3
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d1f0      	bne.n	8017b10 <DrawSpectrum+0x64>
	for(k = 0; k < rekordbox.cues; k++) {
 8017b2e:	2e00      	cmp	r6, #0
 8017b30:	dc75      	bgt.n	8017c1e <DrawSpectrum+0x172>
 8017b32:	f107 0820 	add.w	r8, r7, #32
 8017b36:	f06f 00ef 	mvn.w	r0, #239	; 0xef
 8017b3a:	f507 7600 	add.w	r6, r7, #512	; 0x200
			spectrum_frame[i] = *(__IO uint8_t*)(WAVE_BUFFER+check);
 8017b3e:	f8df c248 	ldr.w	ip, [pc, #584]	; 8017d88 <DrawSpectrum+0x2dc>
 8017b42:	eba0 0008 	sub.w	r0, r0, r8
			while(check < rekordbox.cue_start_position[k]) {
 8017b46:	4641      	mov	r1, r8
		check = position + (int32_t)((i-240)*stretch);
 8017b48:	1842      	adds	r2, r0, r1
 8017b4a:	682b      	ldr	r3, [r5, #0]
 8017b4c:	ee07 2a10 	vmov	s14, r2
 8017b50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017b58:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017b5c:	ee17 2a10 	vmov	r2, s14
 8017b60:	441a      	add	r2, r3
 8017b62:	6022      	str	r2, [r4, #0]
		if(check > 0) {
 8017b64:	6823      	ldr	r3, [r4, #0]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	dd03      	ble.n	8017b72 <DrawSpectrum+0xc6>
			spectrum_frame[i] = *(__IO uint8_t*)(WAVE_BUFFER+check);
 8017b6a:	6823      	ldr	r3, [r4, #0]
 8017b6c:	f813 300c 	ldrb.w	r3, [r3, ip]
 8017b70:	700b      	strb	r3, [r1, #0]
	for(i = 0; i < 480; i++) {
 8017b72:	3101      	adds	r1, #1
 8017b74:	428e      	cmp	r6, r1
 8017b76:	d1e7      	bne.n	8017b48 <DrawSpectrum+0x9c>
	for(i = 0; i < 480; i++)
 8017b78:	2600      	movs	r6, #0
			if(display.loop == 1) {
 8017b7a:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8017d8c <DrawSpectrum+0x2e0>
			color |= 0x000000FF;
 8017b7e:	f8df b210 	ldr.w	fp, [pc, #528]	; 8017d90 <DrawSpectrum+0x2e4>
 8017b82:	e01c      	b.n	8017bbe <DrawSpectrum+0x112>
			color = spectrum_frame[i] & 0xE0; // read color data - first 3 bits
 8017b84:	f898 1000 	ldrb.w	r1, [r8]
 8017b88:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 8017b8c:	f001 011f 	and.w	r1, r1, #31
			color <<= 8;
 8017b90:	ea4f 2e03 	mov.w	lr, r3, lsl #8
			height = spectrum_frame[i] & 0x1F; //read height data - last 5 bits
 8017b94:	4b74      	ldr	r3, [pc, #464]	; (8017d68 <DrawSpectrum+0x2bc>)
			VLine(i, 120-height, height*2, color);
 8017b96:	f1c1 0c78 	rsb	ip, r1, #120	; 0x78
 8017b9a:	004a      	lsls	r2, r1, #1
			height = spectrum_frame[i] & 0x1F; //read height data - last 5 bits
 8017b9c:	6019      	str	r1, [r3, #0]
			color |= 0x000000FF;
 8017b9e:	f04e 03ff 	orr.w	r3, lr, #255	; 0xff
			VLine(i, 120-height, height*2, color);
 8017ba2:	fa1f f18c 	uxth.w	r1, ip
			color |= 0x000000FF;
 8017ba6:	f8cb 3000 	str.w	r3, [fp]
			VLine(i, 120-height, height*2, color);
 8017baa:	f7fb fe67 	bl	801387c <VLine>
		check = position + (int32_t)((i-240)*stretch);
 8017bae:	edda 7a00 	vldr	s15, [sl]
	for(i = 0; i < 480; i++)
 8017bb2:	3601      	adds	r6, #1
 8017bb4:	f108 0801 	add.w	r8, r8, #1
 8017bb8:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 8017bbc:	d06a      	beq.n	8017c94 <DrawSpectrum+0x1e8>
		check = position + (int32_t)((i-240)*stretch);
 8017bbe:	f1a6 02f0 	sub.w	r2, r6, #240	; 0xf0
 8017bc2:	682b      	ldr	r3, [r5, #0]
 8017bc4:	ee07 2a10 	vmov	s14, r2
 8017bc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017bd0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017bd4:	ee17 2a10 	vmov	r2, s14
 8017bd8:	441a      	add	r2, r3
 8017bda:	6022      	str	r2, [r4, #0]
		if(check > 0) {
 8017bdc:	6823      	ldr	r3, [r4, #0]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	dde7      	ble.n	8017bb2 <DrawSpectrum+0x106>
			if(display.loop == 1) {
 8017be2:	f899 3010 	ldrb.w	r3, [r9, #16]
 8017be6:	b2b0      	uxth	r0, r6
 8017be8:	2b01      	cmp	r3, #1
 8017bea:	d1cb      	bne.n	8017b84 <DrawSpectrum+0xd8>
				if((check >= display.loopstart) && (check <= display.loopend)) {
 8017bec:	6823      	ldr	r3, [r4, #0]
 8017bee:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8017bf2:	429a      	cmp	r2, r3
 8017bf4:	d8c6      	bhi.n	8017b84 <DrawSpectrum+0xd8>
 8017bf6:	6823      	ldr	r3, [r4, #0]
 8017bf8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d3c1      	bcc.n	8017b84 <DrawSpectrum+0xd8>
					VLine(i, 75, 90, 0x008F8F8F);
 8017c00:	4b5a      	ldr	r3, [pc, #360]	; (8017d6c <DrawSpectrum+0x2c0>)
 8017c02:	225a      	movs	r2, #90	; 0x5a
 8017c04:	214b      	movs	r1, #75	; 0x4b
 8017c06:	61b8      	str	r0, [r7, #24]
 8017c08:	f7fb fe38 	bl	801387c <VLine>
 8017c0c:	69b8      	ldr	r0, [r7, #24]
 8017c0e:	e7b9      	b.n	8017b84 <DrawSpectrum+0xd8>
		check = position + (int32_t)((i-240)*stretch);
 8017c10:	f8df a170 	ldr.w	sl, [pc, #368]	; 8017d84 <DrawSpectrum+0x2d8>
 8017c14:	edda 7a00 	vldr	s15, [sl]
	for(k = 0; k < rekordbox.cues; k++) {
 8017c18:	2e00      	cmp	r6, #0
 8017c1a:	4c52      	ldr	r4, [pc, #328]	; (8017d64 <DrawSpectrum+0x2b8>)
 8017c1c:	dd89      	ble.n	8017b32 <DrawSpectrum+0x86>
		check = position + (int32_t)((i-240)*stretch);
 8017c1e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8017d70 <DrawSpectrum+0x2c4>
 8017c22:	3804      	subs	r0, #4
 8017c24:	69fb      	ldr	r3, [r7, #28]
		new_cues[k] = 0;
 8017c26:	f04f 0800 	mov.w	r8, #0
		check = position + (int32_t)((i-240)*stretch);
 8017c2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017c2e:	4e51      	ldr	r6, [pc, #324]	; (8017d74 <DrawSpectrum+0x2c8>)
 8017c30:	eb03 0c00 	add.w	ip, r3, r0
 8017c34:	1f18      	subs	r0, r3, #4
 8017c36:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017c3a:	ee17 ea10 	vmov	lr, s14
 8017c3e:	e002      	b.n	8017c46 <DrawSpectrum+0x19a>
	for(k = 0; k < rekordbox.cues; k++) {
 8017c40:	4584      	cmp	ip, r0
 8017c42:	f43f af76 	beq.w	8017b32 <DrawSpectrum+0x86>
		check = position + (int32_t)((i-240)*stretch);
 8017c46:	682b      	ldr	r3, [r5, #0]
		if(check < rekordbox.cue_start_position[k]) {
 8017c48:	f856 1f04 	ldr.w	r1, [r6, #4]!
		check = position + (int32_t)((i-240)*stretch);
 8017c4c:	4473      	add	r3, lr
		new_cues[k] = 0;
 8017c4e:	f840 8f04 	str.w	r8, [r0, #4]!
		check = position + (int32_t)((i-240)*stretch);
 8017c52:	6023      	str	r3, [r4, #0]
		if(check < rekordbox.cue_start_position[k]) {
 8017c54:	6823      	ldr	r3, [r4, #0]
 8017c56:	4299      	cmp	r1, r3
 8017c58:	ddf2      	ble.n	8017c40 <DrawSpectrum+0x194>
			while(check < rekordbox.cue_start_position[k]) {
 8017c5a:	6823      	ldr	r3, [r4, #0]
 8017c5c:	4299      	cmp	r1, r3
 8017c5e:	dd13      	ble.n	8017c88 <DrawSpectrum+0x1dc>
 8017c60:	f06f 02ee 	mvn.w	r2, #238	; 0xee
				check = position + (int32_t)((i-240)*stretch);
 8017c64:	ee07 2a10 	vmov	s14, r2
 8017c68:	682b      	ldr	r3, [r5, #0]
 8017c6a:	3201      	adds	r2, #1
 8017c6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017c70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017c74:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017c78:	ee17 9a10 	vmov	r9, s14
 8017c7c:	4499      	add	r9, r3
 8017c7e:	f8c4 9000 	str.w	r9, [r4]
			while(check < rekordbox.cue_start_position[k]) {
 8017c82:	6823      	ldr	r3, [r4, #0]
 8017c84:	4299      	cmp	r1, r3
 8017c86:	dced      	bgt.n	8017c64 <DrawSpectrum+0x1b8>
			if(new_cues[k] != check) new_cues[k] = check;
 8017c88:	6823      	ldr	r3, [r4, #0]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d0d8      	beq.n	8017c40 <DrawSpectrum+0x194>
 8017c8e:	6823      	ldr	r3, [r4, #0]
 8017c90:	6003      	str	r3, [r0, #0]
 8017c92:	e7d5      	b.n	8017c40 <DrawSpectrum+0x194>
 8017c94:	f06f 090a 	mvn.w	r9, #10
 8017c98:	f04f 0801 	mov.w	r8, #1
 8017c9c:	2600      	movs	r6, #0
 8017c9e:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8017d94 <DrawSpectrum+0x2e8>
 8017ca2:	e00a      	b.n	8017cba <DrawSpectrum+0x20e>
	for(i = 0; i < 480; i++)
 8017ca4:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 8017ca8:	f000 80f9 	beq.w	8017e9e <DrawSpectrum+0x3f2>
		check = position + (int32_t)((i-240)*stretch);
 8017cac:	edda 7a00 	vldr	s15, [sl]
 8017cb0:	3601      	adds	r6, #1
 8017cb2:	f108 0801 	add.w	r8, r8, #1
 8017cb6:	f109 0901 	add.w	r9, r9, #1
 8017cba:	f1a6 03f0 	sub.w	r3, r6, #240	; 0xf0
 8017cbe:	ee07 3a10 	vmov	s14, r3
 8017cc2:	682b      	ldr	r3, [r5, #0]
 8017cc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017cd0:	ee17 2a90 	vmov	r2, s15
 8017cd4:	441a      	add	r2, r3
 8017cd6:	6022      	str	r2, [r4, #0]
		if(check > 0) {
 8017cd8:	6823      	ldr	r3, [r4, #0]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	dde2      	ble.n	8017ca4 <DrawSpectrum+0x1f8>
			if(first_beat <= rekordbox.timezones) {
 8017cde:	4b26      	ldr	r3, [pc, #152]	; (8017d78 <DrawSpectrum+0x2cc>)
 8017ce0:	f8db 2500 	ldr.w	r2, [fp, #1280]	; 0x500
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	d326      	bcc.n	8017d38 <DrawSpectrum+0x28c>
				if(check >= (int32_t)(rekordbox.timeindex[first_beat]*150/1000)) {
 8017cea:	f503 62be 	add.w	r2, r3, #1520	; 0x5f0
 8017cee:	2196      	movs	r1, #150	; 0x96
 8017cf0:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8017cf4:	6852      	ldr	r2, [r2, #4]
 8017cf6:	fb01 f202 	mul.w	r2, r1, r2
 8017cfa:	4920      	ldr	r1, [pc, #128]	; (8017d7c <DrawSpectrum+0x2d0>)
 8017cfc:	fba1 1202 	umull	r1, r2, r1, r2
 8017d00:	6821      	ldr	r1, [r4, #0]
 8017d02:	ebb1 1f92 	cmp.w	r1, r2, lsr #6
 8017d06:	db17      	blt.n	8017d38 <DrawSpectrum+0x28c>
					if(rekordbox.phase[first_beat] == 1) {
 8017d08:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8017d0c:	b2b0      	uxth	r0, r6
 8017d0e:	f8b3 3e64 	ldrh.w	r3, [r3, #3684]	; 0xe64
 8017d12:	2b01      	cmp	r3, #1
 8017d14:	f000 80b6 	beq.w	8017e84 <DrawSpectrum+0x3d8>
						VLine(i, 75, 4, 0x00FFFFFF);
 8017d18:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017d1c:	214b      	movs	r1, #75	; 0x4b
 8017d1e:	61b8      	str	r0, [r7, #24]
 8017d20:	f7fb fc5a 	bl	80135d8 <VLine.constprop.0>
						VLine(i, 161, 4, 0x00FFFFFF);
 8017d24:	69b8      	ldr	r0, [r7, #24]
 8017d26:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017d2a:	21a1      	movs	r1, #161	; 0xa1
 8017d2c:	f7fb fc54 	bl	80135d8 <VLine.constprop.0>
					first_beat++;
 8017d30:	4a11      	ldr	r2, [pc, #68]	; (8017d78 <DrawSpectrum+0x2cc>)
 8017d32:	6813      	ldr	r3, [r2, #0]
 8017d34:	3301      	adds	r3, #1
 8017d36:	6013      	str	r3, [r2, #0]
			if(rekordbox.state == 1) {
 8017d38:	4b11      	ldr	r3, [pc, #68]	; (8017d80 <DrawSpectrum+0x2d4>)
 8017d3a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8017d3e:	2b01      	cmp	r3, #1
 8017d40:	d067      	beq.n	8017e12 <DrawSpectrum+0x366>
			for(int k = 1; k < rekordbox.cues; k++) {
 8017d42:	4b06      	ldr	r3, [pc, #24]	; (8017d5c <DrawSpectrum+0x2b0>)
 8017d44:	f8d3 1b94 	ldr.w	r1, [r3, #2964]	; 0xb94
 8017d48:	2901      	cmp	r1, #1
 8017d4a:	ddab      	ble.n	8017ca4 <DrawSpectrum+0x1f8>
 8017d4c:	69fa      	ldr	r2, [r7, #28]
 8017d4e:	2301      	movs	r3, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017d50:	f44f 4e78 	mov.w	lr, #63488	; 0xf800
 8017d54:	e023      	b.n	8017d9e <DrawSpectrum+0x2f2>
 8017d56:	bf00      	nop
 8017d58:	200009a8 	.word	0x200009a8
 8017d5c:	20017208 	.word	0x20017208
 8017d60:	2000e9a4 	.word	0x2000e9a4
 8017d64:	20000980 	.word	0x20000980
 8017d68:	200009a0 	.word	0x200009a0
 8017d6c:	008f8f8f 	.word	0x008f8f8f
 8017d70:	c3700000 	.word	0xc3700000
 8017d74:	2001824c 	.word	0x2001824c
 8017d78:	2000099c 	.word	0x2000099c
 8017d7c:	10624dd3 	.word	0x10624dd3
 8017d80:	20018208 	.word	0x20018208
 8017d84:	20000028 	.word	0x20000028
 8017d88:	c0100000 	.word	0xc0100000
 8017d8c:	20000988 	.word	0x20000988
 8017d90:	20000984 	.word	0x20000984
 8017d94:	20015208 	.word	0x20015208
			for(int k = 1; k < rekordbox.cues; k++) {
 8017d98:	3301      	adds	r3, #1
 8017d9a:	4299      	cmp	r1, r3
 8017d9c:	dd82      	ble.n	8017ca4 <DrawSpectrum+0x1f8>
				if(check == new_cues[k]) {
 8017d9e:	6820      	ldr	r0, [r4, #0]
 8017da0:	f852 cf04 	ldr.w	ip, [r2, #4]!
 8017da4:	4584      	cmp	ip, r0
 8017da6:	d1f7      	bne.n	8017d98 <DrawSpectrum+0x2ec>
					if((i > 10) && (i < 472))
 8017da8:	f5b9 7fe6 	cmp.w	r9, #460	; 0x1cc
 8017dac:	d8f4      	bhi.n	8017d98 <DrawSpectrum+0x2ec>
 8017dae:	2000      	movs	r0, #0
 8017db0:	f8c7 9018 	str.w	r9, [r7, #24]
 8017db4:	6178      	str	r0, [r7, #20]
 8017db6:	e9c7 3102 	strd	r3, r1, [r7, #8]
			if(((element[i] >> k) & 1) == 1) {
 8017dba:	4b7b      	ldr	r3, [pc, #492]	; (8017fa8 <DrawSpectrum+0x4fc>)
 8017dbc:	6979      	ldr	r1, [r7, #20]
 8017dbe:	607a      	str	r2, [r7, #4]
 8017dc0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8017dc4:	613b      	str	r3, [r7, #16]
 8017dc6:	2348      	movs	r3, #72	; 0x48
 8017dc8:	f1c3 0148 	rsb	r1, r3, #72	; 0x48
 8017dcc:	6938      	ldr	r0, [r7, #16]
 8017dce:	fa40 f101 	asr.w	r1, r0, r1
 8017dd2:	f011 0101 	ands.w	r1, r1, #1
 8017dd6:	f000 82fa 	beq.w	80183ce <DrawSpectrum+0x922>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017dda:	4974      	ldr	r1, [pc, #464]	; (8017fac <DrawSpectrum+0x500>)
 8017ddc:	2234      	movs	r2, #52	; 0x34
 8017dde:	4874      	ldr	r0, [pc, #464]	; (8017fb0 <DrawSpectrum+0x504>)
 8017de0:	7809      	ldrb	r1, [r1, #0]
 8017de2:	fb02 0101 	mla	r1, r2, r1, r0
 8017de6:	69ba      	ldr	r2, [r7, #24]
 8017de8:	e9d1 1017 	ldrd	r1, r0, [r1, #92]	; 0x5c
 8017dec:	fb00 2003 	mla	r0, r0, r3, r2
 8017df0:	f821 e010 	strh.w	lr, [r1, r0, lsl #1]
		while(k < height) {
 8017df4:	3b01      	subs	r3, #1
 8017df6:	2b43      	cmp	r3, #67	; 0x43
 8017df8:	d1e6      	bne.n	8017dc8 <DrawSpectrum+0x31c>
	while(i < width) {
 8017dfa:	697b      	ldr	r3, [r7, #20]
 8017dfc:	69b9      	ldr	r1, [r7, #24]
 8017dfe:	3301      	adds	r3, #1
 8017e00:	687a      	ldr	r2, [r7, #4]
 8017e02:	3101      	adds	r1, #1
 8017e04:	2b0f      	cmp	r3, #15
 8017e06:	617b      	str	r3, [r7, #20]
 8017e08:	61b9      	str	r1, [r7, #24]
 8017e0a:	d1d6      	bne.n	8017dba <DrawSpectrum+0x30e>
 8017e0c:	e9d7 3102 	ldrd	r3, r1, [r7, #8]
 8017e10:	e7c2      	b.n	8017d98 <DrawSpectrum+0x2ec>
				if(check == new_cues[0]) {
 8017e12:	69fa      	ldr	r2, [r7, #28]
 8017e14:	6823      	ldr	r3, [r4, #0]
 8017e16:	6812      	ldr	r2, [r2, #0]
 8017e18:	429a      	cmp	r2, r3
 8017e1a:	d192      	bne.n	8017d42 <DrawSpectrum+0x296>
					if((i > 10) && (i < 472))
 8017e1c:	f5b9 7fe6 	cmp.w	r9, #460	; 0x1cc
 8017e20:	d88f      	bhi.n	8017d42 <DrawSpectrum+0x296>
 8017e22:	46ce      	mov	lr, r9
 8017e24:	f04f 0c00 	mov.w	ip, #0
			if(((element[i] >> k) & 1) == 1) {
 8017e28:	4b5f      	ldr	r3, [pc, #380]	; (8017fa8 <DrawSpectrum+0x4fc>)
 8017e2a:	f833 301c 	ldrh.w	r3, [r3, ip, lsl #1]
 8017e2e:	61bb      	str	r3, [r7, #24]
 8017e30:	2348      	movs	r3, #72	; 0x48
 8017e32:	f1c3 0248 	rsb	r2, r3, #72	; 0x48
 8017e36:	69b9      	ldr	r1, [r7, #24]
 8017e38:	fa41 f202 	asr.w	r2, r1, r2
 8017e3c:	f012 0201 	ands.w	r2, r2, #1
 8017e40:	617a      	str	r2, [r7, #20]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017e42:	4a5a      	ldr	r2, [pc, #360]	; (8017fac <DrawSpectrum+0x500>)
 8017e44:	7812      	ldrb	r2, [r2, #0]
			if(((element[i] >> k) & 1) == 1) {
 8017e46:	f000 82b6 	beq.w	80183b6 <DrawSpectrum+0x90a>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017e4a:	4959      	ldr	r1, [pc, #356]	; (8017fb0 <DrawSpectrum+0x504>)
 8017e4c:	2034      	movs	r0, #52	; 0x34
 8017e4e:	fb00 1202 	mla	r2, r0, r2, r1
 8017e52:	e9d2 0117 	ldrd	r0, r1, [r2, #92]	; 0x5c
 8017e56:	fb01 e203 	mla	r2, r1, r3, lr
 8017e5a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8017e5e:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
		while(k < height) {
 8017e62:	3b01      	subs	r3, #1
 8017e64:	2b43      	cmp	r3, #67	; 0x43
 8017e66:	d1e4      	bne.n	8017e32 <DrawSpectrum+0x386>
	while(i < width) {
 8017e68:	f10c 0c01 	add.w	ip, ip, #1
 8017e6c:	f10e 0e01 	add.w	lr, lr, #1
 8017e70:	f1bc 0f0f 	cmp.w	ip, #15
 8017e74:	d1d8      	bne.n	8017e28 <DrawSpectrum+0x37c>
			for(int k = 1; k < rekordbox.cues; k++) {
 8017e76:	4b4f      	ldr	r3, [pc, #316]	; (8017fb4 <DrawSpectrum+0x508>)
 8017e78:	f8d3 1b94 	ldr.w	r1, [r3, #2964]	; 0xb94
 8017e7c:	2901      	cmp	r1, #1
 8017e7e:	f73f af65 	bgt.w	8017d4c <DrawSpectrum+0x2a0>
 8017e82:	e713      	b.n	8017cac <DrawSpectrum+0x200>
						VLine(i, 75, 4, 0x00FF0000);
 8017e84:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8017e88:	214b      	movs	r1, #75	; 0x4b
 8017e8a:	61b8      	str	r0, [r7, #24]
 8017e8c:	f7fb fba4 	bl	80135d8 <VLine.constprop.0>
						VLine(i, 161, 4, 0x00FF0000);
 8017e90:	69b8      	ldr	r0, [r7, #24]
 8017e92:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8017e96:	21a1      	movs	r1, #161	; 0xa1
 8017e98:	f7fb fb9e 	bl	80135d8 <VLine.constprop.0>
 8017e9c:	e748      	b.n	8017d30 <DrawSpectrum+0x284>
	VLine(239, 75, 90, 0x00FFFFFF);
 8017e9e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017ea2:	225a      	movs	r2, #90	; 0x5a
 8017ea4:	214b      	movs	r1, #75	; 0x4b
 8017ea6:	20ef      	movs	r0, #239	; 0xef
 8017ea8:	f7fb fce8 	bl	801387c <VLine>
	VLine(240, 75, 90, 0x00FFFFFF);
 8017eac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017eb0:	225a      	movs	r2, #90	; 0x5a
 8017eb2:	214b      	movs	r1, #75	; 0x4b
 8017eb4:	20f0      	movs	r0, #240	; 0xf0
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 8017eb6:	4e40      	ldr	r6, [pc, #256]	; (8017fb8 <DrawSpectrum+0x50c>)
	VLine(240, 75, 90, 0x00FFFFFF);
 8017eb8:	f7fb fce0 	bl	801387c <VLine>
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 8017ebc:	4b3d      	ldr	r3, [pc, #244]	; (8017fb4 <DrawSpectrum+0x508>)
 8017ebe:	6832      	ldr	r2, [r6, #0]
 8017ec0:	f893 3a84 	ldrb.w	r3, [r3, #2692]	; 0xa84
 8017ec4:	4c3d      	ldr	r4, [pc, #244]	; (8017fbc <DrawSpectrum+0x510>)
 8017ec6:	4413      	add	r3, r2
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	461a      	mov	r2, r3
 8017ecc:	bfb8      	it	lt
 8017ece:	1cda      	addlt	r2, r3, #3
	if(bar / 100 > 0) {
 8017ed0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 8017ed4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017ed8:	6022      	str	r2, [r4, #0]
	if(bar / 100 > 0) {
 8017eda:	f280 821d 	bge.w	8018318 <DrawSpectrum+0x86c>
	else if(bar / 10 > 0) DrawDigit(bar / 10, 314, 51, 7, 0x000000FF);
 8017ede:	2b27      	cmp	r3, #39	; 0x27
 8017ee0:	f300 8203 	bgt.w	80182ea <DrawSpectrum+0x83e>
	DrawDigit(bar % 10, 323, 51, 7, 0x000000FF);
 8017ee4:	4936      	ldr	r1, [pc, #216]	; (8017fc0 <DrawSpectrum+0x514>)
 8017ee6:	f04f 08ff 	mov.w	r8, #255	; 0xff
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017eea:	2434      	movs	r4, #52	; 0x34
 8017eec:	251f      	movs	r5, #31
	DrawDigit(bar % 10, 323, 51, 7, 0x000000FF);
 8017eee:	fb81 3102 	smull	r3, r1, r1, r2
 8017ef2:	17d3      	asrs	r3, r2, #31
 8017ef4:	f8cd 8000 	str.w	r8, [sp]
 8017ef8:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8017efc:	f240 1143 	movw	r1, #323	; 0x143
 8017f00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017f04:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
 8017f08:	2307      	movs	r3, #7
 8017f0a:	b2d0      	uxtb	r0, r2
 8017f0c:	2233      	movs	r2, #51	; 0x33
 8017f0e:	f7fb fd41 	bl	8013994 <DrawDigit>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017f12:	4926      	ldr	r1, [pc, #152]	; (8017fac <DrawSpectrum+0x500>)
 8017f14:	4826      	ldr	r0, [pc, #152]	; (8017fb0 <DrawSpectrum+0x504>)
 8017f16:	780a      	ldrb	r2, [r1, #0]
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 8017f18:	6833      	ldr	r3, [r6, #0]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017f1a:	fb04 0202 	mla	r2, r4, r2, r0
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 8017f1e:	eb0b 0c43 	add.w	ip, fp, r3, lsl #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017f22:	e9d2 2317 	ldrd	r2, r3, [r2, #92]	; 0x5c
 8017f26:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8017f2a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8017f2e:	f822 5013 	strh.w	r5, [r2, r3, lsl #1]
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 8017f32:	2233      	movs	r2, #51	; 0x33
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017f34:	f891 e000 	ldrb.w	lr, [r1]
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 8017f38:	2307      	movs	r3, #7
 8017f3a:	f44f 71a8 	mov.w	r1, #336	; 0x150
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017f3e:	fb04 0e0e 	mla	lr, r4, lr, r0
 8017f42:	e9de e017 	ldrd	lr, r0, [lr, #92]	; 0x5c
 8017f46:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8017f4a:	0040      	lsls	r0, r0, #1
 8017f4c:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
 8017f50:	f82e 5010 	strh.w	r5, [lr, r0, lsl #1]
 8017f54:	4815      	ldr	r0, [pc, #84]	; (8017fac <DrawSpectrum+0x500>)
 8017f56:	f890 e000 	ldrb.w	lr, [r0]
 8017f5a:	4815      	ldr	r0, [pc, #84]	; (8017fb0 <DrawSpectrum+0x504>)
 8017f5c:	fb04 0e0e 	mla	lr, r4, lr, r0
 8017f60:	e9de e017 	ldrd	lr, r0, [lr, #92]	; 0x5c
 8017f64:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
 8017f68:	f200 104d 	addw	r0, r0, #333	; 0x14d
 8017f6c:	f82e 5010 	strh.w	r5, [lr, r0, lsl #1]
 8017f70:	480e      	ldr	r0, [pc, #56]	; (8017fac <DrawSpectrum+0x500>)
 8017f72:	f890 e000 	ldrb.w	lr, [r0]
 8017f76:	480e      	ldr	r0, [pc, #56]	; (8017fb0 <DrawSpectrum+0x504>)
 8017f78:	fb04 0e0e 	mla	lr, r4, lr, r0
 8017f7c:	e9de e017 	ldrd	lr, r0, [lr, #92]	; 0x5c
 8017f80:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8017f84:	0040      	lsls	r0, r0, #1
 8017f86:	f200 104d 	addw	r0, r0, #333	; 0x14d
 8017f8a:	f82e 5010 	strh.w	r5, [lr, r0, lsl #1]
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 8017f8e:	f8cd 8000 	str.w	r8, [sp]
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017f92:	f04f 083a 	mov.w	r8, #58	; 0x3a
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 8017f96:	f89c 0e64 	ldrb.w	r0, [ip, #3684]	; 0xe64
 8017f9a:	f7fb fcfb 	bl	8013994 <DrawDigit>
	while(i < width) {
 8017f9e:	4809      	ldr	r0, [pc, #36]	; (8017fc4 <DrawSpectrum+0x518>)
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	f100 0e26 	add.w	lr, r0, #38	; 0x26
 8017fa6:	e080      	b.n	80180aa <DrawSpectrum+0x5fe>
 8017fa8:	0802437c 	.word	0x0802437c
 8017fac:	20000b44 	.word	0x20000b44
 8017fb0:	20000a9c 	.word	0x20000a9c
 8017fb4:	20017208 	.word	0x20017208
 8017fb8:	2000097c 	.word	0x2000097c
 8017fbc:	20000978 	.word	0x20000978
 8017fc0:	66666667 	.word	0x66666667
 8017fc4:	08023a3a 	.word	0x08023a3a
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017fc8:	f891 9000 	ldrb.w	r9, [r1]
 8017fcc:	49cf      	ldr	r1, [pc, #828]	; (801830c <DrawSpectrum+0x860>)
 8017fce:	fb04 1909 	mla	r9, r4, r9, r1
 8017fd2:	e9d9 9117 	ldrd	r9, r1, [r9, #92]	; 0x5c
 8017fd6:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 8017fda:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 8017fde:	4411      	add	r1, r2
 8017fe0:	f829 c011 	strh.w	ip, [r9, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8017fe4:	f013 0c02 	ands.w	ip, r3, #2
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8017fe8:	49c9      	ldr	r1, [pc, #804]	; (8018310 <DrawSpectrum+0x864>)
			if(((element[i] >> k) & 1) == 1) {
 8017fea:	d176      	bne.n	80180da <DrawSpectrum+0x62e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8017fec:	f891 9000 	ldrb.w	r9, [r1]
 8017ff0:	49c6      	ldr	r1, [pc, #792]	; (801830c <DrawSpectrum+0x860>)
 8017ff2:	fb04 1909 	mla	r9, r4, r9, r1
 8017ff6:	e9d9 9117 	ldrd	r9, r1, [r9, #92]	; 0x5c
 8017ffa:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8017ffe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018002:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 8018006:	f829 c011 	strh.w	ip, [r9, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 801800a:	f013 0c04 	ands.w	ip, r3, #4
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801800e:	49c0      	ldr	r1, [pc, #768]	; (8018310 <DrawSpectrum+0x864>)
			if(((element[i] >> k) & 1) == 1) {
 8018010:	d176      	bne.n	8018100 <DrawSpectrum+0x654>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8018012:	f891 9000 	ldrb.w	r9, [r1]
 8018016:	49bd      	ldr	r1, [pc, #756]	; (801830c <DrawSpectrum+0x860>)
 8018018:	fb04 1909 	mla	r9, r4, r9, r1
 801801c:	e9d9 9117 	ldrd	r9, r1, [r9, #92]	; 0x5c
 8018020:	ebc1 1a01 	rsb	sl, r1, r1, lsl #4
 8018024:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018028:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 801802c:	4411      	add	r1, r2
 801802e:	f829 c011 	strh.w	ip, [r9, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8018032:	f013 0c08 	ands.w	ip, r3, #8
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8018036:	49b6      	ldr	r1, [pc, #728]	; (8018310 <DrawSpectrum+0x864>)
			if(((element[i] >> k) & 1) == 1) {
 8018038:	d176      	bne.n	8018128 <DrawSpectrum+0x67c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801803a:	f891 9000 	ldrb.w	r9, [r1]
 801803e:	49b3      	ldr	r1, [pc, #716]	; (801830c <DrawSpectrum+0x860>)
 8018040:	fb04 1909 	mla	r9, r4, r9, r1
 8018044:	e9d9 9117 	ldrd	r9, r1, [r9, #92]	; 0x5c
 8018048:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 801804c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8018050:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 8018054:	f829 c011 	strh.w	ip, [r9, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8018058:	f013 0c10 	ands.w	ip, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801805c:	49ac      	ldr	r1, [pc, #688]	; (8018310 <DrawSpectrum+0x864>)
			if(((element[i] >> k) & 1) == 1) {
 801805e:	d176      	bne.n	801814e <DrawSpectrum+0x6a2>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8018060:	f891 9000 	ldrb.w	r9, [r1]
			if(((element[i] >> k) & 1) == 1) {
 8018064:	f013 0320 	ands.w	r3, r3, #32
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8018068:	49a8      	ldr	r1, [pc, #672]	; (801830c <DrawSpectrum+0x860>)
 801806a:	fb04 1909 	mla	r9, r4, r9, r1
 801806e:	e9d9 9117 	ldrd	r9, r1, [r9, #92]	; 0x5c
 8018072:	ebc1 1a01 	rsb	sl, r1, r1, lsl #4
 8018076:	ebc1 018a 	rsb	r1, r1, sl, lsl #2
 801807a:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 801807e:	4411      	add	r1, r2
 8018080:	f829 c011 	strh.w	ip, [r9, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8018084:	d176      	bne.n	8018174 <DrawSpectrum+0x6c8>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8018086:	49a2      	ldr	r1, [pc, #648]	; (8018310 <DrawSpectrum+0x864>)
	while(i < width) {
 8018088:	4586      	cmp	lr, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 801808a:	f891 c000 	ldrb.w	ip, [r1]
 801808e:	499f      	ldr	r1, [pc, #636]	; (801830c <DrawSpectrum+0x860>)
 8018090:	fb04 1c0c 	mla	ip, r4, ip, r1
 8018094:	e9dc c117 	ldrd	ip, r1, [ip, #92]	; 0x5c
 8018098:	fb08 2101 	mla	r1, r8, r1, r2
	while(i < width) {
 801809c:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80180a0:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 80180a4:	f82c 3011 	strh.w	r3, [ip, r1, lsl #1]
	while(i < width) {
 80180a8:	d075      	beq.n	8018196 <DrawSpectrum+0x6ea>
			if(((element[i] >> k) & 1) == 1) {
 80180aa:	f830 3f02 	ldrh.w	r3, [r0, #2]!
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80180ae:	4998      	ldr	r1, [pc, #608]	; (8018310 <DrawSpectrum+0x864>)
			if(((element[i] >> k) & 1) == 1) {
 80180b0:	f013 0c01 	ands.w	ip, r3, #1
 80180b4:	d088      	beq.n	8017fc8 <DrawSpectrum+0x51c>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80180b6:	f891 c000 	ldrb.w	ip, [r1]
 80180ba:	4994      	ldr	r1, [pc, #592]	; (801830c <DrawSpectrum+0x860>)
 80180bc:	fb04 1c0c 	mla	ip, r4, ip, r1
 80180c0:	e9dc c117 	ldrd	ip, r1, [ip, #92]	; 0x5c
 80180c4:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 80180c8:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 80180cc:	4411      	add	r1, r2
 80180ce:	f82c 5011 	strh.w	r5, [ip, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80180d2:	f013 0c02 	ands.w	ip, r3, #2
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80180d6:	498e      	ldr	r1, [pc, #568]	; (8018310 <DrawSpectrum+0x864>)
			if(((element[i] >> k) & 1) == 1) {
 80180d8:	d088      	beq.n	8017fec <DrawSpectrum+0x540>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80180da:	f891 c000 	ldrb.w	ip, [r1]
 80180de:	498b      	ldr	r1, [pc, #556]	; (801830c <DrawSpectrum+0x860>)
 80180e0:	fb04 1c0c 	mla	ip, r4, ip, r1
 80180e4:	e9dc c117 	ldrd	ip, r1, [ip, #92]	; 0x5c
 80180e8:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80180ec:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80180f0:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 80180f4:	f82c 5011 	strh.w	r5, [ip, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 80180f8:	f013 0c04 	ands.w	ip, r3, #4
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 80180fc:	4984      	ldr	r1, [pc, #528]	; (8018310 <DrawSpectrum+0x864>)
			if(((element[i] >> k) & 1) == 1) {
 80180fe:	d088      	beq.n	8018012 <DrawSpectrum+0x566>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8018100:	f891 c000 	ldrb.w	ip, [r1]
 8018104:	4981      	ldr	r1, [pc, #516]	; (801830c <DrawSpectrum+0x860>)
 8018106:	fb04 1c0c 	mla	ip, r4, ip, r1
 801810a:	e9dc c117 	ldrd	ip, r1, [ip, #92]	; 0x5c
 801810e:	ebc1 1901 	rsb	r9, r1, r1, lsl #4
 8018112:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 8018116:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 801811a:	4411      	add	r1, r2
 801811c:	f82c 5011 	strh.w	r5, [ip, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8018120:	f013 0c08 	ands.w	ip, r3, #8
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8018124:	497a      	ldr	r1, [pc, #488]	; (8018310 <DrawSpectrum+0x864>)
			if(((element[i] >> k) & 1) == 1) {
 8018126:	d088      	beq.n	801803a <DrawSpectrum+0x58e>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8018128:	f891 c000 	ldrb.w	ip, [r1]
 801812c:	4977      	ldr	r1, [pc, #476]	; (801830c <DrawSpectrum+0x860>)
 801812e:	fb04 1c0c 	mla	ip, r4, ip, r1
 8018132:	e9dc c117 	ldrd	ip, r1, [ip, #92]	; 0x5c
 8018136:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 801813a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801813e:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 8018142:	f82c 5011 	strh.w	r5, [ip, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8018146:	f013 0c10 	ands.w	ip, r3, #16
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801814a:	4971      	ldr	r1, [pc, #452]	; (8018310 <DrawSpectrum+0x864>)
			if(((element[i] >> k) & 1) == 1) {
 801814c:	d088      	beq.n	8018060 <DrawSpectrum+0x5b4>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801814e:	f891 c000 	ldrb.w	ip, [r1]
			if(((element[i] >> k) & 1) == 1) {
 8018152:	f013 0320 	ands.w	r3, r3, #32
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8018156:	496d      	ldr	r1, [pc, #436]	; (801830c <DrawSpectrum+0x860>)
 8018158:	fb04 1c0c 	mla	ip, r4, ip, r1
 801815c:	e9dc c117 	ldrd	ip, r1, [ip, #92]	; 0x5c
 8018160:	ebc1 1901 	rsb	r9, r1, r1, lsl #4
 8018164:	ebc1 0189 	rsb	r1, r1, r9, lsl #2
 8018168:	f501 71ae 	add.w	r1, r1, #348	; 0x15c
 801816c:	4411      	add	r1, r2
 801816e:	f82c 5011 	strh.w	r5, [ip, r1, lsl #1]
			if(((element[i] >> k) & 1) == 1) {
 8018172:	d088      	beq.n	8018086 <DrawSpectrum+0x5da>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8018174:	4b66      	ldr	r3, [pc, #408]	; (8018310 <DrawSpectrum+0x864>)
	while(i < width) {
 8018176:	4586      	cmp	lr, r0
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8018178:	7819      	ldrb	r1, [r3, #0]
 801817a:	4b64      	ldr	r3, [pc, #400]	; (801830c <DrawSpectrum+0x860>)
 801817c:	fb04 3101 	mla	r1, r4, r1, r3
 8018180:	e9d1 1317 	ldrd	r1, r3, [r1, #92]	; 0x5c
 8018184:	fb08 2303 	mla	r3, r8, r3, r2
	while(i < width) {
 8018188:	f102 0201 	add.w	r2, r2, #1
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 801818c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8018190:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
	while(i < width) {
 8018194:	d189      	bne.n	80180aa <DrawSpectrum+0x5fe>
	VLine(171, 54, 9, 0x000000FF);
 8018196:	23ff      	movs	r3, #255	; 0xff
 8018198:	2209      	movs	r2, #9
 801819a:	2136      	movs	r1, #54	; 0x36
 801819c:	20ab      	movs	r0, #171	; 0xab
 801819e:	f7fb fb6d 	bl	801387c <VLine>
	HLine(172, 54, 28, 0x000000FF);
 80181a2:	23ff      	movs	r3, #255	; 0xff
 80181a4:	221c      	movs	r2, #28
 80181a6:	2136      	movs	r1, #54	; 0x36
 80181a8:	20ac      	movs	r0, #172	; 0xac
 80181aa:	f7fb fbad 	bl	8013908 <HLine>
	HLine(172, 62, 28, 0x000000FF);
 80181ae:	23ff      	movs	r3, #255	; 0xff
 80181b0:	221c      	movs	r2, #28
 80181b2:	213e      	movs	r1, #62	; 0x3e
 80181b4:	20ac      	movs	r0, #172	; 0xac
 80181b6:	f7fb fba7 	bl	8013908 <HLine>
	VLine(200, 54, 9, 0x000000FF);
 80181ba:	23ff      	movs	r3, #255	; 0xff
 80181bc:	2209      	movs	r2, #9
 80181be:	2136      	movs	r1, #54	; 0x36
 80181c0:	20c8      	movs	r0, #200	; 0xc8
 80181c2:	f7fb fb5b 	bl	801387c <VLine>
	VLine(201, 57, 3, 0x000000FF);
 80181c6:	23ff      	movs	r3, #255	; 0xff
 80181c8:	2203      	movs	r2, #3
 80181ca:	2139      	movs	r1, #57	; 0x39
 80181cc:	20c9      	movs	r0, #201	; 0xc9
 80181ce:	f7fb fb55 	bl	801387c <VLine>
	VLine(202, 57, 3, 0x000000FF);
 80181d2:	23ff      	movs	r3, #255	; 0xff
 80181d4:	2203      	movs	r2, #3
 80181d6:	2139      	movs	r1, #57	; 0x39
 80181d8:	20ca      	movs	r0, #202	; 0xca
 80181da:	f7fb fb4f 	bl	801387c <VLine>
	VLine(203, 57, 3, 0x000000FF);
 80181de:	23ff      	movs	r3, #255	; 0xff
 80181e0:	2203      	movs	r2, #3
 80181e2:	2139      	movs	r1, #57	; 0x39
 80181e4:	20cb      	movs	r0, #203	; 0xcb
 80181e6:	f7fb fb49 	bl	801387c <VLine>
	VLine(204, 54, 9, 0x000000FF);
 80181ea:	23ff      	movs	r3, #255	; 0xff
 80181ec:	2209      	movs	r2, #9
 80181ee:	2136      	movs	r1, #54	; 0x36
 80181f0:	20cc      	movs	r0, #204	; 0xcc
 80181f2:	f7fb fb43 	bl	801387c <VLine>
	HLine(205, 54, 28, 0x000000FF);
 80181f6:	23ff      	movs	r3, #255	; 0xff
 80181f8:	221c      	movs	r2, #28
 80181fa:	2136      	movs	r1, #54	; 0x36
 80181fc:	20cd      	movs	r0, #205	; 0xcd
 80181fe:	f7fb fb83 	bl	8013908 <HLine>
	HLine(205, 62, 28, 0x000000FF);
 8018202:	23ff      	movs	r3, #255	; 0xff
 8018204:	221c      	movs	r2, #28
 8018206:	213e      	movs	r1, #62	; 0x3e
 8018208:	20cd      	movs	r0, #205	; 0xcd
 801820a:	f7fb fb7d 	bl	8013908 <HLine>
	VLine(233, 54, 9, 0x000000FF);
 801820e:	23ff      	movs	r3, #255	; 0xff
 8018210:	2209      	movs	r2, #9
 8018212:	2136      	movs	r1, #54	; 0x36
 8018214:	20e9      	movs	r0, #233	; 0xe9
 8018216:	f7fb fb31 	bl	801387c <VLine>
	VLine(234, 57, 3, 0x000000FF);
 801821a:	23ff      	movs	r3, #255	; 0xff
 801821c:	2203      	movs	r2, #3
 801821e:	2139      	movs	r1, #57	; 0x39
 8018220:	20ea      	movs	r0, #234	; 0xea
 8018222:	f7fb fb2b 	bl	801387c <VLine>
	VLine(235, 57, 3, 0x000000FF);
 8018226:	23ff      	movs	r3, #255	; 0xff
 8018228:	2203      	movs	r2, #3
 801822a:	2139      	movs	r1, #57	; 0x39
 801822c:	20eb      	movs	r0, #235	; 0xeb
 801822e:	f7fb fb25 	bl	801387c <VLine>
	VLine(236, 57, 3, 0x000000FF);
 8018232:	23ff      	movs	r3, #255	; 0xff
 8018234:	2203      	movs	r2, #3
 8018236:	2139      	movs	r1, #57	; 0x39
 8018238:	20ec      	movs	r0, #236	; 0xec
 801823a:	f7fb fb1f 	bl	801387c <VLine>
	VLine(237, 54, 9, 0x000000FF);
 801823e:	23ff      	movs	r3, #255	; 0xff
 8018240:	2209      	movs	r2, #9
 8018242:	2136      	movs	r1, #54	; 0x36
 8018244:	20ed      	movs	r0, #237	; 0xed
 8018246:	f7fb fb19 	bl	801387c <VLine>
	HLine(238, 54, 28, 0x000000FF);
 801824a:	23ff      	movs	r3, #255	; 0xff
 801824c:	221c      	movs	r2, #28
 801824e:	2136      	movs	r1, #54	; 0x36
 8018250:	20ee      	movs	r0, #238	; 0xee
 8018252:	f7fb fb59 	bl	8013908 <HLine>
	HLine(238, 62, 28, 0x000000FF);
 8018256:	23ff      	movs	r3, #255	; 0xff
 8018258:	221c      	movs	r2, #28
 801825a:	213e      	movs	r1, #62	; 0x3e
 801825c:	20ee      	movs	r0, #238	; 0xee
 801825e:	f7fb fb53 	bl	8013908 <HLine>
	VLine(266, 54, 9, 0x000000FF);
 8018262:	23ff      	movs	r3, #255	; 0xff
 8018264:	2209      	movs	r2, #9
 8018266:	2136      	movs	r1, #54	; 0x36
 8018268:	f44f 7085 	mov.w	r0, #266	; 0x10a
 801826c:	f7fb fb06 	bl	801387c <VLine>
	VLine(267, 57, 3, 0x000000FF);
 8018270:	23ff      	movs	r3, #255	; 0xff
 8018272:	2203      	movs	r2, #3
 8018274:	2139      	movs	r1, #57	; 0x39
 8018276:	f240 100b 	movw	r0, #267	; 0x10b
 801827a:	f7fb faff 	bl	801387c <VLine>
	VLine(268, 57, 3, 0x000000FF);
 801827e:	23ff      	movs	r3, #255	; 0xff
 8018280:	2203      	movs	r2, #3
 8018282:	2139      	movs	r1, #57	; 0x39
 8018284:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8018288:	f7fb faf8 	bl	801387c <VLine>
	VLine(269, 57, 3, 0x000000FF);
 801828c:	23ff      	movs	r3, #255	; 0xff
 801828e:	2203      	movs	r2, #3
 8018290:	2139      	movs	r1, #57	; 0x39
 8018292:	f240 100d 	movw	r0, #269	; 0x10d
 8018296:	f7fb faf1 	bl	801387c <VLine>
	VLine(270, 54, 9, 0x000000FF);
 801829a:	23ff      	movs	r3, #255	; 0xff
 801829c:	2209      	movs	r2, #9
 801829e:	2136      	movs	r1, #54	; 0x36
 80182a0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80182a4:	f7fb faea 	bl	801387c <VLine>
	HLine(271, 54, 28, 0x000000FF);
 80182a8:	23ff      	movs	r3, #255	; 0xff
 80182aa:	221c      	movs	r2, #28
 80182ac:	2136      	movs	r1, #54	; 0x36
 80182ae:	f240 100f 	movw	r0, #271	; 0x10f
 80182b2:	f7fb fb29 	bl	8013908 <HLine>
	HLine(271, 62, 28, 0x000000FF);
 80182b6:	23ff      	movs	r3, #255	; 0xff
 80182b8:	221c      	movs	r2, #28
 80182ba:	213e      	movs	r1, #62	; 0x3e
 80182bc:	f240 100f 	movw	r0, #271	; 0x10f
 80182c0:	f7fb fb22 	bl	8013908 <HLine>
	VLine(299, 54, 9, 0x000000FF);
 80182c4:	23ff      	movs	r3, #255	; 0xff
 80182c6:	2209      	movs	r2, #9
 80182c8:	2136      	movs	r1, #54	; 0x36
 80182ca:	f240 102b 	movw	r0, #299	; 0x12b
 80182ce:	f7fb fad5 	bl	801387c <VLine>
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 80182d2:	6833      	ldr	r3, [r6, #0]
 80182d4:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80182d8:	f8b3 4e64 	ldrh.w	r4, [r3, #3684]	; 0xe64
 80182dc:	2c00      	cmp	r4, #0
 80182de:	d13f      	bne.n	8018360 <DrawSpectrum+0x8b4>
}
 80182e0:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80182e4:	46bd      	mov	sp, r7
 80182e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if(bar / 10 > 0) DrawDigit(bar / 10, 314, 51, 7, 0x000000FF);
 80182ea:	480a      	ldr	r0, [pc, #40]	; (8018314 <DrawSpectrum+0x868>)
 80182ec:	fb80 2003 	smull	r2, r0, r0, r3
 80182f0:	17db      	asrs	r3, r3, #31
 80182f2:	ebc3 1020 	rsb	r0, r3, r0, asr #4
 80182f6:	23ff      	movs	r3, #255	; 0xff
 80182f8:	b2c0      	uxtb	r0, r0
 80182fa:	9300      	str	r3, [sp, #0]
 80182fc:	2233      	movs	r2, #51	; 0x33
 80182fe:	2307      	movs	r3, #7
 8018300:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8018304:	f7fb fb46 	bl	8013994 <DrawDigit>
	DrawDigit(bar % 10, 323, 51, 7, 0x000000FF);
 8018308:	6822      	ldr	r2, [r4, #0]
 801830a:	e5eb      	b.n	8017ee4 <DrawSpectrum+0x438>
 801830c:	20000a9c 	.word	0x20000a9c
 8018310:	20000b44 	.word	0x20000b44
 8018314:	66666667 	.word	0x66666667
		DrawDigit(bar / 100, 305, 51, 7, 0x000000FF);
 8018318:	4d34      	ldr	r5, [pc, #208]	; (80183ec <DrawSpectrum+0x940>)
 801831a:	17da      	asrs	r2, r3, #31
 801831c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8018320:	fb85 1303 	smull	r1, r3, r5, r3
 8018324:	f240 1131 	movw	r1, #305	; 0x131
 8018328:	f8cd 8000 	str.w	r8, [sp]
 801832c:	ebc2 13e3 	rsb	r3, r2, r3, asr #7
 8018330:	2233      	movs	r2, #51	; 0x33
 8018332:	b2d8      	uxtb	r0, r3
 8018334:	2307      	movs	r3, #7
 8018336:	f7fb fb2d 	bl	8013994 <DrawDigit>
		DrawDigit(bar % 100 / 10 , 314, 51, 7, 0x000000FF);
 801833a:	f8cd 8000 	str.w	r8, [sp]
 801833e:	6823      	ldr	r3, [r4, #0]
 8018340:	482b      	ldr	r0, [pc, #172]	; (80183f0 <DrawSpectrum+0x944>)
 8018342:	fb85 2503 	smull	r2, r5, r5, r3
 8018346:	17da      	asrs	r2, r3, #31
 8018348:	ebc2 1565 	rsb	r5, r2, r5, asr #5
 801834c:	2264      	movs	r2, #100	; 0x64
 801834e:	fb02 3315 	mls	r3, r2, r5, r3
 8018352:	fb80 2003 	smull	r2, r0, r0, r3
 8018356:	17db      	asrs	r3, r3, #31
 8018358:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 801835c:	b2c0      	uxtb	r0, r0
 801835e:	e7cd      	b.n	80182fc <DrawSpectrum+0x850>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018360:	4b24      	ldr	r3, [pc, #144]	; (80183f4 <DrawSpectrum+0x948>)
 8018362:	2234      	movs	r2, #52	; 0x34
 8018364:	4924      	ldr	r1, [pc, #144]	; (80183f8 <DrawSpectrum+0x94c>)
 8018366:	781b      	ldrb	r3, [r3, #0]
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8018368:	4d24      	ldr	r5, [pc, #144]	; (80183fc <DrawSpectrum+0x950>)
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 801836a:	fb02 1303 	mla	r3, r2, r3, r1
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 801836e:	4628      	mov	r0, r5
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018370:	e9d3 8617 	ldrd	r8, r6, [r3, #92]	; 0x5c
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8018374:	f1a6 031c 	sub.w	r3, r6, #28
 8018378:	60eb      	str	r3, [r5, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 801837a:	f7e9 faa3 	bl	80018c4 <HAL_DMA2D_Init>
 801837e:	2800      	cmp	r0, #0
 8018380:	d1ae      	bne.n	80182e0 <DrawSpectrum+0x834>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018382:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018386:	2307      	movs	r3, #7
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 8018388:	eb04 1444 	add.w	r4, r4, r4, lsl #5
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 801838c:	4628      	mov	r0, r5
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 801838e:	ebc6 06c1 	rsb	r6, r6, r1, lsl #3
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018392:	9300      	str	r3, [sp, #0]
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 8018394:	f104 028b 	add.w	r2, r4, #139	; 0x8b
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018398:	231c      	movs	r3, #28
 801839a:	21ff      	movs	r1, #255	; 0xff
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 801839c:	fa16 f282 	uxtah	r2, r6, r2
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 80183a0:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 80183a4:	f7e9 fae4 	bl	8001970 <HAL_DMA2D_Start>
 80183a8:	2800      	cmp	r0, #0
 80183aa:	d199      	bne.n	80182e0 <DrawSpectrum+0x834>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 80183ac:	2164      	movs	r1, #100	; 0x64
 80183ae:	4628      	mov	r0, r5
 80183b0:	f7e9 fb54 	bl	8001a5c <HAL_DMA2D_PollForTransfer>
}
 80183b4:	e794      	b.n	80182e0 <DrawSpectrum+0x834>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 80183b6:	4810      	ldr	r0, [pc, #64]	; (80183f8 <DrawSpectrum+0x94c>)
 80183b8:	2134      	movs	r1, #52	; 0x34
 80183ba:	fb01 0202 	mla	r2, r1, r2, r0
 80183be:	6979      	ldr	r1, [r7, #20]
 80183c0:	e9d2 2017 	ldrd	r2, r0, [r2, #92]	; 0x5c
 80183c4:	fb00 e003 	mla	r0, r0, r3, lr
 80183c8:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
 80183cc:	e549      	b.n	8017e62 <DrawSpectrum+0x3b6>
 80183ce:	4a09      	ldr	r2, [pc, #36]	; (80183f4 <DrawSpectrum+0x948>)
 80183d0:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80183d4:	7810      	ldrb	r0, [r2, #0]
 80183d6:	4a08      	ldr	r2, [pc, #32]	; (80183f8 <DrawSpectrum+0x94c>)
 80183d8:	fb0c 2000 	mla	r0, ip, r0, r2
 80183dc:	69ba      	ldr	r2, [r7, #24]
 80183de:	e9d0 0c17 	ldrd	r0, ip, [r0, #92]	; 0x5c
 80183e2:	fb0c 2c03 	mla	ip, ip, r3, r2
 80183e6:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
 80183ea:	e503      	b.n	8017df4 <DrawSpectrum+0x348>
 80183ec:	51eb851f 	.word	0x51eb851f
 80183f0:	66666667 	.word	0x66666667
 80183f4:	20000b44 	.word	0x20000b44
 80183f8:	20000a9c 	.word	0x20000a9c
 80183fc:	200009ac 	.word	0x200009ac

08018400 <DrawString>:
{
 8018400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018404:	b089      	sub	sp, #36	; 0x24
	hdma2d.Init.Mode = DMA2D_R2M;
 8018406:	4d91      	ldr	r5, [pc, #580]	; (801864c <DrawString+0x24c>)
{
 8018408:	4616      	mov	r6, r2
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 801840a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
{
 801840e:	9307      	str	r3, [sp, #28]
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 8018410:	2302      	movs	r3, #2
{
 8018412:	4604      	mov	r4, r0
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8018414:	4628      	mov	r0, r5
{
 8018416:	4688      	mov	r8, r1
 8018418:	9f12      	ldr	r7, [sp, #72]	; 0x48
	hdma2d.Init.OutputOffset = Xpos;
 801841a:	60e9      	str	r1, [r5, #12]
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 801841c:	e9c5 2301 	strd	r2, r3, [r5, #4]
	hdma2d.Instance = DMA2D;
 8018420:	4b8b      	ldr	r3, [pc, #556]	; (8018650 <DrawString+0x250>)
 8018422:	602b      	str	r3, [r5, #0]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8018424:	f7e9 fa4e 	bl	80018c4 <HAL_DMA2D_Init>
 8018428:	2800      	cmp	r0, #0
 801842a:	f000 80e6 	beq.w	80185fa <DrawString+0x1fa>
	int xpos = Xpos + 5;
 801842e:	f108 0305 	add.w	r3, r8, #5
	Ypos -= 4;
 8018432:	3e04      	subs	r6, #4
	while(str[l] != 0) {
 8018434:	7822      	ldrb	r2, [r4, #0]
	int xpos = Xpos + 5;
 8018436:	9302      	str	r3, [sp, #8]
	Ypos -= 4;
 8018438:	b2b3      	uxth	r3, r6
 801843a:	9303      	str	r3, [sp, #12]
	while(str[l] != 0) {
 801843c:	2a00      	cmp	r2, #0
 801843e:	f000 80d5 	beq.w	80185ec <DrawString+0x1ec>
	uint16_t out_color = ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
 8018442:	0a3b      	lsrs	r3, r7, #8
 8018444:	4e83      	ldr	r6, [pc, #524]	; (8018654 <DrawString+0x254>)
 8018446:	0979      	lsrs	r1, r7, #5
 8018448:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801844c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8018450:	4d81      	ldr	r5, [pc, #516]	; (8018658 <DrawString+0x258>)
 8018452:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 8018456:	2034      	movs	r0, #52	; 0x34
 8018458:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8018660 <DrawString+0x260>
	uint16_t out_color = ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
 801845c:	430b      	orrs	r3, r1
 801845e:	433b      	orrs	r3, r7
 8018460:	4f7e      	ldr	r7, [pc, #504]	; (801865c <DrawString+0x25c>)
 8018462:	9304      	str	r3, [sp, #16]
 8018464:	e00b      	b.n	801847e <DrawString+0x7e>
		if(str[l] > 191) {
 8018466:	2abf      	cmp	r2, #191	; 0xbf
 8018468:	d860      	bhi.n	801852c <DrawString+0x12c>
		if(str[l] == 32) {
 801846a:	2a20      	cmp	r2, #32
 801846c:	d102      	bne.n	8018474 <DrawString+0x74>
			xpos += 5;
 801846e:	9b02      	ldr	r3, [sp, #8]
 8018470:	3305      	adds	r3, #5
 8018472:	9302      	str	r3, [sp, #8]
	while(str[l] != 0) {
 8018474:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8018478:	2a00      	cmp	r2, #0
 801847a:	f000 80b7 	beq.w	80185ec <DrawString+0x1ec>
		if((str[l] > 32) && (str[l] < 128)) {
 801847e:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
 8018482:	b2d9      	uxtb	r1, r3
 8018484:	295e      	cmp	r1, #94	; 0x5e
 8018486:	d8ee      	bhi.n	8018466 <DrawString+0x66>
 8018488:	9902      	ldr	r1, [sp, #8]
 801848a:	f04f 0e01 	mov.w	lr, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801848e:	f8bd 801c 	ldrh.w	r8, [sp, #28]
 8018492:	4692      	mov	sl, r2
 8018494:	3901      	subs	r1, #1
 8018496:	9106      	str	r1, [sp, #24]
 8018498:	e013      	b.n	80184c2 <DrawString+0xc2>
				if(font[(str[l]-33)*12+i] == 0) {
 801849a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801849e:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 80184a2:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
 80184a6:	b931      	cbnz	r1, 80184b6 <DrawString+0xb6>
					if(font[(str[l]-33)*12+i+1] == 0) {
 80184a8:	f10c 0c01 	add.w	ip, ip, #1
 80184ac:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
 80184b0:	2900      	cmp	r1, #0
 80184b2:	f000 809e 	beq.w	80185f2 <DrawString+0x1f2>
			while(i < 12);
 80184b6:	f10e 0e01 	add.w	lr, lr, #1
 80184ba:	f1be 0f0d 	cmp.w	lr, #13
 80184be:	f000 808e 	beq.w	80185de <DrawString+0x1de>
				if(xpos < 470) {
 80184c2:	9a02      	ldr	r2, [sp, #8]
 80184c4:	f10e 3cff 	add.w	ip, lr, #4294967295
 80184c8:	f5b2 7feb 	cmp.w	r2, #470	; 0x1d6
 80184cc:	dae5      	bge.n	801849a <DrawString+0x9a>
 80184ce:	9a06      	ldr	r2, [sp, #24]
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80184d0:	f8cd e014 	str.w	lr, [sp, #20]
 80184d4:	eb02 0a0e 	add.w	sl, r2, lr
 80184d8:	9903      	ldr	r1, [sp, #12]
 80184da:	2200      	movs	r2, #0
 80184dc:	f8dd e010 	ldr.w	lr, [sp, #16]
 80184e0:	e007      	b.n	80184f2 <DrawString+0xf2>
					while(k < 13) {
 80184e2:	3201      	adds	r2, #1
 80184e4:	3901      	subs	r1, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80184e6:	f823 801b 	strh.w	r8, [r3, fp, lsl #1]
					while(k < 13) {
 80184ea:	2a0d      	cmp	r2, #13
 80184ec:	d018      	beq.n	8018520 <DrawString+0x120>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 80184ee:	7823      	ldrb	r3, [r4, #0]
 80184f0:	3b21      	subs	r3, #33	; 0x21
 80184f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80184f6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80184fa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80184fe:	4113      	asrs	r3, r2
 8018500:	f013 0f01 	tst.w	r3, #1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8018504:	7833      	ldrb	r3, [r6, #0]
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8018506:	fb00 5303 	mla	r3, r0, r3, r5
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 801850a:	e9d3 3b17 	ldrd	r3, fp, [r3, #92]	; 0x5c
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801850e:	fb0b ab01 	mla	fp, fp, r1, sl
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 8018512:	d1e6      	bne.n	80184e2 <DrawString+0xe2>
					while(k < 13) {
 8018514:	3201      	adds	r2, #1
 8018516:	3901      	subs	r1, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 8018518:	f823 e01b 	strh.w	lr, [r3, fp, lsl #1]
					while(k < 13) {
 801851c:	2a0d      	cmp	r2, #13
 801851e:	d1e6      	bne.n	80184ee <DrawString+0xee>
				if(font[(str[l]-33)*12+i] == 0) {
 8018520:	7823      	ldrb	r3, [r4, #0]
 8018522:	f8dd e014 	ldr.w	lr, [sp, #20]
 8018526:	469a      	mov	sl, r3
 8018528:	3b21      	subs	r3, #33	; 0x21
 801852a:	e7b6      	b.n	801849a <DrawString+0x9a>
 801852c:	9902      	ldr	r1, [sp, #8]
 801852e:	f04f 0e01 	mov.w	lr, #1
 8018532:	f1a2 03c0 	sub.w	r3, r2, #192	; 0xc0
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8018536:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801853a:	3901      	subs	r1, #1
 801853c:	4690      	mov	r8, r2
 801853e:	9106      	str	r1, [sp, #24]
 8018540:	e011      	b.n	8018566 <DrawString+0x166>
				if(ru_font[(str[l]-192)*12+i] == 0) {
 8018542:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8018546:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 801854a:	f839 101c 	ldrh.w	r1, [r9, ip, lsl #1]
 801854e:	b929      	cbnz	r1, 801855c <DrawString+0x15c>
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
 8018550:	f10c 0c01 	add.w	ip, ip, #1
 8018554:	f839 101c 	ldrh.w	r1, [r9, ip, lsl #1]
 8018558:	2900      	cmp	r1, #0
 801855a:	d04c      	beq.n	80185f6 <DrawString+0x1f6>
			while(i < 12);
 801855c:	f10e 0e01 	add.w	lr, lr, #1
 8018560:	f1be 0f0d 	cmp.w	lr, #13
 8018564:	d034      	beq.n	80185d0 <DrawString+0x1d0>
				if(xpos < 470) {
 8018566:	9a02      	ldr	r2, [sp, #8]
 8018568:	f10e 3cff 	add.w	ip, lr, #4294967295
 801856c:	f5b2 7feb 	cmp.w	r2, #470	; 0x1d6
 8018570:	dae7      	bge.n	8018542 <DrawString+0x142>
 8018572:	9a06      	ldr	r2, [sp, #24]
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8018574:	f8cd e014 	str.w	lr, [sp, #20]
 8018578:	eb02 080e 	add.w	r8, r2, lr
 801857c:	9903      	ldr	r1, [sp, #12]
 801857e:	2200      	movs	r2, #0
 8018580:	f8dd e010 	ldr.w	lr, [sp, #16]
 8018584:	e007      	b.n	8018596 <DrawString+0x196>
					while(k < 13) {
 8018586:	3201      	adds	r2, #1
 8018588:	3901      	subs	r1, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 801858a:	f823 a01b 	strh.w	sl, [r3, fp, lsl #1]
					while(k < 13) {
 801858e:	2a0d      	cmp	r2, #13
 8018590:	d018      	beq.n	80185c4 <DrawString+0x1c4>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 8018592:	7823      	ldrb	r3, [r4, #0]
 8018594:	3bc0      	subs	r3, #192	; 0xc0
 8018596:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801859a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 801859e:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 80185a2:	4113      	asrs	r3, r2
 80185a4:	f013 0f01 	tst.w	r3, #1
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 80185a8:	7833      	ldrb	r3, [r6, #0]
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80185aa:	fb00 5303 	mla	r3, r0, r3, r5
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 80185ae:	e9d3 3b17 	ldrd	r3, fp, [r3, #92]	; 0x5c
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 80185b2:	fb0b 8b01 	mla	fp, fp, r1, r8
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 80185b6:	d1e6      	bne.n	8018586 <DrawString+0x186>
					while(k < 13) {
 80185b8:	3201      	adds	r2, #1
 80185ba:	3901      	subs	r1, #1
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 80185bc:	f823 e01b 	strh.w	lr, [r3, fp, lsl #1]
					while(k < 13) {
 80185c0:	2a0d      	cmp	r2, #13
 80185c2:	d1e6      	bne.n	8018592 <DrawString+0x192>
				if(ru_font[(str[l]-192)*12+i] == 0) {
 80185c4:	7823      	ldrb	r3, [r4, #0]
 80185c6:	f8dd e014 	ldr.w	lr, [sp, #20]
 80185ca:	4698      	mov	r8, r3
 80185cc:	3bc0      	subs	r3, #192	; 0xc0
 80185ce:	e7b8      	b.n	8018542 <DrawString+0x142>
 80185d0:	4642      	mov	r2, r8
 80185d2:	f04f 0e0c 	mov.w	lr, #12
			xpos += i;
 80185d6:	9b02      	ldr	r3, [sp, #8]
 80185d8:	4473      	add	r3, lr
 80185da:	9302      	str	r3, [sp, #8]
 80185dc:	e745      	b.n	801846a <DrawString+0x6a>
 80185de:	4652      	mov	r2, sl
 80185e0:	f04f 0e0c 	mov.w	lr, #12
			xpos += i;
 80185e4:	9b02      	ldr	r3, [sp, #8]
 80185e6:	4473      	add	r3, lr
 80185e8:	9302      	str	r3, [sp, #8]
 80185ea:	e73c      	b.n	8018466 <DrawString+0x66>
}
 80185ec:	b009      	add	sp, #36	; 0x24
 80185ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						i++;
 80185f2:	4652      	mov	r2, sl
						break;
 80185f4:	e7f6      	b.n	80185e4 <DrawString+0x1e4>
						i++;
 80185f6:	4642      	mov	r2, r8
						break;
 80185f8:	e7ed      	b.n	80185d6 <DrawString+0x1d6>
		if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK)
 80185fa:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8018654 <DrawString+0x254>
 80185fe:	4628      	mov	r0, r5
 8018600:	f899 1000 	ldrb.w	r1, [r9]
 8018604:	f7e9 fac0 	bl	8001b88 <HAL_DMA2D_ConfigLayer>
 8018608:	2800      	cmp	r0, #0
 801860a:	f47f af10 	bne.w	801842e <DrawString+0x2e>
			if (HAL_DMA2D_Start(&hdma2d, fontcolor, hltdc.LayerCfg[ActiveLayer].FBStartAdress + 2*(480*(Ypos-20)+Xpos),
 801860e:	f899 1000 	ldrb.w	r1, [r9]
 8018612:	2034      	movs	r0, #52	; 0x34
 8018614:	f1a6 0314 	sub.w	r3, r6, #20
 8018618:	4a0f      	ldr	r2, [pc, #60]	; (8018658 <DrawString+0x258>)
 801861a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801861e:	fb00 2201 	mla	r2, r0, r1, r2
 8018622:	4639      	mov	r1, r7
 8018624:	4628      	mov	r0, r5
 8018626:	eb08 1343 	add.w	r3, r8, r3, lsl #5
 801862a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801862c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8018630:	2314      	movs	r3, #20
 8018632:	9300      	str	r3, [sp, #0]
 8018634:	f5c8 73f0 	rsb	r3, r8, #480	; 0x1e0
 8018638:	f7e9 f99a 	bl	8001970 <HAL_DMA2D_Start>
 801863c:	2800      	cmp	r0, #0
 801863e:	f47f aef6 	bne.w	801842e <DrawString+0x2e>
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8018642:	4628      	mov	r0, r5
 8018644:	210a      	movs	r1, #10
 8018646:	f7e9 fa09 	bl	8001a5c <HAL_DMA2D_PollForTransfer>
 801864a:	e6f0      	b.n	801842e <DrawString+0x2e>
 801864c:	200009ac 	.word	0x200009ac
 8018650:	4002b000 	.word	0x4002b000
 8018654:	20000b44 	.word	0x20000b44
 8018658:	20000a9c 	.word	0x20000a9c
 801865c:	08023ad4 	.word	0x08023ad4
 8018660:	08024668 	.word	0x08024668

08018664 <DrawMenu>:
	if(menu_mode == 0) {
 8018664:	4b7e      	ldr	r3, [pc, #504]	; (8018860 <DrawMenu+0x1fc>)
{
 8018666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(menu_mode == 0) {
 801866a:	f993 4000 	ldrsb.w	r4, [r3]
{
 801866e:	b0c5      	sub	sp, #276	; 0x114
	if(menu_mode == 0) {
 8018670:	2c00      	cmp	r4, #0
 8018672:	d067      	beq.n	8018744 <DrawMenu+0xe0>
	else if(menu_mode == 1) {
 8018674:	2c01      	cmp	r4, #1
 8018676:	d008      	beq.n	801868a <DrawMenu+0x26>
	else if(menu_mode == 2) {
 8018678:	2c02      	cmp	r4, #2
 801867a:	f000 810f 	beq.w	801889c <DrawMenu+0x238>
	else if(menu_mode == 3) {
 801867e:	2c03      	cmp	r4, #3
 8018680:	f000 820b 	beq.w	8018a9a <DrawMenu+0x436>
}
 8018684:	b045      	add	sp, #276	; 0x114
 8018686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(Total_tracks > 7) {
 801868a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8018890 <DrawMenu+0x22c>
 801868e:	f8b8 3000 	ldrh.w	r3, [r8]
 8018692:	2b07      	cmp	r3, #7
 8018694:	d868      	bhi.n	8018768 <DrawMenu+0x104>
 8018696:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8018894 <DrawMenu+0x230>
		DrawString(" [FILES]", 0, 20, 0x00FFFFFF, 0x000000FF);
 801869a:	2400      	movs	r4, #0
 801869c:	2214      	movs	r2, #20
 801869e:	2100      	movs	r1, #0
 80186a0:	4870      	ldr	r0, [pc, #448]	; (8018864 <DrawMenu+0x200>)
 80186a2:	2529      	movs	r5, #41	; 0x29
	uint32_t backcolor = 0;
 80186a4:	4626      	mov	r6, r4
 80186a6:	af04      	add	r7, sp, #16
 80186a8:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8018898 <DrawMenu+0x234>
				backcolor += 0x00202020;
 80186ac:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 801888c <DrawMenu+0x228>
		DrawString(" [FILES]", 0, 20, 0x00FFFFFF, 0x000000FF);
 80186b0:	f7fa fd54 	bl	801315c <DrawString.constprop.0>
		while(21+20*(i+1) < 165) {
 80186b4:	e026      	b.n	8018704 <DrawMenu+0xa0>
			else if(i == String_number) {
 80186b6:	4b6c      	ldr	r3, [pc, #432]	; (8018868 <DrawMenu+0x204>)
 80186b8:	781b      	ldrb	r3, [r3, #0]
 80186ba:	42a3      	cmp	r3, r4
 80186bc:	f000 80b5 	beq.w	801882a <DrawMenu+0x1c6>
				if(i == Mark_number) {
 80186c0:	4b6a      	ldr	r3, [pc, #424]	; (801886c <DrawMenu+0x208>)
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 80186c2:	4421      	add	r1, r4
 80186c4:	4638      	mov	r0, r7
				if(i == Mark_number) {
 80186c6:	781b      	ldrb	r3, [r3, #0]
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 80186c8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
				if(i == Mark_number) {
 80186cc:	42a3      	cmp	r3, r4
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 80186ce:	4b68      	ldr	r3, [pc, #416]	; (8018870 <DrawMenu+0x20c>)
 80186d0:	4419      	add	r1, r3
				if(i == Mark_number) {
 80186d2:	f000 80a4 	beq.w	801881e <DrawMenu+0x1ba>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, backcolor);
 80186d6:	f006 fe6b 	bl	801f3b0 <strcat>
 80186da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80186de:	462a      	mov	r2, r5
 80186e0:	210b      	movs	r1, #11
 80186e2:	9600      	str	r6, [sp, #0]
 80186e4:	f7ff fe8c 	bl	8018400 <DrawString>
				backcolor += 0x00202020;
 80186e8:	445e      	add	r6, fp
				if(backcolor > 0x00404040) backcolor = 0;
 80186ea:	4b62      	ldr	r3, [pc, #392]	; (8018874 <DrawMenu+0x210>)
 80186ec:	429e      	cmp	r6, r3
 80186ee:	d900      	bls.n	80186f2 <DrawMenu+0x8e>
 80186f0:	2600      	movs	r6, #0
			if(i >= Total_tracks) break;
 80186f2:	3401      	adds	r4, #1
 80186f4:	f8b8 3000 	ldrh.w	r3, [r8]
 80186f8:	42a3      	cmp	r3, r4
 80186fa:	ddc3      	ble.n	8018684 <DrawMenu+0x20>
		while(21+20*(i+1) < 165) {
 80186fc:	3514      	adds	r5, #20
 80186fe:	2c07      	cmp	r4, #7
 8018700:	b2ad      	uxth	r5, r5
 8018702:	d0bf      	beq.n	8018684 <DrawMenu+0x20>
			char string[255] = "{ ";
 8018704:	f242 037b 	movw	r3, #8315	; 0x207b
 8018708:	2100      	movs	r1, #0
 801870a:	22fb      	movs	r2, #251	; 0xfb
 801870c:	a805      	add	r0, sp, #20
 801870e:	603b      	str	r3, [r7, #0]
 8018710:	f006 fd20 	bl	801f154 <memset>
			if(i == Track_number - str_increment) {
 8018714:	f8d9 1000 	ldr.w	r1, [r9]
 8018718:	f8da 3000 	ldr.w	r3, [sl]
 801871c:	1a5b      	subs	r3, r3, r1
 801871e:	42a3      	cmp	r3, r4
 8018720:	d1c9      	bne.n	80186b6 <DrawMenu+0x52>
				if(i == Mark_number) {
 8018722:	4b52      	ldr	r3, [pc, #328]	; (801886c <DrawMenu+0x208>)
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 8018724:	4421      	add	r1, r4
 8018726:	4638      	mov	r0, r7
				if(i == Mark_number) {
 8018728:	781b      	ldrb	r3, [r3, #0]
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 801872a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
				if(i == Mark_number) {
 801872e:	42a3      	cmp	r3, r4
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 8018730:	4b4f      	ldr	r3, [pc, #316]	; (8018870 <DrawMenu+0x20c>)
 8018732:	4419      	add	r1, r3
				if(i == Mark_number) {
 8018734:	d073      	beq.n	801881e <DrawMenu+0x1ba>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, 0x000000FF);
 8018736:	f006 fe3b 	bl	801f3b0 <strcat>
 801873a:	462a      	mov	r2, r5
 801873c:	210b      	movs	r1, #11
 801873e:	f7fa fd0d 	bl	801315c <DrawString.constprop.0>
 8018742:	e7d1      	b.n	80186e8 <DrawMenu+0x84>
		char string[255] = " { ";
 8018744:	4b4c      	ldr	r3, [pc, #304]	; (8018878 <DrawMenu+0x214>)
 8018746:	22fb      	movs	r2, #251	; 0xfb
 8018748:	4621      	mov	r1, r4
 801874a:	a805      	add	r0, sp, #20
 801874c:	9304      	str	r3, [sp, #16]
 801874e:	f006 fd01 	bl	801f154 <memset>
		DrawString(strcat(string, rekordbox.file), 0, 20, 0x00FFFFFF, 0x000000FF);
 8018752:	494a      	ldr	r1, [pc, #296]	; (801887c <DrawMenu+0x218>)
 8018754:	a804      	add	r0, sp, #16
 8018756:	f006 fe2b 	bl	801f3b0 <strcat>
 801875a:	2214      	movs	r2, #20
 801875c:	4621      	mov	r1, r4
 801875e:	f7fa fcfd 	bl	801315c <DrawString.constprop.0>
}
 8018762:	b045      	add	sp, #276	; 0x114
 8018764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 8018768:	ee07 3a90 	vmov	s15, r3
			uint16_t step_scroll = (140/(float)Total_tracks)*(float)str_increment;
 801876c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8018880 <DrawMenu+0x21c>
 8018770:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8018894 <DrawMenu+0x230>
			VLine(1, 21, 140, 0x00FFFFFF);
 8018774:	4620      	mov	r0, r4
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 8018776:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801877a:	eddf 7a42 	vldr	s15, [pc, #264]	; 8018884 <DrawMenu+0x220>
			VLine(1, 21, 140, 0x00FFFFFF);
 801877e:	2115      	movs	r1, #21
			uint16_t step_scroll = (140/(float)Total_tracks)*(float)str_increment;
 8018780:	ee86 6a87 	vdiv.f32	s12, s13, s14
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 8018784:	eec7 6a87 	vdiv.f32	s13, s15, s14
			uint16_t step_scroll = (140/(float)Total_tracks)*(float)str_increment;
 8018788:	edd9 7a00 	vldr	s15, [r9]
 801878c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018790:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 8018798:	eebc 7ae6 	vcvt.u32.f32	s14, s13
			uint16_t step_scroll = (140/(float)Total_tracks)*(float)str_increment;
 801879c:	ee17 2a90 	vmov	r2, s15
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 80187a0:	ee17 3a10 	vmov	r3, s14
			uint16_t step_scroll = (140/(float)Total_tracks)*(float)str_increment;
 80187a4:	b294      	uxth	r4, r2
			VLine(1, 21, 140, 0x00FFFFFF);
 80187a6:	228c      	movs	r2, #140	; 0x8c
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 80187a8:	b29d      	uxth	r5, r3
			VLine(3, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 80187aa:	f104 0616 	add.w	r6, r4, #22
			VLine(1, 21, 140, 0x00FFFFFF);
 80187ae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80187b2:	2d05      	cmp	r5, #5
			VLine(3, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 80187b4:	b2b6      	uxth	r6, r6
 80187b6:	bf38      	it	cc
 80187b8:	2505      	movcc	r5, #5
			VLine(1, 21, 140, 0x00FFFFFF);
 80187ba:	f7fb f85f 	bl	801387c <VLine>
			VLine(3, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 80187be:	4631      	mov	r1, r6
 80187c0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80187c4:	1eaf      	subs	r7, r5, #2
 80187c6:	2003      	movs	r0, #3
 80187c8:	b2bf      	uxth	r7, r7
 80187ca:	463a      	mov	r2, r7
 80187cc:	f7fb f856 	bl	801387c <VLine>
			VLine(4, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80187d0:	f104 0115 	add.w	r1, r4, #21
 80187d4:	462a      	mov	r2, r5
 80187d6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80187da:	b289      	uxth	r1, r1
 80187dc:	2004      	movs	r0, #4
 80187de:	9103      	str	r1, [sp, #12]
 80187e0:	f7fb f84c 	bl	801387c <VLine>
			VLine(5, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80187e4:	462a      	mov	r2, r5
 80187e6:	9903      	ldr	r1, [sp, #12]
 80187e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80187ec:	2005      	movs	r0, #5
 80187ee:	f7fb f845 	bl	801387c <VLine>
			VLine(6, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 80187f2:	462a      	mov	r2, r5
 80187f4:	9903      	ldr	r1, [sp, #12]
 80187f6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80187fa:	2006      	movs	r0, #6
 80187fc:	f7fb f83e 	bl	801387c <VLine>
			VLine(7, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 8018800:	463a      	mov	r2, r7
 8018802:	4631      	mov	r1, r6
 8018804:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018808:	2007      	movs	r0, #7
 801880a:	f7fb f837 	bl	801387c <VLine>
			VLine(9, 21, 140, 0x00FFFFFF);
 801880e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018812:	228c      	movs	r2, #140	; 0x8c
 8018814:	2115      	movs	r1, #21
 8018816:	2009      	movs	r0, #9
 8018818:	f7fb f830 	bl	801387c <VLine>
 801881c:	e73d      	b.n	801869a <DrawMenu+0x36>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 801881e:	f006 fdc7 	bl	801f3b0 <strcat>
 8018822:	4629      	mov	r1, r5
 8018824:	f7fa fdba 	bl	801339c <DrawString.constprop.1>
 8018828:	e75e      	b.n	80186e8 <DrawMenu+0x84>
				if(str_offset > 10) {
 801882a:	4b17      	ldr	r3, [pc, #92]	; (8018888 <DrawMenu+0x224>)
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	2b0a      	cmp	r3, #10
 8018830:	f77f af46 	ble.w	80186c0 <DrawMenu+0x5c>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11 + str_offset, 21+20*(i+1), 0x00FFFFFF, 0x00008F00);
 8018834:	4421      	add	r1, r4
 8018836:	9303      	str	r3, [sp, #12]
 8018838:	4b0d      	ldr	r3, [pc, #52]	; (8018870 <DrawMenu+0x20c>)
 801883a:	4638      	mov	r0, r7
 801883c:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8018840:	4419      	add	r1, r3
 8018842:	f006 fdb5 	bl	801f3b0 <strcat>
 8018846:	9b03      	ldr	r3, [sp, #12]
 8018848:	462a      	mov	r2, r5
 801884a:	f103 010b 	add.w	r1, r3, #11
 801884e:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 8018852:	b289      	uxth	r1, r1
 8018854:	9300      	str	r3, [sp, #0]
 8018856:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801885a:	f7ff fdd1 	bl	8018400 <DrawString>
 801885e:	e743      	b.n	80186e8 <DrawMenu+0x84>
 8018860:	200009a4 	.word	0x200009a4
 8018864:	08023974 	.word	0x08023974
 8018868:	2000006c 	.word	0x2000006c
 801886c:	20000064 	.word	0x20000064
 8018870:	20008378 	.word	0x20008378
 8018874:	00404040 	.word	0x00404040
 8018878:	00207b20 	.word	0x00207b20
 801887c:	20015604 	.word	0x20015604
 8018880:	430c0000 	.word	0x430c0000
 8018884:	44750000 	.word	0x44750000
 8018888:	20018890 	.word	0x20018890
 801888c:	00202020 	.word	0x00202020
 8018890:	20001fd8 	.word	0x20001fd8
 8018894:	2001888c 	.word	0x2001888c
 8018898:	2000e714 	.word	0x2000e714
		char stri[50] = {0};
 801889c:	2400      	movs	r4, #0
 801889e:	af04      	add	r7, sp, #16
		DrawString(" [SETTINGS]", 0, 20, 0x00FFFFFF, 0x000000FF);
 80188a0:	2214      	movs	r2, #20
 80188a2:	48ad      	ldr	r0, [pc, #692]	; (8018b58 <DrawMenu+0x4f4>)
 80188a4:	4621      	mov	r1, r4
		sprintf(stri, "%s %d %s", " Volume", volume, "%");
 80188a6:	4ead      	ldr	r6, [pc, #692]	; (8018b5c <DrawMenu+0x4f8>)
 80188a8:	4dad      	ldr	r5, [pc, #692]	; (8018b60 <DrawMenu+0x4fc>)
		DrawString(" [SETTINGS]", 0, 20, 0x00FFFFFF, 0x000000FF);
 80188aa:	f7fa fc57 	bl	801315c <DrawString.constprop.0>
		char stri[50] = {0};
 80188ae:	4621      	mov	r1, r4
 80188b0:	222e      	movs	r2, #46	; 0x2e
 80188b2:	603c      	str	r4, [r7, #0]
 80188b4:	a805      	add	r0, sp, #20
 80188b6:	f006 fc4d 	bl	801f154 <memset>
		sprintf(stri, "%s %d %s", " Volume", volume, "%");
 80188ba:	7833      	ldrb	r3, [r6, #0]
 80188bc:	4aa9      	ldr	r2, [pc, #676]	; (8018b64 <DrawMenu+0x500>)
 80188be:	4638      	mov	r0, r7
 80188c0:	49a9      	ldr	r1, [pc, #676]	; (8018b68 <DrawMenu+0x504>)
 80188c2:	9500      	str	r5, [sp, #0]
 80188c4:	f006 fd54 	bl	801f370 <siprintf>
		DrawString(stri, 0, 40, 0x00FFFFFF, backcolor);
 80188c8:	4ba8      	ldr	r3, [pc, #672]	; (8018b6c <DrawMenu+0x508>)
 80188ca:	4621      	mov	r1, r4
 80188cc:	2228      	movs	r2, #40	; 0x28
 80188ce:	4638      	mov	r0, r7
 80188d0:	9300      	str	r3, [sp, #0]
 80188d2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80188d6:	f7ff fd93 	bl	8018400 <DrawString>
		VLine(40, 41, 18, 0x00FFFFFF);
 80188da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80188de:	2212      	movs	r2, #18
 80188e0:	2129      	movs	r1, #41	; 0x29
 80188e2:	2028      	movs	r0, #40	; 0x28
 80188e4:	f7fa ffca 	bl	801387c <VLine>
		VLine(440, 41, 18, 0x00FFFFFF);
 80188e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80188ec:	2212      	movs	r2, #18
 80188ee:	2129      	movs	r1, #41	; 0x29
 80188f0:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80188f4:	f7fa ffc2 	bl	801387c <VLine>
		HLine(40, 41, 400, 0x00FFFFFF);
 80188f8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80188fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8018900:	2129      	movs	r1, #41	; 0x29
 8018902:	2028      	movs	r0, #40	; 0x28
 8018904:	f7fb f800 	bl	8013908 <HLine>
		HLine(40, 59, 401, 0x00FFFFFF);
 8018908:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801890c:	f240 1291 	movw	r2, #401	; 0x191
 8018910:	213b      	movs	r1, #59	; 0x3b
 8018912:	2028      	movs	r0, #40	; 0x28
 8018914:	f7fa fff8 	bl	8013908 <HLine>
		uint32_t vol_pos = (float)volume/100*400;
 8018918:	7833      	ldrb	r3, [r6, #0]
 801891a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801891e:	ee07 3a90 	vmov	s15, r3
 8018922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018926:	ee67 7a87 	vmul.f32	s15, s15, s14
 801892a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801892e:	ee17 4a90 	vmov	r4, s15
		if(vol_pos != 0) Rectangle(40, 42, vol_pos, 17, 0x00FFFFFF);
 8018932:	2c00      	cmp	r4, #0
 8018934:	f040 80e6 	bne.w	8018b04 <DrawMenu+0x4a0>
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 8018938:	4b8d      	ldr	r3, [pc, #564]	; (8018b70 <DrawMenu+0x50c>)
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 801893a:	4638      	mov	r0, r7
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 801893c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8018b74 <DrawMenu+0x510>
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 8018940:	9500      	str	r5, [sp, #0]
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 8018942:	edd3 7a00 	vldr	s15, [r3]
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 8018946:	4a8c      	ldr	r2, [pc, #560]	; (8018b78 <DrawMenu+0x514>)
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 8018948:	ee67 7a87 	vmul.f32	s15, s15, s14
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 801894c:	4986      	ldr	r1, [pc, #536]	; (8018b68 <DrawMenu+0x504>)
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 801894e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 8018952:	ee17 3a90 	vmov	r3, s15
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 8018956:	ee17 4a90 	vmov	r4, s15
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 801895a:	f006 fd09 	bl	801f370 <siprintf>
		DrawString(stri, 0, 80, 0x00FFFFFF, backcolor);
 801895e:	4a87      	ldr	r2, [pc, #540]	; (8018b7c <DrawMenu+0x518>)
 8018960:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018964:	2100      	movs	r1, #0
 8018966:	4638      	mov	r0, r7
 8018968:	9200      	str	r2, [sp, #0]
 801896a:	2250      	movs	r2, #80	; 0x50
 801896c:	f7ff fd48 	bl	8018400 <DrawString>
		VLine(40, 81, 18, 0x00FFFFFF);
 8018970:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018974:	2212      	movs	r2, #18
 8018976:	2151      	movs	r1, #81	; 0x51
 8018978:	2028      	movs	r0, #40	; 0x28
 801897a:	f7fa ff7f 	bl	801387c <VLine>
		VLine(440, 81, 18, 0x00FFFFFF);
 801897e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018982:	2212      	movs	r2, #18
 8018984:	2151      	movs	r1, #81	; 0x51
 8018986:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 801898a:	f7fa ff77 	bl	801387c <VLine>
		HLine(40, 81, 400, 0x00FFFFFF);
 801898e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018992:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8018996:	2151      	movs	r1, #81	; 0x51
 8018998:	2028      	movs	r0, #40	; 0x28
 801899a:	f7fa ffb5 	bl	8013908 <HLine>
		HLine(40, 99, 401, 0x00FFFFFF);
 801899e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80189a2:	f240 1291 	movw	r2, #401	; 0x191
 80189a6:	2163      	movs	r1, #99	; 0x63
 80189a8:	2028      	movs	r0, #40	; 0x28
 80189aa:	f7fa ffad 	bl	8013908 <HLine>
		if(jogsens_pos != 0) Rectangle(40, 82, jogsens_pos, 17, 0x00FFFFFF);
 80189ae:	00a4      	lsls	r4, r4, #2
 80189b0:	d17e      	bne.n	8018ab0 <DrawMenu+0x44c>
		sprintf(stri, "%s %d %s", " Auto cue sensitivity", (int)((float)acue_sensitivity/250*100), "%");
 80189b2:	4c73      	ldr	r4, [pc, #460]	; (8018b80 <DrawMenu+0x51c>)
 80189b4:	4638      	mov	r0, r7
 80189b6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8018b84 <DrawMenu+0x520>
 80189ba:	7823      	ldrb	r3, [r4, #0]
 80189bc:	4a72      	ldr	r2, [pc, #456]	; (8018b88 <DrawMenu+0x524>)
 80189be:	ee07 3a90 	vmov	s15, r3
 80189c2:	4969      	ldr	r1, [pc, #420]	; (8018b68 <DrawMenu+0x504>)
 80189c4:	9500      	str	r5, [sp, #0]
 80189c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80189ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80189ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80189d2:	ee17 3a90 	vmov	r3, s15
 80189d6:	f006 fccb 	bl	801f370 <siprintf>
		DrawString(stri, 0, 120, 0x00FFFFFF, backcolor);
 80189da:	496c      	ldr	r1, [pc, #432]	; (8018b8c <DrawMenu+0x528>)
 80189dc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80189e0:	2278      	movs	r2, #120	; 0x78
 80189e2:	4638      	mov	r0, r7
 80189e4:	9100      	str	r1, [sp, #0]
 80189e6:	2100      	movs	r1, #0
 80189e8:	f7ff fd0a 	bl	8018400 <DrawString>
		VLine(40, 121, 18, 0x00FFFFFF);
 80189ec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80189f0:	2212      	movs	r2, #18
 80189f2:	2179      	movs	r1, #121	; 0x79
 80189f4:	2028      	movs	r0, #40	; 0x28
 80189f6:	f7fa ff41 	bl	801387c <VLine>
		VLine(440, 121, 18, 0x00FFFFFF);
 80189fa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80189fe:	2212      	movs	r2, #18
 8018a00:	2179      	movs	r1, #121	; 0x79
 8018a02:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8018a06:	f7fa ff39 	bl	801387c <VLine>
		HLine(40, 121, 400, 0x00FFFFFF);
 8018a0a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018a0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8018a12:	2179      	movs	r1, #121	; 0x79
 8018a14:	2028      	movs	r0, #40	; 0x28
 8018a16:	f7fa ff77 	bl	8013908 <HLine>
		HLine(40, 139, 401, 0x00FFFFFF);
 8018a1a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018a1e:	f240 1291 	movw	r2, #401	; 0x191
 8018a22:	218b      	movs	r1, #139	; 0x8b
 8018a24:	2028      	movs	r0, #40	; 0x28
 8018a26:	f7fa ff6f 	bl	8013908 <HLine>
		uint32_t acu_pos = (float)acue_sensitivity/250*400;
 8018a2a:	7823      	ldrb	r3, [r4, #0]
 8018a2c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8018b90 <DrawMenu+0x52c>
 8018a30:	ee07 3a90 	vmov	s15, r3
 8018a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018a40:	ee17 4a90 	vmov	r4, s15
		if(acu_pos != 0) Rectangle(40, 122, acu_pos, 17, 0x00FFFFFF);
 8018a44:	2c00      	cmp	r4, #0
 8018a46:	f43f ae1d 	beq.w	8018684 <DrawMenu+0x20>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018a4a:	4852      	ldr	r0, [pc, #328]	; (8018b94 <DrawMenu+0x530>)
 8018a4c:	2134      	movs	r1, #52	; 0x34
 8018a4e:	4a52      	ldr	r2, [pc, #328]	; (8018b98 <DrawMenu+0x534>)
 8018a50:	b2a4      	uxth	r4, r4
 8018a52:	7803      	ldrb	r3, [r0, #0]
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8018a54:	4e51      	ldr	r6, [pc, #324]	; (8018b9c <DrawMenu+0x538>)
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018a56:	fb01 2303 	mla	r3, r1, r3, r2
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8018a5a:	4630      	mov	r0, r6
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018a5c:	e9d3 7517 	ldrd	r7, r5, [r3, #92]	; 0x5c
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8018a60:	1b2b      	subs	r3, r5, r4
 8018a62:	60f3      	str	r3, [r6, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8018a64:	f7e8 ff2e 	bl	80018c4 <HAL_DMA2D_Init>
 8018a68:	2800      	cmp	r0, #0
 8018a6a:	f47f ae0b 	bne.w	8018684 <DrawMenu+0x20>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018a6e:	227a      	movs	r2, #122	; 0x7a
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018a70:	2111      	movs	r1, #17
 8018a72:	4623      	mov	r3, r4
 8018a74:	4630      	mov	r0, r6
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018a76:	fb05 f202 	mul.w	r2, r5, r2
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018a7a:	9100      	str	r1, [sp, #0]
 8018a7c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018a80:	3228      	adds	r2, #40	; 0x28
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018a82:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8018a86:	f7e8 ff73 	bl	8001970 <HAL_DMA2D_Start>
 8018a8a:	2800      	cmp	r0, #0
 8018a8c:	f47f adfa 	bne.w	8018684 <DrawMenu+0x20>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8018a90:	2164      	movs	r1, #100	; 0x64
 8018a92:	4630      	mov	r0, r6
 8018a94:	f7e8 ffe2 	bl	8001a5c <HAL_DMA2D_PollForTransfer>
}
 8018a98:	e5f4      	b.n	8018684 <DrawMenu+0x20>
		DrawString("ERROR! INSERT SD CARD or USB storage!", 0, 20, 0x00FFFFFF, 0x00FF0000);
 8018a9a:	f44f 047f 	mov.w	r4, #16711680	; 0xff0000
 8018a9e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018aa2:	2214      	movs	r2, #20
 8018aa4:	2100      	movs	r1, #0
 8018aa6:	483e      	ldr	r0, [pc, #248]	; (8018ba0 <DrawMenu+0x53c>)
 8018aa8:	9400      	str	r4, [sp, #0]
 8018aaa:	f7ff fca9 	bl	8018400 <DrawString>
}
 8018aae:	e5e9      	b.n	8018684 <DrawMenu+0x20>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018ab0:	4a38      	ldr	r2, [pc, #224]	; (8018b94 <DrawMenu+0x530>)
 8018ab2:	2134      	movs	r1, #52	; 0x34
 8018ab4:	4b38      	ldr	r3, [pc, #224]	; (8018b98 <DrawMenu+0x534>)
 8018ab6:	b2a4      	uxth	r4, r4
 8018ab8:	7812      	ldrb	r2, [r2, #0]
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8018aba:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8018b9c <DrawMenu+0x538>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018abe:	fb01 3302 	mla	r3, r1, r2, r3
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8018ac2:	4648      	mov	r0, r9
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018ac4:	e9d3 8617 	ldrd	r8, r6, [r3, #92]	; 0x5c
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8018ac8:	1b33      	subs	r3, r6, r4
 8018aca:	f8c9 300c 	str.w	r3, [r9, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8018ace:	f7e8 fef9 	bl	80018c4 <HAL_DMA2D_Init>
 8018ad2:	2800      	cmp	r0, #0
 8018ad4:	f47f af6d 	bne.w	80189b2 <DrawMenu+0x34e>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018ad8:	2252      	movs	r2, #82	; 0x52
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018ada:	2111      	movs	r1, #17
 8018adc:	4623      	mov	r3, r4
 8018ade:	4648      	mov	r0, r9
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018ae0:	fb06 f202 	mul.w	r2, r6, r2
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018ae4:	9100      	str	r1, [sp, #0]
 8018ae6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018aea:	3228      	adds	r2, #40	; 0x28
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018aec:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 8018af0:	f7e8 ff3e 	bl	8001970 <HAL_DMA2D_Start>
 8018af4:	2800      	cmp	r0, #0
 8018af6:	f47f af5c 	bne.w	80189b2 <DrawMenu+0x34e>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8018afa:	2164      	movs	r1, #100	; 0x64
 8018afc:	4648      	mov	r0, r9
 8018afe:	f7e8 ffad 	bl	8001a5c <HAL_DMA2D_PollForTransfer>
}
 8018b02:	e756      	b.n	80189b2 <DrawMenu+0x34e>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018b04:	4923      	ldr	r1, [pc, #140]	; (8018b94 <DrawMenu+0x530>)
 8018b06:	b2a4      	uxth	r4, r4
 8018b08:	4a23      	ldr	r2, [pc, #140]	; (8018b98 <DrawMenu+0x534>)
 8018b0a:	780b      	ldrb	r3, [r1, #0]
 8018b0c:	2134      	movs	r1, #52	; 0x34
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8018b0e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8018b9c <DrawMenu+0x538>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018b12:	fb01 2303 	mla	r3, r1, r3, r2
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8018b16:	4648      	mov	r0, r9
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018b18:	e9d3 8617 	ldrd	r8, r6, [r3, #92]	; 0x5c
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8018b1c:	1b33      	subs	r3, r6, r4
 8018b1e:	f8c9 300c 	str.w	r3, [r9, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8018b22:	f7e8 fecf 	bl	80018c4 <HAL_DMA2D_Init>
 8018b26:	2800      	cmp	r0, #0
 8018b28:	f47f af06 	bne.w	8018938 <DrawMenu+0x2d4>
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018b2c:	222a      	movs	r2, #42	; 0x2a
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018b2e:	2111      	movs	r1, #17
 8018b30:	4623      	mov	r3, r4
 8018b32:	4648      	mov	r0, r9
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018b34:	fb06 f202 	mul.w	r2, r6, r2
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018b38:	9100      	str	r1, [sp, #0]
 8018b3a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8018b3e:	3228      	adds	r2, #40	; 0x28
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8018b40:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 8018b44:	f7e8 ff14 	bl	8001970 <HAL_DMA2D_Start>
 8018b48:	2800      	cmp	r0, #0
 8018b4a:	f47f aef5 	bne.w	8018938 <DrawMenu+0x2d4>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8018b4e:	2164      	movs	r1, #100	; 0x64
 8018b50:	4648      	mov	r0, r9
 8018b52:	f7e8 ff83 	bl	8001a5c <HAL_DMA2D_PollForTransfer>
}
 8018b56:	e6ef      	b.n	8018938 <DrawMenu+0x2d4>
 8018b58:	08023980 	.word	0x08023980
 8018b5c:	2000005c 	.word	0x2000005c
 8018b60:	080239a0 	.word	0x080239a0
 8018b64:	0802398c 	.word	0x0802398c
 8018b68:	08023994 	.word	0x08023994
 8018b6c:	00202020 	.word	0x00202020
 8018b70:	20000070 	.word	0x20000070
 8018b74:	461c4000 	.word	0x461c4000
 8018b78:	080239a4 	.word	0x080239a4
 8018b7c:	00404040 	.word	0x00404040
 8018b80:	20000054 	.word	0x20000054
 8018b84:	3ecccccd 	.word	0x3ecccccd
 8018b88:	080239b8 	.word	0x080239b8
 8018b8c:	00606060 	.word	0x00606060
 8018b90:	3fcccccd 	.word	0x3fcccccd
 8018b94:	20000b44 	.word	0x20000b44
 8018b98:	20000a9c 	.word	0x20000a9c
 8018b9c:	200009ac 	.word	0x200009ac
 8018ba0:	080239d0 	.word	0x080239d0

08018ba4 <QuantizePosition>:

// snaps file position on the spectra to the nearest beat
uint32_t QuantizePosition(int beat_offset) {
	uint32_t quantized_pos = file_pos_wide;
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 8018ba4:	4a1c      	ldr	r2, [pc, #112]	; (8018c18 <QuantizePosition+0x74>)
 8018ba6:	f04f 0c96 	mov.w	ip, #150	; 0x96
	uint32_t quantized_pos = file_pos_wide;
 8018baa:	4b1c      	ldr	r3, [pc, #112]	; (8018c1c <QuantizePosition+0x78>)
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 8018bac:	6812      	ldr	r2, [r2, #0]
uint32_t QuantizePosition(int beat_offset) {
 8018bae:	b570      	push	{r4, r5, r6, lr}
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 8018bb0:	f202 51f1 	addw	r1, r2, #1521	; 0x5f1
	uint32_t quantized_pos = file_pos_wide;
 8018bb4:	681e      	ldr	r6, [r3, #0]
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 8018bb6:	4d1a      	ldr	r5, [pc, #104]	; (8018c20 <QuantizePosition+0x7c>)
 8018bb8:	f502 63be 	add.w	r3, r2, #1520	; 0x5f0
 8018bbc:	4c19      	ldr	r4, [pc, #100]	; (8018c24 <QuantizePosition+0x80>)
 8018bbe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 8018bc2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 8018bc6:	685b      	ldr	r3, [r3, #4]
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 8018bc8:	6849      	ldr	r1, [r1, #4]
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 8018bca:	fb0c f303 	mul.w	r3, ip, r3
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 8018bce:	fb0c f101 	mul.w	r1, ip, r1
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 8018bd2:	fba4 e303 	umull	lr, r3, r4, r3
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 8018bd6:	fba4 e101 	umull	lr, r1, r4, r1
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 8018bda:	eba6 1393 	sub.w	r3, r6, r3, lsr #6
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 8018bde:	ebc6 1191 	rsb	r1, r6, r1, lsr #6
	if(time1 > time2) {
 8018be2:	428b      	cmp	r3, r1
 8018be4:	dd0b      	ble.n	8018bfe <QuantizePosition+0x5a>
		quantized_pos = rekordbox.timeindex[beat+beat_offset+1]*150/1000;							;
 8018be6:	4410      	add	r0, r2
 8018be8:	f200 50f1 	addw	r0, r0, #1521	; 0x5f1
 8018bec:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8018bf0:	6868      	ldr	r0, [r5, #4]
 8018bf2:	fb0c f000 	mul.w	r0, ip, r0
 8018bf6:	fba4 3000 	umull	r3, r0, r4, r0
 8018bfa:	0980      	lsrs	r0, r0, #6
	}
	else {
		quantized_pos = rekordbox.timeindex[beat+beat_offset]*150/1000;
	}
	return quantized_pos;
}
 8018bfc:	bd70      	pop	{r4, r5, r6, pc}
		quantized_pos = rekordbox.timeindex[beat+beat_offset]*150/1000;
 8018bfe:	4402      	add	r2, r0
 8018c00:	f502 62be 	add.w	r2, r2, #1520	; 0x5f0
 8018c04:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8018c08:	6850      	ldr	r0, [r2, #4]
 8018c0a:	fb0c f000 	mul.w	r0, ip, r0
 8018c0e:	fba4 3000 	umull	r3, r0, r4, r0
 8018c12:	0980      	lsrs	r0, r0, #6
}
 8018c14:	bd70      	pop	{r4, r5, r6, pc}
 8018c16:	bf00      	nop
 8018c18:	2000097c 	.word	0x2000097c
 8018c1c:	2000e9a4 	.word	0x2000e9a4
 8018c20:	20015208 	.word	0x20015208
 8018c24:	10624dd3 	.word	0x10624dd3

08018c28 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8018c28:	4b0b      	ldr	r3, [pc, #44]	; (8018c58 <MX_DMA_Init+0x30>)

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	203c      	movs	r0, #60	; 0x3c
 8018c2e:	4611      	mov	r1, r2
{
 8018c30:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8018c32:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 8018c34:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8018c36:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8018c3a:	631c      	str	r4, [r3, #48]	; 0x30
 8018c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018c42:	9301      	str	r3, [sp, #4]
 8018c44:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8018c46:	f7e8 fa49 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8018c4a:	203c      	movs	r0, #60	; 0x3c

}
 8018c4c:	b002      	add	sp, #8
 8018c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8018c52:	f7e8 ba8d 	b.w	8001170 <HAL_NVIC_EnableIRQ>
 8018c56:	bf00      	nop
 8018c58:	40023800 	.word	0x40023800

08018c5c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8018c5c:	b510      	push	{r4, lr}
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8018c5e:	4808      	ldr	r0, [pc, #32]	; (8018c80 <MX_DMA2D_Init+0x24>)
  hdma2d.Init.Mode = DMA2D_R2M;
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
  hdma2d.Init.OutputOffset = 0;
 8018c60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8018c64:	4907      	ldr	r1, [pc, #28]	; (8018c84 <MX_DMA2D_Init+0x28>)
 8018c66:	2302      	movs	r3, #2
 8018c68:	2400      	movs	r4, #0
 8018c6a:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8018c6e:	f7e8 fe29 	bl	80018c4 <HAL_DMA2D_Init>
 8018c72:	b900      	cbnz	r0, 8018c76 <MX_DMA2D_Init+0x1a>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8018c74:	bd10      	pop	{r4, pc}
 8018c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8018c7a:	f001 b92d 	b.w	8019ed8 <Error_Handler>
 8018c7e:	bf00      	nop
 8018c80:	200009ac 	.word	0x200009ac
 8018c84:	4002b000 	.word	0x4002b000

08018c88 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8018c88:	4b0d      	ldr	r3, [pc, #52]	; (8018cc0 <HAL_DMA2D_MspInit+0x38>)
 8018c8a:	6802      	ldr	r2, [r0, #0]
 8018c8c:	429a      	cmp	r2, r3
 8018c8e:	d000      	beq.n	8018c92 <HAL_DMA2D_MspInit+0xa>
 8018c90:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */
	__HAL_DMA2D_ENABLE_IT(&hdma2d, DMA2D_IT_TC);
 8018c92:	4a0c      	ldr	r2, [pc, #48]	; (8018cc4 <HAL_DMA2D_MspInit+0x3c>)
	__HAL_DMA2D_CLEAR_FLAG(&hdma2d, DMA2D_IT_TC);
 8018c94:	f44f 7000 	mov.w	r0, #512	; 0x200
  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8018c98:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
{
 8018c9c:	b082      	sub	sp, #8
	__HAL_DMA2D_ENABLE_IT(&hdma2d, DMA2D_IT_TC);
 8018c9e:	6812      	ldr	r2, [r2, #0]
 8018ca0:	6811      	ldr	r1, [r2, #0]
 8018ca2:	4301      	orrs	r1, r0
 8018ca4:	6011      	str	r1, [r2, #0]
	__HAL_DMA2D_CLEAR_FLAG(&hdma2d, DMA2D_IT_TC);
 8018ca6:	6090      	str	r0, [r2, #8]
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8018ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018caa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8018cae:	631a      	str	r2, [r3, #48]	; 0x30
 8018cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018cb6:	9301      	str	r3, [sp, #4]
 8018cb8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8018cba:	b002      	add	sp, #8
 8018cbc:	4770      	bx	lr
 8018cbe:	bf00      	nop
 8018cc0:	4002b000 	.word	0x4002b000
 8018cc4:	200009ac 	.word	0x200009ac

08018cc8 <MX_FATFS_Init>:
#include "ff.h"

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8018cc8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  //retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8018cca:	4903      	ldr	r1, [pc, #12]	; (8018cd8 <MX_FATFS_Init+0x10>)
 8018ccc:	4803      	ldr	r0, [pc, #12]	; (8018cdc <MX_FATFS_Init+0x14>)
 8018cce:	f7f2 ffe9 	bl	800bca4 <FATFS_LinkDriver>
 8018cd2:	4b03      	ldr	r3, [pc, #12]	; (8018ce0 <MX_FATFS_Init+0x18>)
 8018cd4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8018cd6:	bd08      	pop	{r3, pc}
 8018cd8:	200009f0 	.word	0x200009f0
 8018cdc:	08024f68 	.word	0x08024f68
 8018ce0:	200009f4 	.word	0x200009f4

08018ce4 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8018ce4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018ce8:	4803      	ldr	r0, [pc, #12]	; (8018cf8 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 8018cea:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8018cec:	f7e9 f972 	bl	8001fd4 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8018cf0:	fab0 f080 	clz	r0, r0
 8018cf4:	0940      	lsrs	r0, r0, #5
 8018cf6:	bd08      	pop	{r3, pc}
 8018cf8:	40020800 	.word	0x40020800

08018cfc <SDRAM_Init>:
/* USER CODE BEGIN 0 */
FMC_SDRAM_CommandTypeDef command;
HAL_StatusTypeDef hal_stat;

void SDRAM_Init(void)
{
 8018cfc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	__IO uint32_t tmpmrd = 0;
 8018d00:	2300      	movs	r3, #0
{
 8018d02:	b082      	sub	sp, #8
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8018d04:	4c2c      	ldr	r4, [pc, #176]	; (8018db8 <SDRAM_Init+0xbc>)
 8018d06:	2201      	movs	r2, #1
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	command.AutoRefreshNumber = 1;
	command.ModeRegisterDefinition = 0;
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d08:	4d2c      	ldr	r5, [pc, #176]	; (8018dbc <SDRAM_Init+0xc0>)
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8018d0a:	f04f 0801 	mov.w	r8, #1
	__IO uint32_t tmpmrd = 0;
 8018d0e:	9301      	str	r3, [sp, #4]
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8018d10:	2310      	movs	r3, #16
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d12:	4e2b      	ldr	r6, [pc, #172]	; (8018dc0 <SDRAM_Init+0xc4>)
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8018d14:	f04f 0900 	mov.w	r9, #0
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d18:	4621      	mov	r1, r4
 8018d1a:	4628      	mov	r0, r5
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8018d1c:	e9c4 2300 	strd	r2, r3, [r4]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8018d24:	e9c4 8902 	strd	r8, r9, [r4, #8]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d28:	f7ec fe76 	bl	8005a18 <HAL_SDRAM_SendCommand>
 8018d2c:	7030      	strb	r0, [r6, #0]
	HAL_Delay(1);
 8018d2e:	2001      	movs	r0, #1
 8018d30:	f7e8 f9a4 	bl	800107c <HAL_Delay>

	command.CommandMode = FMC_SDRAM_CMD_PALL;
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	command.AutoRefreshNumber = 1;
	command.ModeRegisterDefinition = 0;
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d34:	4621      	mov	r1, r4
 8018d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d3a:	4628      	mov	r0, r5
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8018d3c:	e9c4 8902 	strd	r8, r9, [r4, #8]
 8018d40:	f04f 0802 	mov.w	r8, #2
 8018d44:	f04f 0910 	mov.w	r9, #16
 8018d48:	e9c4 8900 	strd	r8, r9, [r4]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d4c:	f7ec fe64 	bl	8005a18 <HAL_SDRAM_SendCommand>
 8018d50:	4603      	mov	r3, r0
	HAL_Delay(1);
 8018d52:	2001      	movs	r0, #1
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d54:	7033      	strb	r3, [r6, #0]
	HAL_Delay(1);
 8018d56:	f7e8 f991 	bl	800107c <HAL_Delay>

	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8018d5a:	2203      	movs	r2, #3
 8018d5c:	2310      	movs	r3, #16
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	command.AutoRefreshNumber = 8;
	command.ModeRegisterDefinition = 0;
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d5e:	4621      	mov	r1, r4
 8018d60:	4628      	mov	r0, r5
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8018d62:	e9c4 2300 	strd	r2, r3, [r4]
 8018d66:	2300      	movs	r3, #0
 8018d68:	2208      	movs	r2, #8
 8018d6a:	e9c4 2302 	strd	r2, r3, [r4, #8]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d72:	f7ec fe51 	bl	8005a18 <HAL_SDRAM_SendCommand>
 8018d76:	4603      	mov	r3, r0
	HAL_Delay(1);
 8018d78:	2001      	movs	r0, #1
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d7a:	7033      	strb	r3, [r6, #0]
	HAL_Delay(1);
 8018d7c:	f7e8 f97e 	bl	800107c <HAL_Delay>

	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |
 8018d80:	f44f 7308 	mov.w	r3, #544	; 0x220
		  SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
		  SDRAM_MODEREG_CAS_LATENCY_2 |
		  SDRAM_MODEREG_OPERATING_MODE_STANDARD |
		  SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8018d84:	2204      	movs	r2, #4
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	command.AutoRefreshNumber = 1;
	command.ModeRegisterDefinition = tmpmrd;
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d86:	4621      	mov	r1, r4
 8018d88:	4628      	mov	r0, r5
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |
 8018d8a:	9301      	str	r3, [sp, #4]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8018d8c:	2310      	movs	r3, #16
 8018d8e:	e9c4 2300 	strd	r2, r3, [r4]
	command.ModeRegisterDefinition = tmpmrd;
 8018d92:	9a01      	ldr	r2, [sp, #4]
	command.AutoRefreshNumber = 1;
 8018d94:	2301      	movs	r3, #1
	command.ModeRegisterDefinition = tmpmrd;
 8018d96:	60e2      	str	r2, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
	command.AutoRefreshNumber = 1;
 8018d9c:	60a3      	str	r3, [r4, #8]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018d9e:	f7ec fe3b 	bl	8005a18 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8018da2:	f240 6103 	movw	r1, #1539	; 0x603
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018da6:	4603      	mov	r3, r0
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8018da8:	4628      	mov	r0, r5
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8018daa:	7033      	strb	r3, [r6, #0]
}
 8018dac:	b002      	add	sp, #8
 8018dae:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8018db2:	f7ec be49 	b.w	8005a48 <HAL_SDRAM_ProgramRefreshRate>
 8018db6:	bf00      	nop
 8018db8:	20000a00 	.word	0x20000a00
 8018dbc:	20000a14 	.word	0x20000a14
 8018dc0:	20000a10 	.word	0x20000a10

08018dc4 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8018dc4:	4817      	ldr	r0, [pc, #92]	; (8018e24 <MX_FMC_Init+0x60>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8018dc6:	2300      	movs	r3, #0
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8018dc8:	2204      	movs	r2, #4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8018dca:	4917      	ldr	r1, [pc, #92]	; (8018e28 <MX_FMC_Init+0x64>)
{
 8018dcc:	b510      	push	{r4, lr}
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8018dce:	2410      	movs	r4, #16
{
 8018dd0:	b088      	sub	sp, #32
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8018dd2:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8018dd4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8018dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8018ddc:	e9c0 1300 	strd	r1, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8018de0:	e9c0 4304 	strd	r4, r3, [r0, #16]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8018de4:	e9c0 3207 	strd	r3, r2, [r0, #28]
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8018de8:	2202      	movs	r2, #2
 8018dea:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8018dec:	f44f 7180 	mov.w	r1, #256	; 0x100
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8018df0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  SdramTiming.LoadToActiveDelay = 2;
 8018df4:	e9cd 2300 	strd	r2, r3, [sp]
 8018df8:	2204      	movs	r2, #4
 8018dfa:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8018dfc:	6181      	str	r1, [r0, #24]
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8018dfe:	2102      	movs	r1, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8018e00:	6244      	str	r4, [r0, #36]	; 0x24
  SdramTiming.RCDDelay = 2;
 8018e02:	9106      	str	r1, [sp, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8018e04:	4669      	mov	r1, sp
  SdramTiming.LoadToActiveDelay = 2;
 8018e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018e0a:	2202      	movs	r2, #2
 8018e0c:	2302      	movs	r3, #2
 8018e0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8018e12:	f7ec fddf 	bl	80059d4 <HAL_SDRAM_Init>
 8018e16:	b908      	cbnz	r0, 8018e1c <MX_FMC_Init+0x58>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8018e18:	b008      	add	sp, #32
 8018e1a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8018e1c:	f001 f85c 	bl	8019ed8 <Error_Handler>
}
 8018e20:	b008      	add	sp, #32
 8018e22:	bd10      	pop	{r4, pc}
 8018e24:	20000a14 	.word	0x20000a14
 8018e28:	a0000140 	.word	0xa0000140

08018e2c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8018e2c:	4b2e      	ldr	r3, [pc, #184]	; (8018ee8 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018e2e:	2100      	movs	r1, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8018e30:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 8018e32:	681a      	ldr	r2, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8018e34:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018e36:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
 8018e38:	2a00      	cmp	r2, #0
 8018e3a:	d152      	bne.n	8018ee2 <HAL_SDRAM_MspInit+0xb6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8018e3c:	4a2b      	ldr	r2, [pc, #172]	; (8018eec <HAL_SDRAM_MspInit+0xc0>)
  FMC_Initialized = 1;
 8018e3e:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8018e40:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8018e44:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8018e46:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8018e48:	2600      	movs	r6, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8018e4a:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8018e4c:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8018e4e:	430b      	orrs	r3, r1
 8018e50:	6393      	str	r3, [r2, #56]	; 0x38
 8018e52:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8018e54:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8018e56:	400b      	ands	r3, r1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8018e58:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
 8018e5a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018e5c:	2303      	movs	r3, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8018e5e:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018e60:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8018e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8018e66:	a902      	add	r1, sp, #8
 8018e68:	4821      	ldr	r0, [pc, #132]	; (8018ef0 <HAL_SDRAM_MspInit+0xc4>)
 8018e6a:	f7e8 ff17 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8018e6e:	f248 1213 	movw	r2, #33043	; 0x8113
 8018e72:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8018e74:	a902      	add	r1, sp, #8
 8018e76:	481f      	ldr	r0, [pc, #124]	; (8018ef4 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8018e78:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8018e7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018e7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8018e82:	f7e8 ff0b 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8018e86:	f24c 7203 	movw	r2, #50947	; 0xc703
 8018e8a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8018e8c:	a902      	add	r1, sp, #8
 8018e8e:	481a      	ldr	r0, [pc, #104]	; (8018ef8 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8018e90:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8018e92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018e96:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8018e9a:	f7e8 feff 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8018e9e:	f64f 023f 	movw	r2, #63551	; 0xf83f
 8018ea2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018ea4:	a902      	add	r1, sp, #8
 8018ea6:	4815      	ldr	r0, [pc, #84]	; (8018efc <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8018ea8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8018eaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018eae:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018eb2:	f7e8 fef3 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8018eb6:	2228      	movs	r2, #40	; 0x28
 8018eb8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018eba:	a902      	add	r1, sp, #8
 8018ebc:	4810      	ldr	r0, [pc, #64]	; (8018f00 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8018ebe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8018ec0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018ec4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018ec8:	f7e8 fee8 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8018ecc:	2208      	movs	r2, #8
 8018ece:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018ed0:	a902      	add	r1, sp, #8
 8018ed2:	480c      	ldr	r0, [pc, #48]	; (8018f04 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8018ed4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8018ed6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018eda:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018ede:	f7e8 fedd 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8018ee2:	b008      	add	sp, #32
 8018ee4:	bdd0      	pop	{r4, r6, r7, pc}
 8018ee6:	bf00      	nop
 8018ee8:	200009f8 	.word	0x200009f8
 8018eec:	40023800 	.word	0x40023800
 8018ef0:	40021000 	.word	0x40021000
 8018ef4:	40021800 	.word	0x40021800
 8018ef8:	40020c00 	.word	0x40020c00
 8018efc:	40021400 	.word	0x40021400
 8018f00:	40021c00 	.word	0x40021c00
 8018f04:	40020800 	.word	0x40020800

08018f08 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8018f08:	4770      	bx	lr
 8018f0a:	bf00      	nop

08018f0c <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8018f0c:	2000      	movs	r0, #0
 8018f0e:	4770      	bx	lr

08018f10 <ft5336_Init>:
{
 8018f10:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8018f12:	4c06      	ldr	r4, [pc, #24]	; (8018f2c <ft5336_Init+0x1c>)
  TS_IO_Delay(200);
 8018f14:	20c8      	movs	r0, #200	; 0xc8
 8018f16:	f003 fa8d 	bl	801c434 <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8018f1a:	7823      	ldrb	r3, [r4, #0]
 8018f1c:	b103      	cbz	r3, 8018f20 <ft5336_Init+0x10>
}
 8018f1e:	bd10      	pop	{r4, pc}
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8018f20:	f003 fa52 	bl	801c3c8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8018f24:	2301      	movs	r3, #1
 8018f26:	7023      	strb	r3, [r4, #0]
}
 8018f28:	bd10      	pop	{r4, pc}
 8018f2a:	bf00      	nop
 8018f2c:	20000a4c 	.word	0x20000a4c

08018f30 <ft5336_ReadID>:
{
 8018f30:	b530      	push	{r4, r5, lr}
  return(ft5336_handle.i2cInitialized);
 8018f32:	4c11      	ldr	r4, [pc, #68]	; (8018f78 <ft5336_ReadID+0x48>)
{
 8018f34:	b083      	sub	sp, #12
  volatile uint8_t ucReadId = 0;
 8018f36:	2200      	movs	r2, #0
{
 8018f38:	4605      	mov	r5, r0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8018f3a:	7823      	ldrb	r3, [r4, #0]
  volatile uint8_t ucReadId = 0;
 8018f3c:	f88d 2007 	strb.w	r2, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8018f40:	b1a3      	cbz	r3, 8018f6c <ft5336_ReadID+0x3c>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8018f42:	b2ed      	uxtb	r5, r5
 8018f44:	2400      	movs	r4, #0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8018f46:	3401      	adds	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8018f48:	21a8      	movs	r1, #168	; 0xa8
 8018f4a:	4628      	mov	r0, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8018f4c:	b2e4      	uxtb	r4, r4
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8018f4e:	f003 fa59 	bl	801c404 <TS_IO_Read>
 8018f52:	f88d 0007 	strb.w	r0, [sp, #7]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8018f56:	2c02      	cmp	r4, #2
    if(ucReadId == FT5336_ID_VALUE)
 8018f58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018f5c:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8018f5e:	d801      	bhi.n	8018f64 <ft5336_ReadID+0x34>
 8018f60:	2b51      	cmp	r3, #81	; 0x51
 8018f62:	d1f0      	bne.n	8018f46 <ft5336_ReadID+0x16>
  return (ucReadId);
 8018f64:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8018f68:	b003      	add	sp, #12
 8018f6a:	bd30      	pop	{r4, r5, pc}
    TS_IO_Init();
 8018f6c:	f003 fa2c 	bl	801c3c8 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8018f70:	2301      	movs	r3, #1
 8018f72:	7023      	strb	r3, [r4, #0]
 8018f74:	e7e5      	b.n	8018f42 <ft5336_ReadID+0x12>
 8018f76:	bf00      	nop
 8018f78:	20000a4c 	.word	0x20000a4c

08018f7c <ft5336_TS_DetectTouch>:
{
 8018f7c:	b510      	push	{r4, lr}
  volatile uint8_t nbTouch = 0;
 8018f7e:	2400      	movs	r4, #0
{
 8018f80:	b082      	sub	sp, #8
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8018f82:	2102      	movs	r1, #2
 8018f84:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8018f86:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8018f8a:	f003 fa3b 	bl	801c404 <TS_IO_Read>
 8018f8e:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8018f92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018f96:	f003 030f 	and.w	r3, r3, #15
 8018f9a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8018f9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018fa2:	2b05      	cmp	r3, #5
 8018fa4:	d901      	bls.n	8018faa <ft5336_TS_DetectTouch+0x2e>
    nbTouch = 0;
 8018fa6:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8018faa:	f89d 1007 	ldrb.w	r1, [sp, #7]
  ft5336_handle.currActiveTouchIdx = 0;
 8018fae:	2200      	movs	r2, #0
  ft5336_handle.currActiveTouchNb = nbTouch;
 8018fb0:	4b03      	ldr	r3, [pc, #12]	; (8018fc0 <ft5336_TS_DetectTouch+0x44>)
  return(nbTouch);
 8018fb2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8018fb6:	7059      	strb	r1, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8018fb8:	709a      	strb	r2, [r3, #2]
}
 8018fba:	b002      	add	sp, #8
 8018fbc:	bd10      	pop	{r4, pc}
 8018fbe:	bf00      	nop
 8018fc0:	20000a4c 	.word	0x20000a4c

08018fc4 <ft5336_TS_GetXY>:
{
 8018fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8018fc8:	4d2d      	ldr	r5, [pc, #180]	; (8019080 <ft5336_TS_GetXY+0xbc>)
{
 8018fca:	4616      	mov	r6, r2
 8018fcc:	b083      	sub	sp, #12
  volatile uint8_t ucReadData = 0;
 8018fce:	f04f 0900 	mov.w	r9, #0
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8018fd2:	78ab      	ldrb	r3, [r5, #2]
 8018fd4:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8018fd6:	f88d 9007 	strb.w	r9, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8018fda:	429a      	cmp	r2, r3
 8018fdc:	d949      	bls.n	8019072 <ft5336_TS_GetXY+0xae>
 8018fde:	2b09      	cmp	r3, #9
 8018fe0:	4688      	mov	r8, r1
    switch(ft5336_handle.currActiveTouchIdx)
 8018fe2:	d849      	bhi.n	8019078 <ft5336_TS_GetXY+0xb4>
 8018fe4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018fe8:	005b      	lsls	r3, r3, #1
 8018fea:	b2db      	uxtb	r3, r3
 8018fec:	1d19      	adds	r1, r3, #4
 8018fee:	f103 0a03 	add.w	sl, r3, #3
 8018ff2:	f103 0b06 	add.w	fp, r3, #6
 8018ff6:	3305      	adds	r3, #5
 8018ff8:	b2c9      	uxtb	r1, r1
 8018ffa:	fa5f fa8a 	uxtb.w	sl, sl
 8018ffe:	fa5f fb8b 	uxtb.w	fp, fp
 8019002:	fa5f f983 	uxtb.w	r9, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8019006:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8019008:	4f1e      	ldr	r7, [pc, #120]	; (8019084 <ft5336_TS_GetXY+0xc0>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 801900a:	4620      	mov	r0, r4
 801900c:	f003 f9fa 	bl	801c404 <TS_IO_Read>
 8019010:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8019014:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8019018:	4651      	mov	r1, sl
 801901a:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801901c:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801901e:	f003 f9f1 	bl	801c404 <TS_IO_Read>
 8019022:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8019026:	4659      	mov	r1, fp
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8019028:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 801902c:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801902e:	883b      	ldrh	r3, [r7, #0]
 8019030:	0212      	lsls	r2, r2, #8
 8019032:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8019036:	431a      	orrs	r2, r3
    *X = coord;
 8019038:	f8a8 2000 	strh.w	r2, [r8]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801903c:	803a      	strh	r2, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 801903e:	f003 f9e1 	bl	801c404 <TS_IO_Read>
 8019042:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8019044:	4649      	mov	r1, r9
 8019046:	4620      	mov	r0, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8019048:	f88d 3007 	strb.w	r3, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801904c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019050:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8019052:	f003 f9d7 	bl	801c404 <TS_IO_Read>
 8019056:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801905a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801905e:	883a      	ldrh	r2, [r7, #0]
 8019060:	021b      	lsls	r3, r3, #8
 8019062:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019066:	4313      	orrs	r3, r2
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8019068:	78aa      	ldrb	r2, [r5, #2]
 801906a:	3201      	adds	r2, #1
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801906c:	803b      	strh	r3, [r7, #0]
    *Y = coord;
 801906e:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8019070:	70aa      	strb	r2, [r5, #2]
}
 8019072:	b003      	add	sp, #12
 8019074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8019078:	46cb      	mov	fp, r9
 801907a:	46ca      	mov	sl, r9
 801907c:	4649      	mov	r1, r9
 801907e:	e7c2      	b.n	8019006 <ft5336_TS_GetXY+0x42>
 8019080:	20000a4c 	.word	0x20000a4c
 8019084:	20000a48 	.word	0x20000a48

08019088 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8019088:	2201      	movs	r2, #1
 801908a:	21a4      	movs	r1, #164	; 0xa4
 801908c:	b2c0      	uxtb	r0, r0
 801908e:	f003 b9a1 	b.w	801c3d4 <TS_IO_Write>
 8019092:	bf00      	nop

08019094 <ft5336_TS_Start>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8019094:	2200      	movs	r2, #0
 8019096:	21a4      	movs	r1, #164	; 0xa4
 8019098:	b2c0      	uxtb	r0, r0
 801909a:	f003 b99b 	b.w	801c3d4 <TS_IO_Write>
 801909e:	bf00      	nop

080190a0 <ft5336_TS_ClearIT>:
 80190a0:	4770      	bx	lr
 80190a2:	bf00      	nop

080190a4 <ft5336_TS_DisableIT>:
 80190a4:	2200      	movs	r2, #0
 80190a6:	21a4      	movs	r1, #164	; 0xa4
 80190a8:	b2c0      	uxtb	r0, r0
 80190aa:	f003 b993 	b.w	801c3d4 <TS_IO_Write>
 80190ae:	bf00      	nop

080190b0 <ft5336_TS_GetGestureID>:
{
 80190b0:	b510      	push	{r4, lr}
  volatile uint8_t ucReadData = 0;
 80190b2:	2300      	movs	r3, #0
{
 80190b4:	b082      	sub	sp, #8
 80190b6:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80190b8:	b2c0      	uxtb	r0, r0
 80190ba:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 80190bc:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80190c0:	f003 f9a0 	bl	801c404 <TS_IO_Read>
 80190c4:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 80190c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80190cc:	6023      	str	r3, [r4, #0]
}
 80190ce:	b002      	add	sp, #8
 80190d0:	bd10      	pop	{r4, pc}
 80190d2:	bf00      	nop

080190d4 <ft5336_TS_GetTouchInfo>:
{
 80190d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190d8:	461c      	mov	r4, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80190da:	4b22      	ldr	r3, [pc, #136]	; (8019164 <ft5336_TS_GetTouchInfo+0x90>)
{
 80190dc:	b082      	sub	sp, #8
  volatile uint8_t ucReadData = 0;
 80190de:	f04f 0c00 	mov.w	ip, #0
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80190e2:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 80190e4:	f88d c007 	strb.w	ip, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80190e8:	428b      	cmp	r3, r1
 80190ea:	d934      	bls.n	8019156 <ft5336_TS_GetTouchInfo+0x82>
 80190ec:	2909      	cmp	r1, #9
 80190ee:	4616      	mov	r6, r2
    switch(touchIdx)
 80190f0:	d834      	bhi.n	801915c <ft5336_TS_GetTouchInfo+0x88>
 80190f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80190f6:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80190fa:	fa5f fc8c 	uxtb.w	ip, ip
 80190fe:	f10c 0103 	add.w	r1, ip, #3
 8019102:	f10c 0807 	add.w	r8, ip, #7
 8019106:	f10c 0c08 	add.w	ip, ip, #8
 801910a:	b2c9      	uxtb	r1, r1
 801910c:	fa5f f888 	uxtb.w	r8, r8
 8019110:	fa5f f58c 	uxtb.w	r5, ip
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8019114:	b2c7      	uxtb	r7, r0
 8019116:	4638      	mov	r0, r7
 8019118:	f003 f974 	bl	801c404 <TS_IO_Read>
 801911c:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8019120:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8019124:	4641      	mov	r1, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8019126:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8019128:	4638      	mov	r0, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 801912a:	099b      	lsrs	r3, r3, #6
 801912c:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 801912e:	f003 f969 	bl	801c404 <TS_IO_Read>
 8019132:	4603      	mov	r3, r0
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8019134:	4629      	mov	r1, r5
 8019136:	4638      	mov	r0, r7
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8019138:	f88d 3007 	strb.w	r3, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 801913c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019140:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8019142:	f003 f95f 	bl	801c404 <TS_IO_Read>
 8019146:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 801914a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801914e:	0912      	lsrs	r2, r2, #4
 8019150:	f002 0204 	and.w	r2, r2, #4
 8019154:	6022      	str	r2, [r4, #0]
}
 8019156:	b002      	add	sp, #8
 8019158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 801915c:	4665      	mov	r5, ip
 801915e:	46e0      	mov	r8, ip
 8019160:	4661      	mov	r1, ip
 8019162:	e7d7      	b.n	8019114 <ft5336_TS_GetTouchInfo+0x40>
 8019164:	20000a4c 	.word	0x20000a4c

08019168 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8019168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801916c:	4ba0      	ldr	r3, [pc, #640]	; (80193f0 <MX_GPIO_Init+0x288>)
{
 801916e:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019170:	2400      	movs	r4, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FS_PowerSwitchOn_GPIO_Port, FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8019172:	4ea0      	ldr	r6, [pc, #640]	; (80193f4 <MX_GPIO_Init+0x28c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8019174:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 8019420 <MX_GPIO_Init+0x2b8>
  HAL_GPIO_WritePin(FS_PowerSwitchOn_GPIO_Port, FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8019178:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801917a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_WritePin(FS_PowerSwitchOn_GPIO_Port, FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 801917c:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 801917e:	4d9e      	ldr	r5, [pc, #632]	; (80193f8 <MX_GPIO_Init+0x290>)
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8019180:	2701      	movs	r7, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8019182:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 8019424 <MX_GPIO_Init+0x2bc>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8019186:	f04f 0902 	mov.w	r9, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801918a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 801918e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8019192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019194:	f042 0210 	orr.w	r2, r2, #16
 8019198:	631a      	str	r2, [r3, #48]	; 0x30
 801919a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801919c:	f002 0210 	and.w	r2, r2, #16
 80191a0:	9201      	str	r2, [sp, #4]
 80191a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80191a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80191aa:	631a      	str	r2, [r3, #48]	; 0x30
 80191ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191ae:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80191b2:	9202      	str	r2, [sp, #8]
 80191b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80191b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191b8:	f042 0202 	orr.w	r2, r2, #2
 80191bc:	631a      	str	r2, [r3, #48]	; 0x30
 80191be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191c0:	f002 0202 	and.w	r2, r2, #2
 80191c4:	9203      	str	r2, [sp, #12]
 80191c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80191c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191ca:	f042 0208 	orr.w	r2, r2, #8
 80191ce:	631a      	str	r2, [r3, #48]	; 0x30
 80191d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191d2:	f002 0208 	and.w	r2, r2, #8
 80191d6:	9204      	str	r2, [sp, #16]
 80191d8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80191da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191dc:	f042 0204 	orr.w	r2, r2, #4
 80191e0:	631a      	str	r2, [r3, #48]	; 0x30
 80191e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191e4:	f002 0204 	and.w	r2, r2, #4
 80191e8:	9205      	str	r2, [sp, #20]
 80191ea:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80191ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191ee:	f042 0201 	orr.w	r2, r2, #1
 80191f2:	631a      	str	r2, [r3, #48]	; 0x30
 80191f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191f6:	f002 0201 	and.w	r2, r2, #1
 80191fa:	9206      	str	r2, [sp, #24]
 80191fc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80191fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019204:	631a      	str	r2, [r3, #48]	; 0x30
 8019206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019208:	f402 7200 	and.w	r2, r2, #512	; 0x200
 801920c:	9207      	str	r2, [sp, #28]
 801920e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8019210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019216:	631a      	str	r2, [r3, #48]	; 0x30
 8019218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801921a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801921e:	9208      	str	r2, [sp, #32]
 8019220:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8019222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019228:	631a      	str	r2, [r3, #48]	; 0x30
 801922a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801922c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8019230:	9209      	str	r2, [sp, #36]	; 0x24
 8019232:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8019234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019236:	f042 0220 	orr.w	r2, r2, #32
 801923a:	631a      	str	r2, [r3, #48]	; 0x30
 801923c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801923e:	f002 0220 	and.w	r2, r2, #32
 8019242:	920a      	str	r2, [sp, #40]	; 0x28
 8019244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8019246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019248:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801924c:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(FS_PowerSwitchOn_GPIO_Port, FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 801924e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8019250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019256:	930b      	str	r3, [sp, #44]	; 0x2c
 8019258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(FS_PowerSwitchOn_GPIO_Port, FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 801925a:	f7e8 fecd 	bl	8001ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 801925e:	4640      	mov	r0, r8
 8019260:	2201      	movs	r2, #1
 8019262:	2108      	movs	r1, #8
 8019264:	f7e8 fec8 	bl	8001ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8019268:	4628      	mov	r0, r5
 801926a:	2201      	movs	r2, #1
 801926c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8019270:	f7e8 fec2 	bl	8001ff8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8019274:	226c      	movs	r2, #108	; 0x6c
 8019276:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8019278:	a90c      	add	r1, sp, #48	; 0x30
 801927a:	4860      	ldr	r0, [pc, #384]	; (80193fc <MX_GPIO_Init+0x294>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801927c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 801927e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8019282:	f7e8 fd0b 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10
 8019286:	f646 62ec 	movw	r2, #28396	; 0x6eec
 801928a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801928c:	a90c      	add	r1, sp, #48	; 0x30
 801928e:	485c      	ldr	r0, [pc, #368]	; (8019400 <MX_GPIO_Init+0x298>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019290:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10
 8019292:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8019296:	f7e8 fd01 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 801929a:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 801929e:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80192a0:	a90c      	add	r1, sp, #48	; 0x30
 80192a2:	4858      	ldr	r0, [pc, #352]	; (8019404 <MX_GPIO_Init+0x29c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192a4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 80192a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80192aa:	f7e8 fcf7 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 80192ae:	f643 02d8 	movw	r2, #14552	; 0x38d8
 80192b2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80192b4:	a90c      	add	r1, sp, #48	; 0x30
 80192b6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192b8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 80192ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80192be:	f7e8 fced 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
 80192c2:	f248 72d7 	movw	r2, #34775	; 0x87d7
 80192c6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80192c8:	a90c      	add	r1, sp, #48	; 0x30
 80192ca:	484f      	ldr	r0, [pc, #316]	; (8019408 <MX_GPIO_Init+0x2a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192cc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
 80192ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80192d2:	f7e8 fce3 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80192d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80192da:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80192dc:	a90c      	add	r1, sp, #48	; 0x30
 80192de:	484b      	ldr	r0, [pc, #300]	; (801940c <MX_GPIO_Init+0x2a4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192e0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80192e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80192e6:	f7e8 fcd9 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3;
 80192ea:	f44f 7284 	mov.w	r2, #264	; 0x108
 80192ee:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80192f0:	a90c      	add	r1, sp, #48	; 0x30
 80192f2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192f4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3;
 80192f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80192fa:	f7e8 fccf 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FS_PowerSwitchOn_Pin;
 80192fe:	2220      	movs	r2, #32
 8019300:	2301      	movs	r3, #1
  HAL_GPIO_Init(FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8019302:	4630      	mov	r0, r6
 8019304:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = FS_PowerSwitchOn_Pin;
 8019306:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801930a:	2200      	movs	r2, #0
 801930c:	2300      	movs	r3, #0
 801930e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8019312:	f7e8 fcc3 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KBD_INT_Pin|LCD_INT_Pin;
 8019316:	f242 0204 	movw	r2, #8196	; 0x2004
 801931a:	4b3d      	ldr	r3, [pc, #244]	; (8019410 <MX_GPIO_Init+0x2a8>)
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801931c:	a90c      	add	r1, sp, #48	; 0x30
 801931e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019320:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = KBD_INT_Pin|LCD_INT_Pin;
 8019322:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8019326:	f7e8 fcb9 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 801932a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801932e:	2300      	movs	r3, #0
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8019330:	a90c      	add	r1, sp, #48	; 0x30
 8019332:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8019334:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8019336:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 801933a:	f7e8 fcaf 	bl	8001c9c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 801933e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8019340:	2208      	movs	r2, #8
 8019342:	f04f 0800 	mov.w	r8, #0
 8019346:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8019348:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 801934a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801934e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8019352:	f7e8 fca3 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH2
                           PH12 PH9 PH11 PH6
                           PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 8019356:	f64f 6244 	movw	r2, #65092	; 0xfe44
 801935a:	2303      	movs	r3, #3
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801935c:	a90c      	add	r1, sp, #48	; 0x30
 801935e:	482d      	ldr	r0, [pc, #180]	; (8019414 <MX_GPIO_Init+0x2ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019360:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 8019362:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8019366:	f7e8 fc99 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 801936a:	f24c 02f6 	movw	r2, #49398	; 0xc0f6
 801936e:	2303      	movs	r3, #3
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8019370:	4650      	mov	r0, sl
 8019372:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019374:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 8019376:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801937a:	f7e8 fc8f 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 801937e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019382:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8019384:	a90c      	add	r1, sp, #48	; 0x30
 8019386:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8019388:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801938c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8019390:	f7e8 fc84 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8019394:	2201      	movs	r2, #1
 8019396:	4b20      	ldr	r3, [pc, #128]	; (8019418 <MX_GPIO_Init+0x2b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8019398:	a90c      	add	r1, sp, #48	; 0x30
 801939a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801939c:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 801939e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80193a2:	f7e8 fc7b 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80193a6:	2303      	movs	r3, #3
 80193a8:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80193ac:	a90c      	add	r1, sp, #48	; 0x30
 80193ae:	481b      	ldr	r0, [pc, #108]	; (801941c <MX_GPIO_Init+0x2b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80193b0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80193b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80193b6:	f7e8 fc71 	bl	8001c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80193ba:	4622      	mov	r2, r4
 80193bc:	2102      	movs	r1, #2
 80193be:	2006      	movs	r0, #6
 80193c0:	f7e7 fe8c 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80193c4:	2006      	movs	r0, #6
 80193c6:	f7e7 fed3 	bl	8001170 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 80193ca:	4622      	mov	r2, r4
 80193cc:	2102      	movs	r1, #2
 80193ce:	2008      	movs	r0, #8
 80193d0:	f7e7 fe84 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80193d4:	2008      	movs	r0, #8
 80193d6:	f7e7 fecb 	bl	8001170 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80193da:	4622      	mov	r2, r4
 80193dc:	2103      	movs	r1, #3
 80193de:	2028      	movs	r0, #40	; 0x28
 80193e0:	f7e7 fe7c 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80193e4:	2028      	movs	r0, #40	; 0x28
 80193e6:	f7e7 fec3 	bl	8001170 <HAL_NVIC_EnableIRQ>

}
 80193ea:	b012      	add	sp, #72	; 0x48
 80193ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193f0:	40023800 	.word	0x40023800
 80193f4:	40020c00 	.word	0x40020c00
 80193f8:	40022000 	.word	0x40022000
 80193fc:	40021000 	.word	0x40021000
 8019400:	40021800 	.word	0x40021800
 8019404:	40020400 	.word	0x40020400
 8019408:	40020000 	.word	0x40020000
 801940c:	40022400 	.word	0x40022400
 8019410:	10110000 	.word	0x10110000
 8019414:	40021c00 	.word	0x40021c00
 8019418:	10210000 	.word	0x10210000
 801941c:	40021400 	.word	0x40021400
 8019420:	40022800 	.word	0x40022800
 8019424:	40020800 	.word	0x40020800

08019428 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8019428:	b510      	push	{r4, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 801942a:	4817      	ldr	r0, [pc, #92]	; (8019488 <MX_I2C3_Init+0x60>)
  hi2c3.Init.Timing = 0x20303E5D;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801942c:	2300      	movs	r3, #0
 801942e:	4917      	ldr	r1, [pc, #92]	; (801948c <MX_I2C3_Init+0x64>)
 8019430:	2401      	movs	r4, #1
 8019432:	4a17      	ldr	r2, [pc, #92]	; (8019490 <MX_I2C3_Init+0x68>)
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8019434:	6203      	str	r3, [r0, #32]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8019436:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c3.Init.OwnAddress2 = 0;
 801943a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801943e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8019442:	f7e9 fcc5 	bl	8002dd0 <HAL_I2C_Init>
 8019446:	b950      	cbnz	r0, 801945e <MX_I2C3_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8019448:	2100      	movs	r1, #0
 801944a:	480f      	ldr	r0, [pc, #60]	; (8019488 <MX_I2C3_Init+0x60>)
 801944c:	f7ea f878 	bl	8003540 <HAL_I2CEx_ConfigAnalogFilter>
 8019450:	b968      	cbnz	r0, 801946e <MX_I2C3_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8019452:	2100      	movs	r1, #0
 8019454:	480c      	ldr	r0, [pc, #48]	; (8019488 <MX_I2C3_Init+0x60>)
 8019456:	f7ea f8c5 	bl	80035e4 <HAL_I2CEx_ConfigDigitalFilter>
 801945a:	b980      	cbnz	r0, 801947e <MX_I2C3_Init+0x56>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 801945c:	bd10      	pop	{r4, pc}
    Error_Handler();
 801945e:	f000 fd3b 	bl	8019ed8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8019462:	2100      	movs	r1, #0
 8019464:	4808      	ldr	r0, [pc, #32]	; (8019488 <MX_I2C3_Init+0x60>)
 8019466:	f7ea f86b 	bl	8003540 <HAL_I2CEx_ConfigAnalogFilter>
 801946a:	2800      	cmp	r0, #0
 801946c:	d0f1      	beq.n	8019452 <MX_I2C3_Init+0x2a>
    Error_Handler();
 801946e:	f000 fd33 	bl	8019ed8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8019472:	2100      	movs	r1, #0
 8019474:	4804      	ldr	r0, [pc, #16]	; (8019488 <MX_I2C3_Init+0x60>)
 8019476:	f7ea f8b5 	bl	80035e4 <HAL_I2CEx_ConfigDigitalFilter>
 801947a:	2800      	cmp	r0, #0
 801947c:	d0ee      	beq.n	801945c <MX_I2C3_Init+0x34>
}
 801947e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8019482:	f000 bd29 	b.w	8019ed8 <Error_Handler>
 8019486:	bf00      	nop
 8019488:	20000a50 	.word	0x20000a50
 801948c:	40005c00 	.word	0x40005c00
 8019490:	20303e5d 	.word	0x20303e5d
 8019494:	00000000 	.word	0x00000000

08019498 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8019498:	b510      	push	{r4, lr}
 801949a:	b0a8      	sub	sp, #160	; 0xa0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801949c:	2100      	movs	r1, #0
{
 801949e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80194a0:	2284      	movs	r2, #132	; 0x84
 80194a2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80194a4:	9106      	str	r1, [sp, #24]
 80194a6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80194aa:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80194ae:	f005 fe51 	bl	801f154 <memset>
  if(i2cHandle->Instance==I2C3)
 80194b2:	4b1b      	ldr	r3, [pc, #108]	; (8019520 <HAL_I2C_MspInit+0x88>)
 80194b4:	6822      	ldr	r2, [r4, #0]
 80194b6:	429a      	cmp	r2, r3
 80194b8:	d001      	beq.n	80194be <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80194ba:	b028      	add	sp, #160	; 0xa0
 80194bc:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80194be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80194c2:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80194c4:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80194c6:	f7eb f8d1 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
 80194ca:	bb10      	cbnz	r0, 8019512 <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80194cc:	4c15      	ldr	r4, [pc, #84]	; (8019524 <HAL_I2C_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80194ce:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80194d0:	a902      	add	r1, sp, #8
 80194d2:	4815      	ldr	r0, [pc, #84]	; (8019528 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80194d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80194d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194da:	6323      	str	r3, [r4, #48]	; 0x30
 80194dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80194de:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80194e0:	2201      	movs	r2, #1
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80194e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80194e6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8019518 <HAL_I2C_MspInit+0x80>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80194ea:	9300      	str	r3, [sp, #0]
 80194ec:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80194ee:	2303      	movs	r3, #3
 80194f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80194f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80194f8:	f7e8 fbd0 	bl	8001c9c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80194fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80194fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019502:	6423      	str	r3, [r4, #64]	; 0x40
 8019504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801950a:	9301      	str	r3, [sp, #4]
 801950c:	9b01      	ldr	r3, [sp, #4]
}
 801950e:	b028      	add	sp, #160	; 0xa0
 8019510:	bd10      	pop	{r4, pc}
      Error_Handler();
 8019512:	f000 fce1 	bl	8019ed8 <Error_Handler>
 8019516:	e7d9      	b.n	80194cc <HAL_I2C_MspInit+0x34>
 8019518:	00000180 	.word	0x00000180
 801951c:	00000012 	.word	0x00000012
 8019520:	40005c00 	.word	0x40005c00
 8019524:	40023800 	.word	0x40023800
 8019528:	40021c00 	.word	0x40021c00

0801952c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 801952c:	b510      	push	{r4, lr}
 801952e:	b09a      	sub	sp, #104	; 0x68

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8019530:	2234      	movs	r2, #52	; 0x34
 8019532:	2100      	movs	r1, #0
 8019534:	4668      	mov	r0, sp
 8019536:	f005 fe0d 	bl	801f154 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 801953a:	2234      	movs	r2, #52	; 0x34
 801953c:	2100      	movs	r1, #0
 801953e:	eb0d 0002 	add.w	r0, sp, r2
 8019542:	f005 fe07 	bl	801f154 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8019546:	4836      	ldr	r0, [pc, #216]	; (8019620 <MX_LTDC_Init+0xf4>)
 8019548:	2300      	movs	r3, #0
 801954a:	4a36      	ldr	r2, [pc, #216]	; (8019624 <MX_LTDC_Init+0xf8>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 0;
  hltdc.Init.VerticalSync = 9;
  hltdc.Init.AccumulatedHBP = 43;
  hltdc.Init.AccumulatedVBP = 29;
  hltdc.Init.AccumulatedActiveW = 523;
 801954c:	f04f 0e1d 	mov.w	lr, #29
  hltdc.Init.AccumulatedActiveH = 301;
  hltdc.Init.TotalWidth = 531;
  hltdc.Init.TotalHeigh = 305;
  hltdc.Init.Backcolor.Blue = 0;
 8019550:	8683      	strh	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
 8019552:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  hltdc.Instance = LTDC;
 8019556:	e9c0 2300 	strd	r2, r3, [r0]
  hltdc.Init.VerticalSync = 9;
 801955a:	2209      	movs	r2, #9
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801955c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hltdc.Init.HorizontalSync = 0;
 8019560:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hltdc.Init.VerticalSync = 9;
 8019564:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedActiveW = 523;
 8019566:	f240 230b 	movw	r3, #523	; 0x20b
  hltdc.Init.AccumulatedHBP = 43;
 801956a:	222b      	movs	r2, #43	; 0x2b
  hltdc.Init.AccumulatedActiveW = 523;
 801956c:	e9c0 e308 	strd	lr, r3, [r0, #32]
  hltdc.Init.AccumulatedHBP = 43;
 8019570:	61c2      	str	r2, [r0, #28]
  hltdc.Init.TotalWidth = 531;
 8019572:	f240 2313 	movw	r3, #531	; 0x213
 8019576:	f240 122d 	movw	r2, #301	; 0x12d
 801957a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hltdc.Init.TotalHeigh = 305;
 801957e:	f240 1331 	movw	r3, #305	; 0x131
 8019582:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8019584:	f7ea f90c 	bl	80037a0 <HAL_LTDC_Init>
 8019588:	2800      	cmp	r0, #0
 801958a:	d13e      	bne.n	801960a <MX_LTDC_Init+0xde>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 801958c:	2200      	movs	r2, #0
  pLayerCfg.WindowX1 = 480;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 272;
 801958e:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX1 = 480;
 8019592:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
  pLayerCfg.Alpha = 0;
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8019596:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  pLayerCfg.FBStartAdress = 0;
  pLayerCfg.ImageWidth = 480;
  pLayerCfg.ImageHeight = 272;
 801959a:	930b      	str	r3, [sp, #44]	; 0x2c
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801959c:	4669      	mov	r1, sp
  pLayerCfg.ImageWidth = 480;
 801959e:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.FBStartAdress = 0;
 80195a0:	9209      	str	r2, [sp, #36]	; 0x24
  pLayerCfg.Backcolor.Blue = 0;
 80195a2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Red = 0;
 80195a6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
  pLayerCfg.WindowY1 = 272;
 80195aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80195ae:	2302      	movs	r3, #2
 80195b0:	9304      	str	r3, [sp, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80195b2:	2305      	movs	r3, #5
  pLayerCfg.WindowX1 = 480;
 80195b4:	e9cd 2000 	strd	r2, r0, [sp]
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80195b8:	4819      	ldr	r0, [pc, #100]	; (8019620 <MX_LTDC_Init+0xf4>)
  pLayerCfg.Alpha0 = 0;
 80195ba:	e9cd 2205 	strd	r2, r2, [sp, #20]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80195be:	e9cd c307 	strd	ip, r3, [sp, #28]
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80195c2:	f7ea f9df 	bl	8003984 <HAL_LTDC_ConfigLayer>
 80195c6:	bb38      	cbnz	r0, 8019618 <MX_LTDC_Init+0xec>
  }
  pLayerCfg1.WindowX0 = 0;
  pLayerCfg1.WindowX1 = 480;
  pLayerCfg1.WindowY0 = 0;
  pLayerCfg1.WindowY1 = 272;
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80195c8:	2402      	movs	r4, #2
  pLayerCfg1.WindowX0 = 0;
 80195ca:	2300      	movs	r3, #0
  pLayerCfg1.WindowX1 = 480;
 80195cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg1.WindowY1 = 272;
 80195d0:	f44f 7088 	mov.w	r0, #272	; 0x110
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80195d4:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg1.Alpha = 0;
  pLayerCfg1.Alpha0 = 0;
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80195d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
  pLayerCfg1.FBStartAdress = 0;
  pLayerCfg1.ImageWidth = 480;
 80195da:	9217      	str	r2, [sp, #92]	; 0x5c
  pLayerCfg1.ImageHeight = 272;
  pLayerCfg1.Backcolor.Blue = 0;
  pLayerCfg1.Backcolor.Green = 0;
  pLayerCfg1.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80195dc:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80195de:	9414      	str	r4, [sp, #80]	; 0x50
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80195e0:	2405      	movs	r4, #5
  pLayerCfg1.ImageHeight = 272;
 80195e2:	9018      	str	r0, [sp, #96]	; 0x60
  pLayerCfg1.FBStartAdress = 0;
 80195e4:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80195e6:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg1.Backcolor.Blue = 0;
 80195e8:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
  pLayerCfg1.Backcolor.Red = 0;
 80195ec:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
  pLayerCfg1.WindowX1 = 480;
 80195f0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  pLayerCfg1.WindowY1 = 272;
 80195f4:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80195f8:	2201      	movs	r2, #1
 80195fa:	4809      	ldr	r0, [pc, #36]	; (8019620 <MX_LTDC_Init+0xf4>)
  pLayerCfg1.Alpha0 = 0;
 80195fc:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8019600:	f7ea f9c0 	bl	8003984 <HAL_LTDC_ConfigLayer>
 8019604:	b920      	cbnz	r0, 8019610 <MX_LTDC_Init+0xe4>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8019606:	b01a      	add	sp, #104	; 0x68
 8019608:	bd10      	pop	{r4, pc}
    Error_Handler();
 801960a:	f000 fc65 	bl	8019ed8 <Error_Handler>
 801960e:	e7bd      	b.n	801958c <MX_LTDC_Init+0x60>
    Error_Handler();
 8019610:	f000 fc62 	bl	8019ed8 <Error_Handler>
}
 8019614:	b01a      	add	sp, #104	; 0x68
 8019616:	bd10      	pop	{r4, pc}
    Error_Handler();
 8019618:	f000 fc5e 	bl	8019ed8 <Error_Handler>
 801961c:	e7d4      	b.n	80195c8 <MX_LTDC_Init+0x9c>
 801961e:	bf00      	nop
 8019620:	20000a9c 	.word	0x20000a9c
 8019624:	40016800 	.word	0x40016800

08019628 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8019628:	b570      	push	{r4, r5, r6, lr}
 801962a:	b0ae      	sub	sp, #184	; 0xb8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801962c:	2100      	movs	r1, #0
{
 801962e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8019630:	2284      	movs	r2, #132	; 0x84
 8019632:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019634:	910a      	str	r1, [sp, #40]	; 0x28
 8019636:	e9cd 1106 	strd	r1, r1, [sp, #24]
 801963a:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801963e:	f005 fd89 	bl	801f154 <memset>
  if(ltdcHandle->Instance==LTDC)
 8019642:	4b49      	ldr	r3, [pc, #292]	; (8019768 <HAL_LTDC_MspInit+0x140>)
 8019644:	6822      	ldr	r2, [r4, #0]
 8019646:	429a      	cmp	r2, r3
 8019648:	d001      	beq.n	801964e <HAL_LTDC_MspInit+0x26>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 801964a:	b02e      	add	sp, #184	; 0xb8
 801964c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 801964e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8019650:	2108      	movs	r1, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 240;
 8019652:	22f0      	movs	r2, #240	; 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8019654:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8019656:	910c      	str	r1, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 6;
 8019658:	2106      	movs	r1, #6
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 801965a:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 6;
 801965c:	9113      	str	r1, [sp, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 240;
 801965e:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8019662:	2201      	movs	r2, #1
 8019664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019668:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801966c:	f7ea fffe 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
 8019670:	2800      	cmp	r0, #0
 8019672:	d176      	bne.n	8019762 <HAL_LTDC_MspInit+0x13a>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8019674:	4b3d      	ldr	r3, [pc, #244]	; (801976c <HAL_LTDC_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8019676:	2010      	movs	r0, #16
 8019678:	2102      	movs	r1, #2
 801967a:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 801967c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 801967e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8019680:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8019682:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8019686:	645a      	str	r2, [r3, #68]	; 0x44
 8019688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801968a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801968e:	9200      	str	r2, [sp, #0]
 8019690:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8019692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019694:	f042 0210 	orr.w	r2, r2, #16
 8019698:	631a      	str	r2, [r3, #48]	; 0x30
 801969a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801969c:	f002 0210 	and.w	r2, r2, #16
 80196a0:	9201      	str	r2, [sp, #4]
 80196a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80196a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80196a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80196aa:	631a      	str	r2, [r3, #48]	; 0x30
 80196ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80196ae:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80196b2:	9202      	str	r2, [sp, #8]
 80196b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80196b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80196b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80196bc:	631a      	str	r2, [r3, #48]	; 0x30
 80196be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80196c0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80196c4:	9203      	str	r2, [sp, #12]
 80196c6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80196c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80196ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80196ce:	631a      	str	r2, [r3, #48]	; 0x30
 80196d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80196d2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80196d6:	9204      	str	r2, [sp, #16]
 80196d8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80196da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80196dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80196e0:	631a      	str	r2, [r3, #48]	; 0x30
 80196e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80196e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80196ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80196ee:	a906      	add	r1, sp, #24
 80196f0:	481f      	ldr	r0, [pc, #124]	; (8019770 <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80196f2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80196f4:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80196f8:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80196fa:	f7e8 facf 	bl	8001c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80196fe:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8019702:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8019704:	a906      	add	r1, sp, #24
 8019706:	481b      	ldr	r0, [pc, #108]	; (8019774 <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8019708:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 801970a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801970e:	e9cd 4508 	strd	r4, r5, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8019712:	f7e8 fac3 	bl	8001c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8019716:	22f7      	movs	r2, #247	; 0xf7
 8019718:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801971a:	a906      	add	r1, sp, #24
 801971c:	4816      	ldr	r0, [pc, #88]	; (8019778 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801971e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8019720:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019724:	e9cd 4508 	strd	r4, r5, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8019728:	f7e8 fab8 	bl	8001c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801972c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019730:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8019732:	a906      	add	r1, sp, #24
 8019734:	4811      	ldr	r0, [pc, #68]	; (801977c <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8019736:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801973a:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801973c:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8019740:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8019742:	f7e8 faab 	bl	8001c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8019746:	f44f 4246 	mov.w	r2, #50688	; 0xc600
 801974a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801974c:	a906      	add	r1, sp, #24
 801974e:	480c      	ldr	r0, [pc, #48]	; (8019780 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8019750:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8019752:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8019756:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801975a:	f7e8 fa9f 	bl	8001c9c <HAL_GPIO_Init>
}
 801975e:	b02e      	add	sp, #184	; 0xb8
 8019760:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8019762:	f000 fbb9 	bl	8019ed8 <Error_Handler>
 8019766:	e785      	b.n	8019674 <HAL_LTDC_MspInit+0x4c>
 8019768:	40016800 	.word	0x40016800
 801976c:	40023800 	.word	0x40023800
 8019770:	40021000 	.word	0x40021000
 8019774:	40022400 	.word	0x40022400
 8019778:	40022800 	.word	0x40022800
 801977c:	40021800 	.word	0x40021800
 8019780:	40022000 	.word	0x40022000

08019784 <BSP_LCD_DisplayOn>:
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
  /* Display On */
  __HAL_LTDC_ENABLE(&hltdc);
 8019784:	4b09      	ldr	r3, [pc, #36]	; (80197ac <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8019786:	2201      	movs	r2, #1
 8019788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801978c:	4808      	ldr	r0, [pc, #32]	; (80197b0 <BSP_LCD_DisplayOn+0x2c>)
{
 801978e:	b510      	push	{r4, lr}
  __HAL_LTDC_ENABLE(&hltdc);
 8019790:	681c      	ldr	r4, [r3, #0]
 8019792:	69a3      	ldr	r3, [r4, #24]
 8019794:	4313      	orrs	r3, r2
 8019796:	61a3      	str	r3, [r4, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8019798:	f7e8 fc2e 	bl	8001ff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 801979c:	2201      	movs	r2, #1
 801979e:	2108      	movs	r1, #8
 80197a0:	4804      	ldr	r0, [pc, #16]	; (80197b4 <BSP_LCD_DisplayOn+0x30>)
}
 80197a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80197a6:	f7e8 bc27 	b.w	8001ff8 <HAL_GPIO_WritePin>
 80197aa:	bf00      	nop
 80197ac:	20000a9c 	.word	0x20000a9c
 80197b0:	40022000 	.word	0x40022000
 80197b4:	40022800 	.word	0x40022800

080197b8 <find_file.constprop.0.isra.0>:
    	}
    }
    return res;
}

FRESULT find_file(uint16_t track_number)
 80197b8:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    DIR folder;
    TCHAR path[255] = {0};
    for(int i=0; i<255; i++) path[i] = ff_convert(TrackPaths[Track_number][i], 1);
 80197ba:	2400      	movs	r4, #0
FRESULT find_file(uint16_t track_number)
 80197bc:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
    TCHAR path[255] = {0};
 80197c0:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80197c4:	4f14      	ldr	r7, [pc, #80]	; (8019818 <find_file.constprop.0.isra.0+0x60>)
 80197c6:	4621      	mov	r1, r4
 80197c8:	a815      	add	r0, sp, #84	; 0x54
 80197ca:	ad14      	add	r5, sp, #80	; 0x50
 80197cc:	4e13      	ldr	r6, [pc, #76]	; (801981c <find_file.constprop.0.isra.0+0x64>)
 80197ce:	f005 fcc1 	bl	801f154 <memset>
    for(int i=0; i<255; i++) path[i] = ff_convert(TrackPaths[Track_number][i], 1);
 80197d2:	6833      	ldr	r3, [r6, #0]
 80197d4:	2101      	movs	r1, #1
 80197d6:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80197da:	443b      	add	r3, r7
 80197dc:	5d18      	ldrb	r0, [r3, r4]
 80197de:	440c      	add	r4, r1
 80197e0:	f7f2 fa8c 	bl	800bcfc <ff_convert>
 80197e4:	f845 0f04 	str.w	r0, [r5, #4]!
 80197e8:	2cff      	cmp	r4, #255	; 0xff
 80197ea:	d1f2      	bne.n	80197d2 <find_file.constprop.0.isra.0+0x1a>
    wcscpy(new_path, path);
 80197ec:	a915      	add	r1, sp, #84	; 0x54
 80197ee:	480c      	ldr	r0, [pc, #48]	; (8019820 <find_file.constprop.0.isra.0+0x68>)
	res = f_opendir(&folder, new_path);
 80197f0:	4c0c      	ldr	r4, [pc, #48]	; (8019824 <find_file.constprop.0.isra.0+0x6c>)
    wcscpy(new_path, path);
 80197f2:	f005 fe04 	bl	801f3fe <wcscpy>
	res = f_opendir(&folder, new_path);
 80197f6:	490a      	ldr	r1, [pc, #40]	; (8019820 <find_file.constprop.0.isra.0+0x68>)
 80197f8:	4668      	mov	r0, sp
 80197fa:	f7f2 f9bb 	bl	800bb74 <f_opendir>
 80197fe:	7020      	strb	r0, [r4, #0]
	if(res == FR_OK) {
 8019800:	b110      	cbz	r0, 8019808 <find_file.constprop.0.isra.0+0x50>
		res = f_readdir(&folder, &fno);
		if (!(fno.fattrib & AM_DIR)) {
		}
	}
    return res;
}
 8019802:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
 8019806:	bdf0      	pop	{r4, r5, r6, r7, pc}
		res = f_readdir(&folder, &fno);
 8019808:	4907      	ldr	r1, [pc, #28]	; (8019828 <find_file.constprop.0.isra.0+0x70>)
 801980a:	4668      	mov	r0, sp
 801980c:	f7f2 fa1e 	bl	800bc4c <f_readdir>
 8019810:	7020      	strb	r0, [r4, #0]
}
 8019812:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
 8019816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019818:	20001fdc 	.word	0x20001fdc
 801981c:	2000e714 	.word	0x2000e714
 8019820:	2000ef8c 	.word	0x2000ef8c
 8019824:	2000f784 	.word	0x2000f784
 8019828:	2000e9a8 	.word	0x2000e9a8
 801982c:	00000000 	.word	0x00000000

08019830 <SystemClock_Config>:
{
 8019830:	b500      	push	{lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8019832:	2300      	movs	r3, #0
{
 8019834:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8019836:	492a      	ldr	r1, [pc, #168]	; (80198e0 <SystemClock_Config+0xb0>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8019838:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801983a:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801983c:	9302      	str	r3, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801983e:	930d      	str	r3, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8019840:	4a28      	ldr	r2, [pc, #160]	; (80198e4 <SystemClock_Config+0xb4>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8019842:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8019846:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801984a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 801984e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019854:	640b      	str	r3, [r1, #64]	; 0x40
 8019856:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8019858:	2108      	movs	r1, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 801985a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801985e:	9300      	str	r3, [sp, #0]
 8019860:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8019862:	6813      	ldr	r3, [r2, #0]
 8019864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8019868:	6013      	str	r3, [r2, #0]
 801986a:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 801986c:	9113      	str	r1, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801986e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8019872:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8019874:	2302      	movs	r3, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8019876:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8019878:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801987c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801987e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 25;
 8019880:	2319      	movs	r3, #25
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8019882:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80198d0 <SystemClock_Config+0xa0>
  RCC_OscInitStruct.PLL.PLLM = 25;
 8019886:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 801988a:	f44f 73c0 	mov.w	r3, #384	; 0x180
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801988e:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 384;
 8019892:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8019894:	f7ea fb3e 	bl	8003f14 <HAL_RCC_OscConfig>
 8019898:	b100      	cbz	r0, 801989c <SystemClock_Config+0x6c>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 801989a:	e7fe      	b.n	801989a <SystemClock_Config+0x6a>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801989c:	f7ea fb00 	bl	8003ea0 <HAL_PWREx_EnableOverDrive>
 80198a0:	b100      	cbz	r0, 80198a4 <SystemClock_Config+0x74>
  while(1)
 80198a2:	e7fe      	b.n	80198a2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80198a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80198a8:	2200      	movs	r2, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80198aa:	a802      	add	r0, sp, #8
 80198ac:	2106      	movs	r1, #6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80198ae:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80198d8 <SystemClock_Config+0xa8>
 80198b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80198b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80198ba:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80198be:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80198c0:	f7ea fd8a 	bl	80043d8 <HAL_RCC_ClockConfig>
 80198c4:	b910      	cbnz	r0, 80198cc <SystemClock_Config+0x9c>
}
 80198c6:	b015      	add	sp, #84	; 0x54
 80198c8:	f85d fb04 	ldr.w	pc, [sp], #4
  while(1)
 80198cc:	e7fe      	b.n	80198cc <SystemClock_Config+0x9c>
 80198ce:	bf00      	nop
 80198d0:	00000001 	.word	0x00000001
 80198d4:	00010000 	.word	0x00010000
 80198d8:	0000000f 	.word	0x0000000f
 80198dc:	00000002 	.word	0x00000002
 80198e0:	40023800 	.word	0x40023800
 80198e4:	40007000 	.word	0x40007000

080198e8 <scan_files>:
{
 80198e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UINT folders = 0;
 80198ec:	2600      	movs	r6, #0
{
 80198ee:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
    TCHAR relative_path[255] = {0};
 80198f2:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80198f6:	4d67      	ldr	r5, [pc, #412]	; (8019a94 <scan_files+0x1ac>)
 80198f8:	4631      	mov	r1, r6
 80198fa:	a817      	add	r0, sp, #92	; 0x5c
    	res = f_opendir(&folder, L"/PIONEER/USBANLZ");	/* Open the directory */
 80198fc:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8019abc <scan_files+0x1d4>
 8019900:	4c65      	ldr	r4, [pc, #404]	; (8019a98 <scan_files+0x1b0>)
    	if ((res != FR_OK) || (fno.fname[0] == '\0') || (Total_tracks>=MAXTOTALTRACKS)) {
 8019902:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8019ac0 <scan_files+0x1d8>
    		for(i = 0; i < 255; i++) new_path[i] = 0;		//clr new_path
 8019906:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8019ac4 <scan_files+0x1dc>
    TCHAR relative_path[255] = {0};
 801990a:	f005 fc23 	bl	801f154 <memset>
    	res = f_opendir(&folder, L"/PIONEER/USBANLZ");	/* Open the directory */
 801990e:	4649      	mov	r1, r9
 8019910:	a802      	add	r0, sp, #8
 8019912:	f7f2 f92f 	bl	800bb74 <f_opendir>
 8019916:	7028      	strb	r0, [r5, #0]
    	if (res != FR_OK) {
 8019918:	2800      	cmp	r0, #0
 801991a:	f040 80b3 	bne.w	8019a84 <scan_files+0x19c>
    	i = 0;
 801991e:	4683      	mov	fp, r0
    		res = f_readdir(&folder, &fno);	/* Read a new, unknown directory item */
 8019920:	4621      	mov	r1, r4
 8019922:	a802      	add	r0, sp, #8
 8019924:	f7f2 f992 	bl	800bc4c <f_readdir>
    	}while(i++ < folders);
 8019928:	455e      	cmp	r6, fp
    		res = f_readdir(&folder, &fno);	/* Read a new, unknown directory item */
 801992a:	7028      	strb	r0, [r5, #0]
    	}while(i++ < folders);
 801992c:	f10b 0b01 	add.w	fp, fp, #1
 8019930:	d8f6      	bhi.n	8019920 <scan_files+0x38>
    	if ((res != FR_OK) || (fno.fname[0] == '\0') || (Total_tracks>=MAXTOTALTRACKS)) {
 8019932:	4607      	mov	r7, r0
 8019934:	2800      	cmp	r0, #0
 8019936:	f040 80a1 	bne.w	8019a7c <scan_files+0x194>
 801993a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801993c:	2b00      	cmp	r3, #0
 801993e:	f000 809d 	beq.w	8019a7c <scan_files+0x194>
 8019942:	f8b8 3000 	ldrh.w	r3, [r8]
 8019946:	2b63      	cmp	r3, #99	; 0x63
 8019948:	f200 8098 	bhi.w	8019a7c <scan_files+0x194>
    	if (fno.fattrib & AM_DIR) {	/* It is a directory */
 801994c:	7b23      	ldrb	r3, [r4, #12]
 801994e:	06da      	lsls	r2, r3, #27
 8019950:	d5dd      	bpl.n	801990e <scan_files+0x26>
    		for(i = 0; i < 255; i++) new_path[i] = 0;		//clr new_path
 8019952:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8019956:	4601      	mov	r1, r0
 8019958:	4650      	mov	r0, sl
    		folders++;
 801995a:	3601      	adds	r6, #1
    		for(i = 0; i < 255; i++) new_path[i] = 0;		//clr new_path
 801995c:	f005 fbfa 	bl	801f154 <memset>
    		wcscpy(new_path, L"/PIONEER/USBANLZ/");
 8019960:	494e      	ldr	r1, [pc, #312]	; (8019a9c <scan_files+0x1b4>)
 8019962:	4650      	mov	r0, sl
 8019964:	f005 fd4b 	bl	801f3fe <wcscpy>
    		for(i = 0; i < 255; i++) relative_path[i] = 0;	//clr rel_path
 8019968:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 801996c:	4639      	mov	r1, r7
 801996e:	a817      	add	r0, sp, #92	; 0x5c
 8019970:	f005 fbf0 	bl	801f154 <memset>
    		wcscpy(relative_path, fno.fname);				//rel_path= [directory]
 8019974:	494a      	ldr	r1, [pc, #296]	; (8019aa0 <scan_files+0x1b8>)
 8019976:	a817      	add	r0, sp, #92	; 0x5c
 8019978:	f005 fd41 	bl	801f3fe <wcscpy>
    		wcscat(new_path, relative_path);					//step in new_path=  /PIONEER/USBANLZ/ + [directory]
 801997c:	a917      	add	r1, sp, #92	; 0x5c
 801997e:	4650      	mov	r0, sl
 8019980:	f005 fd2d 	bl	801f3de <wcscat>
    		wcscpy(old_path, new_path);						//old_path=new_path
 8019984:	4651      	mov	r1, sl
 8019986:	4847      	ldr	r0, [pc, #284]	; (8019aa4 <scan_files+0x1bc>)
 8019988:	f005 fd39 	bl	801f3fe <wcscpy>
    		f_closedir(&folder);
 801998c:	a802      	add	r0, sp, #8
 801998e:	f7f2 f945 	bl	800bc1c <f_closedir>
    			res = f_opendir(&folder, old_path);			//we have to go deeper
 8019992:	4944      	ldr	r1, [pc, #272]	; (8019aa4 <scan_files+0x1bc>)
 8019994:	a802      	add	r0, sp, #8
 8019996:	f7f2 f8ed 	bl	800bb74 <f_opendir>
    			i = 0;
 801999a:	f04f 0b00 	mov.w	fp, #0
    			for(i = 0; i < 255; i++) new_path[i] = 0;	//clr new_path
 801999e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80199a2:	2100      	movs	r1, #0
    			res = f_opendir(&folder, old_path);			//we have to go deeper
 80199a4:	7028      	strb	r0, [r5, #0]
    			for(i = 0; i < 255; i++) new_path[i] = 0;	//clr new_path
 80199a6:	4650      	mov	r0, sl
 80199a8:	f005 fbd4 	bl	801f154 <memset>
    			wcscpy(new_path, old_path);					//re-use new_path=  /PIONEER/USBANLZ/ + [directory]
 80199ac:	493d      	ldr	r1, [pc, #244]	; (8019aa4 <scan_files+0x1bc>)
 80199ae:	4650      	mov	r0, sl
 80199b0:	f005 fd25 	bl	801f3fe <wcscpy>
    				res = f_readdir(&folder, &fno);	/* Read a new directory item */
 80199b4:	4621      	mov	r1, r4
 80199b6:	a802      	add	r0, sp, #8
 80199b8:	f7f2 f948 	bl	800bc4c <f_readdir>
    			}while(i++ < subfolders);
 80199bc:	455f      	cmp	r7, fp
    				res = f_readdir(&folder, &fno);	/* Read a new directory item */
 80199be:	7028      	strb	r0, [r5, #0]
    			}while(i++ < subfolders);
 80199c0:	f10b 0b01 	add.w	fp, fp, #1
 80199c4:	d8f6      	bhi.n	80199b4 <scan_files+0xcc>
    			if ((res != FR_OK) || (fno.fname[0] == '\0') || (Total_tracks>=MAXTOTALTRACKS)) {
 80199c6:	2800      	cmp	r0, #0
 80199c8:	d160      	bne.n	8019a8c <scan_files+0x1a4>
 80199ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d05d      	beq.n	8019a8c <scan_files+0x1a4>
 80199d0:	f8b8 3000 	ldrh.w	r3, [r8]
 80199d4:	2b63      	cmp	r3, #99	; 0x63
 80199d6:	d859      	bhi.n	8019a8c <scan_files+0x1a4>
    			if (fno.fattrib & AM_DIR) {	/* It is a directory */
 80199d8:	7b23      	ldrb	r3, [r4, #12]
 80199da:	06db      	lsls	r3, r3, #27
 80199dc:	d5d9      	bpl.n	8019992 <scan_files+0xaa>
    				wcscat(new_path, L"/");
 80199de:	4932      	ldr	r1, [pc, #200]	; (8019aa8 <scan_files+0x1c0>)
 80199e0:	4650      	mov	r0, sl
 80199e2:	f005 fcfc 	bl	801f3de <wcscat>
    				wcscat(new_path, fno.fname);			// new_path=  /PIONEER/USBANLZ/ + [directory] + /[subdir]
 80199e6:	492e      	ldr	r1, [pc, #184]	; (8019aa0 <scan_files+0x1b8>)
 80199e8:	4650      	mov	r0, sl
    				subfolders++;
 80199ea:	3701      	adds	r7, #1
    				wcscat(new_path, fno.fname);			// new_path=  /PIONEER/USBANLZ/ + [directory] + /[subdir]
 80199ec:	f005 fcf7 	bl	801f3de <wcscat>
    				f_closedir(&folder);
 80199f0:	a802      	add	r0, sp, #8
 80199f2:	f7f2 f913 	bl	800bc1c <f_closedir>
    				res = f_opendir(&folder, new_path);		//one more level deeper
 80199f6:	4651      	mov	r1, sl
 80199f8:	a802      	add	r0, sp, #8
 80199fa:	f7f2 f8bb 	bl	800bb74 <f_opendir>
 80199fe:	7028      	strb	r0, [r5, #0]
    				if(res == FR_OK) {
 8019a00:	2800      	cmp	r0, #0
 8019a02:	d1c6      	bne.n	8019992 <scan_files+0xaa>
    					res = f_readdir(&folder, &fno);		//there should be files!
 8019a04:	4621      	mov	r1, r4
 8019a06:	a802      	add	r0, sp, #8
 8019a08:	f7f2 f920 	bl	800bc4c <f_readdir>
    					if (!(fno.fattrib & AM_DIR)) {
 8019a0c:	7b23      	ldrb	r3, [r4, #12]
    					res = f_readdir(&folder, &fno);		//there should be files!
 8019a0e:	7028      	strb	r0, [r5, #0]
    					if (!(fno.fattrib & AM_DIR)) {
 8019a10:	f013 0310 	ands.w	r3, r3, #16
 8019a14:	d1bd      	bne.n	8019992 <scan_files+0xaa>
    						for(i=0; i<255; i++) TrackPaths[Total_tracks][i] = ff_convert(new_path[i], 0);		//populate database
 8019a16:	469b      	mov	fp, r3
 8019a18:	4b24      	ldr	r3, [pc, #144]	; (8019aac <scan_files+0x1c4>)
 8019a1a:	9601      	str	r6, [sp, #4]
 8019a1c:	461e      	mov	r6, r3
 8019a1e:	2100      	movs	r1, #0
 8019a20:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8019a24:	f7f2 f96a 	bl	800bcfc <ff_convert>
 8019a28:	f8b8 2000 	ldrh.w	r2, [r8]
 8019a2c:	4b20      	ldr	r3, [pc, #128]	; (8019ab0 <scan_files+0x1c8>)
 8019a2e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8019a32:	441a      	add	r2, r3
 8019a34:	f802 000b 	strb.w	r0, [r2, fp]
 8019a38:	f10b 0b01 	add.w	fp, fp, #1
 8019a3c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019a40:	d1ed      	bne.n	8019a1e <scan_files+0x136>
    						wcscat(new_path, L"/");
 8019a42:	4919      	ldr	r1, [pc, #100]	; (8019aa8 <scan_files+0x1c0>)
 8019a44:	4650      	mov	r0, sl
 8019a46:	9e01      	ldr	r6, [sp, #4]
 8019a48:	f005 fcc9 	bl	801f3de <wcscat>
    						wcscat(new_path, fno.fname);			//one of the files --- does not matter -- all starts with the main header then the mediafile
 8019a4c:	4914      	ldr	r1, [pc, #80]	; (8019aa0 <scan_files+0x1b8>)
 8019a4e:	4650      	mov	r0, sl
 8019a50:	f005 fcc5 	bl	801f3de <wcscat>
    						if (GetFileName(new_path)==0)		//filename OK -- otherwise tracknumber overwritten with usable one (hopefully)
 8019a54:	4650      	mov	r0, sl
 8019a56:	f001 fef3 	bl	801b840 <GetFileName>
 8019a5a:	2800      	cmp	r0, #0
 8019a5c:	d196      	bne.n	801998c <scan_files+0xa4>
    							for(i = 0; i < 255; i++) TrackTable[Total_tracks][i] = rekordbox.file[i];
 8019a5e:	465a      	mov	r2, fp
 8019a60:	f8b8 b000 	ldrh.w	fp, [r8]
 8019a64:	4813      	ldr	r0, [pc, #76]	; (8019ab4 <scan_files+0x1cc>)
 8019a66:	ebcb 230b 	rsb	r3, fp, fp, lsl #8
    							Total_tracks++;
 8019a6a:	f10b 0b01 	add.w	fp, fp, #1
    							for(i = 0; i < 255; i++) TrackTable[Total_tracks][i] = rekordbox.file[i];
 8019a6e:	4912      	ldr	r1, [pc, #72]	; (8019ab8 <scan_files+0x1d0>)
 8019a70:	4418      	add	r0, r3
 8019a72:	f005 fb47 	bl	801f104 <memcpy>
    							Total_tracks++;
 8019a76:	f8a8 b000 	strh.w	fp, [r8]
							f_closedir(&folder);
 8019a7a:	e787      	b.n	801998c <scan_files+0xa4>
    		f_closedir(&folder);
 8019a7c:	a802      	add	r0, sp, #8
 8019a7e:	f7f2 f8cd 	bl	800bc1c <f_closedir>
    return res;
 8019a82:	7828      	ldrb	r0, [r5, #0]
}
 8019a84:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 8019a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    				f_closedir(&folder);
 8019a8c:	a802      	add	r0, sp, #8
 8019a8e:	f7f2 f8c5 	bl	800bc1c <f_closedir>
    				break;  /* Break on error or end of dir */
 8019a92:	e73c      	b.n	801990e <scan_files+0x26>
 8019a94:	2000f784 	.word	0x2000f784
 8019a98:	2000e9a8 	.word	0x2000e9a8
 8019a9c:	08024d40 	.word	0x08024d40
 8019aa0:	2000e9ec 	.word	0x2000e9ec
 8019aa4:	2000f388 	.word	0x2000f388
 8019aa8:	08024d80 	.word	0x08024d80
 8019aac:	2000ef88 	.word	0x2000ef88
 8019ab0:	20001fdc 	.word	0x20001fdc
 8019ab4:	20008378 	.word	0x20008378
 8019ab8:	20015604 	.word	0x20015604
 8019abc:	08024cfc 	.word	0x08024cfc
 8019ac0:	20001fd8 	.word	0x20001fd8
 8019ac4:	2000ef8c 	.word	0x2000ef8c

08019ac8 <main>:
{
 8019ac8:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  HAL_MPU_Disable();
 8019acc:	f7e7 fb94 	bl	80011f8 <HAL_MPU_Disable>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8019ad0:	2004      	movs	r0, #4
 8019ad2:	f7e7 fb9f 	bl	8001214 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8019ad6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8019ada:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8019ade:	487f      	ldr	r0, [pc, #508]	; (8019cdc <main+0x214>)
 8019ae0:	2200      	movs	r2, #0
 8019ae2:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8019ae6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8019aea:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8019aee:	6943      	ldr	r3, [r0, #20]
 8019af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019af4:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8019af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8019afa:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8019afe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8019b02:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8019b06:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8019b0a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8019b0e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8019b12:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8019b16:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8019b18:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8019b1c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8019b1e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8019b22:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8019b24:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8019b28:	1c5a      	adds	r2, r3, #1
 8019b2a:	d1f8      	bne.n	8019b1e <main+0x56>
    } while(sets-- != 0U);
 8019b2c:	3c20      	subs	r4, #32
 8019b2e:	f114 0f20 	cmn.w	r4, #32
 8019b32:	d1f1      	bne.n	8019b18 <main+0x50>
 8019b34:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8019b38:	6943      	ldr	r3, [r0, #20]
 8019b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019b3e:	6143      	str	r3, [r0, #20]
 8019b40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8019b44:	f3bf 8f6f 	isb	sy
  menu_mode=3;
 8019b48:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8019d3c <main+0x274>
 8019b4c:	2503      	movs	r5, #3
  HAL_Init();
 8019b4e:	f7e7 fa71 	bl	8001034 <HAL_Init>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer++);
 8019b52:	4c63      	ldr	r4, [pc, #396]	; (8019ce0 <main+0x218>)
  SystemClock_Config();
 8019b54:	f7ff fe6c 	bl	8019830 <SystemClock_Config>
	  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 8019b58:	4f62      	ldr	r7, [pc, #392]	; (8019ce4 <main+0x21c>)
  MX_GPIO_Init();
 8019b5a:	f7ff fb05 	bl	8019168 <MX_GPIO_Init>
	  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 8019b5e:	4e62      	ldr	r6, [pc, #392]	; (8019ce8 <main+0x220>)
  MX_DMA_Init();
 8019b60:	f7ff f862 	bl	8018c28 <MX_DMA_Init>
  MX_LTDC_Init();
 8019b64:	f7ff fce2 	bl	801952c <MX_LTDC_Init>
  MX_FMC_Init();
 8019b68:	f7ff f92c 	bl	8018dc4 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8019b6c:	f002 f804 	bl	801bb78 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8019b70:	f7ff f8aa 	bl	8018cc8 <MX_FATFS_Init>
  MX_DMA2D_Init();
 8019b74:	f7ff f872 	bl	8018c5c <MX_DMA2D_Init>
  MX_SAI2_Init();
 8019b78:	f001 ff46 	bl	801ba08 <MX_SAI2_Init>
  MX_I2C3_Init();
 8019b7c:	f7ff fc54 	bl	8019428 <MX_I2C3_Init>
  MX_TIM4_Init();
 8019b80:	f003 fc34 	bl	801d3ec <MX_TIM4_Init>
  MX_TIM6_Init();
 8019b84:	f003 fca6 	bl	801d4d4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8019b88:	f003 fcce 	bl	801d528 <MX_TIM7_Init>
  MX_TIM8_Init();
 8019b8c:	f003 fcf8 	bl	801d580 <MX_TIM8_Init>
  MX_SPI2_Init();
 8019b90:	f002 f80a 	bl	801bba8 <MX_SPI2_Init>
  MX_TIM5_Init();
 8019b94:	f003 fc64 	bl	801d460 <MX_TIM5_Init>
  MX_TIM9_Init();
 8019b98:	f003 fd36 	bl	801d608 <MX_TIM9_Init>
  MX_USB_HOST_Init();
 8019b9c:	f003 fe46 	bl	801d82c <MX_USB_HOST_Init>
  SDRAM_Init(); // MT48LC4M32B2B5-6A SDRAM initialization
 8019ba0:	f7ff f8ac 	bl	8018cfc <SDRAM_Init>
  HAL_TIM_Base_Start_IT(&htim4); // start display refresh timer
 8019ba4:	4851      	ldr	r0, [pc, #324]	; (8019cec <main+0x224>)
  menu_mode=3;
 8019ba6:	f889 5000 	strb.w	r5, [r9]
  HAL_TIM_Base_Start_IT(&htim4); // start display refresh timer
 8019baa:	f7ec fc69 	bl	8006480 <HAL_TIM_Base_Start_IT>
  BSP_LCD_DisplayOn();
 8019bae:	f7ff fde9 	bl	8019784 <BSP_LCD_DisplayOn>
  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_0, 0); // set layer 0 framebuffer address
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8019bb8:	484d      	ldr	r0, [pc, #308]	; (8019cf0 <main+0x228>)
 8019bba:	f7e9 ffb9 	bl	8003b30 <HAL_LTDC_SetAddress>
  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_1, 1); // set layer 1 framebuffer address
 8019bbe:	2201      	movs	r2, #1
 8019bc0:	494c      	ldr	r1, [pc, #304]	; (8019cf4 <main+0x22c>)
 8019bc2:	484b      	ldr	r0, [pc, #300]	; (8019cf0 <main+0x228>)
 8019bc4:	f7e9 ffb4 	bl	8003b30 <HAL_LTDC_SetAddress>
  ClearLayer(); // clear framebuffer 0
 8019bc8:	f7f9 fd62 	bl	8013690 <ClearLayer>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer++);
 8019bcc:	7822      	ldrb	r2, [r4, #0]
 8019bce:	2100      	movs	r1, #0
 8019bd0:	4847      	ldr	r0, [pc, #284]	; (8019cf0 <main+0x228>)
 8019bd2:	1c53      	adds	r3, r2, #1
 8019bd4:	7023      	strb	r3, [r4, #0]
 8019bd6:	f7ea f895 	bl	8003d04 <HAL_LTDC_SetAlpha_NoReload>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 8019bda:	7822      	ldrb	r2, [r4, #0]
 8019bdc:	21ff      	movs	r1, #255	; 0xff
 8019bde:	4844      	ldr	r0, [pc, #272]	; (8019cf0 <main+0x228>)
 8019be0:	1e53      	subs	r3, r2, #1
 8019be2:	7023      	strb	r3, [r4, #0]
 8019be4:	f7ea f88e 	bl	8003d04 <HAL_LTDC_SetAlpha_NoReload>
  ChangeLayers();
 8019be8:	f7f9 fd7c 	bl	80136e4 <ChangeLayers>
  ClearLayer(); // clear framebuffer 1
 8019bec:	4c42      	ldr	r4, [pc, #264]	; (8019cf8 <main+0x230>)
 8019bee:	f7f9 fd4f 	bl	8013690 <ClearLayer>
  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 8019bf2:	493c      	ldr	r1, [pc, #240]	; (8019ce4 <main+0x21c>)
 8019bf4:	483c      	ldr	r0, [pc, #240]	; (8019ce8 <main+0x220>)
 8019bf6:	f003 fe5b 	bl	801d8b0 <MX_USB_HOST_Process>
  dbgAddText("host init");
 8019bfa:	4840      	ldr	r0, [pc, #256]	; (8019cfc <main+0x234>)
 8019bfc:	f7f9 fd32 	bl	8013664 <dbgAddText>
  while(((BSP_SD_IsDetected() != SD_PRESENT))&&(Appli_HS_state != APPLICATION_READY)){   //&&(Appli_FS_state != APPLICATION_START))   {
 8019c00:	e00a      	b.n	8019c18 <main+0x150>
 8019c02:	7823      	ldrb	r3, [r4, #0]
 8019c04:	2b02      	cmp	r3, #2
 8019c06:	d00b      	beq.n	8019c20 <main+0x158>
	  menu_mode = 3;
 8019c08:	f889 5000 	strb.w	r5, [r9]
	  BSP_LCD_DisplayOn();
 8019c0c:	f7ff fdba 	bl	8019784 <BSP_LCD_DisplayOn>
	  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 8019c10:	4639      	mov	r1, r7
 8019c12:	4630      	mov	r0, r6
 8019c14:	f003 fe4c 	bl	801d8b0 <MX_USB_HOST_Process>
  while(((BSP_SD_IsDetected() != SD_PRESENT))&&(Appli_HS_state != APPLICATION_READY)){   //&&(Appli_FS_state != APPLICATION_START))   {
 8019c18:	f7f9 fa90 	bl	801313c <BSP_SD_IsDetected>
 8019c1c:	2801      	cmp	r0, #1
 8019c1e:	d1f0      	bne.n	8019c02 <main+0x13a>
  dbgAddText("post usb");
 8019c20:	4837      	ldr	r0, [pc, #220]	; (8019d00 <main+0x238>)
 8019c22:	f7f9 fd1f 	bl	8013664 <dbgAddText>
  BSP_TS_Init(480, 272); // touchscreen initialization
 8019c26:	f44f 7188 	mov.w	r1, #272	; 0x110
 8019c2a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8019c2e:	f002 fa59 	bl	801c0e4 <BSP_TS_Init>
  BSP_TS_ITClear();
 8019c32:	f002 fbaf 	bl	801c394 <BSP_TS_ITClear>
  BSP_TS_ITConfig();
 8019c36:	f002 fa7f 	bl	801c138 <BSP_TS_ITConfig>
  if (BSP_SD_IsDetected() == SD_PRESENT){
 8019c3a:	f7f9 fa7f 	bl	801313c <BSP_SD_IsDetected>
 8019c3e:	2801      	cmp	r0, #1
 8019c40:	f000 810d 	beq.w	8019e5e <main+0x396>
  else if ((Appli_HS_state != APPLICATION_READY)) //&& (Appli_FS_state != APPLICATION_START))   //shouldn't be true if it got here, but just to be safe  --- USB already mounts
 8019c44:	7823      	ldrb	r3, [r4, #0]
 8019c46:	2b02      	cmp	r3, #2
 8019c48:	d00c      	beq.n	8019c64 <main+0x19c>
	  menu_mode = 3;
 8019c4a:	2303      	movs	r3, #3
 8019c4c:	f889 3000 	strb.w	r3, [r9]
	  BSP_LCD_DisplayOn();
 8019c50:	f7ff fd98 	bl	8019784 <BSP_LCD_DisplayOn>
	  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 8019c54:	4824      	ldr	r0, [pc, #144]	; (8019ce8 <main+0x220>)
 8019c56:	4923      	ldr	r1, [pc, #140]	; (8019ce4 <main+0x21c>)
 8019c58:	f003 fe2a 	bl	801d8b0 <MX_USB_HOST_Process>
	  dbgAddText("usb halt");
 8019c5c:	4829      	ldr	r0, [pc, #164]	; (8019d04 <main+0x23c>)
 8019c5e:	f7f9 fd01 	bl	8013664 <dbgAddText>
	  while(1);
 8019c62:	e7fe      	b.n	8019c62 <main+0x19a>
  	  f_mount(&USBHFatFs, (TCHAR const*)USBHPath, 0); // USB disk mount
 8019c64:	2200      	movs	r2, #0
 8019c66:	491f      	ldr	r1, [pc, #124]	; (8019ce4 <main+0x21c>)
 8019c68:	481f      	ldr	r0, [pc, #124]	; (8019ce8 <main+0x220>)
 8019c6a:	f7f1 fb5b 	bl	800b324 <f_mount>
  hMP3Decoder = MP3InitDecoder(); // mp3 decoder initialization
 8019c6e:	f7f2 f8a1 	bl	800bdb4 <MP3InitDecoder>
 8019c72:	4b25      	ldr	r3, [pc, #148]	; (8019d08 <main+0x240>)
 8019c74:	4602      	mov	r2, r0
  dbgAddText("pre scan");
 8019c76:	4825      	ldr	r0, [pc, #148]	; (8019d0c <main+0x244>)
	  fr = 0;
 8019c78:	2700      	movs	r7, #0
 8019c7a:	4c25      	ldr	r4, [pc, #148]	; (8019d10 <main+0x248>)
  hMP3Decoder = MP3InitDecoder(); // mp3 decoder initialization
 8019c7c:	601a      	str	r2, [r3, #0]
  dbgAddText("pre scan");
 8019c7e:	f7f9 fcf1 	bl	8013664 <dbgAddText>
  scan_files(); // get total track number
 8019c82:	f7ff fe31 	bl	80198e8 <scan_files>
  dbgAddText("post scan");
 8019c86:	4823      	ldr	r0, [pc, #140]	; (8019d14 <main+0x24c>)
 8019c88:	f7f9 fcec 	bl	8013664 <dbgAddText>
  HAL_TIM_Base_Start_IT(&htim5); // start jog speed counting timer
 8019c8c:	4822      	ldr	r0, [pc, #136]	; (8019d18 <main+0x250>)
 8019c8e:	f7ec fbf7 	bl	8006480 <HAL_TIM_Base_Start_IT>
  HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 8019c92:	2304      	movs	r3, #4
 8019c94:	4a21      	ldr	r2, [pc, #132]	; (8019d1c <main+0x254>)
 8019c96:	f5a4 5b80 	sub.w	fp, r4, #4096	; 0x1000
 8019c9a:	4921      	ldr	r1, [pc, #132]	; (8019d20 <main+0x258>)
 8019c9c:	4821      	ldr	r0, [pc, #132]	; (8019d24 <main+0x25c>)
 8019c9e:	f7ec f863 	bl	8005d68 <HAL_SPI_TransmitReceive_IT>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, volume, (uint32_t)(AUDIO_FREQUENCY_22K)*(1 + trak.percent));
 8019ca2:	4a21      	ldr	r2, [pc, #132]	; (8019d28 <main+0x260>)
 8019ca4:	eddf 7a21 	vldr	s15, [pc, #132]	; 8019d2c <main+0x264>
 8019ca8:	2002      	movs	r0, #2
 8019caa:	ed92 7a01 	vldr	s14, [r2, #4]
 8019cae:	4b20      	ldr	r3, [pc, #128]	; (8019d30 <main+0x268>)
 8019cb0:	ee47 7a27 	vmla.f32	s15, s14, s15
 8019cb4:	4e1f      	ldr	r6, [pc, #124]	; (8019d34 <main+0x26c>)
 8019cb6:	7819      	ldrb	r1, [r3, #0]
 8019cb8:	f8df a084 	ldr.w	sl, [pc, #132]	; 8019d40 <main+0x278>
 8019cbc:	4d1e      	ldr	r5, [pc, #120]	; (8019d38 <main+0x270>)
	  res = f_open(&MyFile, rekordbox.filename, FA_READ);
 8019cbe:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8019d44 <main+0x27c>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, volume, (uint32_t)(AUDIO_FREQUENCY_22K)*(1 + trak.percent));
 8019cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019cc6:	ee17 2a90 	vmov	r2, s15
 8019cca:	f001 ffeb 	bl	801bca4 <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetVolume(0);
 8019cce:	4638      	mov	r0, r7
 8019cd0:	f002 f8c2 	bl	801be58 <BSP_AUDIO_OUT_SetVolume>
  BSP_LCD_DisplayOn();
 8019cd4:	f7ff fd56 	bl	8019784 <BSP_LCD_DisplayOn>
 8019cd8:	e03b      	b.n	8019d52 <main+0x28a>
 8019cda:	bf00      	nop
 8019cdc:	e000ed00 	.word	0xe000ed00
 8019ce0:	20000b44 	.word	0x20000b44
 8019ce4:	200009f0 	.word	0x200009f0
 8019ce8:	2000e718 	.word	0x2000e718
 8019cec:	2001889c 	.word	0x2001889c
 8019cf0:	20000a9c 	.word	0x20000a9c
 8019cf4:	c0080000 	.word	0xc0080000
 8019cf8:	20018a1c 	.word	0x20018a1c
 8019cfc:	08024d88 	.word	0x08024d88
 8019d00:	08024d94 	.word	0x08024d94
 8019d04:	08024dac 	.word	0x08024dac
 8019d08:	2000edf4 	.word	0x2000edf4
 8019d0c:	08024db8 	.word	0x08024db8
 8019d10:	20018208 	.word	0x20018208
 8019d14:	08024dc4 	.word	0x08024dc4
 8019d18:	200188dc 	.word	0x200188dc
 8019d1c:	2000f78c 	.word	0x2000f78c
 8019d20:	20000058 	.word	0x20000058
 8019d24:	20018758 	.word	0x20018758
 8019d28:	2000f794 	.word	0x2000f794
 8019d2c:	46ac4400 	.word	0x46ac4400
 8019d30:	2000005c 	.word	0x2000005c
 8019d34:	2000e9a4 	.word	0x2000e9a4
 8019d38:	2000e714 	.word	0x2000e714
 8019d3c:	200009a4 	.word	0x200009a4
 8019d40:	20000988 	.word	0x20000988
 8019d44:	20001b58 	.word	0x20001b58
	  if(Track_number >= Total_tracks) Track_number = 0;
 8019d48:	602f      	str	r7, [r5, #0]
	  MX_USB_HOST_Process(&USBHFatFs, (TCHAR const*)USBHPath);
 8019d4a:	4949      	ldr	r1, [pc, #292]	; (8019e70 <main+0x3a8>)
 8019d4c:	4849      	ldr	r0, [pc, #292]	; (8019e74 <main+0x3ac>)
 8019d4e:	f003 fdaf 	bl	801d8b0 <MX_USB_HOST_Process>
	  find_file(Track_number);
 8019d52:	f7ff fd31 	bl	80197b8 <find_file.constprop.0.isra.0>
	  fr = 0;
 8019d56:	4b48      	ldr	r3, [pc, #288]	; (8019e78 <main+0x3b0>)
	  DecodeRekordboxFiles(new_path);
 8019d58:	4848      	ldr	r0, [pc, #288]	; (8019e7c <main+0x3b4>)
	  fr = 0;
 8019d5a:	801f      	strh	r7, [r3, #0]
	  sec = 0;
 8019d5c:	4b48      	ldr	r3, [pc, #288]	; (8019e80 <main+0x3b8>)
	  file_pos_wide = 0;
 8019d5e:	6037      	str	r7, [r6, #0]
	  sec = 0;
 8019d60:	701f      	strb	r7, [r3, #0]
	  min = 0;
 8019d62:	4b48      	ldr	r3, [pc, #288]	; (8019e84 <main+0x3bc>)
	  rekordbox.state = 0;
 8019d64:	f884 73d4 	strb.w	r7, [r4, #980]	; 0x3d4
	  min = 0;
 8019d68:	701f      	strb	r7, [r3, #0]
	  rfr = 0;
 8019d6a:	4b47      	ldr	r3, [pc, #284]	; (8019e88 <main+0x3c0>)
	  display.loop = 0;
 8019d6c:	f88a 7010 	strb.w	r7, [sl, #16]
	  rfr = 0;
 8019d70:	801f      	strh	r7, [r3, #0]
	  rsec = 0;
 8019d72:	4b46      	ldr	r3, [pc, #280]	; (8019e8c <main+0x3c4>)
	  rekordbox.currentcue = 0;
 8019d74:	f8c4 73d0 	str.w	r7, [r4, #976]	; 0x3d0
	  rsec = 0;
 8019d78:	701f      	strb	r7, [r3, #0]
	  rmin = 0;
 8019d7a:	4b45      	ldr	r3, [pc, #276]	; (8019e90 <main+0x3c8>)
 8019d7c:	701f      	strb	r7, [r3, #0]
	  position = 0;
 8019d7e:	4b45      	ldr	r3, [pc, #276]	; (8019e94 <main+0x3cc>)
 8019d80:	601f      	str	r7, [r3, #0]
	  if(display.cuemode == 1) rekordbox.autocue = 1;
 8019d82:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8019d86:	f1a3 0301 	sub.w	r3, r3, #1
 8019d8a:	fab3 f383 	clz	r3, r3
 8019d8e:	095b      	lsrs	r3, r3, #5
 8019d90:	f884 33cc 	strb.w	r3, [r4, #972]	; 0x3cc
	  DecodeRekordboxFiles(new_path);
 8019d94:	f000 fb8a 	bl	801a4ac <DecodeRekordboxFiles>
	  bar = 0;
 8019d98:	4b3f      	ldr	r3, [pc, #252]	; (8019e98 <main+0x3d0>)
	  res = f_open(&MyFile, rekordbox.filename, FA_READ);
 8019d9a:	2201      	movs	r2, #1
 8019d9c:	493f      	ldr	r1, [pc, #252]	; (8019e9c <main+0x3d4>)
 8019d9e:	4640      	mov	r0, r8
	  bar = 0;
 8019da0:	601f      	str	r7, [r3, #0]
	  beat = 0;
 8019da2:	4b3f      	ldr	r3, [pc, #252]	; (8019ea0 <main+0x3d8>)
	  menu_mode = 0;
 8019da4:	f889 7000 	strb.w	r7, [r9]
	  beat = 0;
 8019da8:	601f      	str	r7, [r3, #0]
	  res = f_open(&MyFile, rekordbox.filename, FA_READ);
 8019daa:	f7f1 faf5 	bl	800b398 <f_open>
 8019dae:	4b3d      	ldr	r3, [pc, #244]	; (8019ea4 <main+0x3dc>)
 8019db0:	7018      	strb	r0, [r3, #0]
	  if(res == FR_OK)
 8019db2:	2800      	cmp	r0, #0
 8019db4:	d132      	bne.n	8019e1c <main+0x354>
		  trak.state = PLAYING;
 8019db6:	4b3c      	ldr	r3, [pc, #240]	; (8019ea8 <main+0x3e0>)
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 8019db8:	f894 23cc 	ldrb.w	r2, [r4, #972]	; 0x3cc
		  trak.state = PLAYING;
 8019dbc:	701f      	strb	r7, [r3, #0]
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 8019dbe:	2a02      	cmp	r2, #2
		  spi_tx[2] &= ~(1 << 0);
 8019dc0:	4b3a      	ldr	r3, [pc, #232]	; (8019eac <main+0x3e4>)
 8019dc2:	789b      	ldrb	r3, [r3, #2]
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 8019dc4:	d048      	beq.n	8019e58 <main+0x390>
		  spi_tx[2] &= ~(1 << 0);
 8019dc6:	f023 0301 	bic.w	r3, r3, #1
		  else spi_tx[2] |= (1 << 1);
 8019dca:	f043 0302 	orr.w	r3, r3, #2
		  spi_tx[2] &= ~(1 << 3);
 8019dce:	f023 0308 	bic.w	r3, r3, #8
 8019dd2:	4a36      	ldr	r2, [pc, #216]	; (8019eac <main+0x3e4>)
		  if((strcmp(rekordbox.filetype, ".wav") == 0) || (strcmp(rekordbox.filetype, ".WAV") == 0)) {
 8019dd4:	4936      	ldr	r1, [pc, #216]	; (8019eb0 <main+0x3e8>)
 8019dd6:	4837      	ldr	r0, [pc, #220]	; (8019eb4 <main+0x3ec>)
		  spi_tx[2] &= ~(1 << 3);
 8019dd8:	7093      	strb	r3, [r2, #2]
		  if((strcmp(rekordbox.filetype, ".wav") == 0) || (strcmp(rekordbox.filetype, ".WAV") == 0)) {
 8019dda:	f7e6 fa19 	bl	8000210 <strcmp>
 8019dde:	b120      	cbz	r0, 8019dea <main+0x322>
 8019de0:	4935      	ldr	r1, [pc, #212]	; (8019eb8 <main+0x3f0>)
 8019de2:	4834      	ldr	r0, [pc, #208]	; (8019eb4 <main+0x3ec>)
 8019de4:	f7e6 fa14 	bl	8000210 <strcmp>
 8019de8:	b908      	cbnz	r0, 8019dee <main+0x326>
			  PlayWavFile();
 8019dea:	f004 fa35 	bl	801e258 <PlayWavFile>
		  if((strcmp(rekordbox.filetype, ".mp3") == 0) || (strcmp(rekordbox.filetype, ".MP3") == 0)) {
 8019dee:	4933      	ldr	r1, [pc, #204]	; (8019ebc <main+0x3f4>)
 8019df0:	4830      	ldr	r0, [pc, #192]	; (8019eb4 <main+0x3ec>)
 8019df2:	f7e6 fa0d 	bl	8000210 <strcmp>
 8019df6:	b120      	cbz	r0, 8019e02 <main+0x33a>
 8019df8:	4931      	ldr	r1, [pc, #196]	; (8019ec0 <main+0x3f8>)
 8019dfa:	482e      	ldr	r0, [pc, #184]	; (8019eb4 <main+0x3ec>)
 8019dfc:	f7e6 fa08 	bl	8000210 <strcmp>
 8019e00:	b908      	cbnz	r0, 8019e06 <main+0x33e>
			  PlayMp3File();
 8019e02:	f000 f9c9 	bl	801a198 <PlayMp3File>
		  spi_tx[2] |= (1 << 3);
 8019e06:	4a29      	ldr	r2, [pc, #164]	; (8019eac <main+0x3e4>)
		  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8019e08:	2002      	movs	r0, #2
		  spi_tx[2] |= (1 << 3);
 8019e0a:	7893      	ldrb	r3, [r2, #2]
 8019e0c:	f043 0308 	orr.w	r3, r3, #8
 8019e10:	7093      	strb	r3, [r2, #2]
		  trak.state = STOPPED;
 8019e12:	2301      	movs	r3, #1
 8019e14:	4a24      	ldr	r2, [pc, #144]	; (8019ea8 <main+0x3e0>)
 8019e16:	7013      	strb	r3, [r2, #0]
		  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8019e18:	f002 f802 	bl	801be20 <BSP_AUDIO_OUT_Stop>
	  if(file_pos_wide >= rekordbox.spectrum_size) {
 8019e1c:	f8db 2a8c 	ldr.w	r2, [fp, #2700]	; 0xa8c
 8019e20:	6833      	ldr	r3, [r6, #0]
 8019e22:	429a      	cmp	r2, r3
 8019e24:	d802      	bhi.n	8019e2c <main+0x364>
		  Track_number++;
 8019e26:	682b      	ldr	r3, [r5, #0]
 8019e28:	3301      	adds	r3, #1
 8019e2a:	602b      	str	r3, [r5, #0]
	  menu_mode = 4;
 8019e2c:	2304      	movs	r3, #4
	  f_close(&MyFile);
 8019e2e:	4640      	mov	r0, r8
	  file_pos_wide = 0;
 8019e30:	6037      	str	r7, [r6, #0]
	  menu_mode = 4;
 8019e32:	f889 3000 	strb.w	r3, [r9]
	  f_close(&MyFile);
 8019e36:	f7f1 fc25 	bl	800b684 <f_close>
	  f_closedir(&dir);
 8019e3a:	4822      	ldr	r0, [pc, #136]	; (8019ec4 <main+0x3fc>)
 8019e3c:	f7f1 feee 	bl	800bc1c <f_closedir>
	  if(Track_number >= Total_tracks) Track_number = 0;
 8019e40:	4b21      	ldr	r3, [pc, #132]	; (8019ec8 <main+0x400>)
 8019e42:	682a      	ldr	r2, [r5, #0]
 8019e44:	881b      	ldrh	r3, [r3, #0]
 8019e46:	4293      	cmp	r3, r2
 8019e48:	f77f af7e 	ble.w	8019d48 <main+0x280>
	  if(Track_number < 0) Track_number = Total_tracks - 1;
 8019e4c:	2a00      	cmp	r2, #0
 8019e4e:	f6bf af7c 	bge.w	8019d4a <main+0x282>
 8019e52:	3b01      	subs	r3, #1
 8019e54:	602b      	str	r3, [r5, #0]
 8019e56:	e778      	b.n	8019d4a <main+0x282>
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 8019e58:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8019e5c:	e7b7      	b.n	8019dce <main+0x306>
	  dbgAddText("sd present");
 8019e5e:	481b      	ldr	r0, [pc, #108]	; (8019ecc <main+0x404>)
 8019e60:	f7f9 fc00 	bl	8013664 <dbgAddText>
  	  f_mount(&SDFatFs, (TCHAR const*)SDPath, 0); // SD card disk mount
 8019e64:	2200      	movs	r2, #0
 8019e66:	491a      	ldr	r1, [pc, #104]	; (8019ed0 <main+0x408>)
 8019e68:	481a      	ldr	r0, [pc, #104]	; (8019ed4 <main+0x40c>)
 8019e6a:	f7f1 fa5b 	bl	800b324 <f_mount>
 8019e6e:	e6fe      	b.n	8019c6e <main+0x1a6>
 8019e70:	200009f0 	.word	0x200009f0
 8019e74:	2000e718 	.word	0x2000e718
 8019e78:	2000edf0 	.word	0x2000edf0
 8019e7c:	2000ef8c 	.word	0x2000ef8c
 8019e80:	2000f78a 	.word	0x2000f78a
 8019e84:	2000ef88 	.word	0x2000ef88
 8019e88:	2000f786 	.word	0x2000f786
 8019e8c:	2000f789 	.word	0x2000f789
 8019e90:	2000f788 	.word	0x2000f788
 8019e94:	200009a8 	.word	0x200009a8
 8019e98:	20000978 	.word	0x20000978
 8019e9c:	20015208 	.word	0x20015208
 8019ea0:	2000097c 	.word	0x2000097c
 8019ea4:	2000f784 	.word	0x2000f784
 8019ea8:	2000f794 	.word	0x2000f794
 8019eac:	20000058 	.word	0x20000058
 8019eb0:	08024dd0 	.word	0x08024dd0
 8019eb4:	20015703 	.word	0x20015703
 8019eb8:	08024dd8 	.word	0x08024dd8
 8019ebc:	08024de0 	.word	0x08024de0
 8019ec0:	08024de8 	.word	0x08024de8
 8019ec4:	2000e950 	.word	0x2000e950
 8019ec8:	20001fd8 	.word	0x20001fd8
 8019ecc:	08024da0 	.word	0x08024da0
 8019ed0:	200009ec 	.word	0x200009ec
 8019ed4:	20001da8 	.word	0x20001da8

08019ed8 <Error_Handler>:
  while(1)
 8019ed8:	e7fe      	b.n	8019ed8 <Error_Handler>
 8019eda:	bf00      	nop

08019edc <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8019edc:	4770      	bx	lr
 8019ede:	bf00      	nop

08019ee0 <Mp3ReadId3V2Text>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Text(FIL* pInFile, uint32_t unDataLen, char* pszBuffer, uint32_t unBufferSize)
{
 8019ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ee2:	461c      	mov	r4, r3
 8019ee4:	b083      	sub	sp, #12
	UINT unRead = 0;
 8019ee6:	2300      	movs	r3, #0
{
 8019ee8:	460d      	mov	r5, r1
 8019eea:	4617      	mov	r7, r2
	BYTE byEncoding = 0;
	if((f_read(pInFile, &byEncoding, 1, &unRead) == FR_OK) && (unRead == 1))
 8019eec:	f10d 0103 	add.w	r1, sp, #3
	UINT unRead = 0;
 8019ef0:	9301      	str	r3, [sp, #4]
	if((f_read(pInFile, &byEncoding, 1, &unRead) == FR_OK) && (unRead == 1))
 8019ef2:	2201      	movs	r2, #1
	BYTE byEncoding = 0;
 8019ef4:	f88d 3003 	strb.w	r3, [sp, #3]
	if((f_read(pInFile, &byEncoding, 1, &unRead) == FR_OK) && (unRead == 1))
 8019ef8:	ab01      	add	r3, sp, #4
{
 8019efa:	4606      	mov	r6, r0
	if((f_read(pInFile, &byEncoding, 1, &unRead) == FR_OK) && (unRead == 1))
 8019efc:	f7f1 faae 	bl	800b45c <f_read>
 8019f00:	b910      	cbnz	r0, 8019f08 <Mp3ReadId3V2Text+0x28>
 8019f02:	9b01      	ldr	r3, [sp, #4]
 8019f04:	2b01      	cmp	r3, #1
 8019f06:	d002      	beq.n	8019f0e <Mp3ReadId3V2Text+0x2e>
			}
		}
	}
	else
	{
		return 1;
 8019f08:	2001      	movs	r0, #1
	}
	return 0;
}
 8019f0a:	b003      	add	sp, #12
 8019f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unDataLen--;
 8019f0e:	3d01      	subs	r5, #1
		if(unDataLen <= (unBufferSize - 1))
 8019f10:	1e63      	subs	r3, r4, #1
 8019f12:	42ab      	cmp	r3, r5
 8019f14:	d30f      	bcc.n	8019f36 <Mp3ReadId3V2Text+0x56>
			if((f_read(pInFile, pszBuffer, unDataLen, &unRead) == FR_OK) ||
 8019f16:	ab01      	add	r3, sp, #4
 8019f18:	462a      	mov	r2, r5
 8019f1a:	4630      	mov	r0, r6
 8019f1c:	4639      	mov	r1, r7
 8019f1e:	f7f1 fa9d 	bl	800b45c <f_read>
 8019f22:	b110      	cbz	r0, 8019f2a <Mp3ReadId3V2Text+0x4a>
 8019f24:	9b01      	ldr	r3, [sp, #4]
 8019f26:	42ab      	cmp	r3, r5
 8019f28:	d1ee      	bne.n	8019f08 <Mp3ReadId3V2Text+0x28>
				if(byEncoding == 0)
 8019f2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019f2e:	b97b      	cbnz	r3, 8019f50 <Mp3ReadId3V2Text+0x70>
	return 0;
 8019f30:	4618      	mov	r0, r3
					pszBuffer[unDataLen] = 0;
 8019f32:	557b      	strb	r3, [r7, r5]
 8019f34:	e7e9      	b.n	8019f0a <Mp3ReadId3V2Text+0x2a>
			if(f_lseek(pInFile, f_tell(pInFile) + unDataLen) != FR_OK)
 8019f36:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
 8019f3a:	4630      	mov	r0, r6
 8019f3c:	18aa      	adds	r2, r5, r2
 8019f3e:	f143 0300 	adc.w	r3, r3, #0
 8019f42:	f7f1 fbb7 	bl	800b6b4 <f_lseek>
 8019f46:	3800      	subs	r0, #0
 8019f48:	bf18      	it	ne
 8019f4a:	2001      	movne	r0, #1
}
 8019f4c:	b003      	add	sp, #12
 8019f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				else if(byEncoding == 1)
 8019f50:	2b01      	cmp	r3, #1
 8019f52:	d001      	beq.n	8019f58 <Mp3ReadId3V2Text+0x78>
	return 0;
 8019f54:	2000      	movs	r0, #0
 8019f56:	e7d8      	b.n	8019f0a <Mp3ReadId3V2Text+0x2a>
					if((unDataLen > 2) && (pszBuffer[0] == 0xFF) && (pszBuffer[1] == 0xFE))
 8019f58:	2d02      	cmp	r5, #2
 8019f5a:	d902      	bls.n	8019f62 <Mp3ReadId3V2Text+0x82>
 8019f5c:	783b      	ldrb	r3, [r7, #0]
 8019f5e:	2bff      	cmp	r3, #255	; 0xff
 8019f60:	d011      	beq.n	8019f86 <Mp3ReadId3V2Text+0xa6>
					for(; r < unDataLen; r += 2, w += 1)
 8019f62:	b165      	cbz	r5, 8019f7e <Mp3ReadId3V2Text+0x9e>
 8019f64:	2200      	movs	r2, #0
 8019f66:	1e79      	subs	r1, r7, #1
						pszBuffer[w] = pszBuffer[r];
 8019f68:	5cb8      	ldrb	r0, [r7, r2]
 8019f6a:	460b      	mov	r3, r1
					for(; r < unDataLen; r += 2, w += 1)
 8019f6c:	3202      	adds	r2, #2
 8019f6e:	3302      	adds	r3, #2
						pszBuffer[w] = pszBuffer[r];
 8019f70:	f801 0f01 	strb.w	r0, [r1, #1]!
					for(; r < unDataLen; r += 2, w += 1)
 8019f74:	4295      	cmp	r5, r2
 8019f76:	eba3 0307 	sub.w	r3, r3, r7
 8019f7a:	d8f5      	bhi.n	8019f68 <Mp3ReadId3V2Text+0x88>
					pszBuffer[w] = 0;
 8019f7c:	441f      	add	r7, r3
 8019f7e:	2300      	movs	r3, #0
	return 0;
 8019f80:	4618      	mov	r0, r3
					pszBuffer[w] = 0;
 8019f82:	703b      	strb	r3, [r7, #0]
 8019f84:	e7c1      	b.n	8019f0a <Mp3ReadId3V2Text+0x2a>
					if((unDataLen > 2) && (pszBuffer[0] == 0xFF) && (pszBuffer[1] == 0xFE))
 8019f86:	787b      	ldrb	r3, [r7, #1]
 8019f88:	2bfe      	cmp	r3, #254	; 0xfe
 8019f8a:	d1ea      	bne.n	8019f62 <Mp3ReadId3V2Text+0x82>
						r = 2;
 8019f8c:	2202      	movs	r2, #2
 8019f8e:	e7ea      	b.n	8019f66 <Mp3ReadId3V2Text+0x86>

08019f90 <Mp3ReadId3V2Tag>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Tag(FIL* pInFile, char* pszArtist, uint32_t unArtistSize, char* pszTitle, uint32_t unTitleSize)
{
 8019f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f94:	461d      	mov	r5, r3
 8019f96:	b08d      	sub	sp, #52	; 0x34
	pszArtist[0] = 0;
 8019f98:	2300      	movs	r3, #0
{
 8019f9a:	460c      	mov	r4, r1
 8019f9c:	4617      	mov	r7, r2
	pszTitle[0] = 0;

	BYTE id3hd[10];
	UINT unRead = 0;
	// read ID3 tag header (10 bytes)
	if((f_read(pInFile, id3hd, 10, &unRead) != FR_OK) || (unRead != 10))
 8019f9e:	220a      	movs	r2, #10
	pszArtist[0] = 0;
 8019fa0:	700b      	strb	r3, [r1, #0]
	if((f_read(pInFile, id3hd, 10, &unRead) != FR_OK) || (unRead != 10))
 8019fa2:	a906      	add	r1, sp, #24
	pszTitle[0] = 0;
 8019fa4:	702b      	strb	r3, [r5, #0]
{
 8019fa6:	4606      	mov	r6, r0
	UINT unRead = 0;
 8019fa8:	9303      	str	r3, [sp, #12]
	if((f_read(pInFile, id3hd, 10, &unRead) != FR_OK) || (unRead != 10))
 8019faa:	ab03      	add	r3, sp, #12
 8019fac:	f7f1 fa56 	bl	800b45c <f_read>
 8019fb0:	b910      	cbnz	r0, 8019fb8 <Mp3ReadId3V2Tag+0x28>
 8019fb2:	9b03      	ldr	r3, [sp, #12]
 8019fb4:	2b0a      	cmp	r3, #10
 8019fb6:	d003      	beq.n	8019fc0 <Mp3ReadId3V2Tag+0x30>
	{
		return 1;
 8019fb8:	2001      	movs	r0, #1
			return 1;
		}
	}

	return 0;
}
 8019fba:	b00d      	add	sp, #52	; 0x34
 8019fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((unRead == 10) &&
 8019fc0:	f89d 2018 	ldrb.w	r2, [sp, #24]
		id3tagsize = 0;
 8019fc4:	4b70      	ldr	r3, [pc, #448]	; (801a188 <Mp3ReadId3V2Tag+0x1f8>)
		if((unRead == 10) &&
 8019fc6:	2a49      	cmp	r2, #73	; 0x49
		id3tagsize = 0;
 8019fc8:	6018      	str	r0, [r3, #0]
		if((unRead == 10) &&
 8019fca:	d107      	bne.n	8019fdc <Mp3ReadId3V2Tag+0x4c>
				(id3hd[0] == 'I') &&
 8019fcc:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8019fd0:	2a44      	cmp	r2, #68	; 0x44
 8019fd2:	d103      	bne.n	8019fdc <Mp3ReadId3V2Tag+0x4c>
				(id3hd[1] == 'D') &&
 8019fd4:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8019fd8:	2a33      	cmp	r2, #51	; 0x33
 8019fda:	d00a      	beq.n	8019ff2 <Mp3ReadId3V2Tag+0x62>
 8019fdc:	4602      	mov	r2, r0
 8019fde:	4603      	mov	r3, r0
		if(f_lseek(pInFile, unSkip) != FR_OK)
 8019fe0:	4630      	mov	r0, r6
 8019fe2:	f7f1 fb67 	bl	800b6b4 <f_lseek>
 8019fe6:	3800      	subs	r0, #0
 8019fe8:	bf18      	it	ne
 8019fea:	2001      	movne	r0, #1
}
 8019fec:	b00d      	add	sp, #52	; 0x34
 8019fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			unSkip = ((id3hd[6] & 0x7f) << 21) | ((id3hd[7] & 0x7f) << 14) | ((id3hd[8] & 0x7f) << 7) | (id3hd[9] & 0x7f);
 8019ff2:	f89d 201e 	ldrb.w	r2, [sp, #30]
				f_read(pInFile, exhd, 4, &unRead);
 8019ff6:	f10d 0924 	add.w	r9, sp, #36	; 0x24
			unSkip = ((id3hd[6] & 0x7f) << 21) | ((id3hd[7] & 0x7f) << 14) | ((id3hd[8] & 0x7f) << 7) | (id3hd[9] & 0x7f);
 8019ffa:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8019ffe:	0552      	lsls	r2, r2, #21
 801a000:	0389      	lsls	r1, r1, #14
 801a002:	f002 627e 	and.w	r2, r2, #266338304	; 0xfe00000
 801a006:	f401 11fe 	and.w	r1, r1, #2080768	; 0x1fc000
 801a00a:	430a      	orrs	r2, r1
 801a00c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 801a010:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801a014:	430a      	orrs	r2, r1
 801a016:	f89d 1020 	ldrb.w	r1, [sp, #32]
 801a01a:	01c9      	lsls	r1, r1, #7
 801a01c:	f401 517e 	and.w	r1, r1, #16256	; 0x3f80
 801a020:	430a      	orrs	r2, r1
			id3tagsize = unSkip;
 801a022:	601a      	str	r2, [r3, #0]
			if(id3hd[5] & 0x40)
 801a024:	f89d 301d 	ldrb.w	r3, [sp, #29]
			unSkip = ((id3hd[6] & 0x7f) << 21) | ((id3hd[7] & 0x7f) << 14) | ((id3hd[8] & 0x7f) << 7) | (id3hd[9] & 0x7f);
 801a028:	9201      	str	r2, [sp, #4]
			if(id3hd[5] & 0x40)
 801a02a:	065b      	lsls	r3, r3, #25
			uint8_t unVersion = id3hd[3];
 801a02c:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801a030:	9200      	str	r2, [sp, #0]
			if(id3hd[5] & 0x40)
 801a032:	d47f      	bmi.n	801a134 <Mp3ReadId3V2Tag+0x1a4>
{
 801a034:	f04f 0a02 	mov.w	sl, #2
				if(strcmp(szFrameId, "TPE1") == 0)
 801a038:	f8df b158 	ldr.w	fp, [pc, #344]	; 801a194 <Mp3ReadId3V2Tag+0x204>
				if((f_read(pInFile, frhd, 10, &unRead) != FR_OK) || (unRead != 10))
 801a03c:	ab03      	add	r3, sp, #12
 801a03e:	220a      	movs	r2, #10
 801a040:	4649      	mov	r1, r9
 801a042:	4630      	mov	r0, r6
 801a044:	f7f1 fa0a 	bl	800b45c <f_read>
 801a048:	2800      	cmp	r0, #0
 801a04a:	d1b5      	bne.n	8019fb8 <Mp3ReadId3V2Tag+0x28>
 801a04c:	9b03      	ldr	r3, [sp, #12]
 801a04e:	2b0a      	cmp	r3, #10
 801a050:	d1b2      	bne.n	8019fb8 <Mp3ReadId3V2Tag+0x28>
				if((frhd[0] == 0) || (strncmp(frhd, "3DI", 3) == 0))
 801a052:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801a056:	2b00      	cmp	r3, #0
 801a058:	d03d      	beq.n	801a0d6 <Mp3ReadId3V2Tag+0x146>
 801a05a:	f8b9 2000 	ldrh.w	r2, [r9]
 801a05e:	f244 4333 	movw	r3, #17459	; 0x4433
 801a062:	429a      	cmp	r2, r3
 801a064:	d03a      	beq.n	801a0dc <Mp3ReadId3V2Tag+0x14c>
				char szFrameId[5] = {0, 0, 0, 0, 0};
 801a066:	4b49      	ldr	r3, [pc, #292]	; (801a18c <Mp3ReadId3V2Tag+0x1fc>)
 801a068:	e893 0003 	ldmia.w	r3, {r0, r1}
				memcpy(szFrameId, frhd, 4);
 801a06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
				char szFrameId[5] = {0, 0, 0, 0, 0};
 801a06e:	f88d 1014 	strb.w	r1, [sp, #20]
				memcpy(szFrameId, frhd, 4);
 801a072:	9304      	str	r3, [sp, #16]
					if(unVersion == 3)
 801a074:	9b00      	ldr	r3, [sp, #0]
 801a076:	2b03      	cmp	r3, #3
 801a078:	d035      	beq.n	801a0e6 <Mp3ReadId3V2Tag+0x156>
					if(unVersion == 4)
 801a07a:	2b04      	cmp	r3, #4
 801a07c:	d157      	bne.n	801a12e <Mp3ReadId3V2Tag+0x19e>
						unFrameSize += frhd[i + 4] & 0x7F;
 801a07e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801a082:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 801a086:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 801a08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a08e:	eb03 13c8 	add.w	r3, r3, r8, lsl #7
 801a092:	f89d 802a 	ldrb.w	r8, [sp, #42]	; 0x2a
 801a096:	f008 087f 	and.w	r8, r8, #127	; 0x7f
 801a09a:	eb08 13c3 	add.w	r3, r8, r3, lsl #7
 801a09e:	f89d 802b 	ldrb.w	r8, [sp, #43]	; 0x2b
 801a0a2:	f008 087f 	and.w	r8, r8, #127	; 0x7f
 801a0a6:	eb08 18c3 	add.w	r8, r8, r3, lsl #7
				if(strcmp(szFrameId, "TPE1") == 0)
 801a0aa:	4659      	mov	r1, fp
 801a0ac:	a804      	add	r0, sp, #16
 801a0ae:	f7e6 f8af 	bl	8000210 <strcmp>
 801a0b2:	b398      	cbz	r0, 801a11c <Mp3ReadId3V2Tag+0x18c>
				else if(strcmp(szFrameId, "TIT2") == 0)
 801a0b4:	a804      	add	r0, sp, #16
 801a0b6:	4936      	ldr	r1, [pc, #216]	; (801a190 <Mp3ReadId3V2Tag+0x200>)
 801a0b8:	f7e6 f8aa 	bl	8000210 <strcmp>
 801a0bc:	bb10      	cbnz	r0, 801a104 <Mp3ReadId3V2Tag+0x174>
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszTitle, unTitleSize) != 0)
 801a0be:	4641      	mov	r1, r8
 801a0c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a0c2:	462a      	mov	r2, r5
 801a0c4:	4630      	mov	r0, r6
 801a0c6:	f7ff ff0b 	bl	8019ee0 <Mp3ReadId3V2Text>
 801a0ca:	b920      	cbnz	r0, 801a0d6 <Mp3ReadId3V2Tag+0x146>
					nFramesToRead--;
 801a0cc:	f10a 3aff 	add.w	sl, sl, #4294967295
			while(nFramesToRead > 0)
 801a0d0:	f1ba 0f00 	cmp.w	sl, #0
 801a0d4:	d1b2      	bne.n	801a03c <Mp3ReadId3V2Tag+0xac>
		if(f_lseek(pInFile, unSkip) != FR_OK)
 801a0d6:	9a01      	ldr	r2, [sp, #4]
 801a0d8:	2300      	movs	r3, #0
 801a0da:	e781      	b.n	8019fe0 <Mp3ReadId3V2Tag+0x50>
				if((frhd[0] == 0) || (strncmp(frhd, "3DI", 3) == 0))
 801a0dc:	f899 3002 	ldrb.w	r3, [r9, #2]
 801a0e0:	2b49      	cmp	r3, #73	; 0x49
 801a0e2:	d1c0      	bne.n	801a066 <Mp3ReadId3V2Tag+0xd6>
 801a0e4:	e7f7      	b.n	801a0d6 <Mp3ReadId3V2Tag+0x146>
						unFrameSize += frhd[i + 4];
 801a0e6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 801a0ea:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 801a0ee:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 801a0f2:	f89d 802a 	ldrb.w	r8, [sp, #42]	; 0x2a
 801a0f6:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 801a0fa:	f89d 802b 	ldrb.w	r8, [sp, #43]	; 0x2b
 801a0fe:	eb08 2803 	add.w	r8, r8, r3, lsl #8
					if(unVersion == 4)
 801a102:	e7d2      	b.n	801a0aa <Mp3ReadId3V2Tag+0x11a>
					if(f_lseek(pInFile, f_tell(pInFile) + unFrameSize) != FR_OK)
 801a104:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 801a106:	4630      	mov	r0, r6
 801a108:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801a10a:	eb18 0202 	adds.w	r2, r8, r2
 801a10e:	f143 0300 	adc.w	r3, r3, #0
 801a112:	f7f1 facf 	bl	800b6b4 <f_lseek>
 801a116:	2800      	cmp	r0, #0
 801a118:	d090      	beq.n	801a03c <Mp3ReadId3V2Tag+0xac>
 801a11a:	e74d      	b.n	8019fb8 <Mp3ReadId3V2Tag+0x28>
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszArtist, unArtistSize) != 0)
 801a11c:	4641      	mov	r1, r8
 801a11e:	463b      	mov	r3, r7
 801a120:	4622      	mov	r2, r4
 801a122:	4630      	mov	r0, r6
 801a124:	f7ff fedc 	bl	8019ee0 <Mp3ReadId3V2Text>
 801a128:	2800      	cmp	r0, #0
 801a12a:	d0cf      	beq.n	801a0cc <Mp3ReadId3V2Tag+0x13c>
 801a12c:	e7d3      	b.n	801a0d6 <Mp3ReadId3V2Tag+0x146>
				uint32_t unFrameSize = 0;
 801a12e:	f04f 0800 	mov.w	r8, #0
 801a132:	e7ba      	b.n	801a0aa <Mp3ReadId3V2Tag+0x11a>
				f_read(pInFile, exhd, 4, &unRead);
 801a134:	ab03      	add	r3, sp, #12
 801a136:	2204      	movs	r2, #4
 801a138:	4630      	mov	r0, r6
 801a13a:	4649      	mov	r1, r9
 801a13c:	f7f1 f98e 	bl	800b45c <f_read>
				size_t unExHdrSkip = ((exhd[0] & 0x7f) << 21) | ((exhd[1] & 0x7f) << 14) | ((exhd[2] & 0x7f) << 7) | (exhd[3] & 0x7f);
 801a140:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801a144:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
				if(f_lseek(pInFile, f_tell(pInFile) + unExHdrSkip) != FR_OK)
 801a148:	4630      	mov	r0, r6
				size_t unExHdrSkip = ((exhd[0] & 0x7f) << 21) | ((exhd[1] & 0x7f) << 14) | ((exhd[2] & 0x7f) << 7) | (exhd[3] & 0x7f);
 801a14a:	055b      	lsls	r3, r3, #21
 801a14c:	0392      	lsls	r2, r2, #14
 801a14e:	f003 637e 	and.w	r3, r3, #266338304	; 0xfe00000
 801a152:	f402 12fe 	and.w	r2, r2, #2080768	; 0x1fc000
 801a156:	4313      	orrs	r3, r2
 801a158:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801a15c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801a160:	4313      	orrs	r3, r2
 801a162:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 801a166:	01d2      	lsls	r2, r2, #7
 801a168:	f402 527e 	and.w	r2, r2, #16256	; 0x3f80
 801a16c:	4313      	orrs	r3, r2
				if(f_lseek(pInFile, f_tell(pInFile) + unExHdrSkip) != FR_OK)
 801a16e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
				unExHdrSkip -= 4;
 801a170:	3b04      	subs	r3, #4
				if(f_lseek(pInFile, f_tell(pInFile) + unExHdrSkip) != FR_OK)
 801a172:	189a      	adds	r2, r3, r2
 801a174:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801a176:	f143 0300 	adc.w	r3, r3, #0
 801a17a:	f7f1 fa9b 	bl	800b6b4 <f_lseek>
 801a17e:	2800      	cmp	r0, #0
 801a180:	f43f af58 	beq.w	801a034 <Mp3ReadId3V2Tag+0xa4>
 801a184:	e718      	b.n	8019fb8 <Mp3ReadId3V2Tag+0x28>
 801a186:	bf00      	nop
 801a188:	200151d8 	.word	0x200151d8
 801a18c:	0801fa9c 	.word	0x0801fa9c
 801a190:	08024dfc 	.word	0x08024dfc
 801a194:	08024df4 	.word	0x08024df4

0801a198 <PlayMp3File>:
		}
	}
	return res;
}

void PlayMp3File() {
 801a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BufferCtl.filetype = 1;
	char szArtist[120];
	char szTitle[120];
	id3tagsize = 0;
	Mp3ReadId3V2Tag(&MyFile, szArtist, sizeof(szArtist), szTitle, sizeof(szTitle));
 801a19c:	2278      	movs	r2, #120	; 0x78
	id3tagsize = 0;
 801a19e:	2500      	movs	r5, #0
	BufferCtl.filetype = 1;
 801a1a0:	4c87      	ldr	r4, [pc, #540]	; (801a3c0 <PlayMp3File+0x228>)
 801a1a2:	2101      	movs	r1, #1
	id3tagsize = 0;
 801a1a4:	4b87      	ldr	r3, [pc, #540]	; (801a3c4 <PlayMp3File+0x22c>)
	Mp3ReadId3V2Tag(&MyFile, szArtist, sizeof(szArtist), szTitle, sizeof(szTitle));
 801a1a6:	4888      	ldr	r0, [pc, #544]	; (801a3c8 <PlayMp3File+0x230>)
	bOutOfData = 0;
 801a1a8:	f8df 926c 	ldr.w	r9, [pc, #620]	; 801a418 <PlayMp3File+0x280>
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
	//memset(g_pMp3DmaBuffer, 0, MP3_DMA_BUFFER_SIZE);
	g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 801a1ac:	f8df b26c 	ldr.w	fp, [pc, #620]	; 801a41c <PlayMp3File+0x284>
	unInDataLeft = 0;
 801a1b0:	4e86      	ldr	r6, [pc, #536]	; (801a3cc <PlayMp3File+0x234>)
 801a1b2:	f8df a238 	ldr.w	sl, [pc, #568]	; 801a3ec <PlayMp3File+0x254>
void PlayMp3File() {
 801a1b6:	ed2d 8b02 	vpush	{d8}
 801a1ba:	b0c1      	sub	sp, #260	; 0x104
 801a1bc:	ed9f 8a84 	vldr	s16, [pc, #528]	; 801a3d0 <PlayMp3File+0x238>
	Mp3ReadId3V2Tag(&MyFile, szArtist, sizeof(szArtist), szTitle, sizeof(szTitle));
 801a1c0:	9200      	str	r2, [sp, #0]
	BufferCtl.filetype = 1;
 801a1c2:	7221      	strb	r1, [r4, #8]
	Mp3ReadId3V2Tag(&MyFile, szArtist, sizeof(szArtist), szTitle, sizeof(szTitle));
 801a1c4:	a904      	add	r1, sp, #16
	id3tagsize = 0;
 801a1c6:	601d      	str	r5, [r3, #0]
	Mp3ReadId3V2Tag(&MyFile, szArtist, sizeof(szArtist), szTitle, sizeof(szTitle));
 801a1c8:	ab22      	add	r3, sp, #136	; 0x88
 801a1ca:	f7ff fee1 	bl	8019f90 <Mp3ReadId3V2Tag>
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 801a1ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a1d2:	4629      	mov	r1, r5
 801a1d4:	f5a4 5080 	sub.w	r0, r4, #4096	; 0x1000
	bOutOfData = 0;
 801a1d8:	f8c9 5000 	str.w	r5, [r9]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 801a1dc:	f004 ffba 	bl	801f154 <memset>
	g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 801a1e0:	4b7c      	ldr	r3, [pc, #496]	; (801a3d4 <PlayMp3File+0x23c>)
	do {
		// fill the whole buffer for the first time
		if(unInDataLeft < (2 * MAINBUF_SIZE)) {
			UINT unRead = Mp3FillReadBuffer(pInData, unInDataLeft, &MyFile);
			unInDataLeft += unRead;
			pInData = BufferCtl.buff;
 801a1e2:	f5a4 5280 	sub.w	r2, r4, #4096	; 0x1000
	unDmaBufMode = 0;
 801a1e6:	4c7c      	ldr	r4, [pc, #496]	; (801a3d8 <PlayMp3File+0x240>)
 801a1e8:	4629      	mov	r1, r5
	g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 801a1ea:	f8cb 3000 	str.w	r3, [fp]
	unDmaBufferSpace = 0;
 801a1ee:	4b7b      	ldr	r3, [pc, #492]	; (801a3dc <PlayMp3File+0x244>)
			pInData = BufferCtl.buff;
 801a1f0:	9203      	str	r2, [sp, #12]
	unDmaBufferSpace = 0;
 801a1f2:	601d      	str	r5, [r3, #0]
	unFramesDecoded = 0;
 801a1f4:	4b7a      	ldr	r3, [pc, #488]	; (801a3e0 <PlayMp3File+0x248>)
	nDecodeRes = ERR_MP3_INDATA_UNDERFLOW;
 801a1f6:	4a7b      	ldr	r2, [pc, #492]	; (801a3e4 <PlayMp3File+0x24c>)
	unFramesDecoded = 0;
 801a1f8:	601d      	str	r5, [r3, #0]
	nDecodeRes = ERR_MP3_INDATA_UNDERFLOW;
 801a1fa:	f04f 33ff 	mov.w	r3, #4294967295
	unInDataLeft = 0;
 801a1fe:	6035      	str	r5, [r6, #0]
	nDecodeRes = ERR_MP3_INDATA_UNDERFLOW;
 801a200:	6013      	str	r3, [r2, #0]
	unDmaBufMode = 0;
 801a202:	6025      	str	r5, [r4, #0]
 801a204:	e006      	b.n	801a214 <PlayMp3File+0x7c>
		}
		// find start of next MP3 frame - assume EOF if no sync found
		int nOffset = MP3FindSyncWord(pInData, unInDataLeft);
		if(nOffset < 0) {
			unInDataLeft = 0;
 801a206:	2300      	movs	r3, #0
 801a208:	6033      	str	r3, [r6, #0]
				break;
			}
			}
		}
	}
	while(!bOutOfData);
 801a20a:	f8d9 3000 	ldr.w	r3, [r9]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d131      	bne.n	801a276 <PlayMp3File+0xde>
		if(unInDataLeft < (2 * MAINBUF_SIZE)) {
 801a212:	6831      	ldr	r1, [r6, #0]
 801a214:	f640 7327 	movw	r3, #3879	; 0xf27
 801a218:	4299      	cmp	r1, r3
 801a21a:	dd37      	ble.n	801a28c <PlayMp3File+0xf4>
		int nOffset = MP3FindSyncWord(pInData, unInDataLeft);
 801a21c:	f8da 0000 	ldr.w	r0, [sl]
 801a220:	f7f1 fdca 	bl	800bdb8 <MP3FindSyncWord>
		if(nOffset < 0) {
 801a224:	1e05      	subs	r5, r0, #0
 801a226:	dbee      	blt.n	801a206 <PlayMp3File+0x6e>
			pInData += nOffset;
 801a228:	f8da 3000 	ldr.w	r3, [sl]
			nDecodeRes = MP3Decode(hMP3Decoder, &pInData, (int*)&unInDataLeft, (short*)g_pMp3OutBuffer, 0);
 801a22c:	4f6e      	ldr	r7, [pc, #440]	; (801a3e8 <PlayMp3File+0x250>)
			pInData += nOffset;
 801a22e:	442b      	add	r3, r5
			nDecodeRes = MP3Decode(hMP3Decoder, &pInData, (int*)&unInDataLeft, (short*)g_pMp3OutBuffer, 0);
 801a230:	4a66      	ldr	r2, [pc, #408]	; (801a3cc <PlayMp3File+0x234>)
 801a232:	496e      	ldr	r1, [pc, #440]	; (801a3ec <PlayMp3File+0x254>)
			pInData += nOffset;
 801a234:	f8ca 3000 	str.w	r3, [sl]
			unInDataLeft -= nOffset;
 801a238:	6833      	ldr	r3, [r6, #0]
 801a23a:	1b5b      	subs	r3, r3, r5
 801a23c:	6033      	str	r3, [r6, #0]
			nDecodeRes = MP3Decode(hMP3Decoder, &pInData, (int*)&unInDataLeft, (short*)g_pMp3OutBuffer, 0);
 801a23e:	2300      	movs	r3, #0
 801a240:	9300      	str	r3, [sp, #0]
 801a242:	6838      	ldr	r0, [r7, #0]
 801a244:	4b6a      	ldr	r3, [pc, #424]	; (801a3f0 <PlayMp3File+0x258>)
 801a246:	f7f1 fdff 	bl	800be48 <MP3Decode>
 801a24a:	4b66      	ldr	r3, [pc, #408]	; (801a3e4 <PlayMp3File+0x24c>)
 801a24c:	6018      	str	r0, [r3, #0]
			switch(nDecodeRes) {
 801a24e:	1c43      	adds	r3, r0, #1
 801a250:	f000 8099 	beq.w	801a386 <PlayMp3File+0x1ee>
 801a254:	b338      	cbz	r0, 801a2a6 <PlayMp3File+0x10e>
 801a256:	3002      	adds	r0, #2
 801a258:	d0d7      	beq.n	801a20a <PlayMp3File+0x72>
				if(unInDataLeft > 0) {
 801a25a:	6833      	ldr	r3, [r6, #0]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	ddd4      	ble.n	801a20a <PlayMp3File+0x72>
					unInDataLeft-=MP3_BYTES_SKIP;
 801a260:	3b01      	subs	r3, #1
 801a262:	6033      	str	r3, [r6, #0]
					pInData+=MP3_BYTES_SKIP;
 801a264:	f8da 3000 	ldr.w	r3, [sl]
 801a268:	3301      	adds	r3, #1
 801a26a:	f8ca 3000 	str.w	r3, [sl]
	while(!bOutOfData);
 801a26e:	f8d9 3000 	ldr.w	r3, [r9]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d0cd      	beq.n	801a212 <PlayMp3File+0x7a>
	BSP_AUDIO_OUT_SetVolume(0);
 801a276:	2000      	movs	r0, #0
 801a278:	f001 fdee 	bl	801be58 <BSP_AUDIO_OUT_SetVolume>
	while(unDmaBufMode < 3);
 801a27c:	6823      	ldr	r3, [r4, #0]
 801a27e:	2b02      	cmp	r3, #2
 801a280:	d9fc      	bls.n	801a27c <PlayMp3File+0xe4>
}
 801a282:	b041      	add	sp, #260	; 0x104
 801a284:	ecbd 8b02 	vpop	{d8}
 801a288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			UINT unRead = Mp3FillReadBuffer(pInData, unInDataLeft, &MyFile);
 801a28c:	4a4e      	ldr	r2, [pc, #312]	; (801a3c8 <PlayMp3File+0x230>)
 801a28e:	f8da 0000 	ldr.w	r0, [sl]
 801a292:	f001 fefd 	bl	801c090 <Mp3FillReadBuffer>
			unInDataLeft += unRead;
 801a296:	6831      	ldr	r1, [r6, #0]
			pInData = BufferCtl.buff;
 801a298:	9b03      	ldr	r3, [sp, #12]
			unInDataLeft += unRead;
 801a29a:	4401      	add	r1, r0
			pInData = BufferCtl.buff;
 801a29c:	f8ca 3000 	str.w	r3, [sl]
 801a2a0:	4618      	mov	r0, r3
			unInDataLeft += unRead;
 801a2a2:	6031      	str	r1, [r6, #0]
			pInData = BufferCtl.buff;
 801a2a4:	e7bc      	b.n	801a220 <PlayMp3File+0x88>
				MP3GetLastFrameInfo(hMP3Decoder, &mp3FrameInfo);
 801a2a6:	4953      	ldr	r1, [pc, #332]	; (801a3f4 <PlayMp3File+0x25c>)
 801a2a8:	6838      	ldr	r0, [r7, #0]
 801a2aa:	f7f1 fd9f 	bl	800bdec <MP3GetLastFrameInfo>
				g_pMp3OutBufferPtr = g_pMp3OutBuffer;
 801a2ae:	4a50      	ldr	r2, [pc, #320]	; (801a3f0 <PlayMp3File+0x258>)
				unFramesDecoded++;
 801a2b0:	494b      	ldr	r1, [pc, #300]	; (801a3e0 <PlayMp3File+0x248>)
				g_pMp3OutBufferPtr = g_pMp3OutBuffer;
 801a2b2:	4b51      	ldr	r3, [pc, #324]	; (801a3f8 <PlayMp3File+0x260>)
 801a2b4:	601a      	str	r2, [r3, #0]
				unFramesDecoded++;
 801a2b6:	680a      	ldr	r2, [r1, #0]
 801a2b8:	3201      	adds	r2, #1
 801a2ba:	600a      	str	r2, [r1, #0]
				uint32_t unOutBufferAvail = mp3FrameInfo.outputSamps;
 801a2bc:	4a4d      	ldr	r2, [pc, #308]	; (801a3f4 <PlayMp3File+0x25c>)
 801a2be:	f8d2 8010 	ldr.w	r8, [r2, #16]
				while(unOutBufferAvail > 0) {
 801a2c2:	f1b8 0f00 	cmp.w	r8, #0
 801a2c6:	d0a0      	beq.n	801a20a <PlayMp3File+0x72>
					if(unDmaBufMode == 0) {
 801a2c8:	6822      	ldr	r2, [r4, #0]
 801a2ca:	b112      	cbz	r2, 801a2d2 <PlayMp3File+0x13a>
					else if(unDmaBufMode == 1) {
 801a2cc:	6822      	ldr	r2, [r4, #0]
 801a2ce:	2a01      	cmp	r2, #1
 801a2d0:	d053      	beq.n	801a37a <PlayMp3File+0x1e2>
						unDmaBufferSpace = g_pMp3DmaBuffer + MP3_DMA_BUFFER_SIZE - g_pMp3DmaBufferPtr;
 801a2d2:	f8db 0000 	ldr.w	r0, [fp]
 801a2d6:	4a49      	ldr	r2, [pc, #292]	; (801a3fc <PlayMp3File+0x264>)
 801a2d8:	1a15      	subs	r5, r2, r0
 801a2da:	106d      	asrs	r5, r5, #1
					uint32_t unCopy = unDmaBufferSpace > unOutBufferAvail ? unOutBufferAvail : unDmaBufferSpace;
 801a2dc:	4545      	cmp	r5, r8
 801a2de:	462f      	mov	r7, r5
 801a2e0:	bf28      	it	cs
 801a2e2:	4647      	movcs	r7, r8
					if(unCopy > 0) {
 801a2e4:	2f00      	cmp	r7, #0
 801a2e6:	d133      	bne.n	801a350 <PlayMp3File+0x1b8>
					if(unDmaBufferSpace == 0) {
 801a2e8:	2d00      	cmp	r5, #0
 801a2ea:	d1ed      	bne.n	801a2c8 <PlayMp3File+0x130>
						if(unDmaBufMode == 0) {
 801a2ec:	6822      	ldr	r2, [r4, #0]
 801a2ee:	bb5a      	cbnz	r2, 801a348 <PlayMp3File+0x1b0>
							if(mp3FrameInfo.samprate > 0) trak.bitrate = mp3FrameInfo.samprate;
 801a2f0:	4a40      	ldr	r2, [pc, #256]	; (801a3f4 <PlayMp3File+0x25c>)
 801a2f2:	6892      	ldr	r2, [r2, #8]
 801a2f4:	2a00      	cmp	r2, #0
 801a2f6:	dd4d      	ble.n	801a394 <PlayMp3File+0x1fc>
									*(1 + trak.percent), NULL);
 801a2f8:	f3c2 014e 	ubfx	r1, r2, #1, #15
 801a2fc:	b292      	uxth	r2, r2
 801a2fe:	ee07 1a10 	vmov	s14, r1
 801a302:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a306:	4d3e      	ldr	r5, [pc, #248]	; (801a400 <PlayMp3File+0x268>)
 801a308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 801a30c:	483d      	ldr	r0, [pc, #244]	; (801a404 <PlayMp3File+0x26c>)
									*(1 + trak.percent), NULL);
 801a30e:	edd5 7a01 	vldr	s15, [r5, #4]
 801a312:	812a      	strh	r2, [r5, #8]
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 801a314:	2200      	movs	r2, #0
									*(1 + trak.percent), NULL);
 801a316:	ee77 7aa6 	vadd.f32	s15, s15, s13
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801a31a:	4f3b      	ldr	r7, [pc, #236]	; (801a408 <PlayMp3File+0x270>)
									*(1 + trak.percent), NULL);
 801a31c:	ee67 7a87 	vmul.f32	s15, s15, s14
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 801a320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a324:	ee17 1a90 	vmov	r1, s15
 801a328:	f001 fe3a 	bl	801bfa0 <BSP_AUDIO_OUT_ClockConfig>
							BSP_AUDIO_OUT_Play(g_pMp3DmaBuffer, MP3_DMA_BUFFER_SIZE * sizeof(uint16_t));
 801a32c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 801a330:	4828      	ldr	r0, [pc, #160]	; (801a3d4 <PlayMp3File+0x23c>)
 801a332:	f001 fd43 	bl	801bdbc <BSP_AUDIO_OUT_Play>
							BSP_AUDIO_OUT_SetVolume(volume);
 801a336:	4a35      	ldr	r2, [pc, #212]	; (801a40c <PlayMp3File+0x274>)
 801a338:	7810      	ldrb	r0, [r2, #0]
 801a33a:	f001 fd8d 	bl	801be58 <BSP_AUDIO_OUT_SetVolume>
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801a33e:	f897 23cc 	ldrb.w	r2, [r7, #972]	; 0x3cc
 801a342:	4b2d      	ldr	r3, [pc, #180]	; (801a3f8 <PlayMp3File+0x260>)
 801a344:	2a02      	cmp	r2, #2
 801a346:	d02a      	beq.n	801a39e <PlayMp3File+0x206>
						while(unDmaBufMode == 0);
 801a348:	6822      	ldr	r2, [r4, #0]
 801a34a:	2a00      	cmp	r2, #0
 801a34c:	d0fc      	beq.n	801a348 <PlayMp3File+0x1b0>
 801a34e:	e7b8      	b.n	801a2c2 <PlayMp3File+0x12a>
						memcpy(g_pMp3DmaBufferPtr, g_pMp3OutBufferPtr, unCopy * sizeof(uint16_t));
 801a350:	007a      	lsls	r2, r7, #1
 801a352:	6819      	ldr	r1, [r3, #0]
						unOutBufferAvail -= unCopy;
 801a354:	eba8 0707 	sub.w	r7, r8, r7
						memcpy(g_pMp3DmaBufferPtr, g_pMp3OutBufferPtr, unCopy * sizeof(uint16_t));
 801a358:	9202      	str	r2, [sp, #8]
 801a35a:	f004 fed3 	bl	801f104 <memcpy>
						g_pMp3OutBufferPtr += unCopy;
 801a35e:	4b26      	ldr	r3, [pc, #152]	; (801a3f8 <PlayMp3File+0x260>)
					if(unDmaBufferSpace == 0) {
 801a360:	4545      	cmp	r5, r8
						g_pMp3OutBufferPtr += unCopy;
 801a362:	9a02      	ldr	r2, [sp, #8]
						unOutBufferAvail -= unCopy;
 801a364:	46b8      	mov	r8, r7
						g_pMp3OutBufferPtr += unCopy;
 801a366:	6819      	ldr	r1, [r3, #0]
 801a368:	4411      	add	r1, r2
 801a36a:	6019      	str	r1, [r3, #0]
						g_pMp3DmaBufferPtr += unCopy;
 801a36c:	f8db 1000 	ldr.w	r1, [fp]
 801a370:	440a      	add	r2, r1
 801a372:	f8cb 2000 	str.w	r2, [fp]
					if(unDmaBufferSpace == 0) {
 801a376:	d8a4      	bhi.n	801a2c2 <PlayMp3File+0x12a>
 801a378:	e7b8      	b.n	801a2ec <PlayMp3File+0x154>
						unDmaBufferSpace = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2) - g_pMp3DmaBufferPtr;
 801a37a:	f8db 0000 	ldr.w	r0, [fp]
 801a37e:	4a24      	ldr	r2, [pc, #144]	; (801a410 <PlayMp3File+0x278>)
 801a380:	1a15      	subs	r5, r2, r0
 801a382:	106d      	asrs	r5, r5, #1
 801a384:	e7aa      	b.n	801a2dc <PlayMp3File+0x144>
				if(nOffset == 0)
 801a386:	2d00      	cmp	r5, #0
 801a388:	f47f af3d 	bne.w	801a206 <PlayMp3File+0x6e>
					bOutOfData = 1;
 801a38c:	2301      	movs	r3, #1
 801a38e:	f8c9 3000 	str.w	r3, [r9]
 801a392:	e73a      	b.n	801a20a <PlayMp3File+0x72>
 801a394:	eeb0 7a48 	vmov.f32	s14, s16
 801a398:	f64a 4244 	movw	r2, #44100	; 0xac44
 801a39c:	e7b3      	b.n	801a306 <PlayMp3File+0x16e>
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801a39e:	782a      	ldrb	r2, [r5, #0]
 801a3a0:	2a00      	cmp	r2, #0
 801a3a2:	d1d1      	bne.n	801a348 <PlayMp3File+0x1b0>
								BSP_AUDIO_OUT_Pause();
 801a3a4:	f001 fd2c 	bl	801be00 <BSP_AUDIO_OUT_Pause>
								trak.state = STOPPED;
 801a3a8:	2201      	movs	r2, #1
								HAL_TIM_Base_Start_IT(&htim8);
 801a3aa:	481a      	ldr	r0, [pc, #104]	; (801a414 <PlayMp3File+0x27c>)
								trak.state = STOPPED;
 801a3ac:	702a      	strb	r2, [r5, #0]
								HAL_TIM_Base_Start_IT(&htim8);
 801a3ae:	f7ec f867 	bl	8006480 <HAL_TIM_Base_Start_IT>
								GoToPosition(rekordbox.cue_start_position[0]);
 801a3b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801a3b4:	f003 fde8 	bl	801df88 <GoToPosition>
								TrackTime();
 801a3b8:	f003 fd8e 	bl	801ded8 <TrackTime>
 801a3bc:	4b0e      	ldr	r3, [pc, #56]	; (801a3f8 <PlayMp3File+0x260>)
 801a3be:	e7c3      	b.n	801a348 <PlayMp3File+0x1b0>
 801a3c0:	20001b48 	.word	0x20001b48
 801a3c4:	200151d8 	.word	0x200151d8
 801a3c8:	20001b58 	.word	0x20001b58
 801a3cc:	20015204 	.word	0x20015204
 801a3d0:	46ac4400 	.word	0x46ac4400
 801a3d4:	2000f7d0 	.word	0x2000f7d0
 801a3d8:	2000f7cc 	.word	0x2000f7cc
 801a3dc:	200151fc 	.word	0x200151fc
 801a3e0:	20015200 	.word	0x20015200
 801a3e4:	200151f8 	.word	0x200151f8
 801a3e8:	2000edf4 	.word	0x2000edf4
 801a3ec:	20000060 	.word	0x20000060
 801a3f0:	20013fd4 	.word	0x20013fd4
 801a3f4:	200151dc 	.word	0x200151dc
 801a3f8:	200151d4 	.word	0x200151d4
 801a3fc:	20013fd0 	.word	0x20013fd0
 801a400:	2000f794 	.word	0x2000f794
 801a404:	2001864c 	.word	0x2001864c
 801a408:	20018208 	.word	0x20018208
 801a40c:	2000005c 	.word	0x2000005c
 801a410:	20011bd0 	.word	0x20011bd0
 801a414:	2001899c 	.word	0x2001899c
 801a418:	2000e948 	.word	0x2000e948
 801a41c:	20013fd0 	.word	0x20013fd0

0801a420 <FindToken>:
static uint8_t FindToken (const char *token);
static int32_t GetLongNumber ();
static int32_t GetBigEndianLongNumber ();

// finds section token in the file. 0 - token is found, 1 - end of file
static uint8_t FindToken (const char *token) {
 801a420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a424:	4d1d      	ldr	r5, [pc, #116]	; (801a49c <FindToken+0x7c>)
 801a426:	2300      	movs	r3, #0
 801a428:	4c1d      	ldr	r4, [pc, #116]	; (801a4a0 <FindToken+0x80>)
static uint8_t FindToken (const char *token) {
 801a42a:	4680      	mov	r8, r0
	while(f_tell(&MyFile) < f_size(&MyFile)) {
		while(f_tell(&MyFile) < f_size(&MyFile)) {
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 801a42c:	4e1d      	ldr	r6, [pc, #116]	; (801a4a4 <FindToken+0x84>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a42e:	602b      	str	r3, [r5, #0]
 801a430:	712b      	strb	r3, [r5, #4]
	while(f_tell(&MyFile) < f_size(&MyFile)) {
 801a432:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801a434:	6921      	ldr	r1, [r4, #16]
 801a436:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a438:	6963      	ldr	r3, [r4, #20]
 801a43a:	4288      	cmp	r0, r1
 801a43c:	eb72 0303 	sbcs.w	r3, r2, r3
 801a440:	d227      	bcs.n	801a492 <FindToken+0x72>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 801a442:	4633      	mov	r3, r6
 801a444:	2201      	movs	r2, #1
 801a446:	4629      	mov	r1, r5
 801a448:	4620      	mov	r0, r4
 801a44a:	f7f1 f807 	bl	800b45c <f_read>
 801a44e:	2800      	cmp	r0, #0
 801a450:	d1f7      	bne.n	801a442 <FindToken+0x22>
			if(tag[0] == 'P') break;
 801a452:	782b      	ldrb	r3, [r5, #0]
 801a454:	2b50      	cmp	r3, #80	; 0x50
 801a456:	d007      	beq.n	801a468 <FindToken+0x48>
		while(f_tell(&MyFile) < f_size(&MyFile)) {
 801a458:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801a45a:	6921      	ldr	r1, [r4, #16]
 801a45c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a45e:	6963      	ldr	r3, [r4, #20]
 801a460:	4288      	cmp	r0, r1
 801a462:	eb72 0303 	sbcs.w	r3, r2, r3
 801a466:	d3ec      	bcc.n	801a442 <FindToken+0x22>
		}
		while(f_read(&MyFile, &tag[1], 3, (void *)&bytesread) != FR_OK);
 801a468:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801a4a8 <FindToken+0x88>
 801a46c:	4633      	mov	r3, r6
 801a46e:	2203      	movs	r2, #3
 801a470:	4649      	mov	r1, r9
 801a472:	4620      	mov	r0, r4
 801a474:	f7f0 fff2 	bl	800b45c <f_read>
 801a478:	4607      	mov	r7, r0
 801a47a:	2800      	cmp	r0, #0
 801a47c:	d1f6      	bne.n	801a46c <FindToken+0x4c>
		tag[4] = '\0';
		if(strcmp(tag, token) == 0) return 0;
 801a47e:	4641      	mov	r1, r8
 801a480:	4628      	mov	r0, r5
		tag[4] = '\0';
 801a482:	712f      	strb	r7, [r5, #4]
		if(strcmp(tag, token) == 0) return 0;
 801a484:	f7e5 fec4 	bl	8000210 <strcmp>
 801a488:	2800      	cmp	r0, #0
 801a48a:	d1d2      	bne.n	801a432 <FindToken+0x12>
	}
	return 1;
}
 801a48c:	4638      	mov	r0, r7
 801a48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return 1;
 801a492:	2701      	movs	r7, #1
}
 801a494:	4638      	mov	r0, r7
 801a496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a49a:	bf00      	nop
 801a49c:	200185e0 	.word	0x200185e0
 801a4a0:	20001b58 	.word	0x20001b58
 801a4a4:	2000e94c 	.word	0x2000e94c
 801a4a8:	200185e1 	.word	0x200185e1

0801a4ac <DecodeRekordboxFiles>:
	}
	out_data >>= 8;
	return out_data;
}

uint8_t DecodeRekordboxFiles(TCHAR *path) {
 801a4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(i = 0; i < RBX_MAX_TQZ; i++) {
		rekordbox.bpm[i] = 0;
		rekordbox.phase[i] = 0;
		rekordbox.timeindex[i] = 0;
	}
	rekordbox.cues = 0;
 801a4b0:	4ca9      	ldr	r4, [pc, #676]	; (801a758 <DecodeRekordboxFiles+0x2ac>)
uint8_t DecodeRekordboxFiles(TCHAR *path) {
 801a4b2:	4603      	mov	r3, r0
		rekordbox.bpm[i] = 0;
 801a4b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801a4b8:	2100      	movs	r1, #0
 801a4ba:	f204 5004 	addw	r0, r4, #1284	; 0x504
	rekordbox.cues = 0;
 801a4be:	2500      	movs	r5, #0
uint8_t DecodeRekordboxFiles(TCHAR *path) {
 801a4c0:	ed2d 8b02 	vpush	{d8}
 801a4c4:	f2ad 5d0c 	subw	sp, sp, #1292	; 0x50c
 801a4c8:	ee08 3a90 	vmov	s17, r3
		rekordbox.bpm[i] = 0;
 801a4cc:	f004 fe42 	bl	801f154 <memset>
	rekordbox.cues = 0;
 801a4d0:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 801a4d4:	4ba1      	ldr	r3, [pc, #644]	; (801a75c <DecodeRekordboxFiles+0x2b0>)
 801a4d6:	f8c2 5b94 	str.w	r5, [r2, #2964]	; 0xb94
	// Clear SDRAM or fill with some pattern/color
	for(i = 0; i < MAX_WAVESIZE; i++) *(__IO uint8_t*)(WAVE_BUFFER+i) = 0;
 801a4da:	4aa1      	ldr	r2, [pc, #644]	; (801a760 <DecodeRekordboxFiles+0x2b4>)
 801a4dc:	f803 5b01 	strb.w	r5, [r3], #1
 801a4e0:	4293      	cmp	r3, r2
 801a4e2:	d1fb      	bne.n	801a4dc <DecodeRekordboxFiles+0x30>
	for(i = 0; i < RBX_MAX_PATH; i++) rekordbox.filename[i] = 0;
 801a4e4:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 801a4e8:	2100      	movs	r1, #0
 801a4ea:	489b      	ldr	r0, [pc, #620]	; (801a758 <DecodeRekordboxFiles+0x2ac>)
 801a4ec:	f004 fe32 	bl	801f154 <memset>
	char filename[RBX_MAX_PATH] = {0};
 801a4f0:	22fb      	movs	r2, #251	; 0xfb
 801a4f2:	2100      	movs	r1, #0
 801a4f4:	a804      	add	r0, sp, #16
 801a4f6:	9503      	str	r5, [sp, #12]
 801a4f8:	f004 fe2c 	bl	801f154 <memset>
	TCHAR my_path[RBX_MAX_PATH] = {0};
 801a4fc:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 801a500:	2100      	movs	r1, #0
 801a502:	a843      	add	r0, sp, #268	; 0x10c
 801a504:	f004 fe26 	bl	801f154 <memset>
	wcscpy(my_path, path);
 801a508:	ee18 1a90 	vmov	r1, s17
 801a50c:	a843      	add	r0, sp, #268	; 0x10c
 801a50e:	f004 ff76 	bl	801f3fe <wcscpy>
	wcscat(my_path, L"/ANLZ0000.DAT");
 801a512:	4994      	ldr	r1, [pc, #592]	; (801a764 <DecodeRekordboxFiles+0x2b8>)
 801a514:	a843      	add	r0, sp, #268	; 0x10c
 801a516:	f004 ff62 	bl	801f3de <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 801a51a:	2201      	movs	r2, #1
 801a51c:	a943      	add	r1, sp, #268	; 0x10c
 801a51e:	4892      	ldr	r0, [pc, #584]	; (801a768 <DecodeRekordboxFiles+0x2bc>)
 801a520:	f7f0 ff3a 	bl	800b398 <f_open>
	if(res == FR_OK)
 801a524:	2800      	cmp	r0, #0
 801a526:	f000 824d 	beq.w	801a9c4 <DecodeRekordboxFiles+0x518>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
		}
		f_close(&MyFile);
	}
	for(i = 0; i < RBX_MAX_PATH; i++) my_path[i] = 0;
 801a52a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 801a52e:	2100      	movs	r1, #0
 801a530:	a843      	add	r0, sp, #268	; 0x10c
 801a532:	f004 fe0f 	bl	801f154 <memset>
	wcscpy(my_path, path);
 801a536:	ee18 1a90 	vmov	r1, s17
 801a53a:	a843      	add	r0, sp, #268	; 0x10c
 801a53c:	f004 ff5f 	bl	801f3fe <wcscpy>
	wcscat(my_path, L"/ANLZ0000.EXT");
 801a540:	498a      	ldr	r1, [pc, #552]	; (801a76c <DecodeRekordboxFiles+0x2c0>)
 801a542:	a843      	add	r0, sp, #268	; 0x10c
 801a544:	f004 ff4b 	bl	801f3de <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 801a548:	2201      	movs	r2, #1
 801a54a:	a943      	add	r1, sp, #268	; 0x10c
 801a54c:	4886      	ldr	r0, [pc, #536]	; (801a768 <DecodeRekordboxFiles+0x2bc>)
 801a54e:	f7f0 ff23 	bl	800b398 <f_open>
	if(res == FR_OK) {
 801a552:	2800      	cmp	r0, #0
 801a554:	d075      	beq.n	801a642 <DecodeRekordboxFiles+0x196>
				}
			}
		}
		f_close(&MyFile);
	}
	for(i = 0; i < RBX_MAX_PATH; i++) my_path[i] = 0;
 801a556:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 801a55a:	2100      	movs	r1, #0
 801a55c:	a843      	add	r0, sp, #268	; 0x10c
 801a55e:	f004 fdf9 	bl	801f154 <memset>
	wcscpy(my_path, path);
 801a562:	ee18 1a90 	vmov	r1, s17
 801a566:	a843      	add	r0, sp, #268	; 0x10c
 801a568:	f004 ff49 	bl	801f3fe <wcscpy>
	wcscat(my_path, L"/ANLZ0001.DAT");
 801a56c:	4980      	ldr	r1, [pc, #512]	; (801a770 <DecodeRekordboxFiles+0x2c4>)
 801a56e:	a843      	add	r0, sp, #268	; 0x10c
 801a570:	f004 ff35 	bl	801f3de <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 801a574:	2201      	movs	r2, #1
 801a576:	a943      	add	r1, sp, #268	; 0x10c
 801a578:	487b      	ldr	r0, [pc, #492]	; (801a768 <DecodeRekordboxFiles+0x2bc>)
 801a57a:	f7f0 ff0d 	bl	800b398 <f_open>
	if(res == FR_OK)
 801a57e:	2800      	cmp	r0, #0
 801a580:	f000 85b5 	beq.w	801b0ee <DecodeRekordboxFiles+0xc42>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
		}
		f_close(&MyFile);
	}
	for(i = 0; i < RBX_MAX_PATH; i++) my_path[i] = 0;
 801a584:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 801a588:	2100      	movs	r1, #0
 801a58a:	a843      	add	r0, sp, #268	; 0x10c
 801a58c:	f004 fde2 	bl	801f154 <memset>
	wcscpy(my_path, path);
 801a590:	ee18 1a90 	vmov	r1, s17
 801a594:	a843      	add	r0, sp, #268	; 0x10c
 801a596:	f004 ff32 	bl	801f3fe <wcscpy>
	wcscat(my_path, L"/ANLZ0001.EXT");
 801a59a:	4976      	ldr	r1, [pc, #472]	; (801a774 <DecodeRekordboxFiles+0x2c8>)
 801a59c:	a843      	add	r0, sp, #268	; 0x10c
 801a59e:	f004 ff1e 	bl	801f3de <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 801a5a2:	2201      	movs	r2, #1
 801a5a4:	a943      	add	r1, sp, #268	; 0x10c
 801a5a6:	4870      	ldr	r0, [pc, #448]	; (801a768 <DecodeRekordboxFiles+0x2bc>)
 801a5a8:	f7f0 fef6 	bl	800b398 <f_open>
	if(res == FR_OK) {
 801a5ac:	2800      	cmp	r0, #0
 801a5ae:	f000 8645 	beq.w	801b23c <DecodeRekordboxFiles+0xd90>
 801a5b2:	4b71      	ldr	r3, [pc, #452]	; (801a778 <DecodeRekordboxFiles+0x2cc>)
 801a5b4:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
 801a5b8:	9300      	str	r3, [sp, #0]
		}
		f_close(&MyFile);
	}
	i = 0;
	uint8_t l = 0;
	while(i++  < rekordbox.spectrum_size) {
 801a5ba:	f8d3 ca8c 	ldr.w	ip, [r3, #2700]	; 0xa8c
 801a5be:	f1bc 0f00 	cmp.w	ip, #0
 801a5c2:	f001 80ff 	beq.w	801b7c4 <DecodeRekordboxFiles+0x1318>
 801a5c6:	f1bc 0f01 	cmp.w	ip, #1
		if((i % 9000) == 0) {
			rekordbox.remminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * (rekordbox.spectrum_size - i) / rekordbox.spectrum_size);
 801a5ca:	f8d3 ea88 	ldr.w	lr, [r3, #2696]	; 0xa88
	while(i++  < rekordbox.spectrum_size) {
 801a5ce:	f001 80f6 	beq.w	801b7be <DecodeRekordboxFiles+0x1312>
 801a5d2:	f1ac 0102 	sub.w	r1, ip, #2
 801a5d6:	ea4f 004e 	mov.w	r0, lr, lsl #1
 801a5da:	2200      	movs	r2, #0
 801a5dc:	2302      	movs	r3, #2
 801a5de:	fb0e f101 	mul.w	r1, lr, r1
 801a5e2:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 801a798 <DecodeRekordboxFiles+0x2ec>
		if((i % 9000) == 0) {
 801a5e6:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 801a79c <DecodeRekordboxFiles+0x2f0>
			rekordbox.remminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * (rekordbox.spectrum_size - i) / rekordbox.spectrum_size);
 801a5ea:	f241 5748 	movw	r7, #5448	; 0x1548
			rekordbox.elminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * i / rekordbox.spectrum_size);
 801a5ee:	f241 5b88 	movw	fp, #5512	; 0x1588
			rekordbox.remminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * (rekordbox.spectrum_size - i) / rekordbox.spectrum_size);
 801a5f2:	fb09 f603 	mul.w	r6, r9, r3
		if((i % 9000) == 0) {
 801a5f6:	ebb8 0ff6 	cmp.w	r8, r6, ror #3
			rekordbox.remminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * (rekordbox.spectrum_size - i) / rekordbox.spectrum_size);
 801a5fa:	eb02 0607 	add.w	r6, r2, r7
		if((i % 9000) == 0) {
 801a5fe:	d30c      	bcc.n	801a61a <DecodeRekordboxFiles+0x16e>
			rekordbox.remminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * (rekordbox.spectrum_size - i) / rekordbox.spectrum_size);
 801a600:	fbb1 fafc 	udiv	sl, r1, ip
 801a604:	f824 a016 	strh.w	sl, [r4, r6, lsl #1]
			l++;
 801a608:	f102 0a01 	add.w	sl, r2, #1
			rekordbox.elminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * i / rekordbox.spectrum_size);
 801a60c:	445a      	add	r2, fp
 801a60e:	fbb0 f6fc 	udiv	r6, r0, ip
 801a612:	f824 6012 	strh.w	r6, [r4, r2, lsl #1]
			l++;
 801a616:	fa5f f28a 	uxtb.w	r2, sl
	while(i++  < rekordbox.spectrum_size) {
 801a61a:	1c5e      	adds	r6, r3, #1
 801a61c:	4563      	cmp	r3, ip
 801a61e:	eba1 010e 	sub.w	r1, r1, lr
 801a622:	4470      	add	r0, lr
 801a624:	4633      	mov	r3, r6
 801a626:	d1e4      	bne.n	801a5f2 <DecodeRekordboxFiles+0x146>
		}
	}
	rekordbox.minutes = l;
	rekordbox.state = 1;
 801a628:	2301      	movs	r3, #1
	return 0;
 801a62a:	2000      	movs	r0, #0
	rekordbox.minutes = l;
 801a62c:	9900      	ldr	r1, [sp, #0]
	rekordbox.state = 1;
 801a62e:	f885 33d4 	strb.w	r3, [r5, #980]	; 0x3d4
	rekordbox.minutes = l;
 801a632:	f881 2b90 	strb.w	r2, [r1, #2960]	; 0xb90
}
 801a636:	f20d 5d0c 	addw	sp, sp, #1292	; 0x50c
 801a63a:	ecbd 8b02 	vpop	{d8}
 801a63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(FindToken(wv3_token) != 0) return 1;
 801a642:	484e      	ldr	r0, [pc, #312]	; (801a77c <DecodeRekordboxFiles+0x2d0>)
 801a644:	f7ff feec 	bl	801a420 <FindToken>
 801a648:	2800      	cmp	r0, #0
 801a64a:	f040 81b4 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 801a64e:	4f4c      	ldr	r7, [pc, #304]	; (801a780 <DecodeRekordboxFiles+0x2d4>)
 801a650:	4e4c      	ldr	r6, [pc, #304]	; (801a784 <DecodeRekordboxFiles+0x2d8>)
 801a652:	4d45      	ldr	r5, [pc, #276]	; (801a768 <DecodeRekordboxFiles+0x2bc>)
 801a654:	463b      	mov	r3, r7
 801a656:	220c      	movs	r2, #12
 801a658:	4631      	mov	r1, r6
 801a65a:	4628      	mov	r0, r5
 801a65c:	f7f0 fefe 	bl	800b45c <f_read>
 801a660:	2800      	cmp	r0, #0
 801a662:	d1f7      	bne.n	801a654 <DecodeRekordboxFiles+0x1a8>
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a664:	4e48      	ldr	r6, [pc, #288]	; (801a788 <DecodeRekordboxFiles+0x2dc>)
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801a666:	f8df 8118 	ldr.w	r8, [pc, #280]	; 801a780 <DecodeRekordboxFiles+0x2d4>
 801a66a:	4637      	mov	r7, r6
 801a66c:	4d3e      	ldr	r5, [pc, #248]	; (801a768 <DecodeRekordboxFiles+0x2bc>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a66e:	6030      	str	r0, [r6, #0]
 801a670:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801a672:	4643      	mov	r3, r8
 801a674:	2204      	movs	r2, #4
 801a676:	4639      	mov	r1, r7
 801a678:	4628      	mov	r0, r5
 801a67a:	f7f0 feef 	bl	800b45c <f_read>
 801a67e:	2800      	cmp	r0, #0
 801a680:	d1f7      	bne.n	801a672 <DecodeRekordboxFiles+0x1c6>
		out_data |= tag[i];
 801a682:	7833      	ldrb	r3, [r6, #0]
 801a684:	7872      	ldrb	r2, [r6, #1]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801a686:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801a780 <DecodeRekordboxFiles+0x2d4>
		out_data |= tag[i];
 801a68a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801a68e:	78b3      	ldrb	r3, [r6, #2]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801a690:	4f3c      	ldr	r7, [pc, #240]	; (801a784 <DecodeRekordboxFiles+0x2d8>)
		out_data |= tag[i];
 801a692:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801a696:	78f3      	ldrb	r3, [r6, #3]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801a698:	4d33      	ldr	r5, [pc, #204]	; (801a768 <DecodeRekordboxFiles+0x2bc>)
		out_data |= tag[i];
 801a69a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		rekordbox.spectrum_size=((rekordbox.spectrum_size>MAX_WAVESIZE)?MAX_WAVESIZE:rekordbox.spectrum_size);
 801a69e:	4a3b      	ldr	r2, [pc, #236]	; (801a78c <DecodeRekordboxFiles+0x2e0>)
	out_data >>= 8;
 801a6a0:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.spectrum_size=((rekordbox.spectrum_size>MAX_WAVESIZE)?MAX_WAVESIZE:rekordbox.spectrum_size);
 801a6a4:	4293      	cmp	r3, r2
 801a6a6:	bf28      	it	cs
 801a6a8:	4613      	movcs	r3, r2
 801a6aa:	4a33      	ldr	r2, [pc, #204]	; (801a778 <DecodeRekordboxFiles+0x2cc>)
 801a6ac:	9200      	str	r2, [sp, #0]
 801a6ae:	f8c2 3a8c 	str.w	r3, [r2, #2700]	; 0xa8c
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801a6b2:	4643      	mov	r3, r8
 801a6b4:	2204      	movs	r2, #4
 801a6b6:	4639      	mov	r1, r7
 801a6b8:	4628      	mov	r0, r5
 801a6ba:	f7f0 fecf 	bl	800b45c <f_read>
 801a6be:	2800      	cmp	r0, #0
 801a6c0:	d1f7      	bne.n	801a6b2 <DecodeRekordboxFiles+0x206>
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801a6c2:	9b00      	ldr	r3, [sp, #0]
		rekordbox.cue_start_position[0] = 0;
 801a6c4:	4d32      	ldr	r5, [pc, #200]	; (801a790 <DecodeRekordboxFiles+0x2e4>)
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801a6c6:	f8d3 3a8c 	ldr.w	r3, [r3, #2700]	; 0xa8c
		rekordbox.cue_start_position[0] = 0;
 801a6ca:	64a8      	str	r0, [r5, #72]	; 0x48
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801a6cc:	b1eb      	cbz	r3, 801a70a <DecodeRekordboxFiles+0x25e>
 801a6ce:	4681      	mov	r9, r0
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 801a6d0:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801a780 <DecodeRekordboxFiles+0x2d4>
 801a6d4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801a788 <DecodeRekordboxFiles+0x2dc>
 801a6d8:	4f23      	ldr	r7, [pc, #140]	; (801a768 <DecodeRekordboxFiles+0x2bc>)
 801a6da:	4653      	mov	r3, sl
 801a6dc:	2201      	movs	r2, #1
 801a6de:	4641      	mov	r1, r8
 801a6e0:	4638      	mov	r0, r7
 801a6e2:	f7f0 febb 	bl	800b45c <f_read>
 801a6e6:	2800      	cmp	r0, #0
 801a6e8:	d1f7      	bne.n	801a6da <DecodeRekordboxFiles+0x22e>
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801a6ea:	4a1c      	ldr	r2, [pc, #112]	; (801a75c <DecodeRekordboxFiles+0x2b0>)
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 801a6ec:	7833      	ldrb	r3, [r6, #0]
 801a6ee:	f809 3002 	strb.w	r3, [r9, r2]
			if(rekordbox.autocue == 1) {
 801a6f2:	f895 23cc 	ldrb.w	r2, [r5, #972]	; 0x3cc
 801a6f6:	2a01      	cmp	r2, #1
 801a6f8:	f000 858b 	beq.w	801b212 <DecodeRekordboxFiles+0xd66>
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801a6fc:	9b00      	ldr	r3, [sp, #0]
 801a6fe:	f109 0901 	add.w	r9, r9, #1
 801a702:	f8d3 3a8c 	ldr.w	r3, [r3, #2700]	; 0xa8c
 801a706:	454b      	cmp	r3, r9
 801a708:	d8e7      	bhi.n	801a6da <DecodeRekordboxFiles+0x22e>
		f_close(&MyFile);
 801a70a:	4817      	ldr	r0, [pc, #92]	; (801a768 <DecodeRekordboxFiles+0x2bc>)
 801a70c:	f7f0 ffba 	bl	800b684 <f_close>
 801a710:	e721      	b.n	801a556 <DecodeRekordboxFiles+0xaa>
		while(i < data_size) {
 801a712:	2300      	movs	r3, #0
 801a714:	aa03      	add	r2, sp, #12
 801a716:	3b01      	subs	r3, #1
 801a718:	4413      	add	r3, r2
 801a71a:	2200      	movs	r2, #0
			if(filename[i] >= 32) {
 801a71c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
				k++;
 801a720:	f102 0c01 	add.w	ip, r2, #1
				rekordbox.filetype[k] = filename[i];
 801a724:	18a0      	adds	r0, r4, r2
			if(filename[i] >= 32) {
 801a726:	291f      	cmp	r1, #31
 801a728:	f240 856e 	bls.w	801b208 <DecodeRekordboxFiles+0xd5c>
				k++;
 801a72c:	fa5f f28c 	uxtb.w	r2, ip
				rekordbox.filetype[k] = filename[i];
 801a730:	f880 14fb 	strb.w	r1, [r0, #1275]	; 0x4fb
		while(k < 5)
 801a734:	2a05      	cmp	r2, #5
 801a736:	d1f1      	bne.n	801a71c <DecodeRekordboxFiles+0x270>
		rekordbox.filetype[4] = 0;
 801a738:	2100      	movs	r1, #0
		for(i = 0; i < RBX_MAX_PATH; i++) rekordbox.file[i] = 0;
 801a73a:	22ff      	movs	r2, #255	; 0xff
 801a73c:	4815      	ldr	r0, [pc, #84]	; (801a794 <DecodeRekordboxFiles+0x2e8>)
		rekordbox.filetype[4] = 0;
 801a73e:	f884 14ff 	strb.w	r1, [r4, #1279]	; 0x4ff
		for(i = 0; i < RBX_MAX_PATH; i++) rekordbox.file[i] = 0;
 801a742:	f004 fd07 	bl	801f154 <memset>
		while((i > 0) && (filename[i] != '/')) i--;
 801a746:	2f00      	cmp	r7, #0
 801a748:	f001 8065 	beq.w	801b816 <DecodeRekordboxFiles+0x136a>
 801a74c:	ab03      	add	r3, sp, #12
 801a74e:	1c7a      	adds	r2, r7, #1
 801a750:	441a      	add	r2, r3
 801a752:	463b      	mov	r3, r7
 801a754:	e027      	b.n	801a7a6 <DecodeRekordboxFiles+0x2fa>
 801a756:	bf00      	nop
 801a758:	20015208 	.word	0x20015208
 801a75c:	c0100000 	.word	0xc0100000
 801a760:	c0130d40 	.word	0xc0130d40
 801a764:	08024e04 	.word	0x08024e04
 801a768:	20001b58 	.word	0x20001b58
 801a76c:	08024e3c 	.word	0x08024e3c
 801a770:	08024e74 	.word	0x08024e74
 801a774:	08024eac 	.word	0x08024eac
 801a778:	20017208 	.word	0x20017208
 801a77c:	08024f0c 	.word	0x08024f0c
 801a780:	2000e94c 	.word	0x2000e94c
 801a784:	20000b48 	.word	0x20000b48
 801a788:	200185e0 	.word	0x200185e0
 801a78c:	00030d40 	.word	0x00030d40
 801a790:	20018208 	.word	0x20018208
 801a794:	20015604 	.word	0x20015604
 801a798:	e7e10d6d 	.word	0xe7e10d6d
 801a79c:	00074822 	.word	0x00074822
 801a7a0:	3b01      	subs	r3, #1
 801a7a2:	f000 85e7 	beq.w	801b374 <DecodeRekordboxFiles+0xec8>
 801a7a6:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801a7aa:	292f      	cmp	r1, #47	; 0x2f
 801a7ac:	d1f8      	bne.n	801a7a0 <DecodeRekordboxFiles+0x2f4>
		i++;
 801a7ae:	3301      	adds	r3, #1
		while(i < data_size)
 801a7b0:	429f      	cmp	r7, r3
 801a7b2:	f241 802d 	bls.w	801b810 <DecodeRekordboxFiles+0x1364>
 801a7b6:	aa03      	add	r2, sp, #12
 801a7b8:	3b01      	subs	r3, #1
 801a7ba:	4413      	add	r3, r2
 801a7bc:	f10d 020b 	add.w	r2, sp, #11
 801a7c0:	eb02 0c07 	add.w	ip, r2, r7
			if(filename[i] >= 32) {
 801a7c4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
				k++;
 801a7c8:	1c68      	adds	r0, r5, #1
				rekordbox.file[k] = filename[i];
 801a7ca:	1961      	adds	r1, r4, r5
			if(filename[i] >= 32) {
 801a7cc:	2a1f      	cmp	r2, #31
 801a7ce:	d902      	bls.n	801a7d6 <DecodeRekordboxFiles+0x32a>
				k++;
 801a7d0:	b2c5      	uxtb	r5, r0
				rekordbox.file[k] = filename[i];
 801a7d2:	f881 23fc 	strb.w	r2, [r1, #1020]	; 0x3fc
		while(i < data_size)
 801a7d6:	4563      	cmp	r3, ip
 801a7d8:	d1f4      	bne.n	801a7c4 <DecodeRekordboxFiles+0x318>
		rekordbox.file[i] = 0;
 801a7da:	4427      	add	r7, r4
 801a7dc:	2300      	movs	r3, #0
		if(FindToken(qtz_token) != 0) return 1;
 801a7de:	48c2      	ldr	r0, [pc, #776]	; (801aae8 <DecodeRekordboxFiles+0x63c>)
		rekordbox.file[i] = 0;
 801a7e0:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
		if(FindToken(qtz_token) != 0) return 1;
 801a7e4:	f7ff fe1c 	bl	801a420 <FindToken>
 801a7e8:	2800      	cmp	r0, #0
 801a7ea:	f040 80e4 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 22 bytes
 801a7ee:	f8df 8324 	ldr.w	r8, [pc, #804]	; 801ab14 <DecodeRekordboxFiles+0x668>
 801a7f2:	4fbe      	ldr	r7, [pc, #760]	; (801aaec <DecodeRekordboxFiles+0x640>)
 801a7f4:	4dbe      	ldr	r5, [pc, #760]	; (801aaf0 <DecodeRekordboxFiles+0x644>)
 801a7f6:	4643      	mov	r3, r8
 801a7f8:	2210      	movs	r2, #16
 801a7fa:	4639      	mov	r1, r7
 801a7fc:	4628      	mov	r0, r5
 801a7fe:	f7f0 fe2d 	bl	800b45c <f_read>
 801a802:	2800      	cmp	r0, #0
 801a804:	d1f7      	bne.n	801a7f6 <DecodeRekordboxFiles+0x34a>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801a806:	f8df 830c 	ldr.w	r8, [pc, #780]	; 801ab14 <DecodeRekordboxFiles+0x668>
 801a80a:	4fba      	ldr	r7, [pc, #744]	; (801aaf4 <DecodeRekordboxFiles+0x648>)
 801a80c:	4db8      	ldr	r5, [pc, #736]	; (801aaf0 <DecodeRekordboxFiles+0x644>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a80e:	6030      	str	r0, [r6, #0]
 801a810:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801a812:	4643      	mov	r3, r8
 801a814:	2204      	movs	r2, #4
 801a816:	4639      	mov	r1, r7
 801a818:	4628      	mov	r0, r5
 801a81a:	f7f0 fe1f 	bl	800b45c <f_read>
 801a81e:	2800      	cmp	r0, #0
 801a820:	d1f7      	bne.n	801a812 <DecodeRekordboxFiles+0x366>
		out_data |= tag[i];
 801a822:	7833      	ldrb	r3, [r6, #0]
 801a824:	7872      	ldrb	r2, [r6, #1]
 801a826:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801a82a:	78b3      	ldrb	r3, [r6, #2]
 801a82c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801a830:	78f3      	ldrb	r3, [r6, #3]
 801a832:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	out_data >>= 8;
 801a836:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.timezones = ((data_size>RBX_MAX_TQZ)?RBX_MAX_TQZ:data_size);  //memory protect!
 801a83a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 801a83e:	461a      	mov	r2, r3
 801a840:	bf28      	it	cs
 801a842:	f44f 6296 	movcs.w	r2, #1200	; 0x4b0
 801a846:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		for(i=0; i<rekordbox.timezones; i++) {
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d059      	beq.n	801a902 <DecodeRekordboxFiles+0x456>
 801a84e:	4baa      	ldr	r3, [pc, #680]	; (801aaf8 <DecodeRekordboxFiles+0x64c>)
 801a850:	4680      	mov	r8, r0
 801a852:	4aaa      	ldr	r2, [pc, #680]	; (801aafc <DecodeRekordboxFiles+0x650>)
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 801a854:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 801ab14 <DecodeRekordboxFiles+0x668>
 801a858:	f6a3 195e 	subw	r9, r3, #2398	; 0x95e
 801a85c:	4fa5      	ldr	r7, [pc, #660]	; (801aaf4 <DecodeRekordboxFiles+0x648>)
 801a85e:	4da4      	ldr	r5, [pc, #656]	; (801aaf0 <DecodeRekordboxFiles+0x644>)
 801a860:	9300      	str	r3, [sp, #0]
 801a862:	9201      	str	r2, [sp, #4]
 801a864:	465b      	mov	r3, fp
 801a866:	2201      	movs	r2, #1
 801a868:	4639      	mov	r1, r7
 801a86a:	4628      	mov	r0, r5
 801a86c:	f7f0 fdf6 	bl	800b45c <f_read>
 801a870:	2800      	cmp	r0, #0
 801a872:	d1f7      	bne.n	801a864 <DecodeRekordboxFiles+0x3b8>
 801a874:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 801ab1c <DecodeRekordboxFiles+0x670>
 801a878:	465b      	mov	r3, fp
 801a87a:	2201      	movs	r2, #1
 801a87c:	4651      	mov	r1, sl
 801a87e:	4628      	mov	r0, r5
 801a880:	f7f0 fdec 	bl	800b45c <f_read>
 801a884:	2800      	cmp	r0, #0
 801a886:	d1f7      	bne.n	801a878 <DecodeRekordboxFiles+0x3cc>
			rekordbox.phase[i] |= tag[0];
 801a888:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 801a88c:	7833      	ldrb	r3, [r6, #0]
 801a88e:	431a      	orrs	r2, r3
			rekordbox.phase[i] |= tag[1];
 801a890:	7873      	ldrb	r3, [r6, #1]
 801a892:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801a896:	f8a9 3000 	strh.w	r3, [r9]
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 801a89a:	465b      	mov	r3, fp
 801a89c:	2201      	movs	r2, #1
 801a89e:	4639      	mov	r1, r7
 801a8a0:	4628      	mov	r0, r5
 801a8a2:	f7f0 fddb 	bl	800b45c <f_read>
 801a8a6:	2800      	cmp	r0, #0
 801a8a8:	d1f7      	bne.n	801a89a <DecodeRekordboxFiles+0x3ee>
 801a8aa:	f8df a270 	ldr.w	sl, [pc, #624]	; 801ab1c <DecodeRekordboxFiles+0x670>
 801a8ae:	465b      	mov	r3, fp
 801a8b0:	2201      	movs	r2, #1
 801a8b2:	4651      	mov	r1, sl
 801a8b4:	4628      	mov	r0, r5
 801a8b6:	f7f0 fdd1 	bl	800b45c <f_read>
 801a8ba:	2800      	cmp	r0, #0
 801a8bc:	d1f7      	bne.n	801a8ae <DecodeRekordboxFiles+0x402>
			rekordbox.bpm[i] |= tag[0];
 801a8be:	9901      	ldr	r1, [sp, #4]
 801a8c0:	7833      	ldrb	r3, [r6, #0]
 801a8c2:	f831 2f02 	ldrh.w	r2, [r1, #2]!
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a8c6:	7130      	strb	r0, [r6, #4]
			rekordbox.bpm[i] |= tag[0];
 801a8c8:	431a      	orrs	r2, r3
			rekordbox.bpm[i] |= tag[1];
 801a8ca:	7873      	ldrb	r3, [r6, #1]
			rekordbox.bpm[i] |= tag[0];
 801a8cc:	9101      	str	r1, [sp, #4]
			rekordbox.bpm[i] |= tag[1];
 801a8ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a8d2:	6030      	str	r0, [r6, #0]
			rekordbox.bpm[i] |= tag[1];
 801a8d4:	800b      	strh	r3, [r1, #0]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801a8d6:	465b      	mov	r3, fp
 801a8d8:	2204      	movs	r2, #4
 801a8da:	4639      	mov	r1, r7
 801a8dc:	4628      	mov	r0, r5
 801a8de:	f7f0 fdbd 	bl	800b45c <f_read>
 801a8e2:	2800      	cmp	r0, #0
 801a8e4:	d1f7      	bne.n	801a8d6 <DecodeRekordboxFiles+0x42a>
		out_data |= tag[i];
 801a8e6:	6833      	ldr	r3, [r6, #0]
		for(i=0; i<rekordbox.timezones; i++) {
 801a8e8:	f108 0801 	add.w	r8, r8, #1
			rekordbox.timeindex[i] = GetLongNumber();
 801a8ec:	9a00      	ldr	r2, [sp, #0]
 801a8ee:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801a8f0:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.timeindex[i] = GetLongNumber();
 801a8f4:	f842 3f04 	str.w	r3, [r2, #4]!
		for(i=0; i<rekordbox.timezones; i++) {
 801a8f8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
			rekordbox.timeindex[i] = GetLongNumber();
 801a8fc:	9200      	str	r2, [sp, #0]
		for(i=0; i<rekordbox.timezones; i++) {
 801a8fe:	4543      	cmp	r3, r8
 801a900:	d8b0      	bhi.n	801a864 <DecodeRekordboxFiles+0x3b8>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 801a902:	f8b4 3e64 	ldrh.w	r3, [r4, #3684]	; 0xe64
 801a906:	2b01      	cmp	r3, #1
 801a908:	f000 875f 	beq.w	801b7ca <DecodeRekordboxFiles+0x131e>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 801a90c:	3b01      	subs	r3, #1
 801a90e:	b2db      	uxtb	r3, r3
 801a910:	4a7b      	ldr	r2, [pc, #492]	; (801ab00 <DecodeRekordboxFiles+0x654>)
		if(FindToken(wave_token) != 0) return 1;
 801a912:	487c      	ldr	r0, [pc, #496]	; (801ab04 <DecodeRekordboxFiles+0x658>)
 801a914:	9200      	str	r2, [sp, #0]
 801a916:	f882 3a84 	strb.w	r3, [r2, #2692]	; 0xa84
 801a91a:	f7ff fd81 	bl	801a420 <FindToken>
 801a91e:	2800      	cmp	r0, #0
 801a920:	d149      	bne.n	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801a922:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 801ab14 <DecodeRekordboxFiles+0x668>
 801a926:	4f71      	ldr	r7, [pc, #452]	; (801aaec <DecodeRekordboxFiles+0x640>)
 801a928:	4d71      	ldr	r5, [pc, #452]	; (801aaf0 <DecodeRekordboxFiles+0x644>)
 801a92a:	4643      	mov	r3, r8
 801a92c:	2208      	movs	r2, #8
 801a92e:	4639      	mov	r1, r7
 801a930:	4628      	mov	r0, r5
 801a932:	f7f0 fd93 	bl	800b45c <f_read>
 801a936:	2800      	cmp	r0, #0
 801a938:	d1f7      	bne.n	801a92a <DecodeRekordboxFiles+0x47e>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801a93a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801ab14 <DecodeRekordboxFiles+0x668>
 801a93e:	4f6d      	ldr	r7, [pc, #436]	; (801aaf4 <DecodeRekordboxFiles+0x648>)
 801a940:	4d6b      	ldr	r5, [pc, #428]	; (801aaf0 <DecodeRekordboxFiles+0x644>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a942:	6030      	str	r0, [r6, #0]
 801a944:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801a946:	4643      	mov	r3, r8
 801a948:	2204      	movs	r2, #4
 801a94a:	4639      	mov	r1, r7
 801a94c:	4628      	mov	r0, r5
 801a94e:	f7f0 fd85 	bl	800b45c <f_read>
 801a952:	2800      	cmp	r0, #0
 801a954:	d1f7      	bne.n	801a946 <DecodeRekordboxFiles+0x49a>
		out_data |= tag[i];
 801a956:	7833      	ldrb	r3, [r6, #0]
 801a958:	7872      	ldrb	r2, [r6, #1]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801a95a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801ab14 <DecodeRekordboxFiles+0x668>
		out_data |= tag[i];
 801a95e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801a962:	78b3      	ldrb	r3, [r6, #2]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801a964:	4f61      	ldr	r7, [pc, #388]	; (801aaec <DecodeRekordboxFiles+0x640>)
		out_data |= tag[i];
 801a966:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801a96a:	78f3      	ldrb	r3, [r6, #3]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801a96c:	4d60      	ldr	r5, [pc, #384]	; (801aaf0 <DecodeRekordboxFiles+0x644>)
		out_data |= tag[i];
 801a96e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		rekordbox.lowp_spectrum_size = GetLongNumber();
 801a972:	9a00      	ldr	r2, [sp, #0]
	out_data >>= 8;
 801a974:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.lowp_spectrum_size = GetLongNumber();
 801a978:	f8c2 3a88 	str.w	r3, [r2, #2696]	; 0xa88
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801a97c:	4643      	mov	r3, r8
 801a97e:	2204      	movs	r2, #4
 801a980:	4639      	mov	r1, r7
 801a982:	4628      	mov	r0, r5
 801a984:	f7f0 fd6a 	bl	800b45c <f_read>
 801a988:	2800      	cmp	r0, #0
 801a98a:	d1f7      	bne.n	801a97c <DecodeRekordboxFiles+0x4d0>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 801a98c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 801ab14 <DecodeRekordboxFiles+0x668>
 801a990:	4f5d      	ldr	r7, [pc, #372]	; (801ab08 <DecodeRekordboxFiles+0x65c>)
 801a992:	4d57      	ldr	r5, [pc, #348]	; (801aaf0 <DecodeRekordboxFiles+0x644>)
 801a994:	f8dd 9000 	ldr.w	r9, [sp]
 801a998:	4643      	mov	r3, r8
 801a99a:	f8d9 2a88 	ldr.w	r2, [r9, #2696]	; 0xa88
 801a99e:	4639      	mov	r1, r7
 801a9a0:	4628      	mov	r0, r5
 801a9a2:	f7f0 fd5b 	bl	800b45c <f_read>
 801a9a6:	2800      	cmp	r0, #0
 801a9a8:	d1f6      	bne.n	801a998 <DecodeRekordboxFiles+0x4ec>
		if(FindToken(cob_token) != 0) return 1;
 801a9aa:	4858      	ldr	r0, [pc, #352]	; (801ab0c <DecodeRekordboxFiles+0x660>)
 801a9ac:	f7ff fd38 	bl	801a420 <FindToken>
 801a9b0:	2800      	cmp	r0, #0
 801a9b2:	f000 84f9 	beq.w	801b3a8 <DecodeRekordboxFiles+0xefc>
		if(FindToken(path_token) != 0) return 1;
 801a9b6:	2001      	movs	r0, #1
}
 801a9b8:	f20d 5d0c 	addw	sp, sp, #1292	; 0x50c
 801a9bc:	ecbd 8b02 	vpop	{d8}
 801a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(FindToken(path_token) != 0) return 1;
 801a9c4:	4852      	ldr	r0, [pc, #328]	; (801ab10 <DecodeRekordboxFiles+0x664>)
 801a9c6:	f7ff fd2b 	bl	801a420 <FindToken>
 801a9ca:	2800      	cmp	r0, #0
 801a9cc:	d1f3      	bne.n	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801a9ce:	4f51      	ldr	r7, [pc, #324]	; (801ab14 <DecodeRekordboxFiles+0x668>)
 801a9d0:	4e46      	ldr	r6, [pc, #280]	; (801aaec <DecodeRekordboxFiles+0x640>)
 801a9d2:	4d47      	ldr	r5, [pc, #284]	; (801aaf0 <DecodeRekordboxFiles+0x644>)
 801a9d4:	463b      	mov	r3, r7
 801a9d6:	2208      	movs	r2, #8
 801a9d8:	4631      	mov	r1, r6
 801a9da:	4628      	mov	r0, r5
 801a9dc:	f7f0 fd3e 	bl	800b45c <f_read>
 801a9e0:	2800      	cmp	r0, #0
 801a9e2:	d1f7      	bne.n	801a9d4 <DecodeRekordboxFiles+0x528>
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a9e4:	4e43      	ldr	r6, [pc, #268]	; (801aaf4 <DecodeRekordboxFiles+0x648>)
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801a9e6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 801ab14 <DecodeRekordboxFiles+0x668>
 801a9ea:	4637      	mov	r7, r6
 801a9ec:	4d40      	ldr	r5, [pc, #256]	; (801aaf0 <DecodeRekordboxFiles+0x644>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801a9ee:	6030      	str	r0, [r6, #0]
 801a9f0:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801a9f2:	4643      	mov	r3, r8
 801a9f4:	2204      	movs	r2, #4
 801a9f6:	4639      	mov	r1, r7
 801a9f8:	4628      	mov	r0, r5
 801a9fa:	f7f0 fd2f 	bl	800b45c <f_read>
 801a9fe:	2800      	cmp	r0, #0
 801aa00:	d1f7      	bne.n	801a9f2 <DecodeRekordboxFiles+0x546>
		out_data |= tag[i];
 801aa02:	7873      	ldrb	r3, [r6, #1]
 801aa04:	7837      	ldrb	r7, [r6, #0]
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 801aa06:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801ab14 <DecodeRekordboxFiles+0x668>
		out_data |= tag[i];
 801aa0a:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
 801aa0e:	78b3      	ldrb	r3, [r6, #2]
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 801aa10:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801aaf0 <DecodeRekordboxFiles+0x644>
		out_data |= tag[i];
 801aa14:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 801aa18:	78f7      	ldrb	r7, [r6, #3]
 801aa1a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	out_data >>= 8;
 801aa1e:	f347 0717 	sbfx	r7, r7, #0, #24
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 801aa22:	464b      	mov	r3, r9
 801aa24:	463a      	mov	r2, r7
 801aa26:	a903      	add	r1, sp, #12
 801aa28:	4640      	mov	r0, r8
 801aa2a:	f7f0 fd17 	bl	800b45c <f_read>
 801aa2e:	2800      	cmp	r0, #0
 801aa30:	d1f7      	bne.n	801aa22 <DecodeRekordboxFiles+0x576>
		while(i < data_size) {
 801aa32:	4605      	mov	r5, r0
 801aa34:	2f00      	cmp	r7, #0
 801aa36:	f000 83ce 	beq.w	801b1d6 <DecodeRekordboxFiles+0xd2a>
 801aa3a:	f107 3aff 	add.w	sl, r7, #4294967295
 801aa3e:	f10d 030d 	add.w	r3, sp, #13
 801aa42:	f10d 0b0c 	add.w	fp, sp, #12
 801aa46:	eb03 095a 	add.w	r9, r3, sl, lsr #1
 801aa4a:	46d8      	mov	r8, fp
 801aa4c:	ea4f 035a 	mov.w	r3, sl, lsr #1
 801aa50:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 801ab20 <DecodeRekordboxFiles+0x674>
 801aa54:	9300      	str	r3, [sp, #0]
			WCHAR c = filename[i];
 801aa56:	f898 3000 	ldrb.w	r3, [r8]
			filename[k] = ff_convert(c, 0);
 801aa5a:	2100      	movs	r1, #0
			c |= filename[i];
 801aa5c:	f898 0001 	ldrb.w	r0, [r8, #1]
		while(i < data_size) {
 801aa60:	f108 0802 	add.w	r8, r8, #2
			c |= filename[i];
 801aa64:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			rekordbox.filename[k] = c;
 801aa68:	f84a 0b04 	str.w	r0, [sl], #4
			filename[k] = ff_convert(c, 0);
 801aa6c:	f7f1 f946 	bl	800bcfc <ff_convert>
 801aa70:	f80b 0b01 	strb.w	r0, [fp], #1
		while(i < data_size) {
 801aa74:	45d9      	cmp	r9, fp
 801aa76:	d1ee      	bne.n	801aa56 <DecodeRekordboxFiles+0x5aa>
			k++;
 801aa78:	9800      	ldr	r0, [sp, #0]
 801aa7a:	3001      	adds	r0, #1
		for(i = k; i < data_size; i++) filename[i] = 0;
 801aa7c:	b2c0      	uxtb	r0, r0
 801aa7e:	42b8      	cmp	r0, r7
 801aa80:	d205      	bcs.n	801aa8e <DecodeRekordboxFiles+0x5e2>
 801aa82:	ab03      	add	r3, sp, #12
 801aa84:	1a3a      	subs	r2, r7, r0
 801aa86:	2100      	movs	r1, #0
 801aa88:	4418      	add	r0, r3
 801aa8a:	f004 fb63 	bl	801f154 <memset>
 801aa8e:	ab03      	add	r3, sp, #12
 801aa90:	1c7a      	adds	r2, r7, #1
 801aa92:	441a      	add	r2, r3
		while(i < data_size) {
 801aa94:	463b      	mov	r3, r7
 801aa96:	e002      	b.n	801aa9e <DecodeRekordboxFiles+0x5f2>
		while((i > 0) && (filename[i] != '.')) i--;
 801aa98:	3b01      	subs	r3, #1
 801aa9a:	f000 839c 	beq.w	801b1d6 <DecodeRekordboxFiles+0xd2a>
 801aa9e:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801aaa2:	292e      	cmp	r1, #46	; 0x2e
 801aaa4:	d1f8      	bne.n	801aa98 <DecodeRekordboxFiles+0x5ec>
 801aaa6:	aa03      	add	r2, sp, #12
 801aaa8:	3b01      	subs	r3, #1
 801aaaa:	4413      	add	r3, r2
		while(i < data_size) {
 801aaac:	2200      	movs	r2, #0
			if(filename[i] >= 32) {
 801aaae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
				k++;
 801aab2:	f102 0c01 	add.w	ip, r2, #1
				rekordbox.filetype[k] = filename[i];
 801aab6:	18a0      	adds	r0, r4, r2
			if(filename[i] >= 32) {
 801aab8:	291f      	cmp	r1, #31
 801aaba:	f240 83a1 	bls.w	801b200 <DecodeRekordboxFiles+0xd54>
				k++;
 801aabe:	fa5f f28c 	uxtb.w	r2, ip
				rekordbox.filetype[k] = filename[i];
 801aac2:	f880 14fb 	strb.w	r1, [r0, #1275]	; 0x4fb
		while(k < 5)
 801aac6:	2a05      	cmp	r2, #5
 801aac8:	d1f1      	bne.n	801aaae <DecodeRekordboxFiles+0x602>
		rekordbox.filetype[4] = 0;
 801aaca:	2100      	movs	r1, #0
		for(i = 0; i < RBX_MAX_PATH; i++) rekordbox.file[i] = 0;
 801aacc:	22ff      	movs	r2, #255	; 0xff
 801aace:	4812      	ldr	r0, [pc, #72]	; (801ab18 <DecodeRekordboxFiles+0x66c>)
		rekordbox.filetype[4] = 0;
 801aad0:	f884 14ff 	strb.w	r1, [r4, #1279]	; 0x4ff
		for(i = 0; i < RBX_MAX_PATH; i++) rekordbox.file[i] = 0;
 801aad4:	f004 fb3e 	bl	801f154 <memset>
		while((i > 0) && (filename[i] != '/')) i--;
 801aad8:	2f00      	cmp	r7, #0
 801aada:	f000 86a2 	beq.w	801b822 <DecodeRekordboxFiles+0x1376>
 801aade:	ab03      	add	r3, sp, #12
 801aae0:	1c7a      	adds	r2, r7, #1
 801aae2:	441a      	add	r2, r3
 801aae4:	463b      	mov	r3, r7
 801aae6:	e020      	b.n	801ab2a <DecodeRekordboxFiles+0x67e>
 801aae8:	08024efc 	.word	0x08024efc
 801aaec:	20000b48 	.word	0x20000b48
 801aaf0:	20001b58 	.word	0x20001b58
 801aaf4:	200185e0 	.word	0x200185e0
 801aaf8:	200169c8 	.word	0x200169c8
 801aafc:	2001570a 	.word	0x2001570a
 801ab00:	20017208 	.word	0x20017208
 801ab04:	08024f04 	.word	0x08024f04
 801ab08:	2000edf8 	.word	0x2000edf8
 801ab0c:	08024ee4 	.word	0x08024ee4
 801ab10:	08024ef4 	.word	0x08024ef4
 801ab14:	2000e94c 	.word	0x2000e94c
 801ab18:	20015604 	.word	0x20015604
 801ab1c:	200185e1 	.word	0x200185e1
 801ab20:	20015208 	.word	0x20015208
 801ab24:	3b01      	subs	r3, #1
 801ab26:	f000 8422 	beq.w	801b36e <DecodeRekordboxFiles+0xec2>
 801ab2a:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801ab2e:	292f      	cmp	r1, #47	; 0x2f
 801ab30:	d1f8      	bne.n	801ab24 <DecodeRekordboxFiles+0x678>
		i++;
 801ab32:	3301      	adds	r3, #1
		while(i < data_size)
 801ab34:	429f      	cmp	r7, r3
 801ab36:	f240 8671 	bls.w	801b81c <DecodeRekordboxFiles+0x1370>
 801ab3a:	aa03      	add	r2, sp, #12
 801ab3c:	3b01      	subs	r3, #1
 801ab3e:	4413      	add	r3, r2
 801ab40:	f10d 020b 	add.w	r2, sp, #11
 801ab44:	eb02 0c07 	add.w	ip, r2, r7
			if(filename[i] >= 32) {
 801ab48:	f813 2f01 	ldrb.w	r2, [r3, #1]!
				k++;
 801ab4c:	1c68      	adds	r0, r5, #1
				rekordbox.file[k] = filename[i];
 801ab4e:	1961      	adds	r1, r4, r5
			if(filename[i] >= 32) {
 801ab50:	2a1f      	cmp	r2, #31
 801ab52:	d902      	bls.n	801ab5a <DecodeRekordboxFiles+0x6ae>
				k++;
 801ab54:	b2c5      	uxtb	r5, r0
				rekordbox.file[k] = filename[i];
 801ab56:	f881 23fc 	strb.w	r2, [r1, #1020]	; 0x3fc
		while(i < data_size)
 801ab5a:	4563      	cmp	r3, ip
 801ab5c:	d1f4      	bne.n	801ab48 <DecodeRekordboxFiles+0x69c>
		rekordbox.file[i] = 0;
 801ab5e:	4427      	add	r7, r4
 801ab60:	2300      	movs	r3, #0
		if(FindToken(qtz_token) != 0) return 1;
 801ab62:	48bf      	ldr	r0, [pc, #764]	; (801ae60 <DecodeRekordboxFiles+0x9b4>)
		rekordbox.file[i] = 0;
 801ab64:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
		if(FindToken(qtz_token) != 0) return 1;
 801ab68:	f7ff fc5a 	bl	801a420 <FindToken>
 801ab6c:	2800      	cmp	r0, #0
 801ab6e:	f47f af22 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 16 bytes
 801ab72:	f8df 831c 	ldr.w	r8, [pc, #796]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
 801ab76:	4fbb      	ldr	r7, [pc, #748]	; (801ae64 <DecodeRekordboxFiles+0x9b8>)
 801ab78:	4dbb      	ldr	r5, [pc, #748]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
 801ab7a:	4643      	mov	r3, r8
 801ab7c:	2210      	movs	r2, #16
 801ab7e:	4639      	mov	r1, r7
 801ab80:	4628      	mov	r0, r5
 801ab82:	f7f0 fc6b 	bl	800b45c <f_read>
 801ab86:	2800      	cmp	r0, #0
 801ab88:	d1f7      	bne.n	801ab7a <DecodeRekordboxFiles+0x6ce>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801ab8a:	f8df 8304 	ldr.w	r8, [pc, #772]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
 801ab8e:	4fb7      	ldr	r7, [pc, #732]	; (801ae6c <DecodeRekordboxFiles+0x9c0>)
 801ab90:	4db5      	ldr	r5, [pc, #724]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801ab92:	6030      	str	r0, [r6, #0]
 801ab94:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801ab96:	4643      	mov	r3, r8
 801ab98:	2204      	movs	r2, #4
 801ab9a:	4639      	mov	r1, r7
 801ab9c:	4628      	mov	r0, r5
 801ab9e:	f7f0 fc5d 	bl	800b45c <f_read>
 801aba2:	2800      	cmp	r0, #0
 801aba4:	d1f7      	bne.n	801ab96 <DecodeRekordboxFiles+0x6ea>
		out_data |= tag[i];
 801aba6:	7833      	ldrb	r3, [r6, #0]
 801aba8:	7872      	ldrb	r2, [r6, #1]
 801abaa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801abae:	78b3      	ldrb	r3, [r6, #2]
 801abb0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801abb4:	78f3      	ldrb	r3, [r6, #3]
 801abb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	out_data >>= 8;
 801abba:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.timezones = ((data_size>RBX_MAX_TQZ)?RBX_MAX_TQZ:data_size);  //memory protect!
 801abbe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 801abc2:	461a      	mov	r2, r3
 801abc4:	bf28      	it	cs
 801abc6:	f44f 6296 	movcs.w	r2, #1200	; 0x4b0
 801abca:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		for(i=0; i<rekordbox.timezones; i++) {
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d059      	beq.n	801ac86 <DecodeRekordboxFiles+0x7da>
 801abd2:	4ba7      	ldr	r3, [pc, #668]	; (801ae70 <DecodeRekordboxFiles+0x9c4>)
 801abd4:	4680      	mov	r8, r0
 801abd6:	4aa7      	ldr	r2, [pc, #668]	; (801ae74 <DecodeRekordboxFiles+0x9c8>)
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 801abd8:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
 801abdc:	f6a3 195e 	subw	r9, r3, #2398	; 0x95e
 801abe0:	4fa2      	ldr	r7, [pc, #648]	; (801ae6c <DecodeRekordboxFiles+0x9c0>)
 801abe2:	4da1      	ldr	r5, [pc, #644]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
 801abe4:	9300      	str	r3, [sp, #0]
 801abe6:	9201      	str	r2, [sp, #4]
 801abe8:	465b      	mov	r3, fp
 801abea:	2201      	movs	r2, #1
 801abec:	4639      	mov	r1, r7
 801abee:	4628      	mov	r0, r5
 801abf0:	f7f0 fc34 	bl	800b45c <f_read>
 801abf4:	2800      	cmp	r0, #0
 801abf6:	d1f7      	bne.n	801abe8 <DecodeRekordboxFiles+0x73c>
 801abf8:	f8df a298 	ldr.w	sl, [pc, #664]	; 801ae94 <DecodeRekordboxFiles+0x9e8>
 801abfc:	465b      	mov	r3, fp
 801abfe:	2201      	movs	r2, #1
 801ac00:	4651      	mov	r1, sl
 801ac02:	4628      	mov	r0, r5
 801ac04:	f7f0 fc2a 	bl	800b45c <f_read>
 801ac08:	2800      	cmp	r0, #0
 801ac0a:	d1f7      	bne.n	801abfc <DecodeRekordboxFiles+0x750>
			rekordbox.phase[i] |= tag[0];
 801ac0c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 801ac10:	7833      	ldrb	r3, [r6, #0]
 801ac12:	431a      	orrs	r2, r3
			rekordbox.phase[i] |= tag[1];
 801ac14:	7873      	ldrb	r3, [r6, #1]
 801ac16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ac1a:	f8a9 3000 	strh.w	r3, [r9]
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 801ac1e:	465b      	mov	r3, fp
 801ac20:	2201      	movs	r2, #1
 801ac22:	4639      	mov	r1, r7
 801ac24:	4628      	mov	r0, r5
 801ac26:	f7f0 fc19 	bl	800b45c <f_read>
 801ac2a:	2800      	cmp	r0, #0
 801ac2c:	d1f7      	bne.n	801ac1e <DecodeRekordboxFiles+0x772>
 801ac2e:	f8df a264 	ldr.w	sl, [pc, #612]	; 801ae94 <DecodeRekordboxFiles+0x9e8>
 801ac32:	465b      	mov	r3, fp
 801ac34:	2201      	movs	r2, #1
 801ac36:	4651      	mov	r1, sl
 801ac38:	4628      	mov	r0, r5
 801ac3a:	f7f0 fc0f 	bl	800b45c <f_read>
 801ac3e:	2800      	cmp	r0, #0
 801ac40:	d1f7      	bne.n	801ac32 <DecodeRekordboxFiles+0x786>
			rekordbox.bpm[i] |= tag[0];
 801ac42:	9901      	ldr	r1, [sp, #4]
 801ac44:	7833      	ldrb	r3, [r6, #0]
 801ac46:	f831 2f02 	ldrh.w	r2, [r1, #2]!
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801ac4a:	7130      	strb	r0, [r6, #4]
			rekordbox.bpm[i] |= tag[0];
 801ac4c:	431a      	orrs	r2, r3
			rekordbox.bpm[i] |= tag[1];
 801ac4e:	7873      	ldrb	r3, [r6, #1]
			rekordbox.bpm[i] |= tag[0];
 801ac50:	9101      	str	r1, [sp, #4]
			rekordbox.bpm[i] |= tag[1];
 801ac52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801ac56:	6030      	str	r0, [r6, #0]
			rekordbox.bpm[i] |= tag[1];
 801ac58:	800b      	strh	r3, [r1, #0]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801ac5a:	465b      	mov	r3, fp
 801ac5c:	2204      	movs	r2, #4
 801ac5e:	4639      	mov	r1, r7
 801ac60:	4628      	mov	r0, r5
 801ac62:	f7f0 fbfb 	bl	800b45c <f_read>
 801ac66:	2800      	cmp	r0, #0
 801ac68:	d1f7      	bne.n	801ac5a <DecodeRekordboxFiles+0x7ae>
		out_data |= tag[i];
 801ac6a:	6833      	ldr	r3, [r6, #0]
		for(i=0; i<rekordbox.timezones; i++) {
 801ac6c:	f108 0801 	add.w	r8, r8, #1
			rekordbox.timeindex[i] = GetLongNumber();
 801ac70:	9a00      	ldr	r2, [sp, #0]
 801ac72:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801ac74:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.timeindex[i] = GetLongNumber();
 801ac78:	f842 3f04 	str.w	r3, [r2, #4]!
		for(i=0; i<rekordbox.timezones; i++) {
 801ac7c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
			rekordbox.timeindex[i] = GetLongNumber();
 801ac80:	9200      	str	r2, [sp, #0]
		for(i=0; i<rekordbox.timezones; i++) {
 801ac82:	4543      	cmp	r3, r8
 801ac84:	d8b0      	bhi.n	801abe8 <DecodeRekordboxFiles+0x73c>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 801ac86:	f8b4 3e64 	ldrh.w	r3, [r4, #3684]	; 0xe64
 801ac8a:	2b01      	cmp	r3, #1
 801ac8c:	f000 8574 	beq.w	801b778 <DecodeRekordboxFiles+0x12cc>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 801ac90:	3b01      	subs	r3, #1
 801ac92:	b2db      	uxtb	r3, r3
 801ac94:	4a78      	ldr	r2, [pc, #480]	; (801ae78 <DecodeRekordboxFiles+0x9cc>)
		if(FindToken(wave_token) != 0) return 1;
 801ac96:	4879      	ldr	r0, [pc, #484]	; (801ae7c <DecodeRekordboxFiles+0x9d0>)
 801ac98:	9200      	str	r2, [sp, #0]
 801ac9a:	f882 3a84 	strb.w	r3, [r2, #2692]	; 0xa84
 801ac9e:	f7ff fbbf 	bl	801a420 <FindToken>
 801aca2:	2800      	cmp	r0, #0
 801aca4:	f47f ae87 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801aca8:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
 801acac:	4f6d      	ldr	r7, [pc, #436]	; (801ae64 <DecodeRekordboxFiles+0x9b8>)
 801acae:	4d6e      	ldr	r5, [pc, #440]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
 801acb0:	4643      	mov	r3, r8
 801acb2:	2208      	movs	r2, #8
 801acb4:	4639      	mov	r1, r7
 801acb6:	4628      	mov	r0, r5
 801acb8:	f7f0 fbd0 	bl	800b45c <f_read>
 801acbc:	2800      	cmp	r0, #0
 801acbe:	d1f7      	bne.n	801acb0 <DecodeRekordboxFiles+0x804>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801acc0:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
 801acc4:	4f69      	ldr	r7, [pc, #420]	; (801ae6c <DecodeRekordboxFiles+0x9c0>)
 801acc6:	4d68      	ldr	r5, [pc, #416]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801acc8:	6030      	str	r0, [r6, #0]
 801acca:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801accc:	4643      	mov	r3, r8
 801acce:	2204      	movs	r2, #4
 801acd0:	4639      	mov	r1, r7
 801acd2:	4628      	mov	r0, r5
 801acd4:	f7f0 fbc2 	bl	800b45c <f_read>
 801acd8:	2800      	cmp	r0, #0
 801acda:	d1f7      	bne.n	801accc <DecodeRekordboxFiles+0x820>
		out_data |= tag[i];
 801acdc:	7833      	ldrb	r3, [r6, #0]
 801acde:	7872      	ldrb	r2, [r6, #1]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801ace0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
		out_data |= tag[i];
 801ace4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801ace8:	78b3      	ldrb	r3, [r6, #2]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801acea:	4f5e      	ldr	r7, [pc, #376]	; (801ae64 <DecodeRekordboxFiles+0x9b8>)
		out_data |= tag[i];
 801acec:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801acf0:	78f3      	ldrb	r3, [r6, #3]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801acf2:	4d5d      	ldr	r5, [pc, #372]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
		out_data |= tag[i];
 801acf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		rekordbox.lowp_spectrum_size = GetLongNumber();
 801acf8:	9a00      	ldr	r2, [sp, #0]
	out_data >>= 8;
 801acfa:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.lowp_spectrum_size = GetLongNumber();
 801acfe:	f8c2 3a88 	str.w	r3, [r2, #2696]	; 0xa88
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801ad02:	4643      	mov	r3, r8
 801ad04:	2204      	movs	r2, #4
 801ad06:	4639      	mov	r1, r7
 801ad08:	4628      	mov	r0, r5
 801ad0a:	f7f0 fba7 	bl	800b45c <f_read>
 801ad0e:	2800      	cmp	r0, #0
 801ad10:	d1f7      	bne.n	801ad02 <DecodeRekordboxFiles+0x856>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 801ad12:	f8df 817c 	ldr.w	r8, [pc, #380]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
 801ad16:	4f5a      	ldr	r7, [pc, #360]	; (801ae80 <DecodeRekordboxFiles+0x9d4>)
 801ad18:	4d53      	ldr	r5, [pc, #332]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
 801ad1a:	f8dd 9000 	ldr.w	r9, [sp]
 801ad1e:	4643      	mov	r3, r8
 801ad20:	f8d9 2a88 	ldr.w	r2, [r9, #2696]	; 0xa88
 801ad24:	4639      	mov	r1, r7
 801ad26:	4628      	mov	r0, r5
 801ad28:	f7f0 fb98 	bl	800b45c <f_read>
 801ad2c:	2800      	cmp	r0, #0
 801ad2e:	d1f6      	bne.n	801ad1e <DecodeRekordboxFiles+0x872>
		if(FindToken(cob_token) != 0) return 1;
 801ad30:	4854      	ldr	r0, [pc, #336]	; (801ae84 <DecodeRekordboxFiles+0x9d8>)
 801ad32:	f7ff fb75 	bl	801a420 <FindToken>
 801ad36:	2800      	cmp	r0, #0
 801ad38:	f47f ae3d 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801ad3c:	f8df 8150 	ldr.w	r8, [pc, #336]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
 801ad40:	4f48      	ldr	r7, [pc, #288]	; (801ae64 <DecodeRekordboxFiles+0x9b8>)
 801ad42:	4d49      	ldr	r5, [pc, #292]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
 801ad44:	4643      	mov	r3, r8
 801ad46:	220c      	movs	r2, #12
 801ad48:	4639      	mov	r1, r7
 801ad4a:	4628      	mov	r0, r5
 801ad4c:	f7f0 fb86 	bl	800b45c <f_read>
 801ad50:	2800      	cmp	r0, #0
 801ad52:	d1f7      	bne.n	801ad44 <DecodeRekordboxFiles+0x898>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801ad54:	f8df 8138 	ldr.w	r8, [pc, #312]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
 801ad58:	4f44      	ldr	r7, [pc, #272]	; (801ae6c <DecodeRekordboxFiles+0x9c0>)
 801ad5a:	4d43      	ldr	r5, [pc, #268]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801ad5c:	6030      	str	r0, [r6, #0]
 801ad5e:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801ad60:	4643      	mov	r3, r8
 801ad62:	2204      	movs	r2, #4
 801ad64:	4639      	mov	r1, r7
 801ad66:	4628      	mov	r0, r5
 801ad68:	f7f0 fb78 	bl	800b45c <f_read>
 801ad6c:	2800      	cmp	r0, #0
 801ad6e:	d1f7      	bne.n	801ad60 <DecodeRekordboxFiles+0x8b4>
		out_data |= tag[i];
 801ad70:	7833      	ldrb	r3, [r6, #0]
 801ad72:	7872      	ldrb	r2, [r6, #1]
 801ad74:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801ad78:	78b3      	ldrb	r3, [r6, #2]
 801ad7a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801ad7e:	78f3      	ldrb	r3, [r6, #3]
 801ad80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801ad84:	9a00      	ldr	r2, [sp, #0]
	out_data >>= 8;
 801ad86:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.cues = GetLongNumber() + 1;
 801ad8a:	3301      	adds	r3, #1
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801ad8c:	2b64      	cmp	r3, #100	; 0x64
 801ad8e:	bfa8      	it	ge
 801ad90:	2364      	movge	r3, #100	; 0x64
		for(i = 1; i < rekordbox.cues; i++) {
 801ad92:	2b01      	cmp	r3, #1
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801ad94:	f8c2 3b94 	str.w	r3, [r2, #2964]	; 0xb94
		for(i = 1; i < rekordbox.cues; i++) {
 801ad98:	f240 8549 	bls.w	801b82e <DecodeRekordboxFiles+0x1382>
 801ad9c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801ae98 <DecodeRekordboxFiles+0x9ec>
 801ada0:	f04f 0a01 	mov.w	sl, #1
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801ada4:	ed9f 8a38 	vldr	s16, [pc, #224]	; 801ae88 <DecodeRekordboxFiles+0x9dc>
 801ada8:	f208 75d1 	addw	r5, r8, #2001	; 0x7d1
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801adac:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801ae90 <DecodeRekordboxFiles+0x9e4>
			if(FindToken(cue_token) != 0) return 1;
 801adb0:	4836      	ldr	r0, [pc, #216]	; (801ae8c <DecodeRekordboxFiles+0x9e0>)
 801adb2:	f7ff fb35 	bl	801a420 <FindToken>
 801adb6:	2800      	cmp	r0, #0
 801adb8:	f47f adfd 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801adbc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 801ae64 <DecodeRekordboxFiles+0x9b8>
 801adc0:	4f29      	ldr	r7, [pc, #164]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
 801adc2:	465b      	mov	r3, fp
 801adc4:	2208      	movs	r2, #8
 801adc6:	4649      	mov	r1, r9
 801adc8:	4638      	mov	r0, r7
 801adca:	f7f0 fb47 	bl	800b45c <f_read>
 801adce:	2800      	cmp	r0, #0
 801add0:	d1f7      	bne.n	801adc2 <DecodeRekordboxFiles+0x916>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801add2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 801ae6c <DecodeRekordboxFiles+0x9c0>
 801add6:	4f24      	ldr	r7, [pc, #144]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801add8:	6030      	str	r0, [r6, #0]
 801adda:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801addc:	465b      	mov	r3, fp
 801adde:	2204      	movs	r2, #4
 801ade0:	4649      	mov	r1, r9
 801ade2:	4638      	mov	r0, r7
 801ade4:	f7f0 fb3a 	bl	800b45c <f_read>
 801ade8:	2800      	cmp	r0, #0
 801adea:	d1f7      	bne.n	801addc <DecodeRekordboxFiles+0x930>
		out_data |= tag[i];
 801adec:	6833      	ldr	r3, [r6, #0]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801adee:	f8df 907c 	ldr.w	r9, [pc, #124]	; 801ae6c <DecodeRekordboxFiles+0x9c0>
 801adf2:	ba1b      	rev	r3, r3
 801adf4:	4f1c      	ldr	r7, [pc, #112]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801adf6:	7130      	strb	r0, [r6, #4]
	out_data >>= 8;
 801adf8:	f343 0317 	sbfx	r3, r3, #0, #24
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801adfc:	6030      	str	r0, [r6, #0]
			rekordbox.cue_number[i] = GetLongNumber();
 801adfe:	f848 3f04 	str.w	r3, [r8, #4]!
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801ae02:	465b      	mov	r3, fp
 801ae04:	2204      	movs	r2, #4
 801ae06:	4649      	mov	r1, r9
 801ae08:	4638      	mov	r0, r7
 801ae0a:	f7f0 fb27 	bl	800b45c <f_read>
 801ae0e:	2800      	cmp	r0, #0
 801ae10:	d1f7      	bne.n	801ae02 <DecodeRekordboxFiles+0x956>
		out_data |= tag[i];
 801ae12:	6833      	ldr	r3, [r6, #0]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801ae14:	f8df 904c 	ldr.w	r9, [pc, #76]	; 801ae64 <DecodeRekordboxFiles+0x9b8>
 801ae18:	ba1b      	rev	r3, r3
 801ae1a:	4f13      	ldr	r7, [pc, #76]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
	out_data >>= 8;
 801ae1c:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_active[i] = GetLongNumber();
 801ae20:	f8c8 3190 	str.w	r3, [r8, #400]	; 0x190
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801ae24:	465b      	mov	r3, fp
 801ae26:	2204      	movs	r2, #4
 801ae28:	4649      	mov	r1, r9
 801ae2a:	4638      	mov	r0, r7
 801ae2c:	f7f0 fb16 	bl	800b45c <f_read>
 801ae30:	2800      	cmp	r0, #0
 801ae32:	d1f7      	bne.n	801ae24 <DecodeRekordboxFiles+0x978>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801ae34:	f8df 9034 	ldr.w	r9, [pc, #52]	; 801ae6c <DecodeRekordboxFiles+0x9c0>
 801ae38:	4f0b      	ldr	r7, [pc, #44]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801ae3a:	6030      	str	r0, [r6, #0]
 801ae3c:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801ae3e:	465b      	mov	r3, fp
 801ae40:	2204      	movs	r2, #4
 801ae42:	4649      	mov	r1, r9
 801ae44:	4638      	mov	r0, r7
 801ae46:	f7f0 fb09 	bl	800b45c <f_read>
 801ae4a:	2800      	cmp	r0, #0
 801ae4c:	d1f7      	bne.n	801ae3e <DecodeRekordboxFiles+0x992>
		out_data |= tag[i];
 801ae4e:	6833      	ldr	r3, [r6, #0]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 801ae50:	4f05      	ldr	r7, [pc, #20]	; (801ae68 <DecodeRekordboxFiles+0x9bc>)
 801ae52:	ba1b      	rev	r3, r3
 801ae54:	9501      	str	r5, [sp, #4]
	out_data >>= 8;
 801ae56:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_type[i] = GetLongNumber();
 801ae5a:	f8c8 3320 	str.w	r3, [r8, #800]	; 0x320
 801ae5e:	e01d      	b.n	801ae9c <DecodeRekordboxFiles+0x9f0>
 801ae60:	08024efc 	.word	0x08024efc
 801ae64:	20000b48 	.word	0x20000b48
 801ae68:	20001b58 	.word	0x20001b58
 801ae6c:	200185e0 	.word	0x200185e0
 801ae70:	200169c8 	.word	0x200169c8
 801ae74:	2001570a 	.word	0x2001570a
 801ae78:	20017208 	.word	0x20017208
 801ae7c:	08024f04 	.word	0x08024f04
 801ae80:	2000edf8 	.word	0x2000edf8
 801ae84:	08024ee4 	.word	0x08024ee4
 801ae88:	3e19999a 	.word	0x3e19999a
 801ae8c:	08024eec 	.word	0x08024eec
 801ae90:	2000e94c 	.word	0x2000e94c
 801ae94:	200185e1 	.word	0x200185e1
 801ae98:	20017da0 	.word	0x20017da0
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 801ae9c:	465b      	mov	r3, fp
 801ae9e:	2201      	movs	r2, #1
 801aea0:	4629      	mov	r1, r5
 801aea2:	4638      	mov	r0, r7
 801aea4:	f7f0 fada 	bl	800b45c <f_read>
 801aea8:	2800      	cmp	r0, #0
 801aeaa:	d1f7      	bne.n	801ae9c <DecodeRekordboxFiles+0x9f0>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 801aeac:	f8df 9334 	ldr.w	r9, [pc, #820]	; 801b1e4 <DecodeRekordboxFiles+0xd38>
 801aeb0:	4fca      	ldr	r7, [pc, #808]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
 801aeb2:	465b      	mov	r3, fp
 801aeb4:	2203      	movs	r2, #3
 801aeb6:	4649      	mov	r1, r9
 801aeb8:	4638      	mov	r0, r7
 801aeba:	f7f0 facf 	bl	800b45c <f_read>
 801aebe:	2800      	cmp	r0, #0
 801aec0:	d1f7      	bne.n	801aeb2 <DecodeRekordboxFiles+0xa06>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801aec2:	f8df 9324 	ldr.w	r9, [pc, #804]	; 801b1e8 <DecodeRekordboxFiles+0xd3c>
 801aec6:	4fc5      	ldr	r7, [pc, #788]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801aec8:	6030      	str	r0, [r6, #0]
 801aeca:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801aecc:	465b      	mov	r3, fp
 801aece:	2204      	movs	r2, #4
 801aed0:	4649      	mov	r1, r9
 801aed2:	4638      	mov	r0, r7
 801aed4:	f7f0 fac2 	bl	800b45c <f_read>
 801aed8:	2800      	cmp	r0, #0
 801aeda:	d1f7      	bne.n	801aecc <DecodeRekordboxFiles+0xa20>
		out_data |= tag[i];
 801aedc:	6833      	ldr	r3, [r6, #0]
 801aede:	3501      	adds	r5, #1
 801aee0:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801aee2:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801aee6:	ee07 3a90 	vmov	s15, r3
 801aeea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aeee:	ee67 7a88 	vmul.f32	s15, s15, s16
 801aef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aef6:	ee17 3a90 	vmov	r3, s15
 801aefa:	f8c8 34b0 	str.w	r3, [r8, #1200]	; 0x4b0
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801aefe:	9b01      	ldr	r3, [sp, #4]
 801af00:	781b      	ldrb	r3, [r3, #0]
 801af02:	2b02      	cmp	r3, #2
 801af04:	f000 8215 	beq.w	801b332 <DecodeRekordboxFiles+0xe86>
		for(i = 1; i < rekordbox.cues; i++) {
 801af08:	9b00      	ldr	r3, [sp, #0]
 801af0a:	f10a 0a01 	add.w	sl, sl, #1
 801af0e:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
 801af12:	4553      	cmp	r3, sl
 801af14:	f63f af4c 	bhi.w	801adb0 <DecodeRekordboxFiles+0x904>
		if(FindToken(cob_token) != 0) return 1;
 801af18:	48b1      	ldr	r0, [pc, #708]	; (801b1e0 <DecodeRekordboxFiles+0xd34>)
 801af1a:	f7ff fa81 	bl	801a420 <FindToken>
 801af1e:	2800      	cmp	r0, #0
 801af20:	f47f ad49 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801af24:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801b1f4 <DecodeRekordboxFiles+0xd48>
 801af28:	4fae      	ldr	r7, [pc, #696]	; (801b1e4 <DecodeRekordboxFiles+0xd38>)
 801af2a:	4dac      	ldr	r5, [pc, #688]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
 801af2c:	4643      	mov	r3, r8
 801af2e:	220c      	movs	r2, #12
 801af30:	4639      	mov	r1, r7
 801af32:	4628      	mov	r0, r5
 801af34:	f7f0 fa92 	bl	800b45c <f_read>
 801af38:	2800      	cmp	r0, #0
 801af3a:	d1f7      	bne.n	801af2c <DecodeRekordboxFiles+0xa80>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801af3c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 801b1f4 <DecodeRekordboxFiles+0xd48>
 801af40:	4fa9      	ldr	r7, [pc, #676]	; (801b1e8 <DecodeRekordboxFiles+0xd3c>)
 801af42:	4da6      	ldr	r5, [pc, #664]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801af44:	6030      	str	r0, [r6, #0]
 801af46:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801af48:	4643      	mov	r3, r8
 801af4a:	2204      	movs	r2, #4
 801af4c:	4639      	mov	r1, r7
 801af4e:	4628      	mov	r0, r5
 801af50:	f7f0 fa84 	bl	800b45c <f_read>
 801af54:	2800      	cmp	r0, #0
 801af56:	d1f7      	bne.n	801af48 <DecodeRekordboxFiles+0xa9c>
		out_data |= tag[i];
 801af58:	7833      	ldrb	r3, [r6, #0]
		for(k = i; k < rekordbox.cues; k++) {
 801af5a:	4657      	mov	r7, sl
		out_data |= tag[i];
 801af5c:	7872      	ldrb	r2, [r6, #1]
		k = i;
 801af5e:	fa5f fa8a 	uxtb.w	sl, sl
		rekordbox.cues += GetLongNumber();
 801af62:	9900      	ldr	r1, [sp, #0]
		out_data |= tag[i];
 801af64:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801af68:	78b3      	ldrb	r3, [r6, #2]
 801af6a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801af6e:	78f3      	ldrb	r3, [r6, #3]
 801af70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		rekordbox.cues += GetLongNumber();
 801af74:	f8d1 2b94 	ldr.w	r2, [r1, #2964]	; 0xb94
	out_data >>= 8;
 801af78:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.cues += GetLongNumber();
 801af7c:	4413      	add	r3, r2
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801af7e:	2b64      	cmp	r3, #100	; 0x64
 801af80:	bfa8      	it	ge
 801af82:	2364      	movge	r3, #100	; 0x64
		for(k = i; k < rekordbox.cues; k++) {
 801af84:	42bb      	cmp	r3, r7
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801af86:	f8c1 3b94 	str.w	r3, [r1, #2964]	; 0xb94
		for(k = i; k < rekordbox.cues; k++) {
 801af8a:	f340 80ab 	ble.w	801b0e4 <DecodeRekordboxFiles+0xc38>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801af8e:	ed9f 8a97 	vldr	s16, [pc, #604]	; 801b1ec <DecodeRekordboxFiles+0xd40>
			if(FindToken(cue_token) != 0) return 1;
 801af92:	f8df 8264 	ldr.w	r8, [pc, #612]	; 801b1f8 <DecodeRekordboxFiles+0xd4c>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801af96:	f8df 925c 	ldr.w	r9, [pc, #604]	; 801b1f4 <DecodeRekordboxFiles+0xd48>
			if(FindToken(cue_token) != 0) return 1;
 801af9a:	4640      	mov	r0, r8
 801af9c:	f7ff fa40 	bl	801a420 <FindToken>
 801afa0:	2800      	cmp	r0, #0
 801afa2:	f47f ad08 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801afa6:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801b1e4 <DecodeRekordboxFiles+0xd38>
 801afaa:	4d8c      	ldr	r5, [pc, #560]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
 801afac:	464b      	mov	r3, r9
 801afae:	2208      	movs	r2, #8
 801afb0:	4659      	mov	r1, fp
 801afb2:	4628      	mov	r0, r5
 801afb4:	f7f0 fa52 	bl	800b45c <f_read>
 801afb8:	2800      	cmp	r0, #0
 801afba:	d1f7      	bne.n	801afac <DecodeRekordboxFiles+0xb00>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801afbc:	f8df b228 	ldr.w	fp, [pc, #552]	; 801b1e8 <DecodeRekordboxFiles+0xd3c>
 801afc0:	4d86      	ldr	r5, [pc, #536]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801afc2:	6030      	str	r0, [r6, #0]
 801afc4:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801afc6:	464b      	mov	r3, r9
 801afc8:	2204      	movs	r2, #4
 801afca:	4659      	mov	r1, fp
 801afcc:	4628      	mov	r0, r5
 801afce:	f7f0 fa45 	bl	800b45c <f_read>
 801afd2:	2800      	cmp	r0, #0
 801afd4:	d1f7      	bne.n	801afc6 <DecodeRekordboxFiles+0xb1a>
		out_data |= tag[i];
 801afd6:	6833      	ldr	r3, [r6, #0]
			rekordbox.cue_number[k] = GetLongNumber();
 801afd8:	f607 22e6 	addw	r2, r7, #2790	; 0xae6
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801afdc:	f8df b208 	ldr.w	fp, [pc, #520]	; 801b1e8 <DecodeRekordboxFiles+0xd3c>
 801afe0:	ba1b      	rev	r3, r3
 801afe2:	4d7e      	ldr	r5, [pc, #504]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801afe4:	7130      	strb	r0, [r6, #4]
	out_data >>= 8;
 801afe6:	f343 0317 	sbfx	r3, r3, #0, #24
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801afea:	6030      	str	r0, [r6, #0]
			rekordbox.cue_number[k] = GetLongNumber();
 801afec:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801aff0:	464b      	mov	r3, r9
 801aff2:	2204      	movs	r2, #4
 801aff4:	4659      	mov	r1, fp
 801aff6:	4628      	mov	r0, r5
 801aff8:	f7f0 fa30 	bl	800b45c <f_read>
 801affc:	2800      	cmp	r0, #0
 801affe:	d1f7      	bne.n	801aff0 <DecodeRekordboxFiles+0xb44>
		out_data |= tag[i];
 801b000:	6833      	ldr	r3, [r6, #0]
			rekordbox.cue_active[k] = GetLongNumber();
 801b002:	f607 324a 	addw	r2, r7, #2890	; 0xb4a
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801b006:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 801b1e4 <DecodeRekordboxFiles+0xd38>
 801b00a:	ba1b      	rev	r3, r3
 801b00c:	4d73      	ldr	r5, [pc, #460]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
	out_data >>= 8;
 801b00e:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_active[k] = GetLongNumber();
 801b012:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801b016:	464b      	mov	r3, r9
 801b018:	2204      	movs	r2, #4
 801b01a:	4659      	mov	r1, fp
 801b01c:	4628      	mov	r0, r5
 801b01e:	f7f0 fa1d 	bl	800b45c <f_read>
 801b022:	2800      	cmp	r0, #0
 801b024:	d1f7      	bne.n	801b016 <DecodeRekordboxFiles+0xb6a>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b026:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 801b1e8 <DecodeRekordboxFiles+0xd3c>
 801b02a:	4d6c      	ldr	r5, [pc, #432]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b02c:	6030      	str	r0, [r6, #0]
 801b02e:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b030:	464b      	mov	r3, r9
 801b032:	2204      	movs	r2, #4
 801b034:	4659      	mov	r1, fp
 801b036:	4628      	mov	r0, r5
 801b038:	f7f0 fa10 	bl	800b45c <f_read>
 801b03c:	2800      	cmp	r0, #0
 801b03e:	d1f7      	bne.n	801b030 <DecodeRekordboxFiles+0xb84>
		out_data |= tag[i];
 801b040:	6833      	ldr	r3, [r6, #0]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801b042:	f243 3168 	movw	r1, #13160	; 0x3368
			rekordbox.cue_type[k] = GetLongNumber();
 801b046:	f607 32ae 	addw	r2, r7, #2990	; 0xbae
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801b04a:	4d64      	ldr	r5, [pc, #400]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
 801b04c:	ba1b      	rev	r3, r3
 801b04e:	4439      	add	r1, r7
	out_data >>= 8;
 801b050:	f343 0317 	sbfx	r3, r3, #0, #24
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801b054:	eb04 0b01 	add.w	fp, r4, r1
			rekordbox.cue_type[k] = GetLongNumber();
 801b058:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801b05c:	464b      	mov	r3, r9
 801b05e:	2201      	movs	r2, #1
 801b060:	4659      	mov	r1, fp
 801b062:	4628      	mov	r0, r5
 801b064:	f7f0 f9fa 	bl	800b45c <f_read>
 801b068:	2800      	cmp	r0, #0
 801b06a:	d1f7      	bne.n	801b05c <DecodeRekordboxFiles+0xbb0>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 801b06c:	f8df b174 	ldr.w	fp, [pc, #372]	; 801b1e4 <DecodeRekordboxFiles+0xd38>
 801b070:	4d5a      	ldr	r5, [pc, #360]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
 801b072:	464b      	mov	r3, r9
 801b074:	2203      	movs	r2, #3
 801b076:	4659      	mov	r1, fp
 801b078:	4628      	mov	r0, r5
 801b07a:	f7f0 f9ef 	bl	800b45c <f_read>
 801b07e:	2800      	cmp	r0, #0
 801b080:	d1f7      	bne.n	801b072 <DecodeRekordboxFiles+0xbc6>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b082:	f8df b164 	ldr.w	fp, [pc, #356]	; 801b1e8 <DecodeRekordboxFiles+0xd3c>
 801b086:	4d55      	ldr	r5, [pc, #340]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b088:	6030      	str	r0, [r6, #0]
 801b08a:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b08c:	464b      	mov	r3, r9
 801b08e:	2204      	movs	r2, #4
 801b090:	4659      	mov	r1, fp
 801b092:	4628      	mov	r0, r5
 801b094:	f7f0 f9e2 	bl	800b45c <f_read>
 801b098:	2800      	cmp	r0, #0
 801b09a:	d1f7      	bne.n	801b08c <DecodeRekordboxFiles+0xbe0>
		out_data |= tag[i];
 801b09c:	6833      	ldr	r3, [r6, #0]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b09e:	f243 3268 	movw	r2, #13160	; 0x3368
 801b0a2:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801b0a4:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b0a8:	ee07 3a90 	vmov	s15, r3
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b0ac:	19e3      	adds	r3, r4, r7
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b0ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b0b2:	5c9b      	ldrb	r3, [r3, r2]
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b0b4:	f607 4212 	addw	r2, r7, #3090	; 0xc12
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b0b8:	2b02      	cmp	r3, #2
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b0ba:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b0be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b0c2:	ee17 1a90 	vmov	r1, s15
 801b0c6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b0ca:	f000 8358 	beq.w	801b77e <DecodeRekordboxFiles+0x12d2>
		for(k = i; k < rekordbox.cues; k++) {
 801b0ce:	f10a 0a01 	add.w	sl, sl, #1
 801b0d2:	9b00      	ldr	r3, [sp, #0]
 801b0d4:	fa5f fa8a 	uxtb.w	sl, sl
 801b0d8:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
 801b0dc:	459a      	cmp	sl, r3
 801b0de:	4657      	mov	r7, sl
 801b0e0:	f6ff af5b 	blt.w	801af9a <DecodeRekordboxFiles+0xaee>
		f_close(&MyFile);
 801b0e4:	483d      	ldr	r0, [pc, #244]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
 801b0e6:	f7f0 facd 	bl	800b684 <f_close>
 801b0ea:	f7ff ba1e 	b.w	801a52a <DecodeRekordboxFiles+0x7e>
		if(FindToken(path_token) != 0) return 1;
 801b0ee:	4840      	ldr	r0, [pc, #256]	; (801b1f0 <DecodeRekordboxFiles+0xd44>)
 801b0f0:	f7ff f996 	bl	801a420 <FindToken>
 801b0f4:	2800      	cmp	r0, #0
 801b0f6:	f47f ac5e 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801b0fa:	4f3e      	ldr	r7, [pc, #248]	; (801b1f4 <DecodeRekordboxFiles+0xd48>)
 801b0fc:	4e39      	ldr	r6, [pc, #228]	; (801b1e4 <DecodeRekordboxFiles+0xd38>)
 801b0fe:	4d37      	ldr	r5, [pc, #220]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
 801b100:	463b      	mov	r3, r7
 801b102:	2208      	movs	r2, #8
 801b104:	4631      	mov	r1, r6
 801b106:	4628      	mov	r0, r5
 801b108:	f7f0 f9a8 	bl	800b45c <f_read>
 801b10c:	2800      	cmp	r0, #0
 801b10e:	d1f7      	bne.n	801b100 <DecodeRekordboxFiles+0xc54>
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b110:	4e35      	ldr	r6, [pc, #212]	; (801b1e8 <DecodeRekordboxFiles+0xd3c>)
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b112:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 801b1f4 <DecodeRekordboxFiles+0xd48>
 801b116:	4637      	mov	r7, r6
 801b118:	4d30      	ldr	r5, [pc, #192]	; (801b1dc <DecodeRekordboxFiles+0xd30>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b11a:	6030      	str	r0, [r6, #0]
 801b11c:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b11e:	4643      	mov	r3, r8
 801b120:	2204      	movs	r2, #4
 801b122:	4639      	mov	r1, r7
 801b124:	4628      	mov	r0, r5
 801b126:	f7f0 f999 	bl	800b45c <f_read>
 801b12a:	2800      	cmp	r0, #0
 801b12c:	d1f7      	bne.n	801b11e <DecodeRekordboxFiles+0xc72>
		out_data |= tag[i];
 801b12e:	7873      	ldrb	r3, [r6, #1]
 801b130:	7837      	ldrb	r7, [r6, #0]
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 801b132:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 801b1f4 <DecodeRekordboxFiles+0xd48>
		out_data |= tag[i];
 801b136:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
 801b13a:	78b3      	ldrb	r3, [r6, #2]
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 801b13c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801b1dc <DecodeRekordboxFiles+0xd30>
		out_data |= tag[i];
 801b140:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 801b144:	78f7      	ldrb	r7, [r6, #3]
 801b146:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	out_data >>= 8;
 801b14a:	f347 0717 	sbfx	r7, r7, #0, #24
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 801b14e:	464b      	mov	r3, r9
 801b150:	463a      	mov	r2, r7
 801b152:	a903      	add	r1, sp, #12
 801b154:	4640      	mov	r0, r8
 801b156:	f7f0 f981 	bl	800b45c <f_read>
 801b15a:	2800      	cmp	r0, #0
 801b15c:	d1f7      	bne.n	801b14e <DecodeRekordboxFiles+0xca2>
		while(i < data_size) {
 801b15e:	4605      	mov	r5, r0
 801b160:	2f00      	cmp	r7, #0
 801b162:	f43f aad6 	beq.w	801a712 <DecodeRekordboxFiles+0x266>
 801b166:	f107 39ff 	add.w	r9, r7, #4294967295
 801b16a:	f10d 030d 	add.w	r3, sp, #13
 801b16e:	f10d 0b0c 	add.w	fp, sp, #12
 801b172:	eb03 0a59 	add.w	sl, r3, r9, lsr #1
 801b176:	46d8      	mov	r8, fp
 801b178:	ea4f 0359 	mov.w	r3, r9, lsr #1
 801b17c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 801b1fc <DecodeRekordboxFiles+0xd50>
 801b180:	9300      	str	r3, [sp, #0]
			WCHAR c = filename[i];
 801b182:	f898 3000 	ldrb.w	r3, [r8]
			filename[k] = ff_convert(c, 0);
 801b186:	2100      	movs	r1, #0
			c |= filename[i];
 801b188:	f898 0001 	ldrb.w	r0, [r8, #1]
		while(i < data_size) {
 801b18c:	f108 0802 	add.w	r8, r8, #2
			c |= filename[i];
 801b190:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			rekordbox.filename[k] = c;
 801b194:	f849 0b04 	str.w	r0, [r9], #4
			filename[k] = ff_convert(c, 0);
 801b198:	f7f0 fdb0 	bl	800bcfc <ff_convert>
 801b19c:	f80b 0b01 	strb.w	r0, [fp], #1
		while(i < data_size) {
 801b1a0:	45d3      	cmp	fp, sl
 801b1a2:	d1ee      	bne.n	801b182 <DecodeRekordboxFiles+0xcd6>
			k++;
 801b1a4:	9800      	ldr	r0, [sp, #0]
 801b1a6:	3001      	adds	r0, #1
		for(i = k; i < data_size; i++) filename[i] = 0;
 801b1a8:	b2c0      	uxtb	r0, r0
 801b1aa:	42b8      	cmp	r0, r7
 801b1ac:	d205      	bcs.n	801b1ba <DecodeRekordboxFiles+0xd0e>
 801b1ae:	ab03      	add	r3, sp, #12
 801b1b0:	1a3a      	subs	r2, r7, r0
 801b1b2:	2100      	movs	r1, #0
 801b1b4:	4418      	add	r0, r3
 801b1b6:	f003 ffcd 	bl	801f154 <memset>
 801b1ba:	ab03      	add	r3, sp, #12
 801b1bc:	1c7a      	adds	r2, r7, #1
 801b1be:	441a      	add	r2, r3
		while(i < data_size) {
 801b1c0:	463b      	mov	r3, r7
 801b1c2:	e002      	b.n	801b1ca <DecodeRekordboxFiles+0xd1e>
		while((i > 0) && (filename[i] != '.')) i--;
 801b1c4:	3b01      	subs	r3, #1
 801b1c6:	f43f aaa4 	beq.w	801a712 <DecodeRekordboxFiles+0x266>
 801b1ca:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801b1ce:	292e      	cmp	r1, #46	; 0x2e
 801b1d0:	d1f8      	bne.n	801b1c4 <DecodeRekordboxFiles+0xd18>
 801b1d2:	f7ff ba9f 	b.w	801a714 <DecodeRekordboxFiles+0x268>
		while(i < data_size) {
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	e465      	b.n	801aaa6 <DecodeRekordboxFiles+0x5fa>
 801b1da:	bf00      	nop
 801b1dc:	20001b58 	.word	0x20001b58
 801b1e0:	08024ee4 	.word	0x08024ee4
 801b1e4:	20000b48 	.word	0x20000b48
 801b1e8:	200185e0 	.word	0x200185e0
 801b1ec:	3e19999a 	.word	0x3e19999a
 801b1f0:	08024ef4 	.word	0x08024ef4
 801b1f4:	2000e94c 	.word	0x2000e94c
 801b1f8:	08024eec 	.word	0x08024eec
 801b1fc:	20015208 	.word	0x20015208
		while(k < 5)
 801b200:	2a04      	cmp	r2, #4
 801b202:	f67f ac54 	bls.w	801aaae <DecodeRekordboxFiles+0x602>
 801b206:	e460      	b.n	801aaca <DecodeRekordboxFiles+0x61e>
		while(k < 5)
 801b208:	2a04      	cmp	r2, #4
 801b20a:	f67f aa87 	bls.w	801a71c <DecodeRekordboxFiles+0x270>
 801b20e:	f7ff ba93 	b.w	801a738 <DecodeRekordboxFiles+0x28c>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 801b212:	4a5a      	ldr	r2, [pc, #360]	; (801b37c <DecodeRekordboxFiles+0xed0>)
 801b214:	495a      	ldr	r1, [pc, #360]	; (801b380 <DecodeRekordboxFiles+0xed4>)
 801b216:	7812      	ldrb	r2, [r2, #0]
 801b218:	fba1 1202 	umull	r1, r2, r1, r2
 801b21c:	f003 011f 	and.w	r1, r3, #31
 801b220:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 801b224:	f67f aa6a 	bls.w	801a6fc <DecodeRekordboxFiles+0x250>
 801b228:	09db      	lsrs	r3, r3, #7
 801b22a:	f47f aa67 	bne.w	801a6fc <DecodeRekordboxFiles+0x250>
					rekordbox.autocue = 2;
 801b22e:	2302      	movs	r3, #2
					rekordbox.cue_start_position[0] = i;
 801b230:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
					rekordbox.autocue = 2;
 801b234:	f885 33cc 	strb.w	r3, [r5, #972]	; 0x3cc
					rekordbox.cue_start_position[0] = i;
 801b238:	f7ff ba60 	b.w	801a6fc <DecodeRekordboxFiles+0x250>
		if(FindToken(wv3_token) != 0) return 1;
 801b23c:	4851      	ldr	r0, [pc, #324]	; (801b384 <DecodeRekordboxFiles+0xed8>)
 801b23e:	f7ff f8ef 	bl	801a420 <FindToken>
 801b242:	2800      	cmp	r0, #0
 801b244:	f47f abb7 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 801b248:	4f4f      	ldr	r7, [pc, #316]	; (801b388 <DecodeRekordboxFiles+0xedc>)
 801b24a:	4e50      	ldr	r6, [pc, #320]	; (801b38c <DecodeRekordboxFiles+0xee0>)
 801b24c:	4d50      	ldr	r5, [pc, #320]	; (801b390 <DecodeRekordboxFiles+0xee4>)
 801b24e:	463b      	mov	r3, r7
 801b250:	220c      	movs	r2, #12
 801b252:	4631      	mov	r1, r6
 801b254:	4628      	mov	r0, r5
 801b256:	f7f0 f901 	bl	800b45c <f_read>
 801b25a:	2800      	cmp	r0, #0
 801b25c:	d1f7      	bne.n	801b24e <DecodeRekordboxFiles+0xda2>
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b25e:	4e4d      	ldr	r6, [pc, #308]	; (801b394 <DecodeRekordboxFiles+0xee8>)
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b260:	f8df 8124 	ldr.w	r8, [pc, #292]	; 801b388 <DecodeRekordboxFiles+0xedc>
 801b264:	4637      	mov	r7, r6
 801b266:	4d4a      	ldr	r5, [pc, #296]	; (801b390 <DecodeRekordboxFiles+0xee4>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b268:	6030      	str	r0, [r6, #0]
 801b26a:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b26c:	4643      	mov	r3, r8
 801b26e:	2204      	movs	r2, #4
 801b270:	4639      	mov	r1, r7
 801b272:	4628      	mov	r0, r5
 801b274:	f7f0 f8f2 	bl	800b45c <f_read>
 801b278:	2800      	cmp	r0, #0
 801b27a:	d1f7      	bne.n	801b26c <DecodeRekordboxFiles+0xdc0>
		out_data |= tag[i];
 801b27c:	7831      	ldrb	r1, [r6, #0]
 801b27e:	7872      	ldrb	r2, [r6, #1]
 801b280:	78b3      	ldrb	r3, [r6, #2]
 801b282:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		rekordbox.spectrum_size=((rekordbox.spectrum_size>MAX_WAVESIZE)?MAX_WAVESIZE:rekordbox.spectrum_size);
 801b286:	4944      	ldr	r1, [pc, #272]	; (801b398 <DecodeRekordboxFiles+0xeec>)
 801b288:	4844      	ldr	r0, [pc, #272]	; (801b39c <DecodeRekordboxFiles+0xef0>)
		out_data |= tag[i];
 801b28a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801b28e:	78f3      	ldrb	r3, [r6, #3]
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801b290:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801b388 <DecodeRekordboxFiles+0xedc>
		out_data |= tag[i];
 801b294:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801b298:	4f3c      	ldr	r7, [pc, #240]	; (801b38c <DecodeRekordboxFiles+0xee0>)
 801b29a:	4d3d      	ldr	r5, [pc, #244]	; (801b390 <DecodeRekordboxFiles+0xee4>)
	out_data >>= 8;
 801b29c:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.spectrum_size=((rekordbox.spectrum_size>MAX_WAVESIZE)?MAX_WAVESIZE:rekordbox.spectrum_size);
 801b2a0:	9000      	str	r0, [sp, #0]
 801b2a2:	428b      	cmp	r3, r1
 801b2a4:	bf28      	it	cs
 801b2a6:	460b      	movcs	r3, r1
 801b2a8:	f8c0 3a8c 	str.w	r3, [r0, #2700]	; 0xa8c
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801b2ac:	4643      	mov	r3, r8
 801b2ae:	2204      	movs	r2, #4
 801b2b0:	4639      	mov	r1, r7
 801b2b2:	4628      	mov	r0, r5
 801b2b4:	f7f0 f8d2 	bl	800b45c <f_read>
 801b2b8:	2800      	cmp	r0, #0
 801b2ba:	d1f7      	bne.n	801b2ac <DecodeRekordboxFiles+0xe00>
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801b2bc:	9b00      	ldr	r3, [sp, #0]
		rekordbox.cue_start_position[0] = 0;
 801b2be:	4d38      	ldr	r5, [pc, #224]	; (801b3a0 <DecodeRekordboxFiles+0xef4>)
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801b2c0:	f8d3 3a8c 	ldr.w	r3, [r3, #2700]	; 0xa8c
		rekordbox.cue_start_position[0] = 0;
 801b2c4:	64a8      	str	r0, [r5, #72]	; 0x48
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801b2c6:	b1e3      	cbz	r3, 801b302 <DecodeRekordboxFiles+0xe56>
 801b2c8:	4681      	mov	r9, r0
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 801b2ca:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801b388 <DecodeRekordboxFiles+0xedc>
 801b2ce:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801b394 <DecodeRekordboxFiles+0xee8>
 801b2d2:	4f2f      	ldr	r7, [pc, #188]	; (801b390 <DecodeRekordboxFiles+0xee4>)
 801b2d4:	4653      	mov	r3, sl
 801b2d6:	2201      	movs	r2, #1
 801b2d8:	4641      	mov	r1, r8
 801b2da:	4638      	mov	r0, r7
 801b2dc:	f7f0 f8be 	bl	800b45c <f_read>
 801b2e0:	2800      	cmp	r0, #0
 801b2e2:	d1f7      	bne.n	801b2d4 <DecodeRekordboxFiles+0xe28>
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801b2e4:	4a2f      	ldr	r2, [pc, #188]	; (801b3a4 <DecodeRekordboxFiles+0xef8>)
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 801b2e6:	7833      	ldrb	r3, [r6, #0]
 801b2e8:	f809 3002 	strb.w	r3, [r9, r2]
			if(rekordbox.autocue == 1) {
 801b2ec:	f895 23cc 	ldrb.w	r2, [r5, #972]	; 0x3cc
 801b2f0:	2a01      	cmp	r2, #1
 801b2f2:	d00c      	beq.n	801b30e <DecodeRekordboxFiles+0xe62>
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 801b2f4:	9b00      	ldr	r3, [sp, #0]
 801b2f6:	f109 0901 	add.w	r9, r9, #1
 801b2fa:	f8d3 3a8c 	ldr.w	r3, [r3, #2700]	; 0xa8c
 801b2fe:	454b      	cmp	r3, r9
 801b300:	d8e8      	bhi.n	801b2d4 <DecodeRekordboxFiles+0xe28>
		f_close(&MyFile);
 801b302:	4823      	ldr	r0, [pc, #140]	; (801b390 <DecodeRekordboxFiles+0xee4>)
 801b304:	f7f0 f9be 	bl	800b684 <f_close>
 801b308:	9b00      	ldr	r3, [sp, #0]
 801b30a:	f7ff b956 	b.w	801a5ba <DecodeRekordboxFiles+0x10e>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 801b30e:	4a1b      	ldr	r2, [pc, #108]	; (801b37c <DecodeRekordboxFiles+0xed0>)
 801b310:	491b      	ldr	r1, [pc, #108]	; (801b380 <DecodeRekordboxFiles+0xed4>)
 801b312:	7812      	ldrb	r2, [r2, #0]
 801b314:	fba1 1202 	umull	r1, r2, r1, r2
 801b318:	f003 011f 	and.w	r1, r3, #31
 801b31c:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 801b320:	d9e8      	bls.n	801b2f4 <DecodeRekordboxFiles+0xe48>
 801b322:	09db      	lsrs	r3, r3, #7
 801b324:	d1e6      	bne.n	801b2f4 <DecodeRekordboxFiles+0xe48>
					rekordbox.autocue = 2;
 801b326:	2302      	movs	r3, #2
					rekordbox.cue_start_position[0] = i;
 801b328:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
					rekordbox.autocue = 2;
 801b32c:	f885 33cc 	strb.w	r3, [r5, #972]	; 0x3cc
					rekordbox.cue_start_position[0] = i;
 801b330:	e7e0      	b.n	801b2f4 <DecodeRekordboxFiles+0xe48>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b332:	f8df 9060 	ldr.w	r9, [pc, #96]	; 801b394 <DecodeRekordboxFiles+0xee8>
 801b336:	4f16      	ldr	r7, [pc, #88]	; (801b390 <DecodeRekordboxFiles+0xee4>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b338:	6030      	str	r0, [r6, #0]
 801b33a:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b33c:	465b      	mov	r3, fp
 801b33e:	2204      	movs	r2, #4
 801b340:	4649      	mov	r1, r9
 801b342:	4638      	mov	r0, r7
 801b344:	f7f0 f88a 	bl	800b45c <f_read>
 801b348:	2800      	cmp	r0, #0
 801b34a:	d1f7      	bne.n	801b33c <DecodeRekordboxFiles+0xe90>
		out_data |= tag[i];
 801b34c:	6833      	ldr	r3, [r6, #0]
 801b34e:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801b350:	f343 0317 	sbfx	r3, r3, #0, #24
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801b354:	ee07 3a90 	vmov	s15, r3
 801b358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b35c:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b364:	ee17 3a90 	vmov	r3, s15
 801b368:	f8c8 3640 	str.w	r3, [r8, #1600]	; 0x640
 801b36c:	e5cc      	b.n	801af08 <DecodeRekordboxFiles+0xa5c>
 801b36e:	2301      	movs	r3, #1
 801b370:	f7ff bbe0 	b.w	801ab34 <DecodeRekordboxFiles+0x688>
 801b374:	2301      	movs	r3, #1
 801b376:	f7ff ba1b 	b.w	801a7b0 <DecodeRekordboxFiles+0x304>
 801b37a:	bf00      	nop
 801b37c:	20000054 	.word	0x20000054
 801b380:	cccccccd 	.word	0xcccccccd
 801b384:	08024f0c 	.word	0x08024f0c
 801b388:	2000e94c 	.word	0x2000e94c
 801b38c:	20000b48 	.word	0x20000b48
 801b390:	20001b58 	.word	0x20001b58
 801b394:	200185e0 	.word	0x200185e0
 801b398:	00030d40 	.word	0x00030d40
 801b39c:	20017208 	.word	0x20017208
 801b3a0:	20018208 	.word	0x20018208
 801b3a4:	c0100000 	.word	0xc0100000
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801b3a8:	f8df 8328 	ldr.w	r8, [pc, #808]	; 801b6d4 <DecodeRekordboxFiles+0x1228>
 801b3ac:	4fc3      	ldr	r7, [pc, #780]	; (801b6bc <DecodeRekordboxFiles+0x1210>)
 801b3ae:	4dc4      	ldr	r5, [pc, #784]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
 801b3b0:	4643      	mov	r3, r8
 801b3b2:	220c      	movs	r2, #12
 801b3b4:	4639      	mov	r1, r7
 801b3b6:	4628      	mov	r0, r5
 801b3b8:	f7f0 f850 	bl	800b45c <f_read>
 801b3bc:	2800      	cmp	r0, #0
 801b3be:	d1f7      	bne.n	801b3b0 <DecodeRekordboxFiles+0xf04>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b3c0:	f8df 8310 	ldr.w	r8, [pc, #784]	; 801b6d4 <DecodeRekordboxFiles+0x1228>
 801b3c4:	4fbf      	ldr	r7, [pc, #764]	; (801b6c4 <DecodeRekordboxFiles+0x1218>)
 801b3c6:	4dbe      	ldr	r5, [pc, #760]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b3c8:	6030      	str	r0, [r6, #0]
 801b3ca:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b3cc:	4643      	mov	r3, r8
 801b3ce:	2204      	movs	r2, #4
 801b3d0:	4639      	mov	r1, r7
 801b3d2:	4628      	mov	r0, r5
 801b3d4:	f7f0 f842 	bl	800b45c <f_read>
 801b3d8:	2800      	cmp	r0, #0
 801b3da:	d1f7      	bne.n	801b3cc <DecodeRekordboxFiles+0xf20>
		out_data |= tag[i];
 801b3dc:	7833      	ldrb	r3, [r6, #0]
 801b3de:	7872      	ldrb	r2, [r6, #1]
 801b3e0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801b3e4:	78b3      	ldrb	r3, [r6, #2]
 801b3e6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801b3ea:	78f3      	ldrb	r3, [r6, #3]
 801b3ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801b3f0:	9a00      	ldr	r2, [sp, #0]
	out_data >>= 8;
 801b3f2:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.cues = GetLongNumber() + 1;
 801b3f6:	3301      	adds	r3, #1
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801b3f8:	2b64      	cmp	r3, #100	; 0x64
 801b3fa:	bfa8      	it	ge
 801b3fc:	2364      	movge	r3, #100	; 0x64
		for(i = 1; i < rekordbox.cues; i++) {
 801b3fe:	2b01      	cmp	r3, #1
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801b400:	f8c2 3b94 	str.w	r3, [r2, #2964]	; 0xb94
		for(i = 1; i < rekordbox.cues; i++) {
 801b404:	f240 8210 	bls.w	801b828 <DecodeRekordboxFiles+0x137c>
 801b408:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801b6d8 <DecodeRekordboxFiles+0x122c>
 801b40c:	f04f 0a01 	mov.w	sl, #1
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801b410:	ed9f 8aad 	vldr	s16, [pc, #692]	; 801b6c8 <DecodeRekordboxFiles+0x121c>
 801b414:	f208 75d1 	addw	r5, r8, #2001	; 0x7d1
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801b418:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 801b6d4 <DecodeRekordboxFiles+0x1228>
			if(FindToken(cue_token) != 0) return 1;
 801b41c:	48ab      	ldr	r0, [pc, #684]	; (801b6cc <DecodeRekordboxFiles+0x1220>)
 801b41e:	f7fe ffff 	bl	801a420 <FindToken>
 801b422:	2800      	cmp	r0, #0
 801b424:	f47f aac7 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801b428:	f8df 9290 	ldr.w	r9, [pc, #656]	; 801b6bc <DecodeRekordboxFiles+0x1210>
 801b42c:	4fa4      	ldr	r7, [pc, #656]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
 801b42e:	465b      	mov	r3, fp
 801b430:	2208      	movs	r2, #8
 801b432:	4649      	mov	r1, r9
 801b434:	4638      	mov	r0, r7
 801b436:	f7f0 f811 	bl	800b45c <f_read>
 801b43a:	2800      	cmp	r0, #0
 801b43c:	d1f7      	bne.n	801b42e <DecodeRekordboxFiles+0xf82>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b43e:	f8df 9284 	ldr.w	r9, [pc, #644]	; 801b6c4 <DecodeRekordboxFiles+0x1218>
 801b442:	4f9f      	ldr	r7, [pc, #636]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b444:	6030      	str	r0, [r6, #0]
 801b446:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b448:	465b      	mov	r3, fp
 801b44a:	2204      	movs	r2, #4
 801b44c:	4649      	mov	r1, r9
 801b44e:	4638      	mov	r0, r7
 801b450:	f7f0 f804 	bl	800b45c <f_read>
 801b454:	2800      	cmp	r0, #0
 801b456:	d1f7      	bne.n	801b448 <DecodeRekordboxFiles+0xf9c>
		out_data |= tag[i];
 801b458:	6833      	ldr	r3, [r6, #0]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b45a:	f8df 9268 	ldr.w	r9, [pc, #616]	; 801b6c4 <DecodeRekordboxFiles+0x1218>
 801b45e:	ba1b      	rev	r3, r3
 801b460:	4f97      	ldr	r7, [pc, #604]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b462:	7130      	strb	r0, [r6, #4]
	out_data >>= 8;
 801b464:	f343 0317 	sbfx	r3, r3, #0, #24
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b468:	6030      	str	r0, [r6, #0]
			rekordbox.cue_number[i] = GetLongNumber();
 801b46a:	f848 3f04 	str.w	r3, [r8, #4]!
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b46e:	465b      	mov	r3, fp
 801b470:	2204      	movs	r2, #4
 801b472:	4649      	mov	r1, r9
 801b474:	4638      	mov	r0, r7
 801b476:	f7ef fff1 	bl	800b45c <f_read>
 801b47a:	2800      	cmp	r0, #0
 801b47c:	d1f7      	bne.n	801b46e <DecodeRekordboxFiles+0xfc2>
		out_data |= tag[i];
 801b47e:	6833      	ldr	r3, [r6, #0]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801b480:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801b6bc <DecodeRekordboxFiles+0x1210>
 801b484:	ba1b      	rev	r3, r3
 801b486:	4f8e      	ldr	r7, [pc, #568]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	out_data >>= 8;
 801b488:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_active[i] = GetLongNumber();
 801b48c:	f8c8 3190 	str.w	r3, [r8, #400]	; 0x190
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801b490:	465b      	mov	r3, fp
 801b492:	2204      	movs	r2, #4
 801b494:	4649      	mov	r1, r9
 801b496:	4638      	mov	r0, r7
 801b498:	f7ef ffe0 	bl	800b45c <f_read>
 801b49c:	2800      	cmp	r0, #0
 801b49e:	d1f7      	bne.n	801b490 <DecodeRekordboxFiles+0xfe4>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b4a0:	f8df 9220 	ldr.w	r9, [pc, #544]	; 801b6c4 <DecodeRekordboxFiles+0x1218>
 801b4a4:	4f86      	ldr	r7, [pc, #536]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b4a6:	6030      	str	r0, [r6, #0]
 801b4a8:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b4aa:	465b      	mov	r3, fp
 801b4ac:	2204      	movs	r2, #4
 801b4ae:	4649      	mov	r1, r9
 801b4b0:	4638      	mov	r0, r7
 801b4b2:	f7ef ffd3 	bl	800b45c <f_read>
 801b4b6:	2800      	cmp	r0, #0
 801b4b8:	d1f7      	bne.n	801b4aa <DecodeRekordboxFiles+0xffe>
		out_data |= tag[i];
 801b4ba:	6833      	ldr	r3, [r6, #0]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 801b4bc:	4f80      	ldr	r7, [pc, #512]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
 801b4be:	ba1b      	rev	r3, r3
 801b4c0:	9501      	str	r5, [sp, #4]
	out_data >>= 8;
 801b4c2:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_type[i] = GetLongNumber();
 801b4c6:	f8c8 3320 	str.w	r3, [r8, #800]	; 0x320
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 801b4ca:	465b      	mov	r3, fp
 801b4cc:	2201      	movs	r2, #1
 801b4ce:	4629      	mov	r1, r5
 801b4d0:	4638      	mov	r0, r7
 801b4d2:	f7ef ffc3 	bl	800b45c <f_read>
 801b4d6:	2800      	cmp	r0, #0
 801b4d8:	d1f7      	bne.n	801b4ca <DecodeRekordboxFiles+0x101e>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 801b4da:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 801b6bc <DecodeRekordboxFiles+0x1210>
 801b4de:	4f78      	ldr	r7, [pc, #480]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
 801b4e0:	465b      	mov	r3, fp
 801b4e2:	2203      	movs	r2, #3
 801b4e4:	4649      	mov	r1, r9
 801b4e6:	4638      	mov	r0, r7
 801b4e8:	f7ef ffb8 	bl	800b45c <f_read>
 801b4ec:	2800      	cmp	r0, #0
 801b4ee:	d1f7      	bne.n	801b4e0 <DecodeRekordboxFiles+0x1034>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b4f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801b6c4 <DecodeRekordboxFiles+0x1218>
 801b4f4:	4f72      	ldr	r7, [pc, #456]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b4f6:	6030      	str	r0, [r6, #0]
 801b4f8:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b4fa:	465b      	mov	r3, fp
 801b4fc:	2204      	movs	r2, #4
 801b4fe:	4649      	mov	r1, r9
 801b500:	4638      	mov	r0, r7
 801b502:	f7ef ffab 	bl	800b45c <f_read>
 801b506:	2800      	cmp	r0, #0
 801b508:	d1f7      	bne.n	801b4fa <DecodeRekordboxFiles+0x104e>
		out_data |= tag[i];
 801b50a:	6833      	ldr	r3, [r6, #0]
 801b50c:	3501      	adds	r5, #1
 801b50e:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801b510:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801b514:	ee07 3a90 	vmov	s15, r3
 801b518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b51c:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b524:	ee17 3a90 	vmov	r3, s15
 801b528:	f8c8 34b0 	str.w	r3, [r8, #1200]	; 0x4b0
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801b52c:	9b01      	ldr	r3, [sp, #4]
 801b52e:	781b      	ldrb	r3, [r3, #0]
 801b530:	2b02      	cmp	r3, #2
 801b532:	f000 8103 	beq.w	801b73c <DecodeRekordboxFiles+0x1290>
		for(i = 1; i < rekordbox.cues; i++) {
 801b536:	9b00      	ldr	r3, [sp, #0]
 801b538:	f10a 0a01 	add.w	sl, sl, #1
 801b53c:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
 801b540:	4553      	cmp	r3, sl
 801b542:	f63f af6b 	bhi.w	801b41c <DecodeRekordboxFiles+0xf70>
		if(FindToken(cob_token) != 0) return 1;
 801b546:	4862      	ldr	r0, [pc, #392]	; (801b6d0 <DecodeRekordboxFiles+0x1224>)
 801b548:	f7fe ff6a 	bl	801a420 <FindToken>
 801b54c:	2800      	cmp	r0, #0
 801b54e:	f47f aa32 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 801b552:	f8df 8180 	ldr.w	r8, [pc, #384]	; 801b6d4 <DecodeRekordboxFiles+0x1228>
 801b556:	4f59      	ldr	r7, [pc, #356]	; (801b6bc <DecodeRekordboxFiles+0x1210>)
 801b558:	4d59      	ldr	r5, [pc, #356]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
 801b55a:	4643      	mov	r3, r8
 801b55c:	220c      	movs	r2, #12
 801b55e:	4639      	mov	r1, r7
 801b560:	4628      	mov	r0, r5
 801b562:	f7ef ff7b 	bl	800b45c <f_read>
 801b566:	2800      	cmp	r0, #0
 801b568:	d1f7      	bne.n	801b55a <DecodeRekordboxFiles+0x10ae>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b56a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 801b6d4 <DecodeRekordboxFiles+0x1228>
 801b56e:	4f55      	ldr	r7, [pc, #340]	; (801b6c4 <DecodeRekordboxFiles+0x1218>)
 801b570:	4d53      	ldr	r5, [pc, #332]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b572:	6030      	str	r0, [r6, #0]
 801b574:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b576:	4643      	mov	r3, r8
 801b578:	2204      	movs	r2, #4
 801b57a:	4639      	mov	r1, r7
 801b57c:	4628      	mov	r0, r5
 801b57e:	f7ef ff6d 	bl	800b45c <f_read>
 801b582:	2800      	cmp	r0, #0
 801b584:	d1f7      	bne.n	801b576 <DecodeRekordboxFiles+0x10ca>
		out_data |= tag[i];
 801b586:	7833      	ldrb	r3, [r6, #0]
		for(k = i; k < rekordbox.cues; k++) {
 801b588:	4655      	mov	r5, sl
		out_data |= tag[i];
 801b58a:	7872      	ldrb	r2, [r6, #1]
		k = i;
 801b58c:	fa5f fa8a 	uxtb.w	sl, sl
		rekordbox.cues += GetLongNumber();
 801b590:	9900      	ldr	r1, [sp, #0]
		out_data |= tag[i];
 801b592:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801b596:	78b3      	ldrb	r3, [r6, #2]
 801b598:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801b59c:	78f3      	ldrb	r3, [r6, #3]
 801b59e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		rekordbox.cues += GetLongNumber();
 801b5a2:	f8d1 2b94 	ldr.w	r2, [r1, #2964]	; 0xb94
	out_data >>= 8;
 801b5a6:	f343 0317 	sbfx	r3, r3, #0, #24
		rekordbox.cues += GetLongNumber();
 801b5aa:	4413      	add	r3, r2
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801b5ac:	2b64      	cmp	r3, #100	; 0x64
 801b5ae:	bfa8      	it	ge
 801b5b0:	2364      	movge	r3, #100	; 0x64
		for(k = i; k < rekordbox.cues; k++) {
 801b5b2:	42ab      	cmp	r3, r5
		rekordbox.cues=((rekordbox.cues>RBX_NUM_COB)?RBX_NUM_COB:rekordbox.cues);
 801b5b4:	f8c1 3b94 	str.w	r3, [r1, #2964]	; 0xb94
		for(k = i; k < rekordbox.cues; k++) {
 801b5b8:	f340 80bb 	ble.w	801b732 <DecodeRekordboxFiles+0x1286>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b5bc:	ed9f 8a42 	vldr	s16, [pc, #264]	; 801b6c8 <DecodeRekordboxFiles+0x121c>
			if(FindToken(cue_token) != 0) return 1;
 801b5c0:	f8df 8108 	ldr.w	r8, [pc, #264]	; 801b6cc <DecodeRekordboxFiles+0x1220>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801b5c4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801b6d4 <DecodeRekordboxFiles+0x1228>
			if(FindToken(cue_token) != 0) return 1;
 801b5c8:	4640      	mov	r0, r8
 801b5ca:	f7fe ff29 	bl	801a420 <FindToken>
 801b5ce:	2800      	cmp	r0, #0
 801b5d0:	f47f a9f1 	bne.w	801a9b6 <DecodeRekordboxFiles+0x50a>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801b5d4:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 801b6bc <DecodeRekordboxFiles+0x1210>
 801b5d8:	4f39      	ldr	r7, [pc, #228]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
 801b5da:	464b      	mov	r3, r9
 801b5dc:	2208      	movs	r2, #8
 801b5de:	4659      	mov	r1, fp
 801b5e0:	4638      	mov	r0, r7
 801b5e2:	f7ef ff3b 	bl	800b45c <f_read>
 801b5e6:	2800      	cmp	r0, #0
 801b5e8:	d1f7      	bne.n	801b5da <DecodeRekordboxFiles+0x112e>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b5ea:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801b6c4 <DecodeRekordboxFiles+0x1218>
 801b5ee:	4f34      	ldr	r7, [pc, #208]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b5f0:	6030      	str	r0, [r6, #0]
 801b5f2:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b5f4:	464b      	mov	r3, r9
 801b5f6:	2204      	movs	r2, #4
 801b5f8:	4659      	mov	r1, fp
 801b5fa:	4638      	mov	r0, r7
 801b5fc:	f7ef ff2e 	bl	800b45c <f_read>
 801b600:	2800      	cmp	r0, #0
 801b602:	d1f7      	bne.n	801b5f4 <DecodeRekordboxFiles+0x1148>
		out_data |= tag[i];
 801b604:	6833      	ldr	r3, [r6, #0]
			rekordbox.cue_number[k] = GetLongNumber();
 801b606:	f605 22e6 	addw	r2, r5, #2790	; 0xae6
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b60a:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 801b6c4 <DecodeRekordboxFiles+0x1218>
 801b60e:	ba1b      	rev	r3, r3
 801b610:	4f2b      	ldr	r7, [pc, #172]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b612:	7130      	strb	r0, [r6, #4]
	out_data >>= 8;
 801b614:	f343 0317 	sbfx	r3, r3, #0, #24
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b618:	6030      	str	r0, [r6, #0]
			rekordbox.cue_number[k] = GetLongNumber();
 801b61a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b61e:	464b      	mov	r3, r9
 801b620:	2204      	movs	r2, #4
 801b622:	4659      	mov	r1, fp
 801b624:	4638      	mov	r0, r7
 801b626:	f7ef ff19 	bl	800b45c <f_read>
 801b62a:	2800      	cmp	r0, #0
 801b62c:	d1f7      	bne.n	801b61e <DecodeRekordboxFiles+0x1172>
		out_data |= tag[i];
 801b62e:	6833      	ldr	r3, [r6, #0]
			rekordbox.cue_active[k] = GetLongNumber();
 801b630:	f605 324a 	addw	r2, r5, #2890	; 0xb4a
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801b634:	f8df b084 	ldr.w	fp, [pc, #132]	; 801b6bc <DecodeRekordboxFiles+0x1210>
 801b638:	ba1b      	rev	r3, r3
 801b63a:	4f21      	ldr	r7, [pc, #132]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	out_data >>= 8;
 801b63c:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_active[k] = GetLongNumber();
 801b640:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801b644:	464b      	mov	r3, r9
 801b646:	2204      	movs	r2, #4
 801b648:	4659      	mov	r1, fp
 801b64a:	4638      	mov	r0, r7
 801b64c:	f7ef ff06 	bl	800b45c <f_read>
 801b650:	2800      	cmp	r0, #0
 801b652:	d1f7      	bne.n	801b644 <DecodeRekordboxFiles+0x1198>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b654:	f8df b06c 	ldr.w	fp, [pc, #108]	; 801b6c4 <DecodeRekordboxFiles+0x1218>
 801b658:	4f19      	ldr	r7, [pc, #100]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b65a:	6030      	str	r0, [r6, #0]
 801b65c:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b65e:	464b      	mov	r3, r9
 801b660:	2204      	movs	r2, #4
 801b662:	4659      	mov	r1, fp
 801b664:	4638      	mov	r0, r7
 801b666:	f7ef fef9 	bl	800b45c <f_read>
 801b66a:	2800      	cmp	r0, #0
 801b66c:	d1f7      	bne.n	801b65e <DecodeRekordboxFiles+0x11b2>
		out_data |= tag[i];
 801b66e:	6833      	ldr	r3, [r6, #0]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801b670:	f243 3168 	movw	r1, #13160	; 0x3368
			rekordbox.cue_type[k] = GetLongNumber();
 801b674:	f605 32ae 	addw	r2, r5, #2990	; 0xbae
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801b678:	4f11      	ldr	r7, [pc, #68]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
 801b67a:	ba1b      	rev	r3, r3
 801b67c:	4429      	add	r1, r5
	out_data >>= 8;
 801b67e:	f343 0317 	sbfx	r3, r3, #0, #24
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801b682:	eb04 0b01 	add.w	fp, r4, r1
			rekordbox.cue_type[k] = GetLongNumber();
 801b686:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801b68a:	464b      	mov	r3, r9
 801b68c:	2201      	movs	r2, #1
 801b68e:	4659      	mov	r1, fp
 801b690:	4638      	mov	r0, r7
 801b692:	f7ef fee3 	bl	800b45c <f_read>
 801b696:	2800      	cmp	r0, #0
 801b698:	d1f7      	bne.n	801b68a <DecodeRekordboxFiles+0x11de>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 801b69a:	f8df b020 	ldr.w	fp, [pc, #32]	; 801b6bc <DecodeRekordboxFiles+0x1210>
 801b69e:	4f08      	ldr	r7, [pc, #32]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
 801b6a0:	464b      	mov	r3, r9
 801b6a2:	2203      	movs	r2, #3
 801b6a4:	4659      	mov	r1, fp
 801b6a6:	4638      	mov	r0, r7
 801b6a8:	f7ef fed8 	bl	800b45c <f_read>
 801b6ac:	2800      	cmp	r0, #0
 801b6ae:	d1f7      	bne.n	801b6a0 <DecodeRekordboxFiles+0x11f4>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b6b0:	f8df b010 	ldr.w	fp, [pc, #16]	; 801b6c4 <DecodeRekordboxFiles+0x1218>
 801b6b4:	4f02      	ldr	r7, [pc, #8]	; (801b6c0 <DecodeRekordboxFiles+0x1214>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b6b6:	6030      	str	r0, [r6, #0]
 801b6b8:	7130      	strb	r0, [r6, #4]
 801b6ba:	e00f      	b.n	801b6dc <DecodeRekordboxFiles+0x1230>
 801b6bc:	20000b48 	.word	0x20000b48
 801b6c0:	20001b58 	.word	0x20001b58
 801b6c4:	200185e0 	.word	0x200185e0
 801b6c8:	3e19999a 	.word	0x3e19999a
 801b6cc:	08024eec 	.word	0x08024eec
 801b6d0:	08024ee4 	.word	0x08024ee4
 801b6d4:	2000e94c 	.word	0x2000e94c
 801b6d8:	20017da0 	.word	0x20017da0
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b6dc:	464b      	mov	r3, r9
 801b6de:	2204      	movs	r2, #4
 801b6e0:	4659      	mov	r1, fp
 801b6e2:	4638      	mov	r0, r7
 801b6e4:	f7ef feba 	bl	800b45c <f_read>
 801b6e8:	2800      	cmp	r0, #0
 801b6ea:	d1f7      	bne.n	801b6dc <DecodeRekordboxFiles+0x1230>
		out_data |= tag[i];
 801b6ec:	6833      	ldr	r3, [r6, #0]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b6ee:	f243 3268 	movw	r2, #13160	; 0x3368
 801b6f2:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801b6f4:	f343 0317 	sbfx	r3, r3, #0, #24
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b6f8:	ee07 3a90 	vmov	s15, r3
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b6fc:	1963      	adds	r3, r4, r5
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b6fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b702:	5c9b      	ldrb	r3, [r3, r2]
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b704:	f605 4212 	addw	r2, r5, #3090	; 0xc12
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b708:	2b02      	cmp	r3, #2
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b70a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b70e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b712:	ee17 1a90 	vmov	r1, s15
 801b716:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b71a:	d059      	beq.n	801b7d0 <DecodeRekordboxFiles+0x1324>
		for(k = i; k < rekordbox.cues; k++) {
 801b71c:	f10a 0a01 	add.w	sl, sl, #1
 801b720:	9b00      	ldr	r3, [sp, #0]
 801b722:	fa5f fa8a 	uxtb.w	sl, sl
 801b726:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
 801b72a:	459a      	cmp	sl, r3
 801b72c:	4655      	mov	r5, sl
 801b72e:	f6ff af4b 	blt.w	801b5c8 <DecodeRekordboxFiles+0x111c>
		f_close(&MyFile);
 801b732:	4841      	ldr	r0, [pc, #260]	; (801b838 <DecodeRekordboxFiles+0x138c>)
 801b734:	f7ef ffa6 	bl	800b684 <f_close>
 801b738:	f7fe bf24 	b.w	801a584 <DecodeRekordboxFiles+0xd8>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b73c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 801b83c <DecodeRekordboxFiles+0x1390>
 801b740:	4f3d      	ldr	r7, [pc, #244]	; (801b838 <DecodeRekordboxFiles+0x138c>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b742:	6030      	str	r0, [r6, #0]
 801b744:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b746:	465b      	mov	r3, fp
 801b748:	2204      	movs	r2, #4
 801b74a:	4649      	mov	r1, r9
 801b74c:	4638      	mov	r0, r7
 801b74e:	f7ef fe85 	bl	800b45c <f_read>
 801b752:	2800      	cmp	r0, #0
 801b754:	d1f7      	bne.n	801b746 <DecodeRekordboxFiles+0x129a>
		out_data |= tag[i];
 801b756:	6833      	ldr	r3, [r6, #0]
 801b758:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801b75a:	f343 0317 	sbfx	r3, r3, #0, #24
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 801b75e:	ee07 3a90 	vmov	s15, r3
 801b762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b766:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b76a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b76e:	ee17 3a90 	vmov	r3, s15
 801b772:	f8c8 3640 	str.w	r3, [r8, #1600]	; 0x640
 801b776:	e6de      	b.n	801b536 <DecodeRekordboxFiles+0x108a>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 801b778:	2304      	movs	r3, #4
 801b77a:	f7ff ba8b 	b.w	801ac94 <DecodeRekordboxFiles+0x7e8>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b77e:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801b83c <DecodeRekordboxFiles+0x1390>
 801b782:	4d2d      	ldr	r5, [pc, #180]	; (801b838 <DecodeRekordboxFiles+0x138c>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b784:	6030      	str	r0, [r6, #0]
 801b786:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b788:	464b      	mov	r3, r9
 801b78a:	2204      	movs	r2, #4
 801b78c:	4659      	mov	r1, fp
 801b78e:	4628      	mov	r0, r5
 801b790:	f7ef fe64 	bl	800b45c <f_read>
 801b794:	2800      	cmp	r0, #0
 801b796:	d1f7      	bne.n	801b788 <DecodeRekordboxFiles+0x12dc>
		out_data |= tag[i];
 801b798:	6833      	ldr	r3, [r6, #0]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b79a:	f607 4776 	addw	r7, r7, #3190	; 0xc76
 801b79e:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801b7a0:	f343 0317 	sbfx	r3, r3, #0, #24
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b7a4:	ee07 3a90 	vmov	s15, r3
 801b7a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7ac:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b7b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b7b4:	ee17 3a90 	vmov	r3, s15
 801b7b8:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
 801b7bc:	e487      	b.n	801b0ce <DecodeRekordboxFiles+0xc22>
	while(i++  < rekordbox.spectrum_size) {
 801b7be:	2200      	movs	r2, #0
 801b7c0:	f7fe bf32 	b.w	801a628 <DecodeRekordboxFiles+0x17c>
 801b7c4:	4662      	mov	r2, ip
 801b7c6:	f7fe bf2f 	b.w	801a628 <DecodeRekordboxFiles+0x17c>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 801b7ca:	2304      	movs	r3, #4
 801b7cc:	f7ff b8a0 	b.w	801a910 <DecodeRekordboxFiles+0x464>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b7d0:	f8df b068 	ldr.w	fp, [pc, #104]	; 801b83c <DecodeRekordboxFiles+0x1390>
 801b7d4:	4f18      	ldr	r7, [pc, #96]	; (801b838 <DecodeRekordboxFiles+0x138c>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b7d6:	6030      	str	r0, [r6, #0]
 801b7d8:	7130      	strb	r0, [r6, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b7da:	464b      	mov	r3, r9
 801b7dc:	2204      	movs	r2, #4
 801b7de:	4659      	mov	r1, fp
 801b7e0:	4638      	mov	r0, r7
 801b7e2:	f7ef fe3b 	bl	800b45c <f_read>
 801b7e6:	2800      	cmp	r0, #0
 801b7e8:	d1f7      	bne.n	801b7da <DecodeRekordboxFiles+0x132e>
		out_data |= tag[i];
 801b7ea:	6833      	ldr	r3, [r6, #0]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b7ec:	f605 4576 	addw	r5, r5, #3190	; 0xc76
 801b7f0:	ba1b      	rev	r3, r3
	out_data >>= 8;
 801b7f2:	f343 0317 	sbfx	r3, r3, #0, #24
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 801b7f6:	ee07 3a90 	vmov	s15, r3
 801b7fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7fe:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b806:	ee17 3a90 	vmov	r3, s15
 801b80a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 801b80e:	e785      	b.n	801b71c <DecodeRekordboxFiles+0x1270>
		while(i < data_size)
 801b810:	461f      	mov	r7, r3
 801b812:	f7fe bfe2 	b.w	801a7da <DecodeRekordboxFiles+0x32e>
		i++;
 801b816:	2701      	movs	r7, #1
 801b818:	f7fe bfdf 	b.w	801a7da <DecodeRekordboxFiles+0x32e>
		while(i < data_size)
 801b81c:	461f      	mov	r7, r3
 801b81e:	f7ff b99e 	b.w	801ab5e <DecodeRekordboxFiles+0x6b2>
		i++;
 801b822:	2701      	movs	r7, #1
 801b824:	f7ff b99b 	b.w	801ab5e <DecodeRekordboxFiles+0x6b2>
		for(i = 1; i < rekordbox.cues; i++) {
 801b828:	f04f 0a01 	mov.w	sl, #1
 801b82c:	e68b      	b.n	801b546 <DecodeRekordboxFiles+0x109a>
		for(i = 1; i < rekordbox.cues; i++) {
 801b82e:	f04f 0a01 	mov.w	sl, #1
 801b832:	f7ff bb71 	b.w	801af18 <DecodeRekordboxFiles+0xa6c>
 801b836:	bf00      	nop
 801b838:	20001b58 	.word	0x20001b58
 801b83c:	200185e0 	.word	0x200185e0

0801b840 <GetFileName>:

uint8_t GetFileName(TCHAR *path)
{
 801b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t data_size = 0;
	uint8_t k;
	uint32_t i;
	uint8_t res = FR_OK;
	for(i = 0; i < RBX_MAX_PATH; i++) rekordbox.filename[i] = 0;
 801b844:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
{
 801b848:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 801b84c:	4604      	mov	r4, r0
	for(i = 0; i < RBX_MAX_PATH; i++) rekordbox.filename[i] = 0;
 801b84e:	2100      	movs	r1, #0
 801b850:	4866      	ldr	r0, [pc, #408]	; (801b9ec <GetFileName+0x1ac>)
 801b852:	f003 fc7f 	bl	801f154 <memset>
	char filename[RBX_MAX_PATH*2] = {0};		//UTF16 -- will be converted down to char
 801b856:	2100      	movs	r1, #0
 801b858:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 801b85c:	a801      	add	r0, sp, #4
 801b85e:	9100      	str	r1, [sp, #0]
 801b860:	f003 fc78 	bl	801f154 <memset>

	res = f_open(&MyFile, path, FA_READ);
 801b864:	2201      	movs	r2, #1
 801b866:	4621      	mov	r1, r4
 801b868:	4861      	ldr	r0, [pc, #388]	; (801b9f0 <GetFileName+0x1b0>)
 801b86a:	f7ef fd95 	bl	800b398 <f_open>
	if(res == FR_OK)
 801b86e:	2800      	cmp	r0, #0
 801b870:	f040 809f 	bne.w	801b9b2 <GetFileName+0x172>
	{
		if(FindToken(path_token) != 0) return 1;
 801b874:	485f      	ldr	r0, [pc, #380]	; (801b9f4 <GetFileName+0x1b4>)
 801b876:	f7fe fdd3 	bl	801a420 <FindToken>
 801b87a:	2800      	cmp	r0, #0
 801b87c:	f040 80a4 	bne.w	801b9c8 <GetFileName+0x188>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801b880:	4e5d      	ldr	r6, [pc, #372]	; (801b9f8 <GetFileName+0x1b8>)
 801b882:	4d5e      	ldr	r5, [pc, #376]	; (801b9fc <GetFileName+0x1bc>)
 801b884:	4c5a      	ldr	r4, [pc, #360]	; (801b9f0 <GetFileName+0x1b0>)
 801b886:	4633      	mov	r3, r6
 801b888:	2208      	movs	r2, #8
 801b88a:	4629      	mov	r1, r5
 801b88c:	4620      	mov	r0, r4
 801b88e:	f7ef fde5 	bl	800b45c <f_read>
 801b892:	2800      	cmp	r0, #0
 801b894:	d1f7      	bne.n	801b886 <GetFileName+0x46>
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b896:	4c5a      	ldr	r4, [pc, #360]	; (801ba00 <GetFileName+0x1c0>)
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b898:	4e57      	ldr	r6, [pc, #348]	; (801b9f8 <GetFileName+0x1b8>)
 801b89a:	4d55      	ldr	r5, [pc, #340]	; (801b9f0 <GetFileName+0x1b0>)
	for(int i = 0; i < 5; i++) tag[i] = 0;
 801b89c:	6020      	str	r0, [r4, #0]
 801b89e:	7120      	strb	r0, [r4, #4]
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 801b8a0:	4633      	mov	r3, r6
 801b8a2:	2204      	movs	r2, #4
 801b8a4:	4621      	mov	r1, r4
 801b8a6:	4628      	mov	r0, r5
 801b8a8:	f7ef fdd8 	bl	800b45c <f_read>
 801b8ac:	2800      	cmp	r0, #0
 801b8ae:	d1f7      	bne.n	801b8a0 <GetFileName+0x60>
		out_data |= tag[i];
 801b8b0:	7821      	ldrb	r1, [r4, #0]
 801b8b2:	7862      	ldrb	r2, [r4, #1]
 801b8b4:	78a3      	ldrb	r3, [r4, #2]
 801b8b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801b8ba:	78e5      	ldrb	r5, [r4, #3]
 801b8bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b8c0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	out_data >>= 8;
 801b8c4:	f345 0517 	sbfx	r5, r5, #0, #24
		data_size = GetLongNumber();
		if (data_size>=RBX_MAX_PATH){
 801b8c8:	2dfe      	cmp	r5, #254	; 0xfe
 801b8ca:	f200 8086 	bhi.w	801b9da <GetFileName+0x19a>
			//ERROR  -- TOO LONG PATH!!!!
			f_close(&MyFile);
			return 1;
		}
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 801b8ce:	4f4a      	ldr	r7, [pc, #296]	; (801b9f8 <GetFileName+0x1b8>)
 801b8d0:	4e47      	ldr	r6, [pc, #284]	; (801b9f0 <GetFileName+0x1b0>)
 801b8d2:	463b      	mov	r3, r7
 801b8d4:	462a      	mov	r2, r5
 801b8d6:	4669      	mov	r1, sp
 801b8d8:	4630      	mov	r0, r6
 801b8da:	f7ef fdbf 	bl	800b45c <f_read>
 801b8de:	4604      	mov	r4, r0
 801b8e0:	2800      	cmp	r0, #0
 801b8e2:	d1f6      	bne.n	801b8d2 <GetFileName+0x92>
		i = 0;
		k = 0;
		while(i < data_size) {
 801b8e4:	4e41      	ldr	r6, [pc, #260]	; (801b9ec <GetFileName+0x1ac>)
 801b8e6:	2d00      	cmp	r5, #0
 801b8e8:	d073      	beq.n	801b9d2 <GetFileName+0x192>
 801b8ea:	f105 39ff 	add.w	r9, r5, #4294967295
 801b8ee:	f10d 0301 	add.w	r3, sp, #1
 801b8f2:	46ea      	mov	sl, sp
 801b8f4:	46b3      	mov	fp, r6
 801b8f6:	eb03 0859 	add.w	r8, r3, r9, lsr #1
 801b8fa:	466f      	mov	r7, sp
 801b8fc:	ea4f 0959 	mov.w	r9, r9, lsr #1
			WCHAR c = filename[i];
 801b900:	783b      	ldrb	r3, [r7, #0]
			c <<= 8;
			i++;
			c |= filename[i];
			i++;
			rekordbox.filename[k] = c;
			filename[k] = ff_convert(c, 0);
 801b902:	2100      	movs	r1, #0
			c |= filename[i];
 801b904:	7878      	ldrb	r0, [r7, #1]
		while(i < data_size) {
 801b906:	3702      	adds	r7, #2
			c |= filename[i];
 801b908:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			rekordbox.filename[k] = c;
 801b90c:	f84b 0b04 	str.w	r0, [fp], #4
			filename[k] = ff_convert(c, 0);
 801b910:	f7f0 f9f4 	bl	800bcfc <ff_convert>
 801b914:	f80a 0b01 	strb.w	r0, [sl], #1
		while(i < data_size) {
 801b918:	45c2      	cmp	sl, r8
 801b91a:	d1f1      	bne.n	801b900 <GetFileName+0xc0>
			k++;
 801b91c:	f109 0001 	add.w	r0, r9, #1
		}
		for(i = k; i < data_size; i++) filename[i] = 0;
 801b920:	b2c0      	uxtb	r0, r0
 801b922:	42a8      	cmp	r0, r5
 801b924:	d204      	bcs.n	801b930 <GetFileName+0xf0>
 801b926:	1a2a      	subs	r2, r5, r0
 801b928:	2100      	movs	r1, #0
 801b92a:	4468      	add	r0, sp
 801b92c:	f003 fc12 	bl	801f154 <memset>
 801b930:	1c6a      	adds	r2, r5, #1
		while(i < data_size) {
 801b932:	462b      	mov	r3, r5
 801b934:	446a      	add	r2, sp
 801b936:	e001      	b.n	801b93c <GetFileName+0xfc>
		i = data_size;
		while((i > 0) && (filename[i] != '.')) i--;
 801b938:	3b01      	subs	r3, #1
 801b93a:	d04a      	beq.n	801b9d2 <GetFileName+0x192>
 801b93c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801b940:	292e      	cmp	r1, #46	; 0x2e
 801b942:	d1f9      	bne.n	801b938 <GetFileName+0xf8>
 801b944:	3b01      	subs	r3, #1
		while(i < data_size) {
 801b946:	2200      	movs	r2, #0
 801b948:	446b      	add	r3, sp
		k = 0;
		while(k < 5)
		{
			if(filename[i] >= 32) {
 801b94a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
				rekordbox.filetype[k] = filename[i];
				k++;
 801b94e:	1c57      	adds	r7, r2, #1
				rekordbox.filetype[k] = filename[i];
 801b950:	18b0      	adds	r0, r6, r2
			if(filename[i] >= 32) {
 801b952:	291f      	cmp	r1, #31
 801b954:	d935      	bls.n	801b9c2 <GetFileName+0x182>
				k++;
 801b956:	b2fa      	uxtb	r2, r7
				rekordbox.filetype[k] = filename[i];
 801b958:	f880 14fb 	strb.w	r1, [r0, #1275]	; 0x4fb
		while(k < 5)
 801b95c:	2a05      	cmp	r2, #5
 801b95e:	d1f4      	bne.n	801b94a <GetFileName+0x10a>
			}
			i++;
		}
		rekordbox.filetype[4] = 0;
 801b960:	2100      	movs	r1, #0

		for(i = 0; i < RBX_MAX_PATH; i++) rekordbox.file[i] = 0;
 801b962:	22ff      	movs	r2, #255	; 0xff
 801b964:	4827      	ldr	r0, [pc, #156]	; (801ba04 <GetFileName+0x1c4>)
		rekordbox.filetype[4] = 0;
 801b966:	f886 14ff 	strb.w	r1, [r6, #1279]	; 0x4ff
		for(i = 0; i < RBX_MAX_PATH; i++) rekordbox.file[i] = 0;
 801b96a:	f003 fbf3 	bl	801f154 <memset>
		i = data_size;
		while((i > 0) && (filename[i] != '/')) i--;
 801b96e:	b3dd      	cbz	r5, 801b9e8 <GetFileName+0x1a8>
 801b970:	1c6a      	adds	r2, r5, #1
 801b972:	462b      	mov	r3, r5
 801b974:	446a      	add	r2, sp
 801b976:	e001      	b.n	801b97c <GetFileName+0x13c>
 801b978:	3b01      	subs	r3, #1
 801b97a:	d02c      	beq.n	801b9d6 <GetFileName+0x196>
 801b97c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801b980:	292f      	cmp	r1, #47	; 0x2f
 801b982:	d1f9      	bne.n	801b978 <GetFileName+0x138>
		k = 0;
		i++;
 801b984:	3301      	adds	r3, #1
		while(i < data_size)
 801b986:	429d      	cmp	r5, r3
 801b988:	d92c      	bls.n	801b9e4 <GetFileName+0x1a4>
 801b98a:	3b01      	subs	r3, #1
 801b98c:	f10d 32ff 	add.w	r2, sp, #4294967295
 801b990:	446b      	add	r3, sp
 801b992:	1957      	adds	r7, r2, r5
		{
			if(filename[i] >= 32) {
 801b994:	f813 2f01 	ldrb.w	r2, [r3, #1]!
				rekordbox.file[k] = filename[i];
				k++;
 801b998:	1c60      	adds	r0, r4, #1
				rekordbox.file[k] = filename[i];
 801b99a:	1931      	adds	r1, r6, r4
			if(filename[i] >= 32) {
 801b99c:	2a1f      	cmp	r2, #31
 801b99e:	d902      	bls.n	801b9a6 <GetFileName+0x166>
				k++;
 801b9a0:	b2c4      	uxtb	r4, r0
				rekordbox.file[k] = filename[i];
 801b9a2:	f881 23fc 	strb.w	r2, [r1, #1020]	; 0x3fc
		while(i < data_size)
 801b9a6:	42bb      	cmp	r3, r7
 801b9a8:	d1f4      	bne.n	801b994 <GetFileName+0x154>
			}
			i++;
		}
		rekordbox.file[i] = 0;
 801b9aa:	4435      	add	r5, r6
 801b9ac:	2300      	movs	r3, #0
 801b9ae:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
	}
	f_close(&MyFile);
 801b9b2:	480f      	ldr	r0, [pc, #60]	; (801b9f0 <GetFileName+0x1b0>)
 801b9b4:	f7ef fe66 	bl	800b684 <f_close>
	return 0;
 801b9b8:	2000      	movs	r0, #0
}
 801b9ba:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 801b9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while(k < 5)
 801b9c2:	2a04      	cmp	r2, #4
 801b9c4:	d9c1      	bls.n	801b94a <GetFileName+0x10a>
 801b9c6:	e7cb      	b.n	801b960 <GetFileName+0x120>
		if(FindToken(path_token) != 0) return 1;
 801b9c8:	2001      	movs	r0, #1
}
 801b9ca:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 801b9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while(i < data_size) {
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	e7b6      	b.n	801b944 <GetFileName+0x104>
 801b9d6:	2301      	movs	r3, #1
 801b9d8:	e7d5      	b.n	801b986 <GetFileName+0x146>
			f_close(&MyFile);
 801b9da:	4805      	ldr	r0, [pc, #20]	; (801b9f0 <GetFileName+0x1b0>)
 801b9dc:	f7ef fe52 	bl	800b684 <f_close>
			return 1;
 801b9e0:	2001      	movs	r0, #1
 801b9e2:	e7ea      	b.n	801b9ba <GetFileName+0x17a>
		while(i < data_size)
 801b9e4:	461d      	mov	r5, r3
 801b9e6:	e7e0      	b.n	801b9aa <GetFileName+0x16a>
		i++;
 801b9e8:	2501      	movs	r5, #1
 801b9ea:	e7de      	b.n	801b9aa <GetFileName+0x16a>
 801b9ec:	20015208 	.word	0x20015208
 801b9f0:	20001b58 	.word	0x20001b58
 801b9f4:	08024ef4 	.word	0x08024ef4
 801b9f8:	2000e94c 	.word	0x2000e94c
 801b9fc:	20000b48 	.word	0x20000b48
 801ba00:	200185e0 	.word	0x200185e0
 801ba04:	20015604 	.word	0x20015604

0801ba08 <MX_SAI2_Init>:

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 801ba08:	4818      	ldr	r0, [pc, #96]	; (801ba6c <MX_SAI2_Init+0x64>)
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 801ba0a:	2300      	movs	r3, #0
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 801ba0c:	2201      	movs	r2, #1
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 801ba0e:	2180      	movs	r1, #128	; 0x80
{
 801ba10:	b510      	push	{r4, lr}
  hsai_BlockA2.Instance = SAI2_Block_A;
 801ba12:	4c17      	ldr	r4, [pc, #92]	; (801ba70 <MX_SAI2_Init+0x68>)
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 801ba14:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 801ba16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 801ba1a:	6182      	str	r2, [r0, #24]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 801ba1c:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 801ba1e:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 801ba20:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 801ba22:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 801ba24:	e9c0 320e 	strd	r3, r2, [r0, #56]	; 0x38
  hsai_BlockA2.FrameInit.FrameLength = 64;
 801ba28:	2240      	movs	r2, #64	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 801ba2a:	e9c0 4300 	strd	r4, r3, [r0]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 801ba2e:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 801ba32:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 801ba36:	2120      	movs	r1, #32
  hsai_BlockA2.FrameInit.FrameLength = 64;
 801ba38:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 801ba3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 801ba3e:	61c4      	str	r4, [r0, #28]
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 801ba40:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 801ba44:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 801ba48:	2104      	movs	r1, #4
  hsai_BlockA2.SlotInit.SlotActive = 0x0000000F;
 801ba4a:	220f      	movs	r2, #15
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 801ba4c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 801ba50:	e9c0 3413 	strd	r3, r4, [r0, #76]	; 0x4c
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 801ba54:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotActive = 0x0000000F;
 801ba58:	e9c0 1217 	strd	r1, r2, [r0, #92]	; 0x5c
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 801ba5c:	f7e9 fbb2 	bl	80051c4 <HAL_SAI_Init>
 801ba60:	b900      	cbnz	r0, 801ba64 <MX_SAI2_Init+0x5c>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 801ba62:	bd10      	pop	{r4, pc}
 801ba64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 801ba68:	f7fe ba36 	b.w	8019ed8 <Error_Handler>
 801ba6c:	2001864c 	.word	0x2001864c
 801ba70:	40015c04 	.word	0x40015c04
 801ba74:	00000000 	.word	0x00000000

0801ba78 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 801ba78:	b530      	push	{r4, r5, lr}
 801ba7a:	b0ab      	sub	sp, #172	; 0xac
 801ba7c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801ba7e:	2284      	movs	r2, #132	; 0x84
 801ba80:	2100      	movs	r1, #0
 801ba82:	a808      	add	r0, sp, #32
 801ba84:	f003 fb66 	bl	801f154 <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 801ba88:	4b35      	ldr	r3, [pc, #212]	; (801bb60 <HAL_SAI_MspInit+0xe8>)
 801ba8a:	6822      	ldr	r2, [r4, #0]
 801ba8c:	429a      	cmp	r2, r3
 801ba8e:	d001      	beq.n	801ba94 <HAL_SAI_MspInit+0x1c>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
    }
}
 801ba90:	b02b      	add	sp, #172	; 0xac
 801ba92:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 801ba94:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801bb48 <HAL_SAI_MspInit+0xd0>
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 801ba98:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801ba9a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 801ba9c:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 801ba9e:	2301      	movs	r3, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 801baa0:	ed8d 7b08 	vstr	d7, [sp, #32]
 801baa4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801bb50 <HAL_SAI_MspInit+0xd8>
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 801baa8:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 801baaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 801baae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 801bab2:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801bab4:	f7e8 fdda 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
 801bab8:	2800      	cmp	r0, #0
 801baba:	d13d      	bne.n	801bb38 <HAL_SAI_MspInit+0xc0>
    if (SAI2_client == 0)
 801babc:	4a29      	ldr	r2, [pc, #164]	; (801bb64 <HAL_SAI_MspInit+0xec>)
 801babe:	6813      	ldr	r3, [r2, #0]
 801bac0:	b94b      	cbnz	r3, 801bad6 <HAL_SAI_MspInit+0x5e>
       __HAL_RCC_SAI2_CLK_ENABLE();
 801bac2:	4929      	ldr	r1, [pc, #164]	; (801bb68 <HAL_SAI_MspInit+0xf0>)
 801bac4:	6c48      	ldr	r0, [r1, #68]	; 0x44
 801bac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801baca:	6448      	str	r0, [r1, #68]	; 0x44
 801bacc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801bace:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 801bad2:	9101      	str	r1, [sp, #4]
 801bad4:	9901      	ldr	r1, [sp, #4]
    SAI2_client ++;
 801bad6:	3301      	adds	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 801bad8:	20f0      	movs	r0, #240	; 0xf0
 801bada:	2102      	movs	r1, #2
    hdma_sai2_a.Instance = DMA2_Stream4;
 801badc:	4d23      	ldr	r5, [pc, #140]	; (801bb6c <HAL_SAI_MspInit+0xf4>)
    SAI2_client ++;
 801bade:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 801bae0:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 801bae2:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 801bb58 <HAL_SAI_MspInit+0xe0>
 801bae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801baea:	a902      	add	r1, sp, #8
 801baec:	4820      	ldr	r0, [pc, #128]	; (801bb70 <HAL_SAI_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 801baee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 801baf0:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801baf4:	f7e6 f8d2 	bl	8001c9c <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA2_Stream4;
 801baf8:	491e      	ldr	r1, [pc, #120]	; (801bb74 <HAL_SAI_MspInit+0xfc>)
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 801bafa:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 801bafe:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 801bb00:	4628      	mov	r0, r5
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 801bb02:	60eb      	str	r3, [r5, #12]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 801bb04:	622b      	str	r3, [r5, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801bb06:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bb08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 801bb0c:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 801bb10:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bb14:	2140      	movs	r1, #64	; 0x40
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 801bb16:	612a      	str	r2, [r5, #16]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bb18:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801bb1c:	60a9      	str	r1, [r5, #8]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801bb1e:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 801bb22:	f44f 7380 	mov.w	r3, #256	; 0x100
 801bb26:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 801bb28:	f7e5 fb84 	bl	8001234 <HAL_DMA_Init>
 801bb2c:	b938      	cbnz	r0, 801bb3e <HAL_SAI_MspInit+0xc6>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 801bb2e:	6725      	str	r5, [r4, #112]	; 0x70
 801bb30:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 801bb32:	66e5      	str	r5, [r4, #108]	; 0x6c
}
 801bb34:	b02b      	add	sp, #172	; 0xac
 801bb36:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 801bb38:	f7fe f9ce 	bl	8019ed8 <Error_Handler>
 801bb3c:	e7be      	b.n	801babc <HAL_SAI_MspInit+0x44>
      Error_Handler();
 801bb3e:	f7fe f9cb 	bl	8019ed8 <Error_Handler>
 801bb42:	e7f4      	b.n	801bb2e <HAL_SAI_MspInit+0xb6>
 801bb44:	f3af 8000 	nop.w
 801bb48:	00100000 	.word	0x00100000
 801bb4c:	00000064 	.word	0x00000064
 801bb50:	00000002 	.word	0x00000002
 801bb54:	00000002 	.word	0x00000002
 801bb58:	00000000 	.word	0x00000000
 801bb5c:	00000002 	.word	0x00000002
 801bb60:	40015c04 	.word	0x40015c04
 801bb64:	200185e8 	.word	0x200185e8
 801bb68:	40023800 	.word	0x40023800
 801bb6c:	200185ec 	.word	0x200185ec
 801bb70:	40022000 	.word	0x40022000
 801bb74:	40026470 	.word	0x40026470

0801bb78 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 801bb78:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 801bb7a:	4b09      	ldr	r3, [pc, #36]	; (801bba0 <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801bb7c:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 801bb7e:	4c09      	ldr	r4, [pc, #36]	; (801bba4 <MX_SDMMC1_SD_Init+0x2c>)
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801bb80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 801bb84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 801bb88:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801bb8c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd1.Init.ClockDiv = 2;
 801bb90:	2202      	movs	r2, #2
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 801bb92:	f85d 4b04 	ldr.w	r4, [sp], #4
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 801bb96:	e9c3 0104 	strd	r0, r1, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 801bb9a:	619a      	str	r2, [r3, #24]
}
 801bb9c:	4770      	bx	lr
 801bb9e:	bf00      	nop
 801bba0:	200186d0 	.word	0x200186d0
 801bba4:	40012c00 	.word	0x40012c00

0801bba8 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 801bba8:	4811      	ldr	r0, [pc, #68]	; (801bbf0 <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 801bbaa:	2100      	movs	r1, #0
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801bbac:	2200      	movs	r2, #0
 801bbae:	2300      	movs	r3, #0
{
 801bbb0:	b510      	push	{r4, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801bbb2:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801bbb6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi2.Instance = SPI2;
 801bbba:	4c0e      	ldr	r4, [pc, #56]	; (801bbf4 <MX_SPI2_Init+0x4c>)
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801bbbc:	e9c0 2308 	strd	r2, r3, [r0, #32]
 801bbc0:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801bbc4:	60c1      	str	r1, [r0, #12]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 801bbc6:	2201      	movs	r2, #1
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801bbc8:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801bbcc:	2102      	movs	r1, #2
  hspi2.Instance = SPI2;
 801bbce:	6004      	str	r4, [r0, #0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801bbd0:	6183      	str	r3, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801bbd2:	2307      	movs	r3, #7
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 801bbd4:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801bbd8:	2200      	movs	r2, #0
 801bbda:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801bbde:	f7e9 ff99 	bl	8005b14 <HAL_SPI_Init>
 801bbe2:	b900      	cbnz	r0, 801bbe6 <MX_SPI2_Init+0x3e>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 801bbe4:	bd10      	pop	{r4, pc}
 801bbe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 801bbea:	f7fe b975 	b.w	8019ed8 <Error_Handler>
 801bbee:	bf00      	nop
 801bbf0:	20018758 	.word	0x20018758
 801bbf4:	40003800 	.word	0x40003800

0801bbf8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI2)
 801bbf8:	4b27      	ldr	r3, [pc, #156]	; (801bc98 <HAL_SPI_MspInit+0xa0>)
 801bbfa:	6802      	ldr	r2, [r0, #0]
{
 801bbfc:	b530      	push	{r4, r5, lr}
  if(spiHandle->Instance==SPI2)
 801bbfe:	429a      	cmp	r2, r3
{
 801bc00:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bc02:	f04f 0400 	mov.w	r4, #0
 801bc06:	e9cd 4404 	strd	r4, r4, [sp, #16]
 801bc0a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 801bc0e:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI2)
 801bc10:	d001      	beq.n	801bc16 <HAL_SPI_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 801bc12:	b00b      	add	sp, #44	; 0x2c
 801bc14:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 801bc16:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801bc1a:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801bc1c:	481f      	ldr	r0, [pc, #124]	; (801bc9c <HAL_SPI_MspInit+0xa4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 801bc1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bc20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801bc24:	641a      	str	r2, [r3, #64]	; 0x40
 801bc26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bc28:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801bc2c:	9201      	str	r2, [sp, #4]
 801bc2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801bc30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bc32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bc36:	631a      	str	r2, [r3, #48]	; 0x30
 801bc38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bc3a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bc3e:	9202      	str	r2, [sp, #8]
 801bc40:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801bc42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bc44:	f042 0202 	orr.w	r2, r2, #2
 801bc48:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801bc4a:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801bc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801bc4e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801bc50:	f003 0302 	and.w	r3, r3, #2
 801bc54:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801bc56:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801bc58:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801bc5a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801bc5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bc60:	2303      	movs	r3, #3
 801bc62:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801bc64:	f7e6 f81a 	bl	8001c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801bc68:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801bc6c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801bc6e:	a904      	add	r1, sp, #16
 801bc70:	480b      	ldr	r0, [pc, #44]	; (801bca0 <HAL_SPI_MspInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801bc72:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801bc74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bc78:	2303      	movs	r3, #3
 801bc7a:	2200      	movs	r2, #0
 801bc7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801bc80:	f7e6 f80c 	bl	8001c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 801bc84:	4622      	mov	r2, r4
 801bc86:	2102      	movs	r1, #2
 801bc88:	2024      	movs	r0, #36	; 0x24
 801bc8a:	f7e5 fa27 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 801bc8e:	2024      	movs	r0, #36	; 0x24
 801bc90:	f7e5 fa6e 	bl	8001170 <HAL_NVIC_EnableIRQ>
}
 801bc94:	b00b      	add	sp, #44	; 0x2c
 801bc96:	bd30      	pop	{r4, r5, pc}
 801bc98:	40003800 	.word	0x40003800
 801bc9c:	40022000 	.word	0x40022000
 801bca0:	40020400 	.word	0x40020400

0801bca4 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 801bca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bca8:	b0a3      	sub	sp, #140	; 0x8c
 801bcaa:	4614      	mov	r4, r2
 801bcac:	4605      	mov	r5, r0
 801bcae:	4688      	mov	r8, r1
  */
void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 801bcb0:	a801      	add	r0, sp, #4
 801bcb2:	f7e9 f973 	bl	8004f9c <HAL_RCCEx_GetPeriphCLKConfig>
  
  uint32_t I2SDivQ = 33;
  uint32_t I2SN = 49;
  uint32_t new_frequency_Hz = (203000000 / 9 * (float)AudioFreq /
 801bcb6:	ee07 4a90 	vmov	s15, r4
 801bcba:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801bda0 <BSP_AUDIO_OUT_Init+0xfc>
		(float) AUDIO_FREQUENCY_22K);
  uint32_t set_frequency_Hz = 0;
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 801bcbe:	2220      	movs	r2, #32
  uint32_t new_frequency_Hz = (203000000 / 9 * (float)AudioFreq /
 801bcc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 801bcc4:	4837      	ldr	r0, [pc, #220]	; (801bda4 <BSP_AUDIO_OUT_Init+0x100>)
  uint32_t new_frequency_Hz = (203000000 / 9 * (float)AudioFreq /
 801bcc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bcca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bcce:	ee17 1a90 	vmov	r1, s15
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 801bcd2:	e006      	b.n	801bce2 <BSP_AUDIO_OUT_Init+0x3e>
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 801bcd4:	3601      	adds	r6, #1
 801bcd6:	f5b6 7fd8 	cmp.w	r6, #432	; 0x1b0
 801bcda:	d104      	bne.n	801bce6 <BSP_AUDIO_OUT_Init+0x42>
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 801bcdc:	3a01      	subs	r2, #1
 801bcde:	2a01      	cmp	r2, #1
 801bce0:	d006      	beq.n	801bcf0 <BSP_AUDIO_OUT_Init+0x4c>
{ 
 801bce2:	4b31      	ldr	r3, [pc, #196]	; (801bda8 <BSP_AUDIO_OUT_Init+0x104>)
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 801bce4:	2632      	movs	r6, #50	; 0x32
		  set_frequency_Hz = I2SN * 1000000 / I2SDivQ;
 801bce6:	fbb3 fef2 	udiv	lr, r3, r2
		  if(set_frequency_Hz >= new_frequency_Hz) break;
 801bcea:	4571      	cmp	r1, lr
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 801bcec:	4403      	add	r3, r0
		  if(set_frequency_Hz >= new_frequency_Hz) break;
 801bcee:	d8f1      	bhi.n	801bcd4 <BSP_AUDIO_OUT_Init+0x30>
	  }
	  if(set_frequency_Hz >= new_frequency_Hz) break;
  }
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 801bcf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000

  rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = I2SN;
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
  rcc_ex_clk_init_struct.PLLI2SDivQ = I2SDivQ;
    
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 801bcf4:	a801      	add	r0, sp, #4
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
  /* Initialize the hsai_BlockA2 Instance parameter */
  hsai_BlockA2.Instance = AUDIO_OUT_SAIx;
 801bcf6:	4f2d      	ldr	r7, [pc, #180]	; (801bdac <BSP_AUDIO_OUT_Init+0x108>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 801bcf8:	f04f 0901 	mov.w	r9, #1
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 801bcfc:	9301      	str	r3, [sp, #4]
  rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 801bcfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  rcc_ex_clk_init_struct.PLLI2SDivQ = I2SDivQ;
 801bd02:	920a      	str	r2, [sp, #40]	; 0x28
  rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 801bd04:	9311      	str	r3, [sp, #68]	; 0x44
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 801bd06:	2302      	movs	r3, #2
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = I2SN;
 801bd08:	9602      	str	r6, [sp, #8]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 801bd0a:	2600      	movs	r6, #0
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 801bd0c:	9304      	str	r3, [sp, #16]
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 801bd0e:	f7e8 fcad 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
  hsai_BlockA2.Instance = AUDIO_OUT_SAIx;
 801bd12:	4b27      	ldr	r3, [pc, #156]	; (801bdb0 <BSP_AUDIO_OUT_Init+0x10c>)
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  hsai_BlockA2.FrameInit.FrameLength = 64;
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 801bd14:	f04f 0e40 	mov.w	lr, #64	; 0x40
  Slot Number: 4
  Slot Active: All slot actives */
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  hsai_BlockA2.SlotInit.SlotNumber = 4;
  hsai_BlockA2.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 801bd18:	2004      	movs	r0, #4
  hsai_BlockA2.Init.AudioFrequency = AudioFreq;
 801bd1a:	61fc      	str	r4, [r7, #28]
  hsai_BlockA2.Instance = AUDIO_OUT_SAIx;
 801bd1c:	603b      	str	r3, [r7, #0]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 801bd1e:	2380      	movs	r3, #128	; 0x80
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 801bd20:	607e      	str	r6, [r7, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 801bd22:	637b      	str	r3, [r7, #52]	; 0x34
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 801bd24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 801bd28:	617e      	str	r6, [r7, #20]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 801bd2a:	613b      	str	r3, [r7, #16]
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 801bd2c:	2320      	movs	r3, #32
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 801bd2e:	633e      	str	r6, [r7, #48]	; 0x30
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 801bd30:	63be      	str	r6, [r7, #56]	; 0x38
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 801bd32:	60be      	str	r6, [r7, #8]
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801bd34:	64fe      	str	r6, [r7, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 801bd36:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 801bd3a:	f8c7 9018 	str.w	r9, [r7, #24]
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 801bd3e:	e9c7 e310 	strd	lr, r3, [r7, #64]	; 0x40
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 801bd42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801bd46:	64bb      	str	r3, [r7, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 801bd48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801bd4c:	653b      	str	r3, [r7, #80]	; 0x50
  hsai_BlockA2.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 801bd4e:	230f      	movs	r3, #15
 801bd50:	e9c7 0317 	strd	r0, r3, [r7, #92]	; 0x5c

  HAL_SAI_Init(&hsai_BlockA2);
 801bd54:	4638      	mov	r0, r7
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 801bd56:	e9c7 6615 	strd	r6, r6, [r7, #84]	; 0x54
  HAL_SAI_Init(&hsai_BlockA2);
 801bd5a:	f7e9 fa33 	bl	80051c4 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 801bd5e:	683a      	ldr	r2, [r7, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 801bd60:	4f14      	ldr	r7, [pc, #80]	; (801bdb4 <BSP_AUDIO_OUT_Init+0x110>)
 801bd62:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 801bd64:	6813      	ldr	r3, [r2, #0]
 801bd66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bd6a:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 801bd6c:	68bb      	ldr	r3, [r7, #8]
 801bd6e:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 801bd70:	f648 1394 	movw	r3, #35220	; 0x8994
 801bd74:	4298      	cmp	r0, r3
 801bd76:	d003      	beq.n	801bd80 <BSP_AUDIO_OUT_Init+0xdc>
    ret = AUDIO_ERROR;
 801bd78:	4648      	mov	r0, r9
}
 801bd7a:	b023      	add	sp, #140	; 0x8c
 801bd7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 801bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd82:	2034      	movs	r0, #52	; 0x34
 801bd84:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 801bd86:	480c      	ldr	r0, [pc, #48]	; (801bdb8 <BSP_AUDIO_OUT_Init+0x114>)
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 801bd88:	4623      	mov	r3, r4
 801bd8a:	4642      	mov	r2, r8
    audio_drv = &wm8994_drv; 
 801bd8c:	6007      	str	r7, [r0, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 801bd8e:	4629      	mov	r1, r5
 801bd90:	683c      	ldr	r4, [r7, #0]
 801bd92:	2034      	movs	r0, #52	; 0x34
 801bd94:	47a0      	blx	r4
    ret = AUDIO_OK;
 801bd96:	4630      	mov	r0, r6
}
 801bd98:	b023      	add	sp, #140	; 0x8c
 801bd9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd9e:	bf00      	nop
 801bda0:	447fbb5f 	.word	0x447fbb5f
 801bda4:	000f4240 	.word	0x000f4240
 801bda8:	02faf080 	.word	0x02faf080
 801bdac:	2001864c 	.word	0x2001864c
 801bdb0:	40015c04 	.word	0x40015c04
 801bdb4:	2000007c 	.word	0x2000007c
 801bdb8:	200187bc 	.word	0x200187bc

0801bdbc <BSP_AUDIO_OUT_Play>:
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 801bdbc:	4b0e      	ldr	r3, [pc, #56]	; (801bdf8 <BSP_AUDIO_OUT_Play+0x3c>)
{
 801bdbe:	b510      	push	{r4, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 801bdc0:	681b      	ldr	r3, [r3, #0]
{
 801bdc2:	b082      	sub	sp, #8
 801bdc4:	460c      	mov	r4, r1
 801bdc6:	4601      	mov	r1, r0
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 801bdc8:	9001      	str	r0, [sp, #4]
 801bdca:	2034      	movs	r0, #52	; 0x34
 801bdcc:	b2a2      	uxth	r2, r4
 801bdce:	68db      	ldr	r3, [r3, #12]
 801bdd0:	4798      	blx	r3
 801bdd2:	b968      	cbnz	r0, 801bdf0 <BSP_AUDIO_OUT_Play+0x34>
    HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 801bdd4:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 801bdd8:	9901      	ldr	r1, [sp, #4]
 801bdda:	4808      	ldr	r0, [pc, #32]	; (801bdfc <BSP_AUDIO_OUT_Play+0x40>)
 801bddc:	bf34      	ite	cc
 801bdde:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 801bde2:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 801bde6:	f7e9 fd17 	bl	8005818 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 801bdea:	2000      	movs	r0, #0
}
 801bdec:	b002      	add	sp, #8
 801bdee:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 801bdf0:	2001      	movs	r0, #1
}
 801bdf2:	b002      	add	sp, #8
 801bdf4:	bd10      	pop	{r4, pc}
 801bdf6:	bf00      	nop
 801bdf8:	200187bc 	.word	0x200187bc
 801bdfc:	2001864c 	.word	0x2001864c

0801be00 <BSP_AUDIO_OUT_Pause>:
{    
 801be00:	b508      	push	{r3, lr}
    HAL_SAI_DMAPause(&hsai_BlockA2);
 801be02:	4802      	ldr	r0, [pc, #8]	; (801be0c <BSP_AUDIO_OUT_Pause+0xc>)
 801be04:	f7e9 fc76 	bl	80056f4 <HAL_SAI_DMAPause>
}
 801be08:	2000      	movs	r0, #0
 801be0a:	bd08      	pop	{r3, pc}
 801be0c:	2001864c 	.word	0x2001864c

0801be10 <BSP_AUDIO_OUT_Resume>:
{    
 801be10:	b508      	push	{r3, lr}
    HAL_SAI_DMAResume(&hsai_BlockA2);
 801be12:	4802      	ldr	r0, [pc, #8]	; (801be1c <BSP_AUDIO_OUT_Resume+0xc>)
 801be14:	f7e9 fc82 	bl	800571c <HAL_SAI_DMAResume>
}
 801be18:	2000      	movs	r0, #0
 801be1a:	bd08      	pop	{r3, pc}
 801be1c:	2001864c 	.word	0x2001864c

0801be20 <BSP_AUDIO_OUT_Stop>:
{
 801be20:	b538      	push	{r3, r4, r5, lr}
 801be22:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&hsai_BlockA2);
 801be24:	480a      	ldr	r0, [pc, #40]	; (801be50 <BSP_AUDIO_OUT_Stop+0x30>)
 801be26:	f7e9 fc91 	bl	800574c <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 801be2a:	4b0a      	ldr	r3, [pc, #40]	; (801be54 <BSP_AUDIO_OUT_Stop+0x34>)
 801be2c:	2034      	movs	r0, #52	; 0x34
 801be2e:	4629      	mov	r1, r5
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	699b      	ldr	r3, [r3, #24]
 801be34:	4798      	blx	r3
 801be36:	b918      	cbnz	r0, 801be40 <BSP_AUDIO_OUT_Stop+0x20>
    if(Option == CODEC_PDWN_HW)
 801be38:	2d01      	cmp	r5, #1
 801be3a:	4604      	mov	r4, r0
 801be3c:	d002      	beq.n	801be44 <BSP_AUDIO_OUT_Stop+0x24>
}
 801be3e:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 801be40:	2001      	movs	r0, #1
}
 801be42:	bd38      	pop	{r3, r4, r5, pc}
      HAL_Delay(1);
 801be44:	4628      	mov	r0, r5
 801be46:	f7e5 f919 	bl	800107c <HAL_Delay>
    return AUDIO_OK;
 801be4a:	4620      	mov	r0, r4
}
 801be4c:	bd38      	pop	{r3, r4, r5, pc}
 801be4e:	bf00      	nop
 801be50:	2001864c 	.word	0x2001864c
 801be54:	200187bc 	.word	0x200187bc

0801be58 <BSP_AUDIO_OUT_SetVolume>:
{
 801be58:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 801be5a:	4b05      	ldr	r3, [pc, #20]	; (801be70 <BSP_AUDIO_OUT_SetVolume+0x18>)
{
 801be5c:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 801be5e:	2034      	movs	r0, #52	; 0x34
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	6a1b      	ldr	r3, [r3, #32]
 801be64:	4798      	blx	r3
}
 801be66:	3800      	subs	r0, #0
 801be68:	bf18      	it	ne
 801be6a:	2001      	movne	r0, #1
 801be6c:	bd08      	pop	{r3, pc}
 801be6e:	bf00      	nop
 801be70:	200187bc 	.word	0x200187bc

0801be74 <HAL_SAI_TxCpltCallback>:
{
 801be74:	b570      	push	{r4, r5, r6, lr}
	if(BufferCtl.filetype == 0) {
 801be76:	4c19      	ldr	r4, [pc, #100]	; (801bedc <HAL_SAI_TxCpltCallback+0x68>)
 801be78:	7a23      	ldrb	r3, [r4, #8]
 801be7a:	b9a3      	cbnz	r3, 801bea6 <HAL_SAI_TxCpltCallback+0x32>
 801be7c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
		while(f_read(&MyFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE / 2],
 801be80:	4e17      	ldr	r6, [pc, #92]	; (801bee0 <HAL_SAI_TxCpltCallback+0x6c>)
 801be82:	4d18      	ldr	r5, [pc, #96]	; (801bee4 <HAL_SAI_TxCpltCallback+0x70>)
 801be84:	4633      	mov	r3, r6
 801be86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801be8a:	4621      	mov	r1, r4
 801be8c:	4628      	mov	r0, r5
 801be8e:	f7ef fae5 	bl	800b45c <f_read>
 801be92:	2800      	cmp	r0, #0
 801be94:	d1f6      	bne.n	801be84 <HAL_SAI_TxCpltCallback+0x10>
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 801be96:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	if(BufferCtl.filetype == 1) {
 801be9a:	f894 3808 	ldrb.w	r3, [r4, #2056]	; 0x808
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 801be9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bea2:	f8c4 2804 	str.w	r2, [r4, #2052]	; 0x804
	if(BufferCtl.filetype == 1) {
 801bea6:	2b01      	cmp	r3, #1
 801bea8:	d105      	bne.n	801beb6 <HAL_SAI_TxCpltCallback+0x42>
        unDmaBufMode = 2;
 801beaa:	490f      	ldr	r1, [pc, #60]	; (801bee8 <HAL_SAI_TxCpltCallback+0x74>)
 801beac:	2002      	movs	r0, #2
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2);
 801beae:	4b0f      	ldr	r3, [pc, #60]	; (801beec <HAL_SAI_TxCpltCallback+0x78>)
 801beb0:	4a0f      	ldr	r2, [pc, #60]	; (801bef0 <HAL_SAI_TxCpltCallback+0x7c>)
        unDmaBufMode = 2;
 801beb2:	6008      	str	r0, [r1, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2);
 801beb4:	601a      	str	r2, [r3, #0]
	GetTrackTime();
 801beb6:	f002 f915 	bl	801e0e4 <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 801beba:	4b0a      	ldr	r3, [pc, #40]	; (801bee4 <HAL_SAI_TxCpltCallback+0x70>)
 801bebc:	e9d3 020e 	ldrd	r0, r2, [r3, #56]	; 0x38
 801bec0:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
 801bec4:	429a      	cmp	r2, r3
 801bec6:	bf08      	it	eq
 801bec8:	4288      	cmpeq	r0, r1
 801beca:	d000      	beq.n	801bece <HAL_SAI_TxCpltCallback+0x5a>
}
 801becc:	bd70      	pop	{r4, r5, r6, pc}
		bOutOfData = 1;
 801bece:	4909      	ldr	r1, [pc, #36]	; (801bef4 <HAL_SAI_TxCpltCallback+0x80>)
 801bed0:	2001      	movs	r0, #1
		unDmaBufMode = 3;
 801bed2:	4b05      	ldr	r3, [pc, #20]	; (801bee8 <HAL_SAI_TxCpltCallback+0x74>)
 801bed4:	2203      	movs	r2, #3
		bOutOfData = 1;
 801bed6:	6008      	str	r0, [r1, #0]
		unDmaBufMode = 3;
 801bed8:	601a      	str	r2, [r3, #0]
}
 801beda:	bd70      	pop	{r4, r5, r6, pc}
 801bedc:	20001b48 	.word	0x20001b48
 801bee0:	2000e94c 	.word	0x2000e94c
 801bee4:	20001b58 	.word	0x20001b58
 801bee8:	2000f7cc 	.word	0x2000f7cc
 801beec:	20013fd0 	.word	0x20013fd0
 801bef0:	20011bd0 	.word	0x20011bd0
 801bef4:	2000e948 	.word	0x2000e948

0801bef8 <HAL_SAI_TxHalfCpltCallback>:
{
 801bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(BufferCtl.filetype == 0) {
 801befa:	4f17      	ldr	r7, [pc, #92]	; (801bf58 <HAL_SAI_TxHalfCpltCallback+0x60>)
 801befc:	7a3b      	ldrb	r3, [r7, #8]
 801befe:	b98b      	cbnz	r3, 801bf24 <HAL_SAI_TxHalfCpltCallback+0x2c>
		while(f_read(&MyFile, &BufferCtl.buff[0],
 801bf00:	4e16      	ldr	r6, [pc, #88]	; (801bf5c <HAL_SAI_TxHalfCpltCallback+0x64>)
 801bf02:	f5a7 5580 	sub.w	r5, r7, #4096	; 0x1000
 801bf06:	4c16      	ldr	r4, [pc, #88]	; (801bf60 <HAL_SAI_TxHalfCpltCallback+0x68>)
 801bf08:	4633      	mov	r3, r6
 801bf0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bf0e:	4629      	mov	r1, r5
 801bf10:	4620      	mov	r0, r4
 801bf12:	f7ef faa3 	bl	800b45c <f_read>
 801bf16:	2800      	cmp	r0, #0
 801bf18:	d1f6      	bne.n	801bf08 <HAL_SAI_TxHalfCpltCallback+0x10>
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 801bf1a:	687a      	ldr	r2, [r7, #4]
	if(BufferCtl.filetype == 1) {
 801bf1c:	7a3b      	ldrb	r3, [r7, #8]
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 801bf1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bf22:	607a      	str	r2, [r7, #4]
	if(BufferCtl.filetype == 1) {
 801bf24:	2b01      	cmp	r3, #1
 801bf26:	d104      	bne.n	801bf32 <HAL_SAI_TxHalfCpltCallback+0x3a>
        unDmaBufMode = 1;
 801bf28:	480e      	ldr	r0, [pc, #56]	; (801bf64 <HAL_SAI_TxHalfCpltCallback+0x6c>)
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 801bf2a:	4a0f      	ldr	r2, [pc, #60]	; (801bf68 <HAL_SAI_TxHalfCpltCallback+0x70>)
 801bf2c:	490f      	ldr	r1, [pc, #60]	; (801bf6c <HAL_SAI_TxHalfCpltCallback+0x74>)
        unDmaBufMode = 1;
 801bf2e:	6003      	str	r3, [r0, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 801bf30:	6011      	str	r1, [r2, #0]
	GetTrackTime();
 801bf32:	f002 f8d7 	bl	801e0e4 <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 801bf36:	4b0a      	ldr	r3, [pc, #40]	; (801bf60 <HAL_SAI_TxHalfCpltCallback+0x68>)
 801bf38:	e9d3 020e 	ldrd	r0, r2, [r3, #56]	; 0x38
 801bf3c:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
 801bf40:	429a      	cmp	r2, r3
 801bf42:	bf08      	it	eq
 801bf44:	4288      	cmpeq	r0, r1
 801bf46:	d000      	beq.n	801bf4a <HAL_SAI_TxHalfCpltCallback+0x52>
}
 801bf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bOutOfData = 1;
 801bf4a:	4909      	ldr	r1, [pc, #36]	; (801bf70 <HAL_SAI_TxHalfCpltCallback+0x78>)
 801bf4c:	2001      	movs	r0, #1
		unDmaBufMode = 3;
 801bf4e:	4b05      	ldr	r3, [pc, #20]	; (801bf64 <HAL_SAI_TxHalfCpltCallback+0x6c>)
 801bf50:	2203      	movs	r2, #3
		bOutOfData = 1;
 801bf52:	6008      	str	r0, [r1, #0]
		unDmaBufMode = 3;
 801bf54:	601a      	str	r2, [r3, #0]
}
 801bf56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf58:	20001b48 	.word	0x20001b48
 801bf5c:	2000e94c 	.word	0x2000e94c
 801bf60:	20001b58 	.word	0x20001b58
 801bf64:	2000f7cc 	.word	0x2000f7cc
 801bf68:	20013fd0 	.word	0x20013fd0
 801bf6c:	2000f7d0 	.word	0x2000f7d0
 801bf70:	2000e948 	.word	0x2000e948

0801bf74 <BSP_AUDIO_OUT_Error_CallBack>:
 801bf74:	4770      	bx	lr
 801bf76:	bf00      	nop

0801bf78 <HAL_SAI_ErrorCallback>:
{
 801bf78:	b510      	push	{r4, lr}
  audio_out_state = HAL_SAI_GetState(&hsai_BlockA2);
 801bf7a:	4807      	ldr	r0, [pc, #28]	; (801bf98 <HAL_SAI_ErrorCallback+0x20>)
 801bf7c:	f7e9 fd26 	bl	80059cc <HAL_SAI_GetState>
 801bf80:	4604      	mov	r4, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 801bf82:	4806      	ldr	r0, [pc, #24]	; (801bf9c <HAL_SAI_ErrorCallback+0x24>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 801bf84:	f004 04ef 	and.w	r4, r4, #239	; 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 801bf88:	f7e9 fd20 	bl	80059cc <HAL_SAI_GetState>
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 801bf8c:	2c02      	cmp	r4, #2
 801bf8e:	d000      	beq.n	801bf92 <HAL_SAI_ErrorCallback+0x1a>
}
 801bf90:	bd10      	pop	{r4, pc}
    BSP_AUDIO_OUT_Error_CallBack();
 801bf92:	f7ff ffef 	bl	801bf74 <BSP_AUDIO_OUT_Error_CallBack>
}
 801bf96:	bd10      	pop	{r4, pc}
 801bf98:	2001864c 	.word	0x2001864c
 801bf9c:	200187c0 	.word	0x200187c0

0801bfa0 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 801bfa0:	b530      	push	{r4, r5, lr}
 801bfa2:	ed2d 8b02 	vpush	{d8}
 801bfa6:	b0a3      	sub	sp, #140	; 0x8c
 801bfa8:	ee08 1a10 	vmov	s16, r1
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 801bfac:	2420      	movs	r4, #32
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 801bfae:	4d17      	ldr	r5, [pc, #92]	; (801c00c <BSP_AUDIO_OUT_ClockConfig+0x6c>)
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 801bfb0:	a801      	add	r0, sp, #4
 801bfb2:	f7e8 fff3 	bl	8004f9c <HAL_RCCEx_GetPeriphCLKConfig>
  uint32_t new_frequency_Hz = (203000000 / 9 * (float)AudioFreq /
 801bfb6:	eef8 7a48 	vcvt.f32.u32	s15, s16
 801bfba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801c010 <BSP_AUDIO_OUT_ClockConfig+0x70>
 801bfbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bfc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bfc6:	ee17 0a90 	vmov	r0, s15
{ 
 801bfca:	4b12      	ldr	r3, [pc, #72]	; (801c014 <BSP_AUDIO_OUT_ClockConfig+0x74>)
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 801bfcc:	2232      	movs	r2, #50	; 0x32
 801bfce:	e003      	b.n	801bfd8 <BSP_AUDIO_OUT_ClockConfig+0x38>
 801bfd0:	3201      	adds	r2, #1
 801bfd2:	f5b2 7fd8 	cmp.w	r2, #432	; 0x1b0
 801bfd6:	d015      	beq.n	801c004 <BSP_AUDIO_OUT_ClockConfig+0x64>
		  set_frequency_Hz = I2SN * 1000000 / I2SDivQ;
 801bfd8:	fbb3 f1f4 	udiv	r1, r3, r4
		  if(set_frequency_Hz >= new_frequency_Hz) break;
 801bfdc:	4288      	cmp	r0, r1
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 801bfde:	442b      	add	r3, r5
		  if(set_frequency_Hz >= new_frequency_Hz) break;
 801bfe0:	d8f6      	bhi.n	801bfd0 <BSP_AUDIO_OUT_ClockConfig+0x30>
  rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 801bfe2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 801bfe6:	2302      	movs	r3, #2
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 801bfe8:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 801bfec:	a801      	add	r0, sp, #4
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = I2SN;
 801bfee:	9202      	str	r2, [sp, #8]
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 801bff0:	9501      	str	r5, [sp, #4]
  rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 801bff2:	9111      	str	r1, [sp, #68]	; 0x44
  rcc_ex_clk_init_struct.PLLI2SDivQ = I2SDivQ;
 801bff4:	940a      	str	r4, [sp, #40]	; 0x28
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 801bff6:	9304      	str	r3, [sp, #16]
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 801bff8:	f7e8 fb38 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
}
 801bffc:	b023      	add	sp, #140	; 0x8c
 801bffe:	ecbd 8b02 	vpop	{d8}
 801c002:	bd30      	pop	{r4, r5, pc}
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 801c004:	3c01      	subs	r4, #1
 801c006:	2c01      	cmp	r4, #1
 801c008:	d1df      	bne.n	801bfca <BSP_AUDIO_OUT_ClockConfig+0x2a>
 801c00a:	e7ea      	b.n	801bfe2 <BSP_AUDIO_OUT_ClockConfig+0x42>
 801c00c:	000f4240 	.word	0x000f4240
 801c010:	447fbb5f 	.word	0x447fbb5f
 801c014:	02faf080 	.word	0x02faf080

0801c018 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
	HAL_I2C_Init(&hi2c3);
 801c018:	4801      	ldr	r0, [pc, #4]	; (801c020 <AUDIO_IO_Init+0x8>)
 801c01a:	f7e6 bed9 	b.w	8002dd0 <HAL_I2C_Init>
 801c01e:	bf00      	nop
 801c020:	20000a50 	.word	0x20000a50

0801c024 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 801c024:	4770      	bx	lr
 801c026:	bf00      	nop

0801c028 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 801c028:	b510      	push	{r4, lr}
 801c02a:	b086      	sub	sp, #24
 801c02c:	4694      	mov	ip, r2

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);

  HAL_I2C_Mem_Write(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2, 1000);
 801c02e:	2302      	movs	r3, #2
{
 801c030:	460a      	mov	r2, r1
  HAL_I2C_Mem_Write(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2, 1000);
 801c032:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801c036:	4601      	mov	r1, r0
 801c038:	f10d 0016 	add.w	r0, sp, #22
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 801c03c:	fa9c fc9c 	rev16.w	ip, ip
  HAL_I2C_Mem_Write(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2, 1000);
 801c040:	9402      	str	r4, [sp, #8]
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 801c042:	f8ad c016 	strh.w	ip, [sp, #22]
  HAL_I2C_Mem_Write(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2, 1000);
 801c046:	e9cd 0300 	strd	r0, r3, [sp]
 801c04a:	4802      	ldr	r0, [pc, #8]	; (801c054 <AUDIO_IO_Write+0x2c>)
 801c04c:	f7e6 ff92 	bl	8002f74 <HAL_I2C_Mem_Write>
}
 801c050:	b006      	add	sp, #24
 801c052:	bd10      	pop	{r4, pc}
 801c054:	20000a50 	.word	0x20000a50

0801c058 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 801c058:	b530      	push	{r4, r5, lr}
 801c05a:	b087      	sub	sp, #28
 801c05c:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;

  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2, 1000);
 801c05e:	2302      	movs	r3, #2
 801c060:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801c064:	f10d 0416 	add.w	r4, sp, #22
  uint16_t read_value = 0, tmp = 0;
 801c068:	2100      	movs	r1, #0
  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2, 1000);
 801c06a:	9502      	str	r5, [sp, #8]
  uint16_t read_value = 0, tmp = 0;
 801c06c:	f8ad 1016 	strh.w	r1, [sp, #22]
  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2, 1000);
 801c070:	4601      	mov	r1, r0
 801c072:	4805      	ldr	r0, [pc, #20]	; (801c088 <AUDIO_IO_Read+0x30>)
 801c074:	e9cd 4300 	strd	r4, r3, [sp]
 801c078:	f7e7 f8ea 	bl	8003250 <HAL_I2C_Mem_Read>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 801c07c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801c080:	ba40      	rev16	r0, r0

  read_value = tmp;

  return read_value;
}
 801c082:	b280      	uxth	r0, r0
 801c084:	b007      	add	sp, #28
 801c086:	bd30      	pop	{r4, r5, pc}
 801c088:	20000a50 	.word	0x20000a50

0801c08c <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 801c08c:	f7e4 bff6 	b.w	800107c <HAL_Delay>

0801c090 <Mp3FillReadBuffer>:
}

UINT Mp3FillReadBuffer(BYTE* pInData, UINT unInDataLeft, FIL* pInFile)
{
 801c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c094:	460c      	mov	r4, r1
	// move last, small chunk from end of buffer to start, then fill with new data
	memmove(BufferCtl.buff, pInData, unInDataLeft);
 801c096:	4f12      	ldr	r7, [pc, #72]	; (801c0e0 <Mp3FillReadBuffer+0x50>)
{
 801c098:	b082      	sub	sp, #8
 801c09a:	4616      	mov	r6, r2

	UINT unSpaceLeft = MP3_INBUF_SIZE - unInDataLeft;
 801c09c:	f5c4 5880 	rsb	r8, r4, #4096	; 0x1000
	memmove(BufferCtl.buff, pInData, unInDataLeft);
 801c0a0:	4601      	mov	r1, r0
 801c0a2:	4622      	mov	r2, r4
 801c0a4:	4638      	mov	r0, r7
	UINT unRead = 0;
 801c0a6:	2500      	movs	r5, #0
	memmove(BufferCtl.buff, pInData, unInDataLeft);
 801c0a8:	f003 f83a 	bl	801f120 <memmove>
	FRESULT fr = f_read(pInFile, BufferCtl.buff + unInDataLeft, unSpaceLeft, &unRead);
 801c0ac:	4630      	mov	r0, r6
 801c0ae:	ab01      	add	r3, sp, #4
 801c0b0:	4642      	mov	r2, r8
 801c0b2:	1939      	adds	r1, r7, r4
	UINT unRead = 0;
 801c0b4:	9501      	str	r5, [sp, #4]
	FRESULT fr = f_read(pInFile, BufferCtl.buff + unInDataLeft, unSpaceLeft, &unRead);
 801c0b6:	f7ef f9d1 	bl	800b45c <f_read>
	if(fr != FR_OK)
 801c0ba:	b900      	cbnz	r0, 801c0be <Mp3FillReadBuffer+0x2e>
	{
		unRead = 0;
	}
	if(unRead < unSpaceLeft)
 801c0bc:	9d01      	ldr	r5, [sp, #4]
 801c0be:	45a8      	cmp	r8, r5
 801c0c0:	d803      	bhi.n	801c0ca <Mp3FillReadBuffer+0x3a>
	{
	    // zero-pad to avoid finding false sync word after last frame (from old data in readBuf)
	    memset(BufferCtl.buff + unInDataLeft + unRead, 0, unSpaceLeft - unRead);
	}
	return unRead;
}
 801c0c2:	4628      	mov	r0, r5
 801c0c4:	b002      	add	sp, #8
 801c0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    memset(BufferCtl.buff + unInDataLeft + unRead, 0, unSpaceLeft - unRead);
 801c0ca:	1960      	adds	r0, r4, r5
 801c0cc:	eba8 0205 	sub.w	r2, r8, r5
 801c0d0:	2100      	movs	r1, #0
 801c0d2:	4438      	add	r0, r7
 801c0d4:	f003 f83e 	bl	801f154 <memset>
}
 801c0d8:	4628      	mov	r0, r5
 801c0da:	b002      	add	sp, #8
 801c0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0e0:	20000b48 	.word	0x20000b48

0801c0e4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 801c0e4:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 801c0e6:	4b0d      	ldr	r3, [pc, #52]	; (801c11c <BSP_TS_Init+0x38>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 801c0e8:	4c0d      	ldr	r4, [pc, #52]	; (801c120 <BSP_TS_Init+0x3c>)
  tsYBoundary = ts_SizeY;
 801c0ea:	4a0e      	ldr	r2, [pc, #56]	; (801c124 <BSP_TS_Init+0x40>)
  tsXBoundary = ts_SizeX;
 801c0ec:	8018      	strh	r0, [r3, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 801c0ee:	2070      	movs	r0, #112	; 0x70
 801c0f0:	6823      	ldr	r3, [r4, #0]
  tsYBoundary = ts_SizeY;
 801c0f2:	8011      	strh	r1, [r2, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 801c0f4:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 801c0f6:	6863      	ldr	r3, [r4, #4]
 801c0f8:	2070      	movs	r0, #112	; 0x70
 801c0fa:	4798      	blx	r3
 801c0fc:	2851      	cmp	r0, #81	; 0x51
 801c0fe:	d001      	beq.n	801c104 <BSP_TS_Init+0x20>
    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 801c100:	2003      	movs	r0, #3
  }

  return status;
}
 801c102:	bd10      	pop	{r4, pc}
    I2cAddress = TS_I2C_ADDRESS;
 801c104:	2070      	movs	r0, #112	; 0x70
 801c106:	4908      	ldr	r1, [pc, #32]	; (801c128 <BSP_TS_Init+0x44>)
    tsDriver = &ft5336_ts_drv;
 801c108:	4b08      	ldr	r3, [pc, #32]	; (801c12c <BSP_TS_Init+0x48>)
    tsOrientation = TS_SWAP_XY;
 801c10a:	4a09      	ldr	r2, [pc, #36]	; (801c130 <BSP_TS_Init+0x4c>)
    I2cAddress = TS_I2C_ADDRESS;
 801c10c:	7008      	strb	r0, [r1, #0]
    tsOrientation = TS_SWAP_XY;
 801c10e:	2108      	movs	r1, #8
    tsDriver = &ft5336_ts_drv;
 801c110:	601c      	str	r4, [r3, #0]
    tsDriver->Start(I2cAddress);
 801c112:	68e3      	ldr	r3, [r4, #12]
    tsOrientation = TS_SWAP_XY;
 801c114:	7011      	strb	r1, [r2, #0]
    tsDriver->Start(I2cAddress);
 801c116:	4798      	blx	r3
  uint8_t status = TS_OK;
 801c118:	2000      	movs	r0, #0
}
 801c11a:	bd10      	pop	{r4, pc}
 801c11c:	20018876 	.word	0x20018876
 801c120:	2000002c 	.word	0x2000002c
 801c124:	20018878 	.word	0x20018878
 801c128:	20018844 	.word	0x20018844
 801c12c:	20018870 	.word	0x20018870
 801c130:	20018874 	.word	0x20018874
 801c134:	00000000 	.word	0x00000000

0801c138 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 801c138:	b500      	push	{lr}
	GPIO_InitTypeDef gpio_init_structure;

	/* Configure Interrupt mode for SD detection pin */
	gpio_init_structure.Pin = TS_INT_PIN;
 801c13a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 801c178 <BSP_TS_ITConfig+0x40>
{
 801c13e:	b087      	sub	sp, #28
	gpio_init_structure.Pin = TS_INT_PIN;
 801c140:	2302      	movs	r3, #2
 801c142:	2200      	movs	r2, #0
	gpio_init_structure.Pull = GPIO_NOPULL;
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
	gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
	HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 801c144:	480e      	ldr	r0, [pc, #56]	; (801c180 <BSP_TS_ITConfig+0x48>)
 801c146:	4669      	mov	r1, sp
	gpio_init_structure.Pin = TS_INT_PIN;
 801c148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c14c:	ed8d 7b00 	vstr	d7, [sp]
	HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 801c150:	f7e5 fda4 	bl	8001c9c <HAL_GPIO_Init>

	/* Enable and set Touch screen EXTI Interrupt to the lowest priority */
	HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 801c154:	210f      	movs	r1, #15
 801c156:	2200      	movs	r2, #0
 801c158:	2028      	movs	r0, #40	; 0x28
 801c15a:	f7e4 ffbf 	bl	80010dc <HAL_NVIC_SetPriority>
	/* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 801c15e:	4b09      	ldr	r3, [pc, #36]	; (801c184 <BSP_TS_ITConfig+0x4c>)
 801c160:	4a09      	ldr	r2, [pc, #36]	; (801c188 <BSP_TS_ITConfig+0x50>)
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	7810      	ldrb	r0, [r2, #0]
 801c166:	699b      	ldr	r3, [r3, #24]
 801c168:	4798      	blx	r3

  return TS_OK;  
}
 801c16a:	2000      	movs	r0, #0
 801c16c:	b007      	add	sp, #28
 801c16e:	f85d fb04 	ldr.w	pc, [sp], #4
 801c172:	bf00      	nop
 801c174:	f3af 8000 	nop.w
 801c178:	00002000 	.word	0x00002000
 801c17c:	10110000 	.word	0x10110000
 801c180:	40022000 	.word	0x40022000
 801c184:	20018870 	.word	0x20018870
 801c188:	20018844 	.word	0x20018844

0801c18c <BSP_TS_GetState>:
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 801c18c:	4b7a      	ldr	r3, [pc, #488]	; (801c378 <BSP_TS_GetState+0x1ec>)
 801c18e:	4a7b      	ldr	r2, [pc, #492]	; (801c37c <BSP_TS_GetState+0x1f0>)
 801c190:	681b      	ldr	r3, [r3, #0]
{
 801c192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t weight = 0;
 801c196:	2400      	movs	r4, #0
{
 801c198:	b095      	sub	sp, #84	; 0x54
 801c19a:	4605      	mov	r5, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 801c19c:	691b      	ldr	r3, [r3, #16]
{
 801c19e:	9003      	str	r0, [sp, #12]
  uint32_t event = 0;
 801c1a0:	9406      	str	r4, [sp, #24]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 801c1a2:	7810      	ldrb	r0, [r2, #0]
  uint32_t area = 0;
 801c1a4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 801c1a8:	4798      	blx	r3
 801c1aa:	7028      	strb	r0, [r5, #0]
  
  if(TS_State->touchDetected)
 801c1ac:	2800      	cmp	r0, #0
 801c1ae:	f000 80a4 	beq.w	801c2fa <BSP_TS_GetState+0x16e>
 801c1b2:	462b      	mov	r3, r5
 801c1b4:	ae0e      	add	r6, sp, #56	; 0x38
 801c1b6:	ad11      	add	r5, sp, #68	; 0x44
 801c1b8:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801c390 <BSP_TS_GetState+0x204>
 801c1bc:	f103 0916 	add.w	r9, r3, #22
 801c1c0:	f103 0b02 	add.w	fp, r3, #2
 801c1c4:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 801c1c8:	af08      	add	r7, sp, #32
  {
    for(index=0; index < TS_State->touchDetected; index++)
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 801c1ca:	4b6b      	ldr	r3, [pc, #428]	; (801c378 <BSP_TS_GetState+0x1ec>)
 801c1cc:	462a      	mov	r2, r5
 801c1ce:	486b      	ldr	r0, [pc, #428]	; (801c37c <BSP_TS_GetState+0x1f0>)
 801c1d0:	4631      	mov	r1, r6
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	7800      	ldrb	r0, [r0, #0]
 801c1d6:	695b      	ldr	r3, [r3, #20]
 801c1d8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 801c1da:	4b69      	ldr	r3, [pc, #420]	; (801c380 <BSP_TS_GetState+0x1f4>)
 801c1dc:	781b      	ldrb	r3, [r3, #0]
 801c1de:	2b01      	cmp	r3, #1
 801c1e0:	f000 8094 	beq.w	801c30c <BSP_TS_GetState+0x180>
      {
        x[index] = brute_x[index];
        y[index] = brute_y[index];
      }

      if(tsOrientation & TS_SWAP_X)
 801c1e4:	0799      	lsls	r1, r3, #30
 801c1e6:	d503      	bpl.n	801c1f0 <BSP_TS_GetState+0x64>
      {
        x[index] = 4096 - brute_x[index];
 801c1e8:	8832      	ldrh	r2, [r6, #0]
 801c1ea:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 801c1ee:	803a      	strh	r2, [r7, #0]
      }

      if(tsOrientation & TS_SWAP_Y)
 801c1f0:	075a      	lsls	r2, r3, #29
 801c1f2:	d504      	bpl.n	801c1fe <BSP_TS_GetState+0x72>
      {
        y[index] = 4096 - brute_y[index];
 801c1f4:	882a      	ldrh	r2, [r5, #0]
 801c1f6:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 801c1fa:	f8a8 2000 	strh.w	r2, [r8]
      }

      if(tsOrientation & TS_SWAP_XY)
 801c1fe:	071b      	lsls	r3, r3, #28
 801c200:	d47e      	bmi.n	801c300 <BSP_TS_GetState+0x174>
      {
        y[index] = brute_x[index];
        x[index] = brute_y[index];
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 801c202:	883b      	ldrh	r3, [r7, #0]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 801c204:	f8b8 2000 	ldrh.w	r2, [r8]
 801c208:	485e      	ldr	r0, [pc, #376]	; (801c384 <BSP_TS_GetState+0x1f8>)
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 801c20a:	f8da e000 	ldr.w	lr, [sl]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 801c20e:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 801c212:	4573      	cmp	r3, lr
 801c214:	bf8c      	ite	hi
 801c216:	eba3 010e 	subhi.w	r1, r3, lr
 801c21a:	ebae 0103 	subls.w	r1, lr, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 801c21e:	4562      	cmp	r2, ip
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 801c220:	b289      	uxth	r1, r1
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 801c222:	bf8c      	ite	hi
 801c224:	eba2 000c 	subhi.w	r0, r2, ip
 801c228:	ebac 0002 	subls.w	r0, ip, r2
 801c22c:	b280      	uxth	r0, r0

      if ((x_diff + y_diff) > 5)
 801c22e:	4401      	add	r1, r0
 801c230:	2905      	cmp	r1, #5
 801c232:	dd06      	ble.n	801c242 <BSP_TS_GetState+0xb6>
      {
        _x[index] = x[index];
        _y[index] = y[index];
 801c234:	4953      	ldr	r1, [pc, #332]	; (801c384 <BSP_TS_GetState+0x1f8>)
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 801c236:	4694      	mov	ip, r2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 801c238:	469e      	mov	lr, r3
        _x[index] = x[index];
 801c23a:	f8ca 3000 	str.w	r3, [sl]
        _y[index] = y[index];
 801c23e:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 801c242:	494e      	ldr	r1, [pc, #312]	; (801c37c <BSP_TS_GetState+0x1f0>)
 801c244:	7808      	ldrb	r0, [r1, #0]
 801c246:	2870      	cmp	r0, #112	; 0x70
 801c248:	d00b      	beq.n	801c262 <BSP_TS_GetState+0xd6>
        TS_State->touchY[index] = y[index];
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 801c24a:	4b4f      	ldr	r3, [pc, #316]	; (801c388 <BSP_TS_GetState+0x1fc>)
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 801c24c:	4a4f      	ldr	r2, [pc, #316]	; (801c38c <BSP_TS_GetState+0x200>)
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 801c24e:	881b      	ldrh	r3, [r3, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 801c250:	8812      	ldrh	r2, [r2, #0]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 801c252:	fb0e f303 	mul.w	r3, lr, r3
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 801c256:	fb0c f202 	mul.w	r2, ip, r2
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 801c25a:	f3c3 330f 	ubfx	r3, r3, #12, #16
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 801c25e:	f3c2 320f 	ubfx	r2, r2, #12, #16
 801c262:	f8ab 200a 	strh.w	r2, [fp, #10]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 801c266:	4621      	mov	r1, r4
 801c268:	f82b 3b02 	strh.w	r3, [fp], #2
 801c26c:	ab06      	add	r3, sp, #24
 801c26e:	aa04      	add	r2, sp, #16
 801c270:	9300      	str	r3, [sp, #0]
 801c272:	ab05      	add	r3, sp, #20
 801c274:	f7fc ff2e 	bl	80190d4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 801c278:	9b04      	ldr	r3, [sp, #16]
 801c27a:	f809 3b01 	strb.w	r3, [r9], #1
      TS_State->touchArea[index]   = area;
 801c27e:	9b05      	ldr	r3, [sp, #20]
 801c280:	f889 3009 	strb.w	r3, [r9, #9]

      /* Remap touch event */
      switch(event)
 801c284:	9b06      	ldr	r3, [sp, #24]
 801c286:	2b03      	cmp	r3, #3
 801c288:	d806      	bhi.n	801c298 <BSP_TS_GetState+0x10c>
 801c28a:	e8df f003 	tbb	[pc, r3]
 801c28e:	4e02      	.short	0x4e02
 801c290:	454a      	.short	0x454a
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 801c292:	2301      	movs	r3, #1
 801c294:	f889 3004 	strb.w	r3, [r9, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 801c298:	9b03      	ldr	r3, [sp, #12]
 801c29a:	3401      	adds	r4, #1
 801c29c:	3602      	adds	r6, #2
 801c29e:	3502      	adds	r5, #2
 801c2a0:	781b      	ldrb	r3, [r3, #0]
 801c2a2:	f10a 0a04 	add.w	sl, sl, #4
 801c2a6:	f108 0802 	add.w	r8, r8, #2
 801c2aa:	3702      	adds	r7, #2
 801c2ac:	42a3      	cmp	r3, r4
 801c2ae:	d88c      	bhi.n	801c1ca <BSP_TS_GetState+0x3e>
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 801c2b0:	4b32      	ldr	r3, [pc, #200]	; (801c37c <BSP_TS_GetState+0x1f0>)
  uint32_t gestureId = 0;
 801c2b2:	2400      	movs	r4, #0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 801c2b4:	a907      	add	r1, sp, #28
 801c2b6:	7818      	ldrb	r0, [r3, #0]
  uint32_t gestureId = 0;
 801c2b8:	9407      	str	r4, [sp, #28]
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 801c2ba:	f7fc fef9 	bl	80190b0 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 801c2be:	9b07      	ldr	r3, [sp, #28]
 801c2c0:	2b1c      	cmp	r3, #28
 801c2c2:	d812      	bhi.n	801c2ea <BSP_TS_GetState+0x15e>
 801c2c4:	2b1c      	cmp	r3, #28
 801c2c6:	d834      	bhi.n	801c332 <BSP_TS_GetState+0x1a6>
 801c2c8:	e8df f003 	tbb	[pc, r3]
 801c2cc:	33333350 	.word	0x33333350
 801c2d0:	33333333 	.word	0x33333333
 801c2d4:	33333333 	.word	0x33333333
 801c2d8:	33333333 	.word	0x33333333
 801c2dc:	3333333c 	.word	0x3333333c
 801c2e0:	33333341 	.word	0x33333341
 801c2e4:	33333346 	.word	0x33333346
 801c2e8:	4b          	.byte	0x4b
 801c2e9:	00          	.byte	0x00
 801c2ea:	2b40      	cmp	r3, #64	; 0x40
 801c2ec:	d025      	beq.n	801c33a <BSP_TS_GetState+0x1ae>
 801c2ee:	2b49      	cmp	r3, #73	; 0x49
 801c2f0:	d11f      	bne.n	801c332 <BSP_TS_GetState+0x1a6>
      break;
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 801c2f2:	2306      	movs	r3, #6
 801c2f4:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 801c2f6:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 801c2f8:	6293      	str	r3, [r2, #40]	; 0x28
}
 801c2fa:	b015      	add	sp, #84	; 0x54
 801c2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y[index] = brute_x[index];
 801c300:	8832      	ldrh	r2, [r6, #0]
        x[index] = brute_y[index];
 801c302:	882b      	ldrh	r3, [r5, #0]
        y[index] = brute_x[index];
 801c304:	f8a8 2000 	strh.w	r2, [r8]
        x[index] = brute_y[index];
 801c308:	803b      	strh	r3, [r7, #0]
 801c30a:	e77d      	b.n	801c208 <BSP_TS_GetState+0x7c>
        x[index] = brute_x[index];
 801c30c:	8832      	ldrh	r2, [r6, #0]
 801c30e:	803a      	strh	r2, [r7, #0]
        y[index] = brute_y[index];
 801c310:	882a      	ldrh	r2, [r5, #0]
 801c312:	f8a8 2000 	strh.w	r2, [r8]
      if(tsOrientation & TS_SWAP_Y)
 801c316:	e772      	b.n	801c1fe <BSP_TS_GetState+0x72>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 801c318:	f04f 0300 	mov.w	r3, #0
 801c31c:	f889 3004 	strb.w	r3, [r9, #4]
          break;
 801c320:	e7ba      	b.n	801c298 <BSP_TS_GetState+0x10c>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 801c322:	2303      	movs	r3, #3
 801c324:	f889 3004 	strb.w	r3, [r9, #4]
          break;
 801c328:	e7b6      	b.n	801c298 <BSP_TS_GetState+0x10c>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 801c32a:	2302      	movs	r3, #2
 801c32c:	f889 3004 	strb.w	r3, [r9, #4]
          break;
 801c330:	e7b2      	b.n	801c298 <BSP_TS_GetState+0x10c>
  switch(gestureId)
 801c332:	2001      	movs	r0, #1
}
 801c334:	b015      	add	sp, #84	; 0x54
 801c336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 801c33a:	2305      	movs	r3, #5
 801c33c:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 801c33e:	4620      	mov	r0, r4
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 801c340:	6293      	str	r3, [r2, #40]	; 0x28
      break;
 801c342:	e7da      	b.n	801c2fa <BSP_TS_GetState+0x16e>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 801c344:	2301      	movs	r3, #1
 801c346:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 801c348:	2000      	movs	r0, #0
      TS_State->gestureId = GEST_ID_MOVE_UP;
 801c34a:	6293      	str	r3, [r2, #40]	; 0x28
      break;
 801c34c:	e7d5      	b.n	801c2fa <BSP_TS_GetState+0x16e>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 801c34e:	2302      	movs	r3, #2
 801c350:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 801c352:	2000      	movs	r0, #0
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 801c354:	6293      	str	r3, [r2, #40]	; 0x28
      break;
 801c356:	e7d0      	b.n	801c2fa <BSP_TS_GetState+0x16e>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 801c358:	2303      	movs	r3, #3
 801c35a:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 801c35c:	2000      	movs	r0, #0
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 801c35e:	6293      	str	r3, [r2, #40]	; 0x28
      break;
 801c360:	e7cb      	b.n	801c2fa <BSP_TS_GetState+0x16e>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 801c362:	2304      	movs	r3, #4
 801c364:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 801c366:	2000      	movs	r0, #0
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 801c368:	6293      	str	r3, [r2, #40]	; 0x28
      break;
 801c36a:	e7c6      	b.n	801c2fa <BSP_TS_GetState+0x16e>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 801c36c:	2300      	movs	r3, #0
 801c36e:	9a03      	ldr	r2, [sp, #12]
  uint8_t  ts_status = TS_OK;
 801c370:	4618      	mov	r0, r3
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 801c372:	6293      	str	r3, [r2, #40]	; 0x28
      break;
 801c374:	e7c1      	b.n	801c2fa <BSP_TS_GetState+0x16e>
 801c376:	bf00      	nop
 801c378:	20018870 	.word	0x20018870
 801c37c:	20018844 	.word	0x20018844
 801c380:	20018874 	.word	0x20018874
 801c384:	2001885c 	.word	0x2001885c
 801c388:	20018876 	.word	0x20018876
 801c38c:	20018878 	.word	0x20018878
 801c390:	20018848 	.word	0x20018848

0801c394 <BSP_TS_ITClear>:
  * @brief  Clears all touch screen interrupts.
  */
void BSP_TS_ITClear(void)
{
  /* Clear TS IT pending bits */
  tsDriver->ClearIT(I2cAddress); 
 801c394:	4b02      	ldr	r3, [pc, #8]	; (801c3a0 <BSP_TS_ITClear+0xc>)
 801c396:	4a03      	ldr	r2, [pc, #12]	; (801c3a4 <BSP_TS_ITClear+0x10>)
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	7810      	ldrb	r0, [r2, #0]
 801c39c:	69db      	ldr	r3, [r3, #28]
 801c39e:	4718      	bx	r3
 801c3a0:	20018870 	.word	0x20018870
 801c3a4:	20018844 	.word	0x20018844

0801c3a8 <BSP_TS_ResetTouchData>:
uint8_t BSP_TS_ResetTouchData(TS_StateTypeDef *TS_State)
{
  uint8_t ts_status = TS_ERROR;
  uint32_t index;

  if (TS_State != (TS_StateTypeDef *)NULL)
 801c3a8:	b160      	cbz	r0, 801c3c4 <BSP_TS_ResetTouchData+0x1c>
  {
    TS_State->gestureId = GEST_ID_NO_GESTURE;
    TS_State->touchDetected = 0;
 801c3aa:	4603      	mov	r3, r0

    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
    {
      TS_State->touchX[index]       = 0;
 801c3ac:	2223      	movs	r2, #35	; 0x23
{
 801c3ae:	b510      	push	{r4, lr}
    TS_State->gestureId = GEST_ID_NO_GESTURE;
 801c3b0:	2400      	movs	r4, #0
 801c3b2:	6284      	str	r4, [r0, #40]	; 0x28
      TS_State->touchX[index]       = 0;
 801c3b4:	4621      	mov	r1, r4
    TS_State->touchDetected = 0;
 801c3b6:	f803 4b02 	strb.w	r4, [r3], #2
      TS_State->touchX[index]       = 0;
 801c3ba:	4618      	mov	r0, r3
 801c3bc:	f002 feca 	bl	801f154 <memset>
      TS_State->touchArea[index]    = 0;
      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
      TS_State->touchWeight[index]  = 0;
    }

    ts_status = TS_OK;
 801c3c0:	4620      	mov	r0, r4

  } /* of if (TS_State != (TS_StateTypeDef *)NULL) */

  return (ts_status);
}
 801c3c2:	bd10      	pop	{r4, pc}
  uint8_t ts_status = TS_ERROR;
 801c3c4:	2001      	movs	r0, #1
}
 801c3c6:	4770      	bx	lr

0801c3c8 <TS_IO_Init>:
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
	HAL_I2C_Init(&hi2c3);
 801c3c8:	4801      	ldr	r0, [pc, #4]	; (801c3d0 <TS_IO_Init+0x8>)
 801c3ca:	f7e6 bd01 	b.w	8002dd0 <HAL_I2C_Init>
 801c3ce:	bf00      	nop
 801c3d0:	20000a50 	.word	0x20000a50

0801c3d4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 801c3d4:	b510      	push	{r4, lr}
 801c3d6:	b086      	sub	sp, #24
 801c3d8:	468e      	mov	lr, r1
	HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1, 1000);
 801c3da:	2301      	movs	r3, #1
 801c3dc:	4601      	mov	r1, r0
 801c3de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801c3e2:	f10d 0017 	add.w	r0, sp, #23
{
 801c3e6:	4694      	mov	ip, r2
	HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1, 1000);
 801c3e8:	4672      	mov	r2, lr
 801c3ea:	9000      	str	r0, [sp, #0]
 801c3ec:	9402      	str	r4, [sp, #8]
 801c3ee:	9301      	str	r3, [sp, #4]
 801c3f0:	4803      	ldr	r0, [pc, #12]	; (801c400 <TS_IO_Write+0x2c>)
{
 801c3f2:	f88d c017 	strb.w	ip, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1, 1000);
 801c3f6:	f7e6 fdbd 	bl	8002f74 <HAL_I2C_Mem_Write>
}
 801c3fa:	b006      	add	sp, #24
 801c3fc:	bd10      	pop	{r4, pc}
 801c3fe:	bf00      	nop
 801c400:	20000a50 	.word	0x20000a50

0801c404 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 801c404:	b530      	push	{r4, r5, lr}
 801c406:	b087      	sub	sp, #28
 801c408:	460a      	mov	r2, r1
  uint8_t read_value = 0;
  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1, 1000);
 801c40a:	2301      	movs	r3, #1
 801c40c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801c410:	f10d 0417 	add.w	r4, sp, #23
  uint8_t read_value = 0;
 801c414:	2100      	movs	r1, #0
  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1, 1000);
 801c416:	9502      	str	r5, [sp, #8]
  uint8_t read_value = 0;
 801c418:	f88d 1017 	strb.w	r1, [sp, #23]
  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1, 1000);
 801c41c:	4601      	mov	r1, r0
 801c41e:	4804      	ldr	r0, [pc, #16]	; (801c430 <TS_IO_Read+0x2c>)
 801c420:	e9cd 4300 	strd	r4, r3, [sp]
 801c424:	f7e6 ff14 	bl	8003250 <HAL_I2C_Mem_Read>
  return read_value;
}
 801c428:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801c42c:	b007      	add	sp, #28
 801c42e:	bd30      	pop	{r4, r5, pc}
 801c430:	20000a50 	.word	0x20000a50

0801c434 <TS_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 801c434:	f7e4 be22 	b.w	800107c <HAL_Delay>

0801c438 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801c438:	4b0a      	ldr	r3, [pc, #40]	; (801c464 <HAL_MspInit+0x2c>)
{
 801c43a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 801c43c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c43e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801c442:	641a      	str	r2, [r3, #64]	; 0x40
 801c444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c446:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801c44a:	9200      	str	r2, [sp, #0]
 801c44c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c44e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c454:	645a      	str	r2, [r3, #68]	; 0x44
 801c456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c45c:	9301      	str	r3, [sp, #4]
 801c45e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801c460:	b002      	add	sp, #8
 801c462:	4770      	bx	lr
 801c464:	40023800 	.word	0x40023800

0801c468 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801c468:	4770      	bx	lr
 801c46a:	bf00      	nop

0801c46c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801c46c:	e7fe      	b.n	801c46c <HardFault_Handler>
 801c46e:	bf00      	nop

0801c470 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801c470:	e7fe      	b.n	801c470 <MemManage_Handler>
 801c472:	bf00      	nop

0801c474 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801c474:	e7fe      	b.n	801c474 <BusFault_Handler>
 801c476:	bf00      	nop

0801c478 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801c478:	e7fe      	b.n	801c478 <UsageFault_Handler>
 801c47a:	bf00      	nop

0801c47c <SVC_Handler>:
 801c47c:	4770      	bx	lr
 801c47e:	bf00      	nop

0801c480 <DebugMon_Handler>:
 801c480:	4770      	bx	lr
 801c482:	bf00      	nop

0801c484 <PendSV_Handler>:
 801c484:	4770      	bx	lr
 801c486:	bf00      	nop

0801c488 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801c488:	f7e4 bde6 	b.w	8001058 <HAL_IncTick>

0801c48c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 801c48c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 801c48e:	4a05      	ldr	r2, [pc, #20]	; (801c4a4 <EXTI0_IRQHandler+0x18>)
 801c490:	2304      	movs	r3, #4
 801c492:	4905      	ldr	r1, [pc, #20]	; (801c4a8 <EXTI0_IRQHandler+0x1c>)
 801c494:	4805      	ldr	r0, [pc, #20]	; (801c4ac <EXTI0_IRQHandler+0x20>)
 801c496:	f7e9 fc67 	bl	8005d68 <HAL_SPI_TransmitReceive_IT>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_NSS_Pin);
 801c49a:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 801c49c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(SPI2_NSS_Pin);
 801c4a0:	f7e5 bdc6 	b.w	8002030 <HAL_GPIO_EXTI_IRQHandler>
 801c4a4:	2000f78c 	.word	0x2000f78c
 801c4a8:	20000058 	.word	0x20000058
 801c4ac:	20018758 	.word	0x20018758

0801c4b0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KBD_INT_Pin);
 801c4b0:	2004      	movs	r0, #4
 801c4b2:	f7e5 bdbd 	b.w	8002030 <HAL_GPIO_EXTI_IRQHandler>
 801c4b6:	bf00      	nop

0801c4b8 <TIM1_BRK_TIM9_IRQHandler>:
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if(button_flag & (1 << 0)) {
 801c4b8:	4913      	ldr	r1, [pc, #76]	; (801c508 <TIM1_BRK_TIM9_IRQHandler+0x50>)
{
 801c4ba:	b508      	push	{r3, lr}
	if(button_flag & (1 << 0)) {
 801c4bc:	880b      	ldrh	r3, [r1, #0]
 801c4be:	07da      	lsls	r2, r3, #31
 801c4c0:	d510      	bpl.n	801c4e4 <TIM1_BRK_TIM9_IRQHandler+0x2c>
		if(display.cuemode == 0) display.cuemode = 1;
 801c4c2:	4812      	ldr	r0, [pc, #72]	; (801c50c <TIM1_BRK_TIM9_IRQHandler+0x54>)
		else display.cuemode = 0;
		button_flag ^= (1 << 0);
 801c4c4:	f083 0301 	eor.w	r3, r3, #1
		if(display.cuemode == 0) display.cuemode = 1;
 801c4c8:	7882      	ldrb	r2, [r0, #2]
		button_flag ^= (1 << 0);
 801c4ca:	800b      	strh	r3, [r1, #0]
		if(display.cuemode == 0) display.cuemode = 1;
 801c4cc:	fab2 f382 	clz	r3, r2
 801c4d0:	095b      	lsrs	r3, r3, #5
 801c4d2:	7083      	strb	r3, [r0, #2]
	else if(button_flag & (1 << 3)) {
		if(display.quantize == 0) display.quantize = 1;
		else display.quantize = 0;
		button_flag ^= (1 << 3);
	}
	HAL_TIM_Base_Stop_IT(&htim9);
 801c4d4:	480e      	ldr	r0, [pc, #56]	; (801c510 <TIM1_BRK_TIM9_IRQHandler+0x58>)
 801c4d6:	f7ea f853 	bl	8006580 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 801c4da:	480d      	ldr	r0, [pc, #52]	; (801c510 <TIM1_BRK_TIM9_IRQHandler+0x58>)
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 801c4dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim9);
 801c4e0:	f7ea bbaa 	b.w	8006c38 <HAL_TIM_IRQHandler>
	else if(button_flag & (1 << 1)) {
 801c4e4:	0798      	lsls	r0, r3, #30
 801c4e6:	d503      	bpl.n	801c4f0 <TIM1_BRK_TIM9_IRQHandler+0x38>
		button_flag ^= (1 << 1);
 801c4e8:	f083 0302 	eor.w	r3, r3, #2
 801c4ec:	800b      	strh	r3, [r1, #0]
 801c4ee:	e7f1      	b.n	801c4d4 <TIM1_BRK_TIM9_IRQHandler+0x1c>
	else if(button_flag & (1 << 3)) {
 801c4f0:	071a      	lsls	r2, r3, #28
 801c4f2:	d5ef      	bpl.n	801c4d4 <TIM1_BRK_TIM9_IRQHandler+0x1c>
		if(display.quantize == 0) display.quantize = 1;
 801c4f4:	4805      	ldr	r0, [pc, #20]	; (801c50c <TIM1_BRK_TIM9_IRQHandler+0x54>)
		button_flag ^= (1 << 3);
 801c4f6:	f083 0308 	eor.w	r3, r3, #8
		if(display.quantize == 0) display.quantize = 1;
 801c4fa:	7c42      	ldrb	r2, [r0, #17]
		button_flag ^= (1 << 3);
 801c4fc:	800b      	strh	r3, [r1, #0]
		if(display.quantize == 0) display.quantize = 1;
 801c4fe:	fab2 f382 	clz	r3, r2
 801c502:	095b      	lsrs	r3, r3, #5
 801c504:	7443      	strb	r3, [r0, #17]
		button_flag ^= (1 << 3);
 801c506:	e7e5      	b.n	801c4d4 <TIM1_BRK_TIM9_IRQHandler+0x1c>
 801c508:	2001887a 	.word	0x2001887a
 801c50c:	20000988 	.word	0x20000988
 801c510:	200189dc 	.word	0x200189dc

0801c514 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 801c514:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
	ClearLayer();
	SetBeatGrid();
	if(menu_mode == 0) DrawSpectrum();
 801c516:	4c0d      	ldr	r4, [pc, #52]	; (801c54c <TIM4_IRQHandler+0x38>)
	ClearLayer();
 801c518:	f7f7 f8ba 	bl	8013690 <ClearLayer>
	SetBeatGrid();
 801c51c:	f7f7 f902 	bl	8013724 <SetBeatGrid>
	if(menu_mode == 0) DrawSpectrum();
 801c520:	f994 3000 	ldrsb.w	r3, [r4]
 801c524:	b163      	cbz	r3, 801c540 <TIM4_IRQHandler+0x2c>
	if(menu_mode != 3) 	DrawLowSpectrum();
 801c526:	2b03      	cmp	r3, #3
 801c528:	d001      	beq.n	801c52e <TIM4_IRQHandler+0x1a>
 801c52a:	f7f7 fe0b 	bl	8014144 <DrawLowSpectrum>
	DrawMenu();
 801c52e:	f7fc f899 	bl	8018664 <DrawMenu>
	//DrawFrequencySpectrum();
	ChangeLayers();
 801c532:	f7f7 f8d7 	bl	80136e4 <ChangeLayers>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 801c536:	4806      	ldr	r0, [pc, #24]	; (801c550 <TIM4_IRQHandler+0x3c>)
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 801c538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_TIM_IRQHandler(&htim4);
 801c53c:	f7ea bb7c 	b.w	8006c38 <HAL_TIM_IRQHandler>
	if(menu_mode == 0) DrawSpectrum();
 801c540:	f7fb fab4 	bl	8017aac <DrawSpectrum>
	if(menu_mode != 3) 	DrawLowSpectrum();
 801c544:	f994 3000 	ldrsb.w	r3, [r4]
 801c548:	e7ed      	b.n	801c526 <TIM4_IRQHandler+0x12>
 801c54a:	bf00      	nop
 801c54c:	200009a4 	.word	0x200009a4
 801c550:	2001889c 	.word	0x2001889c

0801c554 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 801c554:	4801      	ldr	r0, [pc, #4]	; (801c55c <SPI2_IRQHandler+0x8>)
 801c556:	f7e9 bce3 	b.w	8005f20 <HAL_SPI_IRQHandler>
 801c55a:	bf00      	nop
 801c55c:	20018758 	.word	0x20018758

0801c560 <EXTI15_10_IRQHandler>:
  *
  * TouchScreen handler routines
  *
  */
void EXTI15_10_IRQHandler(void)
{
 801c560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	BSP_TS_GetState(&ts_State);
 801c564:	4cbc      	ldr	r4, [pc, #752]	; (801c858 <EXTI15_10_IRQHandler+0x2f8>)
{
 801c566:	ed2d 8b02 	vpush	{d8}
	BSP_TS_GetState(&ts_State);
 801c56a:	4620      	mov	r0, r4
{
 801c56c:	b082      	sub	sp, #8
	BSP_TS_GetState(&ts_State);
 801c56e:	f7ff fe0d 	bl	801c18c <BSP_TS_GetState>
	if(ts_State.touchDetected == 1) {
 801c572:	7823      	ldrb	r3, [r4, #0]
 801c574:	2b01      	cmp	r3, #1
 801c576:	d00d      	beq.n	801c594 <EXTI15_10_IRQHandler+0x34>
				if(stretch > 4) stretch = 4;
			}
			touch_count++;
		}
	}*/
	BSP_TS_ResetTouchData(&ts_State);
 801c578:	48b7      	ldr	r0, [pc, #732]	; (801c858 <EXTI15_10_IRQHandler+0x2f8>)
 801c57a:	f7ff ff15 	bl	801c3a8 <BSP_TS_ResetTouchData>
	BSP_TS_ITClear();
 801c57e:	f7ff ff09 	bl	801c394 <BSP_TS_ITClear>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 801c582:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801c586:	b002      	add	sp, #8
 801c588:	ecbd 8b02 	vpop	{d8}
 801c58c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 801c590:	f7e5 bd4e 	b.w	8002030 <HAL_GPIO_EXTI_IRQHandler>
		if((ts_State.touchX[0] > 40) && (ts_State.touchX[0] < 440) && (ts_State.touchY[0] > 220) && (ts_State.touchY[0] < 260)) {
 801c594:	8865      	ldrh	r5, [r4, #2]
 801c596:	f1a5 0329 	sub.w	r3, r5, #41	; 0x29
 801c59a:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 801c59e:	89a3      	ldrh	r3, [r4, #12]
 801c5a0:	d804      	bhi.n	801c5ac <EXTI15_10_IRQHandler+0x4c>
 801c5a2:	f1a3 02dd 	sub.w	r2, r3, #221	; 0xdd
 801c5a6:	2a26      	cmp	r2, #38	; 0x26
 801c5a8:	f240 8119 	bls.w	801c7de <EXTI15_10_IRQHandler+0x27e>
		else if((ts_State.touchY[0] > 20) && (ts_State.touchY[0] < 165)) {
 801c5ac:	f1a3 0215 	sub.w	r2, r3, #21
 801c5b0:	2a8f      	cmp	r2, #143	; 0x8f
 801c5b2:	d90e      	bls.n	801c5d2 <EXTI15_10_IRQHandler+0x72>
		else if((ts_State.touchY[0] > 0) && (ts_State.touchY[0] < 20)) {
 801c5b4:	1e5a      	subs	r2, r3, #1
 801c5b6:	2a12      	cmp	r2, #18
 801c5b8:	f240 80f4 	bls.w	801c7a4 <EXTI15_10_IRQHandler+0x244>
		else if((ts_State.touchX[0] > 80) && (ts_State.touchX[0] < 280) && (ts_State.touchY[0] > 180) && (ts_State.touchY[0] < 210)) {
 801c5bc:	3bb5      	subs	r3, #181	; 0xb5
 801c5be:	2b1c      	cmp	r3, #28
 801c5c0:	d803      	bhi.n	801c5ca <EXTI15_10_IRQHandler+0x6a>
 801c5c2:	3d51      	subs	r5, #81	; 0x51
 801c5c4:	2dc6      	cmp	r5, #198	; 0xc6
 801c5c6:	f240 816d 	bls.w	801c8a4 <EXTI15_10_IRQHandler+0x344>
			touch_count = 0;
 801c5ca:	4ba4      	ldr	r3, [pc, #656]	; (801c85c <EXTI15_10_IRQHandler+0x2fc>)
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	701a      	strb	r2, [r3, #0]
 801c5d0:	e7d2      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
			if(menu_mode == 0) {
 801c5d2:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 801c88c <EXTI15_10_IRQHandler+0x32c>
 801c5d6:	f99a 6000 	ldrsb.w	r6, [sl]
 801c5da:	2e00      	cmp	r6, #0
 801c5dc:	d159      	bne.n	801c692 <EXTI15_10_IRQHandler+0x132>
				if((ts_State.touchY[0] > 75) && (ts_State.touchY[0] < 165)) {
 801c5de:	3b4c      	subs	r3, #76	; 0x4c
 801c5e0:	2b58      	cmp	r3, #88	; 0x58
 801c5e2:	d8c9      	bhi.n	801c578 <EXTI15_10_IRQHandler+0x18>
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801c5e4:	f8df 8284 	ldr.w	r8, [pc, #644]	; 801c86c <EXTI15_10_IRQHandler+0x30c>
					HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801c5e8:	2028      	movs	r0, #40	; 0x28
 801c5ea:	f7e4 fdd5 	bl	8001198 <HAL_NVIC_DisableIRQ>
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801c5ee:	f06f 0201 	mvn.w	r2, #1
 801c5f2:	f8d8 3000 	ldr.w	r3, [r8]
					HAL_TIM_Base_Start_IT(&htim6);
 801c5f6:	4640      	mov	r0, r8
					touch_count = 0;
 801c5f8:	4f98      	ldr	r7, [pc, #608]	; (801c85c <EXTI15_10_IRQHandler+0x2fc>)
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801c5fa:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 801c5fc:	625e      	str	r6, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 801c5fe:	f7e9 ff3f 	bl	8006480 <HAL_TIM_Base_Start_IT>
					if(ts_State.touchX[0] > 280) {
 801c602:	8865      	ldrh	r5, [r4, #2]
					touch_count = 0;
 801c604:	703e      	strb	r6, [r7, #0]
					if(ts_State.touchX[0] > 280) {
 801c606:	f5b5 7f8c 	cmp.w	r5, #280	; 0x118
 801c60a:	f240 8185 	bls.w	801c918 <EXTI15_10_IRQHandler+0x3b8>
						if(stretch > 1) stretch--;
 801c60e:	4e94      	ldr	r6, [pc, #592]	; (801c860 <EXTI15_10_IRQHandler+0x300>)
 801c610:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801c614:	edd6 7a00 	vldr	s15, [r6]
 801c618:	eef4 7ac8 	vcmpe.f32	s15, s16
 801c61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c620:	f340 81b3 	ble.w	801c98a <EXTI15_10_IRQHandler+0x42a>
 801c624:	ee37 8ac8 	vsub.f32	s16, s15, s16
						if(stretch < 0.1) stretch = 0.125;
 801c628:	ee18 0a10 	vmov	r0, s16
 801c62c:	f7e4 f8de 	bl	80007ec <__aeabi_f2d>
 801c630:	a385      	add	r3, pc, #532	; (adr r3, 801c848 <EXTI15_10_IRQHandler+0x2e8>)
 801c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c636:	f7e4 f991 	bl	800095c <__aeabi_dcmplt>
 801c63a:	2800      	cmp	r0, #0
 801c63c:	f000 819d 	beq.w	801c97a <EXTI15_10_IRQHandler+0x41a>
 801c640:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 801c644:	6033      	str	r3, [r6, #0]
			if(menu_mode == 1) {
 801c646:	f99a 6000 	ldrsb.w	r6, [sl]
 801c64a:	2e01      	cmp	r6, #1
 801c64c:	d17e      	bne.n	801c74c <EXTI15_10_IRQHandler+0x1ec>
					String_number = ts_State.touchY[0] / 20 - 1;
 801c64e:	89a3      	ldrh	r3, [r4, #12]
 801c650:	4a84      	ldr	r2, [pc, #528]	; (801c864 <EXTI15_10_IRQHandler+0x304>)
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801c652:	f06f 0001 	mvn.w	r0, #1
 801c656:	f8d8 1000 	ldr.w	r1, [r8]
					String_number = ts_State.touchY[0] / 20 - 1;
 801c65a:	fba2 2303 	umull	r2, r3, r2, r3
					str_offset = 0;
 801c65e:	f8df 923c 	ldr.w	r9, [pc, #572]	; 801c89c <EXTI15_10_IRQHandler+0x33c>
 801c662:	2200      	movs	r2, #0
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801c664:	6108      	str	r0, [r1, #16]
					String_number = ts_State.touchY[0] / 20 - 1;
 801c666:	091b      	lsrs	r3, r3, #4
 801c668:	f8df 8234 	ldr.w	r8, [pc, #564]	; 801c8a0 <EXTI15_10_IRQHandler+0x340>
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 801c66c:	624a      	str	r2, [r1, #36]	; 0x24
					str_offset = 0;
 801c66e:	f8c9 2000 	str.w	r2, [r9]
					String_number = ts_State.touchY[0] / 20 - 1;
 801c672:	3b01      	subs	r3, #1
					prev_x = ts_State.touchX[0];
 801c674:	4a7c      	ldr	r2, [pc, #496]	; (801c868 <EXTI15_10_IRQHandler+0x308>)
					HAL_TIM_Base_Start_IT(&htim6);
 801c676:	487d      	ldr	r0, [pc, #500]	; (801c86c <EXTI15_10_IRQHandler+0x30c>)
					prev_x = ts_State.touchX[0];
 801c678:	8015      	strh	r5, [r2, #0]
					Mark_number = String_number;
 801c67a:	4a7d      	ldr	r2, [pc, #500]	; (801c870 <EXTI15_10_IRQHandler+0x310>)
					String_number = ts_State.touchY[0] / 20 - 1;
 801c67c:	f8c8 3000 	str.w	r3, [r8]
					Mark_number = String_number;
 801c680:	6013      	str	r3, [r2, #0]
					HAL_TIM_Base_Start_IT(&htim6);
 801c682:	f7e9 fefd 	bl	8006480 <HAL_TIM_Base_Start_IT>
			if(menu_mode == 2) {
 801c686:	f99a 6000 	ldrsb.w	r6, [sl]
				touch_count++;
 801c68a:	783a      	ldrb	r2, [r7, #0]
				if((String_number != ts_State.touchY[0] / 20 - 1)) {
 801c68c:	89a3      	ldrh	r3, [r4, #12]
				if(ts_State.touchX[0] > 380) {
 801c68e:	8865      	ldrh	r5, [r4, #2]
 801c690:	e015      	b.n	801c6be <EXTI15_10_IRQHandler+0x15e>
			if(menu_mode == 1) {
 801c692:	2e01      	cmp	r6, #1
 801c694:	d15a      	bne.n	801c74c <EXTI15_10_IRQHandler+0x1ec>
				if(touch_count == 0) {
 801c696:	4f71      	ldr	r7, [pc, #452]	; (801c85c <EXTI15_10_IRQHandler+0x2fc>)
 801c698:	783a      	ldrb	r2, [r7, #0]
 801c69a:	2a00      	cmp	r2, #0
 801c69c:	f000 817e 	beq.w	801c99c <EXTI15_10_IRQHandler+0x43c>
					str_offset = ts_State.touchX[0] - prev_x;
 801c6a0:	4971      	ldr	r1, [pc, #452]	; (801c868 <EXTI15_10_IRQHandler+0x308>)
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 801c6a2:	f04f 0c00 	mov.w	ip, #0
 801c6a6:	4871      	ldr	r0, [pc, #452]	; (801c86c <EXTI15_10_IRQHandler+0x30c>)
					str_offset = ts_State.touchX[0] - prev_x;
 801c6a8:	8809      	ldrh	r1, [r1, #0]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 801c6aa:	6800      	ldr	r0, [r0, #0]
					str_offset = ts_State.touchX[0] - prev_x;
 801c6ac:	1a69      	subs	r1, r5, r1
 801c6ae:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 801c89c <EXTI15_10_IRQHandler+0x33c>
 801c6b2:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 801c8a0 <EXTI15_10_IRQHandler+0x340>
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 801c6b6:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
					str_offset = ts_State.touchX[0] - prev_x;
 801c6ba:	f8c9 1000 	str.w	r1, [r9]
				touch_count++;
 801c6be:	3201      	adds	r2, #1
 801c6c0:	703a      	strb	r2, [r7, #0]
				if((String_number != ts_State.touchY[0] / 20 - 1)) {
 801c6c2:	4a68      	ldr	r2, [pc, #416]	; (801c864 <EXTI15_10_IRQHandler+0x304>)
 801c6c4:	fba2 2303 	umull	r2, r3, r2, r3
 801c6c8:	f8d8 2000 	ldr.w	r2, [r8]
 801c6cc:	f3c3 130f 	ubfx	r3, r3, #4, #16
 801c6d0:	1e59      	subs	r1, r3, #1
 801c6d2:	4291      	cmp	r1, r2
 801c6d4:	d01f      	beq.n	801c716 <EXTI15_10_IRQHandler+0x1b6>
					if(Total_tracks > 7) {
 801c6d6:	4867      	ldr	r0, [pc, #412]	; (801c874 <EXTI15_10_IRQHandler+0x314>)
 801c6d8:	8800      	ldrh	r0, [r0, #0]
 801c6da:	2807      	cmp	r0, #7
 801c6dc:	d913      	bls.n	801c706 <EXTI15_10_IRQHandler+0x1a6>
						if(String_number > (ts_State.touchY[0] / 20 - 1)) {
 801c6de:	4293      	cmp	r3, r2
							str_increment += abs((ts_State.touchY[0] / 20 - 1) - String_number);
 801c6e0:	eba1 0302 	sub.w	r3, r1, r2
						if(String_number > (ts_State.touchY[0] / 20 - 1)) {
 801c6e4:	f300 813f 	bgt.w	801c966 <EXTI15_10_IRQHandler+0x406>
							str_increment += abs((ts_State.touchY[0] / 20 - 1) - String_number);
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	f8df c18c 	ldr.w	ip, [pc, #396]	; 801c878 <EXTI15_10_IRQHandler+0x318>
							if(str_increment > Total_tracks - 7) str_increment = Total_tracks - 7;
 801c6ee:	f1a0 0106 	sub.w	r1, r0, #6
							str_increment += abs((ts_State.touchY[0] / 20 - 1) - String_number);
 801c6f2:	bfb8      	it	lt
 801c6f4:	425b      	neglt	r3, r3
 801c6f6:	f8dc 2000 	ldr.w	r2, [ip]
 801c6fa:	4413      	add	r3, r2
							if(str_increment > Total_tracks - 7) str_increment = Total_tracks - 7;
 801c6fc:	428b      	cmp	r3, r1
 801c6fe:	f280 8149 	bge.w	801c994 <EXTI15_10_IRQHandler+0x434>
							str_increment += abs((ts_State.touchY[0] / 20 - 1) - String_number);
 801c702:	f8cc 3000 	str.w	r3, [ip]
					str_offset = 0;
 801c706:	2300      	movs	r3, #0
					String_number = -1;
 801c708:	f04f 32ff 	mov.w	r2, #4294967295
					str_offset = 0;
 801c70c:	f8c9 3000 	str.w	r3, [r9]
					String_number = -1;
 801c710:	f8c8 2000 	str.w	r2, [r8]
					touch_count = 0;
 801c714:	703b      	strb	r3, [r7, #0]
				if(ts_State.touchX[0] > 380) {
 801c716:	f5b5 7fbe 	cmp.w	r5, #380	; 0x17c
 801c71a:	d917      	bls.n	801c74c <EXTI15_10_IRQHandler+0x1ec>
					Track_number = String_number + str_increment;
 801c71c:	4b56      	ldr	r3, [pc, #344]	; (801c878 <EXTI15_10_IRQHandler+0x318>)
					bOutOfData = 1;
 801c71e:	2101      	movs	r1, #1
					Track_number = String_number + str_increment;
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	441a      	add	r2, r3
					if(Track_number >= Total_tracks) Track_number = 0;
 801c724:	4b53      	ldr	r3, [pc, #332]	; (801c874 <EXTI15_10_IRQHandler+0x314>)
 801c726:	881b      	ldrh	r3, [r3, #0]
 801c728:	429a      	cmp	r2, r3
 801c72a:	bfa8      	it	ge
 801c72c:	2200      	movge	r2, #0
					str_offset = 0;
 801c72e:	2300      	movs	r3, #0
 801c730:	f8c9 3000 	str.w	r3, [r9]
					touch_count = 0;
 801c734:	703b      	strb	r3, [r7, #0]
					bOutOfData = 1;
 801c736:	4b51      	ldr	r3, [pc, #324]	; (801c87c <EXTI15_10_IRQHandler+0x31c>)
 801c738:	6019      	str	r1, [r3, #0]
					unDmaBufMode = 3;
 801c73a:	2103      	movs	r1, #3
 801c73c:	4b50      	ldr	r3, [pc, #320]	; (801c880 <EXTI15_10_IRQHandler+0x320>)
 801c73e:	6019      	str	r1, [r3, #0]
					Track_number = String_number + str_increment;
 801c740:	4b50      	ldr	r3, [pc, #320]	; (801c884 <EXTI15_10_IRQHandler+0x324>)
					if(Track_number >= Total_tracks) Track_number = 0;
 801c742:	601a      	str	r2, [r3, #0]
					String_number = -1;
 801c744:	f04f 33ff 	mov.w	r3, #4294967295
 801c748:	f8c8 3000 	str.w	r3, [r8]
			if(menu_mode == 2) {
 801c74c:	2e02      	cmp	r6, #2
 801c74e:	f47f af13 	bne.w	801c578 <EXTI15_10_IRQHandler+0x18>
				if((ts_State.touchX[0] >= 40) && (ts_State.touchX[0] <= 440)) {
 801c752:	3d28      	subs	r5, #40	; 0x28
				touch_count = 0;
 801c754:	4a41      	ldr	r2, [pc, #260]	; (801c85c <EXTI15_10_IRQHandler+0x2fc>)
 801c756:	2100      	movs	r1, #0
				if((ts_State.touchX[0] >= 40) && (ts_State.touchX[0] <= 440)) {
 801c758:	b2ab      	uxth	r3, r5
				touch_count = 0;
 801c75a:	7011      	strb	r1, [r2, #0]
				if((ts_State.touchX[0] >= 40) && (ts_State.touchX[0] <= 440)) {
 801c75c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801c760:	f63f af0a 	bhi.w	801c578 <EXTI15_10_IRQHandler+0x18>
					if((ts_State.touchY[0] > 40) && (ts_State.touchY[0] < 60))	{
 801c764:	89a3      	ldrh	r3, [r4, #12]
 801c766:	f1a3 0229 	sub.w	r2, r3, #41	; 0x29
 801c76a:	2a12      	cmp	r2, #18
 801c76c:	f240 80eb 	bls.w	801c946 <EXTI15_10_IRQHandler+0x3e6>
					if((ts_State.touchY[0] > 80) && (ts_State.touchY[0] < 100)) {
 801c770:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 801c774:	2a12      	cmp	r2, #18
 801c776:	f200 80ba 	bhi.w	801c8ee <EXTI15_10_IRQHandler+0x38e>
						jog_sensitivity = 0.01 * (float)(ts_State.touchX[0]-40) / 400;
 801c77a:	8863      	ldrh	r3, [r4, #2]
 801c77c:	4c42      	ldr	r4, [pc, #264]	; (801c888 <EXTI15_10_IRQHandler+0x328>)
 801c77e:	f1a3 0028 	sub.w	r0, r3, #40	; 0x28
 801c782:	ee07 0a90 	vmov	s15, r0
 801c786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c78a:	ee17 0a90 	vmov	r0, s15
 801c78e:	f7e4 f82d 	bl	80007ec <__aeabi_f2d>
 801c792:	a32f      	add	r3, pc, #188	; (adr r3, 801c850 <EXTI15_10_IRQHandler+0x2f0>)
 801c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c798:	f7e3 fd9a 	bl	80002d0 <__aeabi_dmul>
 801c79c:	f7e4 f926 	bl	80009ec <__aeabi_d2f>
 801c7a0:	6020      	str	r0, [r4, #0]
					if((ts_State.touchY[0] > 120) && (ts_State.touchY[0] < 140)) {
 801c7a2:	e6e9      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801c7a4:	2028      	movs	r0, #40	; 0x28
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 801c7a6:	2500      	movs	r5, #0
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801c7a8:	f7e4 fcf6 	bl	8001198 <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801c7ac:	482f      	ldr	r0, [pc, #188]	; (801c86c <EXTI15_10_IRQHandler+0x30c>)
 801c7ae:	f06f 0201 	mvn.w	r2, #1
 801c7b2:	6803      	ldr	r3, [r0, #0]
 801c7b4:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 801c7b6:	625d      	str	r5, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 801c7b8:	f7e9 fe62 	bl	8006480 <HAL_TIM_Base_Start_IT>
			if(ts_State.touchX[0] < 200) {
 801c7bc:	8863      	ldrh	r3, [r4, #2]
			touch_count = 0;
 801c7be:	4a27      	ldr	r2, [pc, #156]	; (801c85c <EXTI15_10_IRQHandler+0x2fc>)
			if(ts_State.touchX[0] < 200) {
 801c7c0:	2bc7      	cmp	r3, #199	; 0xc7
			touch_count = 0;
 801c7c2:	7015      	strb	r5, [r2, #0]
			if(ts_State.touchX[0] < 200) {
 801c7c4:	d934      	bls.n	801c830 <EXTI15_10_IRQHandler+0x2d0>
			else if(ts_State.touchX[0] > 280) {
 801c7c6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801c7ca:	f67f aed5 	bls.w	801c578 <EXTI15_10_IRQHandler+0x18>
				menu_mode++;
 801c7ce:	4a2f      	ldr	r2, [pc, #188]	; (801c88c <EXTI15_10_IRQHandler+0x32c>)
 801c7d0:	7813      	ldrb	r3, [r2, #0]
 801c7d2:	3301      	adds	r3, #1
 801c7d4:	b25b      	sxtb	r3, r3
				if(menu_mode > 2) menu_mode = 0;
 801c7d6:	2b02      	cmp	r3, #2
 801c7d8:	dd30      	ble.n	801c83c <EXTI15_10_IRQHandler+0x2dc>
 801c7da:	7015      	strb	r5, [r2, #0]
 801c7dc:	e6cc      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
			GoToPosition(((float)ts_State.touchX[0] - 40) * (float)rekordbox.spectrum_size / rekordbox.lowp_spectrum_size);
 801c7de:	4b2c      	ldr	r3, [pc, #176]	; (801c890 <EXTI15_10_IRQHandler+0x330>)
 801c7e0:	ee07 5a90 	vmov	s15, r5
 801c7e4:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 801c894 <EXTI15_10_IRQHandler+0x334>
 801c7e8:	f603 218c 	addw	r1, r3, #2700	; 0xa8c
 801c7ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c7f0:	f603 2388 	addw	r3, r3, #2696	; 0xa88
			touch_count = 0;
 801c7f4:	4a19      	ldr	r2, [pc, #100]	; (801c85c <EXTI15_10_IRQHandler+0x2fc>)
			GoToPosition(((float)ts_State.touchX[0] - 40) * (float)rekordbox.spectrum_size / rekordbox.lowp_spectrum_size);
 801c7f6:	edd1 7a00 	vldr	s15, [r1]
 801c7fa:	ee37 7a46 	vsub.f32	s14, s14, s12
 801c7fe:	edd3 6a00 	vldr	s13, [r3]
 801c802:	eef8 7a67 	vcvt.f32.u32	s15, s15
			touch_count = 0;
 801c806:	2300      	movs	r3, #0
			GoToPosition(((float)ts_State.touchX[0] - 40) * (float)rekordbox.spectrum_size / rekordbox.lowp_spectrum_size);
 801c808:	eef8 6a66 	vcvt.f32.u32	s13, s13
			if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 801c80c:	4c22      	ldr	r4, [pc, #136]	; (801c898 <EXTI15_10_IRQHandler+0x338>)
			touch_count = 0;
 801c80e:	7013      	strb	r3, [r2, #0]
			GoToPosition(((float)ts_State.touchX[0] - 40) * (float)rekordbox.spectrum_size / rekordbox.lowp_spectrum_size);
 801c810:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801c818:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801c81c:	ee17 0a90 	vmov	r0, s15
 801c820:	f001 fbb2 	bl	801df88 <GoToPosition>
			if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 801c824:	7823      	ldrb	r3, [r4, #0]
 801c826:	2b00      	cmp	r3, #0
 801c828:	d152      	bne.n	801c8d0 <EXTI15_10_IRQHandler+0x370>
 801c82a:	f7ff faf1 	bl	801be10 <BSP_AUDIO_OUT_Resume>
 801c82e:	e6a3      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
				menu_mode--;
 801c830:	4a16      	ldr	r2, [pc, #88]	; (801c88c <EXTI15_10_IRQHandler+0x32c>)
 801c832:	7813      	ldrb	r3, [r2, #0]
 801c834:	3b01      	subs	r3, #1
 801c836:	b25b      	sxtb	r3, r3
				if(menu_mode < 0) menu_mode = 2;
 801c838:	42ab      	cmp	r3, r5
 801c83a:	db01      	blt.n	801c840 <EXTI15_10_IRQHandler+0x2e0>
				menu_mode++;
 801c83c:	7013      	strb	r3, [r2, #0]
 801c83e:	e69b      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
				if(menu_mode < 0) menu_mode = 2;
 801c840:	2302      	movs	r3, #2
 801c842:	7013      	strb	r3, [r2, #0]
 801c844:	e698      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
 801c846:	bf00      	nop
 801c848:	9999999a 	.word	0x9999999a
 801c84c:	3fb99999 	.word	0x3fb99999
 801c850:	eb1c432d 	.word	0xeb1c432d
 801c854:	3efa36e2 	.word	0x3efa36e2
 801c858:	2000f7a0 	.word	0x2000f7a0
 801c85c:	20018894 	.word	0x20018894
 801c860:	20000028 	.word	0x20000028
 801c864:	cccccccd 	.word	0xcccccccd
 801c868:	20018884 	.word	0x20018884
 801c86c:	2001891c 	.word	0x2001891c
 801c870:	20000064 	.word	0x20000064
 801c874:	20001fd8 	.word	0x20001fd8
 801c878:	2001888c 	.word	0x2001888c
 801c87c:	2000e948 	.word	0x2000e948
 801c880:	2000f7cc 	.word	0x2000f7cc
 801c884:	2000e714 	.word	0x2000e714
 801c888:	20000070 	.word	0x20000070
 801c88c:	200009a4 	.word	0x200009a4
 801c890:	20017208 	.word	0x20017208
 801c894:	42200000 	.word	0x42200000
 801c898:	2000f794 	.word	0x2000f794
 801c89c:	20018890 	.word	0x20018890
 801c8a0:	2000006c 	.word	0x2000006c
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801c8a4:	2028      	movs	r0, #40	; 0x28
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 801c8a6:	2400      	movs	r4, #0
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801c8a8:	f7e4 fc76 	bl	8001198 <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801c8ac:	483e      	ldr	r0, [pc, #248]	; (801c9a8 <EXTI15_10_IRQHandler+0x448>)
 801c8ae:	f06f 0201 	mvn.w	r2, #1
 801c8b2:	6803      	ldr	r3, [r0, #0]
 801c8b4:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 801c8b6:	625c      	str	r4, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 801c8b8:	f7e9 fde2 	bl	8006480 <HAL_TIM_Base_Start_IT>
			if(display.timemode == 0) {
 801c8bc:	4b3b      	ldr	r3, [pc, #236]	; (801c9ac <EXTI15_10_IRQHandler+0x44c>)
			touch_count = 0;
 801c8be:	493c      	ldr	r1, [pc, #240]	; (801c9b0 <EXTI15_10_IRQHandler+0x450>)
			if(display.timemode == 0) {
 801c8c0:	781a      	ldrb	r2, [r3, #0]
			touch_count = 0;
 801c8c2:	700c      	strb	r4, [r1, #0]
			if(display.timemode == 0) {
 801c8c4:	2a00      	cmp	r2, #0
 801c8c6:	d16c      	bne.n	801c9a2 <EXTI15_10_IRQHandler+0x442>
				display.timemode = 1;
 801c8c8:	2201      	movs	r2, #1
 801c8ca:	701a      	strb	r2, [r3, #0]
				display.trackbarmode = 1;
 801c8cc:	711a      	strb	r2, [r3, #4]
 801c8ce:	e653      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
				GetTrackTime();
 801c8d0:	f001 fc08 	bl	801e0e4 <GetTrackTime>
				if(spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 801c8d4:	4a37      	ldr	r2, [pc, #220]	; (801c9b4 <EXTI15_10_IRQHandler+0x454>)
 801c8d6:	7893      	ldrb	r3, [r2, #2]
 801c8d8:	07d9      	lsls	r1, r3, #31
				trak.state = SETCUE;
 801c8da:	f04f 0102 	mov.w	r1, #2
				if(spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 801c8de:	bf4c      	ite	mi
 801c8e0:	f043 0302 	orrmi.w	r3, r3, #2
				else spi_tx[2] &= ~(1 << 1);
 801c8e4:	f003 03fd 	andpl.w	r3, r3, #253	; 0xfd
				trak.state = SETCUE;
 801c8e8:	7021      	strb	r1, [r4, #0]
 801c8ea:	7093      	strb	r3, [r2, #2]
 801c8ec:	e644      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
					if((ts_State.touchY[0] > 120) && (ts_State.touchY[0] < 140)) {
 801c8ee:	3b79      	subs	r3, #121	; 0x79
 801c8f0:	2b12      	cmp	r3, #18
 801c8f2:	f63f ae41 	bhi.w	801c578 <EXTI15_10_IRQHandler+0x18>
						acue_sensitivity = 250 * (float)(ts_State.touchX[0]-40) / 400;
 801c8f6:	8863      	ldrh	r3, [r4, #2]
 801c8f8:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 801c8fc:	4a2e      	ldr	r2, [pc, #184]	; (801c9b8 <EXTI15_10_IRQHandler+0x458>)
 801c8fe:	3b28      	subs	r3, #40	; 0x28
 801c900:	ee07 3a90 	vmov	s15, r3
 801c904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c908:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c90c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c910:	ee17 3a90 	vmov	r3, s15
 801c914:	7013      	strb	r3, [r2, #0]
 801c916:	e62f      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
					else if(ts_State.touchX[0] < 200) {
 801c918:	2dc7      	cmp	r5, #199	; 0xc7
 801c91a:	d831      	bhi.n	801c980 <EXTI15_10_IRQHandler+0x420>
						if(stretch >= 1) stretch++;
 801c91c:	4e27      	ldr	r6, [pc, #156]	; (801c9bc <EXTI15_10_IRQHandler+0x45c>)
 801c91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c922:	edd6 7a00 	vldr	s15, [r6]
 801c926:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c92e:	bfac      	ite	ge
 801c930:	ee77 7a87 	vaddge.f32	s15, s15, s14
						else stretch *= 2;
 801c934:	ee77 7aa7 	vaddlt.f32	s15, s15, s15
						if(stretch > 4) stretch = 4;
 801c938:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801c93c:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 801c940:	edc6 7a00 	vstr	s15, [r6]
 801c944:	e67f      	b.n	801c646 <EXTI15_10_IRQHandler+0xe6>
						volume = 100 * (float)(ts_State.touchX[0]-40) / 400;
 801c946:	ee07 5a90 	vmov	s15, r5
 801c94a:	4b1d      	ldr	r3, [pc, #116]	; (801c9c0 <EXTI15_10_IRQHandler+0x460>)
 801c94c:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
 801c950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c954:	edcd 7a01 	vstr	s15, [sp, #4]
 801c958:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801c95c:	7018      	strb	r0, [r3, #0]
						BSP_AUDIO_OUT_SetVolume(volume);
 801c95e:	f7ff fa7b 	bl	801be58 <BSP_AUDIO_OUT_SetVolume>
					if((ts_State.touchY[0] > 80) && (ts_State.touchY[0] < 100)) {
 801c962:	89a3      	ldrh	r3, [r4, #12]
 801c964:	e704      	b.n	801c770 <EXTI15_10_IRQHandler+0x210>
							str_increment -= abs((ts_State.touchY[0] / 20 - 1) - String_number);
 801c966:	2b00      	cmp	r3, #0
 801c968:	4916      	ldr	r1, [pc, #88]	; (801c9c4 <EXTI15_10_IRQHandler+0x464>)
 801c96a:	bfb8      	it	lt
 801c96c:	425b      	neglt	r3, r3
 801c96e:	680a      	ldr	r2, [r1, #0]
							if(str_increment < 0) str_increment = 0;
 801c970:	1ad3      	subs	r3, r2, r3
 801c972:	bf48      	it	mi
 801c974:	2300      	movmi	r3, #0
 801c976:	600b      	str	r3, [r1, #0]
 801c978:	e6c5      	b.n	801c706 <EXTI15_10_IRQHandler+0x1a6>
 801c97a:	ed86 8a00 	vstr	s16, [r6]
 801c97e:	e662      	b.n	801c646 <EXTI15_10_IRQHandler+0xe6>
					else stretch = 1;
 801c980:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c984:	4b0d      	ldr	r3, [pc, #52]	; (801c9bc <EXTI15_10_IRQHandler+0x45c>)
 801c986:	601a      	str	r2, [r3, #0]
 801c988:	e65d      	b.n	801c646 <EXTI15_10_IRQHandler+0xe6>
						else stretch /= 2;
 801c98a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801c98e:	ee27 8a88 	vmul.f32	s16, s15, s16
 801c992:	e649      	b.n	801c628 <EXTI15_10_IRQHandler+0xc8>
							if(str_increment > Total_tracks - 7) str_increment = Total_tracks - 7;
 801c994:	3807      	subs	r0, #7
 801c996:	f8cc 0000 	str.w	r0, [ip]
 801c99a:	e6b4      	b.n	801c706 <EXTI15_10_IRQHandler+0x1a6>
 801c99c:	f8df 8008 	ldr.w	r8, [pc, #8]	; 801c9a8 <EXTI15_10_IRQHandler+0x448>
 801c9a0:	e656      	b.n	801c650 <EXTI15_10_IRQHandler+0xf0>
				display.timemode = 0;
 801c9a2:	701c      	strb	r4, [r3, #0]
				display.trackbarmode = 0;
 801c9a4:	711c      	strb	r4, [r3, #4]
 801c9a6:	e5e7      	b.n	801c578 <EXTI15_10_IRQHandler+0x18>
 801c9a8:	2001891c 	.word	0x2001891c
 801c9ac:	20000988 	.word	0x20000988
 801c9b0:	20018894 	.word	0x20018894
 801c9b4:	20000058 	.word	0x20000058
 801c9b8:	20000054 	.word	0x20000054
 801c9bc:	20000028 	.word	0x20000028
 801c9c0:	2000005c 	.word	0x2000005c
 801c9c4:	2001888c 	.word	0x2001888c

0801c9c8 <TIM8_UP_TIM13_IRQHandler>:
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(trak.state == STOPPED) {
 801c9c8:	4b0a      	ldr	r3, [pc, #40]	; (801c9f4 <TIM8_UP_TIM13_IRQHandler+0x2c>)
 801c9ca:	781b      	ldrb	r3, [r3, #0]
 801c9cc:	2b01      	cmp	r3, #1
 801c9ce:	d009      	beq.n	801c9e4 <TIM8_UP_TIM13_IRQHandler+0x1c>
		spi_tx[2] ^= (1 << 0);
	}
	if(trak.state == SETCUE) {
 801c9d0:	2b02      	cmp	r3, #2
 801c9d2:	d104      	bne.n	801c9de <TIM8_UP_TIM13_IRQHandler+0x16>
		spi_tx[2] ^= (1 << 0);
		spi_tx[2] ^= (1 << 1);
 801c9d4:	4a08      	ldr	r2, [pc, #32]	; (801c9f8 <TIM8_UP_TIM13_IRQHandler+0x30>)
 801c9d6:	7893      	ldrb	r3, [r2, #2]
 801c9d8:	f083 0303 	eor.w	r3, r3, #3
 801c9dc:	7093      	strb	r3, [r2, #2]
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801c9de:	4807      	ldr	r0, [pc, #28]	; (801c9fc <TIM8_UP_TIM13_IRQHandler+0x34>)
 801c9e0:	f7ea b92a 	b.w	8006c38 <HAL_TIM_IRQHandler>
		spi_tx[2] ^= (1 << 0);
 801c9e4:	4a04      	ldr	r2, [pc, #16]	; (801c9f8 <TIM8_UP_TIM13_IRQHandler+0x30>)
  HAL_TIM_IRQHandler(&htim8);
 801c9e6:	4805      	ldr	r0, [pc, #20]	; (801c9fc <TIM8_UP_TIM13_IRQHandler+0x34>)
		spi_tx[2] ^= (1 << 0);
 801c9e8:	7893      	ldrb	r3, [r2, #2]
 801c9ea:	f083 0301 	eor.w	r3, r3, #1
 801c9ee:	7093      	strb	r3, [r2, #2]
  HAL_TIM_IRQHandler(&htim8);
 801c9f0:	f7ea b922 	b.w	8006c38 <HAL_TIM_IRQHandler>
 801c9f4:	2000f794 	.word	0x2000f794
 801c9f8:	20000058 	.word	0x20000058
 801c9fc:	2001899c 	.word	0x2001899c

0801ca00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 801ca00:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(pulses != old_pulses) {
 801ca02:	4c23      	ldr	r4, [pc, #140]	; (801ca90 <TIM5_IRQHandler+0x90>)
 801ca04:	4d23      	ldr	r5, [pc, #140]	; (801ca94 <TIM5_IRQHandler+0x94>)
 801ca06:	6823      	ldr	r3, [r4, #0]
 801ca08:	682a      	ldr	r2, [r5, #0]
 801ca0a:	4293      	cmp	r3, r2
 801ca0c:	d01b      	beq.n	801ca46 <TIM5_IRQHandler+0x46>
		if(pulses != 0) {
 801ca0e:	bb0b      	cbnz	r3, 801ca54 <TIM5_IRQHandler+0x54>
			New_frequency = (uint32_t)((trak.bitrate / 2)
					*(1 + trak.percent + jog_sensitivity*pulses));
		}
		else {
			New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801ca10:	4921      	ldr	r1, [pc, #132]	; (801ca98 <TIM5_IRQHandler+0x98>)
 801ca12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca16:	4a21      	ldr	r2, [pc, #132]	; (801ca9c <TIM5_IRQHandler+0x9c>)
 801ca18:	890b      	ldrh	r3, [r1, #8]
 801ca1a:	ed91 7a01 	vldr	s14, [r1, #4]
 801ca1e:	085b      	lsrs	r3, r3, #1
 801ca20:	ee37 7a26 	vadd.f32	s14, s14, s13
 801ca24:	ee07 3a90 	vmov	s15, r3
 801ca28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ca30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ca34:	edc2 7a00 	vstr	s15, [r2]
		}
		BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801ca38:	6811      	ldr	r1, [r2, #0]
 801ca3a:	2200      	movs	r2, #0
 801ca3c:	4818      	ldr	r0, [pc, #96]	; (801caa0 <TIM5_IRQHandler+0xa0>)
 801ca3e:	f7ff faaf 	bl	801bfa0 <BSP_AUDIO_OUT_ClockConfig>
		old_pulses = pulses;
 801ca42:	6823      	ldr	r3, [r4, #0]
 801ca44:	602b      	str	r3, [r5, #0]
	}
	pulses = 0;
 801ca46:	2300      	movs	r3, #0
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 801ca48:	4816      	ldr	r0, [pc, #88]	; (801caa4 <TIM5_IRQHandler+0xa4>)
	pulses = 0;
 801ca4a:	6023      	str	r3, [r4, #0]
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 801ca4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_TIM_IRQHandler(&htim5);
 801ca50:	f7ea b8f2 	b.w	8006c38 <HAL_TIM_IRQHandler>
					*(1 + trak.percent + jog_sensitivity*pulses));
 801ca54:	4a10      	ldr	r2, [pc, #64]	; (801ca98 <TIM5_IRQHandler+0x98>)
 801ca56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ca5a:	ee07 3a90 	vmov	s15, r3
 801ca5e:	4912      	ldr	r1, [pc, #72]	; (801caa8 <TIM5_IRQHandler+0xa8>)
 801ca60:	edd2 6a01 	vldr	s13, [r2, #4]
 801ca64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			New_frequency = (uint32_t)((trak.bitrate / 2)
 801ca68:	8913      	ldrh	r3, [r2, #8]
					*(1 + trak.percent + jog_sensitivity*pulses));
 801ca6a:	ee76 6a87 	vadd.f32	s13, s13, s14
 801ca6e:	ed91 6a00 	vldr	s12, [r1]
			New_frequency = (uint32_t)((trak.bitrate / 2)
 801ca72:	085b      	lsrs	r3, r3, #1
 801ca74:	4a09      	ldr	r2, [pc, #36]	; (801ca9c <TIM5_IRQHandler+0x9c>)
					*(1 + trak.percent + jog_sensitivity*pulses));
 801ca76:	eee7 6a86 	vfma.f32	s13, s15, s12
 801ca7a:	ee07 3a10 	vmov	s14, r3
 801ca7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca82:	ee67 7a26 	vmul.f32	s15, s14, s13
			New_frequency = (uint32_t)((trak.bitrate / 2)
 801ca86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ca8a:	edc2 7a00 	vstr	s15, [r2]
 801ca8e:	e7d3      	b.n	801ca38 <TIM5_IRQHandler+0x38>
 801ca90:	20018888 	.word	0x20018888
 801ca94:	20018880 	.word	0x20018880
 801ca98:	2000f794 	.word	0x2000f794
 801ca9c:	20000068 	.word	0x20000068
 801caa0:	2001864c 	.word	0x2001864c
 801caa4:	200188dc 	.word	0x200188dc
 801caa8:	20000070 	.word	0x20000070

0801caac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801caac:	b510      	push	{r4, lr}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801caae:	4b08      	ldr	r3, [pc, #32]	; (801cad0 <TIM6_DAC_IRQHandler+0x24>)
 801cab0:	f44f 7280 	mov.w	r2, #256	; 0x100
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	NVIC_EnableIRQ(EXTI15_10_IRQn);
	HAL_TIM_Base_Stop_IT(&htim6);
 801cab4:	4c07      	ldr	r4, [pc, #28]	; (801cad4 <TIM6_DAC_IRQHandler+0x28>)
 801cab6:	605a      	str	r2, [r3, #4]
 801cab8:	4620      	mov	r0, r4
 801caba:	f7e9 fd61 	bl	8006580 <HAL_TIM_Base_Stop_IT>
	touch_count = 0;
 801cabe:	4b06      	ldr	r3, [pc, #24]	; (801cad8 <TIM6_DAC_IRQHandler+0x2c>)
 801cac0:	2200      	movs	r2, #0

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801cac2:	4620      	mov	r0, r4
	touch_count = 0;
 801cac4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801cac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_TIM_IRQHandler(&htim6);
 801caca:	f7ea b8b5 	b.w	8006c38 <HAL_TIM_IRQHandler>
 801cace:	bf00      	nop
 801cad0:	e000e100 	.word	0xe000e100
 801cad4:	2001891c 	.word	0x2001891c
 801cad8:	20018894 	.word	0x20018894

0801cadc <TIM7_IRQHandler>:
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(display.trackbarmode == 0) display.trackbarmode = 1;
 801cadc:	4a04      	ldr	r2, [pc, #16]	; (801caf0 <TIM7_IRQHandler+0x14>)
	else display.trackbarmode = 0;
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801cade:	4805      	ldr	r0, [pc, #20]	; (801caf4 <TIM7_IRQHandler+0x18>)
	if(display.trackbarmode == 0) display.trackbarmode = 1;
 801cae0:	7913      	ldrb	r3, [r2, #4]
 801cae2:	fab3 f383 	clz	r3, r3
 801cae6:	095b      	lsrs	r3, r3, #5
 801cae8:	7113      	strb	r3, [r2, #4]
  HAL_TIM_IRQHandler(&htim7);
 801caea:	f7ea b8a5 	b.w	8006c38 <HAL_TIM_IRQHandler>
 801caee:	bf00      	nop
 801caf0:	20000988 	.word	0x20000988
 801caf4:	2001895c 	.word	0x2001895c

0801caf8 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 801caf8:	4801      	ldr	r0, [pc, #4]	; (801cb00 <DMA2_Stream4_IRQHandler+0x8>)
 801cafa:	f7e4 bdf3 	b.w	80016e4 <HAL_DMA_IRQHandler>
 801cafe:	bf00      	nop
 801cb00:	200185ec 	.word	0x200185ec

0801cb04 <OTG_FS_IRQHandler>:
 801cb04:	4770      	bx	lr
 801cb06:	bf00      	nop

0801cb08 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 801cb08:	4801      	ldr	r0, [pc, #4]	; (801cb10 <OTG_HS_IRQHandler+0x8>)
 801cb0a:	f7e5 bbb5 	b.w	8002278 <HAL_HCD_IRQHandler>
 801cb0e:	bf00      	nop
 801cb10:	20019288 	.word	0x20019288

0801cb14 <HAL_SPI_TxRxCpltCallback>:
/*
 *
 * External MIDI signal handler
 *
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 801cb14:	b570      	push	{r4, r5, r6, lr}
	switch(spi_rx[1] & 0xF0) {
 801cb16:	4cae      	ldr	r4, [pc, #696]	; (801cdd0 <HAL_SPI_TxRxCpltCallback+0x2bc>)
 801cb18:	7863      	ldrb	r3, [r4, #1]
 801cb1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cb1e:	2bb0      	cmp	r3, #176	; 0xb0
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 801cb20:	ed2d 8b02 	vpush	{d8}
	switch(spi_rx[1] & 0xF0) {
 801cb24:	d018      	beq.n	801cb58 <HAL_SPI_TxRxCpltCallback+0x44>
 801cb26:	d832      	bhi.n	801cb8e <HAL_SPI_TxRxCpltCallback+0x7a>
 801cb28:	2b80      	cmp	r3, #128	; 0x80
 801cb2a:	d03e      	beq.n	801cbaa <HAL_SPI_TxRxCpltCallback+0x96>
 801cb2c:	2b90      	cmp	r3, #144	; 0x90
 801cb2e:	d122      	bne.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
	case 0x90: {
		switch(spi_rx[2]) {
 801cb30:	78a3      	ldrb	r3, [r4, #2]
 801cb32:	3b40      	subs	r3, #64	; 0x40
 801cb34:	2b0d      	cmp	r3, #13
 801cb36:	d81e      	bhi.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
 801cb38:	e8df f013 	tbh	[pc, r3, lsl #1]
 801cb3c:	027301a2 	.word	0x027301a2
 801cb40:	01f9001d 	.word	0x01f9001d
 801cb44:	01390176 	.word	0x01390176
 801cb48:	020201f0 	.word	0x020201f0
 801cb4c:	0186023c 	.word	0x0186023c
 801cb50:	02450257 	.word	0x02450257
 801cb54:	021401b1 	.word	0x021401b1
			default: break;
			}
			break;
		}
		case 0xB0: {
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801cb58:	2028      	movs	r0, #40	; 0x28
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 801cb5a:	2500      	movs	r5, #0
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801cb5c:	f7e4 fb1c 	bl	8001198 <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801cb60:	489c      	ldr	r0, [pc, #624]	; (801cdd4 <HAL_SPI_TxRxCpltCallback+0x2c0>)
 801cb62:	f06f 0201 	mvn.w	r2, #1
 801cb66:	6803      	ldr	r3, [r0, #0]
 801cb68:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 801cb6a:	625d      	str	r5, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 801cb6c:	f7e9 fc88 	bl	8006480 <HAL_TIM_Base_Start_IT>
			if(spi_rx[2] == 0x24) {
 801cb70:	78a3      	ldrb	r3, [r4, #2]
 801cb72:	2b24      	cmp	r3, #36	; 0x24
 801cb74:	d06c      	beq.n	801cc50 <HAL_SPI_TxRxCpltCallback+0x13c>
			}
			break;
		}
		default: break;
		}
	for(int i = 0; i < 4; i++) spi_rx[i] = 0;
 801cb76:	2000      	movs	r0, #0
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 801cb78:	2304      	movs	r3, #4
 801cb7a:	4a95      	ldr	r2, [pc, #596]	; (801cdd0 <HAL_SPI_TxRxCpltCallback+0x2bc>)
	for(int i = 0; i < 4; i++) spi_rx[i] = 0;
 801cb7c:	6020      	str	r0, [r4, #0]
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 801cb7e:	4996      	ldr	r1, [pc, #600]	; (801cdd8 <HAL_SPI_TxRxCpltCallback+0x2c4>)
 801cb80:	4896      	ldr	r0, [pc, #600]	; (801cddc <HAL_SPI_TxRxCpltCallback+0x2c8>)
}
 801cb82:	ecbd 8b02 	vpop	{d8}
 801cb86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 801cb8a:	f7e9 b8ed 	b.w	8005d68 <HAL_SPI_TransmitReceive_IT>
	switch(spi_rx[1] & 0xF0) {
 801cb8e:	2be0      	cmp	r3, #224	; 0xe0
 801cb90:	d1f1      	bne.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			if(flag == 0) {
 801cb92:	4993      	ldr	r1, [pc, #588]	; (801cde0 <HAL_SPI_TxRxCpltCallback+0x2cc>)
			pitch_rx |= spi_rx[2];
 801cb94:	8863      	ldrh	r3, [r4, #2]
			if(flag == 0) {
 801cb96:	780a      	ldrb	r2, [r1, #0]
				if(trak.pitch == 0) trak.pitch = pitch_rx;
 801cb98:	4e92      	ldr	r6, [pc, #584]	; (801cde4 <HAL_SPI_TxRxCpltCallback+0x2d0>)
			if(flag == 0) {
 801cb9a:	bb1a      	cbnz	r2, 801cbe4 <HAL_SPI_TxRxCpltCallback+0xd0>
				if(trak.pitch == 0) trak.pitch = pitch_rx;
 801cb9c:	8872      	ldrh	r2, [r6, #2]
 801cb9e:	b90a      	cbnz	r2, 801cba4 <HAL_SPI_TxRxCpltCallback+0x90>
 801cba0:	461a      	mov	r2, r3
 801cba2:	8073      	strh	r3, [r6, #2]
				flag = 1;
 801cba4:	2001      	movs	r0, #1
 801cba6:	7008      	strb	r0, [r1, #0]
 801cba8:	e01d      	b.n	801cbe6 <HAL_SPI_TxRxCpltCallback+0xd2>
			switch(spi_rx[2]) {
 801cbaa:	78a3      	ldrb	r3, [r4, #2]
 801cbac:	3b40      	subs	r3, #64	; 0x40
 801cbae:	2b0a      	cmp	r3, #10
 801cbb0:	d8e1      	bhi.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
 801cbb2:	a201      	add	r2, pc, #4	; (adr r2, 801cbb8 <HAL_SPI_TxRxCpltCallback+0xa4>)
 801cbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbb8:	0801cc7d 	.word	0x0801cc7d
 801cbbc:	0801cca7 	.word	0x0801cca7
 801cbc0:	0801cb77 	.word	0x0801cb77
 801cbc4:	0801cd09 	.word	0x0801cd09
 801cbc8:	0801cb77 	.word	0x0801cb77
 801cbcc:	0801cb77 	.word	0x0801cb77
 801cbd0:	0801cb77 	.word	0x0801cb77
 801cbd4:	0801cb77 	.word	0x0801cb77
 801cbd8:	0801cc9f 	.word	0x0801cc9f
 801cbdc:	0801cb77 	.word	0x0801cb77
 801cbe0:	0801ccd5 	.word	0x0801ccd5
			int delta = trak.pitch - pitch_rx;
 801cbe4:	8872      	ldrh	r2, [r6, #2]
			if(delta < 0) delta = pitch_rx - trak.pitch;
 801cbe6:	1ad1      	subs	r1, r2, r3
 801cbe8:	bf48      	it	mi
 801cbea:	1a99      	submi	r1, r3, r2
			if(delta < 16384) {
 801cbec:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 801cbf0:	dac1      	bge.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
 801cbf2:	2b40      	cmp	r3, #64	; 0x40
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 801cbf4:	eddf 7a7c 	vldr	s15, [pc, #496]	; 801cde8 <HAL_SPI_TxRxCpltCallback+0x2d4>
 801cbf8:	eddf 5a7c 	vldr	s11, [pc, #496]	; 801cdec <HAL_SPI_TxRxCpltCallback+0x2d8>
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cbfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cc00:	bf38      	it	cc
 801cc02:	2340      	movcc	r3, #64	; 0x40
 801cc04:	4a7a      	ldr	r2, [pc, #488]	; (801cdf0 <HAL_SPI_TxRxCpltCallback+0x2dc>)
				BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801cc06:	487b      	ldr	r0, [pc, #492]	; (801cdf4 <HAL_SPI_TxRxCpltCallback+0x2e0>)
 801cc08:	461d      	mov	r5, r3
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 801cc0a:	4b7b      	ldr	r3, [pc, #492]	; (801cdf8 <HAL_SPI_TxRxCpltCallback+0x2e4>)
 801cc0c:	ee07 5a10 	vmov	s14, r5
 801cc10:	ed93 6a00 	vldr	s12, [r3]
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cc14:	8933      	ldrh	r3, [r6, #8]
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 801cc16:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801cc1a:	ee26 6a25 	vmul.f32	s12, s12, s11
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cc1e:	085b      	lsrs	r3, r3, #1
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 801cc20:	ee37 7a67 	vsub.f32	s14, s14, s15
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cc24:	ee07 3a90 	vmov	s15, r3
 801cc28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 801cc2c:	ee27 7a06 	vmul.f32	s14, s14, s12
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cc30:	ee77 6a26 	vadd.f32	s13, s14, s13
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 801cc34:	ed86 7a01 	vstr	s14, [r6, #4]
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cc38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cc3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cc40:	edc2 7a00 	vstr	s15, [r2]
				BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801cc44:	6811      	ldr	r1, [r2, #0]
 801cc46:	2200      	movs	r2, #0
 801cc48:	f7ff f9aa 	bl	801bfa0 <BSP_AUDIO_OUT_ClockConfig>
				trak.pitch = pitch_rx;
 801cc4c:	8075      	strh	r5, [r6, #2]
 801cc4e:	e792      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				if(spi_rx[3] == 0x01) {
 801cc50:	78e3      	ldrb	r3, [r4, #3]
 801cc52:	2b01      	cmp	r3, #1
 801cc54:	f000 809b 	beq.w	801cd8e <HAL_SPI_TxRxCpltCallback+0x27a>
				else if(spi_rx[3] == 0x7F) {
 801cc58:	2b7f      	cmp	r3, #127	; 0x7f
 801cc5a:	d18c      	bne.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					if(menu_mode == 1) {
 801cc5c:	4b67      	ldr	r3, [pc, #412]	; (801cdfc <HAL_SPI_TxRxCpltCallback+0x2e8>)
 801cc5e:	f993 3000 	ldrsb.w	r3, [r3]
 801cc62:	2b01      	cmp	r3, #1
 801cc64:	f000 82d2 	beq.w	801d20c <HAL_SPI_TxRxCpltCallback+0x6f8>
						if(trak.state == PLAYING) {
 801cc68:	4b5e      	ldr	r3, [pc, #376]	; (801cde4 <HAL_SPI_TxRxCpltCallback+0x2d0>)
 801cc6a:	781b      	ldrb	r3, [r3, #0]
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	f040 82c2 	bne.w	801d1f6 <HAL_SPI_TxRxCpltCallback+0x6e2>
							pulses--;
 801cc72:	4a63      	ldr	r2, [pc, #396]	; (801ce00 <HAL_SPI_TxRxCpltCallback+0x2ec>)
 801cc74:	6813      	ldr	r3, [r2, #0]
 801cc76:	3b01      	subs	r3, #1
 801cc78:	6013      	str	r3, [r2, #0]
 801cc7a:	e77c      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 801cc7c:	4861      	ldr	r0, [pc, #388]	; (801ce04 <HAL_SPI_TxRxCpltCallback+0x2f0>)
 801cc7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cc82:	6803      	ldr	r3, [r0, #0]
 801cc84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801cc86:	4291      	cmp	r1, r2
 801cc88:	d809      	bhi.n	801cc9e <HAL_SPI_TxRxCpltCallback+0x18a>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 801cc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc8c:	b13b      	cbz	r3, 801cc9e <HAL_SPI_TxRxCpltCallback+0x18a>
					HAL_TIM_Base_Stop_IT(&htim9);
 801cc8e:	f7e9 fc77 	bl	8006580 <HAL_TIM_Base_Stop_IT>
					if(display.loop == 1) display.loop = 0;
 801cc92:	4b5d      	ldr	r3, [pc, #372]	; (801ce08 <HAL_SPI_TxRxCpltCallback+0x2f4>)
 801cc94:	7c1a      	ldrb	r2, [r3, #16]
 801cc96:	2a01      	cmp	r2, #1
 801cc98:	d101      	bne.n	801cc9e <HAL_SPI_TxRxCpltCallback+0x18a>
 801cc9a:	2200      	movs	r2, #0
 801cc9c:	741a      	strb	r2, [r3, #16]
				button_flag &= (0 << 2);
 801cc9e:	4b5b      	ldr	r3, [pc, #364]	; (801ce0c <HAL_SPI_TxRxCpltCallback+0x2f8>)
 801cca0:	2200      	movs	r2, #0
 801cca2:	801a      	strh	r2, [r3, #0]
				break;
 801cca4:	e767      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 801cca6:	4857      	ldr	r0, [pc, #348]	; (801ce04 <HAL_SPI_TxRxCpltCallback+0x2f0>)
 801cca8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ccac:	6803      	ldr	r3, [r0, #0]
 801ccae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801ccb0:	4291      	cmp	r1, r2
 801ccb2:	f63f af60 	bhi.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 801ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	f43f af5c 	beq.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					HAL_TIM_Base_Stop_IT(&htim9);
 801ccbe:	f7e9 fc5f 	bl	8006580 <HAL_TIM_Base_Stop_IT>
					if(display.timemode == 0) {
 801ccc2:	4b51      	ldr	r3, [pc, #324]	; (801ce08 <HAL_SPI_TxRxCpltCallback+0x2f4>)
 801ccc4:	781a      	ldrb	r2, [r3, #0]
 801ccc6:	2a00      	cmp	r2, #0
 801ccc8:	f040 82ec 	bne.w	801d2a4 <HAL_SPI_TxRxCpltCallback+0x790>
						display.timemode = 1;
 801cccc:	2201      	movs	r2, #1
 801ccce:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 1;
 801ccd0:	711a      	strb	r2, [r3, #4]
 801ccd2:	e750      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				if(trak.state == PLAYING) {
 801ccd4:	4d43      	ldr	r5, [pc, #268]	; (801cde4 <HAL_SPI_TxRxCpltCallback+0x2d0>)
 801ccd6:	782b      	ldrb	r3, [r5, #0]
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	f47f af4c 	bne.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					BSP_AUDIO_OUT_Pause();
 801ccde:	f7ff f88f 	bl	801be00 <BSP_AUDIO_OUT_Pause>
					trak.state = STOPPED;
 801cce2:	2301      	movs	r3, #1
					HAL_TIM_Base_Start_IT(&htim8); //start blinking
 801cce4:	484a      	ldr	r0, [pc, #296]	; (801ce10 <HAL_SPI_TxRxCpltCallback+0x2fc>)
					trak.state = STOPPED;
 801cce6:	702b      	strb	r3, [r5, #0]
					HAL_TIM_Base_Start_IT(&htim8); //start blinking
 801cce8:	f7e9 fbca 	bl	8006480 <HAL_TIM_Base_Start_IT>
					GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 801ccec:	4a49      	ldr	r2, [pc, #292]	; (801ce14 <HAL_SPI_TxRxCpltCallback+0x300>)
 801ccee:	f502 5340 	add.w	r3, r2, #12288	; 0x3000
 801ccf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ccf6:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 801ccfa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ccfe:	f001 f943 	bl	801df88 <GoToPosition>
					TrackTime();
 801cd02:	f001 f8e9 	bl	801ded8 <TrackTime>
 801cd06:	e736      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 801cd08:	483e      	ldr	r0, [pc, #248]	; (801ce04 <HAL_SPI_TxRxCpltCallback+0x2f0>)
 801cd0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cd0e:	6803      	ldr	r3, [r0, #0]
 801cd10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801cd12:	4291      	cmp	r1, r2
 801cd14:	f63f af2f 	bhi.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 801cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	f43f af2b 	beq.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					HAL_TIM_Base_Stop_IT(&htim9);
 801cd20:	f7e9 fc2e 	bl	8006580 <HAL_TIM_Base_Stop_IT>
					display.pitchmode++;
 801cd24:	4a38      	ldr	r2, [pc, #224]	; (801ce08 <HAL_SPI_TxRxCpltCallback+0x2f4>)
 801cd26:	7853      	ldrb	r3, [r2, #1]
 801cd28:	3301      	adds	r3, #1
 801cd2a:	b2db      	uxtb	r3, r3
					if(display.pitchmode > 3) display.pitchmode = 0;
 801cd2c:	2b03      	cmp	r3, #3
					display.pitchmode++;
 801cd2e:	7053      	strb	r3, [r2, #1]
					if(display.pitchmode > 3) display.pitchmode = 0;
 801cd30:	f240 82ab 	bls.w	801d28a <HAL_SPI_TxRxCpltCallback+0x776>
 801cd34:	2300      	movs	r3, #0
 801cd36:	7053      	strb	r3, [r2, #1]
					if(display.pitchmode == 0) scale_pitch = 1; //wide
 801cd38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801cd3c:	4b2e      	ldr	r3, [pc, #184]	; (801cdf8 <HAL_SPI_TxRxCpltCallback+0x2e4>)
 801cd3e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 801cdec <HAL_SPI_TxRxCpltCallback+0x2d8>
 801cd42:	601a      	str	r2, [r3, #0]
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 801cd44:	4927      	ldr	r1, [pc, #156]	; (801cde4 <HAL_SPI_TxRxCpltCallback+0x2d0>)
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cd46:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 801cd4a:	eddf 5a33 	vldr	s11, [pc, #204]	; 801ce18 <HAL_SPI_TxRxCpltCallback+0x304>
					BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801cd4e:	2200      	movs	r2, #0
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 801cd50:	884b      	ldrh	r3, [r1, #2]
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cd52:	4d27      	ldr	r5, [pc, #156]	; (801cdf0 <HAL_SPI_TxRxCpltCallback+0x2dc>)
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 801cd54:	ee07 3a10 	vmov	s14, r3
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cd58:	890b      	ldrh	r3, [r1, #8]
					BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801cd5a:	4826      	ldr	r0, [pc, #152]	; (801cdf4 <HAL_SPI_TxRxCpltCallback+0x2e0>)
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 801cd5c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cd60:	085b      	lsrs	r3, r3, #1
 801cd62:	ee07 3a90 	vmov	s15, r3
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 801cd66:	ee37 7a65 	vsub.f32	s14, s14, s11
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cd6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 801cd6e:	ee27 7a26 	vmul.f32	s14, s14, s13
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cd72:	ee77 6a06 	vadd.f32	s13, s14, s12
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 801cd76:	ed81 7a01 	vstr	s14, [r1, #4]
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801cd7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cd7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cd82:	edc5 7a00 	vstr	s15, [r5]
					BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801cd86:	6829      	ldr	r1, [r5, #0]
 801cd88:	f7ff f90a 	bl	801bfa0 <BSP_AUDIO_OUT_ClockConfig>
 801cd8c:	e6f3      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					if(menu_mode == 1) {
 801cd8e:	4b1b      	ldr	r3, [pc, #108]	; (801cdfc <HAL_SPI_TxRxCpltCallback+0x2e8>)
 801cd90:	f993 3000 	ldrsb.w	r3, [r3]
 801cd94:	2b01      	cmp	r3, #1
 801cd96:	f000 814d 	beq.w	801d034 <HAL_SPI_TxRxCpltCallback+0x520>
						if(trak.state == PLAYING) {
 801cd9a:	4b12      	ldr	r3, [pc, #72]	; (801cde4 <HAL_SPI_TxRxCpltCallback+0x2d0>)
 801cd9c:	781b      	ldrb	r3, [r3, #0]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	f040 8159 	bne.w	801d056 <HAL_SPI_TxRxCpltCallback+0x542>
							pulses++;
 801cda4:	4a16      	ldr	r2, [pc, #88]	; (801ce00 <HAL_SPI_TxRxCpltCallback+0x2ec>)
 801cda6:	6813      	ldr	r3, [r2, #0]
 801cda8:	3301      	adds	r3, #1
 801cdaa:	6013      	str	r3, [r2, #0]
 801cdac:	e6e3      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			if(!(button_flag & (1 << 2))) {
 801cdae:	4b17      	ldr	r3, [pc, #92]	; (801ce0c <HAL_SPI_TxRxCpltCallback+0x2f8>)
 801cdb0:	881b      	ldrh	r3, [r3, #0]
 801cdb2:	075b      	lsls	r3, r3, #29
 801cdb4:	f100 81ba 	bmi.w	801d12c <HAL_SPI_TxRxCpltCallback+0x618>
				Track_number++;
 801cdb8:	4a18      	ldr	r2, [pc, #96]	; (801ce1c <HAL_SPI_TxRxCpltCallback+0x308>)
				bOutOfData = 1;
 801cdba:	2001      	movs	r0, #1
 801cdbc:	4b18      	ldr	r3, [pc, #96]	; (801ce20 <HAL_SPI_TxRxCpltCallback+0x30c>)
				unDmaBufMode = 3;
 801cdbe:	4919      	ldr	r1, [pc, #100]	; (801ce24 <HAL_SPI_TxRxCpltCallback+0x310>)
				bOutOfData = 1;
 801cdc0:	6018      	str	r0, [r3, #0]
				unDmaBufMode = 3;
 801cdc2:	2003      	movs	r0, #3
				Track_number++;
 801cdc4:	6813      	ldr	r3, [r2, #0]
				unDmaBufMode = 3;
 801cdc6:	6008      	str	r0, [r1, #0]
				Track_number++;
 801cdc8:	3301      	adds	r3, #1
 801cdca:	6013      	str	r3, [r2, #0]
 801cdcc:	e6d3      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
 801cdce:	bf00      	nop
 801cdd0:	2000f78c 	.word	0x2000f78c
 801cdd4:	2001891c 	.word	0x2001891c
 801cdd8:	20000058 	.word	0x20000058
 801cddc:	20018758 	.word	0x20018758
 801cde0:	2001887c 	.word	0x2001887c
 801cde4:	2000f794 	.word	0x2000f794
 801cde8:	467ffc00 	.word	0x467ffc00
 801cdec:	38800000 	.word	0x38800000
 801cdf0:	20000068 	.word	0x20000068
 801cdf4:	2001864c 	.word	0x2001864c
 801cdf8:	20000074 	.word	0x20000074
 801cdfc:	200009a4 	.word	0x200009a4
 801ce00:	20018888 	.word	0x20018888
 801ce04:	200189dc 	.word	0x200189dc
 801ce08:	20000988 	.word	0x20000988
 801ce0c:	2001887a 	.word	0x2001887a
 801ce10:	2001899c 	.word	0x2001899c
 801ce14:	20015208 	.word	0x20015208
 801ce18:	46800000 	.word	0x46800000
 801ce1c:	2000e714 	.word	0x2000e714
 801ce20:	2000e948 	.word	0x2000e948
 801ce24:	2000f7cc 	.word	0x2000f7cc
			if(!(button_flag & (1 << 2))) {
 801ce28:	4ba9      	ldr	r3, [pc, #676]	; (801d0d0 <HAL_SPI_TxRxCpltCallback+0x5bc>)
 801ce2a:	881b      	ldrh	r3, [r3, #0]
 801ce2c:	075a      	lsls	r2, r3, #29
 801ce2e:	f100 818c 	bmi.w	801d14a <HAL_SPI_TxRxCpltCallback+0x636>
				Track_number--;
 801ce32:	4aa8      	ldr	r2, [pc, #672]	; (801d0d4 <HAL_SPI_TxRxCpltCallback+0x5c0>)
				bOutOfData = 1;
 801ce34:	2001      	movs	r0, #1
 801ce36:	4ba8      	ldr	r3, [pc, #672]	; (801d0d8 <HAL_SPI_TxRxCpltCallback+0x5c4>)
				unDmaBufMode = 3;
 801ce38:	49a8      	ldr	r1, [pc, #672]	; (801d0dc <HAL_SPI_TxRxCpltCallback+0x5c8>)
				bOutOfData = 1;
 801ce3a:	6018      	str	r0, [r3, #0]
				unDmaBufMode = 3;
 801ce3c:	2003      	movs	r0, #3
				Track_number--;
 801ce3e:	6813      	ldr	r3, [r2, #0]
				unDmaBufMode = 3;
 801ce40:	6008      	str	r0, [r1, #0]
				Track_number--;
 801ce42:	3b01      	subs	r3, #1
 801ce44:	6013      	str	r3, [r2, #0]
 801ce46:	e696      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			if(trak.state == PLAYING) {
 801ce48:	4ea5      	ldr	r6, [pc, #660]	; (801d0e0 <HAL_SPI_TxRxCpltCallback+0x5cc>)
 801ce4a:	7833      	ldrb	r3, [r6, #0]
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	f040 8191 	bne.w	801d174 <HAL_SPI_TxRxCpltCallback+0x660>
				BSP_AUDIO_OUT_Pause();
 801ce52:	f7fe ffd5 	bl	801be00 <BSP_AUDIO_OUT_Pause>
				if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 801ce56:	4ba3      	ldr	r3, [pc, #652]	; (801d0e4 <HAL_SPI_TxRxCpltCallback+0x5d0>)
 801ce58:	789a      	ldrb	r2, [r3, #2]
 801ce5a:	2a00      	cmp	r2, #0
 801ce5c:	f000 820e 	beq.w	801d27c <HAL_SPI_TxRxCpltCallback+0x768>
				else spi_tx[2] &= ~(1 << 1);
 801ce60:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 801ce64:	709a      	strb	r2, [r3, #2]
				HAL_TIM_Base_Start_IT(&htim8); //start blinking
 801ce66:	48a0      	ldr	r0, [pc, #640]	; (801d0e8 <HAL_SPI_TxRxCpltCallback+0x5d4>)
 801ce68:	f7e9 fb0a 	bl	8006480 <HAL_TIM_Base_Start_IT>
				if(file_pos_wide != rekordbox.cue_start_position[0]) {
 801ce6c:	4a9f      	ldr	r2, [pc, #636]	; (801d0ec <HAL_SPI_TxRxCpltCallback+0x5d8>)
 801ce6e:	4ba0      	ldr	r3, [pc, #640]	; (801d0f0 <HAL_SPI_TxRxCpltCallback+0x5dc>)
 801ce70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	429a      	cmp	r2, r3
					trak.state = SETCUE;
 801ce76:	bf14      	ite	ne
 801ce78:	2302      	movne	r3, #2
					trak.state = STOPPED;
 801ce7a:	2301      	moveq	r3, #1
 801ce7c:	7033      	strb	r3, [r6, #0]
 801ce7e:	e67a      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			button_flag ^= (1 << 3);
 801ce80:	4a93      	ldr	r2, [pc, #588]	; (801d0d0 <HAL_SPI_TxRxCpltCallback+0x5bc>)
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 801ce82:	f06f 0501 	mvn.w	r5, #1
 801ce86:	489b      	ldr	r0, [pc, #620]	; (801d0f4 <HAL_SPI_TxRxCpltCallback+0x5e0>)
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 801ce88:	2100      	movs	r1, #0
			button_flag ^= (1 << 3);
 801ce8a:	8813      	ldrh	r3, [r2, #0]
 801ce8c:	f083 0308 	eor.w	r3, r3, #8
			button_flag ^= (1 << 1);
 801ce90:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 801ce92:	6803      	ldr	r3, [r0, #0]
 801ce94:	611d      	str	r5, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 801ce96:	6259      	str	r1, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 801ce98:	f7e9 faf2 	bl	8006480 <HAL_TIM_Base_Start_IT>
			break;
 801ce9c:	e66b      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			if(!(button_flag & (1 << 2))) {
 801ce9e:	4b8c      	ldr	r3, [pc, #560]	; (801d0d0 <HAL_SPI_TxRxCpltCallback+0x5bc>)
 801cea0:	881b      	ldrh	r3, [r3, #0]
 801cea2:	f013 0504 	ands.w	r5, r3, #4
 801cea6:	f040 818d 	bne.w	801d1c4 <HAL_SPI_TxRxCpltCallback+0x6b0>
				if(display.quantize == 1) {
 801ceaa:	4b93      	ldr	r3, [pc, #588]	; (801d0f8 <HAL_SPI_TxRxCpltCallback+0x5e4>)
 801ceac:	7c58      	ldrb	r0, [r3, #17]
 801ceae:	2801      	cmp	r0, #1
 801ceb0:	f000 820e 	beq.w	801d2d0 <HAL_SPI_TxRxCpltCallback+0x7bc>
					GoToPosition((float)(f_tell(&MyFile) + 60000)
 801ceb4:	4e91      	ldr	r6, [pc, #580]	; (801d0fc <HAL_SPI_TxRxCpltCallback+0x5e8>)
 801ceb6:	f64e 2360 	movw	r3, #60000	; 0xea60
 801ceba:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801cebc:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 801cebe:	1818      	adds	r0, r3, r0
 801cec0:	f141 0100 	adc.w	r1, r1, #0
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 801cec4:	f7e3 feaa 	bl	8000c1c <__aeabi_ul2f>
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801cec8:	4b8d      	ldr	r3, [pc, #564]	; (801d100 <HAL_SPI_TxRxCpltCallback+0x5ec>)
 801ceca:	4a8e      	ldr	r2, [pc, #568]	; (801d104 <HAL_SPI_TxRxCpltCallback+0x5f0>)
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 801cecc:	ee08 0a10 	vmov	s16, r0
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	6812      	ldr	r2, [r2, #0]
 801ced4:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 801ced8:	189b      	adds	r3, r3, r2
 801ceda:	416d      	adcs	r5, r5
 801cedc:	1ac0      	subs	r0, r0, r3
 801cede:	eb61 0105 	sbc.w	r1, r1, r5
 801cee2:	f7e3 fe9b 	bl	8000c1c <__aeabi_ul2f>
 801cee6:	ee07 0a90 	vmov	s15, r0
							*rekordbox.spectrum_size);
 801ceea:	4b87      	ldr	r3, [pc, #540]	; (801d108 <HAL_SPI_TxRxCpltCallback+0x5f4>)
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801ceec:	eec8 7a27 	vdiv.f32	s15, s16, s15
							*rekordbox.spectrum_size);
 801cef0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 801cef4:	ed93 7a00 	vldr	s14, [r3]
 801cef8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801cefc:	ee67 7a87 	vmul.f32	s15, s15, s14
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 801cf00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cf04:	ee17 0a90 	vmov	r0, s15
 801cf08:	f001 f83e 	bl	801df88 <GoToPosition>
				if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 801cf0c:	4e74      	ldr	r6, [pc, #464]	; (801d0e0 <HAL_SPI_TxRxCpltCallback+0x5cc>)
 801cf0e:	7833      	ldrb	r3, [r6, #0]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	f040 8147 	bne.w	801d1a4 <HAL_SPI_TxRxCpltCallback+0x690>
 801cf16:	f7fe ff7b 	bl	801be10 <BSP_AUDIO_OUT_Resume>
 801cf1a:	e62c      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			if(display.quantize == 1) {
 801cf1c:	4d76      	ldr	r5, [pc, #472]	; (801d0f8 <HAL_SPI_TxRxCpltCallback+0x5e4>)
 801cf1e:	7c6b      	ldrb	r3, [r5, #17]
 801cf20:	2b01      	cmp	r3, #1
 801cf22:	f000 81c3 	beq.w	801d2ac <HAL_SPI_TxRxCpltCallback+0x798>
				display.loopstart = file_pos_wide;
 801cf26:	4b72      	ldr	r3, [pc, #456]	; (801d0f0 <HAL_SPI_TxRxCpltCallback+0x5dc>)
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	60ab      	str	r3, [r5, #8]
 801cf2c:	e623      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			button_flag ^= (1 << 1);
 801cf2e:	4a68      	ldr	r2, [pc, #416]	; (801d0d0 <HAL_SPI_TxRxCpltCallback+0x5bc>)
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 801cf30:	f06f 0501 	mvn.w	r5, #1
 801cf34:	486f      	ldr	r0, [pc, #444]	; (801d0f4 <HAL_SPI_TxRxCpltCallback+0x5e0>)
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 801cf36:	2100      	movs	r1, #0
			button_flag ^= (1 << 1);
 801cf38:	8813      	ldrh	r3, [r2, #0]
 801cf3a:	f083 0302 	eor.w	r3, r3, #2
 801cf3e:	e7a7      	b.n	801ce90 <HAL_SPI_TxRxCpltCallback+0x37c>
			if(display.quantize == 1) {
 801cf40:	4d6d      	ldr	r5, [pc, #436]	; (801d0f8 <HAL_SPI_TxRxCpltCallback+0x5e4>)
 801cf42:	7c6b      	ldrb	r3, [r5, #17]
 801cf44:	2b01      	cmp	r3, #1
 801cf46:	f000 819b 	beq.w	801d280 <HAL_SPI_TxRxCpltCallback+0x76c>
				display.loopend = file_pos_wide;
 801cf4a:	4b69      	ldr	r3, [pc, #420]	; (801d0f0 <HAL_SPI_TxRxCpltCallback+0x5dc>)
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	60eb      	str	r3, [r5, #12]
			if(display.loop == 0) display.loop = 1;
 801cf50:	7c2b      	ldrb	r3, [r5, #16]
 801cf52:	b90b      	cbnz	r3, 801cf58 <HAL_SPI_TxRxCpltCallback+0x444>
 801cf54:	2301      	movs	r3, #1
 801cf56:	742b      	strb	r3, [r5, #16]
			GoToPosition(display.loopstart);
 801cf58:	68a8      	ldr	r0, [r5, #8]
 801cf5a:	f001 f815 	bl	801df88 <GoToPosition>
			BSP_AUDIO_OUT_Resume();
 801cf5e:	f7fe ff57 	bl	801be10 <BSP_AUDIO_OUT_Resume>
			break;
 801cf62:	e608      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			if(menu_mode == 1) {
 801cf64:	4b69      	ldr	r3, [pc, #420]	; (801d10c <HAL_SPI_TxRxCpltCallback+0x5f8>)
 801cf66:	f993 3000 	ldrsb.w	r3, [r3]
 801cf6a:	2b01      	cmp	r3, #1
 801cf6c:	f47f ae03 	bne.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				bOutOfData = 1;
 801cf70:	4859      	ldr	r0, [pc, #356]	; (801d0d8 <HAL_SPI_TxRxCpltCallback+0x5c4>)
				unDmaBufMode = 3;
 801cf72:	2103      	movs	r1, #3
 801cf74:	4a59      	ldr	r2, [pc, #356]	; (801d0dc <HAL_SPI_TxRxCpltCallback+0x5c8>)
				bOutOfData = 1;
 801cf76:	6003      	str	r3, [r0, #0]
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801cf78:	2028      	movs	r0, #40	; 0x28
				unDmaBufMode = 3;
 801cf7a:	6011      	str	r1, [r2, #0]
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801cf7c:	f7e4 f90c 	bl	8001198 <HAL_NVIC_DisableIRQ>
				__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801cf80:	4863      	ldr	r0, [pc, #396]	; (801d110 <HAL_SPI_TxRxCpltCallback+0x5fc>)
 801cf82:	f06f 0101 	mvn.w	r1, #1
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 801cf86:	2200      	movs	r2, #0
				__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801cf88:	6803      	ldr	r3, [r0, #0]
 801cf8a:	6119      	str	r1, [r3, #16]
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 801cf8c:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim6);
 801cf8e:	f7e9 fa77 	bl	8006480 <HAL_TIM_Base_Start_IT>
				Track_number = Mark_number + str_increment;
 801cf92:	4b60      	ldr	r3, [pc, #384]	; (801d114 <HAL_SPI_TxRxCpltCallback+0x600>)
 801cf94:	4960      	ldr	r1, [pc, #384]	; (801d118 <HAL_SPI_TxRxCpltCallback+0x604>)
				if(Track_number >= Total_tracks) Track_number = 0;
 801cf96:	4a61      	ldr	r2, [pc, #388]	; (801d11c <HAL_SPI_TxRxCpltCallback+0x608>)
				Track_number = Mark_number + str_increment;
 801cf98:	6809      	ldr	r1, [r1, #0]
 801cf9a:	681b      	ldr	r3, [r3, #0]
				if(Track_number >= Total_tracks) Track_number = 0;
 801cf9c:	8812      	ldrh	r2, [r2, #0]
				Track_number = Mark_number + str_increment;
 801cf9e:	440b      	add	r3, r1
 801cfa0:	484c      	ldr	r0, [pc, #304]	; (801d0d4 <HAL_SPI_TxRxCpltCallback+0x5c0>)
				String_number = -1;
 801cfa2:	f04f 31ff 	mov.w	r1, #4294967295
				if(Track_number >= Total_tracks) Track_number = 0;
 801cfa6:	4293      	cmp	r3, r2
 801cfa8:	bfa8      	it	ge
 801cfaa:	2300      	movge	r3, #0
				String_number = -1;
 801cfac:	4a5c      	ldr	r2, [pc, #368]	; (801d120 <HAL_SPI_TxRxCpltCallback+0x60c>)
				if(Track_number >= Total_tracks) Track_number = 0;
 801cfae:	6003      	str	r3, [r0, #0]
				String_number = -1;
 801cfb0:	6011      	str	r1, [r2, #0]
 801cfb2:	e5e0      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			button_flag ^= (1 << 2);
 801cfb4:	4a46      	ldr	r2, [pc, #280]	; (801d0d0 <HAL_SPI_TxRxCpltCallback+0x5bc>)
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 801cfb6:	f06f 0501 	mvn.w	r5, #1
 801cfba:	484e      	ldr	r0, [pc, #312]	; (801d0f4 <HAL_SPI_TxRxCpltCallback+0x5e0>)
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 801cfbc:	2100      	movs	r1, #0
			button_flag ^= (1 << 2);
 801cfbe:	8813      	ldrh	r3, [r2, #0]
 801cfc0:	f083 0304 	eor.w	r3, r3, #4
 801cfc4:	e764      	b.n	801ce90 <HAL_SPI_TxRxCpltCallback+0x37c>
			if(!(button_flag & (1 << 2))) {
 801cfc6:	4b42      	ldr	r3, [pc, #264]	; (801d0d0 <HAL_SPI_TxRxCpltCallback+0x5bc>)
 801cfc8:	881b      	ldrh	r3, [r3, #0]
 801cfca:	f013 0504 	ands.w	r5, r3, #4
 801cfce:	d14d      	bne.n	801d06c <HAL_SPI_TxRxCpltCallback+0x558>
				if(display.quantize == 1) {
 801cfd0:	4b49      	ldr	r3, [pc, #292]	; (801d0f8 <HAL_SPI_TxRxCpltCallback+0x5e4>)
 801cfd2:	7c5b      	ldrb	r3, [r3, #17]
 801cfd4:	2b01      	cmp	r3, #1
 801cfd6:	f000 8180 	beq.w	801d2da <HAL_SPI_TxRxCpltCallback+0x7c6>
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 801cfda:	4e48      	ldr	r6, [pc, #288]	; (801d0fc <HAL_SPI_TxRxCpltCallback+0x5e8>)
 801cfdc:	4851      	ldr	r0, [pc, #324]	; (801d124 <HAL_SPI_TxRxCpltCallback+0x610>)
 801cfde:	e9d6 310e 	ldrd	r3, r1, [r6, #56]	; 0x38
 801cfe2:	1818      	adds	r0, r3, r0
 801cfe4:	f161 0100 	sbc.w	r1, r1, #0
 801cfe8:	e76c      	b.n	801cec4 <HAL_SPI_TxRxCpltCallback+0x3b0>
			if(trak.state == STOPPED) {
 801cfea:	4e3d      	ldr	r6, [pc, #244]	; (801d0e0 <HAL_SPI_TxRxCpltCallback+0x5cc>)
 801cfec:	7833      	ldrb	r3, [r6, #0]
 801cfee:	2b01      	cmp	r3, #1
 801cff0:	f000 8161 	beq.w	801d2b6 <HAL_SPI_TxRxCpltCallback+0x7a2>
			else if(trak.state == SETCUE) {
 801cff4:	2b02      	cmp	r3, #2
 801cff6:	f47f adbe 	bne.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				if(display.quantize == 1) {
 801cffa:	4b3f      	ldr	r3, [pc, #252]	; (801d0f8 <HAL_SPI_TxRxCpltCallback+0x5e4>)
 801cffc:	7c5b      	ldrb	r3, [r3, #17]
 801cffe:	2b01      	cmp	r3, #1
 801d000:	f000 8176 	beq.w	801d2f0 <HAL_SPI_TxRxCpltCallback+0x7dc>
					rekordbox.cue_start_position[0] = file_pos_wide;
 801d004:	4b3a      	ldr	r3, [pc, #232]	; (801d0f0 <HAL_SPI_TxRxCpltCallback+0x5dc>)
 801d006:	4d39      	ldr	r5, [pc, #228]	; (801d0ec <HAL_SPI_TxRxCpltCallback+0x5d8>)
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	64ab      	str	r3, [r5, #72]	; 0x48
				spi_tx[2] &= ~(1 << 1); //turn on CUE led
 801d00c:	4a35      	ldr	r2, [pc, #212]	; (801d0e4 <HAL_SPI_TxRxCpltCallback+0x5d0>)
				rekordbox.currentcue = 0;
 801d00e:	2300      	movs	r3, #0
				trak.state = STOPPED;
 801d010:	2101      	movs	r1, #1
				rekordbox.currentcue = 0;
 801d012:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
				spi_tx[2] &= ~(1 << 1); //turn on CUE led
 801d016:	7893      	ldrb	r3, [r2, #2]
				trak.state = STOPPED;
 801d018:	7031      	strb	r1, [r6, #0]
				spi_tx[2] &= ~(1 << 1); //turn on CUE led
 801d01a:	f023 0302 	bic.w	r3, r3, #2
 801d01e:	7093      	strb	r3, [r2, #2]
				trak.state = STOPPED;
 801d020:	e5a9      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
			button_flag ^= (1 << 0);
 801d022:	4a2b      	ldr	r2, [pc, #172]	; (801d0d0 <HAL_SPI_TxRxCpltCallback+0x5bc>)
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 801d024:	f06f 0501 	mvn.w	r5, #1
 801d028:	4832      	ldr	r0, [pc, #200]	; (801d0f4 <HAL_SPI_TxRxCpltCallback+0x5e0>)
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 801d02a:	2100      	movs	r1, #0
			button_flag ^= (1 << 0);
 801d02c:	8813      	ldrh	r3, [r2, #0]
 801d02e:	f083 0301 	eor.w	r3, r3, #1
 801d032:	e72d      	b.n	801ce90 <HAL_SPI_TxRxCpltCallback+0x37c>
						String_number++;
 801d034:	493a      	ldr	r1, [pc, #232]	; (801d120 <HAL_SPI_TxRxCpltCallback+0x60c>)
						if(Total_tracks < 7) {
 801d036:	4a39      	ldr	r2, [pc, #228]	; (801d11c <HAL_SPI_TxRxCpltCallback+0x608>)
						String_number++;
 801d038:	680b      	ldr	r3, [r1, #0]
						if(Total_tracks < 7) {
 801d03a:	8812      	ldrh	r2, [r2, #0]
						String_number++;
 801d03c:	3301      	adds	r3, #1
						Mark_number = String_number;
 801d03e:	4835      	ldr	r0, [pc, #212]	; (801d114 <HAL_SPI_TxRxCpltCallback+0x600>)
						if(Total_tracks < 7) {
 801d040:	2a06      	cmp	r2, #6
						String_number++;
 801d042:	600b      	str	r3, [r1, #0]
						Mark_number = String_number;
 801d044:	6003      	str	r3, [r0, #0]
						if(Total_tracks < 7) {
 801d046:	f200 8103 	bhi.w	801d250 <HAL_SPI_TxRxCpltCallback+0x73c>
							if(String_number + 1 > Total_tracks) {
 801d04a:	4293      	cmp	r3, r2
 801d04c:	f6ff ad93 	blt.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
								String_number = 0;
 801d050:	600d      	str	r5, [r1, #0]
								Mark_number = 0;
 801d052:	6005      	str	r5, [r0, #0]
 801d054:	e58f      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
						else if(trak.state == SETCUE) {
 801d056:	2b02      	cmp	r3, #2
 801d058:	f47f ad8d 	bne.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
							GoToPosition(file_pos_wide + 2);
 801d05c:	4b24      	ldr	r3, [pc, #144]	; (801d0f0 <HAL_SPI_TxRxCpltCallback+0x5dc>)
 801d05e:	6818      	ldr	r0, [r3, #0]
 801d060:	3002      	adds	r0, #2
 801d062:	f000 ff91 	bl	801df88 <GoToPosition>
							GetTrackTime();
 801d066:	f001 f83d 	bl	801e0e4 <GetTrackTime>
 801d06a:	e584      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				rekordbox.currentcue++;
 801d06c:	4d1f      	ldr	r5, [pc, #124]	; (801d0ec <HAL_SPI_TxRxCpltCallback+0x5d8>)
 801d06e:	f8d5 33d0 	ldr.w	r3, [r5, #976]	; 0x3d0
				if(rekordbox.currentcue >= rekordbox.cues)
 801d072:	f5a5 5280 	sub.w	r2, r5, #4096	; 0x1000
				rekordbox.currentcue++;
 801d076:	3301      	adds	r3, #1
				if(rekordbox.currentcue >= rekordbox.cues)
 801d078:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 801d07c:	4293      	cmp	r3, r2
				rekordbox.currentcue++;
 801d07e:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
				if(rekordbox.currentcue >= rekordbox.cues)
 801d082:	db03      	blt.n	801d08c <HAL_SPI_TxRxCpltCallback+0x578>
					rekordbox.currentcue = 0;
 801d084:	2200      	movs	r2, #0
 801d086:	4613      	mov	r3, r2
 801d088:	f8c5 23d0 	str.w	r2, [r5, #976]	; 0x3d0
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 801d08c:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 801d090:	4e25      	ldr	r6, [pc, #148]	; (801d128 <HAL_SPI_TxRxCpltCallback+0x614>)
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 801d092:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801d096:	f000 ff77 	bl	801df88 <GoToPosition>
				if(trak.state == PLAYING) {
 801d09a:	4b11      	ldr	r3, [pc, #68]	; (801d0e0 <HAL_SPI_TxRxCpltCallback+0x5cc>)
 801d09c:	781b      	ldrb	r3, [r3, #0]
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	f040 80a4 	bne.w	801d1ec <HAL_SPI_TxRxCpltCallback+0x6d8>
					BSP_AUDIO_OUT_Resume();
 801d0a4:	f7fe feb4 	bl	801be10 <BSP_AUDIO_OUT_Resume>
					HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 801d0a8:	480f      	ldr	r0, [pc, #60]	; (801d0e8 <HAL_SPI_TxRxCpltCallback+0x5d4>)
 801d0aa:	f7e9 fa69 	bl	8006580 <HAL_TIM_Base_Stop_IT>
					spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 801d0ae:	4b0d      	ldr	r3, [pc, #52]	; (801d0e4 <HAL_SPI_TxRxCpltCallback+0x5d0>)
 801d0b0:	789a      	ldrb	r2, [r3, #2]
 801d0b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 801d0b6:	f8d5 13d0 	ldr.w	r1, [r5, #976]	; 0x3d0
 801d0ba:	f601 4112 	addw	r1, r1, #3090	; 0xc12
 801d0be:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d0c2:	2900      	cmp	r1, #0
 801d0c4:	d07a      	beq.n	801d1bc <HAL_SPI_TxRxCpltCallback+0x6a8>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 801d0c6:	f022 0202 	bic.w	r2, r2, #2
 801d0ca:	709a      	strb	r2, [r3, #2]
 801d0cc:	e553      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
 801d0ce:	bf00      	nop
 801d0d0:	2001887a 	.word	0x2001887a
 801d0d4:	2000e714 	.word	0x2000e714
 801d0d8:	2000e948 	.word	0x2000e948
 801d0dc:	2000f7cc 	.word	0x2000f7cc
 801d0e0:	2000f794 	.word	0x2000f794
 801d0e4:	20000058 	.word	0x20000058
 801d0e8:	2001899c 	.word	0x2001899c
 801d0ec:	20018208 	.word	0x20018208
 801d0f0:	2000e9a4 	.word	0x2000e9a4
 801d0f4:	200189dc 	.word	0x200189dc
 801d0f8:	20000988 	.word	0x20000988
 801d0fc:	20001b58 	.word	0x20001b58
 801d100:	200151d8 	.word	0x200151d8
 801d104:	20019578 	.word	0x20019578
 801d108:	20017208 	.word	0x20017208
 801d10c:	200009a4 	.word	0x200009a4
 801d110:	2001891c 	.word	0x2001891c
 801d114:	20000064 	.word	0x20000064
 801d118:	2001888c 	.word	0x2001888c
 801d11c:	20001fd8 	.word	0x20001fd8
 801d120:	2000006c 	.word	0x2000006c
 801d124:	fffe2b40 	.word	0xfffe2b40
 801d128:	20015208 	.word	0x20015208
				display.loopend = display.loopend*2-display.loopstart;
 801d12c:	4b79      	ldr	r3, [pc, #484]	; (801d314 <HAL_SPI_TxRxCpltCallback+0x800>)
				if(display.loopend >= rekordbox.spectrum_size)
 801d12e:	4a7a      	ldr	r2, [pc, #488]	; (801d318 <HAL_SPI_TxRxCpltCallback+0x804>)
				display.loopend = display.loopend*2-display.loopstart;
 801d130:	e9d3 1002 	ldrd	r1, r0, [r3, #8]
				if(display.loopend >= rekordbox.spectrum_size)
 801d134:	f8d2 2a8c 	ldr.w	r2, [r2, #2700]	; 0xa8c
				display.loopend = display.loopend*2-display.loopstart;
 801d138:	ebc1 0140 	rsb	r1, r1, r0, lsl #1
				if(display.loopend >= rekordbox.spectrum_size)
 801d13c:	4291      	cmp	r1, r2
				display.loopend = display.loopend*2-display.loopstart;
 801d13e:	60d9      	str	r1, [r3, #12]
				if(display.loopend >= rekordbox.spectrum_size)
 801d140:	f4ff ad19 	bcc.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					display.loopend = rekordbox.spectrum_size - 1;
 801d144:	3a01      	subs	r2, #1
 801d146:	60da      	str	r2, [r3, #12]
 801d148:	e515      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				display.loopend = (display.loopend+display.loopstart)/2;
 801d14a:	4a72      	ldr	r2, [pc, #456]	; (801d314 <HAL_SPI_TxRxCpltCallback+0x800>)
 801d14c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 801d150:	4401      	add	r1, r0
				if(display.loopend - display.loopstart < 1)
 801d152:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
				display.loopend = (display.loopend+display.loopstart)/2;
 801d156:	ea4f 0351 	mov.w	r3, r1, lsr #1
					display.loopend = display.loopstart + 1;
 801d15a:	bf08      	it	eq
 801d15c:	1c43      	addeq	r3, r0, #1
 801d15e:	60d3      	str	r3, [r2, #12]
				if(file_pos_wide >= display.loopend) {
 801d160:	4a6e      	ldr	r2, [pc, #440]	; (801d31c <HAL_SPI_TxRxCpltCallback+0x808>)
 801d162:	6812      	ldr	r2, [r2, #0]
 801d164:	429a      	cmp	r2, r3
 801d166:	f4ff ad06 	bcc.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					GoToPosition(display.loopstart);
 801d16a:	f000 ff0d 	bl	801df88 <GoToPosition>
					BSP_AUDIO_OUT_Resume();
 801d16e:	f7fe fe4f 	bl	801be10 <BSP_AUDIO_OUT_Resume>
 801d172:	e500      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				BSP_AUDIO_OUT_Resume();
 801d174:	f7fe fe4c 	bl	801be10 <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 801d178:	2300      	movs	r3, #0
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 801d17a:	4869      	ldr	r0, [pc, #420]	; (801d320 <HAL_SPI_TxRxCpltCallback+0x80c>)
				trak.state = PLAYING;
 801d17c:	7033      	strb	r3, [r6, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 801d17e:	f7e9 f9ff 	bl	8006580 <HAL_TIM_Base_Stop_IT>
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 801d182:	4868      	ldr	r0, [pc, #416]	; (801d324 <HAL_SPI_TxRxCpltCallback+0x810>)
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 801d184:	4a68      	ldr	r2, [pc, #416]	; (801d328 <HAL_SPI_TxRxCpltCallback+0x814>)
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 801d186:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 801d18a:	7893      	ldrb	r3, [r2, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 801d18c:	f8d1 13d0 	ldr.w	r1, [r1, #976]	; 0x3d0
 801d190:	f601 4112 	addw	r1, r1, #3090	; 0xc12
 801d194:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 801d198:	2900      	cmp	r1, #0
 801d19a:	d067      	beq.n	801d26c <HAL_SPI_TxRxCpltCallback+0x758>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 801d19c:	f023 0303 	bic.w	r3, r3, #3
 801d1a0:	7093      	strb	r3, [r2, #2]
 801d1a2:	e4e8      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					GetTrackTime();
 801d1a4:	f000 ff9e 	bl	801e0e4 <GetTrackTime>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 801d1a8:	4b5f      	ldr	r3, [pc, #380]	; (801d328 <HAL_SPI_TxRxCpltCallback+0x814>)
 801d1aa:	789a      	ldrb	r2, [r3, #2]
 801d1ac:	2a00      	cmp	r2, #0
 801d1ae:	d063      	beq.n	801d278 <HAL_SPI_TxRxCpltCallback+0x764>
					else spi_tx[2] &= ~(1 << 1);
 801d1b0:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
					trak.state = SETCUE;
 801d1b4:	2102      	movs	r1, #2
 801d1b6:	709a      	strb	r2, [r3, #2]
 801d1b8:	7031      	strb	r1, [r6, #0]
 801d1ba:	e4dc      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 801d1bc:	f042 0202 	orr.w	r2, r2, #2
 801d1c0:	709a      	strb	r2, [r3, #2]
 801d1c2:	e4d8      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				rekordbox.currentcue--;
 801d1c4:	4e57      	ldr	r6, [pc, #348]	; (801d324 <HAL_SPI_TxRxCpltCallback+0x810>)
 801d1c6:	f506 5540 	add.w	r5, r6, #12288	; 0x3000
 801d1ca:	f8d5 33d0 	ldr.w	r3, [r5, #976]	; 0x3d0
 801d1ce:	3b01      	subs	r3, #1
				if(rekordbox.currentcue < 0)
 801d1d0:	2b00      	cmp	r3, #0
				rekordbox.currentcue--;
 801d1d2:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
				if(rekordbox.currentcue < 0)
 801d1d6:	da06      	bge.n	801d1e6 <HAL_SPI_TxRxCpltCallback+0x6d2>
					rekordbox.currentcue = rekordbox.cues - 1;
 801d1d8:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 801d1dc:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
 801d1e0:	3b01      	subs	r3, #1
 801d1e2:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 801d1e6:	f603 4312 	addw	r3, r3, #3090	; 0xc12
 801d1ea:	e752      	b.n	801d092 <HAL_SPI_TxRxCpltCallback+0x57e>
					GetTrackTime();
 801d1ec:	f000 ff7a 	bl	801e0e4 <GetTrackTime>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 801d1f0:	4b4d      	ldr	r3, [pc, #308]	; (801d328 <HAL_SPI_TxRxCpltCallback+0x814>)
 801d1f2:	789a      	ldrb	r2, [r3, #2]
 801d1f4:	e75f      	b.n	801d0b6 <HAL_SPI_TxRxCpltCallback+0x5a2>
						else if(trak.state == SETCUE) {
 801d1f6:	2b02      	cmp	r3, #2
 801d1f8:	f47f acbd 	bne.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
							GoToPosition(file_pos_wide - 2);
 801d1fc:	4b47      	ldr	r3, [pc, #284]	; (801d31c <HAL_SPI_TxRxCpltCallback+0x808>)
 801d1fe:	6818      	ldr	r0, [r3, #0]
 801d200:	3802      	subs	r0, #2
 801d202:	f000 fec1 	bl	801df88 <GoToPosition>
							GetTrackTime();
 801d206:	f000 ff6d 	bl	801e0e4 <GetTrackTime>
 801d20a:	e4b4      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
						String_number--;
 801d20c:	4947      	ldr	r1, [pc, #284]	; (801d32c <HAL_SPI_TxRxCpltCallback+0x818>)
						Mark_number = String_number;
 801d20e:	4848      	ldr	r0, [pc, #288]	; (801d330 <HAL_SPI_TxRxCpltCallback+0x81c>)
						String_number--;
 801d210:	680b      	ldr	r3, [r1, #0]
 801d212:	3b01      	subs	r3, #1
						if(String_number < 0) {
 801d214:	2b00      	cmp	r3, #0
						String_number--;
 801d216:	600b      	str	r3, [r1, #0]
						Mark_number = String_number;
 801d218:	6003      	str	r3, [r0, #0]
						if(String_number < 0) {
 801d21a:	f6bf acac 	bge.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
							if(Total_tracks > 7) {
 801d21e:	4b45      	ldr	r3, [pc, #276]	; (801d334 <HAL_SPI_TxRxCpltCallback+0x820>)
 801d220:	881a      	ldrh	r2, [r3, #0]
 801d222:	2a07      	cmp	r2, #7
 801d224:	d960      	bls.n	801d2e8 <HAL_SPI_TxRxCpltCallback+0x7d4>
								String_number = 6;
 801d226:	2306      	movs	r3, #6
 801d228:	600b      	str	r3, [r1, #0]
								str_increment -= 7;
 801d22a:	4943      	ldr	r1, [pc, #268]	; (801d338 <HAL_SPI_TxRxCpltCallback+0x824>)
								Mark_number = 6;
 801d22c:	6003      	str	r3, [r0, #0]
								str_increment -= 7;
 801d22e:	6808      	ldr	r0, [r1, #0]
								if(str_increment == Total_tracks - 7)
 801d230:	4290      	cmp	r0, r2
								str_increment -= 7;
 801d232:	f1a0 0307 	sub.w	r3, r0, #7
								if(str_increment == Total_tracks - 7)
 801d236:	d104      	bne.n	801d242 <HAL_SPI_TxRxCpltCallback+0x72e>
									str_increment = (str_increment / 7) * 7;
 801d238:	2207      	movs	r2, #7
 801d23a:	fb93 f3f2 	sdiv	r3, r3, r2
 801d23e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
								if(str_increment <= 0)
 801d242:	2b00      	cmp	r3, #0
									str_increment = (str_increment / 7) * 7;
 801d244:	600b      	str	r3, [r1, #0]
								if(str_increment <= 0)
 801d246:	f73f ac96 	bgt.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
									str_increment = 0;
 801d24a:	2300      	movs	r3, #0
 801d24c:	600b      	str	r3, [r1, #0]
 801d24e:	e492      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
							if(String_number > 6) {
 801d250:	2b06      	cmp	r3, #6
 801d252:	f77f ac90 	ble.w	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
								String_number = 0;
 801d256:	600d      	str	r5, [r1, #0]
								if(str_increment >= Total_tracks - 7)
 801d258:	3a07      	subs	r2, #7
								str_increment += 7;
 801d25a:	4937      	ldr	r1, [pc, #220]	; (801d338 <HAL_SPI_TxRxCpltCallback+0x824>)
								Mark_number = 0;
 801d25c:	6005      	str	r5, [r0, #0]
								str_increment += 7;
 801d25e:	680b      	ldr	r3, [r1, #0]
 801d260:	3307      	adds	r3, #7
 801d262:	4293      	cmp	r3, r2
 801d264:	bfa8      	it	ge
 801d266:	4613      	movge	r3, r2
 801d268:	600b      	str	r3, [r1, #0]
 801d26a:	e484      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 801d26c:	f023 0301 	bic.w	r3, r3, #1
					spi_tx[2] |= (1 << 1); //turn off CUE led
 801d270:	f043 0302 	orr.w	r3, r3, #2
 801d274:	7093      	strb	r3, [r2, #2]
 801d276:	e47e      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 801d278:	2202      	movs	r2, #2
 801d27a:	e79b      	b.n	801d1b4 <HAL_SPI_TxRxCpltCallback+0x6a0>
				if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 801d27c:	2202      	movs	r2, #2
 801d27e:	e5f1      	b.n	801ce64 <HAL_SPI_TxRxCpltCallback+0x350>
				display.loopend = QuantizePosition(0);
 801d280:	2000      	movs	r0, #0
 801d282:	f7fb fc8f 	bl	8018ba4 <QuantizePosition>
 801d286:	60e8      	str	r0, [r5, #12]
 801d288:	e662      	b.n	801cf50 <HAL_SPI_TxRxCpltCallback+0x43c>
					if(display.pitchmode == 0) scale_pitch = 1; //wide
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	f43f ad54 	beq.w	801cd38 <HAL_SPI_TxRxCpltCallback+0x224>
					else if(display.pitchmode == 1) scale_pitch = 0.16; //16%
 801d290:	2b01      	cmp	r3, #1
 801d292:	d033      	beq.n	801d2fc <HAL_SPI_TxRxCpltCallback+0x7e8>
					else if(display.pitchmode == 2) scale_pitch = 0.1; //10%
 801d294:	2b02      	cmp	r3, #2
 801d296:	4b29      	ldr	r3, [pc, #164]	; (801d33c <HAL_SPI_TxRxCpltCallback+0x828>)
 801d298:	d036      	beq.n	801d308 <HAL_SPI_TxRxCpltCallback+0x7f4>
					else if(display.pitchmode == 3) scale_pitch = 0.06; //6%
 801d29a:	4a29      	ldr	r2, [pc, #164]	; (801d340 <HAL_SPI_TxRxCpltCallback+0x82c>)
 801d29c:	eddf 6a29 	vldr	s13, [pc, #164]	; 801d344 <HAL_SPI_TxRxCpltCallback+0x830>
 801d2a0:	601a      	str	r2, [r3, #0]
 801d2a2:	e54f      	b.n	801cd44 <HAL_SPI_TxRxCpltCallback+0x230>
						display.timemode = 0;
 801d2a4:	2200      	movs	r2, #0
 801d2a6:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 0;
 801d2a8:	711a      	strb	r2, [r3, #4]
 801d2aa:	e464      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				display.loopstart = QuantizePosition(0);
 801d2ac:	2000      	movs	r0, #0
 801d2ae:	f7fb fc79 	bl	8018ba4 <QuantizePosition>
 801d2b2:	60a8      	str	r0, [r5, #8]
 801d2b4:	e45f      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
				BSP_AUDIO_OUT_Resume();
 801d2b6:	f7fe fdab 	bl	801be10 <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 801d2ba:	2300      	movs	r3, #0
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 801d2bc:	4818      	ldr	r0, [pc, #96]	; (801d320 <HAL_SPI_TxRxCpltCallback+0x80c>)
				trak.state = PLAYING;
 801d2be:	7033      	strb	r3, [r6, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 801d2c0:	f7e9 f95e 	bl	8006580 <HAL_TIM_Base_Stop_IT>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 801d2c4:	4a18      	ldr	r2, [pc, #96]	; (801d328 <HAL_SPI_TxRxCpltCallback+0x814>)
 801d2c6:	7893      	ldrb	r3, [r2, #2]
 801d2c8:	f023 0301 	bic.w	r3, r3, #1
 801d2cc:	7093      	strb	r3, [r2, #2]
 801d2ce:	e452      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					GoToPosition(QuantizePosition(1));
 801d2d0:	f7fb fc68 	bl	8018ba4 <QuantizePosition>
 801d2d4:	f000 fe58 	bl	801df88 <GoToPosition>
 801d2d8:	e618      	b.n	801cf0c <HAL_SPI_TxRxCpltCallback+0x3f8>
					GoToPosition(QuantizePosition(-1));
 801d2da:	f04f 30ff 	mov.w	r0, #4294967295
 801d2de:	f7fb fc61 	bl	8018ba4 <QuantizePosition>
 801d2e2:	f000 fe51 	bl	801df88 <GoToPosition>
 801d2e6:	e611      	b.n	801cf0c <HAL_SPI_TxRxCpltCallback+0x3f8>
								String_number = Total_tracks - 1;
 801d2e8:	3a01      	subs	r2, #1
 801d2ea:	600a      	str	r2, [r1, #0]
								Mark_number = Total_tracks - 1;;
 801d2ec:	6002      	str	r2, [r0, #0]
 801d2ee:	e442      	b.n	801cb76 <HAL_SPI_TxRxCpltCallback+0x62>
					rekordbox.cue_start_position[0] = QuantizePosition(0);
 801d2f0:	4d15      	ldr	r5, [pc, #84]	; (801d348 <HAL_SPI_TxRxCpltCallback+0x834>)
 801d2f2:	2000      	movs	r0, #0
 801d2f4:	f7fb fc56 	bl	8018ba4 <QuantizePosition>
 801d2f8:	64a8      	str	r0, [r5, #72]	; 0x48
 801d2fa:	e687      	b.n	801d00c <HAL_SPI_TxRxCpltCallback+0x4f8>
					else if(display.pitchmode == 1) scale_pitch = 0.16; //16%
 801d2fc:	4b0f      	ldr	r3, [pc, #60]	; (801d33c <HAL_SPI_TxRxCpltCallback+0x828>)
 801d2fe:	4a13      	ldr	r2, [pc, #76]	; (801d34c <HAL_SPI_TxRxCpltCallback+0x838>)
 801d300:	eddf 6a13 	vldr	s13, [pc, #76]	; 801d350 <HAL_SPI_TxRxCpltCallback+0x83c>
 801d304:	601a      	str	r2, [r3, #0]
 801d306:	e51d      	b.n	801cd44 <HAL_SPI_TxRxCpltCallback+0x230>
					else if(display.pitchmode == 2) scale_pitch = 0.1; //10%
 801d308:	4a12      	ldr	r2, [pc, #72]	; (801d354 <HAL_SPI_TxRxCpltCallback+0x840>)
 801d30a:	eddf 6a13 	vldr	s13, [pc, #76]	; 801d358 <HAL_SPI_TxRxCpltCallback+0x844>
 801d30e:	601a      	str	r2, [r3, #0]
 801d310:	e518      	b.n	801cd44 <HAL_SPI_TxRxCpltCallback+0x230>
 801d312:	bf00      	nop
 801d314:	20000988 	.word	0x20000988
 801d318:	20017208 	.word	0x20017208
 801d31c:	2000e9a4 	.word	0x2000e9a4
 801d320:	2001899c 	.word	0x2001899c
 801d324:	20015208 	.word	0x20015208
 801d328:	20000058 	.word	0x20000058
 801d32c:	2000006c 	.word	0x2000006c
 801d330:	20000064 	.word	0x20000064
 801d334:	20001fd8 	.word	0x20001fd8
 801d338:	2001888c 	.word	0x2001888c
 801d33c:	20000074 	.word	0x20000074
 801d340:	3d75c28f 	.word	0x3d75c28f
 801d344:	3675c28f 	.word	0x3675c28f
 801d348:	20018208 	.word	0x20018208
 801d34c:	3e23d70a 	.word	0x3e23d70a
 801d350:	3723d70a 	.word	0x3723d70a
 801d354:	3dcccccd 	.word	0x3dcccccd
 801d358:	36cccccd 	.word	0x36cccccd

0801d35c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801d35c:	490d      	ldr	r1, [pc, #52]	; (801d394 <_sbrk+0x38>)
 801d35e:	680a      	ldr	r2, [r1, #0]
{
 801d360:	b508      	push	{r3, lr}
 801d362:	4603      	mov	r3, r0
	if (heap_end == 0)
 801d364:	b132      	cbz	r2, 801d374 <_sbrk+0x18>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 801d366:	4413      	add	r3, r2
 801d368:	4668      	mov	r0, sp
 801d36a:	4283      	cmp	r3, r0
 801d36c:	d809      	bhi.n	801d382 <_sbrk+0x26>
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 801d36e:	4610      	mov	r0, r2
	heap_end += incr;
 801d370:	600b      	str	r3, [r1, #0]
}
 801d372:	bd08      	pop	{r3, pc}
		heap_end = &end;
 801d374:	4808      	ldr	r0, [pc, #32]	; (801d398 <_sbrk+0x3c>)
 801d376:	4602      	mov	r2, r0
 801d378:	6008      	str	r0, [r1, #0]
	if (heap_end + incr > stack_ptr)
 801d37a:	4668      	mov	r0, sp
 801d37c:	4413      	add	r3, r2
 801d37e:	4283      	cmp	r3, r0
 801d380:	d9f5      	bls.n	801d36e <_sbrk+0x12>
		errno = ENOMEM;
 801d382:	f001 fe85 	bl	801f090 <__errno>
 801d386:	230c      	movs	r3, #12
		return (caddr_t) -1;
 801d388:	f04f 32ff 	mov.w	r2, #4294967295
		errno = ENOMEM;
 801d38c:	6003      	str	r3, [r0, #0]
}
 801d38e:	4610      	mov	r0, r2
 801d390:	bd08      	pop	{r3, pc}
 801d392:	bf00      	nop
 801d394:	20018898 	.word	0x20018898
 801d398:	20019598 	.word	0x20019598

0801d39c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801d39c:	4a0f      	ldr	r2, [pc, #60]	; (801d3dc <SystemInit+0x40>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801d39e:	4b10      	ldr	r3, [pc, #64]	; (801d3e0 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801d3a0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801d3a4:	490f      	ldr	r1, [pc, #60]	; (801d3e4 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801d3a6:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 801d3aa:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801d3ac:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 801d3b0:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 801d3b2:	6818      	ldr	r0, [r3, #0]
 801d3b4:	f040 0001 	orr.w	r0, r0, #1
 801d3b8:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 801d3ba:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801d3bc:	6818      	ldr	r0, [r3, #0]
 801d3be:	4001      	ands	r1, r0

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801d3c0:	4809      	ldr	r0, [pc, #36]	; (801d3e8 <SystemInit+0x4c>)
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801d3c2:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 801d3c4:	6058      	str	r0, [r3, #4]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801d3c6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801d3ca:	6819      	ldr	r1, [r3, #0]
 801d3cc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 801d3d0:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 801d3d2:	60dc      	str	r4, [r3, #12]
#endif
}
 801d3d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801d3d8:	6090      	str	r0, [r2, #8]
}
 801d3da:	4770      	bx	lr
 801d3dc:	e000ed00 	.word	0xe000ed00
 801d3e0:	40023800 	.word	0x40023800
 801d3e4:	fef6ffff 	.word	0xfef6ffff
 801d3e8:	24003010 	.word	0x24003010

0801d3ec <MX_TIM4_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 801d3ec:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d3ee:	2300      	movs	r3, #0
{
 801d3f0:	b088      	sub	sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 801d3f2:	4819      	ldr	r0, [pc, #100]	; (801d458 <MX_TIM4_Init+0x6c>)
  htim4.Init.Prescaler = 9999;
 801d3f4:	f242 710f 	movw	r1, #9999	; 0x270f
  htim4.Instance = TIM4;
 801d3f8:	4c18      	ldr	r4, [pc, #96]	; (801d45c <MX_TIM4_Init+0x70>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 399;
 801d3fa:	f240 128f 	movw	r2, #399	; 0x18f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d3fe:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d400:	9301      	str	r3, [sp, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d402:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d404:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d406:	9307      	str	r3, [sp, #28]
  htim4.Init.Prescaler = 9999;
 801d408:	e9c0 4100 	strd	r4, r1, [r0]
  htim4.Init.Period = 399;
 801d40c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d410:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d414:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801d418:	f7e8 fefe 	bl	8006218 <HAL_TIM_Base_Init>
 801d41c:	b988      	cbnz	r0, 801d442 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d41e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 801d422:	a904      	add	r1, sp, #16
 801d424:	480c      	ldr	r0, [pc, #48]	; (801d458 <MX_TIM4_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d426:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 801d428:	f7e9 f92a 	bl	8006680 <HAL_TIM_ConfigClockSource>
 801d42c:	b980      	cbnz	r0, 801d450 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d42e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801d430:	a901      	add	r1, sp, #4
 801d432:	4809      	ldr	r0, [pc, #36]	; (801d458 <MX_TIM4_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d434:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d436:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801d438:	f7e9 fcb6 	bl	8006da8 <HAL_TIMEx_MasterConfigSynchronization>
 801d43c:	b920      	cbnz	r0, 801d448 <MX_TIM4_Init+0x5c>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 801d43e:	b008      	add	sp, #32
 801d440:	bd10      	pop	{r4, pc}
    Error_Handler();
 801d442:	f7fc fd49 	bl	8019ed8 <Error_Handler>
 801d446:	e7ea      	b.n	801d41e <MX_TIM4_Init+0x32>
    Error_Handler();
 801d448:	f7fc fd46 	bl	8019ed8 <Error_Handler>
}
 801d44c:	b008      	add	sp, #32
 801d44e:	bd10      	pop	{r4, pc}
    Error_Handler();
 801d450:	f7fc fd42 	bl	8019ed8 <Error_Handler>
 801d454:	e7eb      	b.n	801d42e <MX_TIM4_Init+0x42>
 801d456:	bf00      	nop
 801d458:	2001889c 	.word	0x2001889c
 801d45c:	40000800 	.word	0x40000800

0801d460 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 801d460:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d462:	2300      	movs	r3, #0
{
 801d464:	b088      	sub	sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 801d466:	4819      	ldr	r0, [pc, #100]	; (801d4cc <MX_TIM5_Init+0x6c>)
  htim5.Init.Prescaler = 19199;
 801d468:	f644 21ff 	movw	r1, #19199	; 0x4aff
  htim5.Instance = TIM5;
 801d46c:	4c18      	ldr	r4, [pc, #96]	; (801d4d0 <MX_TIM5_Init+0x70>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 1999;
 801d46e:	f240 72cf 	movw	r2, #1999	; 0x7cf
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d472:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d474:	9301      	str	r3, [sp, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d476:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d478:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d47a:	9307      	str	r3, [sp, #28]
  htim5.Init.Prescaler = 19199;
 801d47c:	e9c0 4100 	strd	r4, r1, [r0]
  htim5.Init.Period = 1999;
 801d480:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d484:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d488:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801d48c:	f7e8 fec4 	bl	8006218 <HAL_TIM_Base_Init>
 801d490:	b988      	cbnz	r0, 801d4b6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 801d496:	a904      	add	r1, sp, #16
 801d498:	480c      	ldr	r0, [pc, #48]	; (801d4cc <MX_TIM5_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d49a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 801d49c:	f7e9 f8f0 	bl	8006680 <HAL_TIM_ConfigClockSource>
 801d4a0:	b980      	cbnz	r0, 801d4c4 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d4a2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801d4a4:	a901      	add	r1, sp, #4
 801d4a6:	4809      	ldr	r0, [pc, #36]	; (801d4cc <MX_TIM5_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d4a8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d4aa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801d4ac:	f7e9 fc7c 	bl	8006da8 <HAL_TIMEx_MasterConfigSynchronization>
 801d4b0:	b920      	cbnz	r0, 801d4bc <MX_TIM5_Init+0x5c>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 801d4b2:	b008      	add	sp, #32
 801d4b4:	bd10      	pop	{r4, pc}
    Error_Handler();
 801d4b6:	f7fc fd0f 	bl	8019ed8 <Error_Handler>
 801d4ba:	e7ea      	b.n	801d492 <MX_TIM5_Init+0x32>
    Error_Handler();
 801d4bc:	f7fc fd0c 	bl	8019ed8 <Error_Handler>
}
 801d4c0:	b008      	add	sp, #32
 801d4c2:	bd10      	pop	{r4, pc}
    Error_Handler();
 801d4c4:	f7fc fd08 	bl	8019ed8 <Error_Handler>
 801d4c8:	e7eb      	b.n	801d4a2 <MX_TIM5_Init+0x42>
 801d4ca:	bf00      	nop
 801d4cc:	200188dc 	.word	0x200188dc
 801d4d0:	40000c00 	.word	0x40000c00

0801d4d4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 801d4d4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d4d6:	2300      	movs	r3, #0
{
 801d4d8:	b084      	sub	sp, #16

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801d4da:	4811      	ldr	r0, [pc, #68]	; (801d520 <MX_TIM6_Init+0x4c>)
  htim6.Init.Prescaler = 9999;
 801d4dc:	f242 710f 	movw	r1, #9999	; 0x270f
  htim6.Instance = TIM6;
 801d4e0:	4c10      	ldr	r4, [pc, #64]	; (801d524 <MX_TIM6_Init+0x50>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 999;
 801d4e2:	f240 32e7 	movw	r2, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d4e6:	9301      	str	r3, [sp, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d4e8:	6183      	str	r3, [r0, #24]
  htim6.Init.Prescaler = 9999;
 801d4ea:	e9c0 4100 	strd	r4, r1, [r0]
  htim6.Init.Period = 999;
 801d4ee:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d4f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801d4f6:	f7e8 fe8f 	bl	8006218 <HAL_TIM_Base_Init>
 801d4fa:	b948      	cbnz	r0, 801d510 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d4fc:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801d4fe:	a901      	add	r1, sp, #4
 801d500:	4807      	ldr	r0, [pc, #28]	; (801d520 <MX_TIM6_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d502:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d504:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801d506:	f7e9 fc4f 	bl	8006da8 <HAL_TIMEx_MasterConfigSynchronization>
 801d50a:	b920      	cbnz	r0, 801d516 <MX_TIM6_Init+0x42>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 801d50c:	b004      	add	sp, #16
 801d50e:	bd10      	pop	{r4, pc}
    Error_Handler();
 801d510:	f7fc fce2 	bl	8019ed8 <Error_Handler>
 801d514:	e7f2      	b.n	801d4fc <MX_TIM6_Init+0x28>
    Error_Handler();
 801d516:	f7fc fcdf 	bl	8019ed8 <Error_Handler>
}
 801d51a:	b004      	add	sp, #16
 801d51c:	bd10      	pop	{r4, pc}
 801d51e:	bf00      	nop
 801d520:	2001891c 	.word	0x2001891c
 801d524:	40001000 	.word	0x40001000

0801d528 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 801d528:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d52a:	2300      	movs	r3, #0
{
 801d52c:	b084      	sub	sp, #16

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 801d52e:	4811      	ldr	r0, [pc, #68]	; (801d574 <MX_TIM7_Init+0x4c>)
  htim7.Init.Prescaler = 9999;
 801d530:	f242 710f 	movw	r1, #9999	; 0x270f
  htim7.Instance = TIM7;
 801d534:	4c10      	ldr	r4, [pc, #64]	; (801d578 <MX_TIM7_Init+0x50>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 4999;
 801d536:	f241 3287 	movw	r2, #4999	; 0x1387
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d53a:	9301      	str	r3, [sp, #4]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d53c:	6183      	str	r3, [r0, #24]
  htim7.Init.Prescaler = 9999;
 801d53e:	e9c0 4100 	strd	r4, r1, [r0]
  htim7.Init.Period = 4999;
 801d542:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d546:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801d54a:	f7e8 fe65 	bl	8006218 <HAL_TIM_Base_Init>
 801d54e:	b948      	cbnz	r0, 801d564 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d550:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801d552:	a901      	add	r1, sp, #4
 801d554:	4807      	ldr	r0, [pc, #28]	; (801d574 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d556:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d558:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801d55a:	f7e9 fc25 	bl	8006da8 <HAL_TIMEx_MasterConfigSynchronization>
 801d55e:	b920      	cbnz	r0, 801d56a <MX_TIM7_Init+0x42>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 801d560:	b004      	add	sp, #16
 801d562:	bd10      	pop	{r4, pc}
    Error_Handler();
 801d564:	f7fc fcb8 	bl	8019ed8 <Error_Handler>
 801d568:	e7f2      	b.n	801d550 <MX_TIM7_Init+0x28>
    Error_Handler();
 801d56a:	f7fc fcb5 	bl	8019ed8 <Error_Handler>
}
 801d56e:	b004      	add	sp, #16
 801d570:	bd10      	pop	{r4, pc}
 801d572:	bf00      	nop
 801d574:	2001895c 	.word	0x2001895c
 801d578:	40001400 	.word	0x40001400
 801d57c:	00000000 	.word	0x00000000

0801d580 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 801d580:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d582:	2300      	movs	r3, #0
{
 801d584:	b088      	sub	sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 801d586:	481e      	ldr	r0, [pc, #120]	; (801d600 <MX_TIM8_Init+0x80>)
  htim8.Init.Prescaler = 9599;
 801d588:	f242 517f 	movw	r1, #9599	; 0x257f
  htim8.Instance = TIM8;
 801d58c:	4c1d      	ldr	r4, [pc, #116]	; (801d604 <MX_TIM8_Init+0x84>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 9999;
 801d58e:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d592:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d594:	9300      	str	r3, [sp, #0]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d596:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d598:	9307      	str	r3, [sp, #28]
  htim8.Init.Prescaler = 9599;
 801d59a:	e9c0 4100 	strd	r4, r1, [r0]
  htim8.Init.Period = 9999;
 801d59e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 801d5a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d5a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d5aa:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801d5ae:	f7e8 fe33 	bl	8006218 <HAL_TIM_Base_Init>
 801d5b2:	b9a0      	cbnz	r0, 801d5de <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d5b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801d5b8:	a904      	add	r1, sp, #16
 801d5ba:	4811      	ldr	r0, [pc, #68]	; (801d600 <MX_TIM8_Init+0x80>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d5bc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801d5be:	f7e9 f85f 	bl	8006680 <HAL_TIM_ConfigClockSource>
 801d5c2:	b998      	cbnz	r0, 801d5ec <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d5c4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801d5c6:	4669      	mov	r1, sp
 801d5c8:	480d      	ldr	r0, [pc, #52]	; (801d600 <MX_TIM8_Init+0x80>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d5ca:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d5cc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801d5f8 <MX_TIM8_Init+0x78>
 801d5d0:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801d5d4:	f7e9 fbe8 	bl	8006da8 <HAL_TIMEx_MasterConfigSynchronization>
 801d5d8:	b920      	cbnz	r0, 801d5e4 <MX_TIM8_Init+0x64>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 801d5da:	b008      	add	sp, #32
 801d5dc:	bd10      	pop	{r4, pc}
    Error_Handler();
 801d5de:	f7fc fc7b 	bl	8019ed8 <Error_Handler>
 801d5e2:	e7e7      	b.n	801d5b4 <MX_TIM8_Init+0x34>
    Error_Handler();
 801d5e4:	f7fc fc78 	bl	8019ed8 <Error_Handler>
}
 801d5e8:	b008      	add	sp, #32
 801d5ea:	bd10      	pop	{r4, pc}
    Error_Handler();
 801d5ec:	f7fc fc74 	bl	8019ed8 <Error_Handler>
 801d5f0:	e7e8      	b.n	801d5c4 <MX_TIM8_Init+0x44>
 801d5f2:	bf00      	nop
 801d5f4:	f3af 8000 	nop.w
	...
 801d600:	2001899c 	.word	0x2001899c
 801d604:	40010400 	.word	0x40010400

0801d608 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 801d608:	b510      	push	{r4, lr}

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d60a:	2300      	movs	r3, #0
{
 801d60c:	b084      	sub	sp, #16

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 801d60e:	4812      	ldr	r0, [pc, #72]	; (801d658 <MX_TIM9_Init+0x50>)
  htim9.Init.Prescaler = 9599;
 801d610:	f242 517f 	movw	r1, #9599	; 0x257f
  htim9.Instance = TIM9;
 801d614:	4c11      	ldr	r4, [pc, #68]	; (801d65c <MX_TIM9_Init+0x54>)
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim9.Init.Period = 19999;
 801d616:	f644 621f 	movw	r2, #19999	; 0x4e1f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d61a:	9300      	str	r3, [sp, #0]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d61c:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801d61e:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d620:	9303      	str	r3, [sp, #12]
  htim9.Init.Prescaler = 9599;
 801d622:	e9c0 4100 	strd	r4, r1, [r0]
  htim9.Init.Period = 19999;
 801d626:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d62a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 801d62e:	f7e8 fdf3 	bl	8006218 <HAL_TIM_Base_Init>
 801d632:	b948      	cbnz	r0, 801d648 <MX_TIM9_Init+0x40>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 801d638:	4669      	mov	r1, sp
 801d63a:	4807      	ldr	r0, [pc, #28]	; (801d658 <MX_TIM9_Init+0x50>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d63c:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 801d63e:	f7e9 f81f 	bl	8006680 <HAL_TIM_ConfigClockSource>
 801d642:	b920      	cbnz	r0, 801d64e <MX_TIM9_Init+0x46>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 801d644:	b004      	add	sp, #16
 801d646:	bd10      	pop	{r4, pc}
    Error_Handler();
 801d648:	f7fc fc46 	bl	8019ed8 <Error_Handler>
 801d64c:	e7f2      	b.n	801d634 <MX_TIM9_Init+0x2c>
    Error_Handler();
 801d64e:	f7fc fc43 	bl	8019ed8 <Error_Handler>
}
 801d652:	b004      	add	sp, #16
 801d654:	bd10      	pop	{r4, pc}
 801d656:	bf00      	nop
 801d658:	200189dc 	.word	0x200189dc
 801d65c:	40014000 	.word	0x40014000

0801d660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 801d660:	4a58      	ldr	r2, [pc, #352]	; (801d7c4 <HAL_TIM_Base_MspInit+0x164>)
 801d662:	6803      	ldr	r3, [r0, #0]
 801d664:	4293      	cmp	r3, r2
{
 801d666:	b510      	push	{r4, lr}
 801d668:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM4)
 801d66a:	d026      	beq.n	801d6ba <HAL_TIM_Base_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 801d66c:	4a56      	ldr	r2, [pc, #344]	; (801d7c8 <HAL_TIM_Base_MspInit+0x168>)
 801d66e:	4293      	cmp	r3, r2
 801d670:	d05c      	beq.n	801d72c <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 801d672:	4a56      	ldr	r2, [pc, #344]	; (801d7cc <HAL_TIM_Base_MspInit+0x16c>)
 801d674:	4293      	cmp	r3, r2
 801d676:	d06e      	beq.n	801d756 <HAL_TIM_Base_MspInit+0xf6>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 801d678:	4a55      	ldr	r2, [pc, #340]	; (801d7d0 <HAL_TIM_Base_MspInit+0x170>)
 801d67a:	4293      	cmp	r3, r2
 801d67c:	d008      	beq.n	801d690 <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 801d67e:	4a55      	ldr	r2, [pc, #340]	; (801d7d4 <HAL_TIM_Base_MspInit+0x174>)
 801d680:	4293      	cmp	r3, r2
 801d682:	d07d      	beq.n	801d780 <HAL_TIM_Base_MspInit+0x120>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 801d684:	4a54      	ldr	r2, [pc, #336]	; (801d7d8 <HAL_TIM_Base_MspInit+0x178>)
 801d686:	4293      	cmp	r3, r2
 801d688:	f000 808b 	beq.w	801d7a2 <HAL_TIM_Base_MspInit+0x142>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 801d68c:	b006      	add	sp, #24
 801d68e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 801d690:	4b52      	ldr	r3, [pc, #328]	; (801d7dc <HAL_TIM_Base_MspInit+0x17c>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 801d692:	2037      	movs	r0, #55	; 0x37
 801d694:	2200      	movs	r2, #0
 801d696:	2104      	movs	r1, #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 801d698:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801d69a:	f044 0420 	orr.w	r4, r4, #32
 801d69e:	641c      	str	r4, [r3, #64]	; 0x40
 801d6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6a2:	f003 0320 	and.w	r3, r3, #32
 801d6a6:	9303      	str	r3, [sp, #12]
 801d6a8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 801d6aa:	f7e3 fd17 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801d6ae:	2037      	movs	r0, #55	; 0x37
}
 801d6b0:	b006      	add	sp, #24
 801d6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 801d6b6:	f7e3 bd5b 	b.w	8001170 <HAL_NVIC_EnableIRQ>
	  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_IT_UPDATE);
 801d6ba:	4849      	ldr	r0, [pc, #292]	; (801d7e0 <HAL_TIM_Base_MspInit+0x180>)
	  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_IT_UPDATE);
 801d6bc:	4949      	ldr	r1, [pc, #292]	; (801d7e4 <HAL_TIM_Base_MspInit+0x184>)
	  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 801d6be:	4a4a      	ldr	r2, [pc, #296]	; (801d7e8 <HAL_TIM_Base_MspInit+0x188>)
	  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_IT_UPDATE);
 801d6c0:	4b4a      	ldr	r3, [pc, #296]	; (801d7ec <HAL_TIM_Base_MspInit+0x18c>)
	  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_IT_UPDATE);
 801d6c2:	6804      	ldr	r4, [r0, #0]
	  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_IT_UPDATE);
 801d6c4:	6808      	ldr	r0, [r1, #0]
	  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 801d6c6:	6811      	ldr	r1, [r2, #0]
	  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_IT_UPDATE);
 801d6c8:	681a      	ldr	r2, [r3, #0]
	  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_IT_UPDATE);
 801d6ca:	f06f 0301 	mvn.w	r3, #1
 801d6ce:	6123      	str	r3, [r4, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_IT_UPDATE);
 801d6d0:	6103      	str	r3, [r0, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 801d6d2:	610b      	str	r3, [r1, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_IT_UPDATE);
 801d6d4:	6113      	str	r3, [r2, #16]
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 801d6d6:	68e3      	ldr	r3, [r4, #12]
 801d6d8:	f043 0301 	orr.w	r3, r3, #1
 801d6dc:	60e3      	str	r3, [r4, #12]
	  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 801d6de:	68c3      	ldr	r3, [r0, #12]
	  __HAL_TIM_ENABLE_IT(&htim9, TIM_IT_UPDATE);
 801d6e0:	4c43      	ldr	r4, [pc, #268]	; (801d7f0 <HAL_TIM_Base_MspInit+0x190>)
	  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 801d6e2:	f043 0301 	orr.w	r3, r3, #1
	  __HAL_TIM_ENABLE_IT(&htim9, TIM_IT_UPDATE);
 801d6e6:	6824      	ldr	r4, [r4, #0]
	  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 801d6e8:	60c3      	str	r3, [r0, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 801d6ea:	201e      	movs	r0, #30
	  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 801d6ec:	68cb      	ldr	r3, [r1, #12]
 801d6ee:	f043 0301 	orr.w	r3, r3, #1
 801d6f2:	60cb      	str	r3, [r1, #12]
	  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 801d6f4:	68d1      	ldr	r1, [r2, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
 801d6f6:	4b39      	ldr	r3, [pc, #228]	; (801d7dc <HAL_TIM_Base_MspInit+0x17c>)
	  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 801d6f8:	f041 0101 	orr.w	r1, r1, #1
 801d6fc:	60d1      	str	r1, [r2, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 801d6fe:	2101      	movs	r1, #1
	  __HAL_TIM_ENABLE_IT(&htim9, TIM_IT_UPDATE);
 801d700:	68e2      	ldr	r2, [r4, #12]
 801d702:	f042 0201 	orr.w	r2, r2, #1
 801d706:	60e2      	str	r2, [r4, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 801d708:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 801d70a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801d70c:	f044 0404 	orr.w	r4, r4, #4
 801d710:	641c      	str	r4, [r3, #64]	; 0x40
 801d712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d714:	f003 0304 	and.w	r3, r3, #4
 801d718:	9300      	str	r3, [sp, #0]
 801d71a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 801d71c:	f7e3 fcde 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801d720:	201e      	movs	r0, #30
}
 801d722:	b006      	add	sp, #24
 801d724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 801d728:	f7e3 bd22 	b.w	8001170 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801d72c:	4b2b      	ldr	r3, [pc, #172]	; (801d7dc <HAL_TIM_Base_MspInit+0x17c>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 801d72e:	2032      	movs	r0, #50	; 0x32
 801d730:	2200      	movs	r2, #0
 801d732:	2103      	movs	r1, #3
    __HAL_RCC_TIM5_CLK_ENABLE();
 801d734:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801d736:	f044 0408 	orr.w	r4, r4, #8
 801d73a:	641c      	str	r4, [r3, #64]	; 0x40
 801d73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d73e:	f003 0308 	and.w	r3, r3, #8
 801d742:	9301      	str	r3, [sp, #4]
 801d744:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 801d746:	f7e3 fcc9 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801d74a:	2032      	movs	r0, #50	; 0x32
}
 801d74c:	b006      	add	sp, #24
 801d74e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 801d752:	f7e3 bd0d 	b.w	8001170 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 801d756:	4b21      	ldr	r3, [pc, #132]	; (801d7dc <HAL_TIM_Base_MspInit+0x17c>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 801d758:	2036      	movs	r0, #54	; 0x36
 801d75a:	2200      	movs	r2, #0
 801d75c:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 801d75e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801d760:	f044 0410 	orr.w	r4, r4, #16
 801d764:	641c      	str	r4, [r3, #64]	; 0x40
 801d766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d768:	f003 0310 	and.w	r3, r3, #16
 801d76c:	9302      	str	r3, [sp, #8]
 801d76e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 801d770:	f7e3 fcb4 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801d774:	2036      	movs	r0, #54	; 0x36
}
 801d776:	b006      	add	sp, #24
 801d778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 801d77c:	f7e3 bcf8 	b.w	8001170 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801d780:	4b16      	ldr	r3, [pc, #88]	; (801d7dc <HAL_TIM_Base_MspInit+0x17c>)
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 801d782:	202c      	movs	r0, #44	; 0x2c
 801d784:	2200      	movs	r2, #0
 801d786:	2101      	movs	r1, #1
    __HAL_RCC_TIM8_CLK_ENABLE();
 801d788:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 801d78a:	f044 0402 	orr.w	r4, r4, #2
 801d78e:	645c      	str	r4, [r3, #68]	; 0x44
 801d790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d792:	f003 0302 	and.w	r3, r3, #2
 801d796:	9304      	str	r3, [sp, #16]
 801d798:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 801d79a:	f7e3 fc9f 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801d79e:	202c      	movs	r0, #44	; 0x2c
 801d7a0:	e786      	b.n	801d6b0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM9_CLK_ENABLE();
 801d7a2:	4b0e      	ldr	r3, [pc, #56]	; (801d7dc <HAL_TIM_Base_MspInit+0x17c>)
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 801d7a4:	2018      	movs	r0, #24
 801d7a6:	2200      	movs	r2, #0
 801d7a8:	2102      	movs	r1, #2
    __HAL_RCC_TIM9_CLK_ENABLE();
 801d7aa:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 801d7ac:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 801d7b0:	645c      	str	r4, [r3, #68]	; 0x44
 801d7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d7b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d7b8:	9305      	str	r3, [sp, #20]
 801d7ba:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 801d7bc:	f7e3 fc8e 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 801d7c0:	2018      	movs	r0, #24
 801d7c2:	e775      	b.n	801d6b0 <HAL_TIM_Base_MspInit+0x50>
 801d7c4:	40000800 	.word	0x40000800
 801d7c8:	40000c00 	.word	0x40000c00
 801d7cc:	40001000 	.word	0x40001000
 801d7d0:	40001400 	.word	0x40001400
 801d7d4:	40010400 	.word	0x40010400
 801d7d8:	40014000 	.word	0x40014000
 801d7dc:	40023800 	.word	0x40023800
 801d7e0:	2001889c 	.word	0x2001889c
 801d7e4:	200188dc 	.word	0x200188dc
 801d7e8:	2001891c 	.word	0x2001891c
 801d7ec:	2001895c 	.word	0x2001895c
 801d7f0:	200189dc 	.word	0x200189dc

0801d7f4 <USBH_UserProcess1>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess1  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801d7f4:	b510      	push	{r4, lr}
 801d7f6:	460c      	mov	r4, r1
  /* USER CODE BEGIN CALL_BACK_2 */
	 dbgAddText("userProc");
 801d7f8:	480a      	ldr	r0, [pc, #40]	; (801d824 <USBH_UserProcess1+0x30>)
 801d7fa:	f7f5 ff33 	bl	8013664 <dbgAddText>
  switch(id)
 801d7fe:	2c04      	cmp	r4, #4
 801d800:	d00b      	beq.n	801d81a <USBH_UserProcess1+0x26>
 801d802:	2c05      	cmp	r4, #5
 801d804:	d005      	beq.n	801d812 <USBH_UserProcess1+0x1e>
 801d806:	2c02      	cmp	r4, #2
 801d808:	d000      	beq.n	801d80c <USBH_UserProcess1+0x18>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_2 */
}
 801d80a:	bd10      	pop	{r4, pc}
  Appli_HS_state = APPLICATION_READY;
 801d80c:	4b06      	ldr	r3, [pc, #24]	; (801d828 <USBH_UserProcess1+0x34>)
 801d80e:	701c      	strb	r4, [r3, #0]
}
 801d810:	bd10      	pop	{r4, pc}
  Appli_HS_state = APPLICATION_DISCONNECT;
 801d812:	4b05      	ldr	r3, [pc, #20]	; (801d828 <USBH_UserProcess1+0x34>)
 801d814:	2203      	movs	r2, #3
 801d816:	701a      	strb	r2, [r3, #0]
}
 801d818:	bd10      	pop	{r4, pc}
  Appli_HS_state = APPLICATION_START;
 801d81a:	4b03      	ldr	r3, [pc, #12]	; (801d828 <USBH_UserProcess1+0x34>)
 801d81c:	2201      	movs	r2, #1
 801d81e:	701a      	strb	r2, [r3, #0]
}
 801d820:	bd10      	pop	{r4, pc}
 801d822:	bf00      	nop
 801d824:	08024f24 	.word	0x08024f24
 801d828:	20018a1c 	.word	0x20018a1c

0801d82c <MX_USB_HOST_Init>:
{
 801d82c:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess1, HOST_HS) != USBH_OK)
 801d82e:	2200      	movs	r2, #0
 801d830:	4918      	ldr	r1, [pc, #96]	; (801d894 <MX_USB_HOST_Init+0x68>)
 801d832:	4819      	ldr	r0, [pc, #100]	; (801d898 <MX_USB_HOST_Init+0x6c>)
 801d834:	f7ea ff64 	bl	8008700 <USBH_Init>
 801d838:	b968      	cbnz	r0, 801d856 <MX_USB_HOST_Init+0x2a>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 801d83a:	4918      	ldr	r1, [pc, #96]	; (801d89c <MX_USB_HOST_Init+0x70>)
 801d83c:	4816      	ldr	r0, [pc, #88]	; (801d898 <MX_USB_HOST_Init+0x6c>)
 801d83e:	f7ea ff8d 	bl	800875c <USBH_RegisterClass>
 801d842:	b998      	cbnz	r0, 801d86c <MX_USB_HOST_Init+0x40>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 801d844:	4814      	ldr	r0, [pc, #80]	; (801d898 <MX_USB_HOST_Init+0x6c>)
 801d846:	f7ea ffd5 	bl	80087f4 <USBH_Start>
 801d84a:	b9c8      	cbnz	r0, 801d880 <MX_USB_HOST_Init+0x54>
  dbgAddText("uInitOK");
 801d84c:	4814      	ldr	r0, [pc, #80]	; (801d8a0 <MX_USB_HOST_Init+0x74>)
}
 801d84e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dbgAddText("uInitOK");
 801d852:	f7f5 bf07 	b.w	8013664 <dbgAddText>
	  dbgAddText("EUSBH_Init");
 801d856:	4813      	ldr	r0, [pc, #76]	; (801d8a4 <MX_USB_HOST_Init+0x78>)
 801d858:	f7f5 ff04 	bl	8013664 <dbgAddText>
    Error_Handler();
 801d85c:	f7fc fb3c 	bl	8019ed8 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 801d860:	490e      	ldr	r1, [pc, #56]	; (801d89c <MX_USB_HOST_Init+0x70>)
 801d862:	480d      	ldr	r0, [pc, #52]	; (801d898 <MX_USB_HOST_Init+0x6c>)
 801d864:	f7ea ff7a 	bl	800875c <USBH_RegisterClass>
 801d868:	2800      	cmp	r0, #0
 801d86a:	d0eb      	beq.n	801d844 <MX_USB_HOST_Init+0x18>
	  dbgAddText("EUSBH_RegisterClass");
 801d86c:	480e      	ldr	r0, [pc, #56]	; (801d8a8 <MX_USB_HOST_Init+0x7c>)
 801d86e:	f7f5 fef9 	bl	8013664 <dbgAddText>
    Error_Handler();
 801d872:	f7fc fb31 	bl	8019ed8 <Error_Handler>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 801d876:	4808      	ldr	r0, [pc, #32]	; (801d898 <MX_USB_HOST_Init+0x6c>)
 801d878:	f7ea ffbc 	bl	80087f4 <USBH_Start>
 801d87c:	2800      	cmp	r0, #0
 801d87e:	d0e5      	beq.n	801d84c <MX_USB_HOST_Init+0x20>
	  dbgAddText("EUSBH_Start");
 801d880:	480a      	ldr	r0, [pc, #40]	; (801d8ac <MX_USB_HOST_Init+0x80>)
 801d882:	f7f5 feef 	bl	8013664 <dbgAddText>
    Error_Handler();
 801d886:	f7fc fb27 	bl	8019ed8 <Error_Handler>
  dbgAddText("uInitOK");
 801d88a:	4805      	ldr	r0, [pc, #20]	; (801d8a0 <MX_USB_HOST_Init+0x74>)
}
 801d88c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dbgAddText("uInitOK");
 801d890:	f7f5 bee8 	b.w	8013664 <dbgAddText>
 801d894:	0801d7f5 	.word	0x0801d7f5
 801d898:	20018cec 	.word	0x20018cec
 801d89c:	20000008 	.word	0x20000008
 801d8a0:	08024f5c 	.word	0x08024f5c
 801d8a4:	08024f30 	.word	0x08024f30
 801d8a8:	08024f3c 	.word	0x08024f3c
 801d8ac:	08024f50 	.word	0x08024f50

0801d8b0 <MX_USB_HOST_Process>:
{
 801d8b0:	b538      	push	{r3, r4, r5, lr}
  locUSBHfs=USBHfs;
 801d8b2:	4b15      	ldr	r3, [pc, #84]	; (801d908 <MX_USB_HOST_Process+0x58>)
	  ((hUsbHostHS.gState != HOST_CLASS) && (hUsbHostHS.gState != HOST_DEV_DISCONNECTED)
 801d8b4:	4c15      	ldr	r4, [pc, #84]	; (801d90c <MX_USB_HOST_Process+0x5c>)
  locUSBHfs=USBHfs;
 801d8b6:	6018      	str	r0, [r3, #0]
	  ((hUsbHostHS.gState != HOST_CLASS) && (hUsbHostHS.gState != HOST_DEV_DISCONNECTED)
 801d8b8:	7823      	ldrb	r3, [r4, #0]
  locUSBHPath=USBHPath;
 801d8ba:	4a15      	ldr	r2, [pc, #84]	; (801d910 <MX_USB_HOST_Process+0x60>)
	  ((hUsbHostHS.gState != HOST_CLASS) && (hUsbHostHS.gState != HOST_DEV_DISCONNECTED)
 801d8bc:	2b0b      	cmp	r3, #11
  locUSBHPath=USBHPath;
 801d8be:	6011      	str	r1, [r2, #0]
	  ((hUsbHostHS.gState != HOST_CLASS) && (hUsbHostHS.gState != HOST_DEV_DISCONNECTED)
 801d8c0:	d108      	bne.n	801d8d4 <MX_USB_HOST_Process+0x24>
 801d8c2:	e00b      	b.n	801d8dc <MX_USB_HOST_Process+0x2c>
		  && (hUsbHostHS.gState != HOST_ABORT_STATE) )
 801d8c4:	7823      	ldrb	r3, [r4, #0]
 801d8c6:	2b0d      	cmp	r3, #13
 801d8c8:	d008      	beq.n	801d8dc <MX_USB_HOST_Process+0x2c>
	  USBH_Process(&hUsbHostHS);
 801d8ca:	f7ea ff9d 	bl	8008808 <USBH_Process>
	  ((hUsbHostHS.gState != HOST_CLASS) && (hUsbHostHS.gState != HOST_DEV_DISCONNECTED)
 801d8ce:	7823      	ldrb	r3, [r4, #0]
 801d8d0:	2b0b      	cmp	r3, #11
 801d8d2:	d003      	beq.n	801d8dc <MX_USB_HOST_Process+0x2c>
 801d8d4:	7823      	ldrb	r3, [r4, #0]
	  USBH_Process(&hUsbHostHS);
 801d8d6:	4620      	mov	r0, r4
	  ((hUsbHostHS.gState != HOST_CLASS) && (hUsbHostHS.gState != HOST_DEV_DISCONNECTED)
 801d8d8:	2b03      	cmp	r3, #3
 801d8da:	d1f3      	bne.n	801d8c4 <MX_USB_HOST_Process+0x14>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) hUsbHostHS.pActiveClass->pData;
 801d8dc:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 801d8e0:	69dc      	ldr	r4, [r3, #28]
  while((MSC_Handle->state != MSC_IDLE) && (MSC_Handle->state != MSC_UNRECOVERED_ERROR))
 801d8e2:	7b23      	ldrb	r3, [r4, #12]
 801d8e4:	2b01      	cmp	r3, #1
 801d8e6:	d00a      	beq.n	801d8fe <MX_USB_HOST_Process+0x4e>
 801d8e8:	2b08      	cmp	r3, #8
 801d8ea:	d008      	beq.n	801d8fe <MX_USB_HOST_Process+0x4e>
	  USBH_Process(&hUsbHostHS);
 801d8ec:	4d07      	ldr	r5, [pc, #28]	; (801d90c <MX_USB_HOST_Process+0x5c>)
 801d8ee:	4628      	mov	r0, r5
 801d8f0:	f7ea ff8a 	bl	8008808 <USBH_Process>
  while((MSC_Handle->state != MSC_IDLE) && (MSC_Handle->state != MSC_UNRECOVERED_ERROR))
 801d8f4:	7b23      	ldrb	r3, [r4, #12]
 801d8f6:	2b01      	cmp	r3, #1
 801d8f8:	d001      	beq.n	801d8fe <MX_USB_HOST_Process+0x4e>
 801d8fa:	2b08      	cmp	r3, #8
 801d8fc:	d1f7      	bne.n	801d8ee <MX_USB_HOST_Process+0x3e>
  USBH_Process(&hUsbHostFS);
 801d8fe:	4805      	ldr	r0, [pc, #20]	; (801d914 <MX_USB_HOST_Process+0x64>)
}
 801d900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  USBH_Process(&hUsbHostFS);
 801d904:	f7ea bf80 	b.w	8008808 <USBH_Process>
 801d908:	20018fbc 	.word	0x20018fbc
 801d90c:	20018cec 	.word	0x20018cec
 801d910:	20018fb8 	.word	0x20018fb8
 801d914:	20018a20 	.word	0x20018a20

0801d918 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801d918:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d91a:	2400      	movs	r4, #0
{
 801d91c:	b0b0      	sub	sp, #192	; 0xc0
 801d91e:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801d920:	2284      	movs	r2, #132	; 0x84
 801d922:	4621      	mov	r1, r4
 801d924:	a80f      	add	r0, sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d926:	940e      	str	r4, [sp, #56]	; 0x38
 801d928:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801d92c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801d930:	f001 fc10 	bl	801f154 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 801d934:	682b      	ldr	r3, [r5, #0]
 801d936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d93a:	d004      	beq.n	801d946 <HAL_HCD_MspInit+0x2e>
    //HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
  else if(hcdHandle->Instance==USB_OTG_HS)
 801d93c:	4a62      	ldr	r2, [pc, #392]	; (801dac8 <HAL_HCD_MspInit+0x1b0>)
 801d93e:	4293      	cmp	r3, r2
 801d940:	d036      	beq.n	801d9b0 <HAL_HCD_MspInit+0x98>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801d942:	b030      	add	sp, #192	; 0xc0
 801d944:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801d946:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801d94a:	a80f      	add	r0, sp, #60	; 0x3c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801d94c:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801d94e:	f7e6 fe8d 	bl	800466c <HAL_RCCEx_PeriphCLKConfig>
 801d952:	2800      	cmp	r0, #0
 801d954:	f040 80af 	bne.w	801dab6 <HAL_HCD_MspInit+0x19e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d958:	4c5c      	ldr	r4, [pc, #368]	; (801dacc <HAL_HCD_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d95a:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d95c:	a90a      	add	r1, sp, #40	; 0x28
 801d95e:	485c      	ldr	r0, [pc, #368]	; (801dad0 <HAL_HCD_MspInit+0x1b8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d960:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d962:	f043 0301 	orr.w	r3, r3, #1
 801d966:	6323      	str	r3, [r4, #48]	; 0x30
 801d968:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d96a:	920e      	str	r2, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801d96c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d96e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801d972:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801dac0 <HAL_HCD_MspInit+0x1a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d976:	9301      	str	r3, [sp, #4]
 801d978:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801d97a:	2303      	movs	r3, #3
 801d97c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801d980:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d984:	f7e4 f98a 	bl	8001c9c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d98a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d98e:	6363      	str	r3, [r4, #52]	; 0x34
 801d990:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d996:	9302      	str	r3, [sp, #8]
 801d998:	9b02      	ldr	r3, [sp, #8]
 801d99a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801d99c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d9a0:	6463      	str	r3, [r4, #68]	; 0x44
 801d9a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801d9a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d9a8:	9303      	str	r3, [sp, #12]
 801d9aa:	9b03      	ldr	r3, [sp, #12]
}
 801d9ac:	b030      	add	sp, #192	; 0xc0
 801d9ae:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d9b0:	4d46      	ldr	r5, [pc, #280]	; (801dacc <HAL_HCD_MspInit+0x1b4>)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d9b2:	2220      	movs	r2, #32
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 801d9b4:	260a      	movs	r6, #10
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d9b6:	4846      	ldr	r0, [pc, #280]	; (801dad0 <HAL_HCD_MspInit+0x1b8>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801d9b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d9ba:	f043 0301 	orr.w	r3, r3, #1
 801d9be:	632b      	str	r3, [r5, #48]	; 0x30
 801d9c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d9c2:	f003 0301 	and.w	r3, r3, #1
 801d9c6:	9304      	str	r3, [sp, #16]
 801d9c8:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801d9ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d9cc:	f043 0302 	orr.w	r3, r3, #2
 801d9d0:	632b      	str	r3, [r5, #48]	; 0x30
 801d9d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d9d4:	f003 0302 	and.w	r3, r3, #2
 801d9d8:	9305      	str	r3, [sp, #20]
 801d9da:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801d9dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d9de:	f043 0304 	orr.w	r3, r3, #4
 801d9e2:	632b      	str	r3, [r5, #48]	; 0x30
 801d9e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d9e6:	f003 0304 	and.w	r3, r3, #4
 801d9ea:	9306      	str	r3, [sp, #24]
 801d9ec:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801d9ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d9f4:	632b      	str	r3, [r5, #48]	; 0x30
 801d9f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d9fc:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d9fe:	2302      	movs	r3, #2
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801da00:	9907      	ldr	r1, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801da02:	a90a      	add	r1, sp, #40	; 0x28
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 801da04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 801da08:	2303      	movs	r3, #3
 801da0a:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801da0e:	f7e4 f945 	bl	8001c9c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801da12:	2208      	movs	r2, #8
 801da14:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801da16:	a90a      	add	r1, sp, #40	; 0x28
 801da18:	482d      	ldr	r0, [pc, #180]	; (801dad0 <HAL_HCD_MspInit+0x1b8>)
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801da1a:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801da1c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801da20:	2200      	movs	r2, #0
 801da22:	2303      	movs	r3, #3
 801da24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801da28:	f7e4 f938 	bl	8001c9c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 |
 801da2c:	f643 4223 	movw	r2, #15395	; 0x3c23
 801da30:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801da32:	a90a      	add	r1, sp, #40	; 0x28
 801da34:	4827      	ldr	r0, [pc, #156]	; (801dad4 <HAL_HCD_MspInit+0x1bc>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da36:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801da38:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 |
 801da3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801da3e:	f7e4 f92d 	bl	8001c9c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 801da42:	2201      	movs	r2, #1
 801da44:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801da46:	a90a      	add	r1, sp, #40	; 0x28
 801da48:	4823      	ldr	r0, [pc, #140]	; (801dad8 <HAL_HCD_MspInit+0x1c0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da4a:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801da4c:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 801da4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801da52:	f7e4 f923 	bl	8001c9c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 801da56:	2210      	movs	r2, #16
 801da58:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801da5a:	a90a      	add	r1, sp, #40	; 0x28
 801da5c:	481f      	ldr	r0, [pc, #124]	; (801dadc <HAL_HCD_MspInit+0x1c4>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da5e:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801da60:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 801da62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801da66:	f7e4 f919 	bl	8001c9c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 801da6a:	2204      	movs	r2, #4
 801da6c:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801da6e:	a90a      	add	r1, sp, #40	; 0x28
 801da70:	4819      	ldr	r0, [pc, #100]	; (801dad8 <HAL_HCD_MspInit+0x1c0>)
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801da72:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da74:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 801da76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801da7a:	f7e4 f90f 	bl	8001c9c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 801da7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 801da80:	4622      	mov	r2, r4
 801da82:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 801da84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 801da88:	204d      	movs	r0, #77	; 0x4d
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 801da8a:	632b      	str	r3, [r5, #48]	; 0x30
 801da8c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801da8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801da92:	9308      	str	r3, [sp, #32]
 801da94:	9b08      	ldr	r3, [sp, #32]
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801da96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801da98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801da9c:	632b      	str	r3, [r5, #48]	; 0x30
 801da9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801daa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801daa4:	9309      	str	r3, [sp, #36]	; 0x24
 801daa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 801daa8:	f7e3 fb18 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801daac:	204d      	movs	r0, #77	; 0x4d
 801daae:	f7e3 fb5f 	bl	8001170 <HAL_NVIC_EnableIRQ>
}
 801dab2:	b030      	add	sp, #192	; 0xc0
 801dab4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 801dab6:	f7fc fa0f 	bl	8019ed8 <Error_Handler>
 801daba:	e74d      	b.n	801d958 <HAL_HCD_MspInit+0x40>
 801dabc:	f3af 8000 	nop.w
 801dac0:	00001800 	.word	0x00001800
 801dac4:	00000002 	.word	0x00000002
 801dac8:	40040000 	.word	0x40040000
 801dacc:	40023800 	.word	0x40023800
 801dad0:	40020000 	.word	0x40020000
 801dad4:	40020400 	.word	0x40020400
 801dad8:	40020800 	.word	0x40020800
 801dadc:	40021c00 	.word	0x40021c00

0801dae0 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 801dae0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801dae4:	f7eb b82a 	b.w	8008b3c <USBH_LL_IncTimer>

0801dae8 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 801dae8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801daec:	f7eb b83e 	b.w	8008b6c <USBH_LL_Connect>

0801daf0 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 801daf0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801daf4:	f7eb b850 	b.w	8008b98 <USBH_LL_Disconnect>

0801daf8 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801daf8:	4770      	bx	lr
 801dafa:	bf00      	nop

0801dafc <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 801dafc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801db00:	f7eb b82c 	b.w	8008b5c <USBH_LL_PortEnabled>

0801db04 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 801db04:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801db08:	f7eb b82c 	b.w	8008b64 <USBH_LL_PortDisabled>
 801db0c:	0000      	movs	r0, r0
	...

0801db10 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801db10:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801db12:	f890 32c0 	ldrb.w	r3, [r0, #704]	; 0x2c0
{
 801db16:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 801db18:	2b01      	cmp	r3, #1
 801db1a:	d002      	beq.n	801db22 <USBH_LL_Init+0x12>
    Error_Handler( );
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  if (phost->id == HOST_HS) {
 801db1c:	b313      	cbz	r3, 801db64 <USBH_LL_Init+0x54>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
  }
  return USBH_OK;
}
 801db1e:	2000      	movs	r0, #0
 801db20:	bd10      	pop	{r4, pc}
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801db22:	4827      	ldr	r0, [pc, #156]	; (801dbc0 <USBH_LL_Init+0xb0>)
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801db24:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801db26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801db2a:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801db2c:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801db2e:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801db30:	6243      	str	r3, [r0, #36]	; 0x24
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801db32:	2300      	movs	r3, #0
  phost->pData = &hhcd_USB_OTG_FS;
 801db34:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hhcd_USB_OTG_FS.pData = phost;
 801db38:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801db3c:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 801dbb0 <USBH_LL_Init+0xa0>
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801db40:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801db44:	ed80 7b02 	vstr	d7, [r0, #8]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801db48:	f7e4 facc 	bl	80020e4 <HAL_HCD_Init>
 801db4c:	bb40      	cbnz	r0, 801dba0 <USBH_LL_Init+0x90>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801db4e:	481c      	ldr	r0, [pc, #112]	; (801dbc0 <USBH_LL_Init+0xb0>)
 801db50:	f7e4 ff8c 	bl	8002a6c <HAL_HCD_GetCurrentFrame>
 801db54:	4601      	mov	r1, r0
 801db56:	4620      	mov	r0, r4
 801db58:	f7ea ffec 	bl	8008b34 <USBH_LL_SetTimer>
  if (phost->id == HOST_HS) {
 801db5c:	f894 32c0 	ldrb.w	r3, [r4, #704]	; 0x2c0
 801db60:	2b00      	cmp	r3, #0
 801db62:	d1dc      	bne.n	801db1e <USBH_LL_Init+0xe>
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801db64:	4817      	ldr	r0, [pc, #92]	; (801dbc4 <USBH_LL_Init+0xb4>)
 801db66:	4a18      	ldr	r2, [pc, #96]	; (801dbc8 <USBH_LL_Init+0xb8>)
  phost->pData = &hhcd_USB_OTG_HS;
 801db68:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801db6c:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 801db6e:	2201      	movs	r2, #1
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801db70:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801db72:	6243      	str	r3, [r0, #36]	; 0x24
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 801db74:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 801db76:	6342      	str	r2, [r0, #52]	; 0x34
  hhcd_USB_OTG_HS.pData = phost;
 801db78:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 801db7c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801dbb8 <USBH_LL_Init+0xa8>
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801db80:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 801db84:	ed80 7b02 	vstr	d7, [r0, #8]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 801db88:	f7e4 faac 	bl	80020e4 <HAL_HCD_Init>
 801db8c:	b958      	cbnz	r0, 801dba6 <USBH_LL_Init+0x96>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 801db8e:	480d      	ldr	r0, [pc, #52]	; (801dbc4 <USBH_LL_Init+0xb4>)
 801db90:	f7e4 ff6c 	bl	8002a6c <HAL_HCD_GetCurrentFrame>
 801db94:	4601      	mov	r1, r0
 801db96:	4620      	mov	r0, r4
 801db98:	f7ea ffcc 	bl	8008b34 <USBH_LL_SetTimer>
}
 801db9c:	2000      	movs	r0, #0
 801db9e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 801dba0:	f7fc f99a 	bl	8019ed8 <Error_Handler>
 801dba4:	e7d3      	b.n	801db4e <USBH_LL_Init+0x3e>
    Error_Handler( );
 801dba6:	f7fc f997 	bl	8019ed8 <Error_Handler>
 801dbaa:	e7f0      	b.n	801db8e <USBH_LL_Init+0x7e>
 801dbac:	f3af 8000 	nop.w
 801dbb0:	00000008 	.word	0x00000008
 801dbb4:	00000003 	.word	0x00000003
 801dbb8:	0000000c 	.word	0x0000000c
 801dbbc:	00000000 	.word	0x00000000
 801dbc0:	20018fc0 	.word	0x20018fc0
 801dbc4:	20019288 	.word	0x20019288
 801dbc8:	40040000 	.word	0x40040000

0801dbcc <USBH_LL_Start>:
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 801dbcc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 801dbd0:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 801dbd2:	f7e4 ff0d 	bl	80029f0 <HAL_HCD_Start>
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 801dbd6:	2803      	cmp	r0, #3
 801dbd8:	d802      	bhi.n	801dbe0 <USBH_LL_Start+0x14>
 801dbda:	4b02      	ldr	r3, [pc, #8]	; (801dbe4 <USBH_LL_Start+0x18>)
 801dbdc:	5c18      	ldrb	r0, [r3, r0]
}
 801dbde:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_Start(phost->pData);
 801dbe0:	2002      	movs	r0, #2
}
 801dbe2:	bd08      	pop	{r3, pc}
 801dbe4:	08024f64 	.word	0x08024f64

0801dbe8 <USBH_LL_Stop>:
  hal_status = HAL_HCD_Stop(phost->pData);
 801dbe8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 801dbec:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 801dbee:	f7e4 ff17 	bl	8002a20 <HAL_HCD_Stop>
  switch (hal_status)
 801dbf2:	2803      	cmp	r0, #3
 801dbf4:	d802      	bhi.n	801dbfc <USBH_LL_Stop+0x14>
 801dbf6:	4b02      	ldr	r3, [pc, #8]	; (801dc00 <USBH_LL_Stop+0x18>)
 801dbf8:	5c18      	ldrb	r0, [r3, r0]
}
 801dbfa:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_Stop(phost->pData);
 801dbfc:	2002      	movs	r0, #2
}
 801dbfe:	bd08      	pop	{r3, pc}
 801dc00:	08024f64 	.word	0x08024f64

0801dc04 <USBH_LL_GetSpeed>:
{
 801dc04:	b508      	push	{r3, lr}
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801dc06:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801dc0a:	f7e4 ff33 	bl	8002a74 <HAL_HCD_GetCurrentSpeed>
 801dc0e:	2803      	cmp	r0, #3
 801dc10:	bf28      	it	cs
 801dc12:	2001      	movcs	r0, #1
}
 801dc14:	b2c0      	uxtb	r0, r0
 801dc16:	bd08      	pop	{r3, pc}

0801dc18 <USBH_LL_ResetPort>:
  hal_status = HAL_HCD_ResetPort(phost->pData);
 801dc18:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 801dc1c:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 801dc1e:	f7e4 ff13 	bl	8002a48 <HAL_HCD_ResetPort>
  switch (hal_status)
 801dc22:	2803      	cmp	r0, #3
 801dc24:	d802      	bhi.n	801dc2c <USBH_LL_ResetPort+0x14>
 801dc26:	4b02      	ldr	r3, [pc, #8]	; (801dc30 <USBH_LL_ResetPort+0x18>)
 801dc28:	5c18      	ldrb	r0, [r3, r0]
}
 801dc2a:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 801dc2c:	2002      	movs	r0, #2
}
 801dc2e:	bd08      	pop	{r3, pc}
 801dc30:	08024f64 	.word	0x08024f64

0801dc34 <USBH_LL_GetLastXferSize>:
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801dc34:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801dc38:	f7e4 bf12 	b.w	8002a60 <HAL_HCD_HC_GetXferCount>

0801dc3c <USBH_LL_OpenPipe>:
{
 801dc3c:	b510      	push	{r4, lr}
 801dc3e:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801dc40:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 801dc44:	f89d 4018 	ldrb.w	r4, [sp, #24]
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801dc48:	9400      	str	r4, [sp, #0]
{
 801dc4a:	f89d 401c 	ldrb.w	r4, [sp, #28]
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801dc4e:	9401      	str	r4, [sp, #4]
{
 801dc50:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801dc54:	9402      	str	r4, [sp, #8]
 801dc56:	f7e4 f9f7 	bl	8002048 <HAL_HCD_HC_Init>
  switch (hal_status)
 801dc5a:	2803      	cmp	r0, #3
 801dc5c:	d803      	bhi.n	801dc66 <USBH_LL_OpenPipe+0x2a>
 801dc5e:	4b03      	ldr	r3, [pc, #12]	; (801dc6c <USBH_LL_OpenPipe+0x30>)
 801dc60:	5c18      	ldrb	r0, [r3, r0]
}
 801dc62:	b004      	add	sp, #16
 801dc64:	bd10      	pop	{r4, pc}
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801dc66:	2002      	movs	r0, #2
}
 801dc68:	b004      	add	sp, #16
 801dc6a:	bd10      	pop	{r4, pc}
 801dc6c:	08024f64 	.word	0x08024f64

0801dc70 <USBH_LL_ClosePipe>:
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801dc70:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 801dc74:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801dc76:	f7e4 fa21 	bl	80020bc <HAL_HCD_HC_Halt>
  switch (hal_status)
 801dc7a:	2803      	cmp	r0, #3
 801dc7c:	d802      	bhi.n	801dc84 <USBH_LL_ClosePipe+0x14>
 801dc7e:	4b02      	ldr	r3, [pc, #8]	; (801dc88 <USBH_LL_ClosePipe+0x18>)
 801dc80:	5c18      	ldrb	r0, [r3, r0]
}
 801dc82:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801dc84:	2002      	movs	r0, #2
}
 801dc86:	bd08      	pop	{r3, pc}
 801dc88:	08024f64 	.word	0x08024f64

0801dc8c <USBH_LL_SubmitURB>:
{
 801dc8c:	b510      	push	{r4, lr}
 801dc8e:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801dc90:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 801dc94:	f89d 4018 	ldrb.w	r4, [sp, #24]
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801dc98:	9400      	str	r4, [sp, #0]
{
 801dc9a:	9c07      	ldr	r4, [sp, #28]
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801dc9c:	9401      	str	r4, [sp, #4]
{
 801dc9e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801dca2:	9402      	str	r4, [sp, #8]
{
 801dca4:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801dca8:	9403      	str	r4, [sp, #12]
 801dcaa:	f7e4 fa7d 	bl	80021a8 <HAL_HCD_HC_SubmitRequest>
  switch (hal_status)
 801dcae:	2803      	cmp	r0, #3
 801dcb0:	d803      	bhi.n	801dcba <USBH_LL_SubmitURB+0x2e>
 801dcb2:	4b03      	ldr	r3, [pc, #12]	; (801dcc0 <USBH_LL_SubmitURB+0x34>)
 801dcb4:	5c18      	ldrb	r0, [r3, r0]
}
 801dcb6:	b004      	add	sp, #16
 801dcb8:	bd10      	pop	{r4, pc}
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801dcba:	2002      	movs	r0, #2
}
 801dcbc:	b004      	add	sp, #16
 801dcbe:	bd10      	pop	{r4, pc}
 801dcc0:	08024f64 	.word	0x08024f64

0801dcc4 <USBH_LL_GetURBState>:
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801dcc4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801dcc8:	f7e4 bec2 	b.w	8002a50 <HAL_HCD_HC_GetURBState>

0801dccc <USBH_LL_DriverVBUS>:
{
 801dccc:	b538      	push	{r3, r4, r5, lr}
  if (phost->id == HOST_FS) {
 801dcce:	f890 32c0 	ldrb.w	r3, [r0, #704]	; 0x2c0
{
 801dcd2:	460d      	mov	r5, r1
  if (phost->id == HOST_FS) {
 801dcd4:	2b01      	cmp	r3, #1
 801dcd6:	d005      	beq.n	801dce4 <USBH_LL_DriverVBUS+0x18>
  if (phost->id == HOST_HS) {
 801dcd8:	b163      	cbz	r3, 801dcf4 <USBH_LL_DriverVBUS+0x28>
  HAL_Delay(200);
 801dcda:	20c8      	movs	r0, #200	; 0xc8
 801dcdc:	f7e3 f9ce 	bl	800107c <HAL_Delay>
}
 801dce0:	2000      	movs	r0, #0
 801dce2:	bd38      	pop	{r3, r4, r5, pc}
 801dce4:	4604      	mov	r4, r0
    MX_DriverVbusFS(state);
 801dce6:	4608      	mov	r0, r1
 801dce8:	f000 f8c0 	bl	801de6c <MX_DriverVbusFS>
  if (phost->id == HOST_HS) {
 801dcec:	f894 32c0 	ldrb.w	r3, [r4, #704]	; 0x2c0
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	d1f2      	bne.n	801dcda <USBH_LL_DriverVBUS+0xe>
    MX_DriverVbusHS(state);
 801dcf4:	4628      	mov	r0, r5
 801dcf6:	f000 f8c3 	bl	801de80 <MX_DriverVbusHS>
  HAL_Delay(200);
 801dcfa:	20c8      	movs	r0, #200	; 0xc8
 801dcfc:	f7e3 f9be 	bl	800107c <HAL_Delay>
}
 801dd00:	2000      	movs	r0, #0
 801dd02:	bd38      	pop	{r3, r4, r5, pc}

0801dd04 <USBH_LL_SetToggle>:
  pHandle = phost->pData;
 801dd04:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if(pHandle->hc[pipe].ep_is_in)
 801dd08:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801dd0c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801dd10:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 801dd14:	b11b      	cbz	r3, 801dd1e <USBH_LL_SetToggle+0x1a>
}
 801dd16:	2000      	movs	r0, #0
    pHandle->hc[pipe].toggle_in = toggle;
 801dd18:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
}
 801dd1c:	4770      	bx	lr
 801dd1e:	2000      	movs	r0, #0
    pHandle->hc[pipe].toggle_out = toggle;
 801dd20:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
}
 801dd24:	4770      	bx	lr
 801dd26:	bf00      	nop

0801dd28 <USBH_LL_GetToggle>:
  pHandle = phost->pData;
 801dd28:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if(pHandle->hc[pipe].ep_is_in)
 801dd2c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801dd30:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801dd34:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 801dd38:	b113      	cbz	r3, 801dd40 <USBH_LL_GetToggle+0x18>
    toggle = pHandle->hc[pipe].toggle_in;
 801dd3a:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 801dd3e:	4770      	bx	lr
    toggle = pHandle->hc[pipe].toggle_out;
 801dd40:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
}
 801dd44:	4770      	bx	lr
 801dd46:	bf00      	nop

0801dd48 <USBH_Delay>:
  HAL_Delay(Delay);
 801dd48:	f7e3 b998 	b.w	800107c <HAL_Delay>

0801dd4c <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 801dd4c:	2000      	movs	r0, #0
 801dd4e:	4770      	bx	lr

0801dd50 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 801dd50:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 801dd52:	4804      	ldr	r0, [pc, #16]	; (801dd64 <USBH_status+0x14>)
{
 801dd54:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 801dd56:	f7ea f8cb 	bl	8007ef0 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 801dd5a:	fab0 f080 	clz	r0, r0
 801dd5e:	0940      	lsrs	r0, r0, #5
 801dd60:	bd08      	pop	{r3, pc}
 801dd62:	bf00      	nop
 801dd64:	20018cec 	.word	0x20018cec

0801dd68 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801dd68:	b530      	push	{r4, r5, lr}
 801dd6a:	4604      	mov	r4, r0
 801dd6c:	b091      	sub	sp, #68	; 0x44
 801dd6e:	461d      	mov	r5, r3
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 801dd70:	480d      	ldr	r0, [pc, #52]	; (801dda8 <USBH_read+0x40>)
 801dd72:	460b      	mov	r3, r1
 801dd74:	4621      	mov	r1, r4
 801dd76:	9500      	str	r5, [sp, #0]
 801dd78:	f7ea f8f4 	bl	8007f64 <USBH_MSC_Read>
 801dd7c:	b908      	cbnz	r0, 801dd82 <USBH_read+0x1a>
      break;
    }
  }

  return res;
}
 801dd7e:	b011      	add	sp, #68	; 0x44
 801dd80:	bd30      	pop	{r4, r5, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 801dd82:	aa03      	add	r2, sp, #12
 801dd84:	4621      	mov	r1, r4
 801dd86:	4808      	ldr	r0, [pc, #32]	; (801dda8 <USBH_read+0x40>)
 801dd88:	f7ea f8c4 	bl	8007f14 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 801dd8c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801dd90:	2b28      	cmp	r3, #40	; 0x28
 801dd92:	d007      	beq.n	801dda4 <USBH_read+0x3c>
 801dd94:	2b3a      	cmp	r3, #58	; 0x3a
 801dd96:	d005      	beq.n	801dda4 <USBH_read+0x3c>
      res = RES_NOTRDY;
 801dd98:	2b04      	cmp	r3, #4
 801dd9a:	bf14      	ite	ne
 801dd9c:	2001      	movne	r0, #1
 801dd9e:	2003      	moveq	r0, #3
}
 801dda0:	b011      	add	sp, #68	; 0x44
 801dda2:	bd30      	pop	{r4, r5, pc}
      res = RES_NOTRDY;
 801dda4:	2003      	movs	r0, #3
 801dda6:	e7ea      	b.n	801dd7e <USBH_read+0x16>
 801dda8:	20018cec 	.word	0x20018cec

0801ddac <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801ddac:	b510      	push	{r4, lr}
 801ddae:	4614      	mov	r4, r2
 801ddb0:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 801ddb2:	2903      	cmp	r1, #3
 801ddb4:	d82a      	bhi.n	801de0c <USBH_ioctl+0x60>
 801ddb6:	e8df f001 	tbb	[pc, r1]
 801ddba:	1c02      	.short	0x1c02
 801ddbc:	0511      	.short	0x0511
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 801ddbe:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 801ddc0:	b00e      	add	sp, #56	; 0x38
 801ddc2:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 801ddc4:	4601      	mov	r1, r0
 801ddc6:	aa01      	add	r2, sp, #4
 801ddc8:	4811      	ldr	r0, [pc, #68]	; (801de10 <USBH_ioctl+0x64>)
 801ddca:	f7ea f8a3 	bl	8007f14 <USBH_MSC_GetLUNInfo>
 801ddce:	b9d0      	cbnz	r0, 801de06 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 801ddd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ddd4:	0a5b      	lsrs	r3, r3, #9
 801ddd6:	6023      	str	r3, [r4, #0]
}
 801ddd8:	b00e      	add	sp, #56	; 0x38
 801ddda:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 801dddc:	4601      	mov	r1, r0
 801ddde:	aa01      	add	r2, sp, #4
 801dde0:	480b      	ldr	r0, [pc, #44]	; (801de10 <USBH_ioctl+0x64>)
 801dde2:	f7ea f897 	bl	8007f14 <USBH_MSC_GetLUNInfo>
 801dde6:	b970      	cbnz	r0, 801de06 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size;
 801dde8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ddec:	6023      	str	r3, [r4, #0]
}
 801ddee:	b00e      	add	sp, #56	; 0x38
 801ddf0:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 801ddf2:	4601      	mov	r1, r0
 801ddf4:	aa01      	add	r2, sp, #4
 801ddf6:	4806      	ldr	r0, [pc, #24]	; (801de10 <USBH_ioctl+0x64>)
 801ddf8:	f7ea f88c 	bl	8007f14 <USBH_MSC_GetLUNInfo>
 801ddfc:	b918      	cbnz	r0, 801de06 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_nbr;
 801ddfe:	9b02      	ldr	r3, [sp, #8]
 801de00:	6023      	str	r3, [r4, #0]
}
 801de02:	b00e      	add	sp, #56	; 0x38
 801de04:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 801de06:	2001      	movs	r0, #1
}
 801de08:	b00e      	add	sp, #56	; 0x38
 801de0a:	bd10      	pop	{r4, pc}
  switch (cmd)
 801de0c:	2004      	movs	r0, #4
 801de0e:	e7d7      	b.n	801ddc0 <USBH_ioctl+0x14>
 801de10:	20018cec 	.word	0x20018cec

0801de14 <USBH_write>:
{
 801de14:	b530      	push	{r4, r5, lr}
 801de16:	4604      	mov	r4, r0
 801de18:	b091      	sub	sp, #68	; 0x44
 801de1a:	461d      	mov	r5, r3
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 801de1c:	4812      	ldr	r0, [pc, #72]	; (801de68 <USBH_write+0x54>)
 801de1e:	460b      	mov	r3, r1
 801de20:	4621      	mov	r1, r4
 801de22:	9500      	str	r5, [sp, #0]
 801de24:	f7ea f928 	bl	8008078 <USBH_MSC_Write>
 801de28:	b908      	cbnz	r0, 801de2e <USBH_write+0x1a>
}
 801de2a:	b011      	add	sp, #68	; 0x44
 801de2c:	bd30      	pop	{r4, r5, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 801de2e:	aa03      	add	r2, sp, #12
 801de30:	4621      	mov	r1, r4
 801de32:	480d      	ldr	r0, [pc, #52]	; (801de68 <USBH_write+0x54>)
 801de34:	f7ea f86e 	bl	8007f14 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 801de38:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801de3c:	2b27      	cmp	r3, #39	; 0x27
 801de3e:	d00e      	beq.n	801de5e <USBH_write+0x4a>
 801de40:	d907      	bls.n	801de52 <USBH_write+0x3e>
 801de42:	2b28      	cmp	r3, #40	; 0x28
 801de44:	d00e      	beq.n	801de64 <USBH_write+0x50>
 801de46:	2b3a      	cmp	r3, #58	; 0x3a
 801de48:	bf14      	ite	ne
 801de4a:	2001      	movne	r0, #1
 801de4c:	2003      	moveq	r0, #3
}
 801de4e:	b011      	add	sp, #68	; 0x44
 801de50:	bd30      	pop	{r4, r5, pc}
    switch (info.sense.asc)
 801de52:	2b04      	cmp	r3, #4
 801de54:	bf14      	ite	ne
 801de56:	2001      	movne	r0, #1
 801de58:	2003      	moveq	r0, #3
}
 801de5a:	b011      	add	sp, #68	; 0x44
 801de5c:	bd30      	pop	{r4, r5, pc}
      res = RES_WRPRT;
 801de5e:	2002      	movs	r0, #2
}
 801de60:	b011      	add	sp, #68	; 0x44
 801de62:	bd30      	pop	{r4, r5, pc}
    switch (info.sense.asc)
 801de64:	2003      	movs	r0, #3
 801de66:	e7e0      	b.n	801de2a <USBH_write+0x16>
 801de68:	20018cec 	.word	0x20018cec

0801de6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801de6c:	4602      	mov	r2, r0
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801de6e:	2120      	movs	r1, #32
 801de70:	4802      	ldr	r0, [pc, #8]	; (801de7c <MX_DriverVbusFS+0x10>)
 801de72:	3a00      	subs	r2, #0
 801de74:	bf18      	it	ne
 801de76:	2201      	movne	r2, #1
 801de78:	f7e4 b8be 	b.w	8001ff8 <HAL_GPIO_WritePin>
 801de7c:	40020c00 	.word	0x40020c00

0801de80 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 801de80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de82:	b087      	sub	sp, #28
  uint8_t Component_Addr = 0 << 1;
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_HS */
  /* USER CODE BEGIN PREPARE_DATA_VBUS_HS */
  uint8_t data = state;
  /* USER CODE END PREPARE_DATA_VBUS_HS */
  uint8_t data_tmp = 0;
 801de84:	2400      	movs	r4, #0
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 801de86:	2501      	movs	r5, #1
 801de88:	4e12      	ldr	r6, [pc, #72]	; (801ded4 <MX_DriverVbusHS+0x54>)
 801de8a:	2764      	movs	r7, #100	; 0x64
 801de8c:	f10d 0317 	add.w	r3, sp, #23
 801de90:	4622      	mov	r2, r4
 801de92:	4621      	mov	r1, r4
  uint8_t data = state;
 801de94:	f88d 0016 	strb.w	r0, [sp, #22]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 801de98:	4630      	mov	r0, r6
 801de9a:	9300      	str	r3, [sp, #0]
 801de9c:	462b      	mov	r3, r5
  uint8_t data_tmp = 0;
 801de9e:	f88d 4017 	strb.w	r4, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 801dea2:	e9cd 5701 	strd	r5, r7, [sp, #4]
 801dea6:	f7e5 f9d3 	bl	8003250 <HAL_I2C_Mem_Read>
  data |= data_tmp;
 801deaa:	f89d c016 	ldrb.w	ip, [sp, #22]
 801deae:	f89d 3017 	ldrb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 801deb2:	f10d 0216 	add.w	r2, sp, #22
 801deb6:	4621      	mov	r1, r4
 801deb8:	4630      	mov	r0, r6
  data |= data_tmp;
 801deba:	ea4c 0c03 	orr.w	ip, ip, r3
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 801debe:	9200      	str	r2, [sp, #0]
 801dec0:	462b      	mov	r3, r5
 801dec2:	4622      	mov	r2, r4
 801dec4:	9702      	str	r7, [sp, #8]
 801dec6:	9501      	str	r5, [sp, #4]
  data |= data_tmp;
 801dec8:	f88d c016 	strb.w	ip, [sp, #22]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 801decc:	f7e5 f852 	bl	8002f74 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_HS */
}
 801ded0:	b007      	add	sp, #28
 801ded2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ded4:	20000a50 	.word	0x20000a50

0801ded8 <TrackTime>:
			}
		}
	}
}

void TrackTime() {
 801ded8:	b570      	push	{r4, r5, r6, lr}
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801deda:	4b21      	ldr	r3, [pc, #132]	; (801df60 <TrackTime+0x88>)
 801dedc:	f242 3e28 	movw	lr, #9000	; 0x2328
 801dee0:	4c20      	ldr	r4, [pc, #128]	; (801df64 <TrackTime+0x8c>)
 801dee2:	6818      	ldr	r0, [r3, #0]
 801dee4:	f8d4 1a8c 	ldr.w	r1, [r4, #2700]	; 0xa8c
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801dee8:	f8d4 3a8c 	ldr.w	r3, [r4, #2700]	; 0xa8c
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801deec:	f8d4 4a8c 	ldr.w	r4, [r4, #2700]	; 0xa8c
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801def0:	1a09      	subs	r1, r1, r0
 801def2:	4a1d      	ldr	r2, [pc, #116]	; (801df68 <TrackTime+0x90>)
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801def4:	1a1b      	subs	r3, r3, r0
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801def6:	eba4 0c00 	sub.w	ip, r4, r0
 801defa:	fba2 4c0c 	umull	r4, ip, r2, ip
	fr = ((file_pos_wide) % 9000) % 150;
 801defe:	fba2 5400 	umull	r5, r4, r2, r0
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801df02:	fba2 6501 	umull	r6, r5, r2, r1
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801df06:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801df0a:	fba2 6203 	umull	r6, r2, r2, r3
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801df0e:	0b6d      	lsrs	r5, r5, #13
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801df10:	0b52      	lsrs	r2, r2, #13
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801df12:	fb0e 1115 	mls	r1, lr, r5, r1
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801df16:	fb0e 3312 	mls	r3, lr, r2, r3
	fr = ((file_pos_wide) % 9000) % 150;
 801df1a:	0b62      	lsrs	r2, r4, #13
	sec = ((file_pos_wide) % 9000) / 150;
	min = (file_pos_wide) / 9000;
 801df1c:	0b64      	lsrs	r4, r4, #13
	fr = ((file_pos_wide) % 9000) % 150;
 801df1e:	fb0e 0212 	mls	r2, lr, r2, r0
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801df22:	4812      	ldr	r0, [pc, #72]	; (801df6c <TrackTime+0x94>)
 801df24:	fba0 5e01 	umull	r5, lr, r0, r1
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801df28:	fba0 5303 	umull	r5, r3, r0, r3
	fr = ((file_pos_wide) % 9000) % 150;
 801df2c:	fba0 5002 	umull	r5, r0, r0, r2
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801df30:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801df34:	2596      	movs	r5, #150	; 0x96
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801df36:	091b      	lsrs	r3, r3, #4
	fr = ((file_pos_wide) % 9000) % 150;
 801df38:	0900      	lsrs	r0, r0, #4
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801df3a:	fb05 111e 	mls	r1, r5, lr, r1
	fr = ((file_pos_wide) % 9000) % 150;
 801df3e:	fb05 2210 	mls	r2, r5, r0, r2
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801df42:	4d0b      	ldr	r5, [pc, #44]	; (801df70 <TrackTime+0x98>)
 801df44:	8029      	strh	r1, [r5, #0]
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801df46:	490b      	ldr	r1, [pc, #44]	; (801df74 <TrackTime+0x9c>)
 801df48:	700b      	strb	r3, [r1, #0]
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801df4a:	4b0b      	ldr	r3, [pc, #44]	; (801df78 <TrackTime+0xa0>)
 801df4c:	f883 c000 	strb.w	ip, [r3]
	fr = ((file_pos_wide) % 9000) % 150;
 801df50:	4b0a      	ldr	r3, [pc, #40]	; (801df7c <TrackTime+0xa4>)
 801df52:	801a      	strh	r2, [r3, #0]
	sec = ((file_pos_wide) % 9000) / 150;
 801df54:	4a0a      	ldr	r2, [pc, #40]	; (801df80 <TrackTime+0xa8>)
	min = (file_pos_wide) / 9000;
 801df56:	4b0b      	ldr	r3, [pc, #44]	; (801df84 <TrackTime+0xac>)
	sec = ((file_pos_wide) % 9000) / 150;
 801df58:	7010      	strb	r0, [r2, #0]
	min = (file_pos_wide) / 9000;
 801df5a:	701c      	strb	r4, [r3, #0]
}
 801df5c:	bd70      	pop	{r4, r5, r6, pc}
 801df5e:	bf00      	nop
 801df60:	2000e9a4 	.word	0x2000e9a4
 801df64:	20017208 	.word	0x20017208
 801df68:	e90452d5 	.word	0xe90452d5
 801df6c:	1b4e81b5 	.word	0x1b4e81b5
 801df70:	2000f786 	.word	0x2000f786
 801df74:	2000f789 	.word	0x2000f789
 801df78:	2000f788 	.word	0x2000f788
 801df7c:	2000edf0 	.word	0x2000edf0
 801df80:	2000f78a 	.word	0x2000f78a
 801df84:	2000ef88 	.word	0x2000ef88

0801df88 <GoToPosition>:
	tim7_flag = 0;
	if(display.timemode == 0) display.trackbarmode = 0;
	else display.trackbarmode = 1;
}

void GoToPosition(uint32_t position) {
 801df88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BSP_AUDIO_OUT_Pause();
	file_pos_wide = position;
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 801df8c:	4f4a      	ldr	r7, [pc, #296]	; (801e0b8 <GoToPosition+0x130>)
void GoToPosition(uint32_t position) {
 801df8e:	4604      	mov	r4, r0
			rekordbox.lowp_spectrum_size;
	if(BufferCtl.filetype == 0)	{
 801df90:	f8df 814c 	ldr.w	r8, [pc, #332]	; 801e0e0 <GoToPosition+0x158>
void GoToPosition(uint32_t position) {
 801df94:	ed2d 8b02 	vpush	{d8}
	BSP_AUDIO_OUT_Pause();
 801df98:	f7fd ff32 	bl	801be00 <BSP_AUDIO_OUT_Pause>
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 801df9c:	f607 238c 	addw	r3, r7, #2700	; 0xa8c
 801dfa0:	ee07 4a90 	vmov	s15, r4
	if(BufferCtl.filetype == 0)	{
 801dfa4:	f508 5b80 	add.w	fp, r8, #4096	; 0x1000
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 801dfa8:	edd3 6a00 	vldr	s13, [r3]
			rekordbox.lowp_spectrum_size;
 801dfac:	f607 2388 	addw	r3, r7, #2696	; 0xa88
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 801dfb0:	eef8 8a67 	vcvt.f32.u32	s17, s15
	if(BufferCtl.filetype == 0)	{
 801dfb4:	f89b 5008 	ldrb.w	r5, [fp, #8]
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 801dfb8:	eef8 6a66 	vcvt.f32.u32	s13, s13
			rekordbox.lowp_spectrum_size;
 801dfbc:	ed93 7a00 	vldr	s14, [r3]
	file_pos_wide = position;
 801dfc0:	4b3e      	ldr	r3, [pc, #248]	; (801e0bc <GoToPosition+0x134>)
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 801dfc2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801dfc6:	eec8 7aa6 	vdiv.f32	s15, s17, s13
	file_pos_wide = position;
 801dfca:	601c      	str	r4, [r3, #0]
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 801dfcc:	4b3c      	ldr	r3, [pc, #240]	; (801e0c0 <GoToPosition+0x138>)
 801dfce:	ee67 7a87 	vmul.f32	s15, s15, s14
 801dfd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dfd6:	edc3 7a00 	vstr	s15, [r3]
	if(BufferCtl.filetype == 0)	{
 801dfda:	2d00      	cmp	r5, #0
 801dfdc:	d146      	bne.n	801e06c <GoToPosition+0xe4>
 801dfde:	4c39      	ldr	r4, [pc, #228]	; (801e0c4 <GoToPosition+0x13c>)
		uint16_t i = 0;
		do {
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801dfe0:	462e      	mov	r6, r5
 801dfe2:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 801e0dc <GoToPosition+0x154>
 801dfe6:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801e0d8 <GoToPosition+0x150>
 801dfea:	f8d9 1000 	ldr.w	r1, [r9]
 801dfee:	f8da 3000 	ldr.w	r3, [sl]
 801dff2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 801dff6:	185b      	adds	r3, r3, r1
				/rekordbox.spectrum_size + i));
 801dff8:	f607 218c 	addw	r1, r7, #2700	; 0xa8c
 801dffc:	ed91 8a00 	vldr	s16, [r1]
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e000:	eb46 0106 	adc.w	r1, r6, r6
 801e004:	1ac0      	subs	r0, r0, r3
				/rekordbox.spectrum_size + i));
 801e006:	eeb8 8a48 	vcvt.f32.u32	s16, s16
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e00a:	eb62 0101 	sbc.w	r1, r2, r1
 801e00e:	f7e2 fe05 	bl	8000c1c <__aeabi_ul2f>
 801e012:	ee07 0a90 	vmov	s15, r0
				/rekordbox.spectrum_size + i));
 801e016:	b2ab      	uxth	r3, r5
 801e018:	3501      	adds	r5, #1
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e01a:	ee27 7aa8 	vmul.f32	s14, s15, s17
				/rekordbox.spectrum_size + i));
 801e01e:	ee07 3a90 	vmov	s15, r3
 801e022:	eec7 6a08 	vdiv.f32	s13, s14, s16
 801e026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e02a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e02e:	ee17 0a90 	vmov	r0, s15
 801e032:	f7e2 fe51 	bl	8000cd8 <__aeabi_f2ulz>
 801e036:	4602      	mov	r2, r0
 801e038:	460b      	mov	r3, r1
 801e03a:	4620      	mov	r0, r4
 801e03c:	f7ed fb3a 	bl	800b6b4 <f_lseek>
			i++;
		}
		while(((UINT)BufferCtl.buff & 1) != (f_tell(&MyFile) & 1));
 801e040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e042:	ea88 0303 	eor.w	r3, r8, r3
 801e046:	07db      	lsls	r3, r3, #31
 801e048:	d4cf      	bmi.n	801dfea <GoToPosition+0x62>
	}
	else {
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
						/rekordbox.spectrum_size));
	}
	if(BufferCtl.filetype == 1) {
 801e04a:	f89b 3008 	ldrb.w	r3, [fp, #8]
 801e04e:	2b01      	cmp	r3, #1
 801e050:	d108      	bne.n	801e064 <GoToPosition+0xdc>
		unInDataLeft = 0;
 801e052:	2300      	movs	r3, #0
 801e054:	4c1c      	ldr	r4, [pc, #112]	; (801e0c8 <GoToPosition+0x140>)
		unDmaBufferSpace = 0;
 801e056:	481d      	ldr	r0, [pc, #116]	; (801e0cc <GoToPosition+0x144>)
		unFramesDecoded = 0;
 801e058:	491d      	ldr	r1, [pc, #116]	; (801e0d0 <GoToPosition+0x148>)
		unDmaBufMode = 0;
 801e05a:	4a1e      	ldr	r2, [pc, #120]	; (801e0d4 <GoToPosition+0x14c>)
		unInDataLeft = 0;
 801e05c:	6023      	str	r3, [r4, #0]
		unDmaBufferSpace = 0;
 801e05e:	6003      	str	r3, [r0, #0]
		unFramesDecoded = 0;
 801e060:	600b      	str	r3, [r1, #0]
		unDmaBufMode = 0;
 801e062:	6013      	str	r3, [r2, #0]
	}
}
 801e064:	ecbd 8b02 	vpop	{d8}
 801e068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e06c:	4a1a      	ldr	r2, [pc, #104]	; (801e0d8 <GoToPosition+0x150>)
 801e06e:	2100      	movs	r1, #0
 801e070:	4b1a      	ldr	r3, [pc, #104]	; (801e0dc <GoToPosition+0x154>)
 801e072:	6810      	ldr	r0, [r2, #0]
 801e074:	4c13      	ldr	r4, [pc, #76]	; (801e0c4 <GoToPosition+0x13c>)
 801e076:	681b      	ldr	r3, [r3, #0]
						/rekordbox.spectrum_size));
 801e078:	f8d7 5a8c 	ldr.w	r5, [r7, #2700]	; 0xa8c
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e07c:	181b      	adds	r3, r3, r0
 801e07e:	6920      	ldr	r0, [r4, #16]
 801e080:	4149      	adcs	r1, r1
 801e082:	1ac0      	subs	r0, r0, r3
 801e084:	6963      	ldr	r3, [r4, #20]
 801e086:	eb63 0101 	sbc.w	r1, r3, r1
 801e08a:	f7e2 fdc7 	bl	8000c1c <__aeabi_ul2f>
						/rekordbox.spectrum_size));
 801e08e:	ee07 5a90 	vmov	s15, r5
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e092:	ee07 0a10 	vmov	s14, r0
						/rekordbox.spectrum_size));
 801e096:	eef8 7a67 	vcvt.f32.u32	s15, s15
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e09a:	ee67 8a28 	vmul.f32	s17, s14, s17
 801e09e:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 801e0a2:	ee17 0a90 	vmov	r0, s15
 801e0a6:	f7e2 fe17 	bl	8000cd8 <__aeabi_f2ulz>
 801e0aa:	4602      	mov	r2, r0
 801e0ac:	460b      	mov	r3, r1
 801e0ae:	4620      	mov	r0, r4
 801e0b0:	f7ed fb00 	bl	800b6b4 <f_lseek>
 801e0b4:	e7c9      	b.n	801e04a <GoToPosition+0xc2>
 801e0b6:	bf00      	nop
 801e0b8:	20017208 	.word	0x20017208
 801e0bc:	2000e9a4 	.word	0x2000e9a4
 801e0c0:	2000e9a0 	.word	0x2000e9a0
 801e0c4:	20001b58 	.word	0x20001b58
 801e0c8:	20015204 	.word	0x20015204
 801e0cc:	200151fc 	.word	0x200151fc
 801e0d0:	20015200 	.word	0x20015200
 801e0d4:	2000f7cc 	.word	0x2000f7cc
 801e0d8:	20019578 	.word	0x20019578
 801e0dc:	200151d8 	.word	0x200151d8
 801e0e0:	20000b48 	.word	0x20000b48

0801e0e4 <GetTrackTime>:
void GetTrackTime() {
 801e0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 801e0e8:	4b4a      	ldr	r3, [pc, #296]	; (801e214 <GetTrackTime+0x130>)
 801e0ea:	2400      	movs	r4, #0
 801e0ec:	4d4a      	ldr	r5, [pc, #296]	; (801e218 <GetTrackTime+0x134>)
 801e0ee:	681f      	ldr	r7, [r3, #0]
 801e0f0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
			*rekordbox.spectrum_size;
 801e0f2:	4e4a      	ldr	r6, [pc, #296]	; (801e21c <GetTrackTime+0x138>)
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 801e0f4:	1bc0      	subs	r0, r0, r7
 801e0f6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			*rekordbox.spectrum_size;
 801e0f8:	f606 238c 	addw	r3, r6, #2700	; 0xa8c
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 801e0fc:	f161 0100 	sbc.w	r1, r1, #0
void GetTrackTime() {
 801e100:	ed2d 8b02 	vpush	{d8}
			*rekordbox.spectrum_size;
 801e104:	ed93 8a00 	vldr	s16, [r3]
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 801e108:	f7e2 fd88 	bl	8000c1c <__aeabi_ul2f>
			(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e10c:	4b44      	ldr	r3, [pc, #272]	; (801e220 <GetTrackTime+0x13c>)
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 801e10e:	ee08 0a90 	vmov	s17, r0
			(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e112:	6969      	ldr	r1, [r5, #20]
			*rekordbox.spectrum_size;
 801e114:	eeb8 8a48 	vcvt.f32.u32	s16, s16
			(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e118:	6818      	ldr	r0, [r3, #0]
 801e11a:	692b      	ldr	r3, [r5, #16]
 801e11c:	19c0      	adds	r0, r0, r7
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e11e:	4d41      	ldr	r5, [pc, #260]	; (801e224 <GetTrackTime+0x140>)
			(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 801e120:	4164      	adcs	r4, r4
 801e122:	1a18      	subs	r0, r3, r0
 801e124:	eb61 0104 	sbc.w	r1, r1, r4
 801e128:	f7e2 fd78 	bl	8000c1c <__aeabi_ul2f>
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 801e12c:	ee07 0a90 	vmov	s15, r0
 801e130:	eec8 7aa7 	vdiv.f32	s15, s17, s15
	file_pos_wide = (track_lenght + 0.5);
 801e134:	ee67 7a88 	vmul.f32	s15, s15, s16
 801e138:	ee17 0a90 	vmov	r0, s15
 801e13c:	f7e2 fb56 	bl	80007ec <__aeabi_f2d>
 801e140:	2200      	movs	r2, #0
 801e142:	4b39      	ldr	r3, [pc, #228]	; (801e228 <GetTrackTime+0x144>)
 801e144:	f7e2 f9f4 	bl	8000530 <__adddf3>
 801e148:	f7e2 fc30 	bl	80009ac <__aeabi_d2uiz>
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 801e14c:	f8d6 4a88 	ldr.w	r4, [r6, #2696]	; 0xa88
	file_pos_wide = (track_lenght + 0.5);
 801e150:	4936      	ldr	r1, [pc, #216]	; (801e22c <GetTrackTime+0x148>)
			rekordbox.spectrum_size);
 801e152:	f8d6 2a8c 	ldr.w	r2, [r6, #2700]	; 0xa8c
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 801e156:	fb00 f404 	mul.w	r4, r0, r4
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e15a:	f8d6 3a8c 	ldr.w	r3, [r6, #2700]	; 0xa8c
	file_pos_wide = (track_lenght + 0.5);
 801e15e:	6008      	str	r0, [r1, #0]
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e160:	eba3 0e00 	sub.w	lr, r3, r0
 801e164:	4b32      	ldr	r3, [pc, #200]	; (801e230 <GetTrackTime+0x14c>)
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 801e166:	fbb4 f4f2 	udiv	r4, r4, r2
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e16a:	f8d6 2a8c 	ldr.w	r2, [r6, #2700]	; 0xa8c
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 801e16e:	b2a4      	uxth	r4, r4
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e170:	f8d6 1a8c 	ldr.w	r1, [r6, #2700]	; 0xa8c
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e174:	1a12      	subs	r2, r2, r0
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e176:	eba1 0c00 	sub.w	ip, r1, r0
	fr = ((file_pos_wide) % 9000) % 150;
 801e17a:	fba3 1600 	umull	r1, r6, r3, r0
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e17e:	fba3 170e 	umull	r1, r7, r3, lr
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e182:	fba3 1c0c 	umull	r1, ip, r3, ip
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e186:	fba3 1302 	umull	r1, r3, r3, r2
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e18a:	f242 3128 	movw	r1, #9000	; 0x2328
 801e18e:	0b7f      	lsrs	r7, r7, #13
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e190:	0b5b      	lsrs	r3, r3, #13
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e192:	fb01 ee17 	mls	lr, r1, r7, lr
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e196:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e19a:	fb01 2313 	mls	r3, r1, r3, r2
	fr = ((file_pos_wide) % 9000) % 150;
 801e19e:	0b72      	lsrs	r2, r6, #13
	min = (file_pos_wide) / 9000;
 801e1a0:	0b76      	lsrs	r6, r6, #13
	fr = ((file_pos_wide) % 9000) % 150;
 801e1a2:	fb01 0212 	mls	r2, r1, r2, r0
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e1a6:	4923      	ldr	r1, [pc, #140]	; (801e234 <GetTrackTime+0x150>)
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e1a8:	fba1 7303 	umull	r7, r3, r1, r3
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e1ac:	fba1 870e 	umull	r8, r7, r1, lr
	fr = ((file_pos_wide) % 9000) % 150;
 801e1b0:	fba1 8102 	umull	r8, r1, r1, r2
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e1b4:	f04f 0896 	mov.w	r8, #150	; 0x96
 801e1b8:	093f      	lsrs	r7, r7, #4
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e1ba:	091b      	lsrs	r3, r3, #4
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e1bc:	fb08 ee17 	mls	lr, r8, r7, lr
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 801e1c0:	4f1d      	ldr	r7, [pc, #116]	; (801e238 <GetTrackTime+0x154>)
	fr = ((file_pos_wide) % 9000) % 150;
 801e1c2:	0909      	lsrs	r1, r1, #4
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 801e1c4:	603c      	str	r4, [r7, #0]
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e1c6:	4c1d      	ldr	r4, [pc, #116]	; (801e23c <GetTrackTime+0x158>)
	fr = ((file_pos_wide) % 9000) % 150;
 801e1c8:	fb08 2211 	mls	r2, r8, r1, r2
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e1cc:	f8a5 e000 	strh.w	lr, [r5]
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e1d0:	7023      	strb	r3, [r4, #0]
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e1d2:	4b1b      	ldr	r3, [pc, #108]	; (801e240 <GetTrackTime+0x15c>)
	if(display.loop == 1) {
 801e1d4:	4d1b      	ldr	r5, [pc, #108]	; (801e244 <GetTrackTime+0x160>)
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e1d6:	f883 c000 	strb.w	ip, [r3]
	fr = ((file_pos_wide) % 9000) % 150;
 801e1da:	4b1b      	ldr	r3, [pc, #108]	; (801e248 <GetTrackTime+0x164>)
 801e1dc:	801a      	strh	r2, [r3, #0]
	sec = ((file_pos_wide) % 9000) / 150;
 801e1de:	4b1b      	ldr	r3, [pc, #108]	; (801e24c <GetTrackTime+0x168>)
	min = (file_pos_wide) / 9000;
 801e1e0:	4a1b      	ldr	r2, [pc, #108]	; (801e250 <GetTrackTime+0x16c>)
	sec = ((file_pos_wide) % 9000) / 150;
 801e1e2:	7019      	strb	r1, [r3, #0]
	if(display.loop == 1) {
 801e1e4:	7c2b      	ldrb	r3, [r5, #16]
	min = (file_pos_wide) / 9000;
 801e1e6:	7016      	strb	r6, [r2, #0]
	if(display.loop == 1) {
 801e1e8:	2b01      	cmp	r3, #1
 801e1ea:	d003      	beq.n	801e1f4 <GetTrackTime+0x110>
}
 801e1ec:	ecbd 8b02 	vpop	{d8}
 801e1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(trak.state == PLAYING) {
 801e1f4:	4b17      	ldr	r3, [pc, #92]	; (801e254 <GetTrackTime+0x170>)
 801e1f6:	781b      	ldrb	r3, [r3, #0]
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d1f7      	bne.n	801e1ec <GetTrackTime+0x108>
			if(file_pos_wide >= display.loopend) {
 801e1fc:	68eb      	ldr	r3, [r5, #12]
 801e1fe:	4298      	cmp	r0, r3
 801e200:	d3f4      	bcc.n	801e1ec <GetTrackTime+0x108>
				GoToPosition(display.loopstart);
 801e202:	68a8      	ldr	r0, [r5, #8]
 801e204:	f7ff fec0 	bl	801df88 <GoToPosition>
}
 801e208:	ecbd 8b02 	vpop	{d8}
 801e20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				BSP_AUDIO_OUT_Resume();
 801e210:	f7fd bdfe 	b.w	801be10 <BSP_AUDIO_OUT_Resume>
 801e214:	200151d8 	.word	0x200151d8
 801e218:	20001b58 	.word	0x20001b58
 801e21c:	20017208 	.word	0x20017208
 801e220:	20019578 	.word	0x20019578
 801e224:	2000f786 	.word	0x2000f786
 801e228:	3fe00000 	.word	0x3fe00000
 801e22c:	2000e9a4 	.word	0x2000e9a4
 801e230:	e90452d5 	.word	0xe90452d5
 801e234:	1b4e81b5 	.word	0x1b4e81b5
 801e238:	2000e9a0 	.word	0x2000e9a0
 801e23c:	2000f789 	.word	0x2000f789
 801e240:	2000f788 	.word	0x2000f788
 801e244:	20000988 	.word	0x20000988
 801e248:	2000edf0 	.word	0x2000edf0
 801e24c:	2000f78a 	.word	0x2000f78a
 801e250:	2000ef88 	.word	0x2000ef88
 801e254:	2000f794 	.word	0x2000f794

0801e258 <PlayWavFile>:
void PlayWavFile() {
 801e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	wavtagsize = 0;
 801e25c:	2400      	movs	r4, #0
	BufferCtl.filetype = 0;
 801e25e:	4fb0      	ldr	r7, [pc, #704]	; (801e520 <PlayWavFile+0x2c8>)
void PlayWavFile() {
 801e260:	b085      	sub	sp, #20
	res = f_read(&MyFile, waveformat, sizeof(wavfile), (void*)&bytesread);
 801e262:	4db0      	ldr	r5, [pc, #704]	; (801e524 <PlayWavFile+0x2cc>)
	wavtagsize = 0;
 801e264:	4bb0      	ldr	r3, [pc, #704]	; (801e528 <PlayWavFile+0x2d0>)
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 801e266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801e26a:	4621      	mov	r1, r4
 801e26c:	f5a7 5080 	sub.w	r0, r7, #4096	; 0x1000
	bOutOfData = 0;
 801e270:	4eae      	ldr	r6, [pc, #696]	; (801e52c <PlayWavFile+0x2d4>)
	wavtagsize = 0;
 801e272:	601c      	str	r4, [r3, #0]
	BufferCtl.filetype = 0;
 801e274:	723c      	strb	r4, [r7, #8]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 801e276:	f000 ff6d 	bl	801f154 <memset>
	res = f_read(&MyFile, waveformat, sizeof(wavfile), (void*)&bytesread);
 801e27a:	ab03      	add	r3, sp, #12
 801e27c:	222c      	movs	r2, #44	; 0x2c
 801e27e:	4629      	mov	r1, r5
 801e280:	48ab      	ldr	r0, [pc, #684]	; (801e530 <PlayWavFile+0x2d8>)
	uint16_t bytesread = 0;
 801e282:	f8ad 400a 	strh.w	r4, [sp, #10]
	bOutOfData = 0;
 801e286:	6034      	str	r4, [r6, #0]
	res = f_read(&MyFile, waveformat, sizeof(wavfile), (void*)&bytesread);
 801e288:	f7ed f8e8 	bl	800b45c <f_read>
	wavtagsize = wavfile.FileSize - wavfile.SubChunk2Size;
 801e28c:	686b      	ldr	r3, [r5, #4]
 801e28e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801e290:	49a5      	ldr	r1, [pc, #660]	; (801e528 <PlayWavFile+0x2d0>)
 801e292:	1a9a      	subs	r2, r3, r2
	if(wavfile.SampleRate > 0) trak.bitrate = wavfile.SampleRate;
 801e294:	69ab      	ldr	r3, [r5, #24]
	wavtagsize = wavfile.FileSize - wavfile.SubChunk2Size;
 801e296:	600a      	str	r2, [r1, #0]
	if(wavfile.SampleRate > 0) trak.bitrate = wavfile.SampleRate;
 801e298:	2b00      	cmp	r3, #0
 801e29a:	f000 80b5 	beq.w	801e408 <PlayWavFile+0x1b0>
 801e29e:	b29a      	uxth	r2, r3
	BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)*(1 + trak.percent), NULL);
 801e2a0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 801e2a4:	ee07 3a90 	vmov	s15, r3
 801e2a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e2ac:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801e57c <PlayWavFile+0x324>
 801e2b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e2b4:	489f      	ldr	r0, [pc, #636]	; (801e534 <PlayWavFile+0x2dc>)
 801e2b6:	edd8 7a01 	vldr	s15, [r8, #4]
 801e2ba:	f8a8 2008 	strh.w	r2, [r8, #8]
 801e2be:	2200      	movs	r2, #0
 801e2c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
	while(f_read(&MyFile, &BufferCtl.buff[0], 2048, (void *)&bytesread) != FR_OK);
 801e2c4:	4d9c      	ldr	r5, [pc, #624]	; (801e538 <PlayWavFile+0x2e0>)
 801e2c6:	4c9a      	ldr	r4, [pc, #616]	; (801e530 <PlayWavFile+0x2d8>)
	BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)*(1 + trak.percent), NULL);
 801e2c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e2cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e2d0:	ee17 1a90 	vmov	r1, s15
 801e2d4:	f7fd fe64 	bl	801bfa0 <BSP_AUDIO_OUT_ClockConfig>
	while(f_read(&MyFile, &BufferCtl.buff[0], 2048, (void *)&bytesread) != FR_OK);
 801e2d8:	f10d 030a 	add.w	r3, sp, #10
 801e2dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e2e0:	4629      	mov	r1, r5
 801e2e2:	4620      	mov	r0, r4
 801e2e4:	f7ed f8ba 	bl	800b45c <f_read>
 801e2e8:	2800      	cmp	r0, #0
 801e2ea:	d1f5      	bne.n	801e2d8 <PlayWavFile+0x80>
	if(bytesread != 0) {
 801e2ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	f040 8102 	bne.w	801e4fa <PlayWavFile+0x2a2>
	if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801e2f6:	4d91      	ldr	r5, [pc, #580]	; (801e53c <PlayWavFile+0x2e4>)
 801e2f8:	f895 33cc 	ldrb.w	r3, [r5, #972]	; 0x3cc
 801e2fc:	2b02      	cmp	r3, #2
 801e2fe:	f000 80ab 	beq.w	801e458 <PlayWavFile+0x200>
	while((!bOutOfData) && (file_pos_wide < rekordbox.spectrum_size)) {
 801e302:	6833      	ldr	r3, [r6, #0]
 801e304:	2b00      	cmp	r3, #0
 801e306:	f040 8105 	bne.w	801e514 <PlayWavFile+0x2bc>
 801e30a:	f8df 9244 	ldr.w	r9, [pc, #580]	; 801e550 <PlayWavFile+0x2f8>
 801e30e:	4d8c      	ldr	r5, [pc, #560]	; (801e540 <PlayWavFile+0x2e8>)
 801e310:	4f8c      	ldr	r7, [pc, #560]	; (801e544 <PlayWavFile+0x2ec>)
					HAL_TIM_Base_Stop_IT(&htim7);
 801e312:	46ca      	mov	sl, r9
 801e314:	4c8c      	ldr	r4, [pc, #560]	; (801e548 <PlayWavFile+0x2f0>)
 801e316:	f8df 8268 	ldr.w	r8, [pc, #616]	; 801e580 <PlayWavFile+0x328>
			if((rmin == 0) && (rsec < 30) && (rsec > 10)) {
 801e31a:	f8df b24c 	ldr.w	fp, [pc, #588]	; 801e568 <PlayWavFile+0x310>
 801e31e:	e011      	b.n	801e344 <PlayWavFile+0xec>
 801e320:	4a8a      	ldr	r2, [pc, #552]	; (801e54c <PlayWavFile+0x2f4>)
 801e322:	f992 c000 	ldrsb.w	ip, [r2]
 801e326:	f1ac 000b 	sub.w	r0, ip, #11
 801e32a:	b2c0      	uxtb	r0, r0
 801e32c:	2812      	cmp	r0, #18
 801e32e:	d943      	bls.n	801e3b8 <PlayWavFile+0x160>
			else if((rmin == 0) && (rsec <= 10)) {
 801e330:	f1bc 0f0a 	cmp.w	ip, #10
 801e334:	dc0f      	bgt.n	801e356 <PlayWavFile+0xfe>
				if(tim7_flag == 0) {
 801e336:	7820      	ldrb	r0, [r4, #0]
 801e338:	2800      	cmp	r0, #0
 801e33a:	d058      	beq.n	801e3ee <PlayWavFile+0x196>
				if(tim7_flag == 1) {
 801e33c:	2801      	cmp	r0, #1
 801e33e:	d068      	beq.n	801e412 <PlayWavFile+0x1ba>
	while((!bOutOfData) && (file_pos_wide < rekordbox.spectrum_size)) {
 801e340:	6833      	ldr	r3, [r6, #0]
 801e342:	b9fb      	cbnz	r3, 801e384 <PlayWavFile+0x12c>
 801e344:	f8d5 0a8c 	ldr.w	r0, [r5, #2700]	; 0xa8c
 801e348:	683b      	ldr	r3, [r7, #0]
 801e34a:	4298      	cmp	r0, r3
 801e34c:	d91a      	bls.n	801e384 <PlayWavFile+0x12c>
			if((rmin == 0) && (rsec < 30) && (rsec > 10)) {
 801e34e:	f99b 3000 	ldrsb.w	r3, [fp]
 801e352:	2b00      	cmp	r3, #0
 801e354:	d0e4      	beq.n	801e320 <PlayWavFile+0xc8>
				if(tim7_flag > 0) {
 801e356:	7823      	ldrb	r3, [r4, #0]
 801e358:	2b00      	cmp	r3, #0
 801e35a:	d0f1      	beq.n	801e340 <PlayWavFile+0xe8>
					HAL_TIM_Base_Stop_IT(&htim7);
 801e35c:	4650      	mov	r0, sl
 801e35e:	f7e8 f90f 	bl	8006580 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e362:	f8d9 3000 	ldr.w	r3, [r9]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 801e366:	2000      	movs	r0, #0
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e368:	f06f 0201 	mvn.w	r2, #1
 801e36c:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 801e36e:	6258      	str	r0, [r3, #36]	; 0x24
					if(display.timemode == 0) {
 801e370:	f898 3000 	ldrb.w	r3, [r8]
					tim7_flag = 0;
 801e374:	7020      	strb	r0, [r4, #0]
					if(display.timemode == 0) {
 801e376:	b103      	cbz	r3, 801e37a <PlayWavFile+0x122>
						display.trackbarmode = 1;
 801e378:	2301      	movs	r3, #1
 801e37a:	f888 3004 	strb.w	r3, [r8, #4]
	while((!bOutOfData) && (file_pos_wide < rekordbox.spectrum_size)) {
 801e37e:	6833      	ldr	r3, [r6, #0]
 801e380:	2b00      	cmp	r3, #0
 801e382:	d0df      	beq.n	801e344 <PlayWavFile+0xec>
	BSP_AUDIO_OUT_SetVolume(0);
 801e384:	2000      	movs	r0, #0
	wavtagsize = 0;
 801e386:	2500      	movs	r5, #0
	BSP_AUDIO_OUT_SetVolume(0);
 801e388:	f7fd fd66 	bl	801be58 <BSP_AUDIO_OUT_SetVolume>
	wavtagsize = 0;
 801e38c:	4b66      	ldr	r3, [pc, #408]	; (801e528 <PlayWavFile+0x2d0>)
	HAL_TIM_Base_Stop_IT(&htim7);
 801e38e:	4870      	ldr	r0, [pc, #448]	; (801e550 <PlayWavFile+0x2f8>)
	wavtagsize = 0;
 801e390:	601d      	str	r5, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim7);
 801e392:	f7e8 f8f5 	bl	8006580 <HAL_TIM_Base_Stop_IT>
	if(display.timemode == 0) display.trackbarmode = 0;
 801e396:	f898 3000 	ldrb.w	r3, [r8]
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e39a:	f06f 0101 	mvn.w	r1, #1
 801e39e:	f8d9 2000 	ldr.w	r2, [r9]
	if(display.timemode == 0) display.trackbarmode = 0;
 801e3a2:	1b5b      	subs	r3, r3, r5
	tim7_flag = 0;
 801e3a4:	7025      	strb	r5, [r4, #0]
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e3a6:	6111      	str	r1, [r2, #16]
	if(display.timemode == 0) display.trackbarmode = 0;
 801e3a8:	bf18      	it	ne
 801e3aa:	2301      	movne	r3, #1
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 801e3ac:	6255      	str	r5, [r2, #36]	; 0x24
	if(display.timemode == 0) display.trackbarmode = 0;
 801e3ae:	f888 3004 	strb.w	r3, [r8, #4]
}
 801e3b2:	b005      	add	sp, #20
 801e3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(tim7_flag == 0) {
 801e3b8:	7820      	ldrb	r0, [r4, #0]
 801e3ba:	2800      	cmp	r0, #0
 801e3bc:	d03f      	beq.n	801e43e <PlayWavFile+0x1e6>
				if(tim7_flag == 2) {
 801e3be:	2802      	cmp	r0, #2
 801e3c0:	d1be      	bne.n	801e340 <PlayWavFile+0xe8>
					HAL_TIM_Base_Stop_IT(&htim7);
 801e3c2:	4650      	mov	r0, sl
 801e3c4:	9301      	str	r3, [sp, #4]
 801e3c6:	f7e8 f8db 	bl	8006580 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e3ca:	f8d9 0000 	ldr.w	r0, [r9]
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 801e3ce:	f241 3287 	movw	r2, #4999	; 0x1387
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 801e3d2:	9b01      	ldr	r3, [sp, #4]
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e3d4:	f06f 0101 	mvn.w	r1, #1
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 801e3d8:	f8c9 200c 	str.w	r2, [r9, #12]
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e3dc:	6101      	str	r1, [r0, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 801e3de:	6243      	str	r3, [r0, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 801e3e0:	62c2      	str	r2, [r0, #44]	; 0x2c
					HAL_TIM_Base_Start_IT(&htim7);
 801e3e2:	4650      	mov	r0, sl
 801e3e4:	f7e8 f84c 	bl	8006480 <HAL_TIM_Base_Start_IT>
					tim7_flag = 1;
 801e3e8:	2301      	movs	r3, #1
 801e3ea:	7023      	strb	r3, [r4, #0]
 801e3ec:	e7a8      	b.n	801e340 <PlayWavFile+0xe8>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 801e3ee:	f8d9 3000 	ldr.w	r3, [r9]
 801e3f2:	f240 70cf 	movw	r0, #1999	; 0x7cf
 801e3f6:	62d8      	str	r0, [r3, #44]	; 0x2c
 801e3f8:	f8c9 000c 	str.w	r0, [r9, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 801e3fc:	4650      	mov	r0, sl
 801e3fe:	f7e8 f83f 	bl	8006480 <HAL_TIM_Base_Start_IT>
					tim7_flag =  2;
 801e402:	2302      	movs	r3, #2
 801e404:	7023      	strb	r3, [r4, #0]
				if(tim7_flag == 1) {
 801e406:	e79b      	b.n	801e340 <PlayWavFile+0xe8>
 801e408:	f64a 4244 	movw	r2, #44100	; 0xac44
 801e40c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 801e554 <PlayWavFile+0x2fc>
 801e410:	e74c      	b.n	801e2ac <PlayWavFile+0x54>
					HAL_TIM_Base_Stop_IT(&htim7);
 801e412:	4650      	mov	r0, sl
 801e414:	9301      	str	r3, [sp, #4]
 801e416:	f7e8 f8b3 	bl	8006580 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e41a:	f8d9 0000 	ldr.w	r0, [r9]
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 801e41e:	f240 72cf 	movw	r2, #1999	; 0x7cf
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 801e422:	9b01      	ldr	r3, [sp, #4]
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e424:	f06f 0101 	mvn.w	r1, #1
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 801e428:	f8c9 200c 	str.w	r2, [r9, #12]
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801e42c:	6101      	str	r1, [r0, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 801e42e:	6243      	str	r3, [r0, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 801e430:	62c2      	str	r2, [r0, #44]	; 0x2c
					HAL_TIM_Base_Start_IT(&htim7);
 801e432:	4650      	mov	r0, sl
 801e434:	f7e8 f824 	bl	8006480 <HAL_TIM_Base_Start_IT>
					tim7_flag = 2;
 801e438:	2302      	movs	r3, #2
 801e43a:	7023      	strb	r3, [r4, #0]
 801e43c:	e780      	b.n	801e340 <PlayWavFile+0xe8>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 801e43e:	f8d9 3000 	ldr.w	r3, [r9]
 801e442:	f241 3087 	movw	r0, #4999	; 0x1387
 801e446:	62d8      	str	r0, [r3, #44]	; 0x2c
 801e448:	f8c9 000c 	str.w	r0, [r9, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 801e44c:	4650      	mov	r0, sl
 801e44e:	f7e8 f817 	bl	8006480 <HAL_TIM_Base_Start_IT>
					tim7_flag =  1;
 801e452:	2301      	movs	r3, #1
 801e454:	7023      	strb	r3, [r4, #0]
				if(tim7_flag == 2) {
 801e456:	e773      	b.n	801e340 <PlayWavFile+0xe8>
	if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801e458:	f898 3000 	ldrb.w	r3, [r8]
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	f47f af50 	bne.w	801e302 <PlayWavFile+0xaa>
		BSP_AUDIO_OUT_Pause();
 801e462:	f7fd fccd 	bl	801be00 <BSP_AUDIO_OUT_Pause>
		trak.state = STOPPED;
 801e466:	2301      	movs	r3, #1
		HAL_TIM_Base_Start_IT(&htim8);
 801e468:	483b      	ldr	r0, [pc, #236]	; (801e558 <PlayWavFile+0x300>)
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e46a:	4f36      	ldr	r7, [pc, #216]	; (801e544 <PlayWavFile+0x2ec>)
		trak.state = STOPPED;
 801e46c:	f888 3000 	strb.w	r3, [r8]
		HAL_TIM_Base_Start_IT(&htim8);
 801e470:	f7e8 f806 	bl	8006480 <HAL_TIM_Base_Start_IT>
		GoToPosition(rekordbox.cue_start_position[0]);
 801e474:	6ca8      	ldr	r0, [r5, #72]	; 0x48
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e476:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
		GoToPosition(rekordbox.cue_start_position[0]);
 801e47a:	f7ff fd85 	bl	801df88 <GoToPosition>
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e47e:	6839      	ldr	r1, [r7, #0]
 801e480:	f8d5 4a8c 	ldr.w	r4, [r5, #2700]	; 0xa8c
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e484:	f8d5 3a8c 	ldr.w	r3, [r5, #2700]	; 0xa8c
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e488:	f8d5 0a8c 	ldr.w	r0, [r5, #2700]	; 0xa8c
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e48c:	1a64      	subs	r4, r4, r1
 801e48e:	4a33      	ldr	r2, [pc, #204]	; (801e55c <PlayWavFile+0x304>)
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e490:	1a5b      	subs	r3, r3, r1
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e492:	1a40      	subs	r0, r0, r1
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e494:	fba2 7c04 	umull	r7, ip, r2, r4
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e498:	fba2 5000 	umull	r5, r0, r2, r0
	fr = ((file_pos_wide) % 9000) % 150;
 801e49c:	fba2 7501 	umull	r7, r5, r2, r1
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e4a0:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e4a4:	fba2 7203 	umull	r7, r2, r2, r3
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e4a8:	f242 3728 	movw	r7, #9000	; 0x2328
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e4ac:	0b40      	lsrs	r0, r0, #13
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e4ae:	0b52      	lsrs	r2, r2, #13
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e4b0:	fb07 441c 	mls	r4, r7, ip, r4
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e4b4:	fb07 3212 	mls	r2, r7, r2, r3
	fr = ((file_pos_wide) % 9000) % 150;
 801e4b8:	0b6b      	lsrs	r3, r5, #13
	min = (file_pos_wide) / 9000;
 801e4ba:	0b6d      	lsrs	r5, r5, #13
	fr = ((file_pos_wide) % 9000) % 150;
 801e4bc:	fb07 1313 	mls	r3, r7, r3, r1
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e4c0:	4927      	ldr	r1, [pc, #156]	; (801e560 <PlayWavFile+0x308>)
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e4c2:	fba1 7202 	umull	r7, r2, r1, r2
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e4c6:	fba1 c704 	umull	ip, r7, r1, r4
	fr = ((file_pos_wide) % 9000) % 150;
 801e4ca:	fba1 c103 	umull	ip, r1, r1, r3
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e4ce:	f04f 0c96 	mov.w	ip, #150	; 0x96
 801e4d2:	093f      	lsrs	r7, r7, #4
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e4d4:	0912      	lsrs	r2, r2, #4
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e4d6:	fb0c 4417 	mls	r4, ip, r7, r4
 801e4da:	4f22      	ldr	r7, [pc, #136]	; (801e564 <PlayWavFile+0x30c>)
	fr = ((file_pos_wide) % 9000) % 150;
 801e4dc:	0909      	lsrs	r1, r1, #4
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 801e4de:	803c      	strh	r4, [r7, #0]
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e4e0:	4c1a      	ldr	r4, [pc, #104]	; (801e54c <PlayWavFile+0x2f4>)
	fr = ((file_pos_wide) % 9000) % 150;
 801e4e2:	fb0c 3311 	mls	r3, ip, r1, r3
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 801e4e6:	7022      	strb	r2, [r4, #0]
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 801e4e8:	4a1f      	ldr	r2, [pc, #124]	; (801e568 <PlayWavFile+0x310>)
 801e4ea:	7010      	strb	r0, [r2, #0]
	fr = ((file_pos_wide) % 9000) % 150;
 801e4ec:	4a1f      	ldr	r2, [pc, #124]	; (801e56c <PlayWavFile+0x314>)
 801e4ee:	8013      	strh	r3, [r2, #0]
	sec = ((file_pos_wide) % 9000) / 150;
 801e4f0:	4b1f      	ldr	r3, [pc, #124]	; (801e570 <PlayWavFile+0x318>)
 801e4f2:	7019      	strb	r1, [r3, #0]
	min = (file_pos_wide) / 9000;
 801e4f4:	4b1f      	ldr	r3, [pc, #124]	; (801e574 <PlayWavFile+0x31c>)
 801e4f6:	701d      	strb	r5, [r3, #0]
}
 801e4f8:	e703      	b.n	801e302 <PlayWavFile+0xaa>
		BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 801e4fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801e4fe:	480e      	ldr	r0, [pc, #56]	; (801e538 <PlayWavFile+0x2e0>)
 801e500:	f7fd fc5c 	bl	801bdbc <BSP_AUDIO_OUT_Play>
		BufferCtl.fptr = bytesread;
 801e504:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e508:	607b      	str	r3, [r7, #4]
		BSP_AUDIO_OUT_SetVolume(volume);
 801e50a:	4b1b      	ldr	r3, [pc, #108]	; (801e578 <PlayWavFile+0x320>)
 801e50c:	7818      	ldrb	r0, [r3, #0]
 801e50e:	f7fd fca3 	bl	801be58 <BSP_AUDIO_OUT_SetVolume>
 801e512:	e6f0      	b.n	801e2f6 <PlayWavFile+0x9e>
 801e514:	4c0c      	ldr	r4, [pc, #48]	; (801e548 <PlayWavFile+0x2f0>)
 801e516:	f8df 9038 	ldr.w	r9, [pc, #56]	; 801e550 <PlayWavFile+0x2f8>
 801e51a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801e580 <PlayWavFile+0x328>
 801e51e:	e731      	b.n	801e384 <PlayWavFile+0x12c>
 801e520:	20001b48 	.word	0x20001b48
 801e524:	2001954c 	.word	0x2001954c
 801e528:	20019578 	.word	0x20019578
 801e52c:	2000e948 	.word	0x2000e948
 801e530:	20001b58 	.word	0x20001b58
 801e534:	2001864c 	.word	0x2001864c
 801e538:	20000b48 	.word	0x20000b48
 801e53c:	20018208 	.word	0x20018208
 801e540:	20017208 	.word	0x20017208
 801e544:	2000e9a4 	.word	0x2000e9a4
 801e548:	2000f790 	.word	0x2000f790
 801e54c:	2000f789 	.word	0x2000f789
 801e550:	2001895c 	.word	0x2001895c
 801e554:	46ac4400 	.word	0x46ac4400
 801e558:	2001899c 	.word	0x2001899c
 801e55c:	e90452d5 	.word	0xe90452d5
 801e560:	1b4e81b5 	.word	0x1b4e81b5
 801e564:	2000f786 	.word	0x2000f786
 801e568:	2000f788 	.word	0x2000f788
 801e56c:	2000edf0 	.word	0x2000edf0
 801e570:	2000f78a 	.word	0x2000f78a
 801e574:	2000ef88 	.word	0x2000ef88
 801e578:	2000005c 	.word	0x2000005c
 801e57c:	2000f794 	.word	0x2000f794
 801e580:	20000988 	.word	0x20000988

0801e584 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 801e584:	2901      	cmp	r1, #1
{
 801e586:	b500      	push	{lr}
 801e588:	b083      	sub	sp, #12
  switch (Output) 
 801e58a:	d024      	beq.n	801e5d6 <wm8994_SetOutputMode+0x52>
 801e58c:	2903      	cmp	r1, #3
 801e58e:	d045      	beq.n	801e61c <wm8994_SetOutputMode+0x98>
    break;
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 801e590:	b2c0      	uxtb	r0, r0
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 801e592:	f240 3203 	movw	r2, #771	; 0x303
 801e596:	2105      	movs	r1, #5
 801e598:	9001      	str	r0, [sp, #4]
 801e59a:	f7fd fd45 	bl	801c028 <AUDIO_IO_Write>
 801e59e:	9801      	ldr	r0, [sp, #4]
 801e5a0:	2201      	movs	r2, #1
 801e5a2:	f240 6101 	movw	r1, #1537	; 0x601
 801e5a6:	f7fd fd3f 	bl	801c028 <AUDIO_IO_Write>
 801e5aa:	9801      	ldr	r0, [sp, #4]
 801e5ac:	2201      	movs	r2, #1
 801e5ae:	f240 6102 	movw	r1, #1538	; 0x602
 801e5b2:	f7fd fd39 	bl	801c028 <AUDIO_IO_Write>
 801e5b6:	9801      	ldr	r0, [sp, #4]
 801e5b8:	2200      	movs	r2, #0
 801e5ba:	f240 6104 	movw	r1, #1540	; 0x604
 801e5be:	f7fd fd33 	bl	801c028 <AUDIO_IO_Write>
 801e5c2:	9801      	ldr	r0, [sp, #4]
 801e5c4:	2200      	movs	r2, #0
 801e5c6:	f240 6105 	movw	r1, #1541	; 0x605
 801e5ca:	f7fd fd2d 	bl	801c028 <AUDIO_IO_Write>
}
 801e5ce:	2000      	movs	r0, #0
 801e5d0:	b003      	add	sp, #12
 801e5d2:	f85d fb04 	ldr.w	pc, [sp], #4
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 801e5d6:	b2c0      	uxtb	r0, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 801e5d8:	f640 420c 	movw	r2, #3084	; 0xc0c
 801e5dc:	2105      	movs	r1, #5
 801e5de:	9001      	str	r0, [sp, #4]
 801e5e0:	f7fd fd22 	bl	801c028 <AUDIO_IO_Write>
 801e5e4:	9801      	ldr	r0, [sp, #4]
 801e5e6:	2200      	movs	r2, #0
 801e5e8:	f240 6101 	movw	r1, #1537	; 0x601
 801e5ec:	f7fd fd1c 	bl	801c028 <AUDIO_IO_Write>
 801e5f0:	9801      	ldr	r0, [sp, #4]
 801e5f2:	2200      	movs	r2, #0
 801e5f4:	f240 6102 	movw	r1, #1538	; 0x602
 801e5f8:	f7fd fd16 	bl	801c028 <AUDIO_IO_Write>
 801e5fc:	9801      	ldr	r0, [sp, #4]
 801e5fe:	2202      	movs	r2, #2
 801e600:	f240 6104 	movw	r1, #1540	; 0x604
 801e604:	f7fd fd10 	bl	801c028 <AUDIO_IO_Write>
 801e608:	9801      	ldr	r0, [sp, #4]
 801e60a:	2202      	movs	r2, #2
 801e60c:	f240 6105 	movw	r1, #1541	; 0x605
 801e610:	f7fd fd0a 	bl	801c028 <AUDIO_IO_Write>
}
 801e614:	2000      	movs	r0, #0
 801e616:	b003      	add	sp, #12
 801e618:	f85d fb04 	ldr.w	pc, [sp], #4
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 801e61c:	b2c0      	uxtb	r0, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 801e61e:	f640 720f 	movw	r2, #3855	; 0xf0f
 801e622:	2105      	movs	r1, #5
 801e624:	9001      	str	r0, [sp, #4]
 801e626:	f7fd fcff 	bl	801c028 <AUDIO_IO_Write>
 801e62a:	2201      	movs	r2, #1
 801e62c:	f240 6101 	movw	r1, #1537	; 0x601
 801e630:	9801      	ldr	r0, [sp, #4]
 801e632:	f7fd fcf9 	bl	801c028 <AUDIO_IO_Write>
 801e636:	2201      	movs	r2, #1
 801e638:	f240 6102 	movw	r1, #1538	; 0x602
 801e63c:	9801      	ldr	r0, [sp, #4]
 801e63e:	f7fd fcf3 	bl	801c028 <AUDIO_IO_Write>
 801e642:	2202      	movs	r2, #2
 801e644:	f240 6104 	movw	r1, #1540	; 0x604
 801e648:	9801      	ldr	r0, [sp, #4]
 801e64a:	e7db      	b.n	801e604 <wm8994_SetOutputMode+0x80>

0801e64c <wm8994_SetFrequency>:
{
 801e64c:	b508      	push	{r3, lr}
  switch (AudioFreq)
 801e64e:	f245 6322 	movw	r3, #22050	; 0x5622
 801e652:	4299      	cmp	r1, r3
 801e654:	d039      	beq.n	801e6ca <wm8994_SetFrequency+0x7e>
 801e656:	d80e      	bhi.n	801e676 <wm8994_SetFrequency+0x2a>
 801e658:	f642 3311 	movw	r3, #11025	; 0x2b11
 801e65c:	4299      	cmp	r1, r3
 801e65e:	d03c      	beq.n	801e6da <wm8994_SetFrequency+0x8e>
 801e660:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 801e664:	d116      	bne.n	801e694 <wm8994_SetFrequency+0x48>
 AUDIO_IO_Write(Addr, Reg, Value);
 801e666:	2233      	movs	r2, #51	; 0x33
 801e668:	f44f 7104 	mov.w	r1, #528	; 0x210
 801e66c:	b2c0      	uxtb	r0, r0
 801e66e:	f7fd fcdb 	bl	801c028 <AUDIO_IO_Write>
}
 801e672:	2000      	movs	r0, #0
 801e674:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 801e676:	f64a 4344 	movw	r3, #44100	; 0xac44
 801e67a:	4299      	cmp	r1, r3
 801e67c:	d01d      	beq.n	801e6ba <wm8994_SetFrequency+0x6e>
 801e67e:	4b1b      	ldr	r3, [pc, #108]	; (801e6ec <wm8994_SetFrequency+0xa0>)
 801e680:	4299      	cmp	r1, r3
 801e682:	d112      	bne.n	801e6aa <wm8994_SetFrequency+0x5e>
 AUDIO_IO_Write(Addr, Reg, Value);
 801e684:	22a3      	movs	r2, #163	; 0xa3
 801e686:	f44f 7104 	mov.w	r1, #528	; 0x210
 801e68a:	b2c0      	uxtb	r0, r0
 801e68c:	f7fd fccc 	bl	801c028 <AUDIO_IO_Write>
}
 801e690:	2000      	movs	r0, #0
 801e692:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 801e694:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 801e698:	d107      	bne.n	801e6aa <wm8994_SetFrequency+0x5e>
 AUDIO_IO_Write(Addr, Reg, Value);
 801e69a:	2203      	movs	r2, #3
 801e69c:	f44f 7104 	mov.w	r1, #528	; 0x210
 801e6a0:	b2c0      	uxtb	r0, r0
 801e6a2:	f7fd fcc1 	bl	801c028 <AUDIO_IO_Write>
}
 801e6a6:	2000      	movs	r0, #0
 801e6a8:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 801e6aa:	2283      	movs	r2, #131	; 0x83
 801e6ac:	f44f 7104 	mov.w	r1, #528	; 0x210
 801e6b0:	b2c0      	uxtb	r0, r0
 801e6b2:	f7fd fcb9 	bl	801c028 <AUDIO_IO_Write>
}
 801e6b6:	2000      	movs	r0, #0
 801e6b8:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 801e6ba:	2273      	movs	r2, #115	; 0x73
 801e6bc:	f44f 7104 	mov.w	r1, #528	; 0x210
 801e6c0:	b2c0      	uxtb	r0, r0
 801e6c2:	f7fd fcb1 	bl	801c028 <AUDIO_IO_Write>
}
 801e6c6:	2000      	movs	r0, #0
 801e6c8:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 801e6ca:	2243      	movs	r2, #67	; 0x43
 801e6cc:	f44f 7104 	mov.w	r1, #528	; 0x210
 801e6d0:	b2c0      	uxtb	r0, r0
 801e6d2:	f7fd fca9 	bl	801c028 <AUDIO_IO_Write>
}
 801e6d6:	2000      	movs	r0, #0
 801e6d8:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 801e6da:	2213      	movs	r2, #19
 801e6dc:	f44f 7104 	mov.w	r1, #528	; 0x210
 801e6e0:	b2c0      	uxtb	r0, r0
 801e6e2:	f7fd fca1 	bl	801c028 <AUDIO_IO_Write>
}
 801e6e6:	2000      	movs	r0, #0
 801e6e8:	bd08      	pop	{r3, pc}
 801e6ea:	bf00      	nop
 801e6ec:	00017700 	.word	0x00017700

0801e6f0 <wm8994_Reset>:
 AUDIO_IO_Write(Addr, Reg, Value);
 801e6f0:	2200      	movs	r2, #0
 801e6f2:	b2c0      	uxtb	r0, r0
 801e6f4:	4611      	mov	r1, r2
{
 801e6f6:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 801e6f8:	f7fd fc96 	bl	801c028 <AUDIO_IO_Write>
  outputEnabled = 0;
 801e6fc:	2000      	movs	r0, #0
 801e6fe:	4a02      	ldr	r2, [pc, #8]	; (801e708 <wm8994_Reset+0x18>)
  inputEnabled=0;
 801e700:	4b02      	ldr	r3, [pc, #8]	; (801e70c <wm8994_Reset+0x1c>)
  outputEnabled = 0;
 801e702:	6010      	str	r0, [r2, #0]
  inputEnabled=0;
 801e704:	6018      	str	r0, [r3, #0]
}
 801e706:	bd08      	pop	{r3, pc}
 801e708:	20019580 	.word	0x20019580
 801e70c:	2001957c 	.word	0x2001957c

0801e710 <wm8994_DeInit>:
  /* Deinitialize Audio Codec interface */  AUDIO_IO_DeInit();
 801e710:	f7fd bc88 	b.w	801c024 <AUDIO_IO_DeInit>

0801e714 <wm8994_ReadID>:
{
 801e714:	b510      	push	{r4, lr}
 801e716:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 801e718:	f7fd fc7e 	bl	801c018 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 801e71c:	2100      	movs	r1, #0
 801e71e:	b2e0      	uxtb	r0, r4
 801e720:	f7fd fc9a 	bl	801c058 <AUDIO_IO_Read>
}
 801e724:	bd10      	pop	{r4, pc}
 801e726:	bf00      	nop

0801e728 <wm8994_Pause>:
  if (outputEnabled != 0)
 801e728:	4b0e      	ldr	r3, [pc, #56]	; (801e764 <wm8994_Pause+0x3c>)
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 801e72a:	b2c0      	uxtb	r0, r0
  if (outputEnabled != 0)
 801e72c:	681b      	ldr	r3, [r3, #0]
{  
 801e72e:	b500      	push	{lr}
 801e730:	b083      	sub	sp, #12
  if (outputEnabled != 0)
 801e732:	b173      	cbz	r3, 801e752 <wm8994_Pause+0x2a>
 AUDIO_IO_Write(Addr, Reg, Value);
 801e734:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e738:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801e73c:	9001      	str	r0, [sp, #4]
 801e73e:	f7fd fc73 	bl	801c028 <AUDIO_IO_Write>
 801e742:	9801      	ldr	r0, [sp, #4]
 801e744:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e748:	f240 4122 	movw	r1, #1058	; 0x422
 801e74c:	f7fd fc6c 	bl	801c028 <AUDIO_IO_Write>
 801e750:	9801      	ldr	r0, [sp, #4]
 801e752:	2201      	movs	r2, #1
 801e754:	2102      	movs	r1, #2
 801e756:	f7fd fc67 	bl	801c028 <AUDIO_IO_Write>
}
 801e75a:	2000      	movs	r0, #0
 801e75c:	b003      	add	sp, #12
 801e75e:	f85d fb04 	ldr.w	pc, [sp], #4
 801e762:	bf00      	nop
 801e764:	20019580 	.word	0x20019580

0801e768 <wm8994_Play>:
  if (outputEnabled != 0)
 801e768:	4b0b      	ldr	r3, [pc, #44]	; (801e798 <wm8994_Play+0x30>)
 801e76a:	681b      	ldr	r3, [r3, #0]
 801e76c:	b193      	cbz	r3, 801e794 <wm8994_Play+0x2c>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 801e76e:	b2c0      	uxtb	r0, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 801e770:	2200      	movs	r2, #0
 801e772:	f44f 6184 	mov.w	r1, #1056	; 0x420
{
 801e776:	b500      	push	{lr}
 801e778:	b083      	sub	sp, #12
 AUDIO_IO_Write(Addr, Reg, Value);
 801e77a:	9001      	str	r0, [sp, #4]
 801e77c:	f7fd fc54 	bl	801c028 <AUDIO_IO_Write>
 801e780:	9801      	ldr	r0, [sp, #4]
 801e782:	2200      	movs	r2, #0
 801e784:	f240 4122 	movw	r1, #1058	; 0x422
 801e788:	f7fd fc4e 	bl	801c028 <AUDIO_IO_Write>
}
 801e78c:	2000      	movs	r0, #0
 801e78e:	b003      	add	sp, #12
 801e790:	f85d fb04 	ldr.w	pc, [sp], #4
 801e794:	2000      	movs	r0, #0
 801e796:	4770      	bx	lr
 801e798:	20019580 	.word	0x20019580

0801e79c <wm8994_Resume>:
  if (outputEnabled != 0)
 801e79c:	4b0b      	ldr	r3, [pc, #44]	; (801e7cc <wm8994_Resume+0x30>)
 801e79e:	681b      	ldr	r3, [r3, #0]
 801e7a0:	b193      	cbz	r3, 801e7c8 <wm8994_Resume+0x2c>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 801e7a2:	b2c0      	uxtb	r0, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 801e7a4:	2200      	movs	r2, #0
 801e7a6:	f44f 6184 	mov.w	r1, #1056	; 0x420
{
 801e7aa:	b500      	push	{lr}
 801e7ac:	b083      	sub	sp, #12
 AUDIO_IO_Write(Addr, Reg, Value);
 801e7ae:	9001      	str	r0, [sp, #4]
 801e7b0:	f7fd fc3a 	bl	801c028 <AUDIO_IO_Write>
 801e7b4:	9801      	ldr	r0, [sp, #4]
 801e7b6:	2200      	movs	r2, #0
 801e7b8:	f240 4122 	movw	r1, #1058	; 0x422
 801e7bc:	f7fd fc34 	bl	801c028 <AUDIO_IO_Write>
}
 801e7c0:	2000      	movs	r0, #0
 801e7c2:	b003      	add	sp, #12
 801e7c4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e7c8:	2000      	movs	r0, #0
 801e7ca:	4770      	bx	lr
 801e7cc:	20019580 	.word	0x20019580

0801e7d0 <wm8994_Stop>:
{
 801e7d0:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 801e7d2:	4e1e      	ldr	r6, [pc, #120]	; (801e84c <wm8994_Stop+0x7c>)
 801e7d4:	6833      	ldr	r3, [r6, #0]
 801e7d6:	b90b      	cbnz	r3, 801e7dc <wm8994_Stop+0xc>
}
 801e7d8:	2000      	movs	r0, #0
 801e7da:	bd70      	pop	{r4, r5, r6, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 801e7dc:	b2c4      	uxtb	r4, r0
 801e7de:	460d      	mov	r5, r1
 AUDIO_IO_Write(Addr, Reg, Value);
 801e7e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e7e4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801e7e8:	4620      	mov	r0, r4
 801e7ea:	f7fd fc1d 	bl	801c028 <AUDIO_IO_Write>
 801e7ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e7f2:	f240 4122 	movw	r1, #1058	; 0x422
 801e7f6:	4620      	mov	r0, r4
 801e7f8:	f7fd fc16 	bl	801c028 <AUDIO_IO_Write>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 801e7fc:	2d02      	cmp	r5, #2
 801e7fe:	d0eb      	beq.n	801e7d8 <wm8994_Stop+0x8>
 AUDIO_IO_Write(Addr, Reg, Value);
 801e800:	4620      	mov	r0, r4
 801e802:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e806:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801e80a:	f7fd fc0d 	bl	801c028 <AUDIO_IO_Write>
 801e80e:	4620      	mov	r0, r4
 801e810:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e814:	f240 4122 	movw	r1, #1058	; 0x422
 801e818:	f7fd fc06 	bl	801c028 <AUDIO_IO_Write>
 801e81c:	4620      	mov	r0, r4
 801e81e:	2200      	movs	r2, #0
 801e820:	212d      	movs	r1, #45	; 0x2d
 801e822:	f7fd fc01 	bl	801c028 <AUDIO_IO_Write>
 801e826:	4620      	mov	r0, r4
 801e828:	2200      	movs	r2, #0
 801e82a:	212e      	movs	r1, #46	; 0x2e
 801e82c:	f7fd fbfc 	bl	801c028 <AUDIO_IO_Write>
 801e830:	4620      	mov	r0, r4
 801e832:	2200      	movs	r2, #0
 801e834:	2105      	movs	r1, #5
 801e836:	f7fd fbf7 	bl	801c028 <AUDIO_IO_Write>
 801e83a:	2200      	movs	r2, #0
 801e83c:	4620      	mov	r0, r4
 801e83e:	4611      	mov	r1, r2
 801e840:	f7fd fbf2 	bl	801c028 <AUDIO_IO_Write>
      outputEnabled = 0;
 801e844:	2300      	movs	r3, #0
}
 801e846:	2000      	movs	r0, #0
      outputEnabled = 0;
 801e848:	6033      	str	r3, [r6, #0]
}
 801e84a:	bd70      	pop	{r4, r5, r6, pc}
 801e84c:	20019580 	.word	0x20019580

0801e850 <wm8994_SetMute>:
  if (outputEnabled != 0)
 801e850:	4b15      	ldr	r3, [pc, #84]	; (801e8a8 <wm8994_SetMute+0x58>)
 801e852:	681b      	ldr	r3, [r3, #0]
 801e854:	b1a3      	cbz	r3, 801e880 <wm8994_SetMute+0x30>
    if(Cmd == AUDIO_MUTE_ON)
 801e856:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 801e858:	b2c0      	uxtb	r0, r0
{
 801e85a:	b500      	push	{lr}
 801e85c:	b083      	sub	sp, #12
    if(Cmd == AUDIO_MUTE_ON)
 801e85e:	d011      	beq.n	801e884 <wm8994_SetMute+0x34>
 AUDIO_IO_Write(Addr, Reg, Value);
 801e860:	2200      	movs	r2, #0
 801e862:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801e866:	9001      	str	r0, [sp, #4]
 801e868:	f7fd fbde 	bl	801c028 <AUDIO_IO_Write>
 801e86c:	9801      	ldr	r0, [sp, #4]
 801e86e:	2200      	movs	r2, #0
 801e870:	f240 4122 	movw	r1, #1058	; 0x422
 801e874:	f7fd fbd8 	bl	801c028 <AUDIO_IO_Write>
}
 801e878:	2000      	movs	r0, #0
 801e87a:	b003      	add	sp, #12
 801e87c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e880:	2000      	movs	r0, #0
 801e882:	4770      	bx	lr
 AUDIO_IO_Write(Addr, Reg, Value);
 801e884:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e888:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801e88c:	9001      	str	r0, [sp, #4]
 801e88e:	f7fd fbcb 	bl	801c028 <AUDIO_IO_Write>
 801e892:	9801      	ldr	r0, [sp, #4]
 801e894:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e898:	f240 4122 	movw	r1, #1058	; 0x422
 801e89c:	f7fd fbc4 	bl	801c028 <AUDIO_IO_Write>
}
 801e8a0:	2000      	movs	r0, #0
 801e8a2:	b003      	add	sp, #12
 801e8a4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e8a8:	20019580 	.word	0x20019580

0801e8ac <wm8994_SetVolume>:
  if (outputEnabled != 0)
 801e8ac:	4b55      	ldr	r3, [pc, #340]	; (801ea04 <wm8994_SetVolume+0x158>)
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 801e8ae:	2964      	cmp	r1, #100	; 0x64
{
 801e8b0:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 801e8b2:	681b      	ldr	r3, [r3, #0]
{
 801e8b4:	b084      	sub	sp, #16
 801e8b6:	460c      	mov	r4, r1
 801e8b8:	4606      	mov	r6, r0
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 801e8ba:	d92e      	bls.n	801e91a <wm8994_SetVolume+0x6e>
  if (outputEnabled != 0)
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	d056      	beq.n	801e96e <wm8994_SetVolume+0xc2>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 801e8c0:	b2f0      	uxtb	r0, r6
 AUDIO_IO_Write(Addr, Reg, Value);
 801e8c2:	2200      	movs	r2, #0
 801e8c4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801e8c8:	9001      	str	r0, [sp, #4]
 801e8ca:	f7fd fbad 	bl	801c028 <AUDIO_IO_Write>
 801e8ce:	2200      	movs	r2, #0
 801e8d0:	f240 4122 	movw	r1, #1058	; 0x422
 801e8d4:	9801      	ldr	r0, [sp, #4]
 801e8d6:	f7fd fba7 	bl	801c028 <AUDIO_IO_Write>
 801e8da:	f240 127f 	movw	r2, #383	; 0x17f
 801e8de:	211c      	movs	r1, #28
 801e8e0:	9801      	ldr	r0, [sp, #4]
 801e8e2:	f7fd fba1 	bl	801c028 <AUDIO_IO_Write>
 801e8e6:	f240 127f 	movw	r2, #383	; 0x17f
 801e8ea:	211d      	movs	r1, #29
 801e8ec:	9801      	ldr	r0, [sp, #4]
 801e8ee:	f7fd fb9b 	bl	801c028 <AUDIO_IO_Write>
 801e8f2:	f240 127f 	movw	r2, #383	; 0x17f
 801e8f6:	2126      	movs	r1, #38	; 0x26
 801e8f8:	9801      	ldr	r0, [sp, #4]
 801e8fa:	f7fd fb95 	bl	801c028 <AUDIO_IO_Write>
 801e8fe:	f240 127f 	movw	r2, #383	; 0x17f
 801e902:	2127      	movs	r1, #39	; 0x27
 801e904:	9801      	ldr	r0, [sp, #4]
 801e906:	f7fd fb8f 	bl	801c028 <AUDIO_IO_Write>
  if (inputEnabled != 0)
 801e90a:	4b3f      	ldr	r3, [pc, #252]	; (801ea08 <wm8994_SetVolume+0x15c>)
 801e90c:	681b      	ldr	r3, [r3, #0]
 801e90e:	2b00      	cmp	r3, #0
 801e910:	d04d      	beq.n	801e9ae <wm8994_SetVolume+0x102>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 801e912:	2c63      	cmp	r4, #99	; 0x63
 801e914:	d82e      	bhi.n	801e974 <wm8994_SetVolume+0xc8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 801e916:	b2f0      	uxtb	r0, r6
 801e918:	e01e      	b.n	801e958 <wm8994_SetVolume+0xac>
  if (outputEnabled != 0)
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	d0f5      	beq.n	801e90a <wm8994_SetVolume+0x5e>
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 801e91e:	ebc1 1581 	rsb	r5, r1, r1, lsl #6
 801e922:	4a3a      	ldr	r2, [pc, #232]	; (801ea0c <wm8994_SetVolume+0x160>)
 801e924:	fba2 3505 	umull	r3, r5, r2, r5
 801e928:	096d      	lsrs	r5, r5, #5
    if(convertedvol > 0x3E)
 801e92a:	2d3f      	cmp	r5, #63	; 0x3f
 801e92c:	d0c8      	beq.n	801e8c0 <wm8994_SetVolume+0x14>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 801e92e:	b2c0      	uxtb	r0, r0
    else if (Volume == 0)
 801e930:	2900      	cmp	r1, #0
 801e932:	d13f      	bne.n	801e9b4 <wm8994_SetVolume+0x108>
 AUDIO_IO_Write(Addr, Reg, Value);
 801e934:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e938:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801e93c:	9001      	str	r0, [sp, #4]
 801e93e:	f7fd fb73 	bl	801c028 <AUDIO_IO_Write>
 801e942:	9801      	ldr	r0, [sp, #4]
 801e944:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e948:	f240 4122 	movw	r1, #1058	; 0x422
 801e94c:	f7fd fb6c 	bl	801c028 <AUDIO_IO_Write>
  if (inputEnabled != 0)
 801e950:	4b2d      	ldr	r3, [pc, #180]	; (801ea08 <wm8994_SetVolume+0x15c>)
 801e952:	9801      	ldr	r0, [sp, #4]
 801e954:	681b      	ldr	r3, [r3, #0]
 801e956:	b353      	cbz	r3, 801e9ae <wm8994_SetVolume+0x102>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 801e958:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 801e95c:	4c2b      	ldr	r4, [pc, #172]	; (801ea0c <wm8994_SetVolume+0x160>)
 801e95e:	0112      	lsls	r2, r2, #4
 801e960:	fba4 3202 	umull	r3, r2, r4, r2
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 801e964:	f3c2 124f 	ubfx	r2, r2, #5, #16
 801e968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e96c:	e005      	b.n	801e97a <wm8994_SetVolume+0xce>
  if (inputEnabled != 0)
 801e96e:	4b26      	ldr	r3, [pc, #152]	; (801ea08 <wm8994_SetVolume+0x15c>)
 801e970:	681b      	ldr	r3, [r3, #0]
 801e972:	b1e3      	cbz	r3, 801e9ae <wm8994_SetVolume+0x102>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 801e974:	b2f0      	uxtb	r0, r6
 801e976:	f240 12ef 	movw	r2, #495	; 0x1ef
 AUDIO_IO_Write(Addr, Reg, Value);
 801e97a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e97e:	9003      	str	r0, [sp, #12]
 801e980:	9201      	str	r2, [sp, #4]
 801e982:	f7fd fb51 	bl	801c028 <AUDIO_IO_Write>
 801e986:	9a01      	ldr	r2, [sp, #4]
 801e988:	f240 4101 	movw	r1, #1025	; 0x401
 801e98c:	9803      	ldr	r0, [sp, #12]
 801e98e:	9202      	str	r2, [sp, #8]
 801e990:	9001      	str	r0, [sp, #4]
 801e992:	f7fd fb49 	bl	801c028 <AUDIO_IO_Write>
 801e996:	f240 4104 	movw	r1, #1028	; 0x404
 801e99a:	e9dd 0201 	ldrd	r0, r2, [sp, #4]
 801e99e:	f7fd fb43 	bl	801c028 <AUDIO_IO_Write>
 801e9a2:	9a02      	ldr	r2, [sp, #8]
 801e9a4:	f240 4105 	movw	r1, #1029	; 0x405
 801e9a8:	9801      	ldr	r0, [sp, #4]
 801e9aa:	f7fd fb3d 	bl	801c028 <AUDIO_IO_Write>
}
 801e9ae:	2000      	movs	r0, #0
 801e9b0:	b004      	add	sp, #16
 801e9b2:	bd70      	pop	{r4, r5, r6, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 801e9b4:	2200      	movs	r2, #0
 801e9b6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801e9ba:	9001      	str	r0, [sp, #4]
 801e9bc:	f7fd fb34 	bl	801c028 <AUDIO_IO_Write>
 801e9c0:	2200      	movs	r2, #0
 801e9c2:	f240 4122 	movw	r1, #1058	; 0x422
 801e9c6:	9801      	ldr	r0, [sp, #4]
 801e9c8:	f7fd fb2e 	bl	801c028 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 801e9cc:	f445 72a0 	orr.w	r2, r5, #320	; 0x140
 AUDIO_IO_Write(Addr, Reg, Value);
 801e9d0:	211c      	movs	r1, #28
 801e9d2:	9801      	ldr	r0, [sp, #4]
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 801e9d4:	b292      	uxth	r2, r2
 AUDIO_IO_Write(Addr, Reg, Value);
 801e9d6:	9202      	str	r2, [sp, #8]
 801e9d8:	f7fd fb26 	bl	801c028 <AUDIO_IO_Write>
 801e9dc:	9a02      	ldr	r2, [sp, #8]
 801e9de:	211d      	movs	r1, #29
 801e9e0:	9801      	ldr	r0, [sp, #4]
 801e9e2:	f7fd fb21 	bl	801c028 <AUDIO_IO_Write>
 801e9e6:	9a02      	ldr	r2, [sp, #8]
 801e9e8:	2126      	movs	r1, #38	; 0x26
 801e9ea:	9801      	ldr	r0, [sp, #4]
 801e9ec:	f7fd fb1c 	bl	801c028 <AUDIO_IO_Write>
 801e9f0:	9a02      	ldr	r2, [sp, #8]
 801e9f2:	2127      	movs	r1, #39	; 0x27
 801e9f4:	9801      	ldr	r0, [sp, #4]
 801e9f6:	f7fd fb17 	bl	801c028 <AUDIO_IO_Write>
  if (inputEnabled != 0)
 801e9fa:	4b03      	ldr	r3, [pc, #12]	; (801ea08 <wm8994_SetVolume+0x15c>)
 801e9fc:	681b      	ldr	r3, [r3, #0]
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d0d5      	beq.n	801e9ae <wm8994_SetVolume+0x102>
 801ea02:	e786      	b.n	801e912 <wm8994_SetVolume+0x66>
 801ea04:	20019580 	.word	0x20019580
 801ea08:	2001957c 	.word	0x2001957c
 801ea0c:	51eb851f 	.word	0x51eb851f

0801ea10 <wm8994_Init>:
{
 801ea10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea14:	4680      	mov	r8, r0
 801ea16:	461e      	mov	r6, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 801ea18:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
 801ea1c:	4691      	mov	r9, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 801ea1e:	fa5f f488 	uxtb.w	r4, r8
  uint16_t output_device = OutputInputDevice & 0xFF;
 801ea22:	b2cf      	uxtb	r7, r1
  AUDIO_IO_Init();
 801ea24:	f7fd faf8 	bl	801c018 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ea28:	2203      	movs	r2, #3
 801ea2a:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ea2e:	4620      	mov	r0, r4
 801ea30:	f7fd fafa 	bl	801c028 <AUDIO_IO_Write>
 801ea34:	2200      	movs	r2, #0
 801ea36:	f640 0117 	movw	r1, #2071	; 0x817
 801ea3a:	4620      	mov	r0, r4
 801ea3c:	f7fd faf4 	bl	801c028 <AUDIO_IO_Write>
 801ea40:	2200      	movs	r2, #0
 801ea42:	f44f 7181 	mov.w	r1, #258	; 0x102
 801ea46:	4620      	mov	r0, r4
 801ea48:	f7fd faee 	bl	801c028 <AUDIO_IO_Write>
 801ea4c:	226c      	movs	r2, #108	; 0x6c
 801ea4e:	2139      	movs	r1, #57	; 0x39
 801ea50:	4620      	mov	r0, r4
 801ea52:	f7fd fae9 	bl	801c028 <AUDIO_IO_Write>
  if (input_device > 0)
 801ea56:	2d00      	cmp	r5, #0
 801ea58:	f000 8132 	beq.w	801ecc0 <wm8994_Init+0x2b0>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ea5c:	2213      	movs	r2, #19
 801ea5e:	2101      	movs	r1, #1
 801ea60:	4620      	mov	r0, r4
 801ea62:	f7fd fae1 	bl	801c028 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 801ea66:	2032      	movs	r0, #50	; 0x32
 801ea68:	f7fd fb10 	bl	801c08c <AUDIO_IO_Delay>
    outputEnabled = 1;
 801ea6c:	4bca      	ldr	r3, [pc, #808]	; (801ed98 <wm8994_Init+0x388>)
  if (output_device > 0)
 801ea6e:	2f00      	cmp	r7, #0
 801ea70:	f000 8114 	beq.w	801ec9c <wm8994_Init+0x28c>
    outputEnabled = 1;
 801ea74:	f04f 0a01 	mov.w	sl, #1
    switch (output_device)
 801ea78:	2f02      	cmp	r7, #2
    outputEnabled = 1;
 801ea7a:	f8c3 a000 	str.w	sl, [r3]
    switch (output_device)
 801ea7e:	f000 820e 	beq.w	801ee9e <wm8994_Init+0x48e>
 801ea82:	2f03      	cmp	r7, #3
 801ea84:	f000 8243 	beq.w	801ef0e <wm8994_Init+0x4fe>
 801ea88:	4557      	cmp	r7, sl
 AUDIO_IO_Write(Addr, Reg, Value);
 801ea8a:	4620      	mov	r0, r4
    switch (output_device)
 801ea8c:	f000 8221 	beq.w	801eed2 <wm8994_Init+0x4c2>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ea90:	2105      	movs	r1, #5
 801ea92:	f240 3203 	movw	r2, #771	; 0x303
 801ea96:	f7fd fac7 	bl	801c028 <AUDIO_IO_Write>
 801ea9a:	4652      	mov	r2, sl
 801ea9c:	4620      	mov	r0, r4
 801ea9e:	f240 6101 	movw	r1, #1537	; 0x601
 801eaa2:	f7fd fac1 	bl	801c028 <AUDIO_IO_Write>
 801eaa6:	4652      	mov	r2, sl
 801eaa8:	4620      	mov	r0, r4
 801eaaa:	f240 6102 	movw	r1, #1538	; 0x602
 801eaae:	f7fd fabb 	bl	801c028 <AUDIO_IO_Write>
 801eab2:	4620      	mov	r0, r4
 801eab4:	2200      	movs	r2, #0
 801eab6:	f240 6104 	movw	r1, #1540	; 0x604
 801eaba:	f7fd fab5 	bl	801c028 <AUDIO_IO_Write>
 801eabe:	2200      	movs	r2, #0
 801eac0:	f240 6105 	movw	r1, #1541	; 0x605
 801eac4:	4620      	mov	r0, r4
 801eac6:	f7fd faaf 	bl	801c028 <AUDIO_IO_Write>
  if (input_device > 0)
 801eaca:	2d00      	cmp	r5, #0
 801eacc:	f000 80ea 	beq.w	801eca4 <wm8994_Init+0x294>
    inputEnabled = 1;
 801ead0:	4ab2      	ldr	r2, [pc, #712]	; (801ed9c <wm8994_Init+0x38c>)
 801ead2:	2301      	movs	r3, #1
    switch (input_device)
 801ead4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    inputEnabled = 1;
 801ead8:	6013      	str	r3, [r2, #0]
    switch (input_device)
 801eada:	f000 825b 	beq.w	801ef94 <wm8994_Init+0x584>
 801eade:	f240 8127 	bls.w	801ed30 <wm8994_Init+0x320>
 801eae2:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 801eae6:	f040 80f1 	bne.w	801eccc <wm8994_Init+0x2bc>
 AUDIO_IO_Write(Addr, Reg, Value);
 801eaea:	2211      	movs	r2, #17
 801eaec:	2128      	movs	r1, #40	; 0x28
 801eaee:	4620      	mov	r0, r4
 801eaf0:	f7fd fa9a 	bl	801c028 <AUDIO_IO_Write>
 801eaf4:	2235      	movs	r2, #53	; 0x35
 801eaf6:	2129      	movs	r1, #41	; 0x29
 801eaf8:	4620      	mov	r0, r4
 801eafa:	f7fd fa95 	bl	801c028 <AUDIO_IO_Write>
 801eafe:	2235      	movs	r2, #53	; 0x35
 801eb00:	212a      	movs	r1, #42	; 0x2a
 801eb02:	4620      	mov	r0, r4
 801eb04:	f7fd fa90 	bl	801c028 <AUDIO_IO_Write>
 801eb08:	f240 3203 	movw	r2, #771	; 0x303
 801eb0c:	2104      	movs	r1, #4
 801eb0e:	4620      	mov	r0, r4
 801eb10:	f7fd fa8a 	bl	801c028 <AUDIO_IO_Write>
 801eb14:	22db      	movs	r2, #219	; 0xdb
 801eb16:	f44f 6188 	mov.w	r1, #1088	; 0x440
 801eb1a:	4620      	mov	r0, r4
 801eb1c:	f7fd fa84 	bl	801c028 <AUDIO_IO_Write>
 801eb20:	f246 3250 	movw	r2, #25424	; 0x6350
 801eb24:	2102      	movs	r1, #2
 801eb26:	4620      	mov	r0, r4
 801eb28:	f7fd fa7e 	bl	801c028 <AUDIO_IO_Write>
 801eb2c:	2202      	movs	r2, #2
 801eb2e:	f240 6106 	movw	r1, #1542	; 0x606
 801eb32:	4620      	mov	r0, r4
 801eb34:	f7fd fa78 	bl	801c028 <AUDIO_IO_Write>
 801eb38:	2202      	movs	r2, #2
 801eb3a:	f240 6107 	movw	r1, #1543	; 0x607
 801eb3e:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 801eb40:	f04f 0a00 	mov.w	sl, #0
 AUDIO_IO_Write(Addr, Reg, Value);
 801eb44:	f7fd fa70 	bl	801c028 <AUDIO_IO_Write>
 801eb48:	220d      	movs	r2, #13
 801eb4a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 801eb4e:	4620      	mov	r0, r4
 801eb50:	f7fd fa6a 	bl	801c028 <AUDIO_IO_Write>
  switch (AudioFreq)
 801eb54:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
 801eb58:	f000 80ab 	beq.w	801ecb2 <wm8994_Init+0x2a2>
 801eb5c:	f200 8084 	bhi.w	801ec68 <wm8994_Init+0x258>
 801eb60:	f5b6 5f7a 	cmp.w	r6, #16000	; 0x3e80
 801eb64:	f000 8208 	beq.w	801ef78 <wm8994_Init+0x568>
 801eb68:	d834      	bhi.n	801ebd4 <wm8994_Init+0x1c4>
 801eb6a:	f5b6 5ffa 	cmp.w	r6, #8000	; 0x1f40
 801eb6e:	f000 820a 	beq.w	801ef86 <wm8994_Init+0x576>
 801eb72:	f642 3311 	movw	r3, #11025	; 0x2b11
 801eb76:	429e      	cmp	r6, r3
 801eb78:	f040 8106 	bne.w	801ed88 <wm8994_Init+0x378>
 AUDIO_IO_Write(Addr, Reg, Value);
 801eb7c:	2213      	movs	r2, #19
 801eb7e:	f44f 7104 	mov.w	r1, #528	; 0x210
 801eb82:	4620      	mov	r0, r4
 801eb84:	f7fd fa50 	bl	801c028 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 801eb88:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801eb8c:	d030      	beq.n	801ebf0 <wm8994_Init+0x1e0>
 AUDIO_IO_Write(Addr, Reg, Value);
 801eb8e:	f244 0210 	movw	r2, #16400	; 0x4010
 801eb92:	f44f 7140 	mov.w	r1, #768	; 0x300
 801eb96:	4620      	mov	r0, r4
 801eb98:	f7fd fa46 	bl	801c028 <AUDIO_IO_Write>
 801eb9c:	2200      	movs	r2, #0
 801eb9e:	f240 3102 	movw	r1, #770	; 0x302
 801eba2:	4620      	mov	r0, r4
 801eba4:	f7fd fa40 	bl	801c028 <AUDIO_IO_Write>
 801eba8:	220a      	movs	r2, #10
 801ebaa:	f44f 7102 	mov.w	r1, #520	; 0x208
 801ebae:	4620      	mov	r0, r4
 801ebb0:	f7fd fa3a 	bl	801c028 <AUDIO_IO_Write>
 801ebb4:	2201      	movs	r2, #1
 801ebb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ebba:	4620      	mov	r0, r4
 801ebbc:	f7fd fa34 	bl	801c028 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 801ebc0:	2f00      	cmp	r7, #0
 801ebc2:	f040 80ef 	bne.w	801eda4 <wm8994_Init+0x394>
 801ebc6:	2213      	movs	r2, #19
  if (input_device > 0) /* Audio input selected */
 801ebc8:	2d00      	cmp	r5, #0
 801ebca:	f040 80b8 	bne.w	801ed3e <wm8994_Init+0x32e>
}
 801ebce:	4650      	mov	r0, sl
 801ebd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (AudioFreq)
 801ebd4:	f245 6322 	movw	r3, #22050	; 0x5622
 801ebd8:	429e      	cmp	r6, r3
 801ebda:	f040 80d5 	bne.w	801ed88 <wm8994_Init+0x378>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ebde:	2243      	movs	r2, #67	; 0x43
 801ebe0:	f44f 7104 	mov.w	r1, #528	; 0x210
 801ebe4:	4620      	mov	r0, r4
 801ebe6:	f7fd fa1f 	bl	801c028 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 801ebea:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801ebee:	d1ce      	bne.n	801eb8e <wm8994_Init+0x17e>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ebf0:	f244 0218 	movw	r2, #16408	; 0x4018
 801ebf4:	f44f 7140 	mov.w	r1, #768	; 0x300
 801ebf8:	4620      	mov	r0, r4
 801ebfa:	f7fd fa15 	bl	801c028 <AUDIO_IO_Write>
 801ebfe:	2200      	movs	r2, #0
 801ec00:	f240 3102 	movw	r1, #770	; 0x302
 801ec04:	4620      	mov	r0, r4
 801ec06:	f7fd fa0f 	bl	801c028 <AUDIO_IO_Write>
 801ec0a:	220a      	movs	r2, #10
 801ec0c:	f44f 7102 	mov.w	r1, #520	; 0x208
 801ec10:	4620      	mov	r0, r4
 801ec12:	f7fd fa09 	bl	801c028 <AUDIO_IO_Write>
 801ec16:	2201      	movs	r2, #1
 801ec18:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ec1c:	4620      	mov	r0, r4
 801ec1e:	f7fd fa03 	bl	801c028 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 801ec22:	2f00      	cmp	r7, #0
 801ec24:	f040 8185 	bne.w	801ef32 <wm8994_Init+0x522>
 801ec28:	2213      	movs	r2, #19
 AUDIO_IO_Write(Addr, Reg, Value);
 801ec2a:	4620      	mov	r0, r4
 801ec2c:	2101      	movs	r1, #1
 801ec2e:	f7fd f9fb 	bl	801c028 <AUDIO_IO_Write>
 801ec32:	2202      	movs	r2, #2
 801ec34:	4620      	mov	r0, r4
 801ec36:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 801ec3a:	f7fd f9f5 	bl	801c028 <AUDIO_IO_Write>
 801ec3e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 801ec42:	4620      	mov	r0, r4
 801ec44:	f44f 6182 	mov.w	r1, #1040	; 0x410
 801ec48:	f7fd f9ee 	bl	801c028 <AUDIO_IO_Write>
 801ec4c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 801ec50:	4620      	mov	r0, r4
 801ec52:	f240 4111 	movw	r1, #1041	; 0x411
 801ec56:	f7fd f9e7 	bl	801c028 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 801ec5a:	4649      	mov	r1, r9
 801ec5c:	4640      	mov	r0, r8
 801ec5e:	f7ff fe25 	bl	801e8ac <wm8994_SetVolume>
}
 801ec62:	4650      	mov	r0, sl
 801ec64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (AudioFreq)
 801ec68:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801ec6c:	429e      	cmp	r6, r3
 801ec6e:	f000 808b 	beq.w	801ed88 <wm8994_Init+0x378>
 801ec72:	4b4b      	ldr	r3, [pc, #300]	; (801eda0 <wm8994_Init+0x390>)
 801ec74:	429e      	cmp	r6, r3
 801ec76:	d106      	bne.n	801ec86 <wm8994_Init+0x276>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ec78:	22a3      	movs	r2, #163	; 0xa3
 801ec7a:	f44f 7104 	mov.w	r1, #528	; 0x210
 801ec7e:	4620      	mov	r0, r4
 801ec80:	f7fd f9d2 	bl	801c028 <AUDIO_IO_Write>
    break;
 801ec84:	e780      	b.n	801eb88 <wm8994_Init+0x178>
  switch (AudioFreq)
 801ec86:	f64a 4344 	movw	r3, #44100	; 0xac44
 801ec8a:	429e      	cmp	r6, r3
 801ec8c:	d17c      	bne.n	801ed88 <wm8994_Init+0x378>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ec8e:	2273      	movs	r2, #115	; 0x73
 801ec90:	f44f 7104 	mov.w	r1, #528	; 0x210
 801ec94:	4620      	mov	r0, r4
 801ec96:	f7fd f9c7 	bl	801c028 <AUDIO_IO_Write>
    break; 
 801ec9a:	e775      	b.n	801eb88 <wm8994_Init+0x178>
    outputEnabled = 0;
 801ec9c:	601f      	str	r7, [r3, #0]
  if (input_device > 0)
 801ec9e:	2d00      	cmp	r5, #0
 801eca0:	f47f af16 	bne.w	801ead0 <wm8994_Init+0xc0>
    inputEnabled = 0;
 801eca4:	4b3d      	ldr	r3, [pc, #244]	; (801ed9c <wm8994_Init+0x38c>)
  switch (AudioFreq)
 801eca6:	f5b6 4ffa 	cmp.w	r6, #32000	; 0x7d00
    inputEnabled = 0;
 801ecaa:	46aa      	mov	sl, r5
 801ecac:	601d      	str	r5, [r3, #0]
  switch (AudioFreq)
 801ecae:	f47f af55 	bne.w	801eb5c <wm8994_Init+0x14c>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ecb2:	2263      	movs	r2, #99	; 0x63
 801ecb4:	f44f 7104 	mov.w	r1, #528	; 0x210
 801ecb8:	4620      	mov	r0, r4
 801ecba:	f7fd f9b5 	bl	801c028 <AUDIO_IO_Write>
    break;
 801ecbe:	e763      	b.n	801eb88 <wm8994_Init+0x178>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ecc0:	2203      	movs	r2, #3
 801ecc2:	2101      	movs	r1, #1
 801ecc4:	4620      	mov	r0, r4
 801ecc6:	f7fd f9af 	bl	801c028 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 801ecca:	e6cc      	b.n	801ea66 <wm8994_Init+0x56>
    switch (input_device)
 801eccc:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801ecd0:	f040 80fd 	bne.w	801eece <wm8994_Init+0x4be>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ecd4:	f640 723c 	movw	r2, #3900	; 0xf3c
 801ecd8:	2104      	movs	r1, #4
 801ecda:	4620      	mov	r0, r4
 801ecdc:	f7fd f9a4 	bl	801c028 <AUDIO_IO_Write>
 801ece0:	22db      	movs	r2, #219	; 0xdb
 801ece2:	f44f 618a 	mov.w	r1, #1104	; 0x450
 801ece6:	4620      	mov	r0, r4
 801ece8:	f7fd f99e 	bl	801c028 <AUDIO_IO_Write>
 801ecec:	22db      	movs	r2, #219	; 0xdb
 801ecee:	f44f 6188 	mov.w	r1, #1088	; 0x440
 801ecf2:	4620      	mov	r0, r4
 801ecf4:	f7fd f998 	bl	801c028 <AUDIO_IO_Write>
 801ecf8:	f246 32a0 	movw	r2, #25504	; 0x63a0
 801ecfc:	2102      	movs	r1, #2
 801ecfe:	4620      	mov	r0, r4
 801ed00:	f7fd f992 	bl	801c028 <AUDIO_IO_Write>
 801ed04:	2202      	movs	r2, #2
 801ed06:	f240 6106 	movw	r1, #1542	; 0x606
 801ed0a:	4620      	mov	r0, r4
 801ed0c:	f7fd f98c 	bl	801c028 <AUDIO_IO_Write>
 801ed10:	2202      	movs	r2, #2
 801ed12:	f240 6107 	movw	r1, #1543	; 0x607
 801ed16:	4620      	mov	r0, r4
 801ed18:	f7fd f986 	bl	801c028 <AUDIO_IO_Write>
 801ed1c:	2202      	movs	r2, #2
 801ed1e:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 801ed22:	4620      	mov	r0, r4
 801ed24:	f7fd f980 	bl	801c028 <AUDIO_IO_Write>
 801ed28:	2202      	movs	r2, #2
 801ed2a:	f240 6109 	movw	r1, #1545	; 0x609
 801ed2e:	e706      	b.n	801eb3e <wm8994_Init+0x12e>
    switch (input_device)
 801ed30:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801ed34:	f040 80cb 	bne.w	801eece <wm8994_Init+0x4be>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ed38:	f44f 7243 	mov.w	r2, #780	; 0x30c
 801ed3c:	e6e6      	b.n	801eb0c <wm8994_Init+0xfc>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 801ed3e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801ed42:	f000 80ae 	beq.w	801eea2 <wm8994_Init+0x492>
 801ed46:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 801ed4a:	f000 80aa 	beq.w	801eea2 <wm8994_Init+0x492>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 801ed4e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801ed52:	f43f af6a 	beq.w	801ec2a <wm8994_Init+0x21a>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 801ed56:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 801ed5a:	d003      	beq.n	801ed64 <wm8994_Init+0x354>
 801ed5c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801ed60:	f47f af7b 	bne.w	801ec5a <wm8994_Init+0x24a>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ed64:	4620      	mov	r0, r4
 801ed66:	220b      	movs	r2, #11
 801ed68:	2118      	movs	r1, #24
 801ed6a:	f7fd f95d 	bl	801c028 <AUDIO_IO_Write>
 801ed6e:	4620      	mov	r0, r4
 801ed70:	220b      	movs	r2, #11
 801ed72:	211a      	movs	r1, #26
 801ed74:	f7fd f958 	bl	801c028 <AUDIO_IO_Write>
 801ed78:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 801ed7c:	4620      	mov	r0, r4
 801ed7e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 801ed82:	f7fd f951 	bl	801c028 <AUDIO_IO_Write>
  return result;
 801ed86:	e768      	b.n	801ec5a <wm8994_Init+0x24a>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ed88:	2283      	movs	r2, #131	; 0x83
 801ed8a:	f44f 7104 	mov.w	r1, #528	; 0x210
 801ed8e:	4620      	mov	r0, r4
 801ed90:	f7fd f94a 	bl	801c028 <AUDIO_IO_Write>
    break; 
 801ed94:	e6f8      	b.n	801eb88 <wm8994_Init+0x178>
 801ed96:	bf00      	nop
 801ed98:	20019580 	.word	0x20019580
 801ed9c:	2001957c 	.word	0x2001957c
 801eda0:	00017700 	.word	0x00017700
 AUDIO_IO_Write(Addr, Reg, Value);
 801eda4:	4620      	mov	r0, r4
 801eda6:	f44f 7240 	mov.w	r2, #768	; 0x300
 801edaa:	2103      	movs	r1, #3
 801edac:	f7fd f93c 	bl	801c028 <AUDIO_IO_Write>
 801edb0:	4620      	mov	r0, r4
 801edb2:	2200      	movs	r2, #0
 801edb4:	2122      	movs	r1, #34	; 0x22
 801edb6:	f7fd f937 	bl	801c028 <AUDIO_IO_Write>
 801edba:	4620      	mov	r0, r4
 801edbc:	2200      	movs	r2, #0
 801edbe:	2123      	movs	r1, #35	; 0x23
 801edc0:	f7fd f932 	bl	801c028 <AUDIO_IO_Write>
 801edc4:	4620      	mov	r0, r4
 801edc6:	f44f 7240 	mov.w	r2, #768	; 0x300
 801edca:	2136      	movs	r1, #54	; 0x36
 801edcc:	f7fd f92c 	bl	801c028 <AUDIO_IO_Write>
 801edd0:	4620      	mov	r0, r4
 801edd2:	f243 0203 	movw	r2, #12291	; 0x3003
 801edd6:	2101      	movs	r1, #1
 801edd8:	f7fd f926 	bl	801c028 <AUDIO_IO_Write>
 801eddc:	2205      	movs	r2, #5
 801edde:	2151      	movs	r1, #81	; 0x51
 801ede0:	4620      	mov	r0, r4
 801ede2:	f7fd f921 	bl	801c028 <AUDIO_IO_Write>
 801ede6:	f243 3203 	movw	r2, #13059	; 0x3303
 801edea:	2101      	movs	r1, #1
 801edec:	4620      	mov	r0, r4
 801edee:	f7fd f91b 	bl	801c028 <AUDIO_IO_Write>
 801edf2:	2222      	movs	r2, #34	; 0x22
 801edf4:	2160      	movs	r1, #96	; 0x60
 801edf6:	4620      	mov	r0, r4
 801edf8:	f7fd f916 	bl	801c028 <AUDIO_IO_Write>
 801edfc:	f649 7225 	movw	r2, #40741	; 0x9f25
 801ee00:	214c      	movs	r1, #76	; 0x4c
 801ee02:	4620      	mov	r0, r4
 801ee04:	f7fd f910 	bl	801c028 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 801ee08:	200f      	movs	r0, #15
 801ee0a:	f7fd f93f 	bl	801c08c <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ee0e:	2201      	movs	r2, #1
 801ee10:	212d      	movs	r1, #45	; 0x2d
 801ee12:	4620      	mov	r0, r4
 801ee14:	f7fd f908 	bl	801c028 <AUDIO_IO_Write>
 801ee18:	2201      	movs	r2, #1
 801ee1a:	212e      	movs	r1, #46	; 0x2e
 801ee1c:	4620      	mov	r0, r4
 801ee1e:	f7fd f903 	bl	801c028 <AUDIO_IO_Write>
 801ee22:	f44f 724c 	mov.w	r2, #816	; 0x330
 801ee26:	2103      	movs	r1, #3
 801ee28:	4620      	mov	r0, r4
 801ee2a:	f7fd f8fd 	bl	801c028 <AUDIO_IO_Write>
 801ee2e:	2233      	movs	r2, #51	; 0x33
 801ee30:	2154      	movs	r1, #84	; 0x54
 801ee32:	4620      	mov	r0, r4
 801ee34:	f7fd f8f8 	bl	801c028 <AUDIO_IO_Write>
    AUDIO_IO_Delay(250);
 801ee38:	20fa      	movs	r0, #250	; 0xfa
 801ee3a:	f7fd f927 	bl	801c08c <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ee3e:	22ee      	movs	r2, #238	; 0xee
 801ee40:	2160      	movs	r1, #96	; 0x60
 801ee42:	4620      	mov	r0, r4
 801ee44:	f7fd f8f0 	bl	801c028 <AUDIO_IO_Write>
 801ee48:	22c0      	movs	r2, #192	; 0xc0
 801ee4a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 801ee4e:	4620      	mov	r0, r4
 801ee50:	f7fd f8ea 	bl	801c028 <AUDIO_IO_Write>
 801ee54:	22c0      	movs	r2, #192	; 0xc0
 801ee56:	f240 6111 	movw	r1, #1553	; 0x611
 801ee5a:	4620      	mov	r0, r4
 801ee5c:	f7fd f8e4 	bl	801c028 <AUDIO_IO_Write>
 801ee60:	2200      	movs	r2, #0
 801ee62:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801ee66:	4620      	mov	r0, r4
 801ee68:	f7fd f8de 	bl	801c028 <AUDIO_IO_Write>
 801ee6c:	22c0      	movs	r2, #192	; 0xc0
 801ee6e:	f240 6112 	movw	r1, #1554	; 0x612
 801ee72:	4620      	mov	r0, r4
 801ee74:	f7fd f8d8 	bl	801c028 <AUDIO_IO_Write>
 801ee78:	22c0      	movs	r2, #192	; 0xc0
 801ee7a:	f240 6113 	movw	r1, #1555	; 0x613
 801ee7e:	4620      	mov	r0, r4
 801ee80:	f7fd f8d2 	bl	801c028 <AUDIO_IO_Write>
 801ee84:	2200      	movs	r2, #0
 801ee86:	f240 4122 	movw	r1, #1058	; 0x422
 801ee8a:	4620      	mov	r0, r4
 801ee8c:	f7fd f8cc 	bl	801c028 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 801ee90:	4649      	mov	r1, r9
 801ee92:	4640      	mov	r0, r8
 801ee94:	f7ff fd0a 	bl	801e8ac <wm8994_SetVolume>
 801ee98:	f243 3213 	movw	r2, #13075	; 0x3313
 801ee9c:	e694      	b.n	801ebc8 <wm8994_Init+0x1b8>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ee9e:	4620      	mov	r0, r4
 801eea0:	e5f6      	b.n	801ea90 <wm8994_Init+0x80>
 801eea2:	4620      	mov	r0, r4
 801eea4:	2101      	movs	r1, #1
 801eea6:	f7fd f8bf 	bl	801c028 <AUDIO_IO_Write>
 801eeaa:	4620      	mov	r0, r4
 801eeac:	2202      	movs	r2, #2
 801eeae:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 801eeb2:	f7fd f8b9 	bl	801c028 <AUDIO_IO_Write>
 801eeb6:	4620      	mov	r0, r4
 801eeb8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 801eebc:	f240 4111 	movw	r1, #1041	; 0x411
 801eec0:	f7fd f8b2 	bl	801c028 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 801eec4:	4649      	mov	r1, r9
 801eec6:	4640      	mov	r0, r8
 801eec8:	f7ff fcf0 	bl	801e8ac <wm8994_SetVolume>
  return counter;  
 801eecc:	e6c9      	b.n	801ec62 <wm8994_Init+0x252>
    switch (input_device)
 801eece:	469a      	mov	sl, r3
 801eed0:	e640      	b.n	801eb54 <wm8994_Init+0x144>
 AUDIO_IO_Write(Addr, Reg, Value);
 801eed2:	f640 420c 	movw	r2, #3084	; 0xc0c
 801eed6:	2105      	movs	r1, #5
 801eed8:	f7fd f8a6 	bl	801c028 <AUDIO_IO_Write>
 801eedc:	4620      	mov	r0, r4
 801eede:	2200      	movs	r2, #0
 801eee0:	f240 6101 	movw	r1, #1537	; 0x601
 801eee4:	f7fd f8a0 	bl	801c028 <AUDIO_IO_Write>
 801eee8:	4620      	mov	r0, r4
 801eeea:	2200      	movs	r2, #0
 801eeec:	f240 6102 	movw	r1, #1538	; 0x602
 801eef0:	f7fd f89a 	bl	801c028 <AUDIO_IO_Write>
 801eef4:	4620      	mov	r0, r4
 801eef6:	2202      	movs	r2, #2
 801eef8:	f240 6104 	movw	r1, #1540	; 0x604
 801eefc:	f7fd f894 	bl	801c028 <AUDIO_IO_Write>
 801ef00:	2202      	movs	r2, #2
 801ef02:	f240 6105 	movw	r1, #1541	; 0x605
 801ef06:	4620      	mov	r0, r4
 801ef08:	f7fd f88e 	bl	801c028 <AUDIO_IO_Write>
  return result;
 801ef0c:	e5dd      	b.n	801eaca <wm8994_Init+0xba>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 801ef0e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801ef12:	d066      	beq.n	801efe2 <wm8994_Init+0x5d2>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ef14:	4620      	mov	r0, r4
 801ef16:	2105      	movs	r1, #5
 801ef18:	f640 720f 	movw	r2, #3855	; 0xf0f
 801ef1c:	f7fd f884 	bl	801c028 <AUDIO_IO_Write>
 801ef20:	4652      	mov	r2, sl
 801ef22:	4620      	mov	r0, r4
 801ef24:	f240 6101 	movw	r1, #1537	; 0x601
 801ef28:	f7fd f87e 	bl	801c028 <AUDIO_IO_Write>
 801ef2c:	4652      	mov	r2, sl
 801ef2e:	4620      	mov	r0, r4
 801ef30:	e7dc      	b.n	801eeec <wm8994_Init+0x4dc>
 801ef32:	4620      	mov	r0, r4
 801ef34:	f44f 7240 	mov.w	r2, #768	; 0x300
 801ef38:	2103      	movs	r1, #3
 801ef3a:	f7fd f875 	bl	801c028 <AUDIO_IO_Write>
 801ef3e:	4620      	mov	r0, r4
 801ef40:	2200      	movs	r2, #0
 801ef42:	2122      	movs	r1, #34	; 0x22
 801ef44:	f7fd f870 	bl	801c028 <AUDIO_IO_Write>
 801ef48:	4620      	mov	r0, r4
 801ef4a:	2200      	movs	r2, #0
 801ef4c:	2123      	movs	r1, #35	; 0x23
 801ef4e:	f7fd f86b 	bl	801c028 <AUDIO_IO_Write>
 801ef52:	4620      	mov	r0, r4
 801ef54:	f44f 7240 	mov.w	r2, #768	; 0x300
 801ef58:	2136      	movs	r1, #54	; 0x36
 801ef5a:	f7fd f865 	bl	801c028 <AUDIO_IO_Write>
 801ef5e:	4620      	mov	r0, r4
 801ef60:	f243 0203 	movw	r2, #12291	; 0x3003
 801ef64:	2101      	movs	r1, #1
 801ef66:	f7fd f85f 	bl	801c028 <AUDIO_IO_Write>
 801ef6a:	f240 2205 	movw	r2, #517	; 0x205
 801ef6e:	2151      	movs	r1, #81	; 0x51
 801ef70:	4620      	mov	r0, r4
 801ef72:	f7fd f859 	bl	801c028 <AUDIO_IO_Write>
  return result;
 801ef76:	e736      	b.n	801ede6 <wm8994_Init+0x3d6>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ef78:	2233      	movs	r2, #51	; 0x33
 801ef7a:	f44f 7104 	mov.w	r1, #528	; 0x210
 801ef7e:	4620      	mov	r0, r4
 801ef80:	f7fd f852 	bl	801c028 <AUDIO_IO_Write>
    break;
 801ef84:	e600      	b.n	801eb88 <wm8994_Init+0x178>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ef86:	2203      	movs	r2, #3
 801ef88:	f44f 7104 	mov.w	r1, #528	; 0x210
 801ef8c:	4620      	mov	r0, r4
 801ef8e:	f7fd f84b 	bl	801c028 <AUDIO_IO_Write>
    break;
 801ef92:	e5f9      	b.n	801eb88 <wm8994_Init+0x178>
 AUDIO_IO_Write(Addr, Reg, Value);
 801ef94:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 801ef98:	2104      	movs	r1, #4
 801ef9a:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 801ef9c:	f04f 0a00 	mov.w	sl, #0
 AUDIO_IO_Write(Addr, Reg, Value);
 801efa0:	f7fd f842 	bl	801c028 <AUDIO_IO_Write>
 801efa4:	22db      	movs	r2, #219	; 0xdb
 801efa6:	f44f 618a 	mov.w	r1, #1104	; 0x450
 801efaa:	4620      	mov	r0, r4
 801efac:	f7fd f83c 	bl	801c028 <AUDIO_IO_Write>
 801efb0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 801efb4:	2102      	movs	r1, #2
 801efb6:	4620      	mov	r0, r4
 801efb8:	f7fd f836 	bl	801c028 <AUDIO_IO_Write>
 801efbc:	2202      	movs	r2, #2
 801efbe:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 801efc2:	4620      	mov	r0, r4
 801efc4:	f7fd f830 	bl	801c028 <AUDIO_IO_Write>
 801efc8:	2202      	movs	r2, #2
 801efca:	f240 6109 	movw	r1, #1545	; 0x609
 801efce:	4620      	mov	r0, r4
 801efd0:	f7fd f82a 	bl	801c028 <AUDIO_IO_Write>
 801efd4:	220e      	movs	r2, #14
 801efd6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 801efda:	4620      	mov	r0, r4
 801efdc:	f7fd f824 	bl	801c028 <AUDIO_IO_Write>
      break;
 801efe0:	e5b8      	b.n	801eb54 <wm8994_Init+0x144>
 AUDIO_IO_Write(Addr, Reg, Value);
 801efe2:	2105      	movs	r1, #5
 801efe4:	4620      	mov	r0, r4
 801efe6:	f640 720f 	movw	r2, #3855	; 0xf0f
 801efea:	f7fd f81d 	bl	801c028 <AUDIO_IO_Write>
 801efee:	463a      	mov	r2, r7
 801eff0:	f240 6101 	movw	r1, #1537	; 0x601
 801eff4:	4620      	mov	r0, r4
 801eff6:	f7fd f817 	bl	801c028 <AUDIO_IO_Write>
 801effa:	463a      	mov	r2, r7
 801effc:	f240 6102 	movw	r1, #1538	; 0x602
 801f000:	4620      	mov	r0, r4
 801f002:	f7fd f811 	bl	801c028 <AUDIO_IO_Write>
 801f006:	463a      	mov	r2, r7
 801f008:	f240 6104 	movw	r1, #1540	; 0x604
 801f00c:	4620      	mov	r0, r4
 801f00e:	f7fd f80b 	bl	801c028 <AUDIO_IO_Write>
 801f012:	463a      	mov	r2, r7
 801f014:	f240 6105 	movw	r1, #1541	; 0x605
 801f018:	4620      	mov	r0, r4
 801f01a:	f7fd f805 	bl	801c028 <AUDIO_IO_Write>
    inputEnabled = 1;
 801f01e:	4b02      	ldr	r3, [pc, #8]	; (801f028 <wm8994_Init+0x618>)
 801f020:	f8c3 a000 	str.w	sl, [r3]
    switch (input_device)
 801f024:	e656      	b.n	801ecd4 <wm8994_Init+0x2c4>
 801f026:	bf00      	nop
 801f028:	2001957c 	.word	0x2001957c

0801f02c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801f02c:	f8df d034 	ldr.w	sp, [pc, #52]	; 801f064 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801f030:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801f032:	e003      	b.n	801f03c <LoopCopyDataInit>

0801f034 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801f034:	4b0c      	ldr	r3, [pc, #48]	; (801f068 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801f036:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801f038:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801f03a:	3104      	adds	r1, #4

0801f03c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801f03c:	480b      	ldr	r0, [pc, #44]	; (801f06c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801f03e:	4b0c      	ldr	r3, [pc, #48]	; (801f070 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801f040:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801f042:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801f044:	d3f6      	bcc.n	801f034 <CopyDataInit>
  ldr  r2, =_sbss
 801f046:	4a0b      	ldr	r2, [pc, #44]	; (801f074 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801f048:	e002      	b.n	801f050 <LoopFillZerobss>

0801f04a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801f04a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801f04c:	f842 3b04 	str.w	r3, [r2], #4

0801f050 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801f050:	4b09      	ldr	r3, [pc, #36]	; (801f078 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801f052:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801f054:	d3f9      	bcc.n	801f04a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801f056:	f7fe f9a1 	bl	801d39c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801f05a:	f000 f81f 	bl	801f09c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801f05e:	f7fa fd33 	bl	8019ac8 <main>
  bx  lr    
 801f062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801f064:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 801f068:	08024fc0 	.word	0x08024fc0
  ldr  r0, =_sdata
 801f06c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801f070:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 801f074:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 801f078:	20019594 	.word	0x20019594

0801f07c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801f07c:	e7fe      	b.n	801f07c <ADC_IRQHandler>
	...

0801f080 <calloc>:
 801f080:	4b02      	ldr	r3, [pc, #8]	; (801f08c <calloc+0xc>)
 801f082:	460a      	mov	r2, r1
 801f084:	4601      	mov	r1, r0
 801f086:	6818      	ldr	r0, [r3, #0]
 801f088:	f000 b86c 	b.w	801f164 <_calloc_r>
 801f08c:	200000ac 	.word	0x200000ac

0801f090 <__errno>:
 801f090:	4b01      	ldr	r3, [pc, #4]	; (801f098 <__errno+0x8>)
 801f092:	6818      	ldr	r0, [r3, #0]
 801f094:	4770      	bx	lr
 801f096:	bf00      	nop
 801f098:	200000ac 	.word	0x200000ac

0801f09c <__libc_init_array>:
 801f09c:	b570      	push	{r4, r5, r6, lr}
 801f09e:	4d0d      	ldr	r5, [pc, #52]	; (801f0d4 <__libc_init_array+0x38>)
 801f0a0:	4c0d      	ldr	r4, [pc, #52]	; (801f0d8 <__libc_init_array+0x3c>)
 801f0a2:	1b64      	subs	r4, r4, r5
 801f0a4:	10a4      	asrs	r4, r4, #2
 801f0a6:	2600      	movs	r6, #0
 801f0a8:	42a6      	cmp	r6, r4
 801f0aa:	d109      	bne.n	801f0c0 <__libc_init_array+0x24>
 801f0ac:	4d0b      	ldr	r5, [pc, #44]	; (801f0dc <__libc_init_array+0x40>)
 801f0ae:	4c0c      	ldr	r4, [pc, #48]	; (801f0e0 <__libc_init_array+0x44>)
 801f0b0:	f000 fce8 	bl	801fa84 <_init>
 801f0b4:	1b64      	subs	r4, r4, r5
 801f0b6:	10a4      	asrs	r4, r4, #2
 801f0b8:	2600      	movs	r6, #0
 801f0ba:	42a6      	cmp	r6, r4
 801f0bc:	d105      	bne.n	801f0ca <__libc_init_array+0x2e>
 801f0be:	bd70      	pop	{r4, r5, r6, pc}
 801f0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0c4:	4798      	blx	r3
 801f0c6:	3601      	adds	r6, #1
 801f0c8:	e7ee      	b.n	801f0a8 <__libc_init_array+0xc>
 801f0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0ce:	4798      	blx	r3
 801f0d0:	3601      	adds	r6, #1
 801f0d2:	e7f2      	b.n	801f0ba <__libc_init_array+0x1e>
 801f0d4:	08024fb8 	.word	0x08024fb8
 801f0d8:	08024fb8 	.word	0x08024fb8
 801f0dc:	08024fb8 	.word	0x08024fb8
 801f0e0:	08024fbc 	.word	0x08024fbc

0801f0e4 <malloc>:
 801f0e4:	4b02      	ldr	r3, [pc, #8]	; (801f0f0 <malloc+0xc>)
 801f0e6:	4601      	mov	r1, r0
 801f0e8:	6818      	ldr	r0, [r3, #0]
 801f0ea:	f000 b8bd 	b.w	801f268 <_malloc_r>
 801f0ee:	bf00      	nop
 801f0f0:	200000ac 	.word	0x200000ac

0801f0f4 <free>:
 801f0f4:	4b02      	ldr	r3, [pc, #8]	; (801f100 <free+0xc>)
 801f0f6:	4601      	mov	r1, r0
 801f0f8:	6818      	ldr	r0, [r3, #0]
 801f0fa:	f000 b849 	b.w	801f190 <_free_r>
 801f0fe:	bf00      	nop
 801f100:	200000ac 	.word	0x200000ac

0801f104 <memcpy>:
 801f104:	440a      	add	r2, r1
 801f106:	4291      	cmp	r1, r2
 801f108:	f100 33ff 	add.w	r3, r0, #4294967295
 801f10c:	d100      	bne.n	801f110 <memcpy+0xc>
 801f10e:	4770      	bx	lr
 801f110:	b510      	push	{r4, lr}
 801f112:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f116:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f11a:	4291      	cmp	r1, r2
 801f11c:	d1f9      	bne.n	801f112 <memcpy+0xe>
 801f11e:	bd10      	pop	{r4, pc}

0801f120 <memmove>:
 801f120:	4288      	cmp	r0, r1
 801f122:	b510      	push	{r4, lr}
 801f124:	eb01 0402 	add.w	r4, r1, r2
 801f128:	d902      	bls.n	801f130 <memmove+0x10>
 801f12a:	4284      	cmp	r4, r0
 801f12c:	4623      	mov	r3, r4
 801f12e:	d807      	bhi.n	801f140 <memmove+0x20>
 801f130:	1e43      	subs	r3, r0, #1
 801f132:	42a1      	cmp	r1, r4
 801f134:	d008      	beq.n	801f148 <memmove+0x28>
 801f136:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f13a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f13e:	e7f8      	b.n	801f132 <memmove+0x12>
 801f140:	4402      	add	r2, r0
 801f142:	4601      	mov	r1, r0
 801f144:	428a      	cmp	r2, r1
 801f146:	d100      	bne.n	801f14a <memmove+0x2a>
 801f148:	bd10      	pop	{r4, pc}
 801f14a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f14e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f152:	e7f7      	b.n	801f144 <memmove+0x24>

0801f154 <memset>:
 801f154:	4402      	add	r2, r0
 801f156:	4603      	mov	r3, r0
 801f158:	4293      	cmp	r3, r2
 801f15a:	d100      	bne.n	801f15e <memset+0xa>
 801f15c:	4770      	bx	lr
 801f15e:	f803 1b01 	strb.w	r1, [r3], #1
 801f162:	e7f9      	b.n	801f158 <memset+0x4>

0801f164 <_calloc_r>:
 801f164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f166:	fba1 2402 	umull	r2, r4, r1, r2
 801f16a:	b94c      	cbnz	r4, 801f180 <_calloc_r+0x1c>
 801f16c:	4611      	mov	r1, r2
 801f16e:	9201      	str	r2, [sp, #4]
 801f170:	f000 f87a 	bl	801f268 <_malloc_r>
 801f174:	9a01      	ldr	r2, [sp, #4]
 801f176:	4605      	mov	r5, r0
 801f178:	b930      	cbnz	r0, 801f188 <_calloc_r+0x24>
 801f17a:	4628      	mov	r0, r5
 801f17c:	b003      	add	sp, #12
 801f17e:	bd30      	pop	{r4, r5, pc}
 801f180:	220c      	movs	r2, #12
 801f182:	6002      	str	r2, [r0, #0]
 801f184:	2500      	movs	r5, #0
 801f186:	e7f8      	b.n	801f17a <_calloc_r+0x16>
 801f188:	4621      	mov	r1, r4
 801f18a:	f7ff ffe3 	bl	801f154 <memset>
 801f18e:	e7f4      	b.n	801f17a <_calloc_r+0x16>

0801f190 <_free_r>:
 801f190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f192:	2900      	cmp	r1, #0
 801f194:	d044      	beq.n	801f220 <_free_r+0x90>
 801f196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f19a:	9001      	str	r0, [sp, #4]
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	f1a1 0404 	sub.w	r4, r1, #4
 801f1a2:	bfb8      	it	lt
 801f1a4:	18e4      	addlt	r4, r4, r3
 801f1a6:	f000 f937 	bl	801f418 <__malloc_lock>
 801f1aa:	4a1e      	ldr	r2, [pc, #120]	; (801f224 <_free_r+0x94>)
 801f1ac:	9801      	ldr	r0, [sp, #4]
 801f1ae:	6813      	ldr	r3, [r2, #0]
 801f1b0:	b933      	cbnz	r3, 801f1c0 <_free_r+0x30>
 801f1b2:	6063      	str	r3, [r4, #4]
 801f1b4:	6014      	str	r4, [r2, #0]
 801f1b6:	b003      	add	sp, #12
 801f1b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f1bc:	f000 b932 	b.w	801f424 <__malloc_unlock>
 801f1c0:	42a3      	cmp	r3, r4
 801f1c2:	d908      	bls.n	801f1d6 <_free_r+0x46>
 801f1c4:	6825      	ldr	r5, [r4, #0]
 801f1c6:	1961      	adds	r1, r4, r5
 801f1c8:	428b      	cmp	r3, r1
 801f1ca:	bf01      	itttt	eq
 801f1cc:	6819      	ldreq	r1, [r3, #0]
 801f1ce:	685b      	ldreq	r3, [r3, #4]
 801f1d0:	1949      	addeq	r1, r1, r5
 801f1d2:	6021      	streq	r1, [r4, #0]
 801f1d4:	e7ed      	b.n	801f1b2 <_free_r+0x22>
 801f1d6:	461a      	mov	r2, r3
 801f1d8:	685b      	ldr	r3, [r3, #4]
 801f1da:	b10b      	cbz	r3, 801f1e0 <_free_r+0x50>
 801f1dc:	42a3      	cmp	r3, r4
 801f1de:	d9fa      	bls.n	801f1d6 <_free_r+0x46>
 801f1e0:	6811      	ldr	r1, [r2, #0]
 801f1e2:	1855      	adds	r5, r2, r1
 801f1e4:	42a5      	cmp	r5, r4
 801f1e6:	d10b      	bne.n	801f200 <_free_r+0x70>
 801f1e8:	6824      	ldr	r4, [r4, #0]
 801f1ea:	4421      	add	r1, r4
 801f1ec:	1854      	adds	r4, r2, r1
 801f1ee:	42a3      	cmp	r3, r4
 801f1f0:	6011      	str	r1, [r2, #0]
 801f1f2:	d1e0      	bne.n	801f1b6 <_free_r+0x26>
 801f1f4:	681c      	ldr	r4, [r3, #0]
 801f1f6:	685b      	ldr	r3, [r3, #4]
 801f1f8:	6053      	str	r3, [r2, #4]
 801f1fa:	4421      	add	r1, r4
 801f1fc:	6011      	str	r1, [r2, #0]
 801f1fe:	e7da      	b.n	801f1b6 <_free_r+0x26>
 801f200:	d902      	bls.n	801f208 <_free_r+0x78>
 801f202:	230c      	movs	r3, #12
 801f204:	6003      	str	r3, [r0, #0]
 801f206:	e7d6      	b.n	801f1b6 <_free_r+0x26>
 801f208:	6825      	ldr	r5, [r4, #0]
 801f20a:	1961      	adds	r1, r4, r5
 801f20c:	428b      	cmp	r3, r1
 801f20e:	bf04      	itt	eq
 801f210:	6819      	ldreq	r1, [r3, #0]
 801f212:	685b      	ldreq	r3, [r3, #4]
 801f214:	6063      	str	r3, [r4, #4]
 801f216:	bf04      	itt	eq
 801f218:	1949      	addeq	r1, r1, r5
 801f21a:	6021      	streq	r1, [r4, #0]
 801f21c:	6054      	str	r4, [r2, #4]
 801f21e:	e7ca      	b.n	801f1b6 <_free_r+0x26>
 801f220:	b003      	add	sp, #12
 801f222:	bd30      	pop	{r4, r5, pc}
 801f224:	20019584 	.word	0x20019584

0801f228 <sbrk_aligned>:
 801f228:	b570      	push	{r4, r5, r6, lr}
 801f22a:	4e0e      	ldr	r6, [pc, #56]	; (801f264 <sbrk_aligned+0x3c>)
 801f22c:	460c      	mov	r4, r1
 801f22e:	6831      	ldr	r1, [r6, #0]
 801f230:	4605      	mov	r5, r0
 801f232:	b911      	cbnz	r1, 801f23a <sbrk_aligned+0x12>
 801f234:	f000 f88c 	bl	801f350 <_sbrk_r>
 801f238:	6030      	str	r0, [r6, #0]
 801f23a:	4621      	mov	r1, r4
 801f23c:	4628      	mov	r0, r5
 801f23e:	f000 f887 	bl	801f350 <_sbrk_r>
 801f242:	1c43      	adds	r3, r0, #1
 801f244:	d00a      	beq.n	801f25c <sbrk_aligned+0x34>
 801f246:	1cc4      	adds	r4, r0, #3
 801f248:	f024 0403 	bic.w	r4, r4, #3
 801f24c:	42a0      	cmp	r0, r4
 801f24e:	d007      	beq.n	801f260 <sbrk_aligned+0x38>
 801f250:	1a21      	subs	r1, r4, r0
 801f252:	4628      	mov	r0, r5
 801f254:	f000 f87c 	bl	801f350 <_sbrk_r>
 801f258:	3001      	adds	r0, #1
 801f25a:	d101      	bne.n	801f260 <sbrk_aligned+0x38>
 801f25c:	f04f 34ff 	mov.w	r4, #4294967295
 801f260:	4620      	mov	r0, r4
 801f262:	bd70      	pop	{r4, r5, r6, pc}
 801f264:	20019588 	.word	0x20019588

0801f268 <_malloc_r>:
 801f268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f26c:	1ccd      	adds	r5, r1, #3
 801f26e:	f025 0503 	bic.w	r5, r5, #3
 801f272:	3508      	adds	r5, #8
 801f274:	2d0c      	cmp	r5, #12
 801f276:	bf38      	it	cc
 801f278:	250c      	movcc	r5, #12
 801f27a:	2d00      	cmp	r5, #0
 801f27c:	4607      	mov	r7, r0
 801f27e:	db01      	blt.n	801f284 <_malloc_r+0x1c>
 801f280:	42a9      	cmp	r1, r5
 801f282:	d905      	bls.n	801f290 <_malloc_r+0x28>
 801f284:	230c      	movs	r3, #12
 801f286:	603b      	str	r3, [r7, #0]
 801f288:	2600      	movs	r6, #0
 801f28a:	4630      	mov	r0, r6
 801f28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f290:	4e2e      	ldr	r6, [pc, #184]	; (801f34c <_malloc_r+0xe4>)
 801f292:	f000 f8c1 	bl	801f418 <__malloc_lock>
 801f296:	6833      	ldr	r3, [r6, #0]
 801f298:	461c      	mov	r4, r3
 801f29a:	bb34      	cbnz	r4, 801f2ea <_malloc_r+0x82>
 801f29c:	4629      	mov	r1, r5
 801f29e:	4638      	mov	r0, r7
 801f2a0:	f7ff ffc2 	bl	801f228 <sbrk_aligned>
 801f2a4:	1c43      	adds	r3, r0, #1
 801f2a6:	4604      	mov	r4, r0
 801f2a8:	d14d      	bne.n	801f346 <_malloc_r+0xde>
 801f2aa:	6834      	ldr	r4, [r6, #0]
 801f2ac:	4626      	mov	r6, r4
 801f2ae:	2e00      	cmp	r6, #0
 801f2b0:	d140      	bne.n	801f334 <_malloc_r+0xcc>
 801f2b2:	6823      	ldr	r3, [r4, #0]
 801f2b4:	4631      	mov	r1, r6
 801f2b6:	4638      	mov	r0, r7
 801f2b8:	eb04 0803 	add.w	r8, r4, r3
 801f2bc:	f000 f848 	bl	801f350 <_sbrk_r>
 801f2c0:	4580      	cmp	r8, r0
 801f2c2:	d13a      	bne.n	801f33a <_malloc_r+0xd2>
 801f2c4:	6821      	ldr	r1, [r4, #0]
 801f2c6:	3503      	adds	r5, #3
 801f2c8:	1a6d      	subs	r5, r5, r1
 801f2ca:	f025 0503 	bic.w	r5, r5, #3
 801f2ce:	3508      	adds	r5, #8
 801f2d0:	2d0c      	cmp	r5, #12
 801f2d2:	bf38      	it	cc
 801f2d4:	250c      	movcc	r5, #12
 801f2d6:	4629      	mov	r1, r5
 801f2d8:	4638      	mov	r0, r7
 801f2da:	f7ff ffa5 	bl	801f228 <sbrk_aligned>
 801f2de:	3001      	adds	r0, #1
 801f2e0:	d02b      	beq.n	801f33a <_malloc_r+0xd2>
 801f2e2:	6823      	ldr	r3, [r4, #0]
 801f2e4:	442b      	add	r3, r5
 801f2e6:	6023      	str	r3, [r4, #0]
 801f2e8:	e00e      	b.n	801f308 <_malloc_r+0xa0>
 801f2ea:	6822      	ldr	r2, [r4, #0]
 801f2ec:	1b52      	subs	r2, r2, r5
 801f2ee:	d41e      	bmi.n	801f32e <_malloc_r+0xc6>
 801f2f0:	2a0b      	cmp	r2, #11
 801f2f2:	d916      	bls.n	801f322 <_malloc_r+0xba>
 801f2f4:	1961      	adds	r1, r4, r5
 801f2f6:	42a3      	cmp	r3, r4
 801f2f8:	6025      	str	r5, [r4, #0]
 801f2fa:	bf18      	it	ne
 801f2fc:	6059      	strne	r1, [r3, #4]
 801f2fe:	6863      	ldr	r3, [r4, #4]
 801f300:	bf08      	it	eq
 801f302:	6031      	streq	r1, [r6, #0]
 801f304:	5162      	str	r2, [r4, r5]
 801f306:	604b      	str	r3, [r1, #4]
 801f308:	4638      	mov	r0, r7
 801f30a:	f104 060b 	add.w	r6, r4, #11
 801f30e:	f000 f889 	bl	801f424 <__malloc_unlock>
 801f312:	f026 0607 	bic.w	r6, r6, #7
 801f316:	1d23      	adds	r3, r4, #4
 801f318:	1af2      	subs	r2, r6, r3
 801f31a:	d0b6      	beq.n	801f28a <_malloc_r+0x22>
 801f31c:	1b9b      	subs	r3, r3, r6
 801f31e:	50a3      	str	r3, [r4, r2]
 801f320:	e7b3      	b.n	801f28a <_malloc_r+0x22>
 801f322:	6862      	ldr	r2, [r4, #4]
 801f324:	42a3      	cmp	r3, r4
 801f326:	bf0c      	ite	eq
 801f328:	6032      	streq	r2, [r6, #0]
 801f32a:	605a      	strne	r2, [r3, #4]
 801f32c:	e7ec      	b.n	801f308 <_malloc_r+0xa0>
 801f32e:	4623      	mov	r3, r4
 801f330:	6864      	ldr	r4, [r4, #4]
 801f332:	e7b2      	b.n	801f29a <_malloc_r+0x32>
 801f334:	4634      	mov	r4, r6
 801f336:	6876      	ldr	r6, [r6, #4]
 801f338:	e7b9      	b.n	801f2ae <_malloc_r+0x46>
 801f33a:	230c      	movs	r3, #12
 801f33c:	603b      	str	r3, [r7, #0]
 801f33e:	4638      	mov	r0, r7
 801f340:	f000 f870 	bl	801f424 <__malloc_unlock>
 801f344:	e7a1      	b.n	801f28a <_malloc_r+0x22>
 801f346:	6025      	str	r5, [r4, #0]
 801f348:	e7de      	b.n	801f308 <_malloc_r+0xa0>
 801f34a:	bf00      	nop
 801f34c:	20019584 	.word	0x20019584

0801f350 <_sbrk_r>:
 801f350:	b538      	push	{r3, r4, r5, lr}
 801f352:	4d06      	ldr	r5, [pc, #24]	; (801f36c <_sbrk_r+0x1c>)
 801f354:	2300      	movs	r3, #0
 801f356:	4604      	mov	r4, r0
 801f358:	4608      	mov	r0, r1
 801f35a:	602b      	str	r3, [r5, #0]
 801f35c:	f7fd fffe 	bl	801d35c <_sbrk>
 801f360:	1c43      	adds	r3, r0, #1
 801f362:	d102      	bne.n	801f36a <_sbrk_r+0x1a>
 801f364:	682b      	ldr	r3, [r5, #0]
 801f366:	b103      	cbz	r3, 801f36a <_sbrk_r+0x1a>
 801f368:	6023      	str	r3, [r4, #0]
 801f36a:	bd38      	pop	{r3, r4, r5, pc}
 801f36c:	2001958c 	.word	0x2001958c

0801f370 <siprintf>:
 801f370:	b40e      	push	{r1, r2, r3}
 801f372:	b500      	push	{lr}
 801f374:	b09c      	sub	sp, #112	; 0x70
 801f376:	ab1d      	add	r3, sp, #116	; 0x74
 801f378:	9002      	str	r0, [sp, #8]
 801f37a:	9006      	str	r0, [sp, #24]
 801f37c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f380:	4809      	ldr	r0, [pc, #36]	; (801f3a8 <siprintf+0x38>)
 801f382:	9107      	str	r1, [sp, #28]
 801f384:	9104      	str	r1, [sp, #16]
 801f386:	4909      	ldr	r1, [pc, #36]	; (801f3ac <siprintf+0x3c>)
 801f388:	f853 2b04 	ldr.w	r2, [r3], #4
 801f38c:	9105      	str	r1, [sp, #20]
 801f38e:	6800      	ldr	r0, [r0, #0]
 801f390:	9301      	str	r3, [sp, #4]
 801f392:	a902      	add	r1, sp, #8
 801f394:	f000 f8a8 	bl	801f4e8 <_svfiprintf_r>
 801f398:	9b02      	ldr	r3, [sp, #8]
 801f39a:	2200      	movs	r2, #0
 801f39c:	701a      	strb	r2, [r3, #0]
 801f39e:	b01c      	add	sp, #112	; 0x70
 801f3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f3a4:	b003      	add	sp, #12
 801f3a6:	4770      	bx	lr
 801f3a8:	200000ac 	.word	0x200000ac
 801f3ac:	ffff0208 	.word	0xffff0208

0801f3b0 <strcat>:
 801f3b0:	b510      	push	{r4, lr}
 801f3b2:	4602      	mov	r2, r0
 801f3b4:	7814      	ldrb	r4, [r2, #0]
 801f3b6:	4613      	mov	r3, r2
 801f3b8:	3201      	adds	r2, #1
 801f3ba:	2c00      	cmp	r4, #0
 801f3bc:	d1fa      	bne.n	801f3b4 <strcat+0x4>
 801f3be:	3b01      	subs	r3, #1
 801f3c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f3c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f3c8:	2a00      	cmp	r2, #0
 801f3ca:	d1f9      	bne.n	801f3c0 <strcat+0x10>
 801f3cc:	bd10      	pop	{r4, pc}

0801f3ce <strcpy>:
 801f3ce:	4603      	mov	r3, r0
 801f3d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f3d4:	f803 2b01 	strb.w	r2, [r3], #1
 801f3d8:	2a00      	cmp	r2, #0
 801f3da:	d1f9      	bne.n	801f3d0 <strcpy+0x2>
 801f3dc:	4770      	bx	lr

0801f3de <wcscat>:
 801f3de:	b510      	push	{r4, lr}
 801f3e0:	4602      	mov	r2, r0
 801f3e2:	4613      	mov	r3, r2
 801f3e4:	f852 4b04 	ldr.w	r4, [r2], #4
 801f3e8:	2c00      	cmp	r4, #0
 801f3ea:	d1fa      	bne.n	801f3e2 <wcscat+0x4>
 801f3ec:	3904      	subs	r1, #4
 801f3ee:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801f3f2:	b90a      	cbnz	r2, 801f3f8 <wcscat+0x1a>
 801f3f4:	601a      	str	r2, [r3, #0]
 801f3f6:	bd10      	pop	{r4, pc}
 801f3f8:	f843 2b04 	str.w	r2, [r3], #4
 801f3fc:	e7f7      	b.n	801f3ee <wcscat+0x10>

0801f3fe <wcscpy>:
 801f3fe:	2300      	movs	r3, #0
 801f400:	6003      	str	r3, [r0, #0]
 801f402:	3904      	subs	r1, #4
 801f404:	4603      	mov	r3, r0
 801f406:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801f40a:	b90a      	cbnz	r2, 801f410 <wcscpy+0x12>
 801f40c:	601a      	str	r2, [r3, #0]
 801f40e:	4770      	bx	lr
 801f410:	f843 2b04 	str.w	r2, [r3], #4
 801f414:	e7f7      	b.n	801f406 <wcscpy+0x8>
	...

0801f418 <__malloc_lock>:
 801f418:	4801      	ldr	r0, [pc, #4]	; (801f420 <__malloc_lock+0x8>)
 801f41a:	f000 baf9 	b.w	801fa10 <__retarget_lock_acquire_recursive>
 801f41e:	bf00      	nop
 801f420:	20019590 	.word	0x20019590

0801f424 <__malloc_unlock>:
 801f424:	4801      	ldr	r0, [pc, #4]	; (801f42c <__malloc_unlock+0x8>)
 801f426:	f000 baf4 	b.w	801fa12 <__retarget_lock_release_recursive>
 801f42a:	bf00      	nop
 801f42c:	20019590 	.word	0x20019590

0801f430 <__ssputs_r>:
 801f430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f434:	688e      	ldr	r6, [r1, #8]
 801f436:	429e      	cmp	r6, r3
 801f438:	4682      	mov	sl, r0
 801f43a:	460c      	mov	r4, r1
 801f43c:	4690      	mov	r8, r2
 801f43e:	461f      	mov	r7, r3
 801f440:	d838      	bhi.n	801f4b4 <__ssputs_r+0x84>
 801f442:	898a      	ldrh	r2, [r1, #12]
 801f444:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f448:	d032      	beq.n	801f4b0 <__ssputs_r+0x80>
 801f44a:	6825      	ldr	r5, [r4, #0]
 801f44c:	6909      	ldr	r1, [r1, #16]
 801f44e:	eba5 0901 	sub.w	r9, r5, r1
 801f452:	6965      	ldr	r5, [r4, #20]
 801f454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f45c:	3301      	adds	r3, #1
 801f45e:	444b      	add	r3, r9
 801f460:	106d      	asrs	r5, r5, #1
 801f462:	429d      	cmp	r5, r3
 801f464:	bf38      	it	cc
 801f466:	461d      	movcc	r5, r3
 801f468:	0553      	lsls	r3, r2, #21
 801f46a:	d531      	bpl.n	801f4d0 <__ssputs_r+0xa0>
 801f46c:	4629      	mov	r1, r5
 801f46e:	f7ff fefb 	bl	801f268 <_malloc_r>
 801f472:	4606      	mov	r6, r0
 801f474:	b950      	cbnz	r0, 801f48c <__ssputs_r+0x5c>
 801f476:	230c      	movs	r3, #12
 801f478:	f8ca 3000 	str.w	r3, [sl]
 801f47c:	89a3      	ldrh	r3, [r4, #12]
 801f47e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f482:	81a3      	strh	r3, [r4, #12]
 801f484:	f04f 30ff 	mov.w	r0, #4294967295
 801f488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f48c:	6921      	ldr	r1, [r4, #16]
 801f48e:	464a      	mov	r2, r9
 801f490:	f7ff fe38 	bl	801f104 <memcpy>
 801f494:	89a3      	ldrh	r3, [r4, #12]
 801f496:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f49a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f49e:	81a3      	strh	r3, [r4, #12]
 801f4a0:	6126      	str	r6, [r4, #16]
 801f4a2:	6165      	str	r5, [r4, #20]
 801f4a4:	444e      	add	r6, r9
 801f4a6:	eba5 0509 	sub.w	r5, r5, r9
 801f4aa:	6026      	str	r6, [r4, #0]
 801f4ac:	60a5      	str	r5, [r4, #8]
 801f4ae:	463e      	mov	r6, r7
 801f4b0:	42be      	cmp	r6, r7
 801f4b2:	d900      	bls.n	801f4b6 <__ssputs_r+0x86>
 801f4b4:	463e      	mov	r6, r7
 801f4b6:	6820      	ldr	r0, [r4, #0]
 801f4b8:	4632      	mov	r2, r6
 801f4ba:	4641      	mov	r1, r8
 801f4bc:	f7ff fe30 	bl	801f120 <memmove>
 801f4c0:	68a3      	ldr	r3, [r4, #8]
 801f4c2:	1b9b      	subs	r3, r3, r6
 801f4c4:	60a3      	str	r3, [r4, #8]
 801f4c6:	6823      	ldr	r3, [r4, #0]
 801f4c8:	4433      	add	r3, r6
 801f4ca:	6023      	str	r3, [r4, #0]
 801f4cc:	2000      	movs	r0, #0
 801f4ce:	e7db      	b.n	801f488 <__ssputs_r+0x58>
 801f4d0:	462a      	mov	r2, r5
 801f4d2:	f000 fa9f 	bl	801fa14 <_realloc_r>
 801f4d6:	4606      	mov	r6, r0
 801f4d8:	2800      	cmp	r0, #0
 801f4da:	d1e1      	bne.n	801f4a0 <__ssputs_r+0x70>
 801f4dc:	6921      	ldr	r1, [r4, #16]
 801f4de:	4650      	mov	r0, sl
 801f4e0:	f7ff fe56 	bl	801f190 <_free_r>
 801f4e4:	e7c7      	b.n	801f476 <__ssputs_r+0x46>
	...

0801f4e8 <_svfiprintf_r>:
 801f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4ec:	4698      	mov	r8, r3
 801f4ee:	898b      	ldrh	r3, [r1, #12]
 801f4f0:	061b      	lsls	r3, r3, #24
 801f4f2:	b09d      	sub	sp, #116	; 0x74
 801f4f4:	4607      	mov	r7, r0
 801f4f6:	460d      	mov	r5, r1
 801f4f8:	4614      	mov	r4, r2
 801f4fa:	d50e      	bpl.n	801f51a <_svfiprintf_r+0x32>
 801f4fc:	690b      	ldr	r3, [r1, #16]
 801f4fe:	b963      	cbnz	r3, 801f51a <_svfiprintf_r+0x32>
 801f500:	2140      	movs	r1, #64	; 0x40
 801f502:	f7ff feb1 	bl	801f268 <_malloc_r>
 801f506:	6028      	str	r0, [r5, #0]
 801f508:	6128      	str	r0, [r5, #16]
 801f50a:	b920      	cbnz	r0, 801f516 <_svfiprintf_r+0x2e>
 801f50c:	230c      	movs	r3, #12
 801f50e:	603b      	str	r3, [r7, #0]
 801f510:	f04f 30ff 	mov.w	r0, #4294967295
 801f514:	e0d1      	b.n	801f6ba <_svfiprintf_r+0x1d2>
 801f516:	2340      	movs	r3, #64	; 0x40
 801f518:	616b      	str	r3, [r5, #20]
 801f51a:	2300      	movs	r3, #0
 801f51c:	9309      	str	r3, [sp, #36]	; 0x24
 801f51e:	2320      	movs	r3, #32
 801f520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f524:	f8cd 800c 	str.w	r8, [sp, #12]
 801f528:	2330      	movs	r3, #48	; 0x30
 801f52a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f6d4 <_svfiprintf_r+0x1ec>
 801f52e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f532:	f04f 0901 	mov.w	r9, #1
 801f536:	4623      	mov	r3, r4
 801f538:	469a      	mov	sl, r3
 801f53a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f53e:	b10a      	cbz	r2, 801f544 <_svfiprintf_r+0x5c>
 801f540:	2a25      	cmp	r2, #37	; 0x25
 801f542:	d1f9      	bne.n	801f538 <_svfiprintf_r+0x50>
 801f544:	ebba 0b04 	subs.w	fp, sl, r4
 801f548:	d00b      	beq.n	801f562 <_svfiprintf_r+0x7a>
 801f54a:	465b      	mov	r3, fp
 801f54c:	4622      	mov	r2, r4
 801f54e:	4629      	mov	r1, r5
 801f550:	4638      	mov	r0, r7
 801f552:	f7ff ff6d 	bl	801f430 <__ssputs_r>
 801f556:	3001      	adds	r0, #1
 801f558:	f000 80aa 	beq.w	801f6b0 <_svfiprintf_r+0x1c8>
 801f55c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f55e:	445a      	add	r2, fp
 801f560:	9209      	str	r2, [sp, #36]	; 0x24
 801f562:	f89a 3000 	ldrb.w	r3, [sl]
 801f566:	2b00      	cmp	r3, #0
 801f568:	f000 80a2 	beq.w	801f6b0 <_svfiprintf_r+0x1c8>
 801f56c:	2300      	movs	r3, #0
 801f56e:	f04f 32ff 	mov.w	r2, #4294967295
 801f572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f576:	f10a 0a01 	add.w	sl, sl, #1
 801f57a:	9304      	str	r3, [sp, #16]
 801f57c:	9307      	str	r3, [sp, #28]
 801f57e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f582:	931a      	str	r3, [sp, #104]	; 0x68
 801f584:	4654      	mov	r4, sl
 801f586:	2205      	movs	r2, #5
 801f588:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f58c:	4851      	ldr	r0, [pc, #324]	; (801f6d4 <_svfiprintf_r+0x1ec>)
 801f58e:	f7e0 fe4f 	bl	8000230 <memchr>
 801f592:	9a04      	ldr	r2, [sp, #16]
 801f594:	b9d8      	cbnz	r0, 801f5ce <_svfiprintf_r+0xe6>
 801f596:	06d0      	lsls	r0, r2, #27
 801f598:	bf44      	itt	mi
 801f59a:	2320      	movmi	r3, #32
 801f59c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f5a0:	0711      	lsls	r1, r2, #28
 801f5a2:	bf44      	itt	mi
 801f5a4:	232b      	movmi	r3, #43	; 0x2b
 801f5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f5aa:	f89a 3000 	ldrb.w	r3, [sl]
 801f5ae:	2b2a      	cmp	r3, #42	; 0x2a
 801f5b0:	d015      	beq.n	801f5de <_svfiprintf_r+0xf6>
 801f5b2:	9a07      	ldr	r2, [sp, #28]
 801f5b4:	4654      	mov	r4, sl
 801f5b6:	2000      	movs	r0, #0
 801f5b8:	f04f 0c0a 	mov.w	ip, #10
 801f5bc:	4621      	mov	r1, r4
 801f5be:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f5c2:	3b30      	subs	r3, #48	; 0x30
 801f5c4:	2b09      	cmp	r3, #9
 801f5c6:	d94e      	bls.n	801f666 <_svfiprintf_r+0x17e>
 801f5c8:	b1b0      	cbz	r0, 801f5f8 <_svfiprintf_r+0x110>
 801f5ca:	9207      	str	r2, [sp, #28]
 801f5cc:	e014      	b.n	801f5f8 <_svfiprintf_r+0x110>
 801f5ce:	eba0 0308 	sub.w	r3, r0, r8
 801f5d2:	fa09 f303 	lsl.w	r3, r9, r3
 801f5d6:	4313      	orrs	r3, r2
 801f5d8:	9304      	str	r3, [sp, #16]
 801f5da:	46a2      	mov	sl, r4
 801f5dc:	e7d2      	b.n	801f584 <_svfiprintf_r+0x9c>
 801f5de:	9b03      	ldr	r3, [sp, #12]
 801f5e0:	1d19      	adds	r1, r3, #4
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	9103      	str	r1, [sp, #12]
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	bfbb      	ittet	lt
 801f5ea:	425b      	neglt	r3, r3
 801f5ec:	f042 0202 	orrlt.w	r2, r2, #2
 801f5f0:	9307      	strge	r3, [sp, #28]
 801f5f2:	9307      	strlt	r3, [sp, #28]
 801f5f4:	bfb8      	it	lt
 801f5f6:	9204      	strlt	r2, [sp, #16]
 801f5f8:	7823      	ldrb	r3, [r4, #0]
 801f5fa:	2b2e      	cmp	r3, #46	; 0x2e
 801f5fc:	d10c      	bne.n	801f618 <_svfiprintf_r+0x130>
 801f5fe:	7863      	ldrb	r3, [r4, #1]
 801f600:	2b2a      	cmp	r3, #42	; 0x2a
 801f602:	d135      	bne.n	801f670 <_svfiprintf_r+0x188>
 801f604:	9b03      	ldr	r3, [sp, #12]
 801f606:	1d1a      	adds	r2, r3, #4
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	9203      	str	r2, [sp, #12]
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	bfb8      	it	lt
 801f610:	f04f 33ff 	movlt.w	r3, #4294967295
 801f614:	3402      	adds	r4, #2
 801f616:	9305      	str	r3, [sp, #20]
 801f618:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f6e4 <_svfiprintf_r+0x1fc>
 801f61c:	7821      	ldrb	r1, [r4, #0]
 801f61e:	2203      	movs	r2, #3
 801f620:	4650      	mov	r0, sl
 801f622:	f7e0 fe05 	bl	8000230 <memchr>
 801f626:	b140      	cbz	r0, 801f63a <_svfiprintf_r+0x152>
 801f628:	2340      	movs	r3, #64	; 0x40
 801f62a:	eba0 000a 	sub.w	r0, r0, sl
 801f62e:	fa03 f000 	lsl.w	r0, r3, r0
 801f632:	9b04      	ldr	r3, [sp, #16]
 801f634:	4303      	orrs	r3, r0
 801f636:	3401      	adds	r4, #1
 801f638:	9304      	str	r3, [sp, #16]
 801f63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f63e:	4826      	ldr	r0, [pc, #152]	; (801f6d8 <_svfiprintf_r+0x1f0>)
 801f640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f644:	2206      	movs	r2, #6
 801f646:	f7e0 fdf3 	bl	8000230 <memchr>
 801f64a:	2800      	cmp	r0, #0
 801f64c:	d038      	beq.n	801f6c0 <_svfiprintf_r+0x1d8>
 801f64e:	4b23      	ldr	r3, [pc, #140]	; (801f6dc <_svfiprintf_r+0x1f4>)
 801f650:	bb1b      	cbnz	r3, 801f69a <_svfiprintf_r+0x1b2>
 801f652:	9b03      	ldr	r3, [sp, #12]
 801f654:	3307      	adds	r3, #7
 801f656:	f023 0307 	bic.w	r3, r3, #7
 801f65a:	3308      	adds	r3, #8
 801f65c:	9303      	str	r3, [sp, #12]
 801f65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f660:	4433      	add	r3, r6
 801f662:	9309      	str	r3, [sp, #36]	; 0x24
 801f664:	e767      	b.n	801f536 <_svfiprintf_r+0x4e>
 801f666:	fb0c 3202 	mla	r2, ip, r2, r3
 801f66a:	460c      	mov	r4, r1
 801f66c:	2001      	movs	r0, #1
 801f66e:	e7a5      	b.n	801f5bc <_svfiprintf_r+0xd4>
 801f670:	2300      	movs	r3, #0
 801f672:	3401      	adds	r4, #1
 801f674:	9305      	str	r3, [sp, #20]
 801f676:	4619      	mov	r1, r3
 801f678:	f04f 0c0a 	mov.w	ip, #10
 801f67c:	4620      	mov	r0, r4
 801f67e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f682:	3a30      	subs	r2, #48	; 0x30
 801f684:	2a09      	cmp	r2, #9
 801f686:	d903      	bls.n	801f690 <_svfiprintf_r+0x1a8>
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d0c5      	beq.n	801f618 <_svfiprintf_r+0x130>
 801f68c:	9105      	str	r1, [sp, #20]
 801f68e:	e7c3      	b.n	801f618 <_svfiprintf_r+0x130>
 801f690:	fb0c 2101 	mla	r1, ip, r1, r2
 801f694:	4604      	mov	r4, r0
 801f696:	2301      	movs	r3, #1
 801f698:	e7f0      	b.n	801f67c <_svfiprintf_r+0x194>
 801f69a:	ab03      	add	r3, sp, #12
 801f69c:	9300      	str	r3, [sp, #0]
 801f69e:	462a      	mov	r2, r5
 801f6a0:	4b0f      	ldr	r3, [pc, #60]	; (801f6e0 <_svfiprintf_r+0x1f8>)
 801f6a2:	a904      	add	r1, sp, #16
 801f6a4:	4638      	mov	r0, r7
 801f6a6:	f3af 8000 	nop.w
 801f6aa:	1c42      	adds	r2, r0, #1
 801f6ac:	4606      	mov	r6, r0
 801f6ae:	d1d6      	bne.n	801f65e <_svfiprintf_r+0x176>
 801f6b0:	89ab      	ldrh	r3, [r5, #12]
 801f6b2:	065b      	lsls	r3, r3, #25
 801f6b4:	f53f af2c 	bmi.w	801f510 <_svfiprintf_r+0x28>
 801f6b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f6ba:	b01d      	add	sp, #116	; 0x74
 801f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6c0:	ab03      	add	r3, sp, #12
 801f6c2:	9300      	str	r3, [sp, #0]
 801f6c4:	462a      	mov	r2, r5
 801f6c6:	4b06      	ldr	r3, [pc, #24]	; (801f6e0 <_svfiprintf_r+0x1f8>)
 801f6c8:	a904      	add	r1, sp, #16
 801f6ca:	4638      	mov	r0, r7
 801f6cc:	f000 f87a 	bl	801f7c4 <_printf_i>
 801f6d0:	e7eb      	b.n	801f6aa <_svfiprintf_r+0x1c2>
 801f6d2:	bf00      	nop
 801f6d4:	08024f7c 	.word	0x08024f7c
 801f6d8:	08024f86 	.word	0x08024f86
 801f6dc:	00000000 	.word	0x00000000
 801f6e0:	0801f431 	.word	0x0801f431
 801f6e4:	08024f82 	.word	0x08024f82

0801f6e8 <_printf_common>:
 801f6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6ec:	4616      	mov	r6, r2
 801f6ee:	4699      	mov	r9, r3
 801f6f0:	688a      	ldr	r2, [r1, #8]
 801f6f2:	690b      	ldr	r3, [r1, #16]
 801f6f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f6f8:	4293      	cmp	r3, r2
 801f6fa:	bfb8      	it	lt
 801f6fc:	4613      	movlt	r3, r2
 801f6fe:	6033      	str	r3, [r6, #0]
 801f700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f704:	4607      	mov	r7, r0
 801f706:	460c      	mov	r4, r1
 801f708:	b10a      	cbz	r2, 801f70e <_printf_common+0x26>
 801f70a:	3301      	adds	r3, #1
 801f70c:	6033      	str	r3, [r6, #0]
 801f70e:	6823      	ldr	r3, [r4, #0]
 801f710:	0699      	lsls	r1, r3, #26
 801f712:	bf42      	ittt	mi
 801f714:	6833      	ldrmi	r3, [r6, #0]
 801f716:	3302      	addmi	r3, #2
 801f718:	6033      	strmi	r3, [r6, #0]
 801f71a:	6825      	ldr	r5, [r4, #0]
 801f71c:	f015 0506 	ands.w	r5, r5, #6
 801f720:	d106      	bne.n	801f730 <_printf_common+0x48>
 801f722:	f104 0a19 	add.w	sl, r4, #25
 801f726:	68e3      	ldr	r3, [r4, #12]
 801f728:	6832      	ldr	r2, [r6, #0]
 801f72a:	1a9b      	subs	r3, r3, r2
 801f72c:	42ab      	cmp	r3, r5
 801f72e:	dc26      	bgt.n	801f77e <_printf_common+0x96>
 801f730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f734:	1e13      	subs	r3, r2, #0
 801f736:	6822      	ldr	r2, [r4, #0]
 801f738:	bf18      	it	ne
 801f73a:	2301      	movne	r3, #1
 801f73c:	0692      	lsls	r2, r2, #26
 801f73e:	d42b      	bmi.n	801f798 <_printf_common+0xb0>
 801f740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f744:	4649      	mov	r1, r9
 801f746:	4638      	mov	r0, r7
 801f748:	47c0      	blx	r8
 801f74a:	3001      	adds	r0, #1
 801f74c:	d01e      	beq.n	801f78c <_printf_common+0xa4>
 801f74e:	6823      	ldr	r3, [r4, #0]
 801f750:	68e5      	ldr	r5, [r4, #12]
 801f752:	6832      	ldr	r2, [r6, #0]
 801f754:	f003 0306 	and.w	r3, r3, #6
 801f758:	2b04      	cmp	r3, #4
 801f75a:	bf08      	it	eq
 801f75c:	1aad      	subeq	r5, r5, r2
 801f75e:	68a3      	ldr	r3, [r4, #8]
 801f760:	6922      	ldr	r2, [r4, #16]
 801f762:	bf0c      	ite	eq
 801f764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f768:	2500      	movne	r5, #0
 801f76a:	4293      	cmp	r3, r2
 801f76c:	bfc4      	itt	gt
 801f76e:	1a9b      	subgt	r3, r3, r2
 801f770:	18ed      	addgt	r5, r5, r3
 801f772:	2600      	movs	r6, #0
 801f774:	341a      	adds	r4, #26
 801f776:	42b5      	cmp	r5, r6
 801f778:	d11a      	bne.n	801f7b0 <_printf_common+0xc8>
 801f77a:	2000      	movs	r0, #0
 801f77c:	e008      	b.n	801f790 <_printf_common+0xa8>
 801f77e:	2301      	movs	r3, #1
 801f780:	4652      	mov	r2, sl
 801f782:	4649      	mov	r1, r9
 801f784:	4638      	mov	r0, r7
 801f786:	47c0      	blx	r8
 801f788:	3001      	adds	r0, #1
 801f78a:	d103      	bne.n	801f794 <_printf_common+0xac>
 801f78c:	f04f 30ff 	mov.w	r0, #4294967295
 801f790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f794:	3501      	adds	r5, #1
 801f796:	e7c6      	b.n	801f726 <_printf_common+0x3e>
 801f798:	18e1      	adds	r1, r4, r3
 801f79a:	1c5a      	adds	r2, r3, #1
 801f79c:	2030      	movs	r0, #48	; 0x30
 801f79e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f7a2:	4422      	add	r2, r4
 801f7a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f7a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f7ac:	3302      	adds	r3, #2
 801f7ae:	e7c7      	b.n	801f740 <_printf_common+0x58>
 801f7b0:	2301      	movs	r3, #1
 801f7b2:	4622      	mov	r2, r4
 801f7b4:	4649      	mov	r1, r9
 801f7b6:	4638      	mov	r0, r7
 801f7b8:	47c0      	blx	r8
 801f7ba:	3001      	adds	r0, #1
 801f7bc:	d0e6      	beq.n	801f78c <_printf_common+0xa4>
 801f7be:	3601      	adds	r6, #1
 801f7c0:	e7d9      	b.n	801f776 <_printf_common+0x8e>
	...

0801f7c4 <_printf_i>:
 801f7c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f7c8:	7e0f      	ldrb	r7, [r1, #24]
 801f7ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f7cc:	2f78      	cmp	r7, #120	; 0x78
 801f7ce:	4691      	mov	r9, r2
 801f7d0:	4680      	mov	r8, r0
 801f7d2:	460c      	mov	r4, r1
 801f7d4:	469a      	mov	sl, r3
 801f7d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f7da:	d807      	bhi.n	801f7ec <_printf_i+0x28>
 801f7dc:	2f62      	cmp	r7, #98	; 0x62
 801f7de:	d80a      	bhi.n	801f7f6 <_printf_i+0x32>
 801f7e0:	2f00      	cmp	r7, #0
 801f7e2:	f000 80d8 	beq.w	801f996 <_printf_i+0x1d2>
 801f7e6:	2f58      	cmp	r7, #88	; 0x58
 801f7e8:	f000 80a3 	beq.w	801f932 <_printf_i+0x16e>
 801f7ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f7f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f7f4:	e03a      	b.n	801f86c <_printf_i+0xa8>
 801f7f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f7fa:	2b15      	cmp	r3, #21
 801f7fc:	d8f6      	bhi.n	801f7ec <_printf_i+0x28>
 801f7fe:	a101      	add	r1, pc, #4	; (adr r1, 801f804 <_printf_i+0x40>)
 801f800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f804:	0801f85d 	.word	0x0801f85d
 801f808:	0801f871 	.word	0x0801f871
 801f80c:	0801f7ed 	.word	0x0801f7ed
 801f810:	0801f7ed 	.word	0x0801f7ed
 801f814:	0801f7ed 	.word	0x0801f7ed
 801f818:	0801f7ed 	.word	0x0801f7ed
 801f81c:	0801f871 	.word	0x0801f871
 801f820:	0801f7ed 	.word	0x0801f7ed
 801f824:	0801f7ed 	.word	0x0801f7ed
 801f828:	0801f7ed 	.word	0x0801f7ed
 801f82c:	0801f7ed 	.word	0x0801f7ed
 801f830:	0801f97d 	.word	0x0801f97d
 801f834:	0801f8a1 	.word	0x0801f8a1
 801f838:	0801f95f 	.word	0x0801f95f
 801f83c:	0801f7ed 	.word	0x0801f7ed
 801f840:	0801f7ed 	.word	0x0801f7ed
 801f844:	0801f99f 	.word	0x0801f99f
 801f848:	0801f7ed 	.word	0x0801f7ed
 801f84c:	0801f8a1 	.word	0x0801f8a1
 801f850:	0801f7ed 	.word	0x0801f7ed
 801f854:	0801f7ed 	.word	0x0801f7ed
 801f858:	0801f967 	.word	0x0801f967
 801f85c:	682b      	ldr	r3, [r5, #0]
 801f85e:	1d1a      	adds	r2, r3, #4
 801f860:	681b      	ldr	r3, [r3, #0]
 801f862:	602a      	str	r2, [r5, #0]
 801f864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f86c:	2301      	movs	r3, #1
 801f86e:	e0a3      	b.n	801f9b8 <_printf_i+0x1f4>
 801f870:	6820      	ldr	r0, [r4, #0]
 801f872:	6829      	ldr	r1, [r5, #0]
 801f874:	0606      	lsls	r6, r0, #24
 801f876:	f101 0304 	add.w	r3, r1, #4
 801f87a:	d50a      	bpl.n	801f892 <_printf_i+0xce>
 801f87c:	680e      	ldr	r6, [r1, #0]
 801f87e:	602b      	str	r3, [r5, #0]
 801f880:	2e00      	cmp	r6, #0
 801f882:	da03      	bge.n	801f88c <_printf_i+0xc8>
 801f884:	232d      	movs	r3, #45	; 0x2d
 801f886:	4276      	negs	r6, r6
 801f888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f88c:	485e      	ldr	r0, [pc, #376]	; (801fa08 <_printf_i+0x244>)
 801f88e:	230a      	movs	r3, #10
 801f890:	e019      	b.n	801f8c6 <_printf_i+0x102>
 801f892:	680e      	ldr	r6, [r1, #0]
 801f894:	602b      	str	r3, [r5, #0]
 801f896:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f89a:	bf18      	it	ne
 801f89c:	b236      	sxthne	r6, r6
 801f89e:	e7ef      	b.n	801f880 <_printf_i+0xbc>
 801f8a0:	682b      	ldr	r3, [r5, #0]
 801f8a2:	6820      	ldr	r0, [r4, #0]
 801f8a4:	1d19      	adds	r1, r3, #4
 801f8a6:	6029      	str	r1, [r5, #0]
 801f8a8:	0601      	lsls	r1, r0, #24
 801f8aa:	d501      	bpl.n	801f8b0 <_printf_i+0xec>
 801f8ac:	681e      	ldr	r6, [r3, #0]
 801f8ae:	e002      	b.n	801f8b6 <_printf_i+0xf2>
 801f8b0:	0646      	lsls	r6, r0, #25
 801f8b2:	d5fb      	bpl.n	801f8ac <_printf_i+0xe8>
 801f8b4:	881e      	ldrh	r6, [r3, #0]
 801f8b6:	4854      	ldr	r0, [pc, #336]	; (801fa08 <_printf_i+0x244>)
 801f8b8:	2f6f      	cmp	r7, #111	; 0x6f
 801f8ba:	bf0c      	ite	eq
 801f8bc:	2308      	moveq	r3, #8
 801f8be:	230a      	movne	r3, #10
 801f8c0:	2100      	movs	r1, #0
 801f8c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f8c6:	6865      	ldr	r5, [r4, #4]
 801f8c8:	60a5      	str	r5, [r4, #8]
 801f8ca:	2d00      	cmp	r5, #0
 801f8cc:	bfa2      	ittt	ge
 801f8ce:	6821      	ldrge	r1, [r4, #0]
 801f8d0:	f021 0104 	bicge.w	r1, r1, #4
 801f8d4:	6021      	strge	r1, [r4, #0]
 801f8d6:	b90e      	cbnz	r6, 801f8dc <_printf_i+0x118>
 801f8d8:	2d00      	cmp	r5, #0
 801f8da:	d04d      	beq.n	801f978 <_printf_i+0x1b4>
 801f8dc:	4615      	mov	r5, r2
 801f8de:	fbb6 f1f3 	udiv	r1, r6, r3
 801f8e2:	fb03 6711 	mls	r7, r3, r1, r6
 801f8e6:	5dc7      	ldrb	r7, [r0, r7]
 801f8e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f8ec:	4637      	mov	r7, r6
 801f8ee:	42bb      	cmp	r3, r7
 801f8f0:	460e      	mov	r6, r1
 801f8f2:	d9f4      	bls.n	801f8de <_printf_i+0x11a>
 801f8f4:	2b08      	cmp	r3, #8
 801f8f6:	d10b      	bne.n	801f910 <_printf_i+0x14c>
 801f8f8:	6823      	ldr	r3, [r4, #0]
 801f8fa:	07de      	lsls	r6, r3, #31
 801f8fc:	d508      	bpl.n	801f910 <_printf_i+0x14c>
 801f8fe:	6923      	ldr	r3, [r4, #16]
 801f900:	6861      	ldr	r1, [r4, #4]
 801f902:	4299      	cmp	r1, r3
 801f904:	bfde      	ittt	le
 801f906:	2330      	movle	r3, #48	; 0x30
 801f908:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f90c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f910:	1b52      	subs	r2, r2, r5
 801f912:	6122      	str	r2, [r4, #16]
 801f914:	f8cd a000 	str.w	sl, [sp]
 801f918:	464b      	mov	r3, r9
 801f91a:	aa03      	add	r2, sp, #12
 801f91c:	4621      	mov	r1, r4
 801f91e:	4640      	mov	r0, r8
 801f920:	f7ff fee2 	bl	801f6e8 <_printf_common>
 801f924:	3001      	adds	r0, #1
 801f926:	d14c      	bne.n	801f9c2 <_printf_i+0x1fe>
 801f928:	f04f 30ff 	mov.w	r0, #4294967295
 801f92c:	b004      	add	sp, #16
 801f92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f932:	4835      	ldr	r0, [pc, #212]	; (801fa08 <_printf_i+0x244>)
 801f934:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f938:	6829      	ldr	r1, [r5, #0]
 801f93a:	6823      	ldr	r3, [r4, #0]
 801f93c:	f851 6b04 	ldr.w	r6, [r1], #4
 801f940:	6029      	str	r1, [r5, #0]
 801f942:	061d      	lsls	r5, r3, #24
 801f944:	d514      	bpl.n	801f970 <_printf_i+0x1ac>
 801f946:	07df      	lsls	r7, r3, #31
 801f948:	bf44      	itt	mi
 801f94a:	f043 0320 	orrmi.w	r3, r3, #32
 801f94e:	6023      	strmi	r3, [r4, #0]
 801f950:	b91e      	cbnz	r6, 801f95a <_printf_i+0x196>
 801f952:	6823      	ldr	r3, [r4, #0]
 801f954:	f023 0320 	bic.w	r3, r3, #32
 801f958:	6023      	str	r3, [r4, #0]
 801f95a:	2310      	movs	r3, #16
 801f95c:	e7b0      	b.n	801f8c0 <_printf_i+0xfc>
 801f95e:	6823      	ldr	r3, [r4, #0]
 801f960:	f043 0320 	orr.w	r3, r3, #32
 801f964:	6023      	str	r3, [r4, #0]
 801f966:	2378      	movs	r3, #120	; 0x78
 801f968:	4828      	ldr	r0, [pc, #160]	; (801fa0c <_printf_i+0x248>)
 801f96a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f96e:	e7e3      	b.n	801f938 <_printf_i+0x174>
 801f970:	0659      	lsls	r1, r3, #25
 801f972:	bf48      	it	mi
 801f974:	b2b6      	uxthmi	r6, r6
 801f976:	e7e6      	b.n	801f946 <_printf_i+0x182>
 801f978:	4615      	mov	r5, r2
 801f97a:	e7bb      	b.n	801f8f4 <_printf_i+0x130>
 801f97c:	682b      	ldr	r3, [r5, #0]
 801f97e:	6826      	ldr	r6, [r4, #0]
 801f980:	6961      	ldr	r1, [r4, #20]
 801f982:	1d18      	adds	r0, r3, #4
 801f984:	6028      	str	r0, [r5, #0]
 801f986:	0635      	lsls	r5, r6, #24
 801f988:	681b      	ldr	r3, [r3, #0]
 801f98a:	d501      	bpl.n	801f990 <_printf_i+0x1cc>
 801f98c:	6019      	str	r1, [r3, #0]
 801f98e:	e002      	b.n	801f996 <_printf_i+0x1d2>
 801f990:	0670      	lsls	r0, r6, #25
 801f992:	d5fb      	bpl.n	801f98c <_printf_i+0x1c8>
 801f994:	8019      	strh	r1, [r3, #0]
 801f996:	2300      	movs	r3, #0
 801f998:	6123      	str	r3, [r4, #16]
 801f99a:	4615      	mov	r5, r2
 801f99c:	e7ba      	b.n	801f914 <_printf_i+0x150>
 801f99e:	682b      	ldr	r3, [r5, #0]
 801f9a0:	1d1a      	adds	r2, r3, #4
 801f9a2:	602a      	str	r2, [r5, #0]
 801f9a4:	681d      	ldr	r5, [r3, #0]
 801f9a6:	6862      	ldr	r2, [r4, #4]
 801f9a8:	2100      	movs	r1, #0
 801f9aa:	4628      	mov	r0, r5
 801f9ac:	f7e0 fc40 	bl	8000230 <memchr>
 801f9b0:	b108      	cbz	r0, 801f9b6 <_printf_i+0x1f2>
 801f9b2:	1b40      	subs	r0, r0, r5
 801f9b4:	6060      	str	r0, [r4, #4]
 801f9b6:	6863      	ldr	r3, [r4, #4]
 801f9b8:	6123      	str	r3, [r4, #16]
 801f9ba:	2300      	movs	r3, #0
 801f9bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f9c0:	e7a8      	b.n	801f914 <_printf_i+0x150>
 801f9c2:	6923      	ldr	r3, [r4, #16]
 801f9c4:	462a      	mov	r2, r5
 801f9c6:	4649      	mov	r1, r9
 801f9c8:	4640      	mov	r0, r8
 801f9ca:	47d0      	blx	sl
 801f9cc:	3001      	adds	r0, #1
 801f9ce:	d0ab      	beq.n	801f928 <_printf_i+0x164>
 801f9d0:	6823      	ldr	r3, [r4, #0]
 801f9d2:	079b      	lsls	r3, r3, #30
 801f9d4:	d413      	bmi.n	801f9fe <_printf_i+0x23a>
 801f9d6:	68e0      	ldr	r0, [r4, #12]
 801f9d8:	9b03      	ldr	r3, [sp, #12]
 801f9da:	4298      	cmp	r0, r3
 801f9dc:	bfb8      	it	lt
 801f9de:	4618      	movlt	r0, r3
 801f9e0:	e7a4      	b.n	801f92c <_printf_i+0x168>
 801f9e2:	2301      	movs	r3, #1
 801f9e4:	4632      	mov	r2, r6
 801f9e6:	4649      	mov	r1, r9
 801f9e8:	4640      	mov	r0, r8
 801f9ea:	47d0      	blx	sl
 801f9ec:	3001      	adds	r0, #1
 801f9ee:	d09b      	beq.n	801f928 <_printf_i+0x164>
 801f9f0:	3501      	adds	r5, #1
 801f9f2:	68e3      	ldr	r3, [r4, #12]
 801f9f4:	9903      	ldr	r1, [sp, #12]
 801f9f6:	1a5b      	subs	r3, r3, r1
 801f9f8:	42ab      	cmp	r3, r5
 801f9fa:	dcf2      	bgt.n	801f9e2 <_printf_i+0x21e>
 801f9fc:	e7eb      	b.n	801f9d6 <_printf_i+0x212>
 801f9fe:	2500      	movs	r5, #0
 801fa00:	f104 0619 	add.w	r6, r4, #25
 801fa04:	e7f5      	b.n	801f9f2 <_printf_i+0x22e>
 801fa06:	bf00      	nop
 801fa08:	08024f8d 	.word	0x08024f8d
 801fa0c:	08024f9e 	.word	0x08024f9e

0801fa10 <__retarget_lock_acquire_recursive>:
 801fa10:	4770      	bx	lr

0801fa12 <__retarget_lock_release_recursive>:
 801fa12:	4770      	bx	lr

0801fa14 <_realloc_r>:
 801fa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa18:	4680      	mov	r8, r0
 801fa1a:	4614      	mov	r4, r2
 801fa1c:	460e      	mov	r6, r1
 801fa1e:	b921      	cbnz	r1, 801fa2a <_realloc_r+0x16>
 801fa20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fa24:	4611      	mov	r1, r2
 801fa26:	f7ff bc1f 	b.w	801f268 <_malloc_r>
 801fa2a:	b92a      	cbnz	r2, 801fa38 <_realloc_r+0x24>
 801fa2c:	f7ff fbb0 	bl	801f190 <_free_r>
 801fa30:	4625      	mov	r5, r4
 801fa32:	4628      	mov	r0, r5
 801fa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa38:	f000 f81b 	bl	801fa72 <_malloc_usable_size_r>
 801fa3c:	4284      	cmp	r4, r0
 801fa3e:	4607      	mov	r7, r0
 801fa40:	d802      	bhi.n	801fa48 <_realloc_r+0x34>
 801fa42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fa46:	d812      	bhi.n	801fa6e <_realloc_r+0x5a>
 801fa48:	4621      	mov	r1, r4
 801fa4a:	4640      	mov	r0, r8
 801fa4c:	f7ff fc0c 	bl	801f268 <_malloc_r>
 801fa50:	4605      	mov	r5, r0
 801fa52:	2800      	cmp	r0, #0
 801fa54:	d0ed      	beq.n	801fa32 <_realloc_r+0x1e>
 801fa56:	42bc      	cmp	r4, r7
 801fa58:	4622      	mov	r2, r4
 801fa5a:	4631      	mov	r1, r6
 801fa5c:	bf28      	it	cs
 801fa5e:	463a      	movcs	r2, r7
 801fa60:	f7ff fb50 	bl	801f104 <memcpy>
 801fa64:	4631      	mov	r1, r6
 801fa66:	4640      	mov	r0, r8
 801fa68:	f7ff fb92 	bl	801f190 <_free_r>
 801fa6c:	e7e1      	b.n	801fa32 <_realloc_r+0x1e>
 801fa6e:	4635      	mov	r5, r6
 801fa70:	e7df      	b.n	801fa32 <_realloc_r+0x1e>

0801fa72 <_malloc_usable_size_r>:
 801fa72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fa76:	1f18      	subs	r0, r3, #4
 801fa78:	2b00      	cmp	r3, #0
 801fa7a:	bfbc      	itt	lt
 801fa7c:	580b      	ldrlt	r3, [r1, r0]
 801fa7e:	18c0      	addlt	r0, r0, r3
 801fa80:	4770      	bx	lr
	...

0801fa84 <_init>:
 801fa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa86:	bf00      	nop
 801fa88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa8a:	bc08      	pop	{r3}
 801fa8c:	469e      	mov	lr, r3
 801fa8e:	4770      	bx	lr

0801fa90 <_fini>:
 801fa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa92:	bf00      	nop
 801fa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa96:	bc08      	pop	{r3}
 801fa98:	469e      	mov	lr, r3
 801fa9a:	4770      	bx	lr
