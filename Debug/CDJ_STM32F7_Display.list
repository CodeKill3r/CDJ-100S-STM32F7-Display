
CDJ_STM32F7_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019738  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051a4  08019908  08019908  00029908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801eaac  0801eaac  0002eaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801eab4  0801eab4  0002eab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801eab8  0801eab8  0002eab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  20000000  0801eabc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00017b88  20000140  0801ebfc  00030140  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20017cc8  0801ebfc  00037cc8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005f1fd  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b2d2  00000000  00000000  0008f36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00039106  00000000  00000000  0009a63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b00  00000000  00000000  000d3748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000028b8  00000000  00000000  000d6248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033834  00000000  00000000  000d8b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005a73f  00000000  00000000  0010c334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00105b08  00000000  00000000  00166a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0026c57b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000833c  00000000  00000000  0026c5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000140 	.word	0x20000140
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080198f0 	.word	0x080198f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000144 	.word	0x20000144
 800020c:	080198f0 	.word	0x080198f0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_uldivmod>:
 8000e78:	b953      	cbnz	r3, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7a:	b94a      	cbnz	r2, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	bf08      	it	eq
 8000e80:	2800      	cmpeq	r0, #0
 8000e82:	bf1c      	itt	ne
 8000e84:	f04f 31ff 	movne.w	r1, #4294967295
 8000e88:	f04f 30ff 	movne.w	r0, #4294967295
 8000e8c:	f000 b994 	b.w	80011b8 <__aeabi_idiv0>
 8000e90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e98:	f000 f826 	bl	8000ee8 <__udivmoddi4>
 8000e9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea4:	b004      	add	sp, #16
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_f2ulz>:
 8000ea8:	b5d0      	push	{r4, r6, r7, lr}
 8000eaa:	f7ff fb75 	bl	8000598 <__aeabi_f2d>
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__aeabi_f2ulz+0x38>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4606      	mov	r6, r0
 8000eb4:	460f      	mov	r7, r1
 8000eb6:	f7ff fbc7 	bl	8000648 <__aeabi_dmul>
 8000eba:	f7ff fe5f 	bl	8000b7c <__aeabi_d2uiz>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	f7ff fb48 	bl	8000554 <__aeabi_ui2d>
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <__aeabi_f2ulz+0x3c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f7ff fbbe 	bl	8000648 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	4639      	mov	r1, r7
 8000ed4:	f7ff fa00 	bl	80002d8 <__aeabi_dsub>
 8000ed8:	f7ff fe50 	bl	8000b7c <__aeabi_d2uiz>
 8000edc:	4621      	mov	r1, r4
 8000ede:	bdd0      	pop	{r4, r6, r7, pc}
 8000ee0:	3df00000 	.word	0x3df00000
 8000ee4:	41f00000 	.word	0x41f00000

08000ee8 <__udivmoddi4>:
 8000ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eec:	9d08      	ldr	r5, [sp, #32]
 8000eee:	4604      	mov	r4, r0
 8000ef0:	468e      	mov	lr, r1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d14d      	bne.n	8000f92 <__udivmoddi4+0xaa>
 8000ef6:	428a      	cmp	r2, r1
 8000ef8:	4694      	mov	ip, r2
 8000efa:	d969      	bls.n	8000fd0 <__udivmoddi4+0xe8>
 8000efc:	fab2 f282 	clz	r2, r2
 8000f00:	b152      	cbz	r2, 8000f18 <__udivmoddi4+0x30>
 8000f02:	fa01 f302 	lsl.w	r3, r1, r2
 8000f06:	f1c2 0120 	rsb	r1, r2, #32
 8000f0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000f0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f12:	ea41 0e03 	orr.w	lr, r1, r3
 8000f16:	4094      	lsls	r4, r2
 8000f18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f1c:	0c21      	lsrs	r1, r4, #16
 8000f1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000f22:	fa1f f78c 	uxth.w	r7, ip
 8000f26:	fb08 e316 	mls	r3, r8, r6, lr
 8000f2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f2e:	fb06 f107 	mul.w	r1, r6, r7
 8000f32:	4299      	cmp	r1, r3
 8000f34:	d90a      	bls.n	8000f4c <__udivmoddi4+0x64>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f3e:	f080 811f 	bcs.w	8001180 <__udivmoddi4+0x298>
 8000f42:	4299      	cmp	r1, r3
 8000f44:	f240 811c 	bls.w	8001180 <__udivmoddi4+0x298>
 8000f48:	3e02      	subs	r6, #2
 8000f4a:	4463      	add	r3, ip
 8000f4c:	1a5b      	subs	r3, r3, r1
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f54:	fb08 3310 	mls	r3, r8, r0, r3
 8000f58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f5c:	fb00 f707 	mul.w	r7, r0, r7
 8000f60:	42a7      	cmp	r7, r4
 8000f62:	d90a      	bls.n	8000f7a <__udivmoddi4+0x92>
 8000f64:	eb1c 0404 	adds.w	r4, ip, r4
 8000f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f6c:	f080 810a 	bcs.w	8001184 <__udivmoddi4+0x29c>
 8000f70:	42a7      	cmp	r7, r4
 8000f72:	f240 8107 	bls.w	8001184 <__udivmoddi4+0x29c>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f7e:	1be4      	subs	r4, r4, r7
 8000f80:	2600      	movs	r6, #0
 8000f82:	b11d      	cbz	r5, 8000f8c <__udivmoddi4+0xa4>
 8000f84:	40d4      	lsrs	r4, r2
 8000f86:	2300      	movs	r3, #0
 8000f88:	e9c5 4300 	strd	r4, r3, [r5]
 8000f8c:	4631      	mov	r1, r6
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d909      	bls.n	8000faa <__udivmoddi4+0xc2>
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	f000 80ef 	beq.w	800117a <__udivmoddi4+0x292>
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	fab3 f683 	clz	r6, r3
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d14a      	bne.n	8001048 <__udivmoddi4+0x160>
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	d302      	bcc.n	8000fbc <__udivmoddi4+0xd4>
 8000fb6:	4282      	cmp	r2, r0
 8000fb8:	f200 80f9 	bhi.w	80011ae <__udivmoddi4+0x2c6>
 8000fbc:	1a84      	subs	r4, r0, r2
 8000fbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	469e      	mov	lr, r3
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d0e0      	beq.n	8000f8c <__udivmoddi4+0xa4>
 8000fca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000fce:	e7dd      	b.n	8000f8c <__udivmoddi4+0xa4>
 8000fd0:	b902      	cbnz	r2, 8000fd4 <__udivmoddi4+0xec>
 8000fd2:	deff      	udf	#255	; 0xff
 8000fd4:	fab2 f282 	clz	r2, r2
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	f040 8092 	bne.w	8001102 <__udivmoddi4+0x21a>
 8000fde:	eba1 010c 	sub.w	r1, r1, ip
 8000fe2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe6:	fa1f fe8c 	uxth.w	lr, ip
 8000fea:	2601      	movs	r6, #1
 8000fec:	0c20      	lsrs	r0, r4, #16
 8000fee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ff2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ff6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ffa:	fb0e f003 	mul.w	r0, lr, r3
 8000ffe:	4288      	cmp	r0, r1
 8001000:	d908      	bls.n	8001014 <__udivmoddi4+0x12c>
 8001002:	eb1c 0101 	adds.w	r1, ip, r1
 8001006:	f103 38ff 	add.w	r8, r3, #4294967295
 800100a:	d202      	bcs.n	8001012 <__udivmoddi4+0x12a>
 800100c:	4288      	cmp	r0, r1
 800100e:	f200 80cb 	bhi.w	80011a8 <__udivmoddi4+0x2c0>
 8001012:	4643      	mov	r3, r8
 8001014:	1a09      	subs	r1, r1, r0
 8001016:	b2a4      	uxth	r4, r4
 8001018:	fbb1 f0f7 	udiv	r0, r1, r7
 800101c:	fb07 1110 	mls	r1, r7, r0, r1
 8001020:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001024:	fb0e fe00 	mul.w	lr, lr, r0
 8001028:	45a6      	cmp	lr, r4
 800102a:	d908      	bls.n	800103e <__udivmoddi4+0x156>
 800102c:	eb1c 0404 	adds.w	r4, ip, r4
 8001030:	f100 31ff 	add.w	r1, r0, #4294967295
 8001034:	d202      	bcs.n	800103c <__udivmoddi4+0x154>
 8001036:	45a6      	cmp	lr, r4
 8001038:	f200 80bb 	bhi.w	80011b2 <__udivmoddi4+0x2ca>
 800103c:	4608      	mov	r0, r1
 800103e:	eba4 040e 	sub.w	r4, r4, lr
 8001042:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001046:	e79c      	b.n	8000f82 <__udivmoddi4+0x9a>
 8001048:	f1c6 0720 	rsb	r7, r6, #32
 800104c:	40b3      	lsls	r3, r6
 800104e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001052:	ea4c 0c03 	orr.w	ip, ip, r3
 8001056:	fa20 f407 	lsr.w	r4, r0, r7
 800105a:	fa01 f306 	lsl.w	r3, r1, r6
 800105e:	431c      	orrs	r4, r3
 8001060:	40f9      	lsrs	r1, r7
 8001062:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001066:	fa00 f306 	lsl.w	r3, r0, r6
 800106a:	fbb1 f8f9 	udiv	r8, r1, r9
 800106e:	0c20      	lsrs	r0, r4, #16
 8001070:	fa1f fe8c 	uxth.w	lr, ip
 8001074:	fb09 1118 	mls	r1, r9, r8, r1
 8001078:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800107c:	fb08 f00e 	mul.w	r0, r8, lr
 8001080:	4288      	cmp	r0, r1
 8001082:	fa02 f206 	lsl.w	r2, r2, r6
 8001086:	d90b      	bls.n	80010a0 <__udivmoddi4+0x1b8>
 8001088:	eb1c 0101 	adds.w	r1, ip, r1
 800108c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001090:	f080 8088 	bcs.w	80011a4 <__udivmoddi4+0x2bc>
 8001094:	4288      	cmp	r0, r1
 8001096:	f240 8085 	bls.w	80011a4 <__udivmoddi4+0x2bc>
 800109a:	f1a8 0802 	sub.w	r8, r8, #2
 800109e:	4461      	add	r1, ip
 80010a0:	1a09      	subs	r1, r1, r0
 80010a2:	b2a4      	uxth	r4, r4
 80010a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80010a8:	fb09 1110 	mls	r1, r9, r0, r1
 80010ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80010b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80010b4:	458e      	cmp	lr, r1
 80010b6:	d908      	bls.n	80010ca <__udivmoddi4+0x1e2>
 80010b8:	eb1c 0101 	adds.w	r1, ip, r1
 80010bc:	f100 34ff 	add.w	r4, r0, #4294967295
 80010c0:	d26c      	bcs.n	800119c <__udivmoddi4+0x2b4>
 80010c2:	458e      	cmp	lr, r1
 80010c4:	d96a      	bls.n	800119c <__udivmoddi4+0x2b4>
 80010c6:	3802      	subs	r0, #2
 80010c8:	4461      	add	r1, ip
 80010ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010ce:	fba0 9402 	umull	r9, r4, r0, r2
 80010d2:	eba1 010e 	sub.w	r1, r1, lr
 80010d6:	42a1      	cmp	r1, r4
 80010d8:	46c8      	mov	r8, r9
 80010da:	46a6      	mov	lr, r4
 80010dc:	d356      	bcc.n	800118c <__udivmoddi4+0x2a4>
 80010de:	d053      	beq.n	8001188 <__udivmoddi4+0x2a0>
 80010e0:	b15d      	cbz	r5, 80010fa <__udivmoddi4+0x212>
 80010e2:	ebb3 0208 	subs.w	r2, r3, r8
 80010e6:	eb61 010e 	sbc.w	r1, r1, lr
 80010ea:	fa01 f707 	lsl.w	r7, r1, r7
 80010ee:	fa22 f306 	lsr.w	r3, r2, r6
 80010f2:	40f1      	lsrs	r1, r6
 80010f4:	431f      	orrs	r7, r3
 80010f6:	e9c5 7100 	strd	r7, r1, [r5]
 80010fa:	2600      	movs	r6, #0
 80010fc:	4631      	mov	r1, r6
 80010fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001102:	f1c2 0320 	rsb	r3, r2, #32
 8001106:	40d8      	lsrs	r0, r3
 8001108:	fa0c fc02 	lsl.w	ip, ip, r2
 800110c:	fa21 f303 	lsr.w	r3, r1, r3
 8001110:	4091      	lsls	r1, r2
 8001112:	4301      	orrs	r1, r0
 8001114:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001118:	fa1f fe8c 	uxth.w	lr, ip
 800111c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001120:	fb07 3610 	mls	r6, r7, r0, r3
 8001124:	0c0b      	lsrs	r3, r1, #16
 8001126:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800112a:	fb00 f60e 	mul.w	r6, r0, lr
 800112e:	429e      	cmp	r6, r3
 8001130:	fa04 f402 	lsl.w	r4, r4, r2
 8001134:	d908      	bls.n	8001148 <__udivmoddi4+0x260>
 8001136:	eb1c 0303 	adds.w	r3, ip, r3
 800113a:	f100 38ff 	add.w	r8, r0, #4294967295
 800113e:	d22f      	bcs.n	80011a0 <__udivmoddi4+0x2b8>
 8001140:	429e      	cmp	r6, r3
 8001142:	d92d      	bls.n	80011a0 <__udivmoddi4+0x2b8>
 8001144:	3802      	subs	r0, #2
 8001146:	4463      	add	r3, ip
 8001148:	1b9b      	subs	r3, r3, r6
 800114a:	b289      	uxth	r1, r1
 800114c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001150:	fb07 3316 	mls	r3, r7, r6, r3
 8001154:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001158:	fb06 f30e 	mul.w	r3, r6, lr
 800115c:	428b      	cmp	r3, r1
 800115e:	d908      	bls.n	8001172 <__udivmoddi4+0x28a>
 8001160:	eb1c 0101 	adds.w	r1, ip, r1
 8001164:	f106 38ff 	add.w	r8, r6, #4294967295
 8001168:	d216      	bcs.n	8001198 <__udivmoddi4+0x2b0>
 800116a:	428b      	cmp	r3, r1
 800116c:	d914      	bls.n	8001198 <__udivmoddi4+0x2b0>
 800116e:	3e02      	subs	r6, #2
 8001170:	4461      	add	r1, ip
 8001172:	1ac9      	subs	r1, r1, r3
 8001174:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001178:	e738      	b.n	8000fec <__udivmoddi4+0x104>
 800117a:	462e      	mov	r6, r5
 800117c:	4628      	mov	r0, r5
 800117e:	e705      	b.n	8000f8c <__udivmoddi4+0xa4>
 8001180:	4606      	mov	r6, r0
 8001182:	e6e3      	b.n	8000f4c <__udivmoddi4+0x64>
 8001184:	4618      	mov	r0, r3
 8001186:	e6f8      	b.n	8000f7a <__udivmoddi4+0x92>
 8001188:	454b      	cmp	r3, r9
 800118a:	d2a9      	bcs.n	80010e0 <__udivmoddi4+0x1f8>
 800118c:	ebb9 0802 	subs.w	r8, r9, r2
 8001190:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001194:	3801      	subs	r0, #1
 8001196:	e7a3      	b.n	80010e0 <__udivmoddi4+0x1f8>
 8001198:	4646      	mov	r6, r8
 800119a:	e7ea      	b.n	8001172 <__udivmoddi4+0x28a>
 800119c:	4620      	mov	r0, r4
 800119e:	e794      	b.n	80010ca <__udivmoddi4+0x1e2>
 80011a0:	4640      	mov	r0, r8
 80011a2:	e7d1      	b.n	8001148 <__udivmoddi4+0x260>
 80011a4:	46d0      	mov	r8, sl
 80011a6:	e77b      	b.n	80010a0 <__udivmoddi4+0x1b8>
 80011a8:	3b02      	subs	r3, #2
 80011aa:	4461      	add	r1, ip
 80011ac:	e732      	b.n	8001014 <__udivmoddi4+0x12c>
 80011ae:	4630      	mov	r0, r6
 80011b0:	e709      	b.n	8000fc6 <__udivmoddi4+0xde>
 80011b2:	4464      	add	r4, ip
 80011b4:	3802      	subs	r0, #2
 80011b6:	e742      	b.n	800103e <__udivmoddi4+0x156>

080011b8 <__aeabi_idiv0>:
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b510      	push	{r4, lr}
 80011be:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_InitTick+0x40>)
 80011c2:	7818      	ldrb	r0, [r3, #0]
 80011c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <HAL_InitTick+0x44>)
 80011ce:	6810      	ldr	r0, [r2, #0]
 80011d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80011d4:	f000 f8e6 	bl	80013a4 <HAL_SYSTICK_Config>
 80011d8:	b968      	cbnz	r0, 80011f6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	2c0f      	cmp	r4, #15
 80011dc:	d901      	bls.n	80011e2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80011de:	2001      	movs	r0, #1
 80011e0:	e00a      	b.n	80011f8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e2:	2200      	movs	r2, #0
 80011e4:	4621      	mov	r1, r4
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	f000 f863 	bl	80012b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_InitTick+0x48>)
 80011f0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2000      	movs	r0, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80011f6:	2001      	movs	r0, #1
}
 80011f8:	bd10      	pop	{r4, pc}
 80011fa:	bf00      	nop
 80011fc:	20000000 	.word	0x20000000
 8001200:	200000a8 	.word	0x200000a8
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_Init>:
{
 8001208:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x20>)
 800120c:	6813      	ldr	r3, [r2, #0]
 800120e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001212:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f82f 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff ffce 	bl	80011bc <HAL_InitTick>
  HAL_MspInit();
 8001220:	f015 f982 	bl	8016528 <HAL_MspInit>
}
 8001224:	2000      	movs	r0, #0
 8001226:	bd08      	pop	{r3, pc}
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <HAL_IncTick+0x10>)
 800122e:	6811      	ldr	r1, [r2, #0]
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_IncTick+0x14>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	440b      	add	r3, r1
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000015c 	.word	0x2000015c
 8001240:	20000000 	.word	0x20000000

08001244 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001244:	4b01      	ldr	r3, [pc, #4]	; (800124c <HAL_GetTick+0x8>)
 8001246:	6818      	ldr	r0, [r3, #0]
}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2000015c 	.word	0x2000015c

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b538      	push	{r3, r4, r5, lr}
 8001252:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff fff6 	bl	8001244 <HAL_GetTick>
 8001258:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800125e:	d002      	beq.n	8001266 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_Delay+0x24>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001266:	f7ff ffed 	bl	8001244 <HAL_GetTick>
 800126a:	1b40      	subs	r0, r0, r5
 800126c:	42a0      	cmp	r0, r4
 800126e:	d3fa      	bcc.n	8001266 <HAL_Delay+0x16>
  {
  }
}
 8001270:	bd38      	pop	{r3, r4, r5, pc}
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b510      	push	{r4, lr}
 800127a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800127c:	1ec3      	subs	r3, r0, #3
 800127e:	2b04      	cmp	r3, #4
 8001280:	d80d      	bhi.n	800129e <HAL_NVIC_SetPriorityGrouping+0x26>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8001284:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800128a:	041b      	lsls	r3, r3, #16
 800128c:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128e:	0224      	lsls	r4, r4, #8
 8001290:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	431c      	orrs	r4, r3
  reg_value  =  (reg_value                                   |
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001298:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 800129a:	60d3      	str	r3, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800129c:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800129e:	2192      	movs	r1, #146	; 0x92
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80012a2:	f013 f913 	bl	80144cc <assert_failed>
 80012a6:	e7ec      	b.n	8001282 <HAL_NVIC_SetPriorityGrouping+0xa>
 80012a8:	e000ed00 	.word	0xe000ed00
 80012ac:	05fa0000 	.word	0x05fa0000
 80012b0:	08019910 	.word	0x08019910

080012b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	4605      	mov	r5, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80012bc:	2a0f      	cmp	r2, #15
 80012be:	d821      	bhi.n	8001304 <HAL_NVIC_SetPriority+0x50>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80012c0:	2c0f      	cmp	r4, #15
 80012c2:	d824      	bhi.n	800130e <HAL_NVIC_SetPriority+0x5a>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_NVIC_SetPriority+0x78>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	f1c3 0107 	rsb	r1, r3, #7
 80012d0:	2904      	cmp	r1, #4
 80012d2:	bf28      	it	cs
 80012d4:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	1d1a      	adds	r2, r3, #4
 80012d8:	2a06      	cmp	r2, #6
 80012da:	d91d      	bls.n	8001318 <HAL_NVIC_SetPriority+0x64>
 80012dc:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012de:	f04f 32ff 	mov.w	r2, #4294967295
 80012e2:	fa02 f101 	lsl.w	r1, r2, r1
 80012e6:	ea24 0401 	bic.w	r4, r4, r1
 80012ea:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 80012f6:	2d00      	cmp	r5, #0
 80012f8:	db10      	blt.n	800131c <HAL_NVIC_SetPriority+0x68>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	0124      	lsls	r4, r4, #4
 80012fc:	b2e4      	uxtb	r4, r4
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_NVIC_SetPriority+0x7c>)
 8001300:	555c      	strb	r4, [r3, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001302:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001304:	21aa      	movs	r1, #170	; 0xaa
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <HAL_NVIC_SetPriority+0x80>)
 8001308:	f013 f8e0 	bl	80144cc <assert_failed>
 800130c:	e7d8      	b.n	80012c0 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800130e:	21ab      	movs	r1, #171	; 0xab
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <HAL_NVIC_SetPriority+0x80>)
 8001312:	f013 f8db 	bl	80144cc <assert_failed>
 8001316:	e7d5      	b.n	80012c4 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001318:	2300      	movs	r3, #0
 800131a:	e7e0      	b.n	80012de <HAL_NVIC_SetPriority+0x2a>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	f005 050f 	and.w	r5, r5, #15
 8001320:	0124      	lsls	r4, r4, #4
 8001322:	b2e4      	uxtb	r4, r4
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_NVIC_SetPriority+0x84>)
 8001326:	555c      	strb	r4, [r3, r5]
}
 8001328:	e7eb      	b.n	8001302 <HAL_NVIC_SetPriority+0x4e>
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	e000e400 	.word	0xe000e400
 8001334:	08019910 	.word	0x08019910
 8001338:	e000ed14 	.word	0xe000ed14

0800133c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800133e:	1e04      	subs	r4, r0, #0
 8001340:	db0a      	blt.n	8001358 <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 8001342:	2c00      	cmp	r4, #0
 8001344:	db07      	blt.n	8001356 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	f004 021f 	and.w	r2, r4, #31
 800134a:	0964      	lsrs	r4, r4, #5
 800134c:	2301      	movs	r3, #1
 800134e:	4093      	lsls	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_NVIC_EnableIRQ+0x28>)
 8001352:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001356:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001358:	21be      	movs	r1, #190	; 0xbe
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <HAL_NVIC_EnableIRQ+0x2c>)
 800135c:	f013 f8b6 	bl	80144cc <assert_failed>
 8001360:	e7ef      	b.n	8001342 <HAL_NVIC_EnableIRQ+0x6>
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100
 8001368:	08019910 	.word	0x08019910

0800136c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800136c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800136e:	1e04      	subs	r4, r0, #0
 8001370:	db0f      	blt.n	8001392 <HAL_NVIC_DisableIRQ+0x26>
  if ((int32_t)(IRQn) >= 0)
 8001372:	2c00      	cmp	r4, #0
 8001374:	db0c      	blt.n	8001390 <HAL_NVIC_DisableIRQ+0x24>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	f004 021f 	and.w	r2, r4, #31
 800137a:	0964      	lsrs	r4, r4, #5
 800137c:	2301      	movs	r3, #1
 800137e:	4093      	lsls	r3, r2
 8001380:	3420      	adds	r4, #32
 8001382:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_NVIC_DisableIRQ+0x30>)
 8001384:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800138c:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001390:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001392:	21ce      	movs	r1, #206	; 0xce
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <HAL_NVIC_DisableIRQ+0x34>)
 8001396:	f013 f899 	bl	80144cc <assert_failed>
 800139a:	e7ea      	b.n	8001372 <HAL_NVIC_DisableIRQ+0x6>
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	08019910 	.word	0x08019910

080013a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	3801      	subs	r0, #1
 80013a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013aa:	d20b      	bcs.n	80013c4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80013b0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_SYSTICK_Config+0x24>)
 80013b4:	21f0      	movs	r1, #240	; 0xf0
 80013b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ba:	2000      	movs	r0, #0
 80013bc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	2207      	movs	r2, #7
 80013c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013cc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_MPU_Disable+0x18>)
 80013d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013da:	2200      	movs	r2, #0
 80013dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013e8:	f040 0001 	orr.w	r0, r0, #1
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_MPU_Enable+0x1c>)
 80013ee:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013fe:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001408:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800140a:	6805      	ldr	r5, [r0, #0]
 800140c:	682c      	ldr	r4, [r5, #0]
 800140e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001412:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001414:	6804      	ldr	r4, [r0, #0]
 8001416:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001418:	6883      	ldr	r3, [r0, #8]
 800141a:	2b40      	cmp	r3, #64	; 0x40
 800141c:	d005      	beq.n	800142a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800141e:	6803      	ldr	r3, [r0, #0]
 8001420:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001422:	6803      	ldr	r3, [r0, #0]
 8001424:	60da      	str	r2, [r3, #12]
  }
}
 8001426:	bc30      	pop	{r4, r5}
 8001428:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800142a:	6803      	ldr	r3, [r0, #0]
 800142c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800142e:	6803      	ldr	r3, [r0, #0]
 8001430:	60d9      	str	r1, [r3, #12]
 8001432:	e7f8      	b.n	8001426 <DMA_SetConfig+0x1e>

08001434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001434:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001436:	6801      	ldr	r1, [r0, #0]
 8001438:	b2ca      	uxtb	r2, r1
 800143a:	3a10      	subs	r2, #16
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <DMA_CalcBaseAndBitshift+0x34>)
 800143e:	fba3 4302 	umull	r4, r3, r3, r2
 8001442:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001444:	4c09      	ldr	r4, [pc, #36]	; (800146c <DMA_CalcBaseAndBitshift+0x38>)
 8001446:	5ce3      	ldrb	r3, [r4, r3]
 8001448:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800144a:	2a5f      	cmp	r2, #95	; 0x5f
 800144c:	d907      	bls.n	800145e <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <DMA_CalcBaseAndBitshift+0x3c>)
 8001450:	400b      	ands	r3, r1
 8001452:	3304      	adds	r3, #4
 8001454:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001456:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800145c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <DMA_CalcBaseAndBitshift+0x3c>)
 8001460:	400b      	ands	r3, r1
 8001462:	6583      	str	r3, [r0, #88]	; 0x58
 8001464:	e7f7      	b.n	8001456 <DMA_CalcBaseAndBitshift+0x22>
 8001466:	bf00      	nop
 8001468:	aaaaaaab 	.word	0xaaaaaaab
 800146c:	08019984 	.word	0x08019984
 8001470:	fffffc00 	.word	0xfffffc00

08001474 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001474:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001476:	6982      	ldr	r2, [r0, #24]
 8001478:	b992      	cbnz	r2, 80014a0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800147a:	2b01      	cmp	r3, #1
 800147c:	d00a      	beq.n	8001494 <DMA_CheckFifoParam+0x20>
 800147e:	2b02      	cmp	r3, #2
 8001480:	d002      	beq.n	8001488 <DMA_CheckFifoParam+0x14>
 8001482:	b10b      	cbz	r3, 8001488 <DMA_CheckFifoParam+0x14>
 8001484:	2000      	movs	r0, #0
 8001486:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001488:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800148a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800148e:	d128      	bne.n	80014e2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	2000      	movs	r0, #0
 8001492:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001494:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001496:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800149a:	d024      	beq.n	80014e6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800149c:	2000      	movs	r0, #0
 800149e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014a0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80014a4:	d009      	beq.n	80014ba <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d925      	bls.n	80014f6 <DMA_CheckFifoParam+0x82>
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d125      	bne.n	80014fa <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014b4:	d123      	bne.n	80014fe <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80014b6:	2000      	movs	r0, #0
 80014b8:	4770      	bx	lr
    switch (tmp)
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d803      	bhi.n	80014c6 <DMA_CheckFifoParam+0x52>
 80014be:	e8df f003 	tbb	[pc, r3]
 80014c2:	0414      	.short	0x0414
 80014c4:	0a14      	.short	0x0a14
 80014c6:	2000      	movs	r0, #0
 80014c8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014d0:	d10d      	bne.n	80014ee <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2000      	movs	r0, #0
 80014d4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014dc:	d009      	beq.n	80014f2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2000      	movs	r0, #0
 80014e0:	4770      	bx	lr
        status = HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
 80014e4:	4770      	bx	lr
        status = HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
      status = HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
 80014ec:	4770      	bx	lr
        status = HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	4770      	bx	lr
        status = HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
 80014f4:	4770      	bx	lr
      status = HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
 80014f8:	4770      	bx	lr
    switch (tmp)
 80014fa:	2000      	movs	r0, #0
 80014fc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001500:	4770      	bx	lr
	...

08001504 <HAL_DMA_Init>:
{
 8001504:	b570      	push	{r4, r5, r6, lr}
 8001506:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff fe9c 	bl	8001244 <HAL_GetTick>
  if(hdma == NULL)
 800150c:	2c00      	cmp	r4, #0
 800150e:	f000 8141 	beq.w	8001794 <HAL_DMA_Init+0x290>
 8001512:	4605      	mov	r5, r0
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	49a0      	ldr	r1, [pc, #640]	; (8001798 <HAL_DMA_Init+0x294>)
 8001518:	4aa0      	ldr	r2, [pc, #640]	; (800179c <HAL_DMA_Init+0x298>)
 800151a:	428b      	cmp	r3, r1
 800151c:	bf18      	it	ne
 800151e:	4293      	cmpne	r3, r2
 8001520:	d02e      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001522:	3218      	adds	r2, #24
 8001524:	4293      	cmp	r3, r2
 8001526:	d02b      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001528:	3218      	adds	r2, #24
 800152a:	4293      	cmp	r3, r2
 800152c:	d028      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800152e:	3218      	adds	r2, #24
 8001530:	4293      	cmp	r3, r2
 8001532:	d025      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001534:	3218      	adds	r2, #24
 8001536:	4293      	cmp	r3, r2
 8001538:	d022      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800153a:	3218      	adds	r2, #24
 800153c:	4293      	cmp	r3, r2
 800153e:	d01f      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001540:	3218      	adds	r2, #24
 8001542:	4293      	cmp	r3, r2
 8001544:	d01c      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001546:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800154a:	4293      	cmp	r3, r2
 800154c:	d018      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800154e:	3218      	adds	r2, #24
 8001550:	4293      	cmp	r3, r2
 8001552:	d015      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001554:	3218      	adds	r2, #24
 8001556:	4293      	cmp	r3, r2
 8001558:	d012      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800155a:	3218      	adds	r2, #24
 800155c:	4293      	cmp	r3, r2
 800155e:	d00f      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001560:	3218      	adds	r2, #24
 8001562:	4293      	cmp	r3, r2
 8001564:	d00c      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001566:	3218      	adds	r2, #24
 8001568:	4293      	cmp	r3, r2
 800156a:	d009      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 800156c:	3218      	adds	r2, #24
 800156e:	4293      	cmp	r3, r2
 8001570:	d006      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001572:	3218      	adds	r2, #24
 8001574:	4293      	cmp	r3, r2
 8001576:	d003      	beq.n	8001580 <HAL_DMA_Init+0x7c>
 8001578:	21b9      	movs	r1, #185	; 0xb9
 800157a:	4889      	ldr	r0, [pc, #548]	; (80017a0 <HAL_DMA_Init+0x29c>)
 800157c:	f012 ffa6 	bl	80144cc <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001580:	6863      	ldr	r3, [r4, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf18      	it	ne
 8001586:	f1b3 7f00 	cmpne.w	r3, #33554432	; 0x2000000
 800158a:	d011      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 800158c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001590:	d00e      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 8001592:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001596:	d00b      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 8001598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800159c:	d008      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 800159e:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80015a2:	d005      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 80015a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80015a8:	d002      	beq.n	80015b0 <HAL_DMA_Init+0xac>
 80015aa:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80015ae:	d175      	bne.n	800169c <HAL_DMA_Init+0x198>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80015b0:	68a3      	ldr	r3, [r4, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf18      	it	ne
 80015b6:	2b40      	cmpne	r3, #64	; 0x40
 80015b8:	d001      	beq.n	80015be <HAL_DMA_Init+0xba>
 80015ba:	2b80      	cmp	r3, #128	; 0x80
 80015bc:	d173      	bne.n	80016a6 <HAL_DMA_Init+0x1a2>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80015be:	68e3      	ldr	r3, [r4, #12]
 80015c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c4:	bf18      	it	ne
 80015c6:	2b00      	cmpne	r3, #0
 80015c8:	d172      	bne.n	80016b0 <HAL_DMA_Init+0x1ac>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80015ca:	6923      	ldr	r3, [r4, #16]
 80015cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d0:	bf18      	it	ne
 80015d2:	2b00      	cmpne	r3, #0
 80015d4:	d171      	bne.n	80016ba <HAL_DMA_Init+0x1b6>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80015d6:	6963      	ldr	r3, [r4, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf18      	it	ne
 80015dc:	f5b3 6f00 	cmpne.w	r3, #2048	; 0x800
 80015e0:	d002      	beq.n	80015e8 <HAL_DMA_Init+0xe4>
 80015e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e6:	d16d      	bne.n	80016c4 <HAL_DMA_Init+0x1c0>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80015e8:	69a3      	ldr	r3, [r4, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf18      	it	ne
 80015ee:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 80015f2:	d002      	beq.n	80015fa <HAL_DMA_Init+0xf6>
 80015f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f8:	d169      	bne.n	80016ce <HAL_DMA_Init+0x1ca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80015fa:	69e3      	ldr	r3, [r4, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf18      	it	ne
 8001600:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 8001604:	d001      	beq.n	800160a <HAL_DMA_Init+0x106>
 8001606:	2b20      	cmp	r3, #32
 8001608:	d166      	bne.n	80016d8 <HAL_DMA_Init+0x1d4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800160a:	6a23      	ldr	r3, [r4, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf18      	it	ne
 8001610:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8001614:	d005      	beq.n	8001622 <HAL_DMA_Init+0x11e>
 8001616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800161a:	d002      	beq.n	8001622 <HAL_DMA_Init+0x11e>
 800161c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001620:	d15f      	bne.n	80016e2 <HAL_DMA_Init+0x1de>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf18      	it	ne
 8001628:	2b04      	cmpne	r3, #4
 800162a:	d15f      	bne.n	80016ec <HAL_DMA_Init+0x1e8>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800162c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800162e:	b1d3      	cbz	r3, 8001666 <HAL_DMA_Init+0x162>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001632:	2b03      	cmp	r3, #3
 8001634:	d85f      	bhi.n	80016f6 <HAL_DMA_Init+0x1f2>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001636:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf18      	it	ne
 800163c:	f5b3 0f00 	cmpne.w	r3, #8388608	; 0x800000
 8001640:	d005      	beq.n	800164e <HAL_DMA_Init+0x14a>
 8001642:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001646:	d002      	beq.n	800164e <HAL_DMA_Init+0x14a>
 8001648:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800164c:	d158      	bne.n	8001700 <HAL_DMA_Init+0x1fc>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800164e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf18      	it	ne
 8001654:	f5b3 1f00 	cmpne.w	r3, #2097152	; 0x200000
 8001658:	d005      	beq.n	8001666 <HAL_DMA_Init+0x162>
 800165a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800165e:	d002      	beq.n	8001666 <HAL_DMA_Init+0x162>
 8001660:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001664:	d151      	bne.n	800170a <HAL_DMA_Init+0x206>
  __HAL_UNLOCK(hdma);
 8001666:	2300      	movs	r3, #0
 8001668:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	2302      	movs	r3, #2
 800166e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001672:	6822      	ldr	r2, [r4, #0]
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f012 0f01 	tst.w	r2, #1
 8001684:	d046      	beq.n	8001714 <HAL_DMA_Init+0x210>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001686:	f7ff fddd 	bl	8001244 <HAL_GetTick>
 800168a:	1b40      	subs	r0, r0, r5
 800168c:	2805      	cmp	r0, #5
 800168e:	d9f5      	bls.n	800167c <HAL_DMA_Init+0x178>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001690:	2320      	movs	r3, #32
 8001692:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001694:	2003      	movs	r0, #3
 8001696:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800169a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800169c:	21ba      	movs	r1, #186	; 0xba
 800169e:	4840      	ldr	r0, [pc, #256]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016a0:	f012 ff14 	bl	80144cc <assert_failed>
 80016a4:	e784      	b.n	80015b0 <HAL_DMA_Init+0xac>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80016a6:	21bb      	movs	r1, #187	; 0xbb
 80016a8:	483d      	ldr	r0, [pc, #244]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016aa:	f012 ff0f 	bl	80144cc <assert_failed>
 80016ae:	e786      	b.n	80015be <HAL_DMA_Init+0xba>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80016b0:	21bc      	movs	r1, #188	; 0xbc
 80016b2:	483b      	ldr	r0, [pc, #236]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016b4:	f012 ff0a 	bl	80144cc <assert_failed>
 80016b8:	e787      	b.n	80015ca <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80016ba:	21bd      	movs	r1, #189	; 0xbd
 80016bc:	4838      	ldr	r0, [pc, #224]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016be:	f012 ff05 	bl	80144cc <assert_failed>
 80016c2:	e788      	b.n	80015d6 <HAL_DMA_Init+0xd2>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80016c4:	21be      	movs	r1, #190	; 0xbe
 80016c6:	4836      	ldr	r0, [pc, #216]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016c8:	f012 ff00 	bl	80144cc <assert_failed>
 80016cc:	e78c      	b.n	80015e8 <HAL_DMA_Init+0xe4>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80016ce:	21bf      	movs	r1, #191	; 0xbf
 80016d0:	4833      	ldr	r0, [pc, #204]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016d2:	f012 fefb 	bl	80144cc <assert_failed>
 80016d6:	e790      	b.n	80015fa <HAL_DMA_Init+0xf6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80016d8:	21c0      	movs	r1, #192	; 0xc0
 80016da:	4831      	ldr	r0, [pc, #196]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016dc:	f012 fef6 	bl	80144cc <assert_failed>
 80016e0:	e793      	b.n	800160a <HAL_DMA_Init+0x106>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80016e2:	21c1      	movs	r1, #193	; 0xc1
 80016e4:	482e      	ldr	r0, [pc, #184]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016e6:	f012 fef1 	bl	80144cc <assert_failed>
 80016ea:	e79a      	b.n	8001622 <HAL_DMA_Init+0x11e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80016ec:	21c2      	movs	r1, #194	; 0xc2
 80016ee:	482c      	ldr	r0, [pc, #176]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016f0:	f012 feec 	bl	80144cc <assert_failed>
 80016f4:	e79a      	b.n	800162c <HAL_DMA_Init+0x128>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80016f6:	21c7      	movs	r1, #199	; 0xc7
 80016f8:	4829      	ldr	r0, [pc, #164]	; (80017a0 <HAL_DMA_Init+0x29c>)
 80016fa:	f012 fee7 	bl	80144cc <assert_failed>
 80016fe:	e79a      	b.n	8001636 <HAL_DMA_Init+0x132>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001700:	21c8      	movs	r1, #200	; 0xc8
 8001702:	4827      	ldr	r0, [pc, #156]	; (80017a0 <HAL_DMA_Init+0x29c>)
 8001704:	f012 fee2 	bl	80144cc <assert_failed>
 8001708:	e7a1      	b.n	800164e <HAL_DMA_Init+0x14a>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800170a:	21c9      	movs	r1, #201	; 0xc9
 800170c:	4824      	ldr	r0, [pc, #144]	; (80017a0 <HAL_DMA_Init+0x29c>)
 800170e:	f012 fedd 	bl	80144cc <assert_failed>
 8001712:	e7a8      	b.n	8001666 <HAL_DMA_Init+0x162>
  tmp = hdma->Instance->CR;
 8001714:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001716:	4823      	ldr	r0, [pc, #140]	; (80017a4 <HAL_DMA_Init+0x2a0>)
 8001718:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800171a:	6861      	ldr	r1, [r4, #4]
 800171c:	68a2      	ldr	r2, [r4, #8]
 800171e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001720:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001722:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001724:	6921      	ldr	r1, [r4, #16]
 8001726:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001728:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172c:	69a1      	ldr	r1, [r4, #24]
 800172e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001730:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001732:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001734:	6a21      	ldr	r1, [r4, #32]
 8001736:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001738:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800173c:	2904      	cmp	r1, #4
 800173e:	d01e      	beq.n	800177e <HAL_DMA_Init+0x27a>
  hdma->Instance->CR = tmp;  
 8001740:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001742:	6826      	ldr	r6, [r4, #0]
 8001744:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001746:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800174a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800174c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800174e:	2b04      	cmp	r3, #4
 8001750:	d107      	bne.n	8001762 <HAL_DMA_Init+0x25e>
    tmp |= hdma->Init.FIFOThreshold;
 8001752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001754:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001758:	b11b      	cbz	r3, 8001762 <HAL_DMA_Init+0x25e>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff fe8a 	bl	8001474 <DMA_CheckFifoParam>
 8001760:	b990      	cbnz	r0, 8001788 <HAL_DMA_Init+0x284>
  hdma->Instance->FCR = tmp;
 8001762:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff fe65 	bl	8001434 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800176c:	233f      	movs	r3, #63	; 0x3f
 800176e:	4093      	lsls	r3, r2
 8001770:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001772:	2000      	movs	r0, #0
 8001774:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001776:	2301      	movs	r3, #1
 8001778:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800177c:	e78d      	b.n	800169a <HAL_DMA_Init+0x196>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800177e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001780:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001782:	4301      	orrs	r1, r0
 8001784:	430a      	orrs	r2, r1
 8001786:	e7db      	b.n	8001740 <HAL_DMA_Init+0x23c>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001788:	2340      	movs	r3, #64	; 0x40
 800178a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800178c:	2001      	movs	r0, #1
 800178e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001792:	e782      	b.n	800169a <HAL_DMA_Init+0x196>
    return HAL_ERROR;
 8001794:	2001      	movs	r0, #1
 8001796:	e780      	b.n	800169a <HAL_DMA_Init+0x196>
 8001798:	40026010 	.word	0x40026010
 800179c:	40026028 	.word	0x40026028
 80017a0:	0801994c 	.word	0x0801994c
 80017a4:	f010803f 	.word	0xf010803f

080017a8 <HAL_DMA_Start_IT>:
{
 80017a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ac:	4604      	mov	r4, r0
 80017ae:	460e      	mov	r6, r1
 80017b0:	4617      	mov	r7, r2
 80017b2:	461d      	mov	r5, r3
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b4:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80017be:	429a      	cmp	r2, r3
 80017c0:	d811      	bhi.n	80017e6 <HAL_DMA_Start_IT+0x3e>
  __HAL_LOCK(hdma);
 80017c2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d03b      	beq.n	8001842 <HAL_DMA_Start_IT+0x9a>
 80017ca:	2301      	movs	r3, #1
 80017cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80017d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d00b      	beq.n	80017f2 <HAL_DMA_Start_IT+0x4a>
    __HAL_UNLOCK(hdma);	  
 80017da:	2300      	movs	r3, #0
 80017dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80017e0:	2002      	movs	r0, #2
}
 80017e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80017e6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80017ea:	4817      	ldr	r0, [pc, #92]	; (8001848 <HAL_DMA_Start_IT+0xa0>)
 80017ec:	f012 fe6e 	bl	80144cc <assert_failed>
 80017f0:	e7e7      	b.n	80017c2 <HAL_DMA_Start_IT+0x1a>
    hdma->State = HAL_DMA_STATE_BUSY;
 80017f2:	2302      	movs	r3, #2
 80017f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	6563      	str	r3, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017fc:	462b      	mov	r3, r5
 80017fe:	463a      	mov	r2, r7
 8001800:	4631      	mov	r1, r6
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fe00 	bl	8001408 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001808:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800180a:	233f      	movs	r3, #63	; 0x3f
 800180c:	4093      	lsls	r3, r2
 800180e:	f8c8 3008 	str.w	r3, [r8, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	6813      	ldr	r3, [r2, #0]
 8001816:	f043 0316 	orr.w	r3, r3, #22
 800181a:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	6953      	ldr	r3, [r2, #20]
 8001820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001824:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001828:	b123      	cbz	r3, 8001834 <HAL_DMA_Start_IT+0x8c>
      hdma->Instance->CR  |= DMA_IT_HT;
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001834:	6822      	ldr	r2, [r4, #0]
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800183e:	2000      	movs	r0, #0
 8001840:	e7cf      	b.n	80017e2 <HAL_DMA_Start_IT+0x3a>
  __HAL_LOCK(hdma);
 8001842:	2002      	movs	r0, #2
 8001844:	e7cd      	b.n	80017e2 <HAL_DMA_Start_IT+0x3a>
 8001846:	bf00      	nop
 8001848:	0801994c 	.word	0x0801994c

0800184c <HAL_DMA_Abort>:
{
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001850:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001852:	f7ff fcf7 	bl	8001244 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001856:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d006      	beq.n	800186e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001864:	2300      	movs	r3, #0
 8001866:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
}
 800186c:	bd70      	pop	{r4, r5, r6, pc}
 800186e:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	6813      	ldr	r3, [r2, #0]
 8001874:	f023 0316 	bic.w	r3, r3, #22
 8001878:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	6953      	ldr	r3, [r2, #20]
 800187e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001882:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001884:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001886:	b1e3      	cbz	r3, 80018c2 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	6813      	ldr	r3, [r2, #0]
 800188c:	f023 0308 	bic.w	r3, r3, #8
 8001890:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001892:	6822      	ldr	r2, [r4, #0]
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f013 0f01 	tst.w	r3, #1
 80018a4:	d011      	beq.n	80018ca <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018a6:	f7ff fccd 	bl	8001244 <HAL_GetTick>
 80018aa:	1b43      	subs	r3, r0, r5
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d9f5      	bls.n	800189c <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018b0:	2320      	movs	r3, #32
 80018b2:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80018b4:	2300      	movs	r3, #0
 80018b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ba:	2003      	movs	r0, #3
 80018bc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80018c0:	e7d4      	b.n	800186c <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1df      	bne.n	8001888 <HAL_DMA_Abort+0x3c>
 80018c8:	e7e3      	b.n	8001892 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80018cc:	233f      	movs	r3, #63	; 0x3f
 80018ce:	4093      	lsls	r3, r2
 80018d0:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80018d8:	2301      	movs	r3, #1
 80018da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80018de:	e7c5      	b.n	800186c <HAL_DMA_Abort+0x20>

080018e0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d003      	beq.n	80018f2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80018f2:	2305      	movs	r3, #5
 80018f4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80018f8:	6802      	ldr	r2, [r0, #0]
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001902:	2000      	movs	r0, #0
}
 8001904:	4770      	bx	lr
	...

08001908 <HAL_DMA_IRQHandler>:
{
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8001912:	4b72      	ldr	r3, [pc, #456]	; (8001adc <HAL_DMA_IRQHandler+0x1d4>)
 8001914:	681d      	ldr	r5, [r3, #0]
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <HAL_DMA_IRQHandler+0x1d8>)
 8001918:	fba3 3505 	umull	r3, r5, r3, r5
 800191c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001920:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001922:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001924:	2308      	movs	r3, #8
 8001926:	4093      	lsls	r3, r2
 8001928:	4233      	tst	r3, r6
 800192a:	d010      	beq.n	800194e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800192c:	6803      	ldr	r3, [r0, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	f012 0f04 	tst.w	r2, #4
 8001934:	d00b      	beq.n	800194e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f022 0204 	bic.w	r2, r2, #4
 800193c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800193e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001940:	2308      	movs	r3, #8
 8001942:	4093      	lsls	r3, r2
 8001944:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001946:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800194e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001950:	2301      	movs	r3, #1
 8001952:	4093      	lsls	r3, r2
 8001954:	4233      	tst	r3, r6
 8001956:	d009      	beq.n	800196c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001958:	6822      	ldr	r2, [r4, #0]
 800195a:	6952      	ldr	r2, [r2, #20]
 800195c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001960:	d004      	beq.n	800196c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001962:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001964:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800196c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800196e:	2304      	movs	r3, #4
 8001970:	4093      	lsls	r3, r2
 8001972:	4233      	tst	r3, r6
 8001974:	d009      	beq.n	800198a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	f012 0f02 	tst.w	r2, #2
 800197e:	d004      	beq.n	800198a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001980:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001982:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800198a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800198c:	2310      	movs	r3, #16
 800198e:	4093      	lsls	r3, r2
 8001990:	4233      	tst	r3, r6
 8001992:	d024      	beq.n	80019de <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f012 0f08 	tst.w	r2, #8
 800199c:	d01f      	beq.n	80019de <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800199e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80019a8:	d00d      	beq.n	80019c6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80019b0:	d104      	bne.n	80019bc <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80019b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019b4:	b19b      	cbz	r3, 80019de <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80019b6:	4620      	mov	r0, r4
 80019b8:	4798      	blx	r3
 80019ba:	e010      	b.n	80019de <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80019be:	b173      	cbz	r3, 80019de <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80019c0:	4620      	mov	r0, r4
 80019c2:	4798      	blx	r3
 80019c4:	e00b      	b.n	80019de <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80019cc:	d103      	bne.n	80019d6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f022 0208 	bic.w	r2, r2, #8
 80019d4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80019d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d8:	b10b      	cbz	r3, 80019de <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80019da:	4620      	mov	r0, r4
 80019dc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019e0:	2320      	movs	r3, #32
 80019e2:	4093      	lsls	r3, r2
 80019e4:	4233      	tst	r3, r6
 80019e6:	d055      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	f012 0f10 	tst.w	r2, #16
 80019f0:	d050      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019f2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019f4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d00e      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001a06:	d033      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001a0e:	d12a      	bne.n	8001a66 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001a10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03e      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001a16:	4620      	mov	r0, r4
 8001a18:	4798      	blx	r3
 8001a1a:	e03b      	b.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	f023 0316 	bic.w	r3, r3, #22
 8001a24:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a26:	6822      	ldr	r2, [r4, #0]
 8001a28:	6953      	ldr	r3, [r2, #20]
 8001a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a2e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a32:	b1a3      	cbz	r3, 8001a5e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	f023 0308 	bic.w	r3, r3, #8
 8001a3c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a40:	233f      	movs	r3, #63	; 0x3f
 8001a42:	4093      	lsls	r3, r2
 8001a44:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001a46:	2300      	movs	r3, #0
 8001a48:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001a52:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d03f      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4798      	blx	r3
        return;
 8001a5c:	e03c      	b.n	8001ad8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1e7      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x12c>
 8001a64:	e7eb      	b.n	8001a3e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a68:	b1a3      	cbz	r3, 8001a94 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4798      	blx	r3
 8001a6e:	e011      	b.n	8001a94 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a76:	d109      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	f022 0210 	bic.w	r2, r2, #16
 8001a7e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001a80:	2300      	movs	r3, #0
 8001a82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001a8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a8e:	b10b      	cbz	r3, 8001a94 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001a90:	4620      	mov	r0, r4
 8001a92:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a96:	b1fb      	cbz	r3, 8001ad8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a9a:	f013 0f01 	tst.w	r3, #1
 8001a9e:	d017      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	6813      	ldr	r3, [r2, #0]
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001ab0:	9b01      	ldr	r3, [sp, #4]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	42ab      	cmp	r3, r5
 8001ab8:	d804      	bhi.n	8001ac4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f013 0f01 	tst.w	r3, #1
 8001ac2:	d1f5      	bne.n	8001ab0 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001ad0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ad2:	b10b      	cbz	r3, 8001ad8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4798      	blx	r3
}
 8001ad8:	b003      	add	sp, #12
 8001ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001adc:	200000a8 	.word	0x200000a8
 8001ae0:	1b4e81b5 	.word	0x1b4e81b5

08001ae4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001ae4:	b430      	push	{r4, r5}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001ae6:	6805      	ldr	r5, [r0, #0]
 8001ae8:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001aea:	f004 4c40 	and.w	ip, r4, #3221225472	; 0xc0000000
 8001aee:	9c02      	ldr	r4, [sp, #8]
 8001af0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001af4:	ea4c 0303 	orr.w	r3, ip, r3
 8001af8:	646b      	str	r3, [r5, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001afa:	6803      	ldr	r3, [r0, #0]
 8001afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001afe:	6843      	ldr	r3, [r0, #4]
 8001b00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001b04:	d003      	beq.n	8001b0e <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001b06:	6803      	ldr	r3, [r0, #0]
 8001b08:	60d9      	str	r1, [r3, #12]
  }
}
 8001b0a:	bc30      	pop	{r4, r5}
 8001b0c:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001b0e:	f001 4c7f 	and.w	ip, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001b12:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001b16:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001b1a:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001b1c:	6884      	ldr	r4, [r0, #8]
 8001b1e:	b19c      	cbz	r4, 8001b48 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001b20:	2c01      	cmp	r4, #1
 8001b22:	d00f      	beq.n	8001b44 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001b24:	2c02      	cmp	r4, #2
 8001b26:	d012      	beq.n	8001b4e <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001b28:	2c03      	cmp	r4, #3
 8001b2a:	d018      	beq.n	8001b5e <DMA2D_SetConfig+0x7a>
      tmp1 = (tmp1 >> 28U);
 8001b2c:	ea4f 7c1c 	mov.w	ip, ip, lsr #28
      tmp2 = (tmp2 >> 20U);
 8001b30:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001b32:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001b34:	0219      	lsls	r1, r3, #8
 8001b36:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001b3a:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
 8001b3e:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8001b42:	e001      	b.n	8001b48 <DMA2D_SetConfig+0x64>
      tmp = (tmp3 | tmp2 | tmp4);
 8001b44:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001b48:	6803      	ldr	r3, [r0, #0]
 8001b4a:	6399      	str	r1, [r3, #56]	; 0x38
 8001b4c:	e7dd      	b.n	8001b0a <DMA2D_SetConfig+0x26>
      tmp2 = (tmp2 >> 19U);
 8001b4e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001b50:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001b52:	02d9      	lsls	r1, r3, #11
 8001b54:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001b58:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001b5c:	e7f4      	b.n	8001b48 <DMA2D_SetConfig+0x64>
      tmp1 = (tmp1 >> 31U);
 8001b5e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
      tmp2 = (tmp2 >> 19U);
 8001b62:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8001b64:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001b66:	0299      	lsls	r1, r3, #10
 8001b68:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001b6c:	ea41 31cc 	orr.w	r1, r1, ip, lsl #15
 8001b70:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8001b74:	e7e8      	b.n	8001b48 <DMA2D_SetConfig+0x64>
	...

08001b78 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d052      	beq.n	8001c22 <HAL_DMA2D_Init+0xaa>
{
 8001b7c:	b510      	push	{r4, lr}
 8001b7e:	4604      	mov	r4, r0
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 8001b80:	6802      	ldr	r2, [r0, #0]
 8001b82:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <HAL_DMA2D_Init+0xb0>)
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d003      	beq.n	8001b90 <HAL_DMA2D_Init+0x18>
 8001b88:	21f6      	movs	r1, #246	; 0xf6
 8001b8a:	4828      	ldr	r0, [pc, #160]	; (8001c2c <HAL_DMA2D_Init+0xb4>)
 8001b8c:	f012 fc9e 	bl	80144cc <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8001b90:	6863      	ldr	r3, [r4, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf18      	it	ne
 8001b96:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8001b9a:	d005      	beq.n	8001ba8 <HAL_DMA2D_Init+0x30>
 8001b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ba0:	d002      	beq.n	8001ba8 <HAL_DMA2D_Init+0x30>
 8001ba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ba6:	d127      	bne.n	8001bf8 <HAL_DMA2D_Init+0x80>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 8001ba8:	68a3      	ldr	r3, [r4, #8]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d829      	bhi.n	8001c02 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8001bae:	68e3      	ldr	r3, [r4, #12]
 8001bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bb4:	d22a      	bcs.n	8001c0c <HAL_DMA2D_Init+0x94>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001bb6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001bba:	b363      	cbz	r3, 8001c16 <HAL_DMA2D_Init+0x9e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001bc2:	6822      	ldr	r2, [r4, #0]
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bca:	6861      	ldr	r1, [r4, #4]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001bd0:	6822      	ldr	r2, [r4, #0]
 8001bd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001bd4:	f023 0307 	bic.w	r3, r3, #7
 8001bd8:	68a1      	ldr	r1, [r4, #8]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001bde:	6822      	ldr	r2, [r4, #0]
 8001be0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_DMA2D_Init+0xb8>)
 8001be4:	400b      	ands	r3, r1
 8001be6:	68e1      	ldr	r1, [r4, #12]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001bec:	2000      	movs	r0, #0
 8001bee:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001bf6:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8001bf8:	21f7      	movs	r1, #247	; 0xf7
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <HAL_DMA2D_Init+0xb4>)
 8001bfc:	f012 fc66 	bl	80144cc <assert_failed>
 8001c00:	e7d2      	b.n	8001ba8 <HAL_DMA2D_Init+0x30>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 8001c02:	21f8      	movs	r1, #248	; 0xf8
 8001c04:	4809      	ldr	r0, [pc, #36]	; (8001c2c <HAL_DMA2D_Init+0xb4>)
 8001c06:	f012 fc61 	bl	80144cc <assert_failed>
 8001c0a:	e7d0      	b.n	8001bae <HAL_DMA2D_Init+0x36>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8001c0c:	21f9      	movs	r1, #249	; 0xf9
 8001c0e:	4807      	ldr	r0, [pc, #28]	; (8001c2c <HAL_DMA2D_Init+0xb4>)
 8001c10:	f012 fc5c 	bl	80144cc <assert_failed>
 8001c14:	e7cf      	b.n	8001bb6 <HAL_DMA2D_Init+0x3e>
    hdma2d->Lock = HAL_UNLOCKED;
 8001c16:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f011 fae8 	bl	80131f0 <HAL_DMA2D_MspInit>
 8001c20:	e7cc      	b.n	8001bbc <HAL_DMA2D_Init+0x44>
     return HAL_ERROR;
 8001c22:	2001      	movs	r0, #1
}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	4002b000 	.word	0x4002b000
 8001c2c:	0801998c 	.word	0x0801998c
 8001c30:	ffffc000 	.word	0xffffc000

08001c34 <HAL_DMA2D_Start>:
{
 8001c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4688      	mov	r8, r1
 8001c3e:	4617      	mov	r7, r2
 8001c40:	461d      	mov	r5, r3
 8001c42:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DMA2D_LINE(Height));
 8001c44:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8001c48:	d21c      	bcs.n	8001c84 <HAL_DMA2D_Start+0x50>
  assert_param(IS_DMA2D_PIXEL(Width));
 8001c4a:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8001c4e:	d21f      	bcs.n	8001c90 <HAL_DMA2D_Start+0x5c>
  __HAL_LOCK(hdma2d);
 8001c50:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d021      	beq.n	8001c9c <HAL_DMA2D_Start+0x68>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001c64:	9600      	str	r6, [sp, #0]
 8001c66:	462b      	mov	r3, r5
 8001c68:	463a      	mov	r2, r7
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff ff39 	bl	8001ae4 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001c72:	6822      	ldr	r2, [r4, #0]
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001c7c:	2000      	movs	r0, #0
}
 8001c7e:	b002      	add	sp, #8
 8001c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA2D_LINE(Height));
 8001c84:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_DMA2D_Start+0x6c>)
 8001c8a:	f012 fc1f 	bl	80144cc <assert_failed>
 8001c8e:	e7dc      	b.n	8001c4a <HAL_DMA2D_Start+0x16>
  assert_param(IS_DMA2D_PIXEL(Width));
 8001c90:	f240 21a5 	movw	r1, #677	; 0x2a5
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <HAL_DMA2D_Start+0x6c>)
 8001c96:	f012 fc19 	bl	80144cc <assert_failed>
 8001c9a:	e7d9      	b.n	8001c50 <HAL_DMA2D_Start+0x1c>
  __HAL_LOCK(hdma2d);
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	e7ee      	b.n	8001c7e <HAL_DMA2D_Start+0x4a>
 8001ca0:	0801998c 	.word	0x0801998c

08001ca4 <HAL_DMA2D_PollForTransfer>:
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	4604      	mov	r4, r0
 8001caa:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001cb0:	6803      	ldr	r3, [r0, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f013 0f01 	tst.w	r3, #1
 8001cb8:	d111      	bne.n	8001cde <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001cba:	6822      	ldr	r2, [r4, #0]
 8001cbc:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001cbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc0:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8001cc2:	f013 0f20 	tst.w	r3, #32
 8001cc6:	d147      	bne.n	8001d58 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	2212      	movs	r2, #18
 8001ccc:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8001cde:	f7ff fab1 	bl	8001244 <HAL_GetTick>
 8001ce2:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	f012 0f02 	tst.w	r2, #2
 8001cec:	d1e5      	bne.n	8001cba <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001cf2:	9a01      	ldr	r2, [sp, #4]
 8001cf4:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001cf8:	d114      	bne.n	8001d24 <HAL_DMA2D_PollForTransfer+0x80>
      if(Timeout != HAL_MAX_DELAY)
 8001cfa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001cfe:	d0f1      	beq.n	8001ce4 <HAL_DMA2D_PollForTransfer+0x40>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001d00:	f7ff faa0 	bl	8001244 <HAL_GetTick>
 8001d04:	1b80      	subs	r0, r0, r6
 8001d06:	42a8      	cmp	r0, r5
 8001d08:	d801      	bhi.n	8001d0e <HAL_DMA2D_PollForTransfer+0x6a>
 8001d0a:	2d00      	cmp	r5, #0
 8001d0c:	d1ea      	bne.n	8001ce4 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d10:	f043 0320 	orr.w	r3, r3, #32
 8001d14:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001d16:	2003      	movs	r0, #3
 8001d18:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001d22:	e7da      	b.n	8001cda <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d24:	9a01      	ldr	r2, [sp, #4]
 8001d26:	f012 0f20 	tst.w	r2, #32
 8001d2a:	d003      	beq.n	8001d34 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d2e:	f042 0202 	orr.w	r2, r2, #2
 8001d32:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d34:	9a01      	ldr	r2, [sp, #4]
 8001d36:	f012 0f01 	tst.w	r2, #1
 8001d3a:	d003      	beq.n	8001d44 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d44:	2221      	movs	r2, #33	; 0x21
 8001d46:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
 8001d56:	e7c0      	b.n	8001cda <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8001d58:	f7ff fa74 	bl	8001244 <HAL_GetTick>
 8001d5c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	f012 0f10 	tst.w	r2, #16
 8001d66:	d1af      	bne.n	8001cc8 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001d6c:	9a01      	ldr	r2, [sp, #4]
 8001d6e:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001d72:	d114      	bne.n	8001d9e <HAL_DMA2D_PollForTransfer+0xfa>
      if(Timeout != HAL_MAX_DELAY)
 8001d74:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d78:	d0f1      	beq.n	8001d5e <HAL_DMA2D_PollForTransfer+0xba>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001d7a:	f7ff fa63 	bl	8001244 <HAL_GetTick>
 8001d7e:	1b80      	subs	r0, r0, r6
 8001d80:	42a8      	cmp	r0, r5
 8001d82:	d801      	bhi.n	8001d88 <HAL_DMA2D_PollForTransfer+0xe4>
 8001d84:	2d00      	cmp	r5, #0
 8001d86:	d1ea      	bne.n	8001d5e <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d8a:	f043 0320 	orr.w	r3, r3, #32
 8001d8e:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001d90:	2003      	movs	r0, #3
 8001d92:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001d96:	2300      	movs	r3, #0
 8001d98:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001d9c:	e79d      	b.n	8001cda <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d9e:	9a01      	ldr	r2, [sp, #4]
 8001da0:	f012 0f08 	tst.w	r2, #8
 8001da4:	d003      	beq.n	8001dae <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001da6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001da8:	f042 0204 	orr.w	r2, r2, #4
 8001dac:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001dae:	9a01      	ldr	r2, [sp, #4]
 8001db0:	f012 0f20 	tst.w	r2, #32
 8001db4:	d003      	beq.n	8001dbe <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001db6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001db8:	f042 0202 	orr.w	r2, r2, #2
 8001dbc:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001dbe:	9a01      	ldr	r2, [sp, #4]
 8001dc0:	f012 0f01 	tst.w	r2, #1
 8001dc4:	d003      	beq.n	8001dce <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001dc6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001dce:	2229      	movs	r2, #41	; 0x29
 8001dd0:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001dde:	2001      	movs	r0, #1
 8001de0:	e77b      	b.n	8001cda <HAL_DMA2D_PollForTransfer+0x36>
	...

08001de4 <HAL_DMA2D_ConfigLayer>:
{
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	4604      	mov	r4, r0
 8001de8:	460d      	mov	r5, r1
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8001dea:	2901      	cmp	r1, #1
 8001dec:	d848      	bhi.n	8001e80 <HAL_DMA2D_ConfigLayer+0x9c>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8001dee:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df8:	d248      	bcs.n	8001e8c <HAL_DMA2D_ConfigLayer+0xa8>
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001dfa:	6863      	ldr	r3, [r4, #4]
 8001dfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e00:	d00b      	beq.n	8001e1a <HAL_DMA2D_ConfigLayer+0x36>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8001e02:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2b0a      	cmp	r3, #10
 8001e0a:	d845      	bhi.n	8001e98 <HAL_DMA2D_ConfigLayer+0xb4>
    if(hdma2d->Init.Mode != DMA2D_M2M)
 8001e0c:	6863      	ldr	r3, [r4, #4]
 8001e0e:	b123      	cbz	r3, 8001e1a <HAL_DMA2D_ConfigLayer+0x36>
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8001e10:	1cab      	adds	r3, r5, #2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	58e3      	ldr	r3, [r4, r3]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d844      	bhi.n	8001ea4 <HAL_DMA2D_ConfigLayer+0xc0>
  __HAL_LOCK(hdma2d);
 8001e1a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d06f      	beq.n	8001f02 <HAL_DMA2D_ConfigLayer+0x11e>
 8001e22:	2301      	movs	r3, #1
 8001e24:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e2e:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	1cab      	adds	r3, r5, #2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	58e3      	ldr	r3, [r4, r3]
 8001e3a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e3e:	3a09      	subs	r2, #9
 8001e40:	2a01      	cmp	r2, #1
 8001e42:	d935      	bls.n	8001eb0 <HAL_DMA2D_ConfigLayer+0xcc>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e44:	1caa      	adds	r2, r5, #2
 8001e46:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8001e4a:	6852      	ldr	r2, [r2, #4]
 8001e4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e50:	2d00      	cmp	r5, #0
 8001e52:	d13e      	bne.n	8001ed2 <HAL_DMA2D_ConfigLayer+0xee>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e54:	6821      	ldr	r1, [r4, #0]
 8001e56:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001e58:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <HAL_DMA2D_ConfigLayer+0x124>)
 8001e5a:	4002      	ands	r2, r0
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	624b      	str	r3, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001e66:	6999      	ldr	r1, [r3, #24]
 8001e68:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	3b09      	subs	r3, #9
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d926      	bls.n	8001ec0 <HAL_DMA2D_ConfigLayer+0xdc>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001e7e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8001e80:	f240 614a 	movw	r1, #1610	; 0x64a
 8001e84:	4821      	ldr	r0, [pc, #132]	; (8001f0c <HAL_DMA2D_ConfigLayer+0x128>)
 8001e86:	f012 fb21 	bl	80144cc <assert_failed>
 8001e8a:	e7b0      	b.n	8001dee <HAL_DMA2D_ConfigLayer+0xa>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8001e8c:	f240 614b 	movw	r1, #1611	; 0x64b
 8001e90:	481e      	ldr	r0, [pc, #120]	; (8001f0c <HAL_DMA2D_ConfigLayer+0x128>)
 8001e92:	f012 fb1b 	bl	80144cc <assert_failed>
 8001e96:	e7b0      	b.n	8001dfa <HAL_DMA2D_ConfigLayer+0x16>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8001e98:	f240 614e 	movw	r1, #1614	; 0x64e
 8001e9c:	481b      	ldr	r0, [pc, #108]	; (8001f0c <HAL_DMA2D_ConfigLayer+0x128>)
 8001e9e:	f012 fb15 	bl	80144cc <assert_failed>
 8001ea2:	e7b3      	b.n	8001e0c <HAL_DMA2D_ConfigLayer+0x28>
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8001ea4:	f240 6151 	movw	r1, #1617	; 0x651
 8001ea8:	4818      	ldr	r0, [pc, #96]	; (8001f0c <HAL_DMA2D_ConfigLayer+0x128>)
 8001eaa:	f012 fb0f 	bl	80144cc <assert_failed>
 8001eae:	e7b4      	b.n	8001e1a <HAL_DMA2D_ConfigLayer+0x36>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001eb0:	1caa      	adds	r2, r5, #2
 8001eb2:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8001eb6:	6852      	ldr	r2, [r2, #4]
 8001eb8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	e7c7      	b.n	8001e50 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001ec0:	3502      	adds	r5, #2
 8001ec2:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8001ec6:	686b      	ldr	r3, [r5, #4]
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ece:	6293      	str	r3, [r2, #40]	; 0x28
 8001ed0:	e7cf      	b.n	8001e72 <HAL_DMA2D_ConfigLayer+0x8e>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001ed2:	6821      	ldr	r1, [r4, #0]
 8001ed4:	69c8      	ldr	r0, [r1, #28]
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_DMA2D_ConfigLayer+0x124>)
 8001ed8:	4002      	ands	r2, r0
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61cb      	str	r3, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ede:	6822      	ldr	r2, [r4, #0]
 8001ee0:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8001ee4:	6999      	ldr	r1, [r3, #24]
 8001ee6:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	3b09      	subs	r3, #9
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d8c0      	bhi.n	8001e72 <HAL_DMA2D_ConfigLayer+0x8e>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001ef0:	3502      	adds	r5, #2
 8001ef2:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8001ef6:	686b      	ldr	r3, [r5, #4]
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	e7b7      	b.n	8001e72 <HAL_DMA2D_ConfigLayer+0x8e>
  __HAL_LOCK(hdma2d);
 8001f02:	2002      	movs	r0, #2
 8001f04:	e7bb      	b.n	8001e7e <HAL_DMA2D_ConfigLayer+0x9a>
 8001f06:	bf00      	nop
 8001f08:	00fcfff0 	.word	0x00fcfff0
 8001f0c:	0801998c 	.word	0x0801998c

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	4607      	mov	r7, r0
 8001f18:	460e      	mov	r6, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f1a:	4aa8      	ldr	r2, [pc, #672]	; (80021bc <HAL_GPIO_Init+0x2ac>)
 8001f1c:	4ba8      	ldr	r3, [pc, #672]	; (80021c0 <HAL_GPIO_Init+0x2b0>)
 8001f1e:	4290      	cmp	r0, r2
 8001f20:	bf18      	it	ne
 8001f22:	4298      	cmpne	r0, r3
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2a:	1ac3      	subs	r3, r0, r3
 8001f2c:	bf18      	it	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f34:	4290      	cmp	r0, r2
 8001f36:	d022      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f38:	b30b      	cbz	r3, 8001f7e <HAL_GPIO_Init+0x6e>
 8001f3a:	4ba2      	ldr	r3, [pc, #648]	; (80021c4 <HAL_GPIO_Init+0x2b4>)
 8001f3c:	1ac3      	subs	r3, r0, r3
 8001f3e:	bf18      	it	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f4a:	b1c3      	cbz	r3, 8001f7e <HAL_GPIO_Init+0x6e>
 8001f4c:	4b9e      	ldr	r3, [pc, #632]	; (80021c8 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	1ac3      	subs	r3, r0, r3
 8001f50:	bf18      	it	ne
 8001f52:	2301      	movne	r3, #1
 8001f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f58:	4290      	cmp	r0, r2
 8001f5a:	d010      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f5c:	b17b      	cbz	r3, 8001f7e <HAL_GPIO_Init+0x6e>
 8001f5e:	4b9b      	ldr	r3, [pc, #620]	; (80021cc <HAL_GPIO_Init+0x2bc>)
 8001f60:	1ac3      	subs	r3, r0, r3
 8001f62:	bf18      	it	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	d007      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f6e:	b133      	cbz	r3, 8001f7e <HAL_GPIO_Init+0x6e>
 8001f70:	4b97      	ldr	r3, [pc, #604]	; (80021d0 <HAL_GPIO_Init+0x2c0>)
 8001f72:	4298      	cmp	r0, r3
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x6e>
 8001f76:	21b1      	movs	r1, #177	; 0xb1
 8001f78:	4896      	ldr	r0, [pc, #600]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001f7a:	f012 faa7 	bl	80144cc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f7e:	8833      	ldrh	r3, [r6, #0]
 8001f80:	b333      	cbz	r3, 8001fd0 <HAL_GPIO_Init+0xc0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f82:	6873      	ldr	r3, [r6, #4]
 8001f84:	2b11      	cmp	r3, #17
 8001f86:	bf18      	it	ne
 8001f88:	2b01      	cmpne	r3, #1
 8001f8a:	d91c      	bls.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d01a      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001f90:	2b12      	cmp	r3, #18
 8001f92:	d018      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001f94:	4a90      	ldr	r2, [pc, #576]	; (80021d8 <HAL_GPIO_Init+0x2c8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d015      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001f9a:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d011      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001fa2:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001faa:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d009      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001fb2:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d005      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001fba:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d001      	beq.n	8001fc6 <HAL_GPIO_Init+0xb6>
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d109      	bne.n	8001fda <HAL_GPIO_Init+0xca>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fc6:	68b3      	ldr	r3, [r6, #8]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d80b      	bhi.n	8001fe4 <HAL_GPIO_Init+0xd4>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fcc:	2400      	movs	r4, #0
 8001fce:	e050      	b.n	8002072 <HAL_GPIO_Init+0x162>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001fd0:	21b2      	movs	r1, #178	; 0xb2
 8001fd2:	4880      	ldr	r0, [pc, #512]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001fd4:	f012 fa7a 	bl	80144cc <assert_failed>
 8001fd8:	e7d3      	b.n	8001f82 <HAL_GPIO_Init+0x72>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001fda:	21b3      	movs	r1, #179	; 0xb3
 8001fdc:	487d      	ldr	r0, [pc, #500]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001fde:	f012 fa75 	bl	80144cc <assert_failed>
 8001fe2:	e7f0      	b.n	8001fc6 <HAL_GPIO_Init+0xb6>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fe4:	21b4      	movs	r1, #180	; 0xb4
 8001fe6:	487b      	ldr	r0, [pc, #492]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001fe8:	f012 fa70 	bl	80144cc <assert_failed>
 8001fec:	e7ee      	b.n	8001fcc <HAL_GPIO_Init+0xbc>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001fee:	21c5      	movs	r1, #197	; 0xc5
 8001ff0:	4878      	ldr	r0, [pc, #480]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001ff2:	f012 fa6b 	bl	80144cc <assert_failed>
 8001ff6:	e055      	b.n	80020a4 <HAL_GPIO_Init+0x194>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001ff8:	21d9      	movs	r1, #217	; 0xd9
 8001ffa:	4876      	ldr	r0, [pc, #472]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 8001ffc:	f012 fa66 	bl	80144cc <assert_failed>
 8002000:	e07d      	b.n	80020fe <HAL_GPIO_Init+0x1ee>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002002:	2309      	movs	r3, #9
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 8002006:	2300      	movs	r3, #0
 8002008:	408b      	lsls	r3, r1
 800200a:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;
 800200c:	3202      	adds	r2, #2
 800200e:	4973      	ldr	r1, [pc, #460]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8002010:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002014:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002016:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8002018:	ea6f 0308 	mvn.w	r3, r8
 800201c:	ea22 0108 	bic.w	r1, r2, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002020:	6870      	ldr	r0, [r6, #4]
 8002022:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8002026:	d001      	beq.n	800202c <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8002028:	ea48 0102 	orr.w	r1, r8, r2
        }
        EXTI->IMR = temp;
 800202c:	4a6c      	ldr	r2, [pc, #432]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800202e:	6011      	str	r1, [r2, #0]

        temp = EXTI->EMR;
 8002030:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002032:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002036:	6870      	ldr	r0, [r6, #4]
 8002038:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800203c:	d001      	beq.n	8002042 <HAL_GPIO_Init+0x132>
        {
          temp |= iocurrent;
 800203e:	ea48 0102 	orr.w	r1, r8, r2
        }
        EXTI->EMR = temp;
 8002042:	4a67      	ldr	r2, [pc, #412]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002044:	6051      	str	r1, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002046:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002048:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204c:	6870      	ldr	r0, [r6, #4]
 800204e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002052:	d001      	beq.n	8002058 <HAL_GPIO_Init+0x148>
        {
          temp |= iocurrent;
 8002054:	ea48 0102 	orr.w	r1, r8, r2
        }
        EXTI->RTSR = temp;
 8002058:	4a61      	ldr	r2, [pc, #388]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800205a:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800205e:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002060:	6871      	ldr	r1, [r6, #4]
 8002062:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8002066:	d001      	beq.n	800206c <HAL_GPIO_Init+0x15c>
        {
          temp |= iocurrent;
 8002068:	ea48 0302 	orr.w	r3, r8, r2
        }
        EXTI->FTSR = temp;
 800206c:	4a5c      	ldr	r2, [pc, #368]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800206e:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002070:	3401      	adds	r4, #1
 8002072:	2c0f      	cmp	r4, #15
 8002074:	f200 80c8 	bhi.w	8002208 <HAL_GPIO_Init+0x2f8>
    ioposition = ((uint32_t)0x01) << position;
 8002078:	2501      	movs	r5, #1
 800207a:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207c:	6833      	ldr	r3, [r6, #0]
 800207e:	ea03 0805 	and.w	r8, r3, r5
    if(iocurrent == ioposition)
 8002082:	ea35 0303 	bics.w	r3, r5, r3
 8002086:	d1f3      	bne.n	8002070 <HAL_GPIO_Init+0x160>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002088:	6873      	ldr	r3, [r6, #4]
 800208a:	2b12      	cmp	r3, #18
 800208c:	bf18      	it	ne
 800208e:	2b02      	cmpne	r3, #2
 8002090:	d118      	bne.n	80020c4 <HAL_GPIO_Init+0x1b4>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002092:	6933      	ldr	r3, [r6, #16]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	bf18      	it	ne
 8002098:	2b0c      	cmpne	r3, #12
 800209a:	d903      	bls.n	80020a4 <HAL_GPIO_Init+0x194>
 800209c:	2b0d      	cmp	r3, #13
 800209e:	d001      	beq.n	80020a4 <HAL_GPIO_Init+0x194>
 80020a0:	2b0e      	cmp	r3, #14
 80020a2:	d1a4      	bne.n	8001fee <HAL_GPIO_Init+0xde>
        temp = GPIOx->AFR[position >> 3];
 80020a4:	08e2      	lsrs	r2, r4, #3
 80020a6:	3208      	adds	r2, #8
 80020a8:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ac:	f004 0307 	and.w	r3, r4, #7
 80020b0:	0099      	lsls	r1, r3, #2
 80020b2:	230f      	movs	r3, #15
 80020b4:	408b      	lsls	r3, r1
 80020b6:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020ba:	6933      	ldr	r3, [r6, #16]
 80020bc:	408b      	lsls	r3, r1
 80020be:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 80020c0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
      temp = GPIOx->MODER;
 80020c4:	683a      	ldr	r2, [r7, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020c6:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80020ca:	2303      	movs	r3, #3
 80020cc:	fa03 f30a 	lsl.w	r3, r3, sl
 80020d0:	ea6f 0903 	mvn.w	r9, r3
 80020d4:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020d8:	6873      	ldr	r3, [r6, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	fa03 f30a 	lsl.w	r3, r3, sl
 80020e2:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 80020e4:	603b      	str	r3, [r7, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e6:	6873      	ldr	r3, [r6, #4]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	2b11      	cmp	r3, #17
 80020ec:	bf18      	it	ne
 80020ee:	2a01      	cmpne	r2, #1
 80020f0:	d901      	bls.n	80020f6 <HAL_GPIO_Init+0x1e6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f2:	2b12      	cmp	r3, #18
 80020f4:	d114      	bne.n	8002120 <HAL_GPIO_Init+0x210>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80020f6:	68f3      	ldr	r3, [r6, #12]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	f63f af7d 	bhi.w	8001ff8 <HAL_GPIO_Init+0xe8>
        temp = GPIOx->OSPEEDR; 
 80020fe:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002100:	ea09 0202 	and.w	r2, r9, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8002104:	68f3      	ldr	r3, [r6, #12]
 8002106:	fa03 f30a 	lsl.w	r3, r3, sl
 800210a:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 800210c:	60bb      	str	r3, [r7, #8]
        temp = GPIOx->OTYPER;
 800210e:	687a      	ldr	r2, [r7, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002114:	6873      	ldr	r3, [r6, #4]
 8002116:	f3c3 1500 	ubfx	r5, r3, #4, #1
 800211a:	40a5      	lsls	r5, r4
 800211c:	4315      	orrs	r5, r2
        GPIOx->OTYPER = temp;
 800211e:	607d      	str	r5, [r7, #4]
      temp = GPIOx->PUPDR;
 8002120:	68fb      	ldr	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002122:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002126:	68b3      	ldr	r3, [r6, #8]
 8002128:	fa03 f30a 	lsl.w	r3, r3, sl
 800212c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8002130:	60fb      	str	r3, [r7, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002132:	6873      	ldr	r3, [r6, #4]
 8002134:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002138:	d09a      	beq.n	8002070 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_GPIO_Init+0x2d4>)
 800213c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800214e:	08a2      	lsrs	r2, r4, #2
 8002150:	1c91      	adds	r1, r2, #2
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8002154:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002158:	f004 0303 	and.w	r3, r4, #3
 800215c:	0099      	lsls	r1, r3, #2
 800215e:	230f      	movs	r3, #15
 8002160:	408b      	lsls	r3, r1
 8002162:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_GPIO_Init+0x2ac>)
 8002168:	429f      	cmp	r7, r3
 800216a:	f43f af4c 	beq.w	8002006 <HAL_GPIO_Init+0xf6>
 800216e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002172:	429f      	cmp	r7, r3
 8002174:	d038      	beq.n	80021e8 <HAL_GPIO_Init+0x2d8>
 8002176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800217a:	429f      	cmp	r7, r3
 800217c:	d036      	beq.n	80021ec <HAL_GPIO_Init+0x2dc>
 800217e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002182:	429f      	cmp	r7, r3
 8002184:	d034      	beq.n	80021f0 <HAL_GPIO_Init+0x2e0>
 8002186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800218a:	429f      	cmp	r7, r3
 800218c:	d032      	beq.n	80021f4 <HAL_GPIO_Init+0x2e4>
 800218e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002192:	429f      	cmp	r7, r3
 8002194:	d030      	beq.n	80021f8 <HAL_GPIO_Init+0x2e8>
 8002196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800219a:	429f      	cmp	r7, r3
 800219c:	d02e      	beq.n	80021fc <HAL_GPIO_Init+0x2ec>
 800219e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a2:	429f      	cmp	r7, r3
 80021a4:	d02c      	beq.n	8002200 <HAL_GPIO_Init+0x2f0>
 80021a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021aa:	429f      	cmp	r7, r3
 80021ac:	d02a      	beq.n	8002204 <HAL_GPIO_Init+0x2f4>
 80021ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b2:	429f      	cmp	r7, r3
 80021b4:	f43f af25 	beq.w	8002002 <HAL_GPIO_Init+0xf2>
 80021b8:	230a      	movs	r3, #10
 80021ba:	e725      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40021400 	.word	0x40021400
 80021c8:	40021c00 	.word	0x40021c00
 80021cc:	40022400 	.word	0x40022400
 80021d0:	40022800 	.word	0x40022800
 80021d4:	080199c8 	.word	0x080199c8
 80021d8:	10110000 	.word	0x10110000
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40013c00 	.word	0x40013c00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	2301      	movs	r3, #1
 80021ea:	e70d      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e70b      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021f0:	2303      	movs	r3, #3
 80021f2:	e709      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e707      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021f8:	2305      	movs	r3, #5
 80021fa:	e705      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 80021fc:	2306      	movs	r3, #6
 80021fe:	e703      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 8002200:	2307      	movs	r3, #7
 8002202:	e701      	b.n	8002008 <HAL_GPIO_Init+0xf8>
 8002204:	2308      	movs	r3, #8
 8002206:	e6ff      	b.n	8002008 <HAL_GPIO_Init+0xf8>
      }
    }
  }
}
 8002208:	b002      	add	sp, #8
 800220a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800220e:	bf00      	nop

08002210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4604      	mov	r4, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002214:	460d      	mov	r5, r1
 8002216:	b121      	cbz	r1, 8002222 <HAL_GPIO_ReadPin+0x12>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002218:	6923      	ldr	r3, [r4, #16]
 800221a:	421d      	tst	r5, r3
 800221c:	d007      	beq.n	800222e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800221e:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002220:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002222:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002226:	4803      	ldr	r0, [pc, #12]	; (8002234 <HAL_GPIO_ReadPin+0x24>)
 8002228:	f012 f950 	bl	80144cc <assert_failed>
 800222c:	e7f4      	b.n	8002218 <HAL_GPIO_ReadPin+0x8>
    bitstatus = GPIO_PIN_RESET;
 800222e:	2000      	movs	r0, #0
 8002230:	e7f6      	b.n	8002220 <HAL_GPIO_ReadPin+0x10>
 8002232:	bf00      	nop
 8002234:	080199c8 	.word	0x080199c8

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	4605      	mov	r5, r0
 800223c:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800223e:	460e      	mov	r6, r1
 8002240:	b121      	cbz	r1, 800224c <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002242:	2c01      	cmp	r4, #1
 8002244:	d808      	bhi.n	8002258 <HAL_GPIO_WritePin+0x20>

  if(PinState != GPIO_PIN_RESET)
 8002246:	b16c      	cbz	r4, 8002264 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002248:	61ae      	str	r6, [r5, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800224a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800224c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002250:	4806      	ldr	r0, [pc, #24]	; (800226c <HAL_GPIO_WritePin+0x34>)
 8002252:	f012 f93b 	bl	80144cc <assert_failed>
 8002256:	e7f4      	b.n	8002242 <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002258:	f240 119b 	movw	r1, #411	; 0x19b
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <HAL_GPIO_WritePin+0x34>)
 800225e:	f012 f935 	bl	80144cc <assert_failed>
 8002262:	e7f0      	b.n	8002246 <HAL_GPIO_WritePin+0xe>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002264:	0436      	lsls	r6, r6, #16
 8002266:	61ae      	str	r6, [r5, #24]
}
 8002268:	e7ef      	b.n	800224a <HAL_GPIO_WritePin+0x12>
 800226a:	bf00      	nop
 800226c:	080199c8 	.word	0x080199c8

08002270 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002270:	4770      	bx	lr
	...

08002274 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002274:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4203      	tst	r3, r0
 800227c:	d100      	bne.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800227e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002280:	4b02      	ldr	r3, [pc, #8]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002282:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002284:	f7ff fff4 	bl	8002270 <HAL_GPIO_EXTI_Callback>
}
 8002288:	e7f9      	b.n	800227e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800228a:	bf00      	nop
 800228c:	40013c00 	.word	0x40013c00

08002290 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002292:	6806      	ldr	r6, [r0, #0]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002294:	6a34      	ldr	r4, [r6, #32]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002296:	f004 070f 	and.w	r7, r4, #15
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800229a:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229e:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d000      	beq.n	80022a8 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 80022a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022a8:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80022aa:	2c00      	cmp	r4, #0
 80022ac:	d0fb      	beq.n	80022a6 <HCD_RXQLVL_IRQHandler+0x16>
 80022ae:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80022b2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80022b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80022b8:	2900      	cmp	r1, #0
 80022ba:	d0f4      	beq.n	80022a6 <HCD_RXQLVL_IRQHandler+0x16>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80022bc:	4622      	mov	r2, r4
 80022be:	4630      	mov	r0, r6
 80022c0:	f006 fb55 	bl	800896e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022c4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80022c8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80022cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022ce:	4422      	add	r2, r4
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022d4:	4422      	add	r2, r4
 80022d6:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80022d8:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 80022dc:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HCD_RXQLVL_IRQHandler+0x80>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0de      	beq.n	80022a6 <HCD_RXQLVL_IRQHandler+0x16>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022e8:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022f4:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80022f8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80022fc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002300:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002304:	f082 0201 	eor.w	r2, r2, #1
 8002308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800230c:	e7cb      	b.n	80022a6 <HCD_RXQLVL_IRQHandler+0x16>
 800230e:	bf00      	nop
 8002310:	1ff80000 	.word	0x1ff80000

08002314 <HAL_HCD_HC_Init>:
{
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002316:	b085      	sub	sp, #20
 8002318:	4604      	mov	r4, r0
 800231a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 800231e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8002322:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8002326:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
 800232a:	2801      	cmp	r0, #1
 800232c:	d03b      	beq.n	80023a6 <HAL_HCD_HC_Init+0x92>
 800232e:	2001      	movs	r0, #1
 8002330:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002334:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8002338:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800233c:	f04f 0c00 	mov.w	ip, #0
 8002340:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002344:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8002348:	f8a0 7040 	strh.w	r7, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 800234c:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002350:	f880 603f 	strb.w	r6, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002354:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 8002358:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 800235c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002360:	d118      	bne.n	8002394 <HAL_HCD_HC_Init+0x80>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002362:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8002366:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800236a:	f04f 0c00 	mov.w	ip, #0
 800236e:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8002372:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8002376:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800237a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 800237e:	9702      	str	r7, [sp, #8]
 8002380:	9601      	str	r6, [sp, #4]
 8002382:	9500      	str	r5, [sp, #0]
 8002384:	6820      	ldr	r0, [r4, #0]
 8002386:	f006 fbc6 	bl	8008b16 <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 800238a:	2300      	movs	r3, #0
 800238c:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
}
 8002390:	b005      	add	sp, #20
 8002392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002394:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8002398:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800239c:	f04f 0c01 	mov.w	ip, #1
 80023a0:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
 80023a4:	e7e5      	b.n	8002372 <HAL_HCD_HC_Init+0x5e>
  __HAL_LOCK(hhcd);
 80023a6:	2002      	movs	r0, #2
 80023a8:	e7f2      	b.n	8002390 <HAL_HCD_HC_Init+0x7c>

080023aa <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 80023aa:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d00b      	beq.n	80023ca <HAL_HCD_HC_Halt+0x20>
{
 80023b2:	b510      	push	{r4, lr}
 80023b4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80023b6:	2301      	movs	r3, #1
 80023b8:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023bc:	6800      	ldr	r0, [r0, #0]
 80023be:	f006 fc33 	bl	8008c28 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 80023c8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80023ca:	2002      	movs	r0, #2
}
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_HCD_Init>:
  if (hhcd == NULL)
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d053      	beq.n	800247c <HAL_HCD_Init+0xac>
{
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	4604      	mov	r4, r0
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	4a28      	ldr	r2, [pc, #160]	; (8002480 <HAL_HCD_Init+0xb0>)
 80023de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e2:	bf18      	it	ne
 80023e4:	4293      	cmpne	r3, r2
 80023e6:	d13e      	bne.n	8002466 <HAL_HCD_Init+0x96>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023e8:	f894 32b9 	ldrb.w	r3, [r4, #697]	; 0x2b9
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03f      	beq.n	8002470 <HAL_HCD_Init+0xa0>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80023f0:	2303      	movs	r3, #3
 80023f2:	f884 32b9 	strb.w	r3, [r4, #697]	; 0x2b9
  __HAL_HCD_DISABLE(hhcd);
 80023f6:	6820      	ldr	r0, [r4, #0]
 80023f8:	f006 fa5e 	bl	80088b8 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80023fc:	46a4      	mov	ip, r4
 80023fe:	f85c 6b10 	ldr.w	r6, [ip], #16
 8002402:	46ee      	mov	lr, sp
 8002404:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002408:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800240c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002410:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002414:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002418:	e88e 0003 	stmia.w	lr, {r0, r1}
 800241c:	1d25      	adds	r5, r4, #4
 800241e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002422:	4630      	mov	r0, r6
 8002424:	f006 fa04 	bl	8008830 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002428:	2101      	movs	r1, #1
 800242a:	6820      	ldr	r0, [r4, #0]
 800242c:	f006 fa4a 	bl	80088c4 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002430:	46a4      	mov	ip, r4
 8002432:	f85c 6b10 	ldr.w	r6, [ip], #16
 8002436:	46ee      	mov	lr, sp
 8002438:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800243c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002440:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002444:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002448:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800244c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8002450:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002454:	4630      	mov	r0, r6
 8002456:	f006 fae3 	bl	8008a20 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800245a:	2301      	movs	r3, #1
 800245c:	f884 32b9 	strb.w	r3, [r4, #697]	; 0x2b9
  return HAL_OK;
 8002460:	2000      	movs	r0, #0
}
 8002462:	b00a      	add	sp, #40	; 0x28
 8002464:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8002466:	217c      	movs	r1, #124	; 0x7c
 8002468:	4806      	ldr	r0, [pc, #24]	; (8002484 <HAL_HCD_Init+0xb4>)
 800246a:	f012 f82f 	bl	80144cc <assert_failed>
 800246e:	e7bb      	b.n	80023e8 <HAL_HCD_Init+0x18>
    hhcd->Lock = HAL_UNLOCKED;
 8002470:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8002474:	4620      	mov	r0, r4
 8002476:	f015 fb7f 	bl	8017b78 <HAL_HCD_MspInit>
 800247a:	e7b9      	b.n	80023f0 <HAL_HCD_Init+0x20>
    return HAL_ERROR;
 800247c:	2001      	movs	r0, #1
}
 800247e:	4770      	bx	lr
 8002480:	40040000 	.word	0x40040000
 8002484:	08019a04 	.word	0x08019a04

08002488 <HAL_HCD_HC_SubmitRequest>:
{
 8002488:	b538      	push	{r3, r4, r5, lr}
 800248a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800248e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002492:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8002496:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800249a:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800249e:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  if (token == 0U)
 80024a2:	b974      	cbnz	r4, 80024c2 <HAL_HCD_HC_SubmitRequest+0x3a>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80024a4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80024a8:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80024ac:	f04f 0e03 	mov.w	lr, #3
 80024b0:	f88c e042 	strb.w	lr, [ip, #66]	; 0x42
  switch (ep_type)
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	f200 8094 	bhi.w	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
 80024ba:	e8df f003 	tbb	[pc, r3]
 80024be:	8b0b      	.short	0x8b0b
 80024c0:	5d2f      	.short	0x5d2f
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80024c6:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80024ca:	f04f 0e02 	mov.w	lr, #2
 80024ce:	f88c e042 	strb.w	lr, [ip, #66]	; 0x42
 80024d2:	e7ef      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x2c>
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024d4:	2c01      	cmp	r4, #1
 80024d6:	bf08      	it	eq
 80024d8:	2a00      	cmpeq	r2, #0
 80024da:	f040 8082 	bne.w	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
        if (length == 0U)
 80024de:	b935      	cbnz	r5, 80024ee <HAL_HCD_HC_SubmitRequest+0x66>
          hhcd->hc[ch_num].toggle_out = 1U;
 80024e0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80024e4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024ee:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80024f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80024f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024fa:	b93b      	cbnz	r3, 800250c <HAL_HCD_HC_SubmitRequest+0x84>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024fc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002500:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250a:	e06a      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002510:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800251a:	e062      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
      if (direction == 0U)
 800251c:	b9aa      	cbnz	r2, 800254a <HAL_HCD_HC_SubmitRequest+0xc2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800251e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002522:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800252a:	b933      	cbnz	r3, 800253a <HAL_HCD_HC_SubmitRequest+0xb2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800252c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002530:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002538:	e053      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800253a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800253e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002548:	e04b      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800254a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800254e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002556:	b93b      	cbnz	r3, 8002568 <HAL_HCD_HC_SubmitRequest+0xe0>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002558:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800255c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002566:	e03c      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002568:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800256c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002570:	2202      	movs	r2, #2
 8002572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002576:	e034      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
      if (direction == 0U)
 8002578:	b9aa      	cbnz	r2, 80025a6 <HAL_HCD_HC_SubmitRequest+0x11e>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800257a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800257e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002586:	b933      	cbnz	r3, 8002596 <HAL_HCD_HC_SubmitRequest+0x10e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002588:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800258c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002594:	e025      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002596:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800259a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a4:	e01d      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025a6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025aa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b2:	b93b      	cbnz	r3, 80025c4 <HAL_HCD_HC_SubmitRequest+0x13c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025b4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025b8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c2:	e00e      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025c4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025c8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d2:	e006      	b.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x15a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025d4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025d8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025e2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80025e6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80025ea:	9a05      	ldr	r2, [sp, #20]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80025ee:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80025f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].ch_num = ch_num;
 80025f8:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 80025fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002600:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002604:	00c9      	lsls	r1, r1, #3
 8002606:	3138      	adds	r1, #56	; 0x38
 8002608:	7c02      	ldrb	r2, [r0, #16]
 800260a:	4401      	add	r1, r0
 800260c:	6800      	ldr	r0, [r0, #0]
 800260e:	f006 fb89 	bl	8008d24 <USB_HC_StartXfer>
}
 8002612:	bd38      	pop	{r3, r4, r5, pc}

08002614 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002614:	b530      	push	{r4, r5, lr}
 8002616:	b083      	sub	sp, #12
 8002618:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800261a:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800261c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002620:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8002622:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002626:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002628:	9b00      	ldr	r3, [sp, #0]
 800262a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800262e:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002630:	9b01      	ldr	r3, [sp, #4]
 8002632:	f013 0f02 	tst.w	r3, #2
 8002636:	d007      	beq.n	8002648 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002638:	9b01      	ldr	r3, [sp, #4]
 800263a:	f013 0f01 	tst.w	r3, #1
 800263e:	d128      	bne.n	8002692 <HCD_Port_IRQHandler+0x7e>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002640:	9b00      	ldr	r3, [sp, #0]
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002648:	9b01      	ldr	r3, [sp, #4]
 800264a:	f013 0f08 	tst.w	r3, #8
 800264e:	d013      	beq.n	8002678 <HCD_Port_IRQHandler+0x64>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002650:	9b00      	ldr	r3, [sp, #0]
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002658:	9b01      	ldr	r3, [sp, #4]
 800265a:	f013 0f04 	tst.w	r3, #4
 800265e:	d034      	beq.n	80026ca <HCD_Port_IRQHandler+0xb6>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002660:	69a3      	ldr	r3, [r4, #24]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d01c      	beq.n	80026a0 <HCD_Port_IRQHandler+0x8c>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002666:	68e3      	ldr	r3, [r4, #12]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d029      	beq.n	80026c0 <HCD_Port_IRQHandler+0xac>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800266c:	4620      	mov	r0, r4
 800266e:	f015 faec 	bl	8017c4a <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002672:	4620      	mov	r0, r4
 8002674:	f015 fadc 	bl	8017c30 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002678:	9b01      	ldr	r3, [sp, #4]
 800267a:	f013 0f20 	tst.w	r3, #32
 800267e:	d003      	beq.n	8002688 <HCD_Port_IRQHandler+0x74>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002680:	9b00      	ldr	r3, [sp, #0]
 8002682:	f043 0320 	orr.w	r3, r3, #32
 8002686:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002688:	9b00      	ldr	r3, [sp, #0]
 800268a:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 800268e:	b003      	add	sp, #12
 8002690:	bd30      	pop	{r4, r5, pc}
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002692:	69ab      	ldr	r3, [r5, #24]
 8002694:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002698:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 800269a:	f015 fac9 	bl	8017c30 <HAL_HCD_Connect_Callback>
 800269e:	e7cf      	b.n	8002640 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80026a0:	9b01      	ldr	r3, [sp, #4]
 80026a2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80026a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026aa:	d004      	beq.n	80026b6 <HCD_Port_IRQHandler+0xa2>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026ac:	2101      	movs	r1, #1
 80026ae:	6820      	ldr	r0, [r4, #0]
 80026b0:	f006 f974 	bl	800899c <USB_InitFSLSPClkSel>
 80026b4:	e7da      	b.n	800266c <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80026b6:	2102      	movs	r1, #2
 80026b8:	6820      	ldr	r0, [r4, #0]
 80026ba:	f006 f96f 	bl	800899c <USB_InitFSLSPClkSel>
 80026be:	e7d5      	b.n	800266c <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 80026c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80026c4:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 80026c8:	e7d0      	b.n	800266c <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 80026ca:	4620      	mov	r0, r4
 80026cc:	f015 fac3 	bl	8017c56 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80026d0:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80026d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026d8:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	6993      	ldr	r3, [r2, #24]
 80026e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026e4:	6193      	str	r3, [r2, #24]
 80026e6:	e7c7      	b.n	8002678 <HCD_Port_IRQHandler+0x64>

080026e8 <HCD_HC_IN_IRQHandler>:
{
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	4606      	mov	r6, r0
 80026ec:	460c      	mov	r4, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026ee:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026f0:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 80026f4:	f507 65a0 	add.w	r5, r7, #1280	; 0x500
 80026f8:	68ab      	ldr	r3, [r5, #8]
 80026fa:	f013 0f04 	tst.w	r3, #4
 80026fe:	d037      	beq.n	8002770 <HCD_HC_IN_IRQHandler+0x88>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002700:	2304      	movs	r3, #4
 8002702:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002704:	68eb      	ldr	r3, [r5, #12]
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	60eb      	str	r3, [r5, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800270c:	68ab      	ldr	r3, [r5, #8]
 800270e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002712:	d163      	bne.n	80027dc <HCD_HC_IN_IRQHandler+0xf4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002714:	68ab      	ldr	r3, [r5, #8]
 8002716:	f013 0f01 	tst.w	r3, #1
 800271a:	f000 8088 	beq.w	800282e <HCD_HC_IN_IRQHandler+0x146>
    if (hhcd->Init.dma_enable != 0U)
 800271e:	6933      	ldr	r3, [r6, #16]
 8002720:	b14b      	cbz	r3, 8002736 <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002722:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002726:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800272a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800272c:	6929      	ldr	r1, [r5, #16]
 800272e:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002732:	1a52      	subs	r2, r2, r1
 8002734:	64da      	str	r2, [r3, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8002736:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800273a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800273e:	2201      	movs	r2, #1
 8002740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002744:	2100      	movs	r1, #0
 8002746:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002748:	60aa      	str	r2, [r5, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800274a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800274e:	2b02      	cmp	r3, #2
 8002750:	bf18      	it	ne
 8002752:	428b      	cmpne	r3, r1
 8002754:	d04e      	beq.n	80027f4 <HCD_HC_IN_IRQHandler+0x10c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002756:	2b03      	cmp	r3, #3
 8002758:	d057      	beq.n	800280a <HCD_HC_IN_IRQHandler+0x122>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800275a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800275e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002762:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002766:	f082 0201 	eor.w	r2, r2, #1
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002770:	68ab      	ldr	r3, [r5, #8]
 8002772:	f013 0f20 	tst.w	r3, #32
 8002776:	d002      	beq.n	800277e <HCD_HC_IN_IRQHandler+0x96>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002778:	2320      	movs	r3, #32
 800277a:	60ab      	str	r3, [r5, #8]
 800277c:	e7c6      	b.n	800270c <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800277e:	68ab      	ldr	r3, [r5, #8]
 8002780:	f013 0f08 	tst.w	r3, #8
 8002784:	d117      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0xce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002786:	68ab      	ldr	r3, [r5, #8]
 8002788:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800278c:	d0be      	beq.n	800270c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278e:	68eb      	ldr	r3, [r5, #12]
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002796:	6800      	ldr	r0, [r0, #0]
 8002798:	f006 fa46 	bl	8008c28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800279c:	2310      	movs	r3, #16
 800279e:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80027a4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80027a8:	2208      	movs	r2, #8
 80027aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b2:	60ab      	str	r3, [r5, #8]
 80027b4:	e7aa      	b.n	800270c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b6:	68eb      	ldr	r3, [r5, #12]
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	60eb      	str	r3, [r5, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80027be:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80027c2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80027c6:	2205      	movs	r2, #5
 80027c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027cc:	2310      	movs	r3, #16
 80027ce:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027d0:	2308      	movs	r3, #8
 80027d2:	60ab      	str	r3, [r5, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	6800      	ldr	r0, [r0, #0]
 80027d6:	f006 fa27 	bl	8008c28 <USB_HC_Halt>
 80027da:	e797      	b.n	800270c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027dc:	68eb      	ldr	r3, [r5, #12]
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	4621      	mov	r1, r4
 80027e6:	6830      	ldr	r0, [r6, #0]
 80027e8:	f006 fa1e 	bl	8008c28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f0:	60ab      	str	r3, [r5, #8]
 80027f2:	e7bc      	b.n	800276e <HCD_HC_IN_IRQHandler+0x86>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f4:	68eb      	ldr	r3, [r5, #12]
 80027f6:	f043 0302 	orr.w	r3, r3, #2
 80027fa:	60eb      	str	r3, [r5, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fc:	4621      	mov	r1, r4
 80027fe:	6830      	ldr	r0, [r6, #0]
 8002800:	f006 fa12 	bl	8008c28 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002804:	2310      	movs	r3, #16
 8002806:	60ab      	str	r3, [r5, #8]
 8002808:	e7a7      	b.n	800275a <HCD_HC_IN_IRQHandler+0x72>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800280a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800280e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002812:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002816:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800281a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800281e:	2201      	movs	r2, #1
 8002820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002824:	4621      	mov	r1, r4
 8002826:	4630      	mov	r0, r6
 8002828:	f015 fa0e 	bl	8017c48 <HAL_HCD_HC_NotifyURBChange_Callback>
 800282c:	e795      	b.n	800275a <HCD_HC_IN_IRQHandler+0x72>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800282e:	68ab      	ldr	r3, [r5, #8]
 8002830:	f013 0f02 	tst.w	r3, #2
 8002834:	d05f      	beq.n	80028f6 <HCD_HC_IN_IRQHandler+0x20e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002836:	68eb      	ldr	r3, [r5, #12]
 8002838:	f023 0302 	bic.w	r3, r3, #2
 800283c:	60eb      	str	r3, [r5, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800283e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002842:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800284a:	2b01      	cmp	r3, #1
 800284c:	d01d      	beq.n	800288a <HCD_HC_IN_IRQHandler+0x1a2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800284e:	2b05      	cmp	r3, #5
 8002850:	d02f      	beq.n	80028b2 <HCD_HC_IN_IRQHandler+0x1ca>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002852:	2b08      	cmp	r3, #8
 8002854:	bf18      	it	ne
 8002856:	2b06      	cmpne	r3, #6
 8002858:	d13b      	bne.n	80028d2 <HCD_HC_IN_IRQHandler+0x1ea>
      hhcd->hc[ch_num].ErrCnt++;
 800285a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800285e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8002862:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002864:	3301      	adds	r3, #1
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002868:	2b03      	cmp	r3, #3
 800286a:	d92a      	bls.n	80028c2 <HCD_HC_IN_IRQHandler+0x1da>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800286c:	4613      	mov	r3, r2
 800286e:	2200      	movs	r2, #0
 8002870:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002872:	2204      	movs	r2, #4
 8002874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002878:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800287c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002884:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002888:	e006      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1b0>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800288a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800288e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002892:	2201      	movs	r2, #1
 8002894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002898:	2302      	movs	r3, #2
 800289a:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800289c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028a0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80028a4:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80028a8:	4621      	mov	r1, r4
 80028aa:	4630      	mov	r0, r6
 80028ac:	f015 f9cc 	bl	8017c48 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028b0:	e75d      	b.n	800276e <HCD_HC_IN_IRQHandler+0x86>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028b6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80028ba:	2205      	movs	r2, #5
 80028bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80028c0:	e7ea      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1b0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028c6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80028d0:	e7d2      	b.n	8002878 <HCD_HC_IN_IRQHandler+0x190>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d1e0      	bne.n	8002898 <HCD_HC_IN_IRQHandler+0x1b0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028da:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028e4:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028f0:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80028f4:	e7d0      	b.n	8002898 <HCD_HC_IN_IRQHandler+0x1b0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028f6:	68ab      	ldr	r3, [r5, #8]
 80028f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80028fc:	d11b      	bne.n	8002936 <HCD_HC_IN_IRQHandler+0x24e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028fe:	68ab      	ldr	r3, [r5, #8]
 8002900:	f013 0f10 	tst.w	r3, #16
 8002904:	f43f af33 	beq.w	800276e <HCD_HC_IN_IRQHandler+0x86>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002908:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800290c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002914:	2b03      	cmp	r3, #3
 8002916:	d027      	beq.n	8002968 <HCD_HC_IN_IRQHandler+0x280>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002918:	2b02      	cmp	r3, #2
 800291a:	bf18      	it	ne
 800291c:	2b00      	cmpne	r3, #0
 800291e:	d107      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0x248>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002920:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002924:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002928:	2200      	movs	r2, #0
 800292a:	659a      	str	r2, [r3, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 800292c:	6933      	ldr	r3, [r6, #16]
 800292e:	b353      	cbz	r3, 8002986 <HCD_HC_IN_IRQHandler+0x29e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002930:	2310      	movs	r3, #16
 8002932:	60ab      	str	r3, [r5, #8]
}
 8002934:	e71b      	b.n	800276e <HCD_HC_IN_IRQHandler+0x86>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002936:	68eb      	ldr	r3, [r5, #12]
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	60eb      	str	r3, [r5, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800293e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002942:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002946:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002948:	3201      	adds	r2, #1
 800294a:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 800294c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002950:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002954:	2206      	movs	r2, #6
 8002956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295a:	4621      	mov	r1, r4
 800295c:	6830      	ldr	r0, [r6, #0]
 800295e:	f006 f963 	bl	8008c28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	60ab      	str	r3, [r5, #8]
 8002966:	e702      	b.n	800276e <HCD_HC_IN_IRQHandler+0x86>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002968:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800296c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002970:	2200      	movs	r2, #0
 8002972:	659a      	str	r2, [r3, #88]	; 0x58
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002974:	68eb      	ldr	r3, [r5, #12]
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	60eb      	str	r3, [r5, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297c:	4621      	mov	r1, r4
 800297e:	6830      	ldr	r0, [r6, #0]
 8002980:	f006 f952 	bl	8008c28 <USB_HC_Halt>
 8002984:	e7d4      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x248>
        hhcd->hc[ch_num].state = HC_NAK;
 8002986:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800298a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800298e:	2203      	movs	r2, #3
 8002990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002994:	68eb      	ldr	r3, [r5, #12]
 8002996:	f043 0302 	orr.w	r3, r3, #2
 800299a:	60eb      	str	r3, [r5, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299c:	4621      	mov	r1, r4
 800299e:	6830      	ldr	r0, [r6, #0]
 80029a0:	f006 f942 	bl	8008c28 <USB_HC_Halt>
 80029a4:	e7c4      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x248>

080029a6 <HCD_HC_OUT_IRQHandler>:
{
 80029a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a8:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80029ae:	f503 65a0 	add.w	r5, r3, #1280	; 0x500
 80029b2:	68aa      	ldr	r2, [r5, #8]
 80029b4:	f012 0f04 	tst.w	r2, #4
 80029b8:	d006      	beq.n	80029c8 <HCD_HC_OUT_IRQHandler+0x22>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029ba:	2304      	movs	r3, #4
 80029bc:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029be:	68eb      	ldr	r3, [r5, #12]
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	60eb      	str	r3, [r5, #12]
}
 80029c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c8:	4606      	mov	r6, r0
 80029ca:	460c      	mov	r4, r1
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029cc:	68aa      	ldr	r2, [r5, #8]
 80029ce:	f012 0f20 	tst.w	r2, #32
 80029d2:	d01e      	beq.n	8002a12 <HCD_HC_OUT_IRQHandler+0x6c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029d4:	2320      	movs	r3, #32
 80029d6:	60ab      	str	r3, [r5, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029d8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80029dc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d1ee      	bne.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].do_ping = 0U;
 80029e8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80029ec:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029f6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80029fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a04:	68eb      	ldr	r3, [r5, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60eb      	str	r3, [r5, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0a:	6800      	ldr	r0, [r0, #0]
 8002a0c:	f006 f90c 	bl	8008c28 <USB_HC_Halt>
 8002a10:	e7d9      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a12:	68aa      	ldr	r2, [r5, #8]
 8002a14:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a18:	d134      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0xde>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a1a:	68aa      	ldr	r2, [r5, #8]
 8002a1c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002a20:	d14a      	bne.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x112>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a22:	68aa      	ldr	r2, [r5, #8]
 8002a24:	f012 0f01 	tst.w	r2, #1
 8002a28:	d151      	bne.n	8002ace <HCD_HC_OUT_IRQHandler+0x128>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a2a:	68aa      	ldr	r2, [r5, #8]
 8002a2c:	f012 0f08 	tst.w	r2, #8
 8002a30:	d163      	bne.n	8002afa <HCD_HC_OUT_IRQHandler+0x154>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a32:	68aa      	ldr	r2, [r5, #8]
 8002a34:	f012 0f10 	tst.w	r2, #16
 8002a38:	d070      	beq.n	8002b1c <HCD_HC_OUT_IRQHandler+0x176>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a3a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a3e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002a42:	2200      	movs	r2, #0
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8002a46:	2203      	movs	r2, #3
 8002a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b96b      	cbnz	r3, 8002a6e <HCD_HC_OUT_IRQHandler+0xc8>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002a52:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a56:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	b933      	cbnz	r3, 8002a6e <HCD_HC_OUT_IRQHandler+0xc8>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a60:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a64:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a6e:	68eb      	ldr	r3, [r5, #12]
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a76:	4621      	mov	r1, r4
 8002a78:	6830      	ldr	r0, [r6, #0]
 8002a7a:	f006 f8d5 	bl	8008c28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a7e:	2310      	movs	r3, #16
 8002a80:	60ab      	str	r3, [r5, #8]
 8002a82:	e7a0      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a84:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a88:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a98:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a9c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa4:	68eb      	ldr	r3, [r5, #12]
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aac:	6800      	ldr	r0, [r0, #0]
 8002aae:	f006 f8bb 	bl	8008c28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ab2:	2340      	movs	r3, #64	; 0x40
 8002ab4:	60ab      	str	r3, [r5, #8]
 8002ab6:	e786      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab8:	68eb      	ldr	r3, [r5, #12]
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac0:	6800      	ldr	r0, [r0, #0]
 8002ac2:	f006 f8b1 	bl	8008c28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aca:	60ab      	str	r3, [r5, #8]
 8002acc:	e77b      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ace:	008f      	lsls	r7, r1, #2
 8002ad0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002ad4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002adc:	68eb      	ldr	r3, [r5, #12]
 8002ade:	f043 0302 	orr.w	r3, r3, #2
 8002ae2:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae4:	6800      	ldr	r0, [r0, #0]
 8002ae6:	f006 f89f 	bl	8008c28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002aea:	2301      	movs	r3, #1
 8002aec:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aee:	443c      	add	r4, r7
 8002af0:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8002af4:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002af8:	e765      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002afa:	2308      	movs	r3, #8
 8002afc:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002afe:	68eb      	ldr	r3, [r5, #12]
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b06:	6800      	ldr	r0, [r0, #0]
 8002b08:	f006 f88e 	bl	8008c28 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002b0c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002b10:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8002b14:	2305      	movs	r3, #5
 8002b16:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002b1a:	e754      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b1c:	68aa      	ldr	r2, [r5, #8]
 8002b1e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b22:	d135      	bne.n	8002b90 <HCD_HC_OUT_IRQHandler+0x1ea>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b24:	68aa      	ldr	r2, [r5, #8]
 8002b26:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b2a:	d142      	bne.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x20c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b2c:	68aa      	ldr	r2, [r5, #8]
 8002b2e:	f012 0f02 	tst.w	r2, #2
 8002b32:	f43f af48 	beq.w	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b36:	68ea      	ldr	r2, [r5, #12]
 8002b38:	f022 0202 	bic.w	r2, r2, #2
 8002b3c:	60ea      	str	r2, [r5, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b3e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002b42:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002b46:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 8002b4a:	2a01      	cmp	r2, #1
 8002b4c:	d045      	beq.n	8002bda <HCD_HC_OUT_IRQHandler+0x234>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b4e:	2a03      	cmp	r2, #3
 8002b50:	d059      	beq.n	8002c06 <HCD_HC_OUT_IRQHandler+0x260>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b52:	2a04      	cmp	r2, #4
 8002b54:	d06b      	beq.n	8002c2e <HCD_HC_OUT_IRQHandler+0x288>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b56:	2a05      	cmp	r2, #5
 8002b58:	d070      	beq.n	8002c3c <HCD_HC_OUT_IRQHandler+0x296>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b5a:	2a08      	cmp	r2, #8
 8002b5c:	bf18      	it	ne
 8002b5e:	2a06      	cmpne	r2, #6
 8002b60:	d158      	bne.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
      hhcd->hc[ch_num].ErrCnt++;
 8002b62:	2128      	movs	r1, #40	; 0x28
 8002b64:	fb01 0104 	mla	r1, r1, r4, r0
 8002b68:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002b6a:	3201      	adds	r2, #1
 8002b6c:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b6e:	2a03      	cmp	r2, #3
 8002b70:	d96a      	bls.n	8002c48 <HCD_HC_OUT_IRQHandler+0x2a2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b72:	460a      	mov	r2, r1
 8002b74:	2100      	movs	r1, #0
 8002b76:	6591      	str	r1, [r2, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b78:	2104      	movs	r1, #4
 8002b7a:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b7e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b82:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8002b8e:	e041      	b.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b90:	68eb      	ldr	r3, [r5, #12]
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b98:	6800      	ldr	r0, [r0, #0]
 8002b9a:	f006 f845 	bl	8008c28 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b9e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002ba2:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	60ab      	str	r3, [r5, #8]
 8002bb0:	e709      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb2:	68eb      	ldr	r3, [r5, #12]
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	60eb      	str	r3, [r5, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bba:	6800      	ldr	r0, [r0, #0]
 8002bbc:	f006 f834 	bl	8008c28 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc8:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002bce:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8002bd8:	e6f5      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bda:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002bde:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002be6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bea:	3b02      	subs	r3, #2
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d810      	bhi.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bf2:	2328      	movs	r3, #40	; 0x28
 8002bf4:	fb03 0301 	mla	r3, r3, r1, r0
 8002bf8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8002bfc:	f082 0201 	eor.w	r2, r2, #1
 8002c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002c04:	e006      	b.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c06:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002c0a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c14:	2302      	movs	r3, #2
 8002c16:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c18:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002c1c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002c20:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8002c24:	4621      	mov	r1, r4
 8002c26:	4630      	mov	r0, r6
 8002c28:	f015 f80e 	bl	8017c48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c2c:	e6cb      	b.n	80029c6 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c2e:	2328      	movs	r3, #40	; 0x28
 8002c30:	fb03 0301 	mla	r3, r3, r1, r0
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002c3a:	e7eb      	b.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c3c:	2328      	movs	r3, #40	; 0x28
 8002c3e:	fb03 0301 	mla	r3, r3, r1, r0
 8002c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002c46:	e7e5      	b.n	8002c14 <HCD_HC_OUT_IRQHandler+0x26e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c48:	2228      	movs	r2, #40	; 0x28
 8002c4a:	fb02 0204 	mla	r2, r2, r4, r0
 8002c4e:	2102      	movs	r1, #2
 8002c50:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8002c54:	e793      	b.n	8002b7e <HCD_HC_OUT_IRQHandler+0x1d8>

08002c56 <HAL_HCD_IRQHandler>:
{
 8002c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c58:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c5a:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f005 fe99 	bl	8008994 <USB_GetMode>
 8002c62:	2801      	cmp	r0, #1
 8002c64:	d000      	beq.n	8002c68 <HAL_HCD_IRQHandler+0x12>
}
 8002c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	f005 fe8f 	bl	800898c <USB_ReadInterrupts>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d0f9      	beq.n	8002c66 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c72:	6820      	ldr	r0, [r4, #0]
 8002c74:	f005 fe8a 	bl	800898c <USB_ReadInterrupts>
 8002c78:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002c7c:	d003      	beq.n	8002c86 <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c84:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c86:	6820      	ldr	r0, [r4, #0]
 8002c88:	f005 fe80 	bl	800898c <USB_ReadInterrupts>
 8002c8c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002c90:	d003      	beq.n	8002c9a <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c98:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	f005 fe76 	bl	800898c <USB_ReadInterrupts>
 8002ca0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002ca4:	d003      	beq.n	8002cae <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cac:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002cae:	6820      	ldr	r0, [r4, #0]
 8002cb0:	f005 fe6c 	bl	800898c <USB_ReadInterrupts>
 8002cb4:	f010 0f02 	tst.w	r0, #2
 8002cb8:	d002      	beq.n	8002cc0 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cc0:	6820      	ldr	r0, [r4, #0]
 8002cc2:	f005 fe63 	bl	800898c <USB_ReadInterrupts>
 8002cc6:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8002cca:	d125      	bne.n	8002d18 <HAL_HCD_IRQHandler+0xc2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ccc:	6820      	ldr	r0, [r4, #0]
 8002cce:	f005 fe5d 	bl	800898c <USB_ReadInterrupts>
 8002cd2:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002cd6:	d131      	bne.n	8002d3c <HAL_HCD_IRQHandler+0xe6>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002cd8:	6820      	ldr	r0, [r4, #0]
 8002cda:	f005 fe57 	bl	800898c <USB_ReadInterrupts>
 8002cde:	f010 0f08 	tst.w	r0, #8
 8002ce2:	d12f      	bne.n	8002d44 <HAL_HCD_IRQHandler+0xee>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ce4:	6820      	ldr	r0, [r4, #0]
 8002ce6:	f005 fe51 	bl	800898c <USB_ReadInterrupts>
 8002cea:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002cee:	d130      	bne.n	8002d52 <HAL_HCD_IRQHandler+0xfc>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	f005 fe4b 	bl	800898c <USB_ReadInterrupts>
 8002cf6:	f010 0f10 	tst.w	r0, #16
 8002cfa:	d0b4      	beq.n	8002c66 <HAL_HCD_IRQHandler+0x10>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	6993      	ldr	r3, [r2, #24]
 8002d00:	f023 0310 	bic.w	r3, r3, #16
 8002d04:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff fac2 	bl	8002290 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	6993      	ldr	r3, [r2, #24]
 8002d10:	f043 0310 	orr.w	r3, r3, #16
 8002d14:	6193      	str	r3, [r2, #24]
 8002d16:	e7a6      	b.n	8002c66 <HAL_HCD_IRQHandler+0x10>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d18:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002d1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d20:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8002d24:	4620      	mov	r0, r4
 8002d26:	f014 ff89 	bl	8017c3c <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	6820      	ldr	r0, [r4, #0]
 8002d2e:	f005 fe35 	bl	800899c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d38:	615a      	str	r2, [r3, #20]
 8002d3a:	e7c7      	b.n	8002ccc <HAL_HCD_IRQHandler+0x76>
      HCD_Port_IRQHandler(hhcd);
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff fc69 	bl	8002614 <HCD_Port_IRQHandler>
 8002d42:	e7c9      	b.n	8002cd8 <HAL_HCD_IRQHandler+0x82>
      HAL_HCD_SOF_Callback(hhcd);
 8002d44:	4620      	mov	r0, r4
 8002d46:	f014 ff6d 	bl	8017c24 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	615a      	str	r2, [r3, #20]
 8002d50:	e7c8      	b.n	8002ce4 <HAL_HCD_IRQHandler+0x8e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	f005 ff63 	bl	8008c1e <USB_HC_ReadInterrupt>
 8002d58:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d5a:	2600      	movs	r6, #0
 8002d5c:	e004      	b.n	8002d68 <HAL_HCD_IRQHandler+0x112>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d5e:	b2f1      	uxtb	r1, r6
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7ff fe20 	bl	80029a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d66:	3601      	adds	r6, #1
 8002d68:	68a3      	ldr	r3, [r4, #8]
 8002d6a:	42b3      	cmp	r3, r6
 8002d6c:	d912      	bls.n	8002d94 <HAL_HCD_IRQHandler+0x13e>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d6e:	f006 030f 	and.w	r3, r6, #15
 8002d72:	fa27 f303 	lsr.w	r3, r7, r3
 8002d76:	f013 0f01 	tst.w	r3, #1
 8002d7a:	d0f4      	beq.n	8002d66 <HAL_HCD_IRQHandler+0x110>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d7c:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002d80:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002d84:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002d88:	d0e9      	beq.n	8002d5e <HAL_HCD_IRQHandler+0x108>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d8a:	b2f1      	uxtb	r1, r6
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7ff fcab 	bl	80026e8 <HCD_HC_IN_IRQHandler>
 8002d92:	e7e8      	b.n	8002d66 <HAL_HCD_IRQHandler+0x110>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9a:	615a      	str	r2, [r3, #20]
 8002d9c:	e7a8      	b.n	8002cf0 <HAL_HCD_IRQHandler+0x9a>

08002d9e <HAL_HCD_Start>:
{
 8002d9e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8002da0:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d00e      	beq.n	8002dc6 <HAL_HCD_Start+0x28>
 8002da8:	4604      	mov	r4, r0
 8002daa:	2501      	movs	r5, #1
 8002dac:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002db0:	6800      	ldr	r0, [r0, #0]
 8002db2:	f005 fd7b 	bl	80088ac <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002db6:	4629      	mov	r1, r5
 8002db8:	6820      	ldr	r0, [r4, #0]
 8002dba:	f005 fe0e 	bl	80089da <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8002dc4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8002dc6:	2002      	movs	r0, #2
 8002dc8:	e7fc      	b.n	8002dc4 <HAL_HCD_Start+0x26>

08002dca <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002dca:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d00b      	beq.n	8002dea <HAL_HCD_Stop+0x20>
{
 8002dd2:	b510      	push	{r4, lr}
 8002dd4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f006 f853 	bl	8008e88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8002de8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002dea:	2002      	movs	r0, #2
}
 8002dec:	4770      	bx	lr

08002dee <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002dee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002df2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8002df6:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8002dfa:	4770      	bx	lr

08002dfc <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002dfc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002e00:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8002e04:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8002e06:	4770      	bx	lr

08002e08 <HAL_HCD_GetCurrentFrame>:
{
 8002e08:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e0a:	6800      	ldr	r0, [r0, #0]
 8002e0c:	f005 fe7e 	bl	8008b0c <USB_GetCurrentFrame>
}
 8002e10:	bd08      	pop	{r3, pc}

08002e12 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e12:	6803      	ldr	r3, [r0, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	f012 0f02 	tst.w	r2, #2
 8002e1a:	d001      	beq.n	8002e20 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e20:	6803      	ldr	r3, [r0, #0]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	f012 0f01 	tst.w	r2, #1
 8002e28:	d103      	bne.n	8002e32 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	619a      	str	r2, [r3, #24]
  }
}
 8002e32:	4770      	bx	lr

08002e34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e38:	4680      	mov	r8, r0
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	4617      	mov	r7, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	9e06      	ldr	r6, [sp, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002e42:	6803      	ldr	r3, [r0, #0]
 8002e44:	4927      	ldr	r1, [pc, #156]	; (8002ee4 <I2C_TransferConfig+0xb0>)
 8002e46:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <I2C_TransferConfig+0xb4>)
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	bf18      	it	ne
 8002e4c:	4293      	cmpne	r3, r2
 8002e4e:	d00c      	beq.n	8002e6a <I2C_TransferConfig+0x36>
 8002e50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d008      	beq.n	8002e6a <I2C_TransferConfig+0x36>
 8002e58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d004      	beq.n	8002e6a <I2C_TransferConfig+0x36>
 8002e60:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8002e64:	4821      	ldr	r0, [pc, #132]	; (8002eec <I2C_TransferConfig+0xb8>)
 8002e66:	f011 fb31 	bl	80144cc <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8002e6a:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 8002e6e:	bf18      	it	ne
 8002e70:	f1b5 7f00 	cmpne.w	r5, #33554432	; 0x2000000
 8002e74:	d000      	beq.n	8002e78 <I2C_TransferConfig+0x44>
 8002e76:	bb45      	cbnz	r5, 8002eca <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <I2C_TransferConfig+0xbc>)
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <I2C_TransferConfig+0xc0>)
 8002e7c:	4296      	cmp	r6, r2
 8002e7e:	bf18      	it	ne
 8002e80:	429e      	cmpne	r6, r3
 8002e82:	d007      	beq.n	8002e94 <I2C_TransferConfig+0x60>
 8002e84:	1e32      	subs	r2, r6, #0
 8002e86:	bf18      	it	ne
 8002e88:	2201      	movne	r2, #1
 8002e8a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002e8e:	429e      	cmp	r6, r3
 8002e90:	d000      	beq.n	8002e94 <I2C_TransferConfig+0x60>
 8002e92:	bb02      	cbnz	r2, 8002ed6 <I2C_TransferConfig+0xa2>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002e94:	f8d8 2000 	ldr.w	r2, [r8]
 8002e98:	6851      	ldr	r1, [r2, #4]
 8002e9a:	0d73      	lsrs	r3, r6, #21
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	f043 737f 	orr.w	r3, r3, #66846720	; 0x3fc0000
 8002ea4:	f443 3358 	orr.w	r3, r3, #221184	; 0x36000
 8002ea8:	f443 737f 	orr.w	r3, r3, #1020	; 0x3fc
 8002eac:	f043 0303 	orr.w	r3, r3, #3
 8002eb0:	ea21 0103 	bic.w	r1, r1, r3
 8002eb4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8002eb8:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8002ebc:	ea44 0305 	orr.w	r3, r4, r5
 8002ec0:	4333      	orrs	r3, r6
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_TRANSFER_MODE(Mode));
 8002eca:	f641 01c2 	movw	r1, #6338	; 0x18c2
 8002ece:	4807      	ldr	r0, [pc, #28]	; (8002eec <I2C_TransferConfig+0xb8>)
 8002ed0:	f011 fafc 	bl	80144cc <assert_failed>
 8002ed4:	e7d0      	b.n	8002e78 <I2C_TransferConfig+0x44>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002ed6:	f641 01c3 	movw	r1, #6339	; 0x18c3
 8002eda:	4804      	ldr	r0, [pc, #16]	; (8002eec <I2C_TransferConfig+0xb8>)
 8002edc:	f011 faf6 	bl	80144cc <assert_failed>
 8002ee0:	e7d8      	b.n	8002e94 <I2C_TransferConfig+0x60>
 8002ee2:	bf00      	nop
 8002ee4:	40005400 	.word	0x40005400
 8002ee8:	40005800 	.word	0x40005800
 8002eec:	08019a3c 	.word	0x08019a3c
 8002ef0:	80004000 	.word	0x80004000
 8002ef4:	80002400 	.word	0x80002400

08002ef8 <I2C_IsAcknowledgeFailed>:
{
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	4605      	mov	r5, r0
 8002efc:	460e      	mov	r6, r1
 8002efe:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f00:	6803      	ldr	r3, [r0, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f013 0f10 	tst.w	r3, #16
 8002f08:	d101      	bne.n	8002f0e <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8002f0a:	2000      	movs	r0, #0
}
 8002f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f0e:	682b      	ldr	r3, [r5, #0]
 8002f10:	699c      	ldr	r4, [r3, #24]
 8002f12:	f014 0f20 	tst.w	r4, #32
 8002f16:	d117      	bne.n	8002f48 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002f18:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002f1c:	d0f7      	beq.n	8002f0e <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe f991 	bl	8001244 <HAL_GetTick>
 8002f22:	1bc0      	subs	r0, r0, r7
 8002f24:	42b0      	cmp	r0, r6
 8002f26:	d801      	bhi.n	8002f2c <I2C_IsAcknowledgeFailed+0x34>
 8002f28:	2e00      	cmp	r6, #0
 8002f2a:	d1f0      	bne.n	8002f0e <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f2c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002f2e:	f043 0320 	orr.w	r3, r3, #32
 8002f32:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f34:	2320      	movs	r3, #32
 8002f36:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002f40:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8002f44:	2001      	movs	r0, #1
 8002f46:	e7e1      	b.n	8002f0c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f48:	2210      	movs	r2, #16
 8002f4a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	2420      	movs	r4, #32
 8002f50:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002f52:	4628      	mov	r0, r5
 8002f54:	f7ff ff5d 	bl	8002e12 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002f58:	682a      	ldr	r2, [r5, #0]
 8002f5a:	6853      	ldr	r3, [r2, #4]
 8002f5c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002f60:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002f64:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f6e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002f70:	f043 0304 	orr.w	r3, r3, #4
 8002f74:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002f80:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8002f84:	2001      	movs	r0, #1
 8002f86:	e7c1      	b.n	8002f0c <I2C_IsAcknowledgeFailed+0x14>

08002f88 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	460d      	mov	r5, r1
 8002f8e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f013 0f02 	tst.w	r3, #2
 8002f98:	d11d      	bne.n	8002fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9a:	4632      	mov	r2, r6
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7ff ffaa 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002fa4:	b9c8      	cbnz	r0, 8002fda <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002faa:	d0f1      	beq.n	8002f90 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7fe f94a 	bl	8001244 <HAL_GetTick>
 8002fb0:	1b80      	subs	r0, r0, r6
 8002fb2:	42a8      	cmp	r0, r5
 8002fb4:	d801      	bhi.n	8002fba <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002fb6:	2d00      	cmp	r5, #0
 8002fb8:	d1ea      	bne.n	8002f90 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fbc:	f043 0320 	orr.w	r3, r3, #32
 8002fc0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002fce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	e000      	b.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002fd6:	2000      	movs	r0, #0
}
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002fda:	2001      	movs	r0, #1
 8002fdc:	e7fc      	b.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002fde <I2C_WaitOnFlagUntilTimeout>:
{
 8002fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	4688      	mov	r8, r1
 8002fe6:	4617      	mov	r7, r2
 8002fe8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fea:	6834      	ldr	r4, [r6, #0]
 8002fec:	69a4      	ldr	r4, [r4, #24]
 8002fee:	ea38 0304 	bics.w	r3, r8, r4
 8002ff2:	bf0c      	ite	eq
 8002ff4:	f04f 0c01 	moveq.w	ip, #1
 8002ff8:	f04f 0c00 	movne.w	ip, #0
 8002ffc:	45bc      	cmp	ip, r7
 8002ffe:	d118      	bne.n	8003032 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8003000:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003004:	d0f1      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fe f91d 	bl	8001244 <HAL_GetTick>
 800300a:	9b06      	ldr	r3, [sp, #24]
 800300c:	1ac0      	subs	r0, r0, r3
 800300e:	42a8      	cmp	r0, r5
 8003010:	d801      	bhi.n	8003016 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003012:	2d00      	cmp	r5, #0
 8003014:	d1e9      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8003018:	f043 0320 	orr.w	r3, r3, #32
 800301c:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800301e:	2320      	movs	r3, #32
 8003020:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	2300      	movs	r3, #0
 8003026:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800302a:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800302e:	2001      	movs	r0, #1
 8003030:	e000      	b.n	8003034 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8003032:	2000      	movs	r0, #0
}
 8003034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003038 <I2C_RequestMemoryWrite>:
{
 8003038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	4604      	mov	r4, r0
 8003040:	4690      	mov	r8, r2
 8003042:	461d      	mov	r5, r3
 8003044:	9e08      	ldr	r6, [sp, #32]
 8003046:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <I2C_RequestMemoryWrite+0x78>)
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	b2ea      	uxtb	r2, r5
 8003052:	f7ff feef 	bl	8002e34 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003056:	463a      	mov	r2, r7
 8003058:	4631      	mov	r1, r6
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff ff94 	bl	8002f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003060:	b9f8      	cbnz	r0, 80030a2 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003062:	2d01      	cmp	r5, #1
 8003064:	d10e      	bne.n	8003084 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	fa5f f288 	uxtb.w	r2, r8
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800306e:	9700      	str	r7, [sp, #0]
 8003070:	4633      	mov	r3, r6
 8003072:	2200      	movs	r2, #0
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	4620      	mov	r0, r4
 8003078:	f7ff ffb1 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 800307c:	b9a8      	cbnz	r0, 80030aa <I2C_RequestMemoryWrite+0x72>
}
 800307e:	b002      	add	sp, #8
 8003080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308c:	463a      	mov	r2, r7
 800308e:	4631      	mov	r1, r6
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff ff79 	bl	8002f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003096:	b930      	cbnz	r0, 80030a6 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	fa5f f288 	uxtb.w	r2, r8
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
 80030a0:	e7e5      	b.n	800306e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80030a2:	2001      	movs	r0, #1
 80030a4:	e7eb      	b.n	800307e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80030a6:	2001      	movs	r0, #1
 80030a8:	e7e9      	b.n	800307e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80030aa:	2001      	movs	r0, #1
 80030ac:	e7e7      	b.n	800307e <I2C_RequestMemoryWrite+0x46>
 80030ae:	bf00      	nop
 80030b0:	80002000 	.word	0x80002000

080030b4 <I2C_RequestMemoryRead>:
{
 80030b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	4604      	mov	r4, r0
 80030bc:	4690      	mov	r8, r2
 80030be:	461d      	mov	r5, r3
 80030c0:	9e08      	ldr	r6, [sp, #32]
 80030c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030c4:	4b18      	ldr	r3, [pc, #96]	; (8003128 <I2C_RequestMemoryRead+0x74>)
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2300      	movs	r3, #0
 80030ca:	b2ea      	uxtb	r2, r5
 80030cc:	f7ff feb2 	bl	8002e34 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d0:	463a      	mov	r2, r7
 80030d2:	4631      	mov	r1, r6
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7ff ff57 	bl	8002f88 <I2C_WaitOnTXISFlagUntilTimeout>
 80030da:	b9f8      	cbnz	r0, 800311c <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030dc:	2d01      	cmp	r5, #1
 80030de:	d10e      	bne.n	80030fe <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	fa5f f288 	uxtb.w	r2, r8
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030e8:	9700      	str	r7, [sp, #0]
 80030ea:	4633      	mov	r3, r6
 80030ec:	2200      	movs	r2, #0
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	4620      	mov	r0, r4
 80030f2:	f7ff ff74 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 80030f6:	b9a8      	cbnz	r0, 8003124 <I2C_RequestMemoryRead+0x70>
}
 80030f8:	b002      	add	sp, #8
 80030fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003106:	463a      	mov	r2, r7
 8003108:	4631      	mov	r1, r6
 800310a:	4620      	mov	r0, r4
 800310c:	f7ff ff3c 	bl	8002f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003110:	b930      	cbnz	r0, 8003120 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	fa5f f288 	uxtb.w	r2, r8
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
 800311a:	e7e5      	b.n	80030e8 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 800311c:	2001      	movs	r0, #1
 800311e:	e7eb      	b.n	80030f8 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8003120:	2001      	movs	r0, #1
 8003122:	e7e9      	b.n	80030f8 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8003124:	2001      	movs	r0, #1
 8003126:	e7e7      	b.n	80030f8 <I2C_RequestMemoryRead+0x44>
 8003128:	80002000 	.word	0x80002000

0800312c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	4605      	mov	r5, r0
 8003130:	460c      	mov	r4, r1
 8003132:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f013 0f20 	tst.w	r3, #32
 800313c:	d11a      	bne.n	8003174 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800313e:	4632      	mov	r2, r6
 8003140:	4621      	mov	r1, r4
 8003142:	4628      	mov	r0, r5
 8003144:	f7ff fed8 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8003148:	b9b0      	cbnz	r0, 8003178 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fe f87b 	bl	8001244 <HAL_GetTick>
 800314e:	1b80      	subs	r0, r0, r6
 8003150:	42a0      	cmp	r0, r4
 8003152:	d801      	bhi.n	8003158 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003154:	2c00      	cmp	r4, #0
 8003156:	d1ed      	bne.n	8003134 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800315a:	f043 0320 	orr.w	r3, r3, #32
 800315e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003160:	2320      	movs	r3, #32
 8003162:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003166:	2300      	movs	r3, #0
 8003168:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800316c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003170:	2001      	movs	r0, #1
}
 8003172:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003174:	2000      	movs	r0, #0
 8003176:	e7fc      	b.n	8003172 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
 800317a:	e7fa      	b.n	8003172 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800317c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800317c:	2800      	cmp	r0, #0
 800317e:	f000 80b7 	beq.w	80032f0 <HAL_I2C_Init+0x174>
{
 8003182:	b510      	push	{r4, lr}
 8003184:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003186:	6803      	ldr	r3, [r0, #0]
 8003188:	495a      	ldr	r1, [pc, #360]	; (80032f4 <HAL_I2C_Init+0x178>)
 800318a:	4a5b      	ldr	r2, [pc, #364]	; (80032f8 <HAL_I2C_Init+0x17c>)
 800318c:	428b      	cmp	r3, r1
 800318e:	bf18      	it	ne
 8003190:	4293      	cmpne	r3, r2
 8003192:	d00c      	beq.n	80031ae <HAL_I2C_Init+0x32>
 8003194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003198:	4293      	cmp	r3, r2
 800319a:	d008      	beq.n	80031ae <HAL_I2C_Init+0x32>
 800319c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_I2C_Init+0x32>
 80031a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80031a8:	4854      	ldr	r0, [pc, #336]	; (80032fc <HAL_I2C_Init+0x180>)
 80031aa:	f011 f98f 	bl	80144cc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80031ae:	68a3      	ldr	r3, [r4, #8]
 80031b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b4:	d261      	bcs.n	800327a <HAL_I2C_Init+0xfe>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80031b6:	68e3      	ldr	r3, [r4, #12]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d863      	bhi.n	8003286 <HAL_I2C_Init+0x10a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80031be:	6923      	ldr	r3, [r4, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf18      	it	ne
 80031c4:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 80031c8:	d163      	bne.n	8003292 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80031ca:	6963      	ldr	r3, [r4, #20]
 80031cc:	2bff      	cmp	r3, #255	; 0xff
 80031ce:	d866      	bhi.n	800329e <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80031d0:	69a3      	ldr	r3, [r4, #24]
 80031d2:	2b07      	cmp	r3, #7
 80031d4:	d869      	bhi.n	80032aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80031d6:	69e3      	ldr	r3, [r4, #28]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf18      	it	ne
 80031dc:	f5b3 2f00 	cmpne.w	r3, #524288	; 0x80000
 80031e0:	d169      	bne.n	80032b6 <HAL_I2C_Init+0x13a>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80031e2:	6a23      	ldr	r3, [r4, #32]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf18      	it	ne
 80031e8:	f5b3 3f00 	cmpne.w	r3, #131072	; 0x20000
 80031ec:	d169      	bne.n	80032c2 <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ee:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d06b      	beq.n	80032ce <HAL_I2C_Init+0x152>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f6:	2324      	movs	r3, #36	; 0x24
 80031f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80031fc:	6822      	ldr	r2, [r4, #0]
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003206:	6863      	ldr	r3, [r4, #4]
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800320e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003210:	6822      	ldr	r2, [r4, #0]
 8003212:	6893      	ldr	r3, [r2, #8]
 8003214:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003218:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800321a:	68e3      	ldr	r3, [r4, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d05c      	beq.n	80032da <HAL_I2C_Init+0x15e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003220:	68a3      	ldr	r3, [r4, #8]
 8003222:	6822      	ldr	r2, [r4, #0]
 8003224:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003228:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800322a:	68e3      	ldr	r3, [r4, #12]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d05a      	beq.n	80032e6 <HAL_I2C_Init+0x16a>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003230:	6822      	ldr	r2, [r4, #0]
 8003232:	6851      	ldr	r1, [r2, #4]
 8003234:	4b32      	ldr	r3, [pc, #200]	; (8003300 <HAL_I2C_Init+0x184>)
 8003236:	430b      	orrs	r3, r1
 8003238:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800323a:	6822      	ldr	r2, [r4, #0]
 800323c:	68d3      	ldr	r3, [r2, #12]
 800323e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003242:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003244:	6923      	ldr	r3, [r4, #16]
 8003246:	6962      	ldr	r2, [r4, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	69a1      	ldr	r1, [r4, #24]
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003252:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003254:	69e3      	ldr	r3, [r4, #28]
 8003256:	6a21      	ldr	r1, [r4, #32]
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	430b      	orrs	r3, r1
 800325c:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800325e:	6822      	ldr	r2, [r4, #0]
 8003260:	6813      	ldr	r3, [r2, #0]
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003268:	2000      	movs	r0, #0
 800326a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800326c:	2320      	movs	r3, #32
 800326e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003272:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003278:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800327a:	f240 11df 	movw	r1, #479	; 0x1df
 800327e:	481f      	ldr	r0, [pc, #124]	; (80032fc <HAL_I2C_Init+0x180>)
 8003280:	f011 f924 	bl	80144cc <assert_failed>
 8003284:	e797      	b.n	80031b6 <HAL_I2C_Init+0x3a>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003286:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800328a:	481c      	ldr	r0, [pc, #112]	; (80032fc <HAL_I2C_Init+0x180>)
 800328c:	f011 f91e 	bl	80144cc <assert_failed>
 8003290:	e795      	b.n	80031be <HAL_I2C_Init+0x42>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003292:	f240 11e1 	movw	r1, #481	; 0x1e1
 8003296:	4819      	ldr	r0, [pc, #100]	; (80032fc <HAL_I2C_Init+0x180>)
 8003298:	f011 f918 	bl	80144cc <assert_failed>
 800329c:	e795      	b.n	80031ca <HAL_I2C_Init+0x4e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800329e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80032a2:	4816      	ldr	r0, [pc, #88]	; (80032fc <HAL_I2C_Init+0x180>)
 80032a4:	f011 f912 	bl	80144cc <assert_failed>
 80032a8:	e792      	b.n	80031d0 <HAL_I2C_Init+0x54>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80032aa:	f240 11e3 	movw	r1, #483	; 0x1e3
 80032ae:	4813      	ldr	r0, [pc, #76]	; (80032fc <HAL_I2C_Init+0x180>)
 80032b0:	f011 f90c 	bl	80144cc <assert_failed>
 80032b4:	e78f      	b.n	80031d6 <HAL_I2C_Init+0x5a>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80032b6:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80032ba:	4810      	ldr	r0, [pc, #64]	; (80032fc <HAL_I2C_Init+0x180>)
 80032bc:	f011 f906 	bl	80144cc <assert_failed>
 80032c0:	e78f      	b.n	80031e2 <HAL_I2C_Init+0x66>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80032c2:	f240 11e5 	movw	r1, #485	; 0x1e5
 80032c6:	480d      	ldr	r0, [pc, #52]	; (80032fc <HAL_I2C_Init+0x180>)
 80032c8:	f011 f900 	bl	80144cc <assert_failed>
 80032cc:	e78f      	b.n	80031ee <HAL_I2C_Init+0x72>
    hi2c->Lock = HAL_UNLOCKED;
 80032ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80032d2:	4620      	mov	r0, r4
 80032d4:	f010 fbf8 	bl	8013ac8 <HAL_I2C_MspInit>
 80032d8:	e78d      	b.n	80031f6 <HAL_I2C_Init+0x7a>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032da:	68a3      	ldr	r3, [r4, #8]
 80032dc:	6822      	ldr	r2, [r4, #0]
 80032de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e2:	6093      	str	r3, [r2, #8]
 80032e4:	e7a1      	b.n	800322a <HAL_I2C_Init+0xae>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	e79f      	b.n	8003230 <HAL_I2C_Init+0xb4>
    return HAL_ERROR;
 80032f0:	2001      	movs	r0, #1
}
 80032f2:	4770      	bx	lr
 80032f4:	40005400 	.word	0x40005400
 80032f8:	40005800 	.word	0x40005800
 80032fc:	08019a3c 	.word	0x08019a3c
 8003300:	02008000 	.word	0x02008000

08003304 <HAL_I2C_Mem_Write>:
{
 8003304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003308:	b083      	sub	sp, #12
 800330a:	4604      	mov	r4, r0
 800330c:	460d      	mov	r5, r1
 800330e:	4691      	mov	r9, r2
 8003310:	4698      	mov	r8, r3
 8003312:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003316:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003318:	3b01      	subs	r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d822      	bhi.n	8003366 <HAL_I2C_Mem_Write+0x62>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003320:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b20      	cmp	r3, #32
 8003328:	f040 80bf 	bne.w	80034aa <HAL_I2C_Mem_Write+0x1a6>
    if ((pData == NULL) || (Size == 0U))
 800332c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800332e:	f1ba 0f00 	cmp.w	sl, #0
 8003332:	bf18      	it	ne
 8003334:	2b00      	cmpne	r3, #0
 8003336:	d01c      	beq.n	8003372 <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
 8003338:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800333c:	2b01      	cmp	r3, #1
 800333e:	f000 80b8 	beq.w	80034b2 <HAL_I2C_Mem_Write+0x1ae>
 8003342:	f04f 0b01 	mov.w	fp, #1
 8003346:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800334a:	f7fd ff7b 	bl	8001244 <HAL_GetTick>
 800334e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003350:	9000      	str	r0, [sp, #0]
 8003352:	2319      	movs	r3, #25
 8003354:	465a      	mov	r2, fp
 8003356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800335a:	4620      	mov	r0, r4
 800335c:	f7ff fe3f 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 8003360:	b160      	cbz	r0, 800337c <HAL_I2C_Mem_Write+0x78>
      return HAL_ERROR;
 8003362:	2001      	movs	r0, #1
 8003364:	e0a2      	b.n	80034ac <HAL_I2C_Mem_Write+0x1a8>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003366:	f640 01ed 	movw	r1, #2285	; 0x8ed
 800336a:	4856      	ldr	r0, [pc, #344]	; (80034c4 <HAL_I2C_Mem_Write+0x1c0>)
 800336c:	f011 f8ae 	bl	80144cc <assert_failed>
 8003370:	e7d6      	b.n	8003320 <HAL_I2C_Mem_Write+0x1c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003376:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8003378:	2001      	movs	r0, #1
 800337a:	e097      	b.n	80034ac <HAL_I2C_Mem_Write+0x1a8>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800337c:	2321      	movs	r3, #33	; 0x21
 800337e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003382:	2340      	movs	r3, #64	; 0x40
 8003384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003388:	2300      	movs	r3, #0
 800338a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800338c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800338e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003390:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003394:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003396:	9601      	str	r6, [sp, #4]
 8003398:	9700      	str	r7, [sp, #0]
 800339a:	4643      	mov	r3, r8
 800339c:	464a      	mov	r2, r9
 800339e:	4629      	mov	r1, r5
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff fe49 	bl	8003038 <I2C_RequestMemoryWrite>
 80033a6:	b970      	cbnz	r0, 80033c6 <HAL_I2C_Mem_Write+0xc2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2bff      	cmp	r3, #255	; 0xff
 80033ae:	d90f      	bls.n	80033d0 <HAL_I2C_Mem_Write+0xcc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033b4:	2300      	movs	r3, #0
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033bc:	4629      	mov	r1, r5
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff fd38 	bl	8002e34 <I2C_TransferConfig>
 80033c4:	e021      	b.n	800340a <HAL_I2C_Mem_Write+0x106>
      __HAL_UNLOCK(hi2c);
 80033c6:	2300      	movs	r3, #0
 80033c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80033cc:	4658      	mov	r0, fp
 80033ce:	e06d      	b.n	80034ac <HAL_I2C_Mem_Write+0x1a8>
      hi2c->XferSize = hi2c->XferCount;
 80033d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80033d2:	b292      	uxth	r2, r2
 80033d4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033d6:	2300      	movs	r3, #0
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	4629      	mov	r1, r5
 80033e2:	4620      	mov	r0, r4
 80033e4:	f7ff fd26 	bl	8002e34 <I2C_TransferConfig>
 80033e8:	e00f      	b.n	800340a <HAL_I2C_Mem_Write+0x106>
          hi2c->XferSize = hi2c->XferCount;
 80033ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80033ec:	b292      	uxth	r2, r2
 80033ee:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033f0:	2300      	movs	r3, #0
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	4629      	mov	r1, r5
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7ff fd19 	bl	8002e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003402:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d033      	beq.n	8003472 <HAL_I2C_Mem_Write+0x16e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340a:	4632      	mov	r2, r6
 800340c:	4639      	mov	r1, r7
 800340e:	4620      	mov	r0, r4
 8003410:	f7ff fdba 	bl	8002f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003414:	2800      	cmp	r0, #0
 8003416:	d14e      	bne.n	80034b6 <HAL_I2C_Mem_Write+0x1b2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003418:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	7812      	ldrb	r2, [r2, #0]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003422:	3301      	adds	r3, #1
 8003424:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003426:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29b      	uxth	r3, r3
 800342e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003430:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003438:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800343a:	b292      	uxth	r2, r2
 800343c:	2a00      	cmp	r2, #0
 800343e:	d0e0      	beq.n	8003402 <HAL_I2C_Mem_Write+0xfe>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1de      	bne.n	8003402 <HAL_I2C_Mem_Write+0xfe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003444:	9600      	str	r6, [sp, #0]
 8003446:	463b      	mov	r3, r7
 8003448:	2200      	movs	r2, #0
 800344a:	2180      	movs	r1, #128	; 0x80
 800344c:	4620      	mov	r0, r4
 800344e:	f7ff fdc6 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 8003452:	bb90      	cbnz	r0, 80034ba <HAL_I2C_Mem_Write+0x1b6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	2bff      	cmp	r3, #255	; 0xff
 800345a:	d9c6      	bls.n	80033ea <HAL_I2C_Mem_Write+0xe6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800345c:	22ff      	movs	r2, #255	; 0xff
 800345e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003460:	2300      	movs	r3, #0
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003468:	4629      	mov	r1, r5
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fce2 	bl	8002e34 <I2C_TransferConfig>
 8003470:	e7c7      	b.n	8003402 <HAL_I2C_Mem_Write+0xfe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003472:	4632      	mov	r2, r6
 8003474:	4639      	mov	r1, r7
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff fe58 	bl	800312c <I2C_WaitOnSTOPFlagUntilTimeout>
 800347c:	b9f8      	cbnz	r0, 80034be <HAL_I2C_Mem_Write+0x1ba>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	2220      	movs	r2, #32
 8003482:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003484:	6821      	ldr	r1, [r4, #0]
 8003486:	684b      	ldr	r3, [r1, #4]
 8003488:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800348c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003490:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800349a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800349e:	2300      	movs	r3, #0
 80034a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80034a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80034a8:	e000      	b.n	80034ac <HAL_I2C_Mem_Write+0x1a8>
    return HAL_BUSY;
 80034aa:	2002      	movs	r0, #2
}
 80034ac:	b003      	add	sp, #12
 80034ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80034b2:	2002      	movs	r0, #2
 80034b4:	e7fa      	b.n	80034ac <HAL_I2C_Mem_Write+0x1a8>
        return HAL_ERROR;
 80034b6:	2001      	movs	r0, #1
 80034b8:	e7f8      	b.n	80034ac <HAL_I2C_Mem_Write+0x1a8>
          return HAL_ERROR;
 80034ba:	2001      	movs	r0, #1
 80034bc:	e7f6      	b.n	80034ac <HAL_I2C_Mem_Write+0x1a8>
      return HAL_ERROR;
 80034be:	2001      	movs	r0, #1
 80034c0:	e7f4      	b.n	80034ac <HAL_I2C_Mem_Write+0x1a8>
 80034c2:	bf00      	nop
 80034c4:	08019a3c 	.word	0x08019a3c

080034c8 <HAL_I2C_Mem_Read>:
{
 80034c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034cc:	b083      	sub	sp, #12
 80034ce:	4604      	mov	r4, r0
 80034d0:	460d      	mov	r5, r1
 80034d2:	4691      	mov	r9, r2
 80034d4:	4698      	mov	r8, r3
 80034d6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80034da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d822      	bhi.n	800352a <HAL_I2C_Mem_Read+0x62>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	f040 80c0 	bne.w	8003670 <HAL_I2C_Mem_Read+0x1a8>
    if ((pData == NULL) || (Size == 0U))
 80034f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034f2:	f1ba 0f00 	cmp.w	sl, #0
 80034f6:	bf18      	it	ne
 80034f8:	2b00      	cmpne	r3, #0
 80034fa:	d01c      	beq.n	8003536 <HAL_I2C_Mem_Read+0x6e>
    __HAL_LOCK(hi2c);
 80034fc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003500:	2b01      	cmp	r3, #1
 8003502:	f000 80b9 	beq.w	8003678 <HAL_I2C_Mem_Read+0x1b0>
 8003506:	f04f 0b01 	mov.w	fp, #1
 800350a:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800350e:	f7fd fe99 	bl	8001244 <HAL_GetTick>
 8003512:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003514:	9000      	str	r0, [sp, #0]
 8003516:	2319      	movs	r3, #25
 8003518:	465a      	mov	r2, fp
 800351a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff fd5d 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 8003524:	b160      	cbz	r0, 8003540 <HAL_I2C_Mem_Read+0x78>
      return HAL_ERROR;
 8003526:	2001      	movs	r0, #1
 8003528:	e0a3      	b.n	8003672 <HAL_I2C_Mem_Read+0x1aa>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800352a:	f640 1174 	movw	r1, #2420	; 0x974
 800352e:	4856      	ldr	r0, [pc, #344]	; (8003688 <HAL_I2C_Mem_Read+0x1c0>)
 8003530:	f010 ffcc 	bl	80144cc <assert_failed>
 8003534:	e7d6      	b.n	80034e4 <HAL_I2C_Mem_Read+0x1c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800353a:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800353c:	2001      	movs	r0, #1
 800353e:	e098      	b.n	8003672 <HAL_I2C_Mem_Read+0x1aa>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003540:	2322      	movs	r3, #34	; 0x22
 8003542:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003546:	2340      	movs	r3, #64	; 0x40
 8003548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354c:	2300      	movs	r3, #0
 800354e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003552:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003554:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003558:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800355a:	9601      	str	r6, [sp, #4]
 800355c:	9700      	str	r7, [sp, #0]
 800355e:	4643      	mov	r3, r8
 8003560:	464a      	mov	r2, r9
 8003562:	4629      	mov	r1, r5
 8003564:	4620      	mov	r0, r4
 8003566:	f7ff fda5 	bl	80030b4 <I2C_RequestMemoryRead>
 800356a:	b970      	cbnz	r0, 800358a <HAL_I2C_Mem_Read+0xc2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2bff      	cmp	r3, #255	; 0xff
 8003572:	d90f      	bls.n	8003594 <HAL_I2C_Mem_Read+0xcc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003578:	4b44      	ldr	r3, [pc, #272]	; (800368c <HAL_I2C_Mem_Read+0x1c4>)
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003580:	4629      	mov	r1, r5
 8003582:	4620      	mov	r0, r4
 8003584:	f7ff fc56 	bl	8002e34 <I2C_TransferConfig>
 8003588:	e021      	b.n	80035ce <HAL_I2C_Mem_Read+0x106>
      __HAL_UNLOCK(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003590:	4658      	mov	r0, fp
 8003592:	e06e      	b.n	8003672 <HAL_I2C_Mem_Read+0x1aa>
      hi2c->XferSize = hi2c->XferCount;
 8003594:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003596:	b292      	uxth	r2, r2
 8003598:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800359a:	4b3c      	ldr	r3, [pc, #240]	; (800368c <HAL_I2C_Mem_Read+0x1c4>)
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	4629      	mov	r1, r5
 80035a6:	4620      	mov	r0, r4
 80035a8:	f7ff fc44 	bl	8002e34 <I2C_TransferConfig>
 80035ac:	e00f      	b.n	80035ce <HAL_I2C_Mem_Read+0x106>
          hi2c->XferSize = hi2c->XferCount;
 80035ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80035b0:	b292      	uxth	r2, r2
 80035b2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035b4:	2300      	movs	r3, #0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	4629      	mov	r1, r5
 80035c0:	4620      	mov	r0, r4
 80035c2:	f7ff fc37 	bl	8002e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80035c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d034      	beq.n	8003638 <HAL_I2C_Mem_Read+0x170>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80035ce:	9600      	str	r6, [sp, #0]
 80035d0:	463b      	mov	r3, r7
 80035d2:	2200      	movs	r2, #0
 80035d4:	2104      	movs	r1, #4
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7ff fd01 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 80035dc:	2800      	cmp	r0, #0
 80035de:	d14d      	bne.n	800367c <HAL_I2C_Mem_Read+0x1b4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035e6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80035e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035ea:	3301      	adds	r3, #1
 80035ec:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80035ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80035f0:	3a01      	subs	r2, #1
 80035f2:	b292      	uxth	r2, r2
 80035f4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80035f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003600:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0de      	beq.n	80035c6 <HAL_I2C_Mem_Read+0xfe>
 8003608:	2a00      	cmp	r2, #0
 800360a:	d1dc      	bne.n	80035c6 <HAL_I2C_Mem_Read+0xfe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800360c:	9600      	str	r6, [sp, #0]
 800360e:	463b      	mov	r3, r7
 8003610:	2180      	movs	r1, #128	; 0x80
 8003612:	4620      	mov	r0, r4
 8003614:	f7ff fce3 	bl	8002fde <I2C_WaitOnFlagUntilTimeout>
 8003618:	bb90      	cbnz	r0, 8003680 <HAL_I2C_Mem_Read+0x1b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800361a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	2bff      	cmp	r3, #255	; 0xff
 8003620:	d9c5      	bls.n	80035ae <HAL_I2C_Mem_Read+0xe6>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003622:	22ff      	movs	r2, #255	; 0xff
 8003624:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003626:	2300      	movs	r3, #0
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800362e:	4629      	mov	r1, r5
 8003630:	4620      	mov	r0, r4
 8003632:	f7ff fbff 	bl	8002e34 <I2C_TransferConfig>
 8003636:	e7c6      	b.n	80035c6 <HAL_I2C_Mem_Read+0xfe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003638:	4632      	mov	r2, r6
 800363a:	4639      	mov	r1, r7
 800363c:	4620      	mov	r0, r4
 800363e:	f7ff fd75 	bl	800312c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003642:	b9f8      	cbnz	r0, 8003684 <HAL_I2C_Mem_Read+0x1bc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	2220      	movs	r2, #32
 8003648:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800364a:	6821      	ldr	r1, [r4, #0]
 800364c:	684b      	ldr	r3, [r1, #4]
 800364e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003652:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003656:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003660:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003664:	2300      	movs	r3, #0
 8003666:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800366a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800366e:	e000      	b.n	8003672 <HAL_I2C_Mem_Read+0x1aa>
    return HAL_BUSY;
 8003670:	2002      	movs	r0, #2
}
 8003672:	b003      	add	sp, #12
 8003674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003678:	2002      	movs	r0, #2
 800367a:	e7fa      	b.n	8003672 <HAL_I2C_Mem_Read+0x1aa>
        return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e7f8      	b.n	8003672 <HAL_I2C_Mem_Read+0x1aa>
          return HAL_ERROR;
 8003680:	2001      	movs	r0, #1
 8003682:	e7f6      	b.n	8003672 <HAL_I2C_Mem_Read+0x1aa>
      return HAL_ERROR;
 8003684:	2001      	movs	r0, #1
 8003686:	e7f4      	b.n	8003672 <HAL_I2C_Mem_Read+0x1aa>
 8003688:	08019a3c 	.word	0x08019a3c
 800368c:	80002400 	.word	0x80002400

08003690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003696:	6803      	ldr	r3, [r0, #0]
 8003698:	4924      	ldr	r1, [pc, #144]	; (800372c <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800369a:	4a25      	ldr	r2, [pc, #148]	; (8003730 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800369c:	428b      	cmp	r3, r1
 800369e:	bf18      	it	ne
 80036a0:	4293      	cmpne	r3, r2
 80036a2:	d00b      	beq.n	80036bc <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 80036a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d007      	beq.n	80036bc <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 80036ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 80036b4:	215f      	movs	r1, #95	; 0x5f
 80036b6:	481f      	ldr	r0, [pc, #124]	; (8003734 <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
 80036b8:	f010 ff08 	bl	80144cc <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80036bc:	2d00      	cmp	r5, #0
 80036be:	bf18      	it	ne
 80036c0:	f5b5 5f80 	cmpne.w	r5, #4096	; 0x1000
 80036c4:	d128      	bne.n	8003718 <HAL_I2CEx_ConfigAnalogFilter+0x88>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d128      	bne.n	8003722 <HAL_I2CEx_ConfigAnalogFilter+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d026      	beq.n	8003726 <HAL_I2CEx_ConfigAnalogFilter+0x96>
 80036d8:	2301      	movs	r3, #1
 80036da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036de:	2324      	movs	r3, #36	; 0x24
 80036e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036e4:	6822      	ldr	r2, [r4, #0]
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	6813      	ldr	r3, [r2, #0]
 80036f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036f6:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	430d      	orrs	r5, r1
 80036fe:	601d      	str	r5, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800370a:	2320      	movs	r3, #32
 800370c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	2000      	movs	r0, #0
 8003712:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003716:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8003718:	2160      	movs	r1, #96	; 0x60
 800371a:	4806      	ldr	r0, [pc, #24]	; (8003734 <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
 800371c:	f010 fed6 	bl	80144cc <assert_failed>
 8003720:	e7d1      	b.n	80036c6 <HAL_I2CEx_ConfigAnalogFilter+0x36>
    return HAL_BUSY;
 8003722:	2002      	movs	r0, #2
 8003724:	e7f7      	b.n	8003716 <HAL_I2CEx_ConfigAnalogFilter+0x86>
    __HAL_LOCK(hi2c);
 8003726:	2002      	movs	r0, #2
 8003728:	e7f5      	b.n	8003716 <HAL_I2CEx_ConfigAnalogFilter+0x86>
 800372a:	bf00      	nop
 800372c:	40005400 	.word	0x40005400
 8003730:	40005800 	.word	0x40005800
 8003734:	08019a74 	.word	0x08019a74

08003738 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4604      	mov	r4, r0
 800373c:	460d      	mov	r5, r1
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800373e:	6803      	ldr	r3, [r0, #0]
 8003740:	4921      	ldr	r1, [pc, #132]	; (80037c8 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
 8003742:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003744:	428b      	cmp	r3, r1
 8003746:	bf18      	it	ne
 8003748:	4293      	cmpne	r3, r2
 800374a:	d00b      	beq.n	8003764 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800374c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8003754:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800375c:	218d      	movs	r1, #141	; 0x8d
 800375e:	481c      	ldr	r0, [pc, #112]	; (80037d0 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8003760:	f010 feb4 	bl	80144cc <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003764:	2d0f      	cmp	r5, #15
 8003766:	d826      	bhi.n	80037b6 <HAL_I2CEx_ConfigDigitalFilter+0x7e>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003768:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b20      	cmp	r3, #32
 8003770:	d126      	bne.n	80037c0 <HAL_I2CEx_ConfigDigitalFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003772:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003776:	2b01      	cmp	r3, #1
 8003778:	d024      	beq.n	80037c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800377a:	2301      	movs	r3, #1
 800377c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003780:	2324      	movs	r3, #36	; 0x24
 8003782:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003786:	6822      	ldr	r2, [r4, #0]
 8003788:	6813      	ldr	r3, [r2, #0]
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003794:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003798:	ea41 2505 	orr.w	r5, r1, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800379c:	601d      	str	r5, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	2320      	movs	r3, #32
 80037aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ae:	2000      	movs	r0, #0
 80037b0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80037b4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80037b6:	218e      	movs	r1, #142	; 0x8e
 80037b8:	4805      	ldr	r0, [pc, #20]	; (80037d0 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80037ba:	f010 fe87 	bl	80144cc <assert_failed>
 80037be:	e7d3      	b.n	8003768 <HAL_I2CEx_ConfigDigitalFilter+0x30>
    return HAL_BUSY;
 80037c0:	2002      	movs	r0, #2
 80037c2:	e7f7      	b.n	80037b4 <HAL_I2CEx_ConfigDigitalFilter+0x7c>
    __HAL_LOCK(hi2c);
 80037c4:	2002      	movs	r0, #2
 80037c6:	e7f5      	b.n	80037b4 <HAL_I2CEx_ConfigDigitalFilter+0x7c>
 80037c8:	40005400 	.word	0x40005400
 80037cc:	40005800 	.word	0x40005800
 80037d0:	08019a74 	.word	0x08019a74

080037d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80037d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80037d6:	684d      	ldr	r5, [r1, #4]
 80037d8:	6804      	ldr	r4, [r0, #0]
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	f3c3 430b 	ubfx	r3, r3, #16, #12
 80037e0:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80037e2:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 80037e6:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80037ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80037ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80037f2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80037f6:	680b      	ldr	r3, [r1, #0]
 80037f8:	6804      	ldr	r4, [r0, #0]
 80037fa:	68e6      	ldr	r6, [r4, #12]
 80037fc:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8003800:	4433      	add	r3, r6
 8003802:	3301      	adds	r3, #1
 8003804:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8003808:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800380c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003810:	68cd      	ldr	r5, [r1, #12]
 8003812:	6804      	ldr	r4, [r0, #0]
 8003814:	68e3      	ldr	r3, [r4, #12]
 8003816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800381a:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800381c:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8003820:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8003824:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003828:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800382c:	688b      	ldr	r3, [r1, #8]
 800382e:	6804      	ldr	r4, [r0, #0]
 8003830:	68e6      	ldr	r6, [r4, #12]
 8003832:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8003836:	4473      	add	r3, lr
 8003838:	3301      	adds	r3, #1
 800383a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800383e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003842:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003846:	6803      	ldr	r3, [r0, #0]
 8003848:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800384c:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8003850:	f024 0407 	bic.w	r4, r4, #7
 8003854:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003858:	6803      	ldr	r3, [r0, #0]
 800385a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800385e:	690c      	ldr	r4, [r1, #16]
 8003860:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003864:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003868:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800386c:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800386e:	6804      	ldr	r4, [r0, #0]
 8003870:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8003874:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8003878:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800387c:	2400      	movs	r4, #0
 800387e:	f8ce 4018 	str.w	r4, [lr, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003882:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8003886:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800388a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800388e:	6806      	ldr	r6, [r0, #0]
 8003890:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8003894:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003898:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 800389c:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80038a0:	6803      	ldr	r3, [r0, #0]
 80038a2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038a6:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 80038aa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80038ae:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80038b2:	6803      	ldr	r3, [r0, #0]
 80038b4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038b8:	694d      	ldr	r5, [r1, #20]
 80038ba:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80038be:	6803      	ldr	r3, [r0, #0]
 80038c0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038c4:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80038c8:	4d2e      	ldr	r5, [pc, #184]	; (8003984 <LTDC_SetConfig+0x1b0>)
 80038ca:	4035      	ands	r5, r6
 80038cc:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80038d0:	6a0d      	ldr	r5, [r1, #32]
 80038d2:	6803      	ldr	r3, [r0, #0]
 80038d4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038d8:	69ce      	ldr	r6, [r1, #28]
 80038da:	4335      	orrs	r5, r6
 80038dc:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80038e0:	6803      	ldr	r3, [r0, #0]
 80038e2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80038e6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80038ea:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80038ee:	6803      	ldr	r3, [r0, #0]
 80038f0:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 80038f4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80038f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80038fa:	690b      	ldr	r3, [r1, #16]
 80038fc:	b16b      	cbz	r3, 800391a <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d039      	beq.n	8003976 <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003902:	2b02      	cmp	r3, #2
 8003904:	bf18      	it	ne
 8003906:	2b04      	cmpne	r3, #4
 8003908:	d037      	beq.n	800397a <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800390a:	2b03      	cmp	r3, #3
 800390c:	d037      	beq.n	800397e <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800390e:	2b07      	cmp	r3, #7
 8003910:	d001      	beq.n	8003916 <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003912:	2501      	movs	r5, #1
 8003914:	e002      	b.n	800391c <LTDC_SetConfig+0x148>
    tmp = 2U;
 8003916:	2502      	movs	r5, #2
 8003918:	e000      	b.n	800391c <LTDC_SetConfig+0x148>
    tmp = 4U;
 800391a:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800391c:	6802      	ldr	r2, [r0, #0]
 800391e:	4462      	add	r2, ip
 8003920:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8003924:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8003928:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800392c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800392e:	fb05 f402 	mul.w	r4, r5, r2
 8003932:	684b      	ldr	r3, [r1, #4]
 8003934:	680a      	ldr	r2, [r1, #0]
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	fb05 f303 	mul.w	r3, r5, r3
 800393c:	3303      	adds	r3, #3
 800393e:	6802      	ldr	r2, [r0, #0]
 8003940:	4462      	add	r2, ip
 8003942:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003946:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800394a:	6803      	ldr	r3, [r0, #0]
 800394c:	4463      	add	r3, ip
 800394e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8003952:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <LTDC_SetConfig+0x1b4>)
 8003954:	4022      	ands	r2, r4
 8003956:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800395a:	6803      	ldr	r3, [r0, #0]
 800395c:	4463      	add	r3, ip
 800395e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003960:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003964:	6803      	ldr	r3, [r0, #0]
 8003966:	449c      	add	ip, r3
 8003968:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8003976:	2503      	movs	r5, #3
 8003978:	e7d0      	b.n	800391c <LTDC_SetConfig+0x148>
    tmp = 2U;
 800397a:	2502      	movs	r5, #2
 800397c:	e7ce      	b.n	800391c <LTDC_SetConfig+0x148>
 800397e:	2502      	movs	r5, #2
 8003980:	e7cc      	b.n	800391c <LTDC_SetConfig+0x148>
 8003982:	bf00      	nop
 8003984:	fffff8f8 	.word	0xfffff8f8
 8003988:	fffff800 	.word	0xfffff800

0800398c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800398c:	2800      	cmp	r0, #0
 800398e:	f000 80fd 	beq.w	8003b8c <HAL_LTDC_Init+0x200>
{
 8003992:	b538      	push	{r3, r4, r5, lr}
 8003994:	4604      	mov	r4, r0
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 8003996:	6802      	ldr	r2, [r0, #0]
 8003998:	4b7d      	ldr	r3, [pc, #500]	; (8003b90 <HAL_LTDC_Init+0x204>)
 800399a:	429a      	cmp	r2, r3
 800399c:	d003      	beq.n	80039a6 <HAL_LTDC_Init+0x1a>
 800399e:	21ca      	movs	r1, #202	; 0xca
 80039a0:	487c      	ldr	r0, [pc, #496]	; (8003b94 <HAL_LTDC_Init+0x208>)
 80039a2:	f010 fd93 	bl	80144cc <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 80039a6:	6963      	ldr	r3, [r4, #20]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ac:	f080 80ac 	bcs.w	8003b08 <HAL_LTDC_Init+0x17c>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 80039b0:	69a3      	ldr	r3, [r4, #24]
 80039b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b6:	f080 80ac 	bcs.w	8003b12 <HAL_LTDC_Init+0x186>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 80039ba:	69e3      	ldr	r3, [r4, #28]
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c0:	f080 80ac 	bcs.w	8003b1c <HAL_LTDC_Init+0x190>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 80039c4:	6a23      	ldr	r3, [r4, #32]
 80039c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ca:	f080 80ac 	bcs.w	8003b26 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 80039ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d4:	f080 80ac 	bcs.w	8003b30 <HAL_LTDC_Init+0x1a4>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 80039d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	f080 80ac 	bcs.w	8003b3a <HAL_LTDC_Init+0x1ae>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 80039e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e8:	f080 80ac 	bcs.w	8003b44 <HAL_LTDC_Init+0x1b8>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 80039ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	f080 80ac 	bcs.w	8003b4e <HAL_LTDC_Init+0x1c2>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 80039f6:	6863      	ldr	r3, [r4, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf18      	it	ne
 80039fc:	f1b3 4f00 	cmpne.w	r3, #2147483648	; 0x80000000
 8003a00:	f040 80aa 	bne.w	8003b58 <HAL_LTDC_Init+0x1cc>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8003a04:	68a3      	ldr	r3, [r4, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf18      	it	ne
 8003a0a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8003a0e:	f040 80a8 	bne.w	8003b62 <HAL_LTDC_Init+0x1d6>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8003a12:	68e3      	ldr	r3, [r4, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf18      	it	ne
 8003a18:	f1b3 5f00 	cmpne.w	r3, #536870912	; 0x20000000
 8003a1c:	f040 80a6 	bne.w	8003b6c <HAL_LTDC_Init+0x1e0>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8003a20:	6923      	ldr	r3, [r4, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf18      	it	ne
 8003a26:	f1b3 5f80 	cmpne.w	r3, #268435456	; 0x10000000
 8003a2a:	f040 80a4 	bne.w	8003b76 <HAL_LTDC_Init+0x1ea>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003a2e:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80a4 	beq.w	8003b80 <HAL_LTDC_Init+0x1f4>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003a3e:	6822      	ldr	r2, [r4, #0]
 8003a40:	6993      	ldr	r3, [r2, #24]
 8003a42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a46:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a48:	6821      	ldr	r1, [r4, #0]
 8003a4a:	698a      	ldr	r2, [r1, #24]
 8003a4c:	6863      	ldr	r3, [r4, #4]
 8003a4e:	68a0      	ldr	r0, [r4, #8]
 8003a50:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a52:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a54:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a56:	6920      	ldr	r0, [r4, #16]
 8003a58:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003a5e:	6821      	ldr	r1, [r4, #0]
 8003a60:	688a      	ldr	r2, [r1, #8]
 8003a62:	4b4d      	ldr	r3, [pc, #308]	; (8003b98 <HAL_LTDC_Init+0x20c>)
 8003a64:	401a      	ands	r2, r3
 8003a66:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	6882      	ldr	r2, [r0, #8]
 8003a6c:	69a1      	ldr	r1, [r4, #24]
 8003a6e:	6965      	ldr	r5, [r4, #20]
 8003a70:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003a74:	430a      	orrs	r2, r1
 8003a76:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003a78:	6821      	ldr	r1, [r4, #0]
 8003a7a:	68ca      	ldr	r2, [r1, #12]
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	68c2      	ldr	r2, [r0, #12]
 8003a84:	6a21      	ldr	r1, [r4, #32]
 8003a86:	69e5      	ldr	r5, [r4, #28]
 8003a88:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003a90:	6821      	ldr	r1, [r4, #0]
 8003a92:	690a      	ldr	r2, [r1, #16]
 8003a94:	401a      	ands	r2, r3
 8003a96:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	6902      	ldr	r2, [r0, #16]
 8003a9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003aa0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003aa8:	6821      	ldr	r1, [r4, #0]
 8003aaa:	694a      	ldr	r2, [r1, #20]
 8003aac:	4013      	ands	r3, r2
 8003aae:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003ab0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003ab2:	6821      	ldr	r1, [r4, #0]
 8003ab4:	694b      	ldr	r3, [r1, #20]
 8003ab6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ab8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003abc:	4313      	orrs	r3, r2
 8003abe:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ac0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ac4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003ac8:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003aca:	6821      	ldr	r1, [r4, #0]
 8003acc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003ace:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003ad2:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ad4:	6821      	ldr	r1, [r4, #0]
 8003ad6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003ad8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003adc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003ae0:	4303      	orrs	r3, r0
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ae6:	6822      	ldr	r2, [r4, #0]
 8003ae8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003aea:	f043 0306 	orr.w	r3, r3, #6
 8003aee:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	6993      	ldr	r3, [r2, #24]
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003afa:	2000      	movs	r0, #0
 8003afc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 8003b08:	21cb      	movs	r1, #203	; 0xcb
 8003b0a:	4822      	ldr	r0, [pc, #136]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b0c:	f010 fcde 	bl	80144cc <assert_failed>
 8003b10:	e74e      	b.n	80039b0 <HAL_LTDC_Init+0x24>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 8003b12:	21cc      	movs	r1, #204	; 0xcc
 8003b14:	481f      	ldr	r0, [pc, #124]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b16:	f010 fcd9 	bl	80144cc <assert_failed>
 8003b1a:	e74e      	b.n	80039ba <HAL_LTDC_Init+0x2e>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 8003b1c:	21cd      	movs	r1, #205	; 0xcd
 8003b1e:	481d      	ldr	r0, [pc, #116]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b20:	f010 fcd4 	bl	80144cc <assert_failed>
 8003b24:	e74e      	b.n	80039c4 <HAL_LTDC_Init+0x38>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 8003b26:	21ce      	movs	r1, #206	; 0xce
 8003b28:	481a      	ldr	r0, [pc, #104]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b2a:	f010 fccf 	bl	80144cc <assert_failed>
 8003b2e:	e74e      	b.n	80039ce <HAL_LTDC_Init+0x42>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 8003b30:	21cf      	movs	r1, #207	; 0xcf
 8003b32:	4818      	ldr	r0, [pc, #96]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b34:	f010 fcca 	bl	80144cc <assert_failed>
 8003b38:	e74e      	b.n	80039d8 <HAL_LTDC_Init+0x4c>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 8003b3a:	21d0      	movs	r1, #208	; 0xd0
 8003b3c:	4815      	ldr	r0, [pc, #84]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b3e:	f010 fcc5 	bl	80144cc <assert_failed>
 8003b42:	e74e      	b.n	80039e2 <HAL_LTDC_Init+0x56>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 8003b44:	21d1      	movs	r1, #209	; 0xd1
 8003b46:	4813      	ldr	r0, [pc, #76]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b48:	f010 fcc0 	bl	80144cc <assert_failed>
 8003b4c:	e74e      	b.n	80039ec <HAL_LTDC_Init+0x60>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 8003b4e:	21d2      	movs	r1, #210	; 0xd2
 8003b50:	4810      	ldr	r0, [pc, #64]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b52:	f010 fcbb 	bl	80144cc <assert_failed>
 8003b56:	e74e      	b.n	80039f6 <HAL_LTDC_Init+0x6a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 8003b58:	21d3      	movs	r1, #211	; 0xd3
 8003b5a:	480e      	ldr	r0, [pc, #56]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b5c:	f010 fcb6 	bl	80144cc <assert_failed>
 8003b60:	e750      	b.n	8003a04 <HAL_LTDC_Init+0x78>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8003b62:	21d4      	movs	r1, #212	; 0xd4
 8003b64:	480b      	ldr	r0, [pc, #44]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b66:	f010 fcb1 	bl	80144cc <assert_failed>
 8003b6a:	e752      	b.n	8003a12 <HAL_LTDC_Init+0x86>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8003b6c:	21d5      	movs	r1, #213	; 0xd5
 8003b6e:	4809      	ldr	r0, [pc, #36]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b70:	f010 fcac 	bl	80144cc <assert_failed>
 8003b74:	e754      	b.n	8003a20 <HAL_LTDC_Init+0x94>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8003b76:	21d6      	movs	r1, #214	; 0xd6
 8003b78:	4806      	ldr	r0, [pc, #24]	; (8003b94 <HAL_LTDC_Init+0x208>)
 8003b7a:	f010 fca7 	bl	80144cc <assert_failed>
 8003b7e:	e756      	b.n	8003a2e <HAL_LTDC_Init+0xa2>
    hltdc->Lock = HAL_UNLOCKED;
 8003b80:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003b84:	4620      	mov	r0, r4
 8003b86:	f010 f869 	bl	8013c5c <HAL_LTDC_MspInit>
 8003b8a:	e755      	b.n	8003a38 <HAL_LTDC_Init+0xac>
    return HAL_ERROR;
 8003b8c:	2001      	movs	r0, #1
}
 8003b8e:	4770      	bx	lr
 8003b90:	40016800 	.word	0x40016800
 8003b94:	08019ab0 	.word	0x08019ab0
 8003b98:	f000f800 	.word	0xf000f800

08003b9c <HAL_LTDC_ConfigLayer>:
{
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	4616      	mov	r6, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003ba4:	2a01      	cmp	r2, #1
 8003ba6:	d85a      	bhi.n	8003c5e <HAL_LTDC_ConfigLayer+0xc2>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	d25c      	bcs.n	8003c6a <HAL_LTDC_ConfigLayer+0xce>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8003bb0:	6863      	ldr	r3, [r4, #4]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb6:	d25e      	bcs.n	8003c76 <HAL_LTDC_ConfigLayer+0xda>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8003bb8:	68a3      	ldr	r3, [r4, #8]
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbe:	d260      	bcs.n	8003c82 <HAL_LTDC_ConfigLayer+0xe6>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8003bc0:	68e3      	ldr	r3, [r4, #12]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc6:	d262      	bcs.n	8003c8e <HAL_LTDC_ConfigLayer+0xf2>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8003bc8:	6923      	ldr	r3, [r4, #16]
 8003bca:	2b07      	cmp	r3, #7
 8003bcc:	d865      	bhi.n	8003c9a <HAL_LTDC_ConfigLayer+0xfe>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 8003bce:	6963      	ldr	r3, [r4, #20]
 8003bd0:	2bff      	cmp	r3, #255	; 0xff
 8003bd2:	d868      	bhi.n	8003ca6 <HAL_LTDC_ConfigLayer+0x10a>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 8003bd4:	69a3      	ldr	r3, [r4, #24]
 8003bd6:	2bff      	cmp	r3, #255	; 0xff
 8003bd8:	d86b      	bhi.n	8003cb2 <HAL_LTDC_ConfigLayer+0x116>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8003bda:	69e3      	ldr	r3, [r4, #28]
 8003bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be0:	bf18      	it	ne
 8003be2:	f5b3 6fc0 	cmpne.w	r3, #1536	; 0x600
 8003be6:	d16a      	bne.n	8003cbe <HAL_LTDC_ConfigLayer+0x122>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 8003be8:	6a23      	ldr	r3, [r4, #32]
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	bf18      	it	ne
 8003bee:	2b07      	cmpne	r3, #7
 8003bf0:	d16b      	bne.n	8003cca <HAL_LTDC_ConfigLayer+0x12e>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 8003bf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf8:	d26d      	bcs.n	8003cd6 <HAL_LTDC_ConfigLayer+0x13a>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8003bfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c00:	d26f      	bcs.n	8003ce2 <HAL_LTDC_ConfigLayer+0x146>
  __HAL_LOCK(hltdc);
 8003c02:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d071      	beq.n	8003cee <HAL_LTDC_ConfigLayer+0x152>
 8003c0a:	2701      	movs	r7, #1
 8003c0c:	f885 70a0 	strb.w	r7, [r5, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c10:	2302      	movs	r3, #2
 8003c12:	f885 30a1 	strb.w	r3, [r5, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c16:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8003c1a:	fb0c 5c06 	mla	ip, ip, r6, r5
 8003c1e:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8003c22:	46a6      	mov	lr, r4
 8003c24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003c28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003c2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003c30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003c34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003c38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003c3c:	f8de 3000 	ldr.w	r3, [lr]
 8003c40:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003c44:	4632      	mov	r2, r6
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f7ff fdc3 	bl	80037d4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003c52:	f885 70a1 	strb.w	r7, [r5, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003c56:	2000      	movs	r0, #0
 8003c58:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0
}
 8003c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003c5e:	f240 21fe 	movw	r1, #766	; 0x2fe
 8003c62:	4824      	ldr	r0, [pc, #144]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003c64:	f010 fc32 	bl	80144cc <assert_failed>
 8003c68:	e79e      	b.n	8003ba8 <HAL_LTDC_ConfigLayer+0xc>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8003c6a:	f240 21ff 	movw	r1, #767	; 0x2ff
 8003c6e:	4821      	ldr	r0, [pc, #132]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003c70:	f010 fc2c 	bl	80144cc <assert_failed>
 8003c74:	e79c      	b.n	8003bb0 <HAL_LTDC_ConfigLayer+0x14>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8003c76:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003c7a:	481e      	ldr	r0, [pc, #120]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003c7c:	f010 fc26 	bl	80144cc <assert_failed>
 8003c80:	e79a      	b.n	8003bb8 <HAL_LTDC_ConfigLayer+0x1c>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8003c82:	f240 3101 	movw	r1, #769	; 0x301
 8003c86:	481b      	ldr	r0, [pc, #108]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003c88:	f010 fc20 	bl	80144cc <assert_failed>
 8003c8c:	e798      	b.n	8003bc0 <HAL_LTDC_ConfigLayer+0x24>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8003c8e:	f240 3102 	movw	r1, #770	; 0x302
 8003c92:	4818      	ldr	r0, [pc, #96]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003c94:	f010 fc1a 	bl	80144cc <assert_failed>
 8003c98:	e796      	b.n	8003bc8 <HAL_LTDC_ConfigLayer+0x2c>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8003c9a:	f240 3103 	movw	r1, #771	; 0x303
 8003c9e:	4815      	ldr	r0, [pc, #84]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003ca0:	f010 fc14 	bl	80144cc <assert_failed>
 8003ca4:	e793      	b.n	8003bce <HAL_LTDC_ConfigLayer+0x32>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 8003ca6:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003caa:	4812      	ldr	r0, [pc, #72]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003cac:	f010 fc0e 	bl	80144cc <assert_failed>
 8003cb0:	e790      	b.n	8003bd4 <HAL_LTDC_ConfigLayer+0x38>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 8003cb2:	f240 3105 	movw	r1, #773	; 0x305
 8003cb6:	480f      	ldr	r0, [pc, #60]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003cb8:	f010 fc08 	bl	80144cc <assert_failed>
 8003cbc:	e78d      	b.n	8003bda <HAL_LTDC_ConfigLayer+0x3e>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8003cbe:	f240 3106 	movw	r1, #774	; 0x306
 8003cc2:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003cc4:	f010 fc02 	bl	80144cc <assert_failed>
 8003cc8:	e78e      	b.n	8003be8 <HAL_LTDC_ConfigLayer+0x4c>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 8003cca:	f240 3107 	movw	r1, #775	; 0x307
 8003cce:	4809      	ldr	r0, [pc, #36]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003cd0:	f010 fbfc 	bl	80144cc <assert_failed>
 8003cd4:	e78d      	b.n	8003bf2 <HAL_LTDC_ConfigLayer+0x56>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 8003cd6:	f44f 7142 	mov.w	r1, #776	; 0x308
 8003cda:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003cdc:	f010 fbf6 	bl	80144cc <assert_failed>
 8003ce0:	e78b      	b.n	8003bfa <HAL_LTDC_ConfigLayer+0x5e>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8003ce2:	f240 3109 	movw	r1, #777	; 0x309
 8003ce6:	4803      	ldr	r0, [pc, #12]	; (8003cf4 <HAL_LTDC_ConfigLayer+0x158>)
 8003ce8:	f010 fbf0 	bl	80144cc <assert_failed>
 8003cec:	e789      	b.n	8003c02 <HAL_LTDC_ConfigLayer+0x66>
  __HAL_LOCK(hltdc);
 8003cee:	2002      	movs	r0, #2
 8003cf0:	e7b4      	b.n	8003c5c <HAL_LTDC_ConfigLayer+0xc0>
 8003cf2:	bf00      	nop
 8003cf4:	08019ab0 	.word	0x08019ab0

08003cf8 <HAL_LTDC_SetAddress>:
{
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	460e      	mov	r6, r1
 8003cfe:	4615      	mov	r5, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003d00:	2a01      	cmp	r2, #1
 8003d02:	d81d      	bhi.n	8003d40 <HAL_LTDC_SetAddress+0x48>
  __HAL_LOCK(hltdc);
 8003d04:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d01f      	beq.n	8003d4c <HAL_LTDC_SetAddress+0x54>
 8003d0c:	2701      	movs	r7, #1
 8003d0e:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d12:	2302      	movs	r3, #2
 8003d14:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003d18:	2334      	movs	r3, #52	; 0x34
 8003d1a:	fb05 f303 	mul.w	r3, r5, r3
 8003d1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8003d22:	4423      	add	r3, r4
 8003d24:	65de      	str	r6, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d26:	462a      	mov	r2, r5
 8003d28:	4421      	add	r1, r4
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f7ff fd52 	bl	80037d4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d34:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003d40:	f240 5111 	movw	r1, #1297	; 0x511
 8003d44:	4802      	ldr	r0, [pc, #8]	; (8003d50 <HAL_LTDC_SetAddress+0x58>)
 8003d46:	f010 fbc1 	bl	80144cc <assert_failed>
 8003d4a:	e7db      	b.n	8003d04 <HAL_LTDC_SetAddress+0xc>
  __HAL_LOCK(hltdc);
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	e7f6      	b.n	8003d3e <HAL_LTDC_SetAddress+0x46>
 8003d50:	08019ab0 	.word	0x08019ab0

08003d54 <HAL_LTDC_Reload>:
{
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4604      	mov	r4, r0
 8003d58:	460d      	mov	r5, r1
  assert_param(IS_LTDC_RELOAD(ReloadType));
 8003d5a:	1e4b      	subs	r3, r1, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d816      	bhi.n	8003d8e <HAL_LTDC_Reload+0x3a>
  __HAL_LOCK(hltdc);
 8003d60:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d018      	beq.n	8003d9a <HAL_LTDC_Reload+0x46>
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8003d74:	6821      	ldr	r1, [r4, #0]
 8003d76:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d82:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003d86:	2000      	movs	r0, #0
 8003d88:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003d8c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_LTDC_RELOAD(ReloadType));
 8003d8e:	f240 51aa 	movw	r1, #1450	; 0x5aa
 8003d92:	4803      	ldr	r0, [pc, #12]	; (8003da0 <HAL_LTDC_Reload+0x4c>)
 8003d94:	f010 fb9a 	bl	80144cc <assert_failed>
 8003d98:	e7e2      	b.n	8003d60 <HAL_LTDC_Reload+0xc>
  __HAL_LOCK(hltdc);
 8003d9a:	2002      	movs	r0, #2
 8003d9c:	e7f6      	b.n	8003d8c <HAL_LTDC_Reload+0x38>
 8003d9e:	bf00      	nop
 8003da0:	08019ab0 	.word	0x08019ab0

08003da4 <HAL_LTDC_SetAlpha_NoReload>:
{
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	4604      	mov	r4, r0
 8003da8:	460e      	mov	r6, r1
 8003daa:	4615      	mov	r5, r2
  assert_param(IS_LTDC_ALPHA(Alpha));
 8003dac:	29ff      	cmp	r1, #255	; 0xff
 8003dae:	d81d      	bhi.n	8003dec <HAL_LTDC_SetAlpha_NoReload+0x48>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003db0:	2d01      	cmp	r5, #1
 8003db2:	d821      	bhi.n	8003df8 <HAL_LTDC_SetAlpha_NoReload+0x54>
  __HAL_LOCK(hltdc);
 8003db4:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d023      	beq.n	8003e04 <HAL_LTDC_SetAlpha_NoReload+0x60>
 8003dbc:	2701      	movs	r7, #1
 8003dbe:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003dc8:	2334      	movs	r3, #52	; 0x34
 8003dca:	fb05 f303 	mul.w	r3, r5, r3
 8003dce:	f103 0138 	add.w	r1, r3, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 8003dd2:	4423      	add	r3, r4
 8003dd4:	64de      	str	r6, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003dd6:	462a      	mov	r2, r5
 8003dd8:	4421      	add	r1, r4
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f7ff fcfa 	bl	80037d4 <LTDC_SetConfig>
  hltdc->State = HAL_LTDC_STATE_READY;
 8003de0:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LTDC_ALPHA(Alpha));
 8003dec:	f240 6196 	movw	r1, #1686	; 0x696
 8003df0:	4805      	ldr	r0, [pc, #20]	; (8003e08 <HAL_LTDC_SetAlpha_NoReload+0x64>)
 8003df2:	f010 fb6b 	bl	80144cc <assert_failed>
 8003df6:	e7db      	b.n	8003db0 <HAL_LTDC_SetAlpha_NoReload+0xc>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8003df8:	f240 6197 	movw	r1, #1687	; 0x697
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <HAL_LTDC_SetAlpha_NoReload+0x64>)
 8003dfe:	f010 fb65 	bl	80144cc <assert_failed>
 8003e02:	e7d7      	b.n	8003db4 <HAL_LTDC_SetAlpha_NoReload+0x10>
  __HAL_LOCK(hltdc);
 8003e04:	2002      	movs	r0, #2
 8003e06:	e7f0      	b.n	8003dea <HAL_LTDC_SetAlpha_NoReload+0x46>
 8003e08:	08019ab0 	.word	0x08019ab0

08003e0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e0c:	b510      	push	{r4, lr}
 8003e0e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_PWREx_EnableOverDrive+0x74>)
 8003e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e24:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_PWREx_EnableOverDrive+0x78>)
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e2e:	f7fd fa09 	bl	8001244 <HAL_GetTick>
 8003e32:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_PWREx_EnableOverDrive+0x78>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e3c:	d108      	bne.n	8003e50 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e3e:	f7fd fa01 	bl	8001244 <HAL_GetTick>
 8003e42:	1b00      	subs	r0, r0, r4
 8003e44:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e48:	d9f4      	bls.n	8003e34 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8003e4a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8003e4c:	b002      	add	sp, #8
 8003e4e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e50:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <HAL_PWREx_EnableOverDrive+0x78>)
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e58:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003e5a:	f7fd f9f3 	bl	8001244 <HAL_GetTick>
 8003e5e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <HAL_PWREx_EnableOverDrive+0x78>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e68:	d107      	bne.n	8003e7a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e6a:	f7fd f9eb 	bl	8001244 <HAL_GetTick>
 8003e6e:	1b00      	subs	r0, r0, r4
 8003e70:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e74:	d9f4      	bls.n	8003e60 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003e76:	2003      	movs	r0, #3
 8003e78:	e7e8      	b.n	8003e4c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e7e6      	b.n	8003e4c <HAL_PWREx_EnableOverDrive+0x40>
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000

08003e88 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	f000 8262 	beq.w	8004352 <HAL_RCC_OscConfig+0x4ca>
{
 8003e8e:	b570      	push	{r4, r5, r6, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003e94:	6803      	ldr	r3, [r0, #0]
 8003e96:	2b0f      	cmp	r3, #15
 8003e98:	d828      	bhi.n	8003eec <HAL_RCC_OscConfig+0x64>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	f013 0f01 	tst.w	r3, #1
 8003ea0:	d03e      	beq.n	8003f20 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003ea2:	6863      	ldr	r3, [r4, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf18      	it	ne
 8003ea8:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x2c>
 8003eae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb2:	d121      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x70>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003eb4:	4b8b      	ldr	r3, [pc, #556]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d026      	beq.n	8003f0e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec0:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d01b      	beq.n	8003f04 <HAL_RCC_OscConfig+0x7c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed2:	d054      	beq.n	8003f7e <HAL_RCC_OscConfig+0xf6>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d168      	bne.n	8003faa <HAL_RCC_OscConfig+0x122>
 8003ed8:	4b82      	ldr	r3, [pc, #520]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e04d      	b.n	8003f88 <HAL_RCC_OscConfig+0x100>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003eec:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8003ef0:	487d      	ldr	r0, [pc, #500]	; (80040e8 <HAL_RCC_OscConfig+0x260>)
 8003ef2:	f010 faeb 	bl	80144cc <assert_failed>
 8003ef6:	e7d0      	b.n	8003e9a <HAL_RCC_OscConfig+0x12>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003ef8:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8003efc:	487a      	ldr	r0, [pc, #488]	; (80040e8 <HAL_RCC_OscConfig+0x260>)
 8003efe:	f010 fae5 	bl	80144cc <assert_failed>
 8003f02:	e7d7      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f04:	4b77      	ldr	r3, [pc, #476]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003f0c:	d0de      	beq.n	8003ecc <HAL_RCC_OscConfig+0x44>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0e:	4b75      	ldr	r3, [pc, #468]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f16:	d003      	beq.n	8003f20 <HAL_RCC_OscConfig+0x98>
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 821b 	beq.w	8004356 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	f013 0f02 	tst.w	r3, #2
 8003f26:	f000 8088 	beq.w	800403a <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d862      	bhi.n	8003ff6 <HAL_RCC_OscConfig+0x16e>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003f30:	6923      	ldr	r3, [r4, #16]
 8003f32:	2b1f      	cmp	r3, #31
 8003f34:	d865      	bhi.n	8004002 <HAL_RCC_OscConfig+0x17a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f36:	4b6b      	ldr	r3, [pc, #428]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f013 0f0c 	tst.w	r3, #12
 8003f3e:	d06b      	beq.n	8004018 <HAL_RCC_OscConfig+0x190>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f40:	4b68      	ldr	r3, [pc, #416]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d060      	beq.n	800400e <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f4c:	68e3      	ldr	r3, [r4, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 809a 	beq.w	8004088 <HAL_RCC_OscConfig+0x200>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f54:	4a63      	ldr	r2, [pc, #396]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003f56:	6813      	ldr	r3, [r2, #0]
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fd f971 	bl	8001244 <HAL_GetTick>
 8003f62:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f64:	4b5f      	ldr	r3, [pc, #380]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f013 0f02 	tst.w	r3, #2
 8003f6c:	f040 8083 	bne.w	8004076 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fd f968 	bl	8001244 <HAL_GetTick>
 8003f74:	1b40      	subs	r0, r0, r5
 8003f76:	2802      	cmp	r0, #2
 8003f78:	d9f4      	bls.n	8003f64 <HAL_RCC_OscConfig+0xdc>
          {
            return HAL_TIMEOUT;
 8003f7a:	2003      	movs	r0, #3
 8003f7c:	e1f0      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7e:	4a59      	ldr	r2, [pc, #356]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003f80:	6813      	ldr	r3, [r2, #0]
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f88:	6863      	ldr	r3, [r4, #4]
 8003f8a:	b32b      	cbz	r3, 8003fd8 <HAL_RCC_OscConfig+0x150>
        tickstart = HAL_GetTick();
 8003f8c:	f7fd f95a 	bl	8001244 <HAL_GetTick>
 8003f90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b54      	ldr	r3, [pc, #336]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f9a:	d1c1      	bne.n	8003f20 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fd f952 	bl	8001244 <HAL_GetTick>
 8003fa0:	1b40      	subs	r0, r0, r5
 8003fa2:	2864      	cmp	r0, #100	; 0x64
 8003fa4:	d9f5      	bls.n	8003f92 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003fa6:	2003      	movs	r0, #3
 8003fa8:	e1da      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003faa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fae:	d009      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x13c>
 8003fb0:	4b4c      	ldr	r3, [pc, #304]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	e7e1      	b.n	8003f88 <HAL_RCC_OscConfig+0x100>
 8003fc4:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e7d7      	b.n	8003f88 <HAL_RCC_OscConfig+0x100>
        tickstart = HAL_GetTick();
 8003fd8:	f7fd f934 	bl	8001244 <HAL_GetTick>
 8003fdc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fde:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fe6:	d09b      	beq.n	8003f20 <HAL_RCC_OscConfig+0x98>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7fd f92c 	bl	8001244 <HAL_GetTick>
 8003fec:	1b40      	subs	r0, r0, r5
 8003fee:	2864      	cmp	r0, #100	; 0x64
 8003ff0:	d9f5      	bls.n	8003fde <HAL_RCC_OscConfig+0x156>
            return HAL_TIMEOUT;
 8003ff2:	2003      	movs	r0, #3
 8003ff4:	e1b4      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003ff6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003ffa:	483b      	ldr	r0, [pc, #236]	; (80040e8 <HAL_RCC_OscConfig+0x260>)
 8003ffc:	f010 fa66 	bl	80144cc <assert_failed>
 8004000:	e796      	b.n	8003f30 <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004002:	f240 119d 	movw	r1, #413	; 0x19d
 8004006:	4838      	ldr	r0, [pc, #224]	; (80040e8 <HAL_RCC_OscConfig+0x260>)
 8004008:	f010 fa60 	bl	80144cc <assert_failed>
 800400c:	e793      	b.n	8003f36 <HAL_RCC_OscConfig+0xae>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400e:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004016:	d199      	bne.n	8003f4c <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004018:	4b32      	ldr	r3, [pc, #200]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f013 0f02 	tst.w	r3, #2
 8004020:	d003      	beq.n	800402a <HAL_RCC_OscConfig+0x1a2>
 8004022:	68e3      	ldr	r3, [r4, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 8198 	bne.w	800435a <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	4a2e      	ldr	r2, [pc, #184]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 800402c:	6813      	ldr	r3, [r2, #0]
 800402e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004032:	6921      	ldr	r1, [r4, #16]
 8004034:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004038:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	f013 0f08 	tst.w	r3, #8
 8004040:	d054      	beq.n	80040ec <HAL_RCC_OscConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004042:	6963      	ldr	r3, [r4, #20]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d833      	bhi.n	80040b0 <HAL_RCC_OscConfig+0x228>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004048:	6963      	ldr	r3, [r4, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d036      	beq.n	80040bc <HAL_RCC_OscConfig+0x234>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4a25      	ldr	r2, [pc, #148]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8004050:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd f8f4 	bl	8001244 <HAL_GetTick>
 800405c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	f013 0f02 	tst.w	r3, #2
 8004066:	d141      	bne.n	80040ec <HAL_RCC_OscConfig+0x264>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004068:	f7fd f8ec 	bl	8001244 <HAL_GetTick>
 800406c:	1b40      	subs	r0, r0, r5
 800406e:	2802      	cmp	r0, #2
 8004070:	d9f5      	bls.n	800405e <HAL_RCC_OscConfig+0x1d6>
        {
          return HAL_TIMEOUT;
 8004072:	2003      	movs	r0, #3
 8004074:	e174      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004076:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 8004078:	6813      	ldr	r3, [r2, #0]
 800407a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800407e:	6921      	ldr	r1, [r4, #16]
 8004080:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e7d8      	b.n	800403a <HAL_RCC_OscConfig+0x1b2>
        __HAL_RCC_HSI_DISABLE();
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 800408a:	6813      	ldr	r3, [r2, #0]
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004092:	f7fd f8d7 	bl	8001244 <HAL_GetTick>
 8004096:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f013 0f02 	tst.w	r3, #2
 80040a0:	d0cb      	beq.n	800403a <HAL_RCC_OscConfig+0x1b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a2:	f7fd f8cf 	bl	8001244 <HAL_GetTick>
 80040a6:	1b40      	subs	r0, r0, r5
 80040a8:	2802      	cmp	r0, #2
 80040aa:	d9f5      	bls.n	8004098 <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 80040ac:	2003      	movs	r0, #3
 80040ae:	e157      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80040b0:	f240 11dd 	movw	r1, #477	; 0x1dd
 80040b4:	480c      	ldr	r0, [pc, #48]	; (80040e8 <HAL_RCC_OscConfig+0x260>)
 80040b6:	f010 fa09 	bl	80144cc <assert_failed>
 80040ba:	e7c5      	b.n	8004048 <HAL_RCC_OscConfig+0x1c0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040bc:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 80040be:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fd f8bd 	bl	8001244 <HAL_GetTick>
 80040ca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_OscConfig+0x25c>)
 80040ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d0:	f013 0f02 	tst.w	r3, #2
 80040d4:	d00a      	beq.n	80040ec <HAL_RCC_OscConfig+0x264>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d6:	f7fd f8b5 	bl	8001244 <HAL_GetTick>
 80040da:	1b40      	subs	r0, r0, r5
 80040dc:	2802      	cmp	r0, #2
 80040de:	d9f5      	bls.n	80040cc <HAL_RCC_OscConfig+0x244>
        {
          return HAL_TIMEOUT;
 80040e0:	2003      	movs	r0, #3
 80040e2:	e13d      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	08019aec 	.word	0x08019aec
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	f013 0f04 	tst.w	r3, #4
 80040f2:	f000 8086 	beq.w	8004202 <HAL_RCC_OscConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80040f6:	68a3      	ldr	r3, [r4, #8]
 80040f8:	2b05      	cmp	r3, #5
 80040fa:	bf18      	it	ne
 80040fc:	2b01      	cmpne	r3, #1
 80040fe:	d823      	bhi.n	8004148 <HAL_RCC_OscConfig+0x2c0>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004100:	4b99      	ldr	r3, [pc, #612]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004108:	d124      	bne.n	8004154 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	4b97      	ldr	r3, [pc, #604]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 800410c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800411e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004120:	4b92      	ldr	r3, [pc, #584]	; (800436c <HAL_RCC_OscConfig+0x4e4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004128:	d016      	beq.n	8004158 <HAL_RCC_OscConfig+0x2d0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800412a:	68a3      	ldr	r3, [r4, #8]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d027      	beq.n	8004180 <HAL_RCC_OscConfig+0x2f8>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d13d      	bne.n	80041b0 <HAL_RCC_OscConfig+0x328>
 8004134:	4b8c      	ldr	r3, [pc, #560]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 8004136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	671a      	str	r2, [r3, #112]	; 0x70
 800413e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004140:	f022 0204 	bic.w	r2, r2, #4
 8004144:	671a      	str	r2, [r3, #112]	; 0x70
 8004146:	e020      	b.n	800418a <HAL_RCC_OscConfig+0x302>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004148:	f240 2107 	movw	r1, #519	; 0x207
 800414c:	4888      	ldr	r0, [pc, #544]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 800414e:	f010 f9bd 	bl	80144cc <assert_failed>
 8004152:	e7d5      	b.n	8004100 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8004154:	2500      	movs	r5, #0
 8004156:	e7e3      	b.n	8004120 <HAL_RCC_OscConfig+0x298>
      PWR->CR1 |= PWR_CR1_DBP;
 8004158:	4a84      	ldr	r2, [pc, #528]	; (800436c <HAL_RCC_OscConfig+0x4e4>)
 800415a:	6813      	ldr	r3, [r2, #0]
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004162:	f7fd f86f 	bl	8001244 <HAL_GetTick>
 8004166:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004168:	4b80      	ldr	r3, [pc, #512]	; (800436c <HAL_RCC_OscConfig+0x4e4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004170:	d1db      	bne.n	800412a <HAL_RCC_OscConfig+0x2a2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004172:	f7fd f867 	bl	8001244 <HAL_GetTick>
 8004176:	1b80      	subs	r0, r0, r6
 8004178:	2864      	cmp	r0, #100	; 0x64
 800417a:	d9f5      	bls.n	8004168 <HAL_RCC_OscConfig+0x2e0>
          return HAL_TIMEOUT;
 800417c:	2003      	movs	r0, #3
 800417e:	e0ef      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004180:	4a79      	ldr	r2, [pc, #484]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 8004182:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	b333      	cbz	r3, 80041dc <HAL_RCC_OscConfig+0x354>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fd f859 	bl	8001244 <HAL_GetTick>
 8004192:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	4b74      	ldr	r3, [pc, #464]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	f013 0f02 	tst.w	r3, #2
 800419c:	d12f      	bne.n	80041fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fd f851 	bl	8001244 <HAL_GetTick>
 80041a2:	1b80      	subs	r0, r0, r6
 80041a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80041a8:	4298      	cmp	r0, r3
 80041aa:	d9f3      	bls.n	8004194 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80041ac:	2003      	movs	r0, #3
 80041ae:	e0d7      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d009      	beq.n	80041c8 <HAL_RCC_OscConfig+0x340>
 80041b4:	4b6c      	ldr	r3, [pc, #432]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 80041b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	671a      	str	r2, [r3, #112]	; 0x70
 80041be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041c0:	f022 0204 	bic.w	r2, r2, #4
 80041c4:	671a      	str	r2, [r3, #112]	; 0x70
 80041c6:	e7e0      	b.n	800418a <HAL_RCC_OscConfig+0x302>
 80041c8:	4b67      	ldr	r3, [pc, #412]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 80041ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041cc:	f042 0204 	orr.w	r2, r2, #4
 80041d0:	671a      	str	r2, [r3, #112]	; 0x70
 80041d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	671a      	str	r2, [r3, #112]	; 0x70
 80041da:	e7d6      	b.n	800418a <HAL_RCC_OscConfig+0x302>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fd f832 	bl	8001244 <HAL_GetTick>
 80041e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e2:	4b61      	ldr	r3, [pc, #388]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	f013 0f02 	tst.w	r3, #2
 80041ea:	d008      	beq.n	80041fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd f82a 	bl	8001244 <HAL_GetTick>
 80041f0:	1b80      	subs	r0, r0, r6
 80041f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80041f6:	4298      	cmp	r0, r3
 80041f8:	d9f3      	bls.n	80041e2 <HAL_RCC_OscConfig+0x35a>
        {
          return HAL_TIMEOUT;
 80041fa:	2003      	movs	r0, #3
 80041fc:	e0b0      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041fe:	2d00      	cmp	r5, #0
 8004200:	d140      	bne.n	8004284 <HAL_RCC_OscConfig+0x3fc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004202:	69a3      	ldr	r3, [r4, #24]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d843      	bhi.n	8004290 <HAL_RCC_OscConfig+0x408>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004208:	69a3      	ldr	r3, [r4, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80a7 	beq.w	800435e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004210:	4a55      	ldr	r2, [pc, #340]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 8004212:	6892      	ldr	r2, [r2, #8]
 8004214:	f002 020c 	and.w	r2, r2, #12
 8004218:	2a08      	cmp	r2, #8
 800421a:	f000 80a3 	beq.w	8004364 <HAL_RCC_OscConfig+0x4dc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421e:	2b02      	cmp	r3, #2
 8004220:	f040 8081 	bne.w	8004326 <HAL_RCC_OscConfig+0x49e>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004224:	69e3      	ldr	r3, [r4, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf18      	it	ne
 800422a:	f5b3 0f80 	cmpne.w	r3, #4194304	; 0x400000
 800422e:	d135      	bne.n	800429c <HAL_RCC_OscConfig+0x414>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004230:	6a23      	ldr	r3, [r4, #32]
 8004232:	3b02      	subs	r3, #2
 8004234:	2b3d      	cmp	r3, #61	; 0x3d
 8004236:	d837      	bhi.n	80042a8 <HAL_RCC_OscConfig+0x420>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800423a:	3b32      	subs	r3, #50	; 0x32
 800423c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004240:	d838      	bhi.n	80042b4 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004244:	2b02      	cmp	r3, #2
 8004246:	bf18      	it	ne
 8004248:	2b04      	cmpne	r3, #4
 800424a:	d003      	beq.n	8004254 <HAL_RCC_OscConfig+0x3cc>
 800424c:	2b06      	cmp	r3, #6
 800424e:	d001      	beq.n	8004254 <HAL_RCC_OscConfig+0x3cc>
 8004250:	2b08      	cmp	r3, #8
 8004252:	d135      	bne.n	80042c0 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004254:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004256:	3b02      	subs	r3, #2
 8004258:	2b0d      	cmp	r3, #13
 800425a:	d837      	bhi.n	80042cc <HAL_RCC_OscConfig+0x444>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4a42      	ldr	r2, [pc, #264]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fc ffed 	bl	8001244 <HAL_GetTick>
 800426a:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426c:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004274:	d030      	beq.n	80042d8 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004276:	f7fc ffe5 	bl	8001244 <HAL_GetTick>
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	2802      	cmp	r0, #2
 800427e:	d9f5      	bls.n	800426c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004280:	2003      	movs	r0, #3
 8004282:	e06d      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004284:	4a38      	ldr	r2, [pc, #224]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 8004286:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	e7b8      	b.n	8004202 <HAL_RCC_OscConfig+0x37a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004290:	f240 214b 	movw	r1, #587	; 0x24b
 8004294:	4836      	ldr	r0, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004296:	f010 f919 	bl	80144cc <assert_failed>
 800429a:	e7b5      	b.n	8004208 <HAL_RCC_OscConfig+0x380>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800429c:	f44f 7115 	mov.w	r1, #596	; 0x254
 80042a0:	4833      	ldr	r0, [pc, #204]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80042a2:	f010 f913 	bl	80144cc <assert_failed>
 80042a6:	e7c3      	b.n	8004230 <HAL_RCC_OscConfig+0x3a8>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80042a8:	f240 2155 	movw	r1, #597	; 0x255
 80042ac:	4830      	ldr	r0, [pc, #192]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80042ae:	f010 f90d 	bl	80144cc <assert_failed>
 80042b2:	e7c1      	b.n	8004238 <HAL_RCC_OscConfig+0x3b0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80042b4:	f240 2156 	movw	r1, #598	; 0x256
 80042b8:	482d      	ldr	r0, [pc, #180]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80042ba:	f010 f907 	bl	80144cc <assert_failed>
 80042be:	e7c0      	b.n	8004242 <HAL_RCC_OscConfig+0x3ba>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80042c0:	f240 2157 	movw	r1, #599	; 0x257
 80042c4:	482a      	ldr	r0, [pc, #168]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80042c6:	f010 f901 	bl	80144cc <assert_failed>
 80042ca:	e7c3      	b.n	8004254 <HAL_RCC_OscConfig+0x3cc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80042cc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80042d0:	4827      	ldr	r0, [pc, #156]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80042d2:	f010 f8fb 	bl	80144cc <assert_failed>
 80042d6:	e7c1      	b.n	800425c <HAL_RCC_OscConfig+0x3d4>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d8:	69e3      	ldr	r3, [r4, #28]
 80042da:	6a22      	ldr	r2, [r4, #32]
 80042dc:	4313      	orrs	r3, r2
 80042de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042e0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80042e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80042e6:	0852      	lsrs	r2, r2, #1
 80042e8:	3a01      	subs	r2, #1
 80042ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80042f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80042f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042f8:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 80042fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042fc:	6813      	ldr	r3, [r2, #0]
 80042fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fc ff9e 	bl	8001244 <HAL_GetTick>
 8004308:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004312:	d106      	bne.n	8004322 <HAL_RCC_OscConfig+0x49a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7fc ff96 	bl	8001244 <HAL_GetTick>
 8004318:	1b00      	subs	r0, r0, r4
 800431a:	2802      	cmp	r0, #2
 800431c:	d9f5      	bls.n	800430a <HAL_RCC_OscConfig+0x482>
          {
            return HAL_TIMEOUT;
 800431e:	2003      	movs	r0, #3
 8004320:	e01e      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004322:	2000      	movs	r0, #0
 8004324:	e01c      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_PLL_DISABLE();
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 8004328:	6813      	ldr	r3, [r2, #0]
 800432a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800432e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004330:	f7fc ff88 	bl	8001244 <HAL_GetTick>
 8004334:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <HAL_RCC_OscConfig+0x4e0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800433e:	d006      	beq.n	800434e <HAL_RCC_OscConfig+0x4c6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fc ff80 	bl	8001244 <HAL_GetTick>
 8004344:	1b00      	subs	r0, r0, r4
 8004346:	2802      	cmp	r0, #2
 8004348:	d9f5      	bls.n	8004336 <HAL_RCC_OscConfig+0x4ae>
            return HAL_TIMEOUT;
 800434a:	2003      	movs	r0, #3
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 800434e:	2000      	movs	r0, #0
 8004350:	e006      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
    return HAL_ERROR;
 8004352:	2001      	movs	r0, #1
}
 8004354:	4770      	bx	lr
        return HAL_ERROR;
 8004356:	2001      	movs	r0, #1
 8004358:	e002      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 800435a:	2001      	movs	r0, #1
 800435c:	e000      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 800435e:	2000      	movs	r0, #0
}
 8004360:	b002      	add	sp, #8
 8004362:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004364:	2001      	movs	r0, #1
 8004366:	e7fb      	b.n	8004360 <HAL_RCC_OscConfig+0x4d8>
 8004368:	40023800 	.word	0x40023800
 800436c:	40007000 	.word	0x40007000
 8004370:	08019aec 	.word	0x08019aec

08004374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004376:	4b25      	ldr	r3, [pc, #148]	; (800440c <HAL_RCC_GetSysClockFreq+0x98>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d03f      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x8e>
 8004382:	2b08      	cmp	r3, #8
 8004384:	d13f      	bne.n	8004406 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004386:	4b21      	ldr	r3, [pc, #132]	; (800440c <HAL_RCC_GetSysClockFreq+0x98>)
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004394:	d012      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCC_GetSysClockFreq+0x98>)
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800439e:	481c      	ldr	r0, [pc, #112]	; (8004410 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043a0:	2300      	movs	r3, #0
 80043a2:	fba1 0100 	umull	r0, r1, r1, r0
 80043a6:	f7fc fd67 	bl	8000e78 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80043aa:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_RCC_GetSysClockFreq+0x98>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80043b2:	3301      	adds	r3, #1
 80043b4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80043b6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80043ba:	e025      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_RCC_GetSysClockFreq+0x98>)
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80043c4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80043c8:	ebb1 000c 	subs.w	r0, r1, ip
 80043cc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80043d0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80043d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043d8:	0181      	lsls	r1, r0, #6
 80043da:	1a09      	subs	r1, r1, r0
 80043dc:	eb63 030e 	sbc.w	r3, r3, lr
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	00c9      	lsls	r1, r1, #3
 80043e8:	eb11 0c0c 	adds.w	ip, r1, ip
 80043ec:	f143 0300 	adc.w	r3, r3, #0
 80043f0:	0299      	lsls	r1, r3, #10
 80043f2:	2300      	movs	r3, #0
 80043f4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80043f8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80043fc:	f7fc fd3c 	bl	8000e78 <__aeabi_uldivmod>
 8004400:	e7d3      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8004402:	4803      	ldr	r0, [pc, #12]	; (8004410 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004404:	e000      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004406:	4803      	ldr	r0, [pc, #12]	; (8004414 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004408:	bd08      	pop	{r3, pc}
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800
 8004410:	017d7840 	.word	0x017d7840
 8004414:	00f42400 	.word	0x00f42400

08004418 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004418:	2800      	cmp	r0, #0
 800441a:	f000 80fe 	beq.w	800461a <HAL_RCC_ClockConfig+0x202>
{
 800441e:	b570      	push	{r4, r5, r6, lr}
 8004420:	460d      	mov	r5, r1
 8004422:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004424:	6803      	ldr	r3, [r0, #0]
 8004426:	3b01      	subs	r3, #1
 8004428:	2b0e      	cmp	r3, #14
 800442a:	d86e      	bhi.n	800450a <HAL_RCC_ClockConfig+0xf2>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800442c:	2d0f      	cmp	r5, #15
 800442e:	d872      	bhi.n	8004516 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004430:	4b7e      	ldr	r3, [pc, #504]	; (800462c <HAL_RCC_ClockConfig+0x214>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	42ab      	cmp	r3, r5
 800443a:	d20b      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443c:	4a7b      	ldr	r2, [pc, #492]	; (800462c <HAL_RCC_ClockConfig+0x214>)
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	f023 030f 	bic.w	r3, r3, #15
 8004444:	432b      	orrs	r3, r5
 8004446:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004448:	6813      	ldr	r3, [r2, #0]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	42ab      	cmp	r3, r5
 8004450:	f040 80e5 	bne.w	800461e <HAL_RCC_ClockConfig+0x206>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	f013 0f02 	tst.w	r3, #2
 800445a:	d02a      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	f013 0f04 	tst.w	r3, #4
 8004460:	d004      	beq.n	800446c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004462:	4a73      	ldr	r2, [pc, #460]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 8004464:	6893      	ldr	r3, [r2, #8]
 8004466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800446a:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	f013 0f08 	tst.w	r3, #8
 8004472:	d004      	beq.n	800447e <HAL_RCC_ClockConfig+0x66>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004474:	4a6e      	ldr	r2, [pc, #440]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 8004476:	6893      	ldr	r3, [r2, #8]
 8004478:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800447c:	6093      	str	r3, [r2, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800447e:	68a3      	ldr	r3, [r4, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf18      	it	ne
 8004484:	2b80      	cmpne	r3, #128	; 0x80
 8004486:	d00d      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x8c>
 8004488:	2b90      	cmp	r3, #144	; 0x90
 800448a:	d00b      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x8c>
 800448c:	2ba0      	cmp	r3, #160	; 0xa0
 800448e:	d009      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x8c>
 8004490:	2bb0      	cmp	r3, #176	; 0xb0
 8004492:	d007      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x8c>
 8004494:	2bc0      	cmp	r3, #192	; 0xc0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x8c>
 8004498:	2bd0      	cmp	r3, #208	; 0xd0
 800449a:	d003      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x8c>
 800449c:	2be0      	cmp	r3, #224	; 0xe0
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x8c>
 80044a0:	2bf0      	cmp	r3, #240	; 0xf0
 80044a2:	d13e      	bne.n	8004522 <HAL_RCC_ClockConfig+0x10a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4a62      	ldr	r2, [pc, #392]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 80044a6:	6893      	ldr	r3, [r2, #8]
 80044a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ac:	68a1      	ldr	r1, [r4, #8]
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	f013 0f01 	tst.w	r3, #1
 80044b8:	d04d      	beq.n	8004556 <HAL_RCC_ClockConfig+0x13e>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80044ba:	6863      	ldr	r3, [r4, #4]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d836      	bhi.n	800452e <HAL_RCC_ClockConfig+0x116>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c0:	6863      	ldr	r3, [r4, #4]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d039      	beq.n	800453a <HAL_RCC_ClockConfig+0x122>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d03e      	beq.n	8004548 <HAL_RCC_ClockConfig+0x130>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ca:	4a59      	ldr	r2, [pc, #356]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	f012 0f02 	tst.w	r2, #2
 80044d2:	f000 80a6 	beq.w	8004622 <HAL_RCC_ClockConfig+0x20a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d6:	4956      	ldr	r1, [pc, #344]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 80044d8:	688a      	ldr	r2, [r1, #8]
 80044da:	f022 0203 	bic.w	r2, r2, #3
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80044e2:	f7fc feaf 	bl	8001244 <HAL_GetTick>
 80044e6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e8:	4b51      	ldr	r3, [pc, #324]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	6862      	ldr	r2, [r4, #4]
 80044f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80044f6:	d02e      	beq.n	8004556 <HAL_RCC_ClockConfig+0x13e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f8:	f7fc fea4 	bl	8001244 <HAL_GetTick>
 80044fc:	1b80      	subs	r0, r0, r6
 80044fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004502:	4298      	cmp	r0, r3
 8004504:	d9f0      	bls.n	80044e8 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8004506:	2003      	movs	r0, #3
 8004508:	e07a      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800450a:	f240 21ca 	movw	r1, #714	; 0x2ca
 800450e:	4849      	ldr	r0, [pc, #292]	; (8004634 <HAL_RCC_ClockConfig+0x21c>)
 8004510:	f00f ffdc 	bl	80144cc <assert_failed>
 8004514:	e78a      	b.n	800442c <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004516:	f240 21cb 	movw	r1, #715	; 0x2cb
 800451a:	4846      	ldr	r0, [pc, #280]	; (8004634 <HAL_RCC_ClockConfig+0x21c>)
 800451c:	f00f ffd6 	bl	80144cc <assert_failed>
 8004520:	e786      	b.n	8004430 <HAL_RCC_ClockConfig+0x18>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004522:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004526:	4843      	ldr	r0, [pc, #268]	; (8004634 <HAL_RCC_ClockConfig+0x21c>)
 8004528:	f00f ffd0 	bl	80144cc <assert_failed>
 800452c:	e7ba      	b.n	80044a4 <HAL_RCC_ClockConfig+0x8c>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800452e:	f240 21f6 	movw	r1, #758	; 0x2f6
 8004532:	4840      	ldr	r0, [pc, #256]	; (8004634 <HAL_RCC_ClockConfig+0x21c>)
 8004534:	f00f ffca 	bl	80144cc <assert_failed>
 8004538:	e7c2      	b.n	80044c0 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4a3d      	ldr	r2, [pc, #244]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004542:	d1c8      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xbe>
        return HAL_ERROR;
 8004544:	2001      	movs	r0, #1
 8004546:	e05b      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004548:	4a39      	ldr	r2, [pc, #228]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004550:	d1c1      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xbe>
        return HAL_ERROR;
 8004552:	2001      	movs	r0, #1
 8004554:	e054      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004556:	4b35      	ldr	r3, [pc, #212]	; (800462c <HAL_RCC_ClockConfig+0x214>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	42ab      	cmp	r3, r5
 8004560:	d90a      	bls.n	8004578 <HAL_RCC_ClockConfig+0x160>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4a32      	ldr	r2, [pc, #200]	; (800462c <HAL_RCC_ClockConfig+0x214>)
 8004564:	6813      	ldr	r3, [r2, #0]
 8004566:	f023 030f 	bic.w	r3, r3, #15
 800456a:	432b      	orrs	r3, r5
 800456c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	6813      	ldr	r3, [r2, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	42ab      	cmp	r3, r5
 8004576:	d156      	bne.n	8004626 <HAL_RCC_ClockConfig+0x20e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	f013 0f04 	tst.w	r3, #4
 800457e:	d015      	beq.n	80045ac <HAL_RCC_ClockConfig+0x194>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004580:	68e3      	ldr	r3, [r4, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf18      	it	ne
 8004586:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 800458a:	d008      	beq.n	800459e <HAL_RCC_ClockConfig+0x186>
 800458c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004590:	d005      	beq.n	800459e <HAL_RCC_ClockConfig+0x186>
 8004592:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004596:	d002      	beq.n	800459e <HAL_RCC_ClockConfig+0x186>
 8004598:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800459c:	d131      	bne.n	8004602 <HAL_RCC_ClockConfig+0x1ea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800459e:	4a24      	ldr	r2, [pc, #144]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 80045a0:	6893      	ldr	r3, [r2, #8]
 80045a2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80045a6:	68e1      	ldr	r1, [r4, #12]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	f013 0f08 	tst.w	r3, #8
 80045b2:	d016      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x1ca>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf18      	it	ne
 80045ba:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 80045be:	d008      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x1ba>
 80045c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045c4:	d005      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x1ba>
 80045c6:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80045ca:	d002      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x1ba>
 80045cc:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80045d0:	d11d      	bne.n	800460e <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045d2:	4a17      	ldr	r2, [pc, #92]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 80045d4:	6893      	ldr	r3, [r2, #8]
 80045d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80045da:	6921      	ldr	r1, [r4, #16]
 80045dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80045e0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e2:	f7ff fec7 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_RCC_ClockConfig+0x218>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80045ee:	4a12      	ldr	r2, [pc, #72]	; (8004638 <HAL_RCC_ClockConfig+0x220>)
 80045f0:	5cd3      	ldrb	r3, [r2, r3]
 80045f2:	40d8      	lsrs	r0, r3
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_RCC_ClockConfig+0x224>)
 80045f6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80045f8:	2000      	movs	r0, #0
 80045fa:	f7fc fddf 	bl	80011bc <HAL_InitTick>
  return HAL_OK;
 80045fe:	2000      	movs	r0, #0
}
 8004600:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004602:	f240 3133 	movw	r1, #819	; 0x333
 8004606:	480b      	ldr	r0, [pc, #44]	; (8004634 <HAL_RCC_ClockConfig+0x21c>)
 8004608:	f00f ff60 	bl	80144cc <assert_failed>
 800460c:	e7c7      	b.n	800459e <HAL_RCC_ClockConfig+0x186>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800460e:	f240 313a 	movw	r1, #826	; 0x33a
 8004612:	4808      	ldr	r0, [pc, #32]	; (8004634 <HAL_RCC_ClockConfig+0x21c>)
 8004614:	f00f ff5a 	bl	80144cc <assert_failed>
 8004618:	e7db      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ba>
    return HAL_ERROR;
 800461a:	2001      	movs	r0, #1
}
 800461c:	4770      	bx	lr
      return HAL_ERROR;
 800461e:	2001      	movs	r0, #1
 8004620:	e7ee      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
 8004622:	2001      	movs	r0, #1
 8004624:	e7ec      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e8>
      return HAL_ERROR;
 8004626:	2001      	movs	r0, #1
 8004628:	e7ea      	b.n	8004600 <HAL_RCC_ClockConfig+0x1e8>
 800462a:	bf00      	nop
 800462c:	40023c00 	.word	0x40023c00
 8004630:	40023800 	.word	0x40023800
 8004634:	08019aec 	.word	0x08019aec
 8004638:	0801ea68 	.word	0x0801ea68
 800463c:	200000a8 	.word	0x200000a8

08004640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004642:	b083      	sub	sp, #12
 8004644:	4604      	mov	r4, r0
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004646:	6802      	ldr	r2, [r0, #0]
 8004648:	4b90      	ldr	r3, [pc, #576]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80fc 	beq.w	800484a <HAL_RCCEx_PeriphCLKConfig+0x20a>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004652:	6826      	ldr	r6, [r4, #0]
 8004654:	f016 0601 	ands.w	r6, r6, #1
 8004658:	d014      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800465a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf18      	it	ne
 8004660:	f5b3 0f00 	cmpne.w	r3, #8388608	; 0x800000
 8004664:	f040 80f6 	bne.w	8004854 <HAL_RCCEx_PeriphCLKConfig+0x214>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004668:	4b89      	ldr	r3, [pc, #548]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004670:	609a      	str	r2, [r3, #8]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004676:	430a      	orrs	r2, r1
 8004678:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800467a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80ee 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x21e>
  uint32_t plli2sused = 0;
 8004682:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004684:	6825      	ldr	r5, [r4, #0]
 8004686:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 800468a:	d01b      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800468c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	bf18      	it	ne
 8004692:	f5b3 1f80 	cmpne.w	r3, #1048576	; 0x100000
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800469c:	f040 80e1 	bne.w	8004862 <HAL_RCCEx_PeriphCLKConfig+0x222>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046a0:	4a7b      	ldr	r2, [pc, #492]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046a2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80046a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80046aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80046ac:	430b      	orrs	r3, r1
 80046ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b8:	f000 80d8 	beq.w	800486c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80d7 	beq.w	8004870 <HAL_RCCEx_PeriphCLKConfig+0x230>
  uint32_t pllsaiused = 0;
 80046c2:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80046ca:	d019      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80046cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf18      	it	ne
 80046d2:	f5b3 0f80 	cmpne.w	r3, #4194304	; 0x400000
 80046d6:	d003      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80046d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046dc:	f040 80ca 	bne.w	8004874 <HAL_RCCEx_PeriphCLKConfig+0x234>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046e0:	4a6b      	ldr	r2, [pc, #428]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046e2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80046e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80046ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80046ec:	430b      	orrs	r3, r1
 80046ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f8:	f000 80c1 	beq.w	800487e <HAL_RCCEx_PeriphCLKConfig+0x23e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046fc:	b903      	cbnz	r3, 8004700 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      pllsaiused = 1;
 80046fe:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004706:	d000      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
      plli2sused = 1;
 8004708:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800470a:	f013 0f20 	tst.w	r3, #32
 800470e:	f000 80f6 	beq.w	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004712:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004718:	bf18      	it	ne
 800471a:	f5b3 7f00 	cmpne.w	r3, #512	; 0x200
 800471e:	d076      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004720:	4a5c      	ldr	r2, [pc, #368]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d073      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004726:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800472a:	4293      	cmp	r3, r2
 800472c:	d06f      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800472e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004732:	4293      	cmp	r3, r2
 8004734:	d06b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004736:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800473a:	4293      	cmp	r3, r2
 800473c:	d067      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800473e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004742:	4293      	cmp	r3, r2
 8004744:	d063      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004746:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800474a:	4293      	cmp	r3, r2
 800474c:	d05f      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800474e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004752:	4293      	cmp	r3, r2
 8004754:	d05b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004756:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800475a:	4293      	cmp	r3, r2
 800475c:	d057      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800475e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004762:	4293      	cmp	r3, r2
 8004764:	d053      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004766:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800476a:	4293      	cmp	r3, r2
 800476c:	d04f      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800476e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004772:	4293      	cmp	r3, r2
 8004774:	d04b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004776:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800477a:	4293      	cmp	r3, r2
 800477c:	d047      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800477e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004782:	4293      	cmp	r3, r2
 8004784:	d043      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004786:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800478a:	4293      	cmp	r3, r2
 800478c:	d03f      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800478e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004792:	4293      	cmp	r3, r2
 8004794:	d03b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004796:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800479a:	4293      	cmp	r3, r2
 800479c:	d037      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800479e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d033      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047a6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02f      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047ae:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047b6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d027      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047be:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d023      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047c6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01f      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047ce:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047d6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047da:	4293      	cmp	r3, r2
 80047dc:	d017      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047de:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047e6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00f      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047ee:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047f6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80047fe:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004806:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800480a:	4293      	cmp	r3, r2
 800480c:	d139      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x242>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004812:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	9b01      	ldr	r3, [sp, #4]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004822:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004824:	6813      	ldr	r3, [r2, #0]
 8004826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482c:	f7fc fd0a 	bl	8001244 <HAL_GetTick>
 8004830:	4607      	mov	r7, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004832:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f413 7f80 	tst.w	r3, #256	; 0x100
 800483a:	d131      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483c:	f7fc fd02 	bl	8001244 <HAL_GetTick>
 8004840:	1bc0      	subs	r0, r0, r7
 8004842:	2864      	cmp	r0, #100	; 0x64
 8004844:	d9f5      	bls.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        return HAL_TIMEOUT;
 8004846:	2003      	movs	r0, #3
 8004848:	e200      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800484a:	2174      	movs	r1, #116	; 0x74
 800484c:	4813      	ldr	r0, [pc, #76]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800484e:	f00f fe3d 	bl	80144cc <assert_failed>
 8004852:	e6fe      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x12>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004854:	217a      	movs	r1, #122	; 0x7a
 8004856:	4811      	ldr	r0, [pc, #68]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004858:	f00f fe38 	bl	80144cc <assert_failed>
 800485c:	e704      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x28>
      plli2sused = 1;
 800485e:	2601      	movs	r6, #1
 8004860:	e710      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x44>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004862:	218a      	movs	r1, #138	; 0x8a
 8004864:	480d      	ldr	r0, [pc, #52]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004866:	f00f fe31 	bl	80144cc <assert_failed>
 800486a:	e719      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 800486c:	2601      	movs	r6, #1
 800486e:	e725      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      pllsaiused = 1;
 8004870:	2501      	movs	r5, #1
 8004872:	e727      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004874:	219e      	movs	r1, #158	; 0x9e
 8004876:	4809      	ldr	r0, [pc, #36]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004878:	f00f fe28 	bl	80144cc <assert_failed>
 800487c:	e730      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      plli2sused = 1;
 800487e:	2601      	movs	r6, #1
 8004880:	e73c      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004882:	21b9      	movs	r1, #185	; 0xb9
 8004884:	4805      	ldr	r0, [pc, #20]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004886:	f00f fe21 	bl	80144cc <assert_failed>
 800488a:	e7c0      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800488c:	01fffff9 	.word	0x01fffff9
 8004890:	40023800 	.word	0x40023800
 8004894:	00020300 	.word	0x00020300
 8004898:	40007000 	.word	0x40007000
 800489c:	08019b24 	.word	0x08019b24
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048a0:	4bb1      	ldr	r3, [pc, #708]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048a4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80048a8:	d016      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80048aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048ac:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d011      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048b4:	4bac      	ldr	r3, [pc, #688]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80048b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80048be:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80048c2:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80048c6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80048ca:	6719      	str	r1, [r3, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	f013 0f01 	tst.w	r3, #1
 80048d4:	f040 81bc 	bne.w	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x610>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048da:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80048de:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80048e2:	f000 81c7 	beq.w	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80048e6:	4aa0      	ldr	r2, [pc, #640]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80048e8:	6893      	ldr	r3, [r2, #8]
 80048ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048ee:	6093      	str	r3, [r2, #8]
 80048f0:	499d      	ldr	r1, [pc, #628]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80048f2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80048f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80048fa:	4313      	orrs	r3, r2
 80048fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	f013 0f10 	tst.w	r3, #16
 8004904:	d013      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf18      	it	ne
 800490c:	f1b3 7f80 	cmpne.w	r3, #16777216	; 0x1000000
 8004910:	f040 81b9 	bne.w	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004914:	4b94      	ldr	r3, [pc, #592]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004916:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800491a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800491e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004922:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004928:	430a      	orrs	r2, r1
 800492a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004934:	d012      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf18      	it	ne
 800493c:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8004940:	d003      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004946:	f040 81a3 	bne.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x650>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800494a:	4a87      	ldr	r2, [pc, #540]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800494c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004950:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004954:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004956:	430b      	orrs	r3, r1
 8004958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004962:	d012      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004964:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf18      	it	ne
 800496a:	f5b3 2f80 	cmpne.w	r3, #262144	; 0x40000
 800496e:	d003      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8004970:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004974:	f040 8191 	bne.w	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x65a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004978:	4a7b      	ldr	r2, [pc, #492]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800497a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800497e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004982:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004984:	430b      	orrs	r3, r1
 8004986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004990:	d012      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004992:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf18      	it	ne
 8004998:	f5b3 1f80 	cmpne.w	r3, #1048576	; 0x100000
 800499c:	d003      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 800499e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a2:	f040 8180 	bne.w	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x666>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049a6:	4a70      	ldr	r2, [pc, #448]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80049a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049b0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80049b2:	430b      	orrs	r3, r1
 80049b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80049be:	d012      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80049c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf18      	it	ne
 80049c6:	f5b3 0f80 	cmpne.w	r3, #4194304	; 0x400000
 80049ca:	d003      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80049cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049d0:	f040 816f 	bne.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x672>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049d4:	4a64      	ldr	r2, [pc, #400]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80049d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80049de:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80049e0:	430b      	orrs	r3, r1
 80049e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049ec:	d010      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80049ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	bf18      	it	ne
 80049f4:	2b01      	cmpne	r3, #1
 80049f6:	d902      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x3be>
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	f040 8160 	bne.w	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x67e>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049fe:	4a5a      	ldr	r2, [pc, #360]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a04:	f023 0303 	bic.w	r3, r3, #3
 8004a08:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a16:	d012      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004a18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bf18      	it	ne
 8004a1e:	2b04      	cmpne	r3, #4
 8004a20:	d004      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004a22:	2b0c      	cmp	r3, #12
 8004a24:	d002      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	f040 814f 	bne.w	8004cca <HAL_RCCEx_PeriphCLKConfig+0x68a>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a2c:	4a4e      	ldr	r2, [pc, #312]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a32:	f023 030c 	bic.w	r3, r3, #12
 8004a36:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a44:	d012      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004a46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf18      	it	ne
 8004a4c:	2b10      	cmpne	r3, #16
 8004a4e:	d004      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a50:	2b30      	cmp	r3, #48	; 0x30
 8004a52:	d002      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	f040 813e 	bne.w	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x696>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a5a:	4a43      	ldr	r2, [pc, #268]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a5c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a60:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a64:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a66:	430b      	orrs	r3, r1
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a72:	d012      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004a74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf18      	it	ne
 8004a7a:	2b40      	cmpne	r3, #64	; 0x40
 8004a7c:	d004      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8004a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a80:	d002      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8004a82:	2b80      	cmp	r3, #128	; 0x80
 8004a84:	f040 812d 	bne.w	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a88:	4a37      	ldr	r2, [pc, #220]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a92:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a94:	430b      	orrs	r3, r1
 8004a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004aa0:	d015      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004aa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf18      	it	ne
 8004aa8:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 8004aac:	d006      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab2:	d003      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab8:	f040 8119 	bne.w	8004cee <HAL_RCCEx_PeriphCLKConfig+0x6ae>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004abc:	4a2a      	ldr	r2, [pc, #168]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004abe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ad4:	d015      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf18      	it	ne
 8004adc:	f5b3 6f80 	cmpne.w	r3, #1024	; 0x400
 8004ae0:	d006      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004ae2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aec:	f040 8105 	bne.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x6ba>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004af2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004af6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004afa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004afc:	430b      	orrs	r3, r1
 8004afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004b08:	d015      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004b0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf18      	it	ne
 8004b10:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 8004b14:	d006      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b1a:	d003      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b20:	f040 80f1 	bne.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x6c6>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b24:	4a10      	ldr	r2, [pc, #64]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004b26:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b2e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004b30:	430b      	orrs	r3, r1
 8004b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004b3c:	d019      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004b3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf18      	it	ne
 8004b44:	f5b3 4f80 	cmpne.w	r3, #16384	; 0x4000
 8004b48:	d006      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b4e:	d003      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b54:	f040 80dd 	bne.w	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6d2>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b58:	4a03      	ldr	r2, [pc, #12]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004b5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004b62:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004b64:	e002      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b78:	d00f      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004b7a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b80:	bf18      	it	ne
 8004b82:	2b00      	cmpne	r3, #0
 8004b84:	f040 80cb 	bne.w	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x6de>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b88:	4a7c      	ldr	r2, [pc, #496]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004b8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004b8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b92:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004b94:	430b      	orrs	r3, r1
 8004b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004ba0:	d014      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x58c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004ba2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba8:	bf18      	it	ne
 8004baa:	2b00      	cmpne	r3, #0
 8004bac:	f040 80bd 	bne.w	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bb0:	4a72      	ldr	r2, [pc, #456]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004bb2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bb6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004bba:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004bc2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc8:	f000 80b5 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	f013 0f08 	tst.w	r3, #8
 8004bd2:	d000      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    pllsaiused = 1;
 8004bd4:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bd6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004bda:	d015      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004bdc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf18      	it	ne
 8004be2:	f1b3 7f80 	cmpne.w	r3, #16777216	; 0x1000000
 8004be6:	d006      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8004be8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8004bee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bf2:	f040 80a2 	bne.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x6fa>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bf6:	4a61      	ldr	r2, [pc, #388]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004bf8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004bfc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004c00:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004c02:	430b      	orrs	r3, r1
 8004c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004c0e:	d011      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004c10:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c18:	bf18      	it	ne
 8004c1a:	2b00      	cmpne	r3, #0
 8004c1c:	f040 8093 	bne.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x706>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c20:	4a56      	ldr	r2, [pc, #344]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004c22:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004c34:	2e00      	cmp	r6, #0
 8004c36:	f040 808c 	bne.w	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x712>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c40:	f000 8087 	beq.w	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x712>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c44:	2d01      	cmp	r5, #1
 8004c46:	f000 816f 	beq.w	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004c4a:	2000      	movs	r0, #0
}
 8004c4c:	b003      	add	sp, #12
 8004c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8004c50:	f7fc faf8 	bl	8001244 <HAL_GetTick>
 8004c54:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	4b49      	ldr	r3, [pc, #292]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	f013 0f02 	tst.w	r3, #2
 8004c5e:	f47f ae3b 	bne.w	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fc faef 	bl	8001244 <HAL_GetTick>
 8004c66:	1bc0      	subs	r0, r0, r7
 8004c68:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c6c:	4298      	cmp	r0, r3
 8004c6e:	d9f2      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x616>
            return HAL_TIMEOUT;
 8004c70:	2003      	movs	r0, #3
 8004c72:	e7eb      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c74:	4841      	ldr	r0, [pc, #260]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004c76:	6882      	ldr	r2, [r0, #8]
 8004c78:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004c7c:	4940      	ldr	r1, [pc, #256]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8004c7e:	4019      	ands	r1, r3
 8004c80:	430a      	orrs	r2, r1
 8004c82:	6082      	str	r2, [r0, #8]
 8004c84:	e634      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004c86:	21f3      	movs	r1, #243	; 0xf3
 8004c88:	483e      	ldr	r0, [pc, #248]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004c8a:	f00f fc1f 	bl	80144cc <assert_failed>
 8004c8e:	e641      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004c90:	21fd      	movs	r1, #253	; 0xfd
 8004c92:	483c      	ldr	r0, [pc, #240]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004c94:	f00f fc1a 	bl	80144cc <assert_failed>
 8004c98:	e657      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x30a>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004c9a:	f240 1107 	movw	r1, #263	; 0x107
 8004c9e:	4839      	ldr	r0, [pc, #228]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004ca0:	f00f fc14 	bl	80144cc <assert_failed>
 8004ca4:	e668      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004ca6:	f240 1111 	movw	r1, #273	; 0x111
 8004caa:	4836      	ldr	r0, [pc, #216]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cac:	f00f fc0e 	bl	80144cc <assert_failed>
 8004cb0:	e679      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004cb2:	f240 111b 	movw	r1, #283	; 0x11b
 8004cb6:	4833      	ldr	r0, [pc, #204]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cb8:	f00f fc08 	bl	80144cc <assert_failed>
 8004cbc:	e68a      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004cbe:	f240 1125 	movw	r1, #293	; 0x125
 8004cc2:	4830      	ldr	r0, [pc, #192]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cc4:	f00f fc02 	bl	80144cc <assert_failed>
 8004cc8:	e699      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x3be>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004cca:	f240 112f 	movw	r1, #303	; 0x12f
 8004cce:	482d      	ldr	r0, [pc, #180]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cd0:	f00f fbfc 	bl	80144cc <assert_failed>
 8004cd4:	e6aa      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004cd6:	f240 1139 	movw	r1, #313	; 0x139
 8004cda:	482a      	ldr	r0, [pc, #168]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cdc:	f00f fbf6 	bl	80144cc <assert_failed>
 8004ce0:	e6bb      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004ce2:	f240 1143 	movw	r1, #323	; 0x143
 8004ce6:	4827      	ldr	r0, [pc, #156]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004ce8:	f00f fbf0 	bl	80144cc <assert_failed>
 8004cec:	e6cc      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x448>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004cee:	f240 114d 	movw	r1, #333	; 0x14d
 8004cf2:	4824      	ldr	r0, [pc, #144]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004cf4:	f00f fbea 	bl	80144cc <assert_failed>
 8004cf8:	e6e0      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004cfa:	f240 1157 	movw	r1, #343	; 0x157
 8004cfe:	4821      	ldr	r0, [pc, #132]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d00:	f00f fbe4 	bl	80144cc <assert_failed>
 8004d04:	e6f4      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004d06:	f240 1161 	movw	r1, #353	; 0x161
 8004d0a:	481e      	ldr	r0, [pc, #120]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d0c:	f00f fbde 	bl	80144cc <assert_failed>
 8004d10:	e708      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004d12:	f240 116b 	movw	r1, #363	; 0x16b
 8004d16:	481b      	ldr	r0, [pc, #108]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d18:	f00f fbd8 	bl	80144cc <assert_failed>
 8004d1c:	e71c      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x518>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004d1e:	f240 1175 	movw	r1, #373	; 0x175
 8004d22:	4818      	ldr	r0, [pc, #96]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d24:	f00f fbd2 	bl	80144cc <assert_failed>
 8004d28:	e72e      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x548>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004d2a:	f240 117f 	movw	r1, #383	; 0x17f
 8004d2e:	4815      	ldr	r0, [pc, #84]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d30:	f00f fbcc 	bl	80144cc <assert_failed>
 8004d34:	e73c      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x570>
      pllsaiused = 1;
 8004d36:	2501      	movs	r5, #1
 8004d38:	e748      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x58c>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004d3a:	f240 1197 	movw	r1, #407	; 0x197
 8004d3e:	4811      	ldr	r0, [pc, #68]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d40:	f00f fbc4 	bl	80144cc <assert_failed>
 8004d44:	e757      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004d46:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004d4a:	480e      	ldr	r0, [pc, #56]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004d4c:	f00f fbbe 	bl	80144cc <assert_failed>
 8004d50:	e766      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_PLLI2S_DISABLE();
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004d54:	6813      	ldr	r3, [r2, #0]
 8004d56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d5a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004d5c:	f7fc fa72 	bl	8001244 <HAL_GetTick>
 8004d60:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004d6a:	d00d      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d6c:	f7fc fa6a 	bl	8001244 <HAL_GetTick>
 8004d70:	1b80      	subs	r0, r0, r6
 8004d72:	2864      	cmp	r0, #100	; 0x64
 8004d74:	d9f5      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x722>
        return HAL_TIMEOUT;
 8004d76:	2003      	movs	r0, #3
 8004d78:	e768      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	0ffffcff 	.word	0x0ffffcff
 8004d84:	08019b24 	.word	0x08019b24
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004d88:	6863      	ldr	r3, [r4, #4]
 8004d8a:	3b32      	subs	r3, #50	; 0x32
 8004d8c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004d90:	f200 809a 	bhi.w	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x888>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	f013 0f01 	tst.w	r3, #1
 8004d9a:	d018      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004d9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d9e:	b9b3      	cbnz	r3, 8004dce <HAL_RCCEx_PeriphCLKConfig+0x78e>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	3b02      	subs	r3, #2
 8004da4:	2b05      	cmp	r3, #5
 8004da6:	f200 8095 	bhi.w	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x894>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004daa:	4ab1      	ldr	r2, [pc, #708]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004dac:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004db0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004db4:	6860      	ldr	r0, [r4, #4]
 8004db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004dbe:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	68a1      	ldr	r1, [r4, #8]
 8004dc6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004dca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004dd4:	d003      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004dd6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004dd8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004ddc:	d006      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8004dde:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004de2:	d026      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004de4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dea:	d122      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004dec:	68e3      	ldr	r3, [r4, #12]
 8004dee:	3b02      	subs	r3, #2
 8004df0:	2b0d      	cmp	r3, #13
 8004df2:	d875      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004df6:	3b01      	subs	r3, #1
 8004df8:	2b1f      	cmp	r3, #31
 8004dfa:	d877      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dfc:	4a9c      	ldr	r2, [pc, #624]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004dfe:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e02:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e06:	6860      	ldr	r0, [r4, #4]
 8004e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e0c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004e10:	68e0      	ldr	r0, [r4, #12]
 8004e12:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004e16:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e20:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004e24:	f023 031f 	bic.w	r3, r3, #31
 8004e28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e2a:	3901      	subs	r1, #1
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004e38:	d014      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x824>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d85b      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e40:	4a8b      	ldr	r2, [pc, #556]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004e42:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e46:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e4a:	6866      	ldr	r6, [r4, #4]
 8004e4c:	6923      	ldr	r3, [r4, #16]
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004e54:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004e58:	4303      	orrs	r3, r0
 8004e5a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e6a:	d018      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x85e>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d848      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004e72:	68a3      	ldr	r3, [r4, #8]
 8004e74:	3b02      	subs	r3, #2
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d84a      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	3b02      	subs	r3, #2
 8004e7e:	2b0d      	cmp	r3, #13
 8004e80:	d84c      	bhi.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e82:	6862      	ldr	r2, [r4, #4]
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004e8c:	68e2      	ldr	r2, [r4, #12]
 8004e8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e92:	68a2      	ldr	r2, [r4, #8]
 8004e94:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004e98:	4a75      	ldr	r2, [pc, #468]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004e9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004e9e:	4a74      	ldr	r2, [pc, #464]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004ea0:	6813      	ldr	r3, [r2, #0]
 8004ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ea6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004ea8:	f7fc f9cc 	bl	8001244 <HAL_GetTick>
 8004eac:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004eae:	4b70      	ldr	r3, [pc, #448]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004eb6:	f47f aec5 	bne.w	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x604>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eba:	f7fc f9c3 	bl	8001244 <HAL_GetTick>
 8004ebe:	1b80      	subs	r0, r0, r6
 8004ec0:	2864      	cmp	r0, #100	; 0x64
 8004ec2:	d9f4      	bls.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x86e>
        return HAL_TIMEOUT;
 8004ec4:	2003      	movs	r0, #3
 8004ec6:	e6c1      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004ec8:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004ecc:	4869      	ldr	r0, [pc, #420]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004ece:	f00f fafd 	bl	80144cc <assert_failed>
 8004ed2:	e75f      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x754>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004ed4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004ed8:	4866      	ldr	r0, [pc, #408]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004eda:	f00f faf7 	bl	80144cc <assert_failed>
 8004ede:	e764      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x76a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004ee0:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004ee4:	4863      	ldr	r0, [pc, #396]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004ee6:	f00f faf1 	bl	80144cc <assert_failed>
 8004eea:	e783      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004eec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004ef0:	4860      	ldr	r0, [pc, #384]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004ef2:	f00f faeb 	bl	80144cc <assert_failed>
 8004ef6:	e781      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004ef8:	f240 2107 	movw	r1, #519	; 0x207
 8004efc:	485d      	ldr	r0, [pc, #372]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004efe:	f00f fae5 	bl	80144cc <assert_failed>
 8004f02:	e79d      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x800>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004f04:	f240 2116 	movw	r1, #534	; 0x216
 8004f08:	485a      	ldr	r0, [pc, #360]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004f0a:	f00f fadf 	bl	80144cc <assert_failed>
 8004f0e:	e7b0      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004f10:	f240 2117 	movw	r1, #535	; 0x217
 8004f14:	4857      	ldr	r0, [pc, #348]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004f16:	f00f fad9 	bl	80144cc <assert_failed>
 8004f1a:	e7ae      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x83a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004f1c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004f20:	4854      	ldr	r0, [pc, #336]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8004f22:	f00f fad3 	bl	80144cc <assert_failed>
 8004f26:	e7ac      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    __HAL_RCC_PLLSAI_DISABLE();
 8004f28:	4a51      	ldr	r2, [pc, #324]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004f2a:	6813      	ldr	r3, [r2, #0]
 8004f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f30:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004f32:	f7fc f987 	bl	8001244 <HAL_GetTick>
 8004f36:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f38:	4b4d      	ldr	r3, [pc, #308]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004f40:	d006      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f42:	f7fc f97f 	bl	8001244 <HAL_GetTick>
 8004f46:	1b40      	subs	r0, r0, r5
 8004f48:	2864      	cmp	r0, #100	; 0x64
 8004f4a:	d9f5      	bls.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
        return HAL_TIMEOUT;
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	e67d      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004f50:	6963      	ldr	r3, [r4, #20]
 8004f52:	3b32      	subs	r3, #50	; 0x32
 8004f54:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8004f58:	d878      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004f60:	d001      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8004f62:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f64:	b122      	cbz	r2, 8004f70 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8004f66:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004f6a:	d025      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x978>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f6e:	bb1b      	cbnz	r3, 8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x978>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004f70:	69a3      	ldr	r3, [r4, #24]
 8004f72:	3b02      	subs	r3, #2
 8004f74:	2b0d      	cmp	r3, #13
 8004f76:	d86f      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004f78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	2b1f      	cmp	r3, #31
 8004f7e:	d871      	bhi.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xa24>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f80:	4a3b      	ldr	r2, [pc, #236]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004f82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f86:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f8a:	6960      	ldr	r0, [r4, #20]
 8004f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f90:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f94:	69a0      	ldr	r0, [r4, #24]
 8004f96:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004f9a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fa4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004fa8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004fac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004fae:	3901      	subs	r1, #1
 8004fb0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004fb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004fbe:	d003      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004fc0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fc6:	d057      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f013 0f08 	tst.w	r3, #8
 8004fce:	d029      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004fd0:	69e3      	ldr	r3, [r4, #28]
 8004fd2:	3b02      	subs	r3, #2
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d86b      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bf18      	it	ne
 8004fde:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8004fe2:	d005      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8004fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe8:	d002      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8004fea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fee:	d165      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa7c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8004ff2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ff6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ffa:	6960      	ldr	r0, [r4, #20]
 8004ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005000:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005004:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005008:	430b      	orrs	r3, r1
 800500a:	69e1      	ldr	r1, [r4, #28]
 800500c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005014:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005018:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800501c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800501e:	430b      	orrs	r3, r1
 8005020:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005024:	4a12      	ldr	r2, [pc, #72]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800502e:	f7fc f909 	bl	8001244 <HAL_GetTick>
 8005032:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800503c:	d144      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800503e:	f7fc f901 	bl	8001244 <HAL_GetTick>
 8005042:	1b00      	subs	r0, r0, r4
 8005044:	2864      	cmp	r0, #100	; 0x64
 8005046:	d9f5      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        return HAL_TIMEOUT;
 8005048:	2003      	movs	r0, #3
 800504a:	e5ff      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800504c:	f240 2146 	movw	r1, #582	; 0x246
 8005050:	4808      	ldr	r0, [pc, #32]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8005052:	f00f fa3b 	bl	80144cc <assert_failed>
 8005056:	e780      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8005058:	f240 214d 	movw	r1, #589	; 0x24d
 800505c:	4805      	ldr	r0, [pc, #20]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800505e:	f00f fa35 	bl	80144cc <assert_failed>
 8005062:	e789      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x938>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8005064:	f240 214f 	movw	r1, #591	; 0x24f
 8005068:	4802      	ldr	r0, [pc, #8]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 800506a:	f00f fa2f 	bl	80144cc <assert_failed>
 800506e:	e787      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8005070:	40023800 	.word	0x40023800
 8005074:	08019b24 	.word	0x08019b24
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8005078:	6a23      	ldr	r3, [r4, #32]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d812      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800507e:	4a13      	ldr	r2, [pc, #76]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8005080:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005084:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005088:	6965      	ldr	r5, [r4, #20]
 800508a:	6a23      	ldr	r3, [r4, #32]
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005092:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005096:	4303      	orrs	r3, r0
 8005098:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800509c:	430b      	orrs	r3, r1
 800509e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80050a2:	e791      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x988>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80050a4:	f240 2162 	movw	r1, #610	; 0x262
 80050a8:	4809      	ldr	r0, [pc, #36]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 80050aa:	f00f fa0f 	bl	80144cc <assert_failed>
 80050ae:	e7e6      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80050b0:	f240 2171 	movw	r1, #625	; 0x271
 80050b4:	4806      	ldr	r0, [pc, #24]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 80050b6:	f00f fa09 	bl	80144cc <assert_failed>
 80050ba:	e78d      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x998>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80050bc:	f240 2172 	movw	r1, #626	; 0x272
 80050c0:	4803      	ldr	r0, [pc, #12]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 80050c2:	f00f fa03 	bl	80144cc <assert_failed>
 80050c6:	e793      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  return HAL_OK;
 80050c8:	2000      	movs	r0, #0
 80050ca:	e5bf      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80050cc:	40023800 	.word	0x40023800
 80050d0:	08019b24 	.word	0x08019b24

080050d4 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80050d4:	4b56      	ldr	r3, [pc, #344]	; (8005230 <HAL_RCCEx_GetPeriphCLKConfig+0x15c>)
 80050d6:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80050d8:	4b56      	ldr	r3, [pc, #344]	; (8005234 <HAL_RCCEx_GetPeriphCLKConfig+0x160>)
 80050da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80050de:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80050e2:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050e4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80050e8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80050ec:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80050f2:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80050f6:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050f8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80050fc:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005100:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8005102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005106:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800510a:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800510c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005110:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005114:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005116:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800511a:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800511e:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005120:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005124:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005128:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800512a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800512e:	f002 021f 	and.w	r2, r2, #31
 8005132:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8005134:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005138:	f3c2 2204 	ubfx	r2, r2, #8, #5
 800513c:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800513e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005142:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005146:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005148:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800514c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005150:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005152:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005156:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800515a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005162:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005164:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005168:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800516c:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800516e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005172:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8005176:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005178:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800517c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005180:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005182:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005186:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800518a:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800518c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005190:	f002 0203 	and.w	r2, r2, #3
 8005194:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005196:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800519a:	f002 020c 	and.w	r2, r2, #12
 800519e:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80051a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051a4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80051a8:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80051aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051ae:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80051b2:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80051b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051b8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80051bc:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80051be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051c2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80051c6:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80051c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051cc:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80051d0:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80051d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051d6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80051da:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80051dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051e0:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80051e4:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80051e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051ea:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80051ee:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80051f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051f4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80051f8:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80051fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051fe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005202:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005206:	6899      	ldr	r1, [r3, #8]
 8005208:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800520c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800520e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005212:	430a      	orrs	r2, r1
 8005214:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8005216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800521e:	d102      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKConfig+0x152>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8005220:	2300      	movs	r3, #0
 8005222:	6383      	str	r3, [r0, #56]	; 0x38
 8005224:	4770      	bx	lr
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800522a:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	00fffff1 	.word	0x00fffff1
 8005234:	40023800 	.word	0x40023800

08005238 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005238:	4602      	mov	r2, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800523a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800523e:	d004      	beq.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
  uint32_t frequency = 0;
 8005240:	2000      	movs	r0, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005242:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005246:	d062      	beq.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      }
    }
  }

  return frequency;
}
 8005248:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 800524a:	4b61      	ldr	r3, [pc, #388]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800524c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005250:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 8005254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005258:	d02e      	beq.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 800525a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800525e:	d054      	beq.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005260:	b10b      	cbz	r3, 8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 8005262:	2000      	movs	r0, #0
 8005264:	e7ed      	b.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005266:	4b5a      	ldr	r3, [pc, #360]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800526e:	d11b      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005270:	4b57      	ldr	r3, [pc, #348]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 8005278:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800527a:	fbb3 fcfc 	udiv	ip, r3, ip
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800527e:	4954      	ldr	r1, [pc, #336]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005280:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
 8005284:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005288:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800528c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8005290:	fb0c f303 	mul.w	r3, ip, r3
 8005294:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005298:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800529c:	f3c0 2004 	ubfx	r0, r0, #8, #5
 80052a0:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg);
 80052a2:	fbb3 f0f0 	udiv	r0, r3, r0
        break;
 80052a6:	e7cc      	b.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80052a8:	4b49      	ldr	r3, [pc, #292]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 80052b0:	4b49      	ldr	r3, [pc, #292]	; (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80052b2:	fbb3 fcfc 	udiv	ip, r3, ip
 80052b6:	e7e2      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80052b8:	4b45      	ldr	r3, [pc, #276]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80052c0:	d11b      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052c2:	4b43      	ldr	r3, [pc, #268]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 80052ca:	4b42      	ldr	r3, [pc, #264]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80052cc:	fbb3 fcfc 	udiv	ip, r3, ip
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80052d0:	493f      	ldr	r1, [pc, #252]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052d2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
 80052d6:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80052da:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80052de:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80052e2:	fb0c f303 	mul.w	r3, ip, r3
 80052e6:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80052ea:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80052ee:	f000 001f 	and.w	r0, r0, #31
 80052f2:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg);
 80052f4:	fbb3 f0f0 	udiv	r0, r3, r0
        break;
 80052f8:	e7a3      	b.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80052fa:	4b35      	ldr	r3, [pc, #212]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 8005302:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005304:	fbb3 fcfc 	udiv	ip, r3, ip
 8005308:	e7e2      	b.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = EXTERNAL_CLOCK_VALUE;
 800530a:	4834      	ldr	r0, [pc, #208]	; (80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800530c:	e799      	b.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 800530e:	4b30      	ldr	r3, [pc, #192]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005314:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 8005318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800531c:	d02d      	beq.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800531e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005322:	d053      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d18f      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005328:	4b29      	ldr	r3, [pc, #164]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005330:	d11b      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005332:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800533a:	4826      	ldr	r0, [pc, #152]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800533c:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005340:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005342:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005346:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800534a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800534e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005352:	fb01 f000 	mul.w	r0, r1, r0
 8005356:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800535a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800535e:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8005362:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8005364:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8005368:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800536a:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005372:	4819      	ldr	r0, [pc, #100]	; (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005374:	fbb0 f1f1 	udiv	r1, r0, r1
 8005378:	e7e2      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800537a:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005382:	d11b      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005384:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005386:	6859      	ldr	r1, [r3, #4]
 8005388:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800538c:	4811      	ldr	r0, [pc, #68]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800538e:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005394:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005398:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800539c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80053a0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80053a4:	fb01 f000 	mul.w	r0, r1, r0
 80053a8:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80053ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80053b6:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80053ba:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80053bc:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80053c4:	4804      	ldr	r0, [pc, #16]	; (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80053c6:	fbb0 f1f1 	udiv	r1, r0, r1
 80053ca:	e7e2      	b.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        frequency = EXTERNAL_CLOCK_VALUE;
 80053cc:	4803      	ldr	r0, [pc, #12]	; (80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
  return frequency;
 80053ce:	e73b      	b.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80053d0:	40023800 	.word	0x40023800
 80053d4:	00f42400 	.word	0x00f42400
 80053d8:	017d7840 	.word	0x017d7840
 80053dc:	00bb8000 	.word	0x00bb8000

080053e0 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
 80053e0:	2901      	cmp	r1, #1
 80053e2:	d00a      	beq.n	80053fa <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80053e4:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80053e6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80053e8:	2a08      	cmp	r2, #8
 80053ea:	d008      	beq.n	80053fe <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053ec:	6842      	ldr	r2, [r0, #4]
 80053ee:	3a02      	subs	r2, #2
 80053f0:	2a01      	cmp	r2, #1
 80053f2:	d90c      	bls.n	800540e <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80053f4:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 80053f8:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 80053fa:	2309      	movs	r3, #9
 80053fc:	e7f3      	b.n	80053e6 <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80053fe:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005400:	2a01      	cmp	r2, #1
 8005402:	bf18      	it	ne
 8005404:	2a03      	cmpne	r2, #3
 8005406:	d1f1      	bne.n	80053ec <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 8005408:	f043 0310 	orr.w	r3, r3, #16
 800540c:	e7ee      	b.n	80053ec <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800540e:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8005412:	4770      	bx	lr

08005414 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005414:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <SAI_Disable+0x3c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <SAI_Disable+0x40>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	0b1b      	lsrs	r3, r3, #12
 8005420:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005422:	6801      	ldr	r1, [r0, #0]
 8005424:	680a      	ldr	r2, [r1, #0]
 8005426:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800542a:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800542c:	461a      	mov	r2, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b132      	cbz	r2, 8005440 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005432:	6802      	ldr	r2, [r0, #0]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800543a:	d1f7      	bne.n	800542c <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	2000      	movs	r0, #0

  return status;
}
 800543e:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005440:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005448:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 800544c:	2003      	movs	r0, #3
      break;
 800544e:	4770      	bx	lr
 8005450:	200000a8 	.word	0x200000a8
 8005454:	95cbec1b 	.word	0x95cbec1b

08005458 <HAL_SAI_Init>:
  if(hsai == NULL)
 8005458:	2800      	cmp	r0, #0
 800545a:	f000 8256 	beq.w	800590a <HAL_SAI_Init+0x4b2>
{
 800545e:	b538      	push	{r3, r4, r5, lr}
 8005460:	4604      	mov	r4, r0
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 8005462:	6803      	ldr	r3, [r0, #0]
 8005464:	49ad      	ldr	r1, [pc, #692]	; (800571c <HAL_SAI_Init+0x2c4>)
 8005466:	4aae      	ldr	r2, [pc, #696]	; (8005720 <HAL_SAI_Init+0x2c8>)
 8005468:	428b      	cmp	r3, r1
 800546a:	bf18      	it	ne
 800546c:	4293      	cmpne	r3, r2
 800546e:	d00b      	beq.n	8005488 <HAL_SAI_Init+0x30>
 8005470:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <HAL_SAI_Init+0x30>
 8005478:	3220      	adds	r2, #32
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_SAI_Init+0x30>
 800547e:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8005482:	48a8      	ldr	r0, [pc, #672]	; (8005724 <HAL_SAI_Init+0x2cc>)
 8005484:	f00f f822 	bl	80144cc <assert_failed>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 8005488:	69e3      	ldr	r3, [r4, #28]
 800548a:	49a7      	ldr	r1, [pc, #668]	; (8005728 <HAL_SAI_Init+0x2d0>)
 800548c:	4aa7      	ldr	r2, [pc, #668]	; (800572c <HAL_SAI_Init+0x2d4>)
 800548e:	428b      	cmp	r3, r1
 8005490:	bf18      	it	ne
 8005492:	4293      	cmpne	r3, r2
 8005494:	d01b      	beq.n	80054ce <HAL_SAI_Init+0x76>
 8005496:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800549a:	4293      	cmp	r3, r2
 800549c:	d017      	beq.n	80054ce <HAL_SAI_Init+0x76>
 800549e:	f64a 4244 	movw	r2, #44100	; 0xac44
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <HAL_SAI_Init+0x76>
 80054a6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80054aa:	d010      	beq.n	80054ce <HAL_SAI_Init+0x76>
 80054ac:	f245 6222 	movw	r2, #22050	; 0x5622
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00c      	beq.n	80054ce <HAL_SAI_Init+0x76>
 80054b4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80054b8:	d009      	beq.n	80054ce <HAL_SAI_Init+0x76>
 80054ba:	f642 3211 	movw	r2, #11025	; 0x2b11
 80054be:	4293      	cmp	r3, r2
 80054c0:	d005      	beq.n	80054ce <HAL_SAI_Init+0x76>
 80054c2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80054c6:	d002      	beq.n	80054ce <HAL_SAI_Init+0x76>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f040 8165 	bne.w	8005798 <HAL_SAI_Init+0x340>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 80054ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf18      	it	ne
 80054d4:	2b08      	cmpne	r3, #8
 80054d6:	d002      	beq.n	80054de <HAL_SAI_Init+0x86>
 80054d8:	2b04      	cmp	r3, #4
 80054da:	f040 8163 	bne.w	80057a4 <HAL_SAI_Init+0x34c>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 80054de:	6863      	ldr	r3, [r4, #4]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	f200 8165 	bhi.w	80057b0 <HAL_SAI_Init+0x358>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 80054e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	bf18      	it	ne
 80054ec:	2b60      	cmpne	r3, #96	; 0x60
 80054ee:	d008      	beq.n	8005502 <HAL_SAI_Init+0xaa>
 80054f0:	2b80      	cmp	r3, #128	; 0x80
 80054f2:	d006      	beq.n	8005502 <HAL_SAI_Init+0xaa>
 80054f4:	2ba0      	cmp	r3, #160	; 0xa0
 80054f6:	d004      	beq.n	8005502 <HAL_SAI_Init+0xaa>
 80054f8:	2bc0      	cmp	r3, #192	; 0xc0
 80054fa:	d002      	beq.n	8005502 <HAL_SAI_Init+0xaa>
 80054fc:	2be0      	cmp	r3, #224	; 0xe0
 80054fe:	f040 815d 	bne.w	80057bc <HAL_SAI_Init+0x364>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 8005502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf18      	it	ne
 8005508:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 800550c:	f040 815c 	bne.w	80057c8 <HAL_SAI_Init+0x370>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 8005510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	f200 815e 	bhi.w	80057d4 <HAL_SAI_Init+0x37c>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 8005518:	68a3      	ldr	r3, [r4, #8]
 800551a:	2b03      	cmp	r3, #3
 800551c:	f200 8160 	bhi.w	80057e0 <HAL_SAI_Init+0x388>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8005520:	6923      	ldr	r3, [r4, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	bf18      	it	ne
 8005526:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800552a:	f040 815f 	bne.w	80057ec <HAL_SAI_Init+0x394>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 800552e:	6963      	ldr	r3, [r4, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf18      	it	ne
 8005534:	f5b3 2f00 	cmpne.w	r3, #524288	; 0x80000
 8005538:	f040 815e 	bne.w	80057f8 <HAL_SAI_Init+0x3a0>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 800553c:	69a3      	ldr	r3, [r4, #24]
 800553e:	2b04      	cmp	r3, #4
 8005540:	f200 8160 	bhi.w	8005804 <HAL_SAI_Init+0x3ac>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8005544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554a:	bf18      	it	ne
 800554c:	2b00      	cmpne	r3, #0
 800554e:	f040 815f 	bne.w	8005810 <HAL_SAI_Init+0x3b8>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 8005552:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf18      	it	ne
 8005558:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800555c:	d009      	beq.n	8005572 <HAL_SAI_Init+0x11a>
 800555e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005562:	d006      	beq.n	8005572 <HAL_SAI_Init+0x11a>
 8005564:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005568:	d003      	beq.n	8005572 <HAL_SAI_Init+0x11a>
 800556a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800556e:	f040 8155 	bne.w	800581c <HAL_SAI_Init+0x3c4>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 8005572:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf18      	it	ne
 8005578:	2b10      	cmpne	r3, #16
 800557a:	f040 8155 	bne.w	8005828 <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	2b02      	cmp	r3, #2
 8005582:	f200 8157 	bhi.w	8005834 <HAL_SAI_Init+0x3dc>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8005586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005588:	3b08      	subs	r3, #8
 800558a:	2bf8      	cmp	r3, #248	; 0xf8
 800558c:	f200 8158 	bhi.w	8005840 <HAL_SAI_Init+0x3e8>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 8005590:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005592:	3b01      	subs	r3, #1
 8005594:	2b7f      	cmp	r3, #127	; 0x7f
 8005596:	f200 8159 	bhi.w	800584c <HAL_SAI_Init+0x3f4>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800559a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf18      	it	ne
 80055a0:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80055a4:	f040 8158 	bne.w	8005858 <HAL_SAI_Init+0x400>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 80055a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf18      	it	ne
 80055ae:	f5b3 3f00 	cmpne.w	r3, #131072	; 0x20000
 80055b2:	f040 8157 	bne.w	8005864 <HAL_SAI_Init+0x40c>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 80055b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf18      	it	ne
 80055bc:	f5b3 2f80 	cmpne.w	r3, #262144	; 0x40000
 80055c0:	f040 8156 	bne.w	8005870 <HAL_SAI_Init+0x418>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 80055c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055c6:	2b18      	cmp	r3, #24
 80055c8:	f200 8158 	bhi.w	800587c <HAL_SAI_Init+0x424>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 80055cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bf18      	it	ne
 80055d2:	2b40      	cmpne	r3, #64	; 0x40
 80055d4:	d002      	beq.n	80055dc <HAL_SAI_Init+0x184>
 80055d6:	2b80      	cmp	r3, #128	; 0x80
 80055d8:	f040 8156 	bne.w	8005888 <HAL_SAI_Init+0x430>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 80055dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80055de:	3b01      	subs	r3, #1
 80055e0:	2b0f      	cmp	r3, #15
 80055e2:	f200 8157 	bhi.w	8005894 <HAL_SAI_Init+0x43c>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 80055e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ec:	f080 8158 	bcs.w	80058a0 <HAL_SAI_Init+0x448>
  if(hsai->State == HAL_SAI_STATE_RESET)
 80055f0:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8159 	beq.w	80058ac <HAL_SAI_Init+0x454>
  hsai->State = HAL_SAI_STATE_BUSY;
 80055fa:	2302      	movs	r3, #2
 80055fc:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8005600:	4620      	mov	r0, r4
 8005602:	f7ff ff07 	bl	8005414 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	2b01      	cmp	r3, #1
 800560a:	f000 8155 	beq.w	80058b8 <HAL_SAI_Init+0x460>
 800560e:	2b02      	cmp	r3, #2
 8005610:	f040 8154 	bne.w	80058bc <HAL_SAI_Init+0x464>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005614:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 8005616:	68a3      	ldr	r3, [r4, #8]
 8005618:	2b02      	cmp	r3, #2
 800561a:	f000 8159 	beq.w	80058d0 <HAL_SAI_Init+0x478>
 800561e:	2b03      	cmp	r3, #3
 8005620:	f000 8151 	beq.w	80058c6 <HAL_SAI_Init+0x46e>
 8005624:	2b01      	cmp	r3, #1
 8005626:	f000 814b 	beq.w	80058c0 <HAL_SAI_Init+0x468>
 800562a:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	483b      	ldr	r0, [pc, #236]	; (800571c <HAL_SAI_Init+0x2c4>)
 8005630:	493b      	ldr	r1, [pc, #236]	; (8005720 <HAL_SAI_Init+0x2c8>)
 8005632:	428b      	cmp	r3, r1
 8005634:	bf18      	it	ne
 8005636:	4283      	cmpne	r3, r0
 8005638:	f040 814d 	bne.w	80058d6 <HAL_SAI_Init+0x47e>
    SAI1->GCR = tmpregisterGCR;
 800563c:	4b3c      	ldr	r3, [pc, #240]	; (8005730 <HAL_SAI_Init+0x2d8>)
 800563e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005642:	69e3      	ldr	r3, [r4, #28]
 8005644:	b323      	cbz	r3, 8005690 <HAL_SAI_Init+0x238>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	4934      	ldr	r1, [pc, #208]	; (800571c <HAL_SAI_Init+0x2c4>)
 800564a:	4a35      	ldr	r2, [pc, #212]	; (8005720 <HAL_SAI_Init+0x2c8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	bf18      	it	ne
 8005650:	428b      	cmpne	r3, r1
 8005652:	f000 8144 	beq.w	80058de <HAL_SAI_Init+0x486>
    uint32_t freq = 0;
 8005656:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	4936      	ldr	r1, [pc, #216]	; (8005734 <HAL_SAI_Init+0x2dc>)
 800565c:	4a36      	ldr	r2, [pc, #216]	; (8005738 <HAL_SAI_Init+0x2e0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	bf18      	it	ne
 8005662:	428b      	cmpne	r3, r1
 8005664:	f000 8140 	beq.w	80058e8 <HAL_SAI_Init+0x490>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005668:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800566c:	0040      	lsls	r0, r0, #1
 800566e:	69e3      	ldr	r3, [r4, #28]
 8005670:	025b      	lsls	r3, r3, #9
 8005672:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8005676:	4b31      	ldr	r3, [pc, #196]	; (800573c <HAL_SAI_Init+0x2e4>)
 8005678:	fba3 2300 	umull	r2, r3, r3, r0
 800567c:	08db      	lsrs	r3, r3, #3
 800567e:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 8005680:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005684:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8005688:	2808      	cmp	r0, #8
 800568a:	d901      	bls.n	8005690 <HAL_SAI_Init+0x238>
      hsai->Init.Mckdiv+= 1;
 800568c:	3301      	adds	r3, #1
 800568e:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	2b02      	cmp	r3, #2
 8005694:	bf18      	it	ne
 8005696:	2b00      	cmpne	r3, #0
 8005698:	f040 812e 	bne.w	80058f8 <HAL_SAI_Init+0x4a0>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800569c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	f000 8127 	beq.w	80058f2 <HAL_SAI_Init+0x49a>
 80056a4:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80056a8:	6821      	ldr	r1, [r4, #0]
 80056aa:	680b      	ldr	r3, [r1, #0]
 80056ac:	4a24      	ldr	r2, [pc, #144]	; (8005740 <HAL_SAI_Init+0x2e8>)
 80056ae:	401a      	ands	r2, r3
 80056b0:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	6811      	ldr	r1, [r2, #0]
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80056ba:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80056bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80056be:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80056c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80056c2:	4303      	orrs	r3, r0
 80056c4:	ea43 030c 	orr.w	r3, r3, ip
                        ckstr_bits | syncen_bits |                               \
 80056c8:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80056cc:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056ce:	6920      	ldr	r0, [r4, #16]
 80056d0:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80056d2:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80056d4:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80056d6:	6a20      	ldr	r0, [r4, #32]
 80056d8:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80056dc:	430b      	orrs	r3, r1
 80056de:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	6851      	ldr	r1, [r2, #4]
 80056e4:	4b17      	ldr	r3, [pc, #92]	; (8005744 <HAL_SAI_Init+0x2ec>)
 80056e6:	400b      	ands	r3, r1
 80056e8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80056ea:	6821      	ldr	r1, [r4, #0]
 80056ec:	684a      	ldr	r2, [r1, #4]
 80056ee:	69a3      	ldr	r3, [r4, #24]
 80056f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80056f2:	4303      	orrs	r3, r0
 80056f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80056f6:	4303      	orrs	r3, r0
 80056f8:	4313      	orrs	r3, r2
 80056fa:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	6891      	ldr	r1, [r2, #8]
 8005700:	4b11      	ldr	r3, [pc, #68]	; (8005748 <HAL_SAI_Init+0x2f0>)
 8005702:	400b      	ands	r3, r1
 8005704:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	6882      	ldr	r2, [r0, #8]
 800570a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800570c:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 800570e:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005710:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8005712:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8005714:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8005716:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8005718:	430b      	orrs	r3, r1
 800571a:	e017      	b.n	800574c <HAL_SAI_Init+0x2f4>
 800571c:	40015804 	.word	0x40015804
 8005720:	40015824 	.word	0x40015824
 8005724:	08019b60 	.word	0x08019b60
 8005728:	0002ee00 	.word	0x0002ee00
 800572c:	00017700 	.word	0x00017700
 8005730:	40015000 	.word	0x40015000
 8005734:	40015c04 	.word	0x40015c04
 8005738:	40015c24 	.word	0x40015c24
 800573c:	cccccccd 	.word	0xcccccccd
 8005740:	ff05c010 	.word	0xff05c010
 8005744:	ffff1ff0 	.word	0xffff1ff0
 8005748:	fff88000 	.word	0xfff88000
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800574c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800574e:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8005750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005754:	4313      	orrs	r3, r2
 8005756:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	68d3      	ldr	r3, [r2, #12]
 800575c:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005760:	f023 030f 	bic.w	r3, r3, #15
 8005764:	041b      	lsls	r3, r3, #16
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	68c2      	ldr	r2, [r0, #12]
 800576e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005770:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005772:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005774:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005776:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800577a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800577c:	3901      	subs	r1, #1
 800577e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005782:	4313      	orrs	r3, r2
 8005784:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005786:	2000      	movs	r0, #0
 8005788:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 800578c:	2301      	movs	r3, #1
 800578e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8005792:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8005796:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 8005798:	f240 1173 	movw	r1, #371	; 0x173
 800579c:	485c      	ldr	r0, [pc, #368]	; (8005910 <HAL_SAI_Init+0x4b8>)
 800579e:	f00e fe95 	bl	80144cc <assert_failed>
 80057a2:	e694      	b.n	80054ce <HAL_SAI_Init+0x76>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 80057a4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80057a8:	4859      	ldr	r0, [pc, #356]	; (8005910 <HAL_SAI_Init+0x4b8>)
 80057aa:	f00e fe8f 	bl	80144cc <assert_failed>
 80057ae:	e696      	b.n	80054de <HAL_SAI_Init+0x86>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 80057b0:	f240 1175 	movw	r1, #373	; 0x175
 80057b4:	4856      	ldr	r0, [pc, #344]	; (8005910 <HAL_SAI_Init+0x4b8>)
 80057b6:	f00e fe89 	bl	80144cc <assert_failed>
 80057ba:	e694      	b.n	80054e6 <HAL_SAI_Init+0x8e>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 80057bc:	f44f 71bb 	mov.w	r1, #374	; 0x176
 80057c0:	4853      	ldr	r0, [pc, #332]	; (8005910 <HAL_SAI_Init+0x4b8>)
 80057c2:	f00e fe83 	bl	80144cc <assert_failed>
 80057c6:	e69c      	b.n	8005502 <HAL_SAI_Init+0xaa>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 80057c8:	f240 1177 	movw	r1, #375	; 0x177
 80057cc:	4850      	ldr	r0, [pc, #320]	; (8005910 <HAL_SAI_Init+0x4b8>)
 80057ce:	f00e fe7d 	bl	80144cc <assert_failed>
 80057d2:	e69d      	b.n	8005510 <HAL_SAI_Init+0xb8>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 80057d4:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80057d8:	484d      	ldr	r0, [pc, #308]	; (8005910 <HAL_SAI_Init+0x4b8>)
 80057da:	f00e fe77 	bl	80144cc <assert_failed>
 80057de:	e69b      	b.n	8005518 <HAL_SAI_Init+0xc0>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 80057e0:	f240 1179 	movw	r1, #377	; 0x179
 80057e4:	484a      	ldr	r0, [pc, #296]	; (8005910 <HAL_SAI_Init+0x4b8>)
 80057e6:	f00e fe71 	bl	80144cc <assert_failed>
 80057ea:	e699      	b.n	8005520 <HAL_SAI_Init+0xc8>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 80057ec:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80057f0:	4847      	ldr	r0, [pc, #284]	; (8005910 <HAL_SAI_Init+0x4b8>)
 80057f2:	f00e fe6b 	bl	80144cc <assert_failed>
 80057f6:	e69a      	b.n	800552e <HAL_SAI_Init+0xd6>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 80057f8:	f240 117b 	movw	r1, #379	; 0x17b
 80057fc:	4844      	ldr	r0, [pc, #272]	; (8005910 <HAL_SAI_Init+0x4b8>)
 80057fe:	f00e fe65 	bl	80144cc <assert_failed>
 8005802:	e69b      	b.n	800553c <HAL_SAI_Init+0xe4>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 8005804:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8005808:	4841      	ldr	r0, [pc, #260]	; (8005910 <HAL_SAI_Init+0x4b8>)
 800580a:	f00e fe5f 	bl	80144cc <assert_failed>
 800580e:	e699      	b.n	8005544 <HAL_SAI_Init+0xec>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8005810:	f240 117d 	movw	r1, #381	; 0x17d
 8005814:	483e      	ldr	r0, [pc, #248]	; (8005910 <HAL_SAI_Init+0x4b8>)
 8005816:	f00e fe59 	bl	80144cc <assert_failed>
 800581a:	e69a      	b.n	8005552 <HAL_SAI_Init+0xfa>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 800581c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8005820:	483b      	ldr	r0, [pc, #236]	; (8005910 <HAL_SAI_Init+0x4b8>)
 8005822:	f00e fe53 	bl	80144cc <assert_failed>
 8005826:	e6a4      	b.n	8005572 <HAL_SAI_Init+0x11a>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 8005828:	f240 117f 	movw	r1, #383	; 0x17f
 800582c:	4838      	ldr	r0, [pc, #224]	; (8005910 <HAL_SAI_Init+0x4b8>)
 800582e:	f00e fe4d 	bl	80144cc <assert_failed>
 8005832:	e6a4      	b.n	800557e <HAL_SAI_Init+0x126>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8005834:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005838:	4835      	ldr	r0, [pc, #212]	; (8005910 <HAL_SAI_Init+0x4b8>)
 800583a:	f00e fe47 	bl	80144cc <assert_failed>
 800583e:	e6a2      	b.n	8005586 <HAL_SAI_Init+0x12e>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8005840:	f240 1183 	movw	r1, #387	; 0x183
 8005844:	4832      	ldr	r0, [pc, #200]	; (8005910 <HAL_SAI_Init+0x4b8>)
 8005846:	f00e fe41 	bl	80144cc <assert_failed>
 800584a:	e6a1      	b.n	8005590 <HAL_SAI_Init+0x138>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800584c:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8005850:	482f      	ldr	r0, [pc, #188]	; (8005910 <HAL_SAI_Init+0x4b8>)
 8005852:	f00e fe3b 	bl	80144cc <assert_failed>
 8005856:	e6a0      	b.n	800559a <HAL_SAI_Init+0x142>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 8005858:	f240 1185 	movw	r1, #389	; 0x185
 800585c:	482c      	ldr	r0, [pc, #176]	; (8005910 <HAL_SAI_Init+0x4b8>)
 800585e:	f00e fe35 	bl	80144cc <assert_failed>
 8005862:	e6a1      	b.n	80055a8 <HAL_SAI_Init+0x150>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 8005864:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8005868:	4829      	ldr	r0, [pc, #164]	; (8005910 <HAL_SAI_Init+0x4b8>)
 800586a:	f00e fe2f 	bl	80144cc <assert_failed>
 800586e:	e6a2      	b.n	80055b6 <HAL_SAI_Init+0x15e>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 8005870:	f240 1187 	movw	r1, #391	; 0x187
 8005874:	4826      	ldr	r0, [pc, #152]	; (8005910 <HAL_SAI_Init+0x4b8>)
 8005876:	f00e fe29 	bl	80144cc <assert_failed>
 800587a:	e6a3      	b.n	80055c4 <HAL_SAI_Init+0x16c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 800587c:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8005880:	4823      	ldr	r0, [pc, #140]	; (8005910 <HAL_SAI_Init+0x4b8>)
 8005882:	f00e fe23 	bl	80144cc <assert_failed>
 8005886:	e6a1      	b.n	80055cc <HAL_SAI_Init+0x174>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 8005888:	f240 118b 	movw	r1, #395	; 0x18b
 800588c:	4820      	ldr	r0, [pc, #128]	; (8005910 <HAL_SAI_Init+0x4b8>)
 800588e:	f00e fe1d 	bl	80144cc <assert_failed>
 8005892:	e6a3      	b.n	80055dc <HAL_SAI_Init+0x184>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 8005894:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005898:	481d      	ldr	r0, [pc, #116]	; (8005910 <HAL_SAI_Init+0x4b8>)
 800589a:	f00e fe17 	bl	80144cc <assert_failed>
 800589e:	e6a2      	b.n	80055e6 <HAL_SAI_Init+0x18e>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 80058a0:	f240 118d 	movw	r1, #397	; 0x18d
 80058a4:	481a      	ldr	r0, [pc, #104]	; (8005910 <HAL_SAI_Init+0x4b8>)
 80058a6:	f00e fe11 	bl	80144cc <assert_failed>
 80058aa:	e6a1      	b.n	80055f0 <HAL_SAI_Init+0x198>
    hsai->Lock = HAL_UNLOCKED;
 80058ac:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80058b0:	4620      	mov	r0, r4
 80058b2:	f010 f883 	bl	80159bc <HAL_SAI_MspInit>
 80058b6:	e6a0      	b.n	80055fa <HAL_SAI_Init+0x1a2>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80058b8:	2210      	movs	r2, #16
 80058ba:	e6ac      	b.n	8005616 <HAL_SAI_Init+0x1be>
  switch(hsai->Init.SynchroExt)
 80058bc:	2200      	movs	r2, #0
 80058be:	e6aa      	b.n	8005616 <HAL_SAI_Init+0x1be>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80058c0:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80058c4:	e6b2      	b.n	800562c <HAL_SAI_Init+0x1d4>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80058c6:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80058ca:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 80058ce:	e6ad      	b.n	800562c <HAL_SAI_Init+0x1d4>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80058d0:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80058d4:	e6aa      	b.n	800562c <HAL_SAI_Init+0x1d4>
    SAI2->GCR = tmpregisterGCR;
 80058d6:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <HAL_SAI_Init+0x4bc>)
 80058d8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80058dc:	e6b1      	b.n	8005642 <HAL_SAI_Init+0x1ea>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80058de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058e2:	f7ff fca9 	bl	8005238 <HAL_RCCEx_GetPeriphCLKFreq>
 80058e6:	e6b7      	b.n	8005658 <HAL_SAI_Init+0x200>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80058e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80058ec:	f7ff fca4 	bl	8005238 <HAL_RCCEx_GetPeriphCLKFreq>
 80058f0:	e6ba      	b.n	8005668 <HAL_SAI_Init+0x210>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80058f2:	f04f 0c00 	mov.w	ip, #0
 80058f6:	e6d7      	b.n	80056a8 <HAL_SAI_Init+0x250>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80058f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d002      	beq.n	8005904 <HAL_SAI_Init+0x4ac>
 80058fe:	f04f 0c00 	mov.w	ip, #0
 8005902:	e6d1      	b.n	80056a8 <HAL_SAI_Init+0x250>
 8005904:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8005908:	e6ce      	b.n	80056a8 <HAL_SAI_Init+0x250>
    return HAL_ERROR;
 800590a:	2001      	movs	r0, #1
}
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	08019b60 	.word	0x08019b60
 8005914:	40015000 	.word	0x40015000

08005918 <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
 8005918:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d00c      	beq.n	800593a <HAL_SAI_DMAPause+0x22>
 8005920:	2301      	movs	r3, #1
 8005922:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005926:	6802      	ldr	r2, [r0, #0]
 8005928:	6813      	ldr	r3, [r2, #0]
 800592a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800592e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hsai);
 8005930:	2300      	movs	r3, #0
 8005932:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8005936:	4618      	mov	r0, r3
 8005938:	4770      	bx	lr
  __HAL_LOCK(hsai);
 800593a:	2002      	movs	r0, #2
}
 800593c:	4770      	bx	lr

0800593e <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
 800593e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d015      	beq.n	8005972 <HAL_SAI_DMAResume+0x34>
 8005946:	2301      	movs	r3, #1
 8005948:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800594c:	6802      	ldr	r2, [r0, #0]
 800594e:	6813      	ldr	r3, [r2, #0]
 8005950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005954:	6013      	str	r3, [r2, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005956:	6803      	ldr	r3, [r0, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800595e:	d103      	bne.n	8005968 <HAL_SAI_DMAResume+0x2a>
    __HAL_SAI_ENABLE(hsai);
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005966:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
 8005968:	2300      	movs	r3, #0
 800596a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800596e:	4618      	mov	r0, r3
 8005970:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8005972:	2002      	movs	r0, #2
}
 8005974:	4770      	bx	lr

08005976 <HAL_SAI_DMAStop>:
{
 8005976:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8005978:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d04c      	beq.n	8005a1a <HAL_SAI_DMAStop+0xa4>
 8005980:	4604      	mov	r4, r0
 8005982:	2301      	movs	r3, #1
 8005984:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005988:	6802      	ldr	r2, [r0, #0]
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005990:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8005992:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8005994:	b368      	cbz	r0, 80059f2 <HAL_SAI_DMAStop+0x7c>
 8005996:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b12      	cmp	r3, #18
 800599e:	d017      	beq.n	80059d0 <HAL_SAI_DMAStop+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80059a0:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80059a2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80059a4:	b120      	cbz	r0, 80059b0 <HAL_SAI_DMAStop+0x3a>
 80059a6:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b22      	cmp	r3, #34	; 0x22
 80059ae:	d024      	beq.n	80059fa <HAL_SAI_DMAStop+0x84>
  SAI_Disable(hsai);
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff fd2f 	bl	8005414 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	6853      	ldr	r3, [r2, #4]
 80059ba:	f043 0308 	orr.w	r3, r3, #8
 80059be:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80059c6:	2300      	movs	r3, #0
 80059c8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80059cc:	4628      	mov	r0, r5
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80059d0:	f7fb ff3c 	bl	800184c <HAL_DMA_Abort>
 80059d4:	4605      	mov	r5, r0
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d0e3      	beq.n	80059a2 <HAL_SAI_DMAStop+0x2c>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80059da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80059dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d009      	beq.n	80059f6 <HAL_SAI_DMAStop+0x80>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80059e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80059e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 80059ee:	2501      	movs	r5, #1
 80059f0:	e7d7      	b.n	80059a2 <HAL_SAI_DMAStop+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 80059f2:	2500      	movs	r5, #0
 80059f4:	e7d5      	b.n	80059a2 <HAL_SAI_DMAStop+0x2c>
 80059f6:	2500      	movs	r5, #0
 80059f8:	e7d3      	b.n	80059a2 <HAL_SAI_DMAStop+0x2c>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80059fa:	f7fb ff27 	bl	800184c <HAL_DMA_Abort>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0d6      	beq.n	80059b0 <HAL_SAI_DMAStop+0x3a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005a02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d0d2      	beq.n	80059b0 <HAL_SAI_DMAStop+0x3a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a0a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a12:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8005a16:	2501      	movs	r5, #1
 8005a18:	e7ca      	b.n	80059b0 <HAL_SAI_DMAStop+0x3a>
  __HAL_LOCK(hsai);
 8005a1a:	2502      	movs	r5, #2
 8005a1c:	e7d6      	b.n	80059cc <HAL_SAI_DMAStop+0x56>
	...

08005a20 <HAL_SAI_Transmit_DMA>:
{
 8005a20:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 8005a22:	2a00      	cmp	r2, #0
 8005a24:	bf18      	it	ne
 8005a26:	2900      	cmpne	r1, #0
 8005a28:	d04c      	beq.n	8005ac4 <HAL_SAI_Transmit_DMA+0xa4>
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	4613      	mov	r3, r2
  if(hsai->State == HAL_SAI_STATE_READY)
 8005a2e:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 8005a32:	b2ed      	uxtb	r5, r5
 8005a34:	2d01      	cmp	r5, #1
 8005a36:	d148      	bne.n	8005aca <HAL_SAI_Transmit_DMA+0xaa>
    __HAL_LOCK(hsai);
 8005a38:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8005a3c:	2a01      	cmp	r2, #1
 8005a3e:	d046      	beq.n	8005ace <HAL_SAI_Transmit_DMA+0xae>
 8005a40:	2201      	movs	r2, #1
 8005a42:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8005a46:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8005a48:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8005a4c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005a56:	2212      	movs	r2, #18
 8005a58:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005a5c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a5e:	491d      	ldr	r1, [pc, #116]	; (8005ad4 <HAL_SAI_Transmit_DMA+0xb4>)
 8005a60:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005a62:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a64:	491c      	ldr	r1, [pc, #112]	; (8005ad8 <HAL_SAI_Transmit_DMA+0xb8>)
 8005a66:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005a68:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a6a:	491c      	ldr	r1, [pc, #112]	; (8005adc <HAL_SAI_Transmit_DMA+0xbc>)
 8005a6c:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8005a6e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005a70:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005a72:	6822      	ldr	r2, [r4, #0]
 8005a74:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8005a78:	321c      	adds	r2, #28
 8005a7a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005a7c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005a7e:	f7fb fe93 	bl	80017a8 <HAL_DMA_Start_IT>
 8005a82:	4606      	mov	r6, r0
 8005a84:	b118      	cbz	r0, 8005a8e <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 8005a86:	2300      	movs	r3, #0
 8005a88:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8005a8c:	e01b      	b.n	8005ac6 <HAL_SAI_Transmit_DMA+0xa6>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005a96:	d103      	bne.n	8005aa0 <HAL_SAI_Transmit_DMA+0x80>
      __HAL_SAI_ENABLE(hsai);
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a9e:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f7ff fc9c 	bl	80053e0 <SAI_InterruptFlag>
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	6913      	ldr	r3, [r2, #16]
 8005aac:	4303      	orrs	r3, r0
 8005aae:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab8:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8005aba:	2300      	movs	r3, #0
 8005abc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8005ac0:	4635      	mov	r5, r6
 8005ac2:	e000      	b.n	8005ac6 <HAL_SAI_Transmit_DMA+0xa6>
    return  HAL_ERROR;
 8005ac4:	2501      	movs	r5, #1
}
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005aca:	2502      	movs	r5, #2
 8005acc:	e7fb      	b.n	8005ac6 <HAL_SAI_Transmit_DMA+0xa6>
    __HAL_LOCK(hsai);
 8005ace:	2502      	movs	r5, #2
 8005ad0:	e7f9      	b.n	8005ac6 <HAL_SAI_Transmit_DMA+0xa6>
 8005ad2:	bf00      	nop
 8005ad4:	08005b1d 	.word	0x08005b1d
 8005ad8:	08005ae1 	.word	0x08005ae1
 8005adc:	08005b27 	.word	0x08005b27

08005ae0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005ae0:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8005ae2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005ae4:	6803      	ldr	r3, [r0, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005aec:	d112      	bne.n	8005b14 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 8005aee:	2100      	movs	r1, #0
 8005af0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005af4:	6822      	ldr	r2, [r4, #0]
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005afc:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005afe:	4620      	mov	r0, r4
 8005b00:	f7ff fc6e 	bl	80053e0 <SAI_InterruptFlag>
 8005b04:	6822      	ldr	r2, [r4, #0]
 8005b06:	6913      	ldr	r3, [r2, #16]
 8005b08:	ea23 0300 	bic.w	r3, r3, r0
 8005b0c:	6113      	str	r3, [r2, #16]

    hsai->State= HAL_SAI_STATE_READY;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005b14:	4620      	mov	r0, r4
 8005b16:	f010 f9ab 	bl	8015e70 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005b1a:	bd10      	pop	{r4, pc}

08005b1c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005b1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005b20:	f010 f9e6 	bl	8015ef0 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005b24:	bd08      	pop	{r3, pc}

08005b26 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b26:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b28:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005b2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005b36:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d007      	beq.n	8005b4e <SAI_DMAError+0x28>
 8005b3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d003      	beq.n	8005b4e <SAI_DMAError+0x28>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005b46:	4620      	mov	r0, r4
 8005b48:	f010 fa14 	bl	8015f74 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005b4c:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	6813      	ldr	r3, [r2, #0]
 8005b52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b56:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f7ff fc5b 	bl	8005414 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8005b6a:	e7ec      	b.n	8005b46 <SAI_DMAError+0x20>

08005b6c <HAL_SAI_GetState>:
  return hsai->State;
 8005b6c:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 8005b70:	4770      	bx	lr

08005b72 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b72:	b570      	push	{r4, r5, r6, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9301      	str	r3, [sp, #4]
  uint32_t response = 0, validvoltage = 0;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b7c:	6800      	ldr	r0, [r0, #0]
 8005b7e:	f002 fd53 	bl	8008628 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b82:	4605      	mov	r5, r0
 8005b84:	b110      	cbz	r0, 8005b8c <SD_PowerON+0x1a>
      hsd->SdCard.CardType = CARD_SDSC;
    }
  }
  
  return HAL_SD_ERROR_NONE;
}
 8005b86:	4628      	mov	r0, r5
 8005b88:	b002      	add	sp, #8
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b8c:	6820      	ldr	r0, [r4, #0]
 8005b8e:	f002 fd5e 	bl	800864e <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b92:	4606      	mov	r6, r0
 8005b94:	b1f8      	cbz	r0, 8005bd6 <SD_PowerON+0x64>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b96:	2300      	movs	r3, #0
 8005b98:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 8005b9a:	4628      	mov	r0, r5
    while(validvoltage == 0)
 8005b9c:	b9c0      	cbnz	r0, 8005bd0 <SD_PowerON+0x5e>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	9201      	str	r2, [sp, #4]
 8005ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d03f      	beq.n	8005c2c <SD_PowerON+0xba>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005bac:	2100      	movs	r1, #0
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	f002 fd64 	bl	800867c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d13c      	bne.n	8005c32 <SD_PowerON+0xc0>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8005bb8:	2100      	movs	r1, #0
 8005bba:	6820      	ldr	r0, [r4, #0]
 8005bbc:	f002 fd76 	bl	80086ac <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d139      	bne.n	8005c38 <SD_PowerON+0xc6>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	6820      	ldr	r0, [r4, #0]
 8005bc8:	f002 fb08 	bl	80081dc <SDMMC_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8005bcc:	0fc0      	lsrs	r0, r0, #31
 8005bce:	e7e5      	b.n	8005b9c <SD_PowerON+0x2a>
    hsd->SdCard.CardType = CARD_SDSC;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	6463      	str	r3, [r4, #68]	; 0x44
 8005bd4:	e7d7      	b.n	8005b86 <SD_PowerON+0x14>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 8005bda:	4605      	mov	r5, r0
    while(validvoltage == 0)
 8005bdc:	b9e0      	cbnz	r0, 8005c18 <SD_PowerON+0xa6>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	9201      	str	r2, [sp, #4]
 8005be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d028      	beq.n	8005c3e <SD_PowerON+0xcc>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005bec:	2100      	movs	r1, #0
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	f002 fd44 	bl	800867c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d1c5      	bne.n	8005b86 <SD_PowerON+0x14>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8005bfa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	f002 fd54 	bl	80086ac <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005c04:	4605      	mov	r5, r0
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d1bd      	bne.n	8005b86 <SD_PowerON+0x14>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	f002 fae5 	bl	80081dc <SDMMC_GetResponse>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8005c12:	4605      	mov	r5, r0
 8005c14:	0fc0      	lsrs	r0, r0, #31
 8005c16:	e7e1      	b.n	8005bdc <SD_PowerON+0x6a>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c18:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8005c1c:	d003      	beq.n	8005c26 <SD_PowerON+0xb4>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8005c22:	4635      	mov	r5, r6
 8005c24:	e7af      	b.n	8005b86 <SD_PowerON+0x14>
      hsd->SdCard.CardType = CARD_SDSC;
 8005c26:	2300      	movs	r3, #0
 8005c28:	6463      	str	r3, [r4, #68]	; 0x44
 8005c2a:	e7ac      	b.n	8005b86 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c2c:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005c30:	e7a9      	b.n	8005b86 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c32:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005c36:	e7a6      	b.n	8005b86 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005c3c:	e7a3      	b.n	8005b86 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c3e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8005c42:	e7a0      	b.n	8005b86 <SD_PowerON+0x14>

08005c44 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c46:	b089      	sub	sp, #36	; 0x24
 8005c48:	4604      	mov	r4, r0
 8005c4a:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8005c4c:	f7fb fafa 	bl	8001244 <HAL_GetTick>
 8005c50:	4606      	mov	r6, r0
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8005c52:	2300      	movs	r3, #0
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	9301      	str	r3, [sp, #4]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8005c58:	2108      	movs	r1, #8
 8005c5a:	6820      	ldr	r0, [r4, #0]
 8005c5c:	f002 fc3a 	bl	80084d4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8005c60:	4605      	mov	r5, r0
 8005c62:	b110      	cbz	r0, 8005c6a <SD_FindSCR+0x26>
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8005c64:	4628      	mov	r0, r5
 8005c66:	b009      	add	sp, #36	; 0x24
 8005c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8005c6a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005c6c:	0409      	lsls	r1, r1, #16
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	f002 fd04 	bl	800867c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8005c74:	4605      	mov	r5, r0
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d1f4      	bne.n	8005c64 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7e:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 8005c80:	2308      	movs	r3, #8
 8005c82:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005c84:	2330      	movs	r3, #48	; 0x30
 8005c86:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 8005c94:	a902      	add	r1, sp, #8
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	f002 fbb6 	bl	8008408 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005c9c:	6820      	ldr	r0, [r4, #0]
 8005c9e:	f002 fd37 	bl	8008710 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	b130      	cbz	r0, 8005cb4 <SD_FindSCR+0x70>
 8005ca6:	e7dd      	b.n	8005c64 <SD_FindSCR+0x20>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ca8:	f7fb facc 	bl	8001244 <HAL_GetTick>
 8005cac:	1b83      	subs	r3, r0, r6
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	d042      	beq.n	8005d3a <SD_FindSCR+0xf6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005cb4:	6820      	ldr	r0, [r4, #0]
 8005cb6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005cb8:	f240 432a 	movw	r3, #1066	; 0x42a
 8005cbc:	421a      	tst	r2, r3
 8005cbe:	d109      	bne.n	8005cd4 <SD_FindSCR+0x90>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005cc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cc2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005cc6:	d0ef      	beq.n	8005ca8 <SD_FindSCR+0x64>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005cc8:	f002 fa2c 	bl	8008124 <SDMMC_ReadFIFO>
 8005ccc:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	e7e9      	b.n	8005ca8 <SD_FindSCR+0x64>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005cd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cd6:	f013 0f08 	tst.w	r3, #8
 8005cda:	d125      	bne.n	8005d28 <SD_FindSCR+0xe4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005cdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cde:	f013 0f02 	tst.w	r3, #2
 8005ce2:	d124      	bne.n	8005d2e <SD_FindSCR+0xea>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005ce4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005ce6:	f015 0520 	ands.w	r5, r5, #32
 8005cea:	d123      	bne.n	8005d34 <SD_FindSCR+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cec:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005cf0:	6383      	str	r3, [r0, #56]	; 0x38
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005cf2:	9a00      	ldr	r2, [sp, #0]
 8005cf4:	0213      	lsls	r3, r2, #8
 8005cf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8005cfe:	0a11      	lsrs	r1, r2, #8
 8005d00:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d04:	430b      	orrs	r3, r1
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8005d06:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d0a:	607b      	str	r3, [r7, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d0c:	9a01      	ldr	r2, [sp, #4]
 8005d0e:	0213      	lsls	r3, r2, #8
 8005d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8005d18:	0a11      	lsrs	r1, r2, #8
 8005d1a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d1e:	430b      	orrs	r3, r1
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8005d20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d24:	603b      	str	r3, [r7, #0]
  return HAL_SD_ERROR_NONE;
 8005d26:	e79d      	b.n	8005c64 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005d28:	2508      	movs	r5, #8
 8005d2a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d2c:	e79a      	b.n	8005c64 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005d2e:	2502      	movs	r5, #2
 8005d30:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d32:	e797      	b.n	8005c64 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005d34:	2520      	movs	r5, #32
 8005d36:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005d38:	e794      	b.n	8005c64 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8005d3a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005d3e:	e791      	b.n	8005c64 <SD_FindSCR+0x20>

08005d40 <SD_WideBus_Enable>:
{
 8005d40:	b510      	push	{r4, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 8005d46:	2100      	movs	r1, #0
 8005d48:	9100      	str	r1, [sp, #0]
 8005d4a:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d4c:	6800      	ldr	r0, [r0, #0]
 8005d4e:	f002 fa45 	bl	80081dc <SDMMC_GetResponse>
 8005d52:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005d56:	d113      	bne.n	8005d80 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8005d58:	4669      	mov	r1, sp
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f7ff ff72 	bl	8005c44 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005d60:	b980      	cbnz	r0, 8005d84 <SD_WideBus_Enable+0x44>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005d68:	d00e      	beq.n	8005d88 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005d6a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005d6c:	0409      	lsls	r1, r1, #16
 8005d6e:	6820      	ldr	r0, [r4, #0]
 8005d70:	f002 fc84 	bl	800867c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005d74:	b930      	cbnz	r0, 8005d84 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005d76:	2102      	movs	r1, #2
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	f002 fcb1 	bl	80086e0 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_OK)
 8005d7e:	e001      	b.n	8005d84 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d80:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8005d84:	b002      	add	sp, #8
 8005d86:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d88:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005d8c:	e7fa      	b.n	8005d84 <SD_WideBus_Enable+0x44>

08005d8e <SD_WideBus_Disable>:
{
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 8005d94:	2100      	movs	r1, #0
 8005d96:	9100      	str	r1, [sp, #0]
 8005d98:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	f002 fa1e 	bl	80081dc <SDMMC_GetResponse>
 8005da0:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005da4:	d113      	bne.n	8005dce <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8005da6:	4669      	mov	r1, sp
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7ff ff4b 	bl	8005c44 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005dae:	b980      	cbnz	r0, 8005dd2 <SD_WideBus_Disable+0x44>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005db0:	9b01      	ldr	r3, [sp, #4]
 8005db2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005db6:	d00e      	beq.n	8005dd6 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005db8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005dba:	0409      	lsls	r1, r1, #16
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	f002 fc5d 	bl	800867c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005dc2:	b930      	cbnz	r0, 8005dd2 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	f002 fc8a 	bl	80086e0 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_OK)
 8005dcc:	e001      	b.n	8005dd2 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005dce:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8005dd2:	b002      	add	sp, #8
 8005dd4:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005dd6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005dda:	e7fa      	b.n	8005dd2 <SD_WideBus_Disable+0x44>

08005ddc <SD_SendStatus>:
{
 8005ddc:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8005dde:	b181      	cbz	r1, 8005e02 <SD_SendStatus+0x26>
 8005de0:	4604      	mov	r4, r0
 8005de2:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005de4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005de6:	0409      	lsls	r1, r1, #16
 8005de8:	6800      	ldr	r0, [r0, #0]
 8005dea:	f002 fceb 	bl	80087c4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8005dee:	4605      	mov	r5, r0
 8005df0:	b108      	cbz	r0, 8005df6 <SD_SendStatus+0x1a>
}
 8005df2:	4628      	mov	r0, r5
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005df6:	2100      	movs	r1, #0
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	f002 f9ef 	bl	80081dc <SDMMC_GetResponse>
 8005dfe:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8005e00:	e7f7      	b.n	8005df2 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8005e02:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8005e06:	e7f4      	b.n	8005df2 <SD_SendStatus+0x16>

08005e08 <HAL_SD_ReadBlocks>:
{
 8005e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	4604      	mov	r4, r0
 8005e10:	460e      	mov	r6, r1
 8005e12:	4615      	mov	r5, r2
 8005e14:	4699      	mov	r9, r3
 8005e16:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8005e1a:	f7fb fa13 	bl	8001244 <HAL_GetTick>
  if(NULL == pData)
 8005e1e:	b346      	cbz	r6, 8005e72 <HAL_SD_ReadBlocks+0x6a>
 8005e20:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8005e22:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 8005e26:	b2ff      	uxtb	r7, r7
 8005e28:	2f01      	cmp	r7, #1
 8005e2a:	f040 80f1 	bne.w	8006010 <HAL_SD_ReadBlocks+0x208>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e32:	eb05 0309 	add.w	r3, r5, r9
 8005e36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d820      	bhi.n	8005e7e <HAL_SD_ReadBlocks+0x76>
    hsd->State = HAL_SD_STATE_BUSY;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0;
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	2200      	movs	r2, #0
 8005e46:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d000      	beq.n	8005e50 <HAL_SD_ReadBlocks+0x48>
      BlockAdd *= 512;
 8005e4e:	026d      	lsls	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	f002 fb3d 	bl	80084d4 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e5a:	b1a8      	cbz	r0, 8005e88 <HAL_SD_ReadBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8005e62:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e66:	4303      	orrs	r3, r0
 8005e68:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005e70:	e0d3      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e78:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005e7a:	2701      	movs	r7, #1
 8005e7c:	e0cd      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e84:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8005e86:	e0c8      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8c:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e8e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8005e92:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e94:	2390      	movs	r3, #144	; 0x90
 8005e96:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8005ea4:	4669      	mov	r1, sp
 8005ea6:	6820      	ldr	r0, [r4, #0]
 8005ea8:	f002 faae 	bl	8008408 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1)
 8005eac:	f1b9 0f01 	cmp.w	r9, #1
 8005eb0:	d911      	bls.n	8005ed6 <HAL_SD_ReadBlocks+0xce>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	6820      	ldr	r0, [r4, #0]
 8005eba:	f002 fb3b 	bl	8008534 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ebe:	b318      	cbz	r0, 8005f08 <HAL_SD_ReadBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eca:	4318      	orrs	r0, r3
 8005ecc:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005ed4:	e0a1      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8005eda:	4629      	mov	r1, r5
 8005edc:	6820      	ldr	r0, [r4, #0]
 8005ede:	f002 fb11 	bl	8008504 <SDMMC_CmdReadSingleBlock>
 8005ee2:	e7ec      	b.n	8005ebe <HAL_SD_ReadBlocks+0xb6>
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	f002 f91d 	bl	8008124 <SDMMC_ReadFIFO>
 8005eea:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
        for(count = 0U; count < 8U; count++)
 8005eee:	3501      	adds	r5, #1
 8005ef0:	2d07      	cmp	r5, #7
 8005ef2:	d9f7      	bls.n	8005ee4 <HAL_SD_ReadBlocks+0xdc>
        tempbuff += 8U;
 8005ef4:	3620      	adds	r6, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005ef6:	f1ba 0f00 	cmp.w	sl, #0
 8005efa:	d00f      	beq.n	8005f1c <HAL_SD_ReadBlocks+0x114>
 8005efc:	f7fb f9a2 	bl	8001244 <HAL_GetTick>
 8005f00:	eba0 0008 	sub.w	r0, r0, r8
 8005f04:	4550      	cmp	r0, sl
 8005f06:	d209      	bcs.n	8005f1c <HAL_SD_ReadBlocks+0x114>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005f0c:	f415 7595 	ands.w	r5, r5, #298	; 0x12a
 8005f10:	d111      	bne.n	8005f36 <HAL_SD_ReadBlocks+0x12e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005f12:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f14:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005f18:	d0ed      	beq.n	8005ef6 <HAL_SD_ReadBlocks+0xee>
 8005f1a:	e7e9      	b.n	8005ef0 <HAL_SD_ReadBlocks+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005f24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f2a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8005f32:	2703      	movs	r7, #3
 8005f34:	e071      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005f36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f38:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f3c:	d005      	beq.n	8005f4a <HAL_SD_ReadBlocks+0x142>
 8005f3e:	f1b9 0f01 	cmp.w	r9, #1
 8005f42:	d902      	bls.n	8005f4a <HAL_SD_ReadBlocks+0x142>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005f44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d12a      	bne.n	8005fa0 <HAL_SD_ReadBlocks+0x198>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4e:	f012 0f08 	tst.w	r2, #8
 8005f52:	d134      	bne.n	8005fbe <HAL_SD_ReadBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f56:	f012 0f02 	tst.w	r2, #2
 8005f5a:	d13b      	bne.n	8005fd4 <HAL_SD_ReadBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f5e:	f012 0f20 	tst.w	r2, #32
 8005f62:	d142      	bne.n	8005fea <HAL_SD_ReadBlocks+0x1e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f68:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005f6c:	d048      	beq.n	8006000 <HAL_SD_ReadBlocks+0x1f8>
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8005f6e:	f002 f8d9 	bl	8008124 <SDMMC_ReadFIFO>
 8005f72:	f846 0b04 	str.w	r0, [r6], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005f76:	f1ba 0f00 	cmp.w	sl, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_SD_ReadBlocks+0x180>
 8005f7c:	f7fb f962 	bl	8001244 <HAL_GetTick>
 8005f80:	eba0 0008 	sub.w	r0, r0, r8
 8005f84:	4550      	cmp	r0, sl
 8005f86:	d3ed      	bcc.n	8005f64 <HAL_SD_ReadBlocks+0x15c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005f90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f96:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 8005f9e:	e03c      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fa0:	f002 fb10 	bl	80085c4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d0d0      	beq.n	8005f4a <HAL_SD_ReadBlocks+0x142>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	f240 51ff 	movw	r1, #1535	; 0x5ff
 8005fae:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fb2:	4303      	orrs	r3, r0
 8005fb4:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_ERROR;
 8005fbc:	e02d      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fbe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005fc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fc6:	f043 0308 	orr.w	r3, r3, #8
 8005fca:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005fd2:	e022      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fd4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005fd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fdc:	f043 0302 	orr.w	r3, r3, #2
 8005fe0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005fe8:	e017      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005ff0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ff2:	f043 0320 	orr.w	r3, r3, #32
 8005ff6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8005ffe:	e00c      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006000:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006004:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006006:	2301      	movs	r3, #1
 8006008:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800600c:	2700      	movs	r7, #0
 800600e:	e004      	b.n	800601a <HAL_SD_ReadBlocks+0x212>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006010:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006012:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006016:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006018:	2701      	movs	r7, #1
}
 800601a:	4638      	mov	r0, r7
 800601c:	b006      	add	sp, #24
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006022 <HAL_SD_WriteBlocks>:
{
 8006022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006026:	b087      	sub	sp, #28
 8006028:	4604      	mov	r4, r0
 800602a:	460e      	mov	r6, r1
 800602c:	4615      	mov	r5, r2
 800602e:	4699      	mov	r9, r3
 8006030:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006034:	f7fb f906 	bl	8001244 <HAL_GetTick>
  if(NULL == pData)
 8006038:	2e00      	cmp	r6, #0
 800603a:	d036      	beq.n	80060aa <HAL_SD_WriteBlocks+0x88>
 800603c:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800603e:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 8006042:	b2ff      	uxtb	r7, r7
 8006044:	2f01      	cmp	r7, #1
 8006046:	f040 80d8 	bne.w	80061fa <HAL_SD_WriteBlocks+0x1d8>
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800604a:	2300      	movs	r3, #0
 800604c:	63a3      	str	r3, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800604e:	eb05 0309 	add.w	r3, r5, r9
 8006052:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006054:	4293      	cmp	r3, r2
 8006056:	d82e      	bhi.n	80060b6 <HAL_SD_WriteBlocks+0x94>
    hsd->State = HAL_SD_STATE_BUSY;
 8006058:	2303      	movs	r3, #3
 800605a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0;
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	2200      	movs	r2, #0
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006064:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006066:	2b01      	cmp	r3, #1
 8006068:	d000      	beq.n	800606c <HAL_SD_WriteBlocks+0x4a>
      BlockAdd *= 512;
 800606a:	026d      	lsls	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800606c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006070:	6820      	ldr	r0, [r4, #0]
 8006072:	f002 fa2f 	bl	80084d4 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006076:	bb18      	cbnz	r0, 80060c0 <HAL_SD_WriteBlocks+0x9e>
    if(NumberOfBlocks > 1U)
 8006078:	f1b9 0f01 	cmp.w	r9, #1
 800607c:	d92b      	bls.n	80060d6 <HAL_SD_WriteBlocks+0xb4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800607e:	2320      	movs	r3, #32
 8006080:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8006082:	4629      	mov	r1, r5
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	f002 fa85 	bl	8008594 <SDMMC_CmdWriteMultiBlock>
 800608a:	4683      	mov	fp, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 800608c:	f1bb 0f00 	cmp.w	fp, #0
 8006090:	d029      	beq.n	80060e6 <HAL_SD_WriteBlocks+0xc4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006098:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800609a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800609c:	ea40 000b 	orr.w	r0, r0, fp
 80060a0:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80060a8:	e0ac      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060b0:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80060b2:	2701      	movs	r7, #1
 80060b4:	e0a6      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060bc:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80060be:	e0a1      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80060c6:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060ca:	4303      	orrs	r3, r0
 80060cc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80060d4:	e096      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80060d6:	2310      	movs	r3, #16
 80060d8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80060da:	4629      	mov	r1, r5
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	f002 fa41 	bl	8008564 <SDMMC_CmdWriteSingleBlock>
 80060e2:	4683      	mov	fp, r0
 80060e4:	e7d2      	b.n	800608c <HAL_SD_WriteBlocks+0x6a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ea:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80060ec:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80060f0:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060f2:	2390      	movs	r3, #144	; 0x90
 80060f4:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80060f6:	2300      	movs	r3, #0
 80060f8:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060fa:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80060fc:	2301      	movs	r3, #1
 80060fe:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8006100:	4669      	mov	r1, sp
 8006102:	6820      	ldr	r0, [r4, #0]
 8006104:	f002 f980 	bl	8008408 <SDMMC_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006108:	e011      	b.n	800612e <HAL_SD_WriteBlocks+0x10c>
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 800610a:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	f002 f80b 	bl	800812a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006114:	3501      	adds	r5, #1
 8006116:	2d07      	cmp	r5, #7
 8006118:	d9f7      	bls.n	800610a <HAL_SD_WriteBlocks+0xe8>
        tempbuff += 8U;
 800611a:	3620      	adds	r6, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800611c:	f1ba 0f00 	cmp.w	sl, #0
 8006120:	d00f      	beq.n	8006142 <HAL_SD_WriteBlocks+0x120>
 8006122:	f7fb f88f 	bl	8001244 <HAL_GetTick>
 8006126:	eba0 0008 	sub.w	r0, r0, r8
 800612a:	4550      	cmp	r0, sl
 800612c:	d209      	bcs.n	8006142 <HAL_SD_WriteBlocks+0x120>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800612e:	6820      	ldr	r0, [r4, #0]
 8006130:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006132:	f415 758d 	ands.w	r5, r5, #282	; 0x11a
 8006136:	d111      	bne.n	800615c <HAL_SD_WriteBlocks+0x13a>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8006138:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800613a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800613e:	d0ed      	beq.n	800611c <HAL_SD_WriteBlocks+0xfa>
 8006140:	e7e9      	b.n	8006116 <HAL_SD_WriteBlocks+0xf4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800614a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800614c:	ea40 000b 	orr.w	r0, r0, fp
 8006150:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006152:	2301      	movs	r3, #1
 8006154:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8006158:	2703      	movs	r7, #3
 800615a:	e053      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800615c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800615e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006162:	d005      	beq.n	8006170 <HAL_SD_WriteBlocks+0x14e>
 8006164:	f1b9 0f01 	cmp.w	r9, #1
 8006168:	d902      	bls.n	8006170 <HAL_SD_WriteBlocks+0x14e>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800616a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800616c:	2b03      	cmp	r3, #3
 800616e:	d117      	bne.n	80061a0 <HAL_SD_WriteBlocks+0x17e>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006174:	f012 0f08 	tst.w	r2, #8
 8006178:	d121      	bne.n	80061be <HAL_SD_WriteBlocks+0x19c>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800617a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617c:	f012 0f02 	tst.w	r2, #2
 8006180:	d128      	bne.n	80061d4 <HAL_SD_WriteBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006184:	f012 0f10 	tst.w	r2, #16
 8006188:	d02f      	beq.n	80061ea <HAL_SD_WriteBlocks+0x1c8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800618a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006192:	f043 0310 	orr.w	r3, r3, #16
 8006196:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006198:	2301      	movs	r3, #1
 800619a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 800619e:	e031      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061a0:	f002 fa10 	bl	80085c4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d0e3      	beq.n	8006170 <HAL_SD_WriteBlocks+0x14e>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	f240 51ff 	movw	r1, #1535	; 0x5ff
 80061ae:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80061b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061b2:	4303      	orrs	r3, r0
 80061b4:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_ERROR;
 80061bc:	e022      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80061c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061c6:	f043 0308 	orr.w	r3, r3, #8
 80061ca:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80061d2:	e017      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80061da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80061e8:	e00c      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80061f6:	2700      	movs	r7, #0
 80061f8:	e004      	b.n	8006204 <HAL_SD_WriteBlocks+0x1e2>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80061fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006200:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006202:	2701      	movs	r7, #1
}
 8006204:	4638      	mov	r0, r7
 8006206:	b007      	add	sp, #28
 8006208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800620c <HAL_SD_GetCardCSD>:
{
 800620c:	b410      	push	{r4}
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800620e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006210:	0f9a      	lsrs	r2, r3, #30
 8006212:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8006214:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8006218:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800621a:	f3c3 6301 	ubfx	r3, r3, #24, #2
 800621e:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8006220:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8006224:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8006226:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 800622a:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800622c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8006230:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8006232:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	80cb      	strh	r3, [r1, #6]
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 800623a:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800623e:	88cb      	ldrh	r3, [r1, #6]
 8006240:	b29b      	uxth	r3, r3
 8006242:	f3c2 1403 	ubfx	r4, r2, #4, #4
 8006246:	4323      	orrs	r3, r4
 8006248:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800624a:	f002 020f 	and.w	r2, r2, #15
 800624e:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8006250:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8006254:	09da      	lsrs	r2, r3, #7
 8006256:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8006258:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800625c:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800625e:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8006262:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8006264:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8006268:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800626a:	2200      	movs	r2, #0
 800626c:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800626e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006270:	2a00      	cmp	r2, #0
 8006272:	f040 808f 	bne.w	8006394 <HAL_SD_GetCardCSD+0x188>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800627c:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 800627e:	690b      	ldr	r3, [r1, #16]
 8006280:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 8006284:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8006288:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800628a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800628c:	690a      	ldr	r2, [r1, #16]
 800628e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8006292:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8006294:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 8006298:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800629a:	f3c3 6302 	ubfx	r3, r3, #24, #3
 800629e:	754b      	strb	r3, [r1, #21]
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80062a0:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80062a4:	095a      	lsrs	r2, r3, #5
 80062a6:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80062a8:	f3c3 0282 	ubfx	r2, r3, #2, #3
 80062ac:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	f003 0306 	and.w	r3, r3, #6
 80062b4:	760b      	strb	r3, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80062b6:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80062ba:	7e0a      	ldrb	r2, [r1, #24]
 80062bc:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 80062c0:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80062c2:	690a      	ldr	r2, [r1, #16]
 80062c4:	3201      	adds	r2, #1
 80062c6:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80062c8:	7e0c      	ldrb	r4, [r1, #24]
 80062ca:	3402      	adds	r4, #2
 80062cc:	40a2      	lsls	r2, r4
 80062ce:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80062d0:	7a0c      	ldrb	r4, [r1, #8]
 80062d2:	fa5f fc84 	uxtb.w	ip, r4
 80062d6:	2401      	movs	r4, #1
 80062d8:	fa04 f40c 	lsl.w	r4, r4, ip
 80062dc:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80062de:	0a64      	lsrs	r4, r4, #9
 80062e0:	fb04 f202 	mul.w	r2, r4, r2
 80062e4:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 80062e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ea:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80062ec:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80062f0:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80062f8:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80062fa:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80062fe:	7e8a      	ldrb	r2, [r1, #26]
 8006300:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 8006304:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8006306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630a:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800630c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800630e:	0e1a      	lsrs	r2, r3, #24
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006310:	0fdc      	lsrs	r4, r3, #31
 8006312:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8006314:	f3c3 7441 	ubfx	r4, r3, #29, #2
 8006318:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800631a:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800631e:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006320:	0093      	lsls	r3, r2, #2
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	77cb      	strb	r3, [r1, #31]
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8006328:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800632c:	7fca      	ldrb	r2, [r1, #31]
 800632e:	ea42 1293 	orr.w	r2, r2, r3, lsr #6
 8006332:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006334:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8006338:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 800633c:	2200      	movs	r2, #0
 800633e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800634a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800634e:	09dc      	lsrs	r4, r3, #7
 8006350:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8006354:	f3c3 1480 	ubfx	r4, r3, #6, #1
 8006358:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800635c:	f3c3 1440 	ubfx	r4, r3, #5, #1
 8006360:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8006364:	f3c3 1400 	ubfx	r4, r3, #4, #1
 8006368:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800636c:	f3c3 0481 	ubfx	r4, r3, #2, #2
 8006370:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8006374:	f003 0303 	and.w	r3, r3, #3
 8006378:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800637c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8006380:	085b      	lsrs	r3, r3, #1
 8006382:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006386:	2301      	movs	r3, #1
 8006388:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  return HAL_OK;
 800638c:	4610      	mov	r0, r2
}
 800638e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006392:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006394:	2a01      	cmp	r2, #1
 8006396:	d11c      	bne.n	80063d2 <HAL_SD_GetCardCSD+0x1c6>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8006398:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800639c:	041b      	lsls	r3, r3, #16
 800639e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80063a2:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80063a4:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    pCSD->DeviceSize |= (tmp << 8);
 80063a8:	690b      	ldr	r3, [r1, #16]
 80063aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80063ae:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80063b0:	690a      	ldr	r2, [r1, #16]
 80063b2:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 80063b6:	4313      	orrs	r3, r2
 80063b8:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80063ba:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80063be:	690a      	ldr	r2, [r1, #16]
 80063c0:	3201      	adds	r2, #1
 80063c2:	0292      	lsls	r2, r2, #10
 80063c4:	6542      	str	r2, [r0, #84]	; 0x54
 80063c6:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80063c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063cc:	6582      	str	r2, [r0, #88]	; 0x58
 80063ce:	6602      	str	r2, [r0, #96]	; 0x60
 80063d0:	e78c      	b.n	80062ec <HAL_SD_GetCardCSD+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80063d2:	6803      	ldr	r3, [r0, #0]
 80063d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e0:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063e2:	2201      	movs	r2, #1
 80063e4:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    return HAL_ERROR;
 80063e8:	4610      	mov	r0, r2
 80063ea:	e7d0      	b.n	800638e <HAL_SD_GetCardCSD+0x182>

080063ec <SD_InitCard>:
{
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	b090      	sub	sp, #64	; 0x40
 80063f0:	4604      	mov	r4, r0
  uint16_t sd_rca = 1;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80063f8:	6800      	ldr	r0, [r0, #0]
 80063fa:	f001 fe9f 	bl	800813c <SDMMC_GetPowerState>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d06a      	beq.n	80064d8 <SD_InitCard+0xec>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006402:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006404:	2b03      	cmp	r3, #3
 8006406:	d143      	bne.n	8006490 <SD_InitCard+0xa4>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006408:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800640a:	2b03      	cmp	r3, #3
 800640c:	d15b      	bne.n	80064c6 <SD_InitCard+0xda>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800640e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006410:	2b03      	cmp	r3, #3
 8006412:	d01d      	beq.n	8006450 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006414:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8006418:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800641a:	0409      	lsls	r1, r1, #16
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	f002 f9a4 	bl	800876a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006422:	4605      	mov	r5, r0
 8006424:	2800      	cmp	r0, #0
 8006426:	d159      	bne.n	80064dc <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006428:	2100      	movs	r1, #0
 800642a:	6820      	ldr	r0, [r4, #0]
 800642c:	f001 fed6 	bl	80081dc <SDMMC_GetResponse>
 8006430:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006432:	2104      	movs	r1, #4
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	f001 fed1 	bl	80081dc <SDMMC_GetResponse>
 800643a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800643c:	2108      	movs	r1, #8
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	f001 fecc 	bl	80081dc <SDMMC_GetResponse>
 8006444:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006446:	210c      	movs	r1, #12
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	f001 fec7 	bl	80081dc <SDMMC_GetResponse>
 800644e:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8006450:	2104      	movs	r1, #4
 8006452:	6820      	ldr	r0, [r4, #0]
 8006454:	f001 fec2 	bl	80081dc <SDMMC_GetResponse>
 8006458:	0d00      	lsrs	r0, r0, #20
 800645a:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 800645c:	a905      	add	r1, sp, #20
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff fed4 	bl	800620c <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8006464:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006466:	0412      	lsls	r2, r2, #16
 8006468:	2300      	movs	r3, #0
 800646a:	6820      	ldr	r0, [r4, #0]
 800646c:	f002 f8c4 	bl	80085f8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006470:	4605      	mov	r5, r0
 8006472:	bb98      	cbnz	r0, 80064dc <SD_InitCard+0xf0>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8006474:	4623      	mov	r3, r4
 8006476:	f853 6b10 	ldr.w	r6, [r3], #16
 800647a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800647e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006482:	3404      	adds	r4, #4
 8006484:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8006488:	4630      	mov	r0, r6
 800648a:	f001 fddd 	bl	8008048 <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 800648e:	e025      	b.n	80064dc <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006490:	6820      	ldr	r0, [r4, #0]
 8006492:	f002 f955 	bl	8008740 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006496:	4605      	mov	r5, r0
 8006498:	bb00      	cbnz	r0, 80064dc <SD_InitCard+0xf0>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800649a:	2100      	movs	r1, #0
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	f001 fe9d 	bl	80081dc <SDMMC_GetResponse>
 80064a2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80064a4:	2104      	movs	r1, #4
 80064a6:	6820      	ldr	r0, [r4, #0]
 80064a8:	f001 fe98 	bl	80081dc <SDMMC_GetResponse>
 80064ac:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80064ae:	2108      	movs	r1, #8
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	f001 fe93 	bl	80081dc <SDMMC_GetResponse>
 80064b6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80064b8:	210c      	movs	r1, #12
 80064ba:	6820      	ldr	r0, [r4, #0]
 80064bc:	f001 fe8e 	bl	80081dc <SDMMC_GetResponse>
 80064c0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80064c4:	e7a0      	b.n	8006408 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80064c6:	f10d 0112 	add.w	r1, sp, #18
 80064ca:	6820      	ldr	r0, [r4, #0]
 80064cc:	f002 f962 	bl	8008794 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80064d0:	4605      	mov	r5, r0
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d09b      	beq.n	800640e <SD_InitCard+0x22>
 80064d6:	e001      	b.n	80064dc <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064d8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 80064dc:	4628      	mov	r0, r5
 80064de:	b010      	add	sp, #64	; 0x40
 80064e0:	bd70      	pop	{r4, r5, r6, pc}

080064e2 <HAL_SD_InitCard>:
{
 80064e2:	b510      	push	{r4, lr}
 80064e4:	b08a      	sub	sp, #40	; 0x28
 80064e6:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064e8:	2300      	movs	r3, #0
 80064ea:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80064ec:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064ee:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80064f0:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80064f2:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80064f4:	2376      	movs	r3, #118	; 0x76
 80064f6:	9309      	str	r3, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 80064f8:	ab0a      	add	r3, sp, #40	; 0x28
 80064fa:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80064fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006502:	ab04      	add	r3, sp, #16
 8006504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	f001 fd9e 	bl	8008048 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	6853      	ldr	r3, [r2, #4]
 8006510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006514:	6053      	str	r3, [r2, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8006516:	6820      	ldr	r0, [r4, #0]
 8006518:	f001 fe0c 	bl	8008134 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	6853      	ldr	r3, [r2, #4]
 8006520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006524:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8006526:	2002      	movs	r0, #2
 8006528:	f7fa fe92 	bl	8001250 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 800652c:	4620      	mov	r0, r4
 800652e:	f7ff fb20 	bl	8005b72 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006532:	b140      	cbz	r0, 8006546 <HAL_SD_InitCard+0x64>
 8006534:	4602      	mov	r2, r0
    hsd->State = HAL_SD_STATE_READY;
 8006536:	2001      	movs	r0, #1
 8006538:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800653c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800653e:	4313      	orrs	r3, r2
 8006540:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006542:	b00a      	add	sp, #40	; 0x28
 8006544:	bd10      	pop	{r4, pc}
  errorstate = SD_InitCard(hsd);
 8006546:	4620      	mov	r0, r4
 8006548:	f7ff ff50 	bl	80063ec <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800654c:	4602      	mov	r2, r0
 800654e:	b908      	cbnz	r0, 8006554 <HAL_SD_InitCard+0x72>
  return HAL_OK;
 8006550:	2000      	movs	r0, #0
 8006552:	e7f6      	b.n	8006542 <HAL_SD_InitCard+0x60>
    hsd->State = HAL_SD_STATE_READY;
 8006554:	2001      	movs	r0, #1
 8006556:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800655a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800655c:	4313      	orrs	r3, r2
 800655e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006560:	e7ef      	b.n	8006542 <HAL_SD_InitCard+0x60>
	...

08006564 <HAL_SD_Init>:
  if(hsd == NULL)
 8006564:	2800      	cmp	r0, #0
 8006566:	d067      	beq.n	8006638 <HAL_SD_Init+0xd4>
{
 8006568:	b510      	push	{r4, lr}
 800656a:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 800656c:	6802      	ldr	r2, [r0, #0]
 800656e:	4b33      	ldr	r3, [pc, #204]	; (800663c <HAL_SD_Init+0xd8>)
 8006570:	429a      	cmp	r2, r3
 8006572:	d004      	beq.n	800657e <HAL_SD_Init+0x1a>
 8006574:	f240 1155 	movw	r1, #341	; 0x155
 8006578:	4831      	ldr	r0, [pc, #196]	; (8006640 <HAL_SD_Init+0xdc>)
 800657a:	f00d ffa7 	bl	80144cc <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800657e:	6863      	ldr	r3, [r4, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	bf18      	it	ne
 8006584:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 8006588:	d12d      	bne.n	80065e6 <HAL_SD_Init+0x82>
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 800658a:	68a3      	ldr	r3, [r4, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	bf18      	it	ne
 8006590:	f5b3 6f80 	cmpne.w	r3, #1024	; 0x400
 8006594:	d12d      	bne.n	80065f2 <HAL_SD_Init+0x8e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8006596:	68e3      	ldr	r3, [r4, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	bf18      	it	ne
 800659c:	f5b3 7f00 	cmpne.w	r3, #512	; 0x200
 80065a0:	d12d      	bne.n	80065fe <HAL_SD_Init+0x9a>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bf18      	it	ne
 80065a8:	f5b3 6f00 	cmpne.w	r3, #2048	; 0x800
 80065ac:	d002      	beq.n	80065b4 <HAL_SD_Init+0x50>
 80065ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b2:	d12a      	bne.n	800660a <HAL_SD_Init+0xa6>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 80065b4:	6963      	ldr	r3, [r4, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bf18      	it	ne
 80065ba:	f5b3 4f80 	cmpne.w	r3, #16384	; 0x4000
 80065be:	d12a      	bne.n	8006616 <HAL_SD_Init+0xb2>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 80065c0:	69a3      	ldr	r3, [r4, #24]
 80065c2:	2bff      	cmp	r3, #255	; 0xff
 80065c4:	d82d      	bhi.n	8006622 <HAL_SD_Init+0xbe>
  if(hsd->State == HAL_SD_STATE_RESET)
 80065c6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80065ca:	b383      	cbz	r3, 800662e <HAL_SD_Init+0xca>
  hsd->State = HAL_SD_STATE_BUSY;
 80065cc:	2303      	movs	r3, #3
 80065ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7ff ff85 	bl	80064e2 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80065d8:	2000      	movs	r0, #0
 80065da:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80065dc:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80065de:	2301      	movs	r3, #1
 80065e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80065e4:	bd10      	pop	{r4, pc}
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 80065e6:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80065ea:	4815      	ldr	r0, [pc, #84]	; (8006640 <HAL_SD_Init+0xdc>)
 80065ec:	f00d ff6e 	bl	80144cc <assert_failed>
 80065f0:	e7cb      	b.n	800658a <HAL_SD_Init+0x26>
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 80065f2:	f240 1157 	movw	r1, #343	; 0x157
 80065f6:	4812      	ldr	r0, [pc, #72]	; (8006640 <HAL_SD_Init+0xdc>)
 80065f8:	f00d ff68 	bl	80144cc <assert_failed>
 80065fc:	e7cb      	b.n	8006596 <HAL_SD_Init+0x32>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 80065fe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8006602:	480f      	ldr	r0, [pc, #60]	; (8006640 <HAL_SD_Init+0xdc>)
 8006604:	f00d ff62 	bl	80144cc <assert_failed>
 8006608:	e7cb      	b.n	80065a2 <HAL_SD_Init+0x3e>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800660a:	f240 1159 	movw	r1, #345	; 0x159
 800660e:	480c      	ldr	r0, [pc, #48]	; (8006640 <HAL_SD_Init+0xdc>)
 8006610:	f00d ff5c 	bl	80144cc <assert_failed>
 8006614:	e7ce      	b.n	80065b4 <HAL_SD_Init+0x50>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8006616:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800661a:	4809      	ldr	r0, [pc, #36]	; (8006640 <HAL_SD_Init+0xdc>)
 800661c:	f00d ff56 	bl	80144cc <assert_failed>
 8006620:	e7ce      	b.n	80065c0 <HAL_SD_Init+0x5c>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8006622:	f240 115b 	movw	r1, #347	; 0x15b
 8006626:	4806      	ldr	r0, [pc, #24]	; (8006640 <HAL_SD_Init+0xdc>)
 8006628:	f00d ff50 	bl	80144cc <assert_failed>
 800662c:	e7cb      	b.n	80065c6 <HAL_SD_Init+0x62>
    hsd->Lock = HAL_UNLOCKED;
 800662e:	7723      	strb	r3, [r4, #28]
    HAL_SD_MspInit(hsd);
 8006630:	4620      	mov	r0, r4
 8006632:	f00f fac1 	bl	8015bb8 <HAL_SD_MspInit>
 8006636:	e7c9      	b.n	80065cc <HAL_SD_Init+0x68>
    return HAL_ERROR;
 8006638:	2001      	movs	r0, #1
}
 800663a:	4770      	bx	lr
 800663c:	40012c00 	.word	0x40012c00
 8006640:	08019b98 	.word	0x08019b98

08006644 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006644:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006646:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006648:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800664a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800664c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800664e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006650:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006652:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006654:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006656:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006658:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800665a:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800665c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800665e:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006660:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006662:	61cb      	str	r3, [r1, #28]
}
 8006664:	2000      	movs	r0, #0
 8006666:	4770      	bx	lr

08006668 <HAL_SD_ConfigWideBusOperation>:
{
 8006668:	b530      	push	{r4, r5, lr}
 800666a:	b08b      	sub	sp, #44	; 0x2c
 800666c:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800666e:	460d      	mov	r5, r1
 8006670:	2900      	cmp	r1, #0
 8006672:	bf18      	it	ne
 8006674:	f5b1 6f00 	cmpne.w	r1, #2048	; 0x800
 8006678:	d002      	beq.n	8006680 <HAL_SD_ConfigWideBusOperation+0x18>
 800667a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800667e:	d111      	bne.n	80066a4 <HAL_SD_ConfigWideBusOperation+0x3c>
  hsd->State = HAL_SD_STATE_BUSY;
 8006680:	2303      	movs	r3, #3
 8006682:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006686:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006688:	2b03      	cmp	r3, #3
 800668a:	d024      	beq.n	80066d6 <HAL_SD_ConfigWideBusOperation+0x6e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800668c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8006690:	d00e      	beq.n	80066b0 <HAL_SD_ConfigWideBusOperation+0x48>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006692:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006696:	d010      	beq.n	80066ba <HAL_SD_ConfigWideBusOperation+0x52>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006698:	b1b5      	cbz	r5, 80066c8 <HAL_SD_ConfigWideBusOperation+0x60>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800669a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800669c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80066a2:	e01c      	b.n	80066de <HAL_SD_ConfigWideBusOperation+0x76>
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 80066a4:	f640 01b6 	movw	r1, #2230	; 0x8b6
 80066a8:	481f      	ldr	r0, [pc, #124]	; (8006728 <HAL_SD_ConfigWideBusOperation+0xc0>)
 80066aa:	f00d ff0f 	bl	80144cc <assert_failed>
 80066ae:	e7e7      	b.n	8006680 <HAL_SD_ConfigWideBusOperation+0x18>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80066b8:	e011      	b.n	80066de <HAL_SD_ConfigWideBusOperation+0x76>
      errorstate = SD_WideBus_Enable(hsd);
 80066ba:	4620      	mov	r0, r4
 80066bc:	f7ff fb40 	bl	8005d40 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80066c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066c2:	4303      	orrs	r3, r0
 80066c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80066c6:	e00a      	b.n	80066de <HAL_SD_ConfigWideBusOperation+0x76>
      errorstate = SD_WideBus_Disable(hsd);
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff fb60 	bl	8005d8e <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80066ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066d0:	4303      	orrs	r3, r0
 80066d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80066d4:	e003      	b.n	80066de <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066dc:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066e0:	b143      	cbz	r3, 80066f4 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066ea:	2001      	movs	r0, #1
 80066ec:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80066f0:	b00b      	add	sp, #44	; 0x2c
 80066f2:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80066f8:	68a3      	ldr	r3, [r4, #8]
 80066fa:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80066fc:	68e3      	ldr	r3, [r4, #12]
 80066fe:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8006700:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006702:	6963      	ldr	r3, [r4, #20]
 8006704:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006706:	69a3      	ldr	r3, [r4, #24]
 8006708:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 800670a:	ab0a      	add	r3, sp, #40	; 0x28
 800670c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006710:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006714:	ab04      	add	r3, sp, #16
 8006716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	f001 fc95 	bl	8008048 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800671e:	2301      	movs	r3, #1
 8006720:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8006724:	2000      	movs	r0, #0
 8006726:	e7e3      	b.n	80066f0 <HAL_SD_ConfigWideBusOperation+0x88>
 8006728:	08019b98 	.word	0x08019b98

0800672c <HAL_SD_GetCardState>:
{
 800672c:	b510      	push	{r4, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8006736:	a901      	add	r1, sp, #4
 8006738:	f7ff fb50 	bl	8005ddc <SD_SendStatus>
  if(errorstate != HAL_OK)
 800673c:	b110      	cbz	r0, 8006744 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 800673e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006740:	4303      	orrs	r3, r0
 8006742:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006744:	9801      	ldr	r0, [sp, #4]
 8006746:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800674a:	b002      	add	sp, #8
 800674c:	bd10      	pop	{r4, pc}

0800674e <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800674e:	b1e0      	cbz	r0, 800678a <HAL_SDRAM_Init+0x3c>
{   
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	460d      	mov	r5, r1
 8006754:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006756:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800675a:	b18b      	cbz	r3, 8006780 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800675c:	2302      	movs	r3, #2
 800675e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006762:	4621      	mov	r1, r4
 8006764:	f851 0b04 	ldr.w	r0, [r1], #4
 8006768:	f001 fa00 	bl	8007b6c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800676c:	6862      	ldr	r2, [r4, #4]
 800676e:	4629      	mov	r1, r5
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	f001 fabf 	bl	8007cf4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006776:	2301      	movs	r3, #1
 8006778:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 800677c:	2000      	movs	r0, #0
}
 800677e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006780:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006784:	f00c fe76 	bl	8013474 <HAL_SDRAM_MspInit>
 8006788:	e7e8      	b.n	800675c <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800678a:	2001      	movs	r0, #1
}
 800678c:	4770      	bx	lr

0800678e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800678e:	b538      	push	{r3, r4, r5, lr}
 8006790:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006792:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8006796:	b2c0      	uxtb	r0, r0
 8006798:	2802      	cmp	r0, #2
 800679a:	d00d      	beq.n	80067b8 <HAL_SDRAM_SendCommand+0x2a>
 800679c:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800679e:	2302      	movs	r3, #2
 80067a0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	f001 fb4d 	bl	8007e44 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d004      	beq.n	80067ba <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80067b6:	2000      	movs	r0, #0
}
 80067b8:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80067ba:	2305      	movs	r3, #5
 80067bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 80067c0:	2000      	movs	r0, #0
 80067c2:	e7f9      	b.n	80067b8 <HAL_SDRAM_SendCommand+0x2a>

080067c4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80067c4:	b510      	push	{r4, lr}
 80067c6:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80067c8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80067cc:	b2c0      	uxtb	r0, r0
 80067ce:	2802      	cmp	r0, #2
 80067d0:	d009      	beq.n	80067e6 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067d2:	2302      	movs	r3, #2
 80067d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	f001 fb7f 	bl	8007edc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80067de:	2301      	movs	r3, #1
 80067e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80067e4:	2000      	movs	r0, #0
}
 80067e6:	bd10      	pop	{r4, pc}

080067e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	4606      	mov	r6, r0
 80067ee:	4688      	mov	r8, r1
 80067f0:	4617      	mov	r7, r2
 80067f2:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067f4:	6834      	ldr	r4, [r6, #0]
 80067f6:	68a4      	ldr	r4, [r4, #8]
 80067f8:	ea38 0304 	bics.w	r3, r8, r4
 80067fc:	bf0c      	ite	eq
 80067fe:	f04f 0c01 	moveq.w	ip, #1
 8006802:	f04f 0c00 	movne.w	ip, #0
 8006806:	45bc      	cmp	ip, r7
 8006808:	d037      	beq.n	800687a <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 800680a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800680e:	d0f1      	beq.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006810:	f7fa fd18 	bl	8001244 <HAL_GetTick>
 8006814:	9b06      	ldr	r3, [sp, #24]
 8006816:	1ac0      	subs	r0, r0, r3
 8006818:	42a8      	cmp	r0, r5
 800681a:	d201      	bcs.n	8006820 <SPI_WaitFlagStateUntilTimeout+0x38>
 800681c:	2d00      	cmp	r5, #0
 800681e:	d1e9      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006820:	6832      	ldr	r2, [r6, #0]
 8006822:	6853      	ldr	r3, [r2, #4]
 8006824:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006828:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682a:	6873      	ldr	r3, [r6, #4]
 800682c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006830:	d00b      	beq.n	800684a <SPI_WaitFlagStateUntilTimeout+0x62>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006832:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006838:	d014      	beq.n	8006864 <SPI_WaitFlagStateUntilTimeout+0x7c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800683a:	2301      	movs	r3, #1
 800683c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006840:	2300      	movs	r3, #0
 8006842:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006846:	2003      	movs	r0, #3
 8006848:	e018      	b.n	800687c <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800684a:	68b3      	ldr	r3, [r6, #8]
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006850:	bf18      	it	ne
 8006852:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8006856:	d1ec      	bne.n	8006832 <SPI_WaitFlagStateUntilTimeout+0x4a>
          __HAL_SPI_DISABLE(hspi);
 8006858:	6832      	ldr	r2, [r6, #0]
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e7e6      	b.n	8006832 <SPI_WaitFlagStateUntilTimeout+0x4a>
          SPI_RESET_CRC(hspi);
 8006864:	6832      	ldr	r2, [r6, #0]
 8006866:	6813      	ldr	r3, [r2, #0]
 8006868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	6832      	ldr	r2, [r6, #0]
 8006870:	6813      	ldr	r3, [r2, #0]
 8006872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e7df      	b.n	800683a <SPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }

  return HAL_OK;
 800687a:	2000      	movs	r0, #0
}
 800687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006880 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006884:	4681      	mov	r9, r0
 8006886:	460f      	mov	r7, r1
 8006888:	4616      	mov	r6, r2
 800688a:	4698      	mov	r8, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800688c:	e002      	b.n	8006894 <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 800688e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006892:	d10d      	bne.n	80068b0 <SPI_WaitFifoStateUntilTimeout+0x30>
  while ((hspi->Instance->SR & Fifo) != State)
 8006894:	f8d9 5000 	ldr.w	r5, [r9]
 8006898:	68ac      	ldr	r4, [r5, #8]
 800689a:	ea04 0c07 	and.w	ip, r4, r7
 800689e:	45b4      	cmp	ip, r6
 80068a0:	d043      	beq.n	800692a <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068a2:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 80068a6:	bf08      	it	eq
 80068a8:	2e00      	cmpeq	r6, #0
 80068aa:	d1f0      	bne.n	800688e <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80068ac:	7b2b      	ldrb	r3, [r5, #12]
 80068ae:	e7ee      	b.n	800688e <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80068b0:	f7fa fcc8 	bl	8001244 <HAL_GetTick>
 80068b4:	9b08      	ldr	r3, [sp, #32]
 80068b6:	1ac0      	subs	r0, r0, r3
 80068b8:	4540      	cmp	r0, r8
 80068ba:	d202      	bcs.n	80068c2 <SPI_WaitFifoStateUntilTimeout+0x42>
 80068bc:	f1b8 0f00 	cmp.w	r8, #0
 80068c0:	d1e8      	bne.n	8006894 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068c2:	f8d9 2000 	ldr.w	r2, [r9]
 80068c6:	6853      	ldr	r3, [r2, #4]
 80068c8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80068cc:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80068d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d6:	d00c      	beq.n	80068f2 <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068d8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80068dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e0:	d016      	beq.n	8006910 <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068e8:	2300      	movs	r3, #0
 80068ea:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068ee:	2003      	movs	r0, #3
 80068f0:	e01c      	b.n	800692c <SPI_WaitFifoStateUntilTimeout+0xac>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80068f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fa:	bf18      	it	ne
 80068fc:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8006900:	d1ea      	bne.n	80068d8 <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8006902:	f8d9 2000 	ldr.w	r2, [r9]
 8006906:	6813      	ldr	r3, [r2, #0]
 8006908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e7e3      	b.n	80068d8 <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8006910:	f8d9 2000 	ldr.w	r2, [r9]
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	f8d9 2000 	ldr.w	r2, [r9]
 8006920:	6813      	ldr	r3, [r2, #0]
 8006922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	e7db      	b.n	80068e2 <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 800692a:	2000      	movs	r0, #0
}
 800692c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	4604      	mov	r4, r0
 8006936:	460d      	mov	r5, r1
 8006938:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800693a:	9200      	str	r2, [sp, #0]
 800693c:	460b      	mov	r3, r1
 800693e:	2200      	movs	r2, #0
 8006940:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006944:	f7ff ff9c 	bl	8006880 <SPI_WaitFifoStateUntilTimeout>
 8006948:	b9b0      	cbnz	r0, 8006978 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800694a:	9600      	str	r6, [sp, #0]
 800694c:	462b      	mov	r3, r5
 800694e:	2200      	movs	r2, #0
 8006950:	2180      	movs	r1, #128	; 0x80
 8006952:	4620      	mov	r0, r4
 8006954:	f7ff ff48 	bl	80067e8 <SPI_WaitFlagStateUntilTimeout>
 8006958:	b9a8      	cbnz	r0, 8006986 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800695a:	9600      	str	r6, [sp, #0]
 800695c:	462b      	mov	r3, r5
 800695e:	2200      	movs	r2, #0
 8006960:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006964:	4620      	mov	r0, r4
 8006966:	f7ff ff8b 	bl	8006880 <SPI_WaitFifoStateUntilTimeout>
 800696a:	b150      	cbz	r0, 8006982 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800696c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800696e:	f043 0320 	orr.w	r3, r3, #32
 8006972:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8006974:	2003      	movs	r0, #3
 8006976:	e004      	b.n	8006982 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006978:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800697a:	f043 0320 	orr.w	r3, r3, #32
 800697e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8006980:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8006982:	b002      	add	sp, #8
 8006984:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006986:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006988:	f043 0320 	orr.w	r3, r3, #32
 800698c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800698e:	2003      	movs	r0, #3
 8006990:	e7f7      	b.n	8006982 <SPI_EndRxTxTransaction+0x52>
	...

08006994 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006994:	2800      	cmp	r0, #0
 8006996:	f000 8127 	beq.w	8006be8 <HAL_SPI_Init+0x254>
{
 800699a:	b510      	push	{r4, lr}
 800699c:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800699e:	6803      	ldr	r3, [r0, #0]
 80069a0:	4992      	ldr	r1, [pc, #584]	; (8006bec <HAL_SPI_Init+0x258>)
 80069a2:	4a93      	ldr	r2, [pc, #588]	; (8006bf0 <HAL_SPI_Init+0x25c>)
 80069a4:	428b      	cmp	r3, r1
 80069a6:	bf18      	it	ne
 80069a8:	4293      	cmpne	r3, r2
 80069aa:	d014      	beq.n	80069d6 <HAL_SPI_Init+0x42>
 80069ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d010      	beq.n	80069d6 <HAL_SPI_Init+0x42>
 80069b4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00c      	beq.n	80069d6 <HAL_SPI_Init+0x42>
 80069bc:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d008      	beq.n	80069d6 <HAL_SPI_Init+0x42>
 80069c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d004      	beq.n	80069d6 <HAL_SPI_Init+0x42>
 80069cc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80069d0:	4888      	ldr	r0, [pc, #544]	; (8006bf4 <HAL_SPI_Init+0x260>)
 80069d2:	f00d fd7b 	bl	80144cc <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80069d6:	6863      	ldr	r3, [r4, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bf18      	it	ne
 80069dc:	f5b3 7f82 	cmpne.w	r3, #260	; 0x104
 80069e0:	f040 80ba 	bne.w	8006b58 <HAL_SPI_Init+0x1c4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80069e4:	68a3      	ldr	r3, [r4, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bf18      	it	ne
 80069ea:	f5b3 6f80 	cmpne.w	r3, #1024	; 0x400
 80069ee:	d003      	beq.n	80069f8 <HAL_SPI_Init+0x64>
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f4:	f040 80b6 	bne.w	8006b64 <HAL_SPI_Init+0x1d0>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80069f8:	68e3      	ldr	r3, [r4, #12]
 80069fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80069fe:	bf18      	it	ne
 8006a00:	f5b3 6f60 	cmpne.w	r3, #3584	; 0xe00
 8006a04:	d021      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a06:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8006a0a:	d01e      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a10:	d01b      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a12:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8006a16:	d018      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a18:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006a1c:	d015      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a1e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8006a22:	d012      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a28:	d00f      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a2e:	d00c      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a34:	d009      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a36:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006a3a:	d006      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a40:	d003      	beq.n	8006a4a <HAL_SPI_Init+0xb6>
 8006a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a46:	f040 8093 	bne.w	8006b70 <HAL_SPI_Init+0x1dc>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006a4a:	69a3      	ldr	r3, [r4, #24]
 8006a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a50:	bf18      	it	ne
 8006a52:	2b00      	cmpne	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_SPI_Init+0xca>
 8006a56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a5a:	f040 808f 	bne.w	8006b7c <HAL_SPI_Init+0x1e8>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	bf18      	it	ne
 8006a64:	2b00      	cmpne	r3, #0
 8006a66:	f040 808f 	bne.w	8006b88 <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006a6a:	69e3      	ldr	r3, [r4, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf18      	it	ne
 8006a70:	2b08      	cmpne	r3, #8
 8006a72:	d00c      	beq.n	8006a8e <HAL_SPI_Init+0xfa>
 8006a74:	2b10      	cmp	r3, #16
 8006a76:	d00a      	beq.n	8006a8e <HAL_SPI_Init+0xfa>
 8006a78:	2b18      	cmp	r3, #24
 8006a7a:	d008      	beq.n	8006a8e <HAL_SPI_Init+0xfa>
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d006      	beq.n	8006a8e <HAL_SPI_Init+0xfa>
 8006a80:	2b28      	cmp	r3, #40	; 0x28
 8006a82:	d004      	beq.n	8006a8e <HAL_SPI_Init+0xfa>
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d002      	beq.n	8006a8e <HAL_SPI_Init+0xfa>
 8006a88:	2b38      	cmp	r3, #56	; 0x38
 8006a8a:	f040 8083 	bne.w	8006b94 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006a8e:	6a23      	ldr	r3, [r4, #32]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	bf18      	it	ne
 8006a94:	2b80      	cmpne	r3, #128	; 0x80
 8006a96:	f040 8083 	bne.w	8006ba0 <HAL_SPI_Init+0x20c>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bf18      	it	ne
 8006aa0:	2b10      	cmpne	r3, #16
 8006aa2:	f040 8083 	bne.w	8006bac <HAL_SPI_Init+0x218>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aa8:	b94b      	cbnz	r3, 8006abe <HAL_SPI_Init+0x12a>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf18      	it	ne
 8006ab0:	2b02      	cmpne	r3, #2
 8006ab2:	f040 8081 	bne.w	8006bb8 <HAL_SPI_Init+0x224>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006ab6:	6963      	ldr	r3, [r4, #20]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	f200 8083 	bhi.w	8006bc4 <HAL_SPI_Init+0x230>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ac2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8082 	beq.w	8006bd0 <HAL_SPI_Init+0x23c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006acc:	2302      	movs	r3, #2
 8006ace:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	6813      	ldr	r3, [r2, #0]
 8006ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ada:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006adc:	68e3      	ldr	r3, [r4, #12]
 8006ade:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ae2:	d97b      	bls.n	8006bdc <HAL_SPI_Init+0x248>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ae4:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ae6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006aea:	bf18      	it	ne
 8006aec:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8006af0:	d001      	beq.n	8006af6 <HAL_SPI_Init+0x162>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006af2:	2100      	movs	r1, #0
 8006af4:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006af6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006af8:	b921      	cbnz	r1, 8006b04 <HAL_SPI_Init+0x170>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006afa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006afe:	d970      	bls.n	8006be2 <HAL_SPI_Init+0x24e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006b00:	2302      	movs	r3, #2
 8006b02:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006b04:	6863      	ldr	r3, [r4, #4]
 8006b06:	68a1      	ldr	r1, [r4, #8]
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6921      	ldr	r1, [r4, #16]
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	6961      	ldr	r1, [r4, #20]
 8006b10:	430b      	orrs	r3, r1
 8006b12:	69a1      	ldr	r1, [r4, #24]
 8006b14:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	69e1      	ldr	r1, [r4, #28]
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6a21      	ldr	r1, [r4, #32]
 8006b20:	430b      	orrs	r3, r1
 8006b22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006b24:	6821      	ldr	r1, [r4, #0]
 8006b26:	4303      	orrs	r3, r0
 8006b28:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006b2a:	8b63      	ldrh	r3, [r4, #26]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b32:	430b      	orrs	r3, r1
 8006b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b36:	430b      	orrs	r3, r1
 8006b38:	68e1      	ldr	r1, [r4, #12]
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	6821      	ldr	r1, [r4, #0]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b42:	6822      	ldr	r2, [r4, #0]
 8006b44:	69d3      	ldr	r3, [r2, #28]
 8006b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b4a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8006b56:	bd10      	pop	{r4, pc}
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006b58:	f240 1145 	movw	r1, #325	; 0x145
 8006b5c:	4825      	ldr	r0, [pc, #148]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006b5e:	f00d fcb5 	bl	80144cc <assert_failed>
 8006b62:	e73f      	b.n	80069e4 <HAL_SPI_Init+0x50>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006b64:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006b68:	4822      	ldr	r0, [pc, #136]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006b6a:	f00d fcaf 	bl	80144cc <assert_failed>
 8006b6e:	e743      	b.n	80069f8 <HAL_SPI_Init+0x64>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006b70:	f240 1147 	movw	r1, #327	; 0x147
 8006b74:	481f      	ldr	r0, [pc, #124]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006b76:	f00d fca9 	bl	80144cc <assert_failed>
 8006b7a:	e766      	b.n	8006a4a <HAL_SPI_Init+0xb6>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006b7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b80:	481c      	ldr	r0, [pc, #112]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006b82:	f00d fca3 	bl	80144cc <assert_failed>
 8006b86:	e76a      	b.n	8006a5e <HAL_SPI_Init+0xca>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006b88:	f240 1149 	movw	r1, #329	; 0x149
 8006b8c:	4819      	ldr	r0, [pc, #100]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006b8e:	f00d fc9d 	bl	80144cc <assert_failed>
 8006b92:	e76a      	b.n	8006a6a <HAL_SPI_Init+0xd6>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006b94:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006b98:	4816      	ldr	r0, [pc, #88]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006b9a:	f00d fc97 	bl	80144cc <assert_failed>
 8006b9e:	e776      	b.n	8006a8e <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006ba0:	f240 114b 	movw	r1, #331	; 0x14b
 8006ba4:	4813      	ldr	r0, [pc, #76]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006ba6:	f00d fc91 	bl	80144cc <assert_failed>
 8006baa:	e776      	b.n	8006a9a <HAL_SPI_Init+0x106>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006bac:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006bb0:	4810      	ldr	r0, [pc, #64]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006bb2:	f00d fc8b 	bl	80144cc <assert_failed>
 8006bb6:	e776      	b.n	8006aa6 <HAL_SPI_Init+0x112>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006bb8:	f240 114f 	movw	r1, #335	; 0x14f
 8006bbc:	480d      	ldr	r0, [pc, #52]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006bbe:	f00d fc85 	bl	80144cc <assert_failed>
 8006bc2:	e778      	b.n	8006ab6 <HAL_SPI_Init+0x122>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006bc4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8006bc8:	480a      	ldr	r0, [pc, #40]	; (8006bf4 <HAL_SPI_Init+0x260>)
 8006bca:	f00d fc7f 	bl	80144cc <assert_failed>
 8006bce:	e776      	b.n	8006abe <HAL_SPI_Init+0x12a>
    hspi->Lock = HAL_UNLOCKED;
 8006bd0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f00f f86f 	bl	8015cb8 <HAL_SPI_MspInit>
 8006bda:	e777      	b.n	8006acc <HAL_SPI_Init+0x138>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006be0:	e781      	b.n	8006ae6 <HAL_SPI_Init+0x152>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006be2:	2301      	movs	r3, #1
 8006be4:	6323      	str	r3, [r4, #48]	; 0x30
 8006be6:	e78d      	b.n	8006b04 <HAL_SPI_Init+0x170>
    return HAL_ERROR;
 8006be8:	2001      	movs	r0, #1
}
 8006bea:	4770      	bx	lr
 8006bec:	40013000 	.word	0x40013000
 8006bf0:	40003800 	.word	0x40003800
 8006bf4:	08019bd0 	.word	0x08019bd0

08006bf8 <HAL_SPI_TransmitReceive_IT>:
{
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	4616      	mov	r6, r2
 8006c00:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006c02:	6883      	ldr	r3, [r0, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d14e      	bne.n	8006ca6 <HAL_SPI_TransmitReceive_IT+0xae>
  __HAL_LOCK(hspi);
 8006c08:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d06a      	beq.n	8006ce6 <HAL_SPI_TransmitReceive_IT+0xee>
 8006c10:	2301      	movs	r3, #1
 8006c12:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8006c16:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006c1a:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8006c1c:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d007      	beq.n	8006c32 <HAL_SPI_TransmitReceive_IT+0x3a>
 8006c22:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006c26:	d14f      	bne.n	8006cc8 <HAL_SPI_TransmitReceive_IT+0xd0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c28:	68a2      	ldr	r2, [r4, #8]
 8006c2a:	2a00      	cmp	r2, #0
 8006c2c:	d151      	bne.n	8006cd2 <HAL_SPI_TransmitReceive_IT+0xda>
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d151      	bne.n	8006cd6 <HAL_SPI_TransmitReceive_IT+0xde>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	bf18      	it	ne
 8006c36:	2f00      	cmpne	r7, #0
 8006c38:	d04f      	beq.n	8006cda <HAL_SPI_TransmitReceive_IT+0xe2>
 8006c3a:	2d00      	cmp	r5, #0
 8006c3c:	d04f      	beq.n	8006cde <HAL_SPI_TransmitReceive_IT+0xe6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c3e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d002      	beq.n	8006c4e <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c48:	2305      	movs	r3, #5
 8006c4a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c52:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006c54:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006c56:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c58:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c5a:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006c5e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c62:	68e3      	ldr	r3, [r4, #12]
 8006c64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c68:	d923      	bls.n	8006cb2 <HAL_SPI_TransmitReceive_IT+0xba>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006c6a:	4a20      	ldr	r2, [pc, #128]	; (8006cec <HAL_SPI_TransmitReceive_IT+0xf4>)
 8006c6c:	64e2      	str	r2, [r4, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006c6e:	4a20      	ldr	r2, [pc, #128]	; (8006cf0 <HAL_SPI_TransmitReceive_IT+0xf8>)
 8006c70:	6522      	str	r2, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006c72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c76:	d801      	bhi.n	8006c7c <HAL_SPI_TransmitReceive_IT+0x84>
 8006c78:	2d01      	cmp	r5, #1
 8006c7a:	d91f      	bls.n	8006cbc <HAL_SPI_TransmitReceive_IT+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	6853      	ldr	r3, [r2, #4]
 8006c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c84:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	6853      	ldr	r3, [r2, #4]
 8006c8a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8006c8e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006c98:	d123      	bne.n	8006ce2 <HAL_SPI_TransmitReceive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e011      	b.n	8006cca <HAL_SPI_TransmitReceive_IT+0xd2>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006ca6:	f240 619a 	movw	r1, #1690	; 0x69a
 8006caa:	4812      	ldr	r0, [pc, #72]	; (8006cf4 <HAL_SPI_TransmitReceive_IT+0xfc>)
 8006cac:	f00d fc0e 	bl	80144cc <assert_failed>
 8006cb0:	e7aa      	b.n	8006c08 <HAL_SPI_TransmitReceive_IT+0x10>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006cb2:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <HAL_SPI_TransmitReceive_IT+0x100>)
 8006cb4:	64e2      	str	r2, [r4, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006cb6:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <HAL_SPI_TransmitReceive_IT+0x104>)
 8006cb8:	6522      	str	r2, [r4, #80]	; 0x50
 8006cba:	e7da      	b.n	8006c72 <HAL_SPI_TransmitReceive_IT+0x7a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cbc:	6822      	ldr	r2, [r4, #0]
 8006cbe:	6853      	ldr	r3, [r2, #4]
 8006cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cc4:	6053      	str	r3, [r2, #4]
 8006cc6:	e7de      	b.n	8006c86 <HAL_SPI_TransmitReceive_IT+0x8e>
    errorcode = HAL_BUSY;
 8006cc8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 8006cd2:	2002      	movs	r0, #2
 8006cd4:	e7f9      	b.n	8006cca <HAL_SPI_TransmitReceive_IT+0xd2>
 8006cd6:	2002      	movs	r0, #2
 8006cd8:	e7f7      	b.n	8006cca <HAL_SPI_TransmitReceive_IT+0xd2>
    errorcode = HAL_ERROR;
 8006cda:	2001      	movs	r0, #1
 8006cdc:	e7f5      	b.n	8006cca <HAL_SPI_TransmitReceive_IT+0xd2>
 8006cde:	2001      	movs	r0, #1
 8006ce0:	e7f3      	b.n	8006cca <HAL_SPI_TransmitReceive_IT+0xd2>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e7f1      	b.n	8006cca <HAL_SPI_TransmitReceive_IT+0xd2>
  __HAL_LOCK(hspi);
 8006ce6:	2002      	movs	r0, #2
 8006ce8:	e7f2      	b.n	8006cd0 <HAL_SPI_TransmitReceive_IT+0xd8>
 8006cea:	bf00      	nop
 8006cec:	08006e73 	.word	0x08006e73
 8006cf0:	08006e39 	.word	0x08006e39
 8006cf4:	08019bd0 	.word	0x08019bd0
 8006cf8:	08006dbf 	.word	0x08006dbf
 8006cfc:	08006d63 	.word	0x08006d63

08006d00 <HAL_SPI_RxCpltCallback>:
}
 8006d00:	4770      	bx	lr

08006d02 <HAL_SPI_ErrorCallback>:
}
 8006d02:	4770      	bx	lr

08006d04 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006d04:	b510      	push	{r4, lr}
 8006d06:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d08:	f7fa fa9c 	bl	8001244 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d0e:	6821      	ldr	r1, [r4, #0]
 8006d10:	684b      	ldr	r3, [r1, #4]
 8006d12:	f023 0320 	bic.w	r3, r3, #32
 8006d16:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d18:	2164      	movs	r1, #100	; 0x64
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f7ff fe08 	bl	8006930 <SPI_EndRxTxTransaction>
 8006d20:	b118      	cbz	r0, 8006d2a <SPI_CloseRxTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d22:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006d24:	f043 0320 	orr.w	r3, r3, #32
 8006d28:	6623      	str	r3, [r4, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006d2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006d2c:	b993      	cbnz	r3, 8006d54 <SPI_CloseRxTx_ISR+0x50>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006d2e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d006      	beq.n	8006d46 <SPI_CloseRxTx_ISR+0x42>
        HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
      else
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->TxRxCpltCallback(hspi);
#else
        HAL_SPI_TxRxCpltCallback(hspi);
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f00f ffba 	bl	8016cb8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006d44:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f7ff ffd7 	bl	8006d00 <HAL_SPI_RxCpltCallback>
 8006d52:	e7f7      	b.n	8006d44 <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 8006d54:	2301      	movs	r3, #1
 8006d56:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff ffd1 	bl	8006d02 <HAL_SPI_ErrorCallback>
}
 8006d60:	e7f0      	b.n	8006d44 <SPI_CloseRxTx_ISR+0x40>

08006d62 <SPI_2linesTxISR_8BIT>:
{
 8006d62:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 8006d64:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d918      	bls.n	8006d9e <SPI_2linesTxISR_8BIT+0x3c>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d6c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006d6e:	6803      	ldr	r3, [r0, #0]
 8006d70:	8812      	ldrh	r2, [r2, #0]
 8006d72:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006d76:	3302      	adds	r3, #2
 8006d78:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006d7a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b02      	subs	r3, #2
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8006d84:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	b943      	cbnz	r3, 8006d9c <SPI_2linesTxISR_8BIT+0x3a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006d8a:	6802      	ldr	r2, [r0, #0]
 8006d8c:	6853      	ldr	r3, [r2, #4]
 8006d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d92:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8006d94:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	b16b      	cbz	r3, 8006db8 <SPI_2linesTxISR_8BIT+0x56>
}
 8006d9c:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d9e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006da0:	6803      	ldr	r3, [r0, #0]
 8006da2:	7812      	ldrb	r2, [r2, #0]
 8006da4:	731a      	strb	r2, [r3, #12]
    hspi->pTxBuffPtr++;
 8006da6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006da8:	3301      	adds	r3, #1
 8006daa:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8006dac:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	3b01      	subs	r3, #1
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8006db6:	e7e5      	b.n	8006d84 <SPI_2linesTxISR_8BIT+0x22>
      SPI_CloseRxTx_ISR(hspi);
 8006db8:	f7ff ffa4 	bl	8006d04 <SPI_CloseRxTx_ISR>
}
 8006dbc:	e7ee      	b.n	8006d9c <SPI_2linesTxISR_8BIT+0x3a>

08006dbe <SPI_2linesRxISR_8BIT>:
{
 8006dbe:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 8006dc0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d918      	bls.n	8006dfc <SPI_2linesRxISR_8BIT+0x3e>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006dca:	6803      	ldr	r3, [r0, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006dd0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dd2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006dd8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b02      	subs	r3, #2
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006de6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d113      	bne.n	8006e18 <SPI_2linesRxISR_8BIT+0x5a>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006df0:	6802      	ldr	r2, [r0, #0]
 8006df2:	6853      	ldr	r3, [r2, #4]
 8006df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006df8:	6053      	str	r3, [r2, #4]
 8006dfa:	e00d      	b.n	8006e18 <SPI_2linesRxISR_8BIT+0x5a>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006dfc:	6802      	ldr	r2, [r0, #0]
 8006dfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e00:	7b12      	ldrb	r2, [r2, #12]
 8006e02:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006e04:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e06:	3301      	adds	r3, #1
 8006e08:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8006e0a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8006e18:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	b93b      	cbnz	r3, 8006e30 <SPI_2linesRxISR_8BIT+0x72>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006e20:	6802      	ldr	r2, [r0, #0]
 8006e22:	6853      	ldr	r3, [r2, #4]
 8006e24:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e28:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8006e2a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	b103      	cbz	r3, 8006e32 <SPI_2linesRxISR_8BIT+0x74>
}
 8006e30:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8006e32:	f7ff ff67 	bl	8006d04 <SPI_CloseRxTx_ISR>
}
 8006e36:	e7fb      	b.n	8006e30 <SPI_2linesRxISR_8BIT+0x72>

08006e38 <SPI_2linesTxISR_16BIT>:
{
 8006e38:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e3a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006e3c:	6803      	ldr	r3, [r0, #0]
 8006e3e:	8812      	ldrh	r2, [r2, #0]
 8006e40:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e42:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006e44:	3302      	adds	r3, #2
 8006e46:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8006e48:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8006e52:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	b943      	cbnz	r3, 8006e6a <SPI_2linesTxISR_16BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006e58:	6802      	ldr	r2, [r0, #0]
 8006e5a:	6853      	ldr	r3, [r2, #4]
 8006e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e60:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8006e62:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	b103      	cbz	r3, 8006e6c <SPI_2linesTxISR_16BIT+0x34>
}
 8006e6a:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8006e6c:	f7ff ff4a 	bl	8006d04 <SPI_CloseRxTx_ISR>
}
 8006e70:	e7fb      	b.n	8006e6a <SPI_2linesTxISR_16BIT+0x32>

08006e72 <SPI_2linesRxISR_16BIT>:
{
 8006e72:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006e74:	6803      	ldr	r3, [r0, #0]
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e7a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e7e:	3302      	adds	r3, #2
 8006e80:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8006e82:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8006e90:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	b93b      	cbnz	r3, 8006ea8 <SPI_2linesRxISR_16BIT+0x36>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006e98:	6802      	ldr	r2, [r0, #0]
 8006e9a:	6853      	ldr	r3, [r2, #4]
 8006e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea0:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8006ea2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	b103      	cbz	r3, 8006eaa <SPI_2linesRxISR_16BIT+0x38>
}
 8006ea8:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8006eaa:	f7ff ff2b 	bl	8006d04 <SPI_CloseRxTx_ISR>
}
 8006eae:	e7fb      	b.n	8006ea8 <SPI_2linesRxISR_16BIT+0x36>

08006eb0 <HAL_SPI_IRQHandler>:
{
 8006eb0:	b530      	push	{r4, r5, lr}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8006eb6:	6802      	ldr	r2, [r0, #0]
 8006eb8:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8006eba:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ebc:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8006ec0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ec4:	d105      	bne.n	8006ed2 <HAL_SPI_IRQHandler+0x22>
 8006ec6:	f013 0f01 	tst.w	r3, #1
 8006eca:	d002      	beq.n	8006ed2 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ecc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006ed0:	d169      	bne.n	8006fa6 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ed2:	f013 0f02 	tst.w	r3, #2
 8006ed6:	d002      	beq.n	8006ede <HAL_SPI_IRQHandler+0x2e>
 8006ed8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006edc:	d167      	bne.n	8006fae <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ede:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8006ee2:	f013 0f20 	tst.w	r3, #32
 8006ee6:	d103      	bne.n	8006ef0 <HAL_SPI_IRQHandler+0x40>
 8006ee8:	b910      	cbnz	r0, 8006ef0 <HAL_SPI_IRQHandler+0x40>
 8006eea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006eee:	d061      	beq.n	8006fb4 <HAL_SPI_IRQHandler+0x104>
 8006ef0:	f011 0f20 	tst.w	r1, #32
 8006ef4:	d05e      	beq.n	8006fb4 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ef6:	b178      	cbz	r0, 8006f18 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ef8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8006efc:	b2c0      	uxtb	r0, r0
 8006efe:	2803      	cmp	r0, #3
 8006f00:	d05a      	beq.n	8006fb8 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f02:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006f04:	f040 0004 	orr.w	r0, r0, #4
 8006f08:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	9000      	str	r0, [sp, #0]
 8006f0e:	68d0      	ldr	r0, [r2, #12]
 8006f10:	9000      	str	r0, [sp, #0]
 8006f12:	6890      	ldr	r0, [r2, #8]
 8006f14:	9000      	str	r0, [sp, #0]
 8006f16:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006f18:	b165      	cbz	r5, 8006f34 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f1a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006f1c:	f040 0001 	orr.w	r0, r0, #1
 8006f20:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f22:	2000      	movs	r0, #0
 8006f24:	9002      	str	r0, [sp, #8]
 8006f26:	6890      	ldr	r0, [r2, #8]
 8006f28:	9002      	str	r0, [sp, #8]
 8006f2a:	6810      	ldr	r0, [r2, #0]
 8006f2c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8006f30:	6010      	str	r0, [r2, #0]
 8006f32:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006f34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006f38:	d009      	beq.n	8006f4e <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f3a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f3c:	f043 0308 	orr.w	r3, r3, #8
 8006f40:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f42:	2300      	movs	r3, #0
 8006f44:	9303      	str	r3, [sp, #12]
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	9303      	str	r3, [sp, #12]
 8006f4c:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d02f      	beq.n	8006fb4 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006f54:	6822      	ldr	r2, [r4, #0]
 8006f56:	6853      	ldr	r3, [r2, #4]
 8006f58:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006f5c:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006f64:	f011 0f03 	tst.w	r1, #3
 8006f68:	d02e      	beq.n	8006fc8 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	6853      	ldr	r3, [r2, #4]
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8006f74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f76:	b14b      	cbz	r3, 8006f8c <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <HAL_SPI_IRQHandler+0x120>)
 8006f7a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f7e:	f7fa fcaf 	bl	80018e0 <HAL_DMA_Abort_IT>
 8006f82:	b118      	cbz	r0, 8006f8c <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f8a:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006f8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f8e:	b18b      	cbz	r3, 8006fb4 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f90:	4a0f      	ldr	r2, [pc, #60]	; (8006fd0 <HAL_SPI_IRQHandler+0x120>)
 8006f92:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f96:	f7fa fca3 	bl	80018e0 <HAL_DMA_Abort_IT>
 8006f9a:	b158      	cbz	r0, 8006fb4 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa2:	6623      	str	r3, [r4, #96]	; 0x60
 8006fa4:	e006      	b.n	8006fb4 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8006fa6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006fa8:	4620      	mov	r0, r4
 8006faa:	4798      	blx	r3
    return;
 8006fac:	e002      	b.n	8006fb4 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 8006fae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	4798      	blx	r3
}
 8006fb4:	b005      	add	sp, #20
 8006fb6:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	68d3      	ldr	r3, [r2, #12]
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	6893      	ldr	r3, [r2, #8]
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	9b01      	ldr	r3, [sp, #4]
        return;
 8006fc6:	e7f5      	b.n	8006fb4 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7ff fe9a 	bl	8006d02 <HAL_SPI_ErrorCallback>
    return;
 8006fce:	e7f1      	b.n	8006fb4 <HAL_SPI_IRQHandler+0x104>
 8006fd0:	08006fd5 	.word	0x08006fd5

08006fd4 <SPI_DMAAbortOnError>:
{
 8006fd4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006fd6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006fde:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8006fe0:	f7ff fe8f 	bl	8006d02 <HAL_SPI_ErrorCallback>
}
 8006fe4:	bd08      	pop	{r3, pc}

08006fe6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fe8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fea:	6a04      	ldr	r4, [r0, #32]
 8006fec:	f024 0401 	bic.w	r4, r4, #1
 8006ff0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff2:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ff4:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ff8:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ffc:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8007000:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007002:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007004:	6203      	str	r3, [r0, #32]
}
 8007006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800700a:	4770      	bx	lr

0800700c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800700c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700e:	6a04      	ldr	r4, [r0, #32]
 8007010:	f024 0410 	bic.w	r4, r4, #16
 8007014:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007016:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8007018:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800701a:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800701e:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007022:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007026:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800702a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800702c:	6203      	str	r3, [r0, #32]
}
 800702e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007032:	4770      	bx	lr

08007034 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007034:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800703a:	430b      	orrs	r3, r1
 800703c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007040:	6083      	str	r3, [r0, #8]
}
 8007042:	4770      	bx	lr

08007044 <HAL_TIM_Base_Start_IT>:
{
 8007044:	b510      	push	{r4, lr}
 8007046:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007048:	6803      	ldr	r3, [r0, #0]
 800704a:	4a27      	ldr	r2, [pc, #156]	; (80070e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	bf18      	it	ne
 8007050:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007054:	d034      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 8007056:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800705a:	4293      	cmp	r3, r2
 800705c:	d030      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 800705e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007062:	4293      	cmp	r3, r2
 8007064:	d02c      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 8007066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800706a:	4293      	cmp	r3, r2
 800706c:	d028      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 800706e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007072:	4293      	cmp	r3, r2
 8007074:	d024      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 8007076:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800707a:	4293      	cmp	r3, r2
 800707c:	d020      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 800707e:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007082:	4293      	cmp	r3, r2
 8007084:	d01c      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 8007086:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800708a:	4293      	cmp	r3, r2
 800708c:	d018      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 800708e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007092:	4293      	cmp	r3, r2
 8007094:	d014      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 8007096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800709a:	4293      	cmp	r3, r2
 800709c:	d010      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 800709e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00c      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 80070a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d008      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 80070ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d004      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x7c>
 80070b6:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80070ba:	480c      	ldr	r0, [pc, #48]	; (80070ec <HAL_TIM_Base_Start_IT+0xa8>)
 80070bc:	f00d fa06 	bl	80144cc <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	68d3      	ldr	r3, [r2, #12]
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ca:	6822      	ldr	r2, [r4, #0]
 80070cc:	6891      	ldr	r1, [r2, #8]
 80070ce:	4b08      	ldr	r3, [pc, #32]	; (80070f0 <HAL_TIM_Base_Start_IT+0xac>)
 80070d0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d2:	2b06      	cmp	r3, #6
 80070d4:	bf18      	it	ne
 80070d6:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80070da:	d003      	beq.n	80070e4 <HAL_TIM_Base_Start_IT+0xa0>
    __HAL_TIM_ENABLE(htim);
 80070dc:	6813      	ldr	r3, [r2, #0]
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	2000      	movs	r0, #0
 80070e6:	bd10      	pop	{r4, pc}
 80070e8:	40010000 	.word	0x40010000
 80070ec:	08019c08 	.word	0x08019c08
 80070f0:	00010007 	.word	0x00010007

080070f4 <HAL_TIM_Base_Stop_IT>:
{
 80070f4:	b510      	push	{r4, lr}
 80070f6:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80070f8:	6803      	ldr	r3, [r0, #0]
 80070fa:	4a28      	ldr	r2, [pc, #160]	; (800719c <HAL_TIM_Base_Stop_IT+0xa8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	bf18      	it	ne
 8007100:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007104:	d034      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 8007106:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800710a:	4293      	cmp	r3, r2
 800710c:	d030      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 800710e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007112:	4293      	cmp	r3, r2
 8007114:	d02c      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 8007116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800711a:	4293      	cmp	r3, r2
 800711c:	d028      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 800711e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007122:	4293      	cmp	r3, r2
 8007124:	d024      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 8007126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800712a:	4293      	cmp	r3, r2
 800712c:	d020      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 800712e:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007132:	4293      	cmp	r3, r2
 8007134:	d01c      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 8007136:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800713a:	4293      	cmp	r3, r2
 800713c:	d018      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 800713e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007142:	4293      	cmp	r3, r2
 8007144:	d014      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 8007146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800714a:	4293      	cmp	r3, r2
 800714c:	d010      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 800714e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007152:	4293      	cmp	r3, r2
 8007154:	d00c      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 8007156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800715a:	4293      	cmp	r3, r2
 800715c:	d008      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 800715e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007162:	4293      	cmp	r3, r2
 8007164:	d004      	beq.n	8007170 <HAL_TIM_Base_Stop_IT+0x7c>
 8007166:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800716a:	480d      	ldr	r0, [pc, #52]	; (80071a0 <HAL_TIM_Base_Stop_IT+0xac>)
 800716c:	f00d f9ae 	bl	80144cc <assert_failed>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	68d3      	ldr	r3, [r2, #12]
 8007174:	f023 0301 	bic.w	r3, r3, #1
 8007178:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	6a19      	ldr	r1, [r3, #32]
 800717e:	f241 1211 	movw	r2, #4369	; 0x1111
 8007182:	4211      	tst	r1, r2
 8007184:	d108      	bne.n	8007198 <HAL_TIM_Base_Stop_IT+0xa4>
 8007186:	6a19      	ldr	r1, [r3, #32]
 8007188:	f240 4244 	movw	r2, #1092	; 0x444
 800718c:	4211      	tst	r1, r2
 800718e:	d103      	bne.n	8007198 <HAL_TIM_Base_Stop_IT+0xa4>
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	f022 0201 	bic.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]
}
 8007198:	2000      	movs	r0, #0
 800719a:	bd10      	pop	{r4, pc}
 800719c:	40010000 	.word	0x40010000
 80071a0:	08019c08 	.word	0x08019c08

080071a4 <HAL_TIM_PeriodElapsedCallback>:
}
 80071a4:	4770      	bx	lr

080071a6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80071a6:	4770      	bx	lr

080071a8 <HAL_TIM_IC_CaptureCallback>:
}
 80071a8:	4770      	bx	lr

080071aa <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80071aa:	4770      	bx	lr

080071ac <HAL_TIM_TriggerCallback>:
}
 80071ac:	4770      	bx	lr

080071ae <HAL_TIM_IRQHandler>:
{
 80071ae:	b510      	push	{r4, lr}
 80071b0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071b2:	6803      	ldr	r3, [r0, #0]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	f012 0f02 	tst.w	r2, #2
 80071ba:	d011      	beq.n	80071e0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	f012 0f02 	tst.w	r2, #2
 80071c2:	d00d      	beq.n	80071e0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c4:	f06f 0202 	mvn.w	r2, #2
 80071c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071ce:	6803      	ldr	r3, [r0, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f013 0f03 	tst.w	r3, #3
 80071d6:	d079      	beq.n	80072cc <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80071d8:	f7ff ffe6 	bl	80071a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071dc:	2300      	movs	r3, #0
 80071de:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	f012 0f04 	tst.w	r2, #4
 80071e8:	d012      	beq.n	8007210 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	f012 0f04 	tst.w	r2, #4
 80071f0:	d00e      	beq.n	8007210 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071f2:	f06f 0204 	mvn.w	r2, #4
 80071f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071f8:	2302      	movs	r3, #2
 80071fa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007204:	d068      	beq.n	80072d8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007206:	4620      	mov	r0, r4
 8007208:	f7ff ffce 	bl	80071a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720c:	2300      	movs	r3, #0
 800720e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	f012 0f08 	tst.w	r2, #8
 8007218:	d012      	beq.n	8007240 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	f012 0f08 	tst.w	r2, #8
 8007220:	d00e      	beq.n	8007240 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007222:	f06f 0208 	mvn.w	r2, #8
 8007226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007228:	2304      	movs	r3, #4
 800722a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f013 0f03 	tst.w	r3, #3
 8007234:	d057      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8007236:	4620      	mov	r0, r4
 8007238:	f7ff ffb6 	bl	80071a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723c:	2300      	movs	r3, #0
 800723e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	f012 0f10 	tst.w	r2, #16
 8007248:	d012      	beq.n	8007270 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	f012 0f10 	tst.w	r2, #16
 8007250:	d00e      	beq.n	8007270 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007252:	f06f 0210 	mvn.w	r2, #16
 8007256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007258:	2308      	movs	r3, #8
 800725a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007264:	d046      	beq.n	80072f4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007266:	4620      	mov	r0, r4
 8007268:	f7ff ff9e 	bl	80071a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726c:	2300      	movs	r3, #0
 800726e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	f012 0f01 	tst.w	r2, #1
 8007278:	d003      	beq.n	8007282 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	f012 0f01 	tst.w	r2, #1
 8007280:	d13f      	bne.n	8007302 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	691a      	ldr	r2, [r3, #16]
 8007286:	f012 0f80 	tst.w	r2, #128	; 0x80
 800728a:	d003      	beq.n	8007294 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007292:	d13d      	bne.n	8007310 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	f412 7f80 	tst.w	r2, #256	; 0x100
 800729c:	d003      	beq.n	80072a6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80072a4:	d13b      	bne.n	800731e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80072ae:	d003      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80072b6:	d139      	bne.n	800732c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	f012 0f20 	tst.w	r2, #32
 80072c0:	d003      	beq.n	80072ca <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	f012 0f20 	tst.w	r2, #32
 80072c8:	d137      	bne.n	800733a <HAL_TIM_IRQHandler+0x18c>
}
 80072ca:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072cc:	f7ff ff6b 	bl	80071a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d0:	4620      	mov	r0, r4
 80072d2:	f7ff ff6a 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
 80072d6:	e781      	b.n	80071dc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d8:	4620      	mov	r0, r4
 80072da:	f7ff ff64 	bl	80071a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072de:	4620      	mov	r0, r4
 80072e0:	f7ff ff63 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
 80072e4:	e792      	b.n	800720c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e6:	4620      	mov	r0, r4
 80072e8:	f7ff ff5d 	bl	80071a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7ff ff5c 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
 80072f2:	e7a3      	b.n	800723c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f4:	4620      	mov	r0, r4
 80072f6:	f7ff ff56 	bl	80071a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fa:	4620      	mov	r0, r4
 80072fc:	f7ff ff55 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
 8007300:	e7b4      	b.n	800726c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007302:	f06f 0201 	mvn.w	r2, #1
 8007306:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007308:	4620      	mov	r0, r4
 800730a:	f7ff ff4b 	bl	80071a4 <HAL_TIM_PeriodElapsedCallback>
 800730e:	e7b8      	b.n	8007282 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007314:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fc25 	bl	8007b66 <HAL_TIMEx_BreakCallback>
 800731c:	e7ba      	b.n	8007294 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800731e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007322:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007324:	4620      	mov	r0, r4
 8007326:	f000 fc1f 	bl	8007b68 <HAL_TIMEx_Break2Callback>
 800732a:	e7bc      	b.n	80072a6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800732c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007330:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007332:	4620      	mov	r0, r4
 8007334:	f7ff ff3a 	bl	80071ac <HAL_TIM_TriggerCallback>
 8007338:	e7be      	b.n	80072b8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800733a:	f06f 0220 	mvn.w	r2, #32
 800733e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fc0f 	bl	8007b64 <HAL_TIMEx_CommutCallback>
}
 8007346:	e7c0      	b.n	80072ca <HAL_TIM_IRQHandler+0x11c>

08007348 <TIM_Base_SetConfig>:
{
 8007348:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800734a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800734c:	4a3b      	ldr	r2, [pc, #236]	; (800743c <TIM_Base_SetConfig+0xf4>)
 800734e:	4290      	cmp	r0, r2
 8007350:	bf14      	ite	ne
 8007352:	f04f 0e00 	movne.w	lr, #0
 8007356:	f04f 0e01 	moveq.w	lr, #1
 800735a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800735e:	bf14      	ite	ne
 8007360:	4672      	movne	r2, lr
 8007362:	f04e 0201 	orreq.w	r2, lr, #1
 8007366:	b9aa      	cbnz	r2, 8007394 <TIM_Base_SetConfig+0x4c>
 8007368:	4c35      	ldr	r4, [pc, #212]	; (8007440 <TIM_Base_SetConfig+0xf8>)
 800736a:	42a0      	cmp	r0, r4
 800736c:	bf14      	ite	ne
 800736e:	2400      	movne	r4, #0
 8007370:	2401      	moveq	r4, #1
 8007372:	4d34      	ldr	r5, [pc, #208]	; (8007444 <TIM_Base_SetConfig+0xfc>)
 8007374:	42a8      	cmp	r0, r5
 8007376:	d00d      	beq.n	8007394 <TIM_Base_SetConfig+0x4c>
 8007378:	b964      	cbnz	r4, 8007394 <TIM_Base_SetConfig+0x4c>
 800737a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800737e:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8007382:	42a0      	cmp	r0, r4
 8007384:	bf14      	ite	ne
 8007386:	2400      	movne	r4, #0
 8007388:	2401      	moveq	r4, #1
 800738a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800738e:	42a8      	cmp	r0, r5
 8007390:	d000      	beq.n	8007394 <TIM_Base_SetConfig+0x4c>
 8007392:	b11c      	cbz	r4, 800739c <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007398:	684c      	ldr	r4, [r1, #4]
 800739a:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800739c:	2a00      	cmp	r2, #0
 800739e:	d133      	bne.n	8007408 <TIM_Base_SetConfig+0xc0>
 80073a0:	4a27      	ldr	r2, [pc, #156]	; (8007440 <TIM_Base_SetConfig+0xf8>)
 80073a2:	4290      	cmp	r0, r2
 80073a4:	bf14      	ite	ne
 80073a6:	2200      	movne	r2, #0
 80073a8:	2201      	moveq	r2, #1
 80073aa:	4c26      	ldr	r4, [pc, #152]	; (8007444 <TIM_Base_SetConfig+0xfc>)
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d02b      	beq.n	8007408 <TIM_Base_SetConfig+0xc0>
 80073b0:	bb52      	cbnz	r2, 8007408 <TIM_Base_SetConfig+0xc0>
 80073b2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80073b6:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80073ba:	4290      	cmp	r0, r2
 80073bc:	bf14      	ite	ne
 80073be:	2200      	movne	r2, #0
 80073c0:	2201      	moveq	r2, #1
 80073c2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80073c6:	42a0      	cmp	r0, r4
 80073c8:	d01e      	beq.n	8007408 <TIM_Base_SetConfig+0xc0>
 80073ca:	b9ea      	cbnz	r2, 8007408 <TIM_Base_SetConfig+0xc0>
 80073cc:	4a1e      	ldr	r2, [pc, #120]	; (8007448 <TIM_Base_SetConfig+0x100>)
 80073ce:	4290      	cmp	r0, r2
 80073d0:	bf14      	ite	ne
 80073d2:	2200      	movne	r2, #0
 80073d4:	2201      	moveq	r2, #1
 80073d6:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80073da:	42a0      	cmp	r0, r4
 80073dc:	d014      	beq.n	8007408 <TIM_Base_SetConfig+0xc0>
 80073de:	b99a      	cbnz	r2, 8007408 <TIM_Base_SetConfig+0xc0>
 80073e0:	4a1a      	ldr	r2, [pc, #104]	; (800744c <TIM_Base_SetConfig+0x104>)
 80073e2:	4290      	cmp	r0, r2
 80073e4:	bf14      	ite	ne
 80073e6:	2200      	movne	r2, #0
 80073e8:	2201      	moveq	r2, #1
 80073ea:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80073ee:	42a0      	cmp	r0, r4
 80073f0:	d00a      	beq.n	8007408 <TIM_Base_SetConfig+0xc0>
 80073f2:	b94a      	cbnz	r2, 8007408 <TIM_Base_SetConfig+0xc0>
 80073f4:	4a16      	ldr	r2, [pc, #88]	; (8007450 <TIM_Base_SetConfig+0x108>)
 80073f6:	4290      	cmp	r0, r2
 80073f8:	bf14      	ite	ne
 80073fa:	2200      	movne	r2, #0
 80073fc:	2201      	moveq	r2, #1
 80073fe:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8007402:	42a0      	cmp	r0, r4
 8007404:	d000      	beq.n	8007408 <TIM_Base_SetConfig+0xc0>
 8007406:	b122      	cbz	r2, 8007412 <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007408:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800740c:	68cb      	ldr	r3, [r1, #12]
 800740e:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007416:	694a      	ldr	r2, [r1, #20]
 8007418:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800741a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800741c:	688a      	ldr	r2, [r1, #8]
 800741e:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007420:	680a      	ldr	r2, [r1, #0]
 8007422:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007424:	4a0b      	ldr	r2, [pc, #44]	; (8007454 <TIM_Base_SetConfig+0x10c>)
 8007426:	4290      	cmp	r0, r2
 8007428:	bf14      	ite	ne
 800742a:	4673      	movne	r3, lr
 800742c:	f04e 0301 	orreq.w	r3, lr, #1
 8007430:	b10b      	cbz	r3, 8007436 <TIM_Base_SetConfig+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 8007432:	690b      	ldr	r3, [r1, #16]
 8007434:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007436:	2301      	movs	r3, #1
 8007438:	6143      	str	r3, [r0, #20]
}
 800743a:	bd30      	pop	{r4, r5, pc}
 800743c:	40010000 	.word	0x40010000
 8007440:	40000800 	.word	0x40000800
 8007444:	40000400 	.word	0x40000400
 8007448:	40014400 	.word	0x40014400
 800744c:	40001800 	.word	0x40001800
 8007450:	40002000 	.word	0x40002000
 8007454:	40010400 	.word	0x40010400

08007458 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007458:	2800      	cmp	r0, #0
 800745a:	d07e      	beq.n	800755a <HAL_TIM_Base_Init+0x102>
{
 800745c:	b510      	push	{r4, lr}
 800745e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007460:	6803      	ldr	r3, [r0, #0]
 8007462:	4a3f      	ldr	r2, [pc, #252]	; (8007560 <HAL_TIM_Base_Init+0x108>)
 8007464:	4293      	cmp	r3, r2
 8007466:	bf18      	it	ne
 8007468:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800746c:	d034      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 800746e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007472:	4293      	cmp	r3, r2
 8007474:	d030      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 8007476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800747a:	4293      	cmp	r3, r2
 800747c:	d02c      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 800747e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007482:	4293      	cmp	r3, r2
 8007484:	d028      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 8007486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800748a:	4293      	cmp	r3, r2
 800748c:	d024      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 800748e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007492:	4293      	cmp	r3, r2
 8007494:	d020      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 8007496:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800749a:	4293      	cmp	r3, r2
 800749c:	d01c      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 800749e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d018      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 80074a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d014      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 80074ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d010      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 80074b6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00c      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 80074be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d008      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 80074c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d004      	beq.n	80074d8 <HAL_TIM_Base_Init+0x80>
 80074ce:	f240 110d 	movw	r1, #269	; 0x10d
 80074d2:	4824      	ldr	r0, [pc, #144]	; (8007564 <HAL_TIM_Base_Init+0x10c>)
 80074d4:	f00c fffa 	bl	80144cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80074d8:	68a3      	ldr	r3, [r4, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bf18      	it	ne
 80074de:	2b10      	cmpne	r3, #16
 80074e0:	d005      	beq.n	80074ee <HAL_TIM_Base_Init+0x96>
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d003      	beq.n	80074ee <HAL_TIM_Base_Init+0x96>
 80074e6:	2b40      	cmp	r3, #64	; 0x40
 80074e8:	d001      	beq.n	80074ee <HAL_TIM_Base_Init+0x96>
 80074ea:	2b60      	cmp	r3, #96	; 0x60
 80074ec:	d11d      	bne.n	800752a <HAL_TIM_Base_Init+0xd2>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bf18      	it	ne
 80074f4:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 80074f8:	d002      	beq.n	8007500 <HAL_TIM_Base_Init+0xa8>
 80074fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074fe:	d11a      	bne.n	8007536 <HAL_TIM_Base_Init+0xde>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007500:	69a3      	ldr	r3, [r4, #24]
 8007502:	2b00      	cmp	r3, #0
 8007504:	bf18      	it	ne
 8007506:	2b80      	cmpne	r3, #128	; 0x80
 8007508:	d11b      	bne.n	8007542 <HAL_TIM_Base_Init+0xea>
  if (htim->State == HAL_TIM_STATE_RESET)
 800750a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800750e:	b1f3      	cbz	r3, 800754e <HAL_TIM_Base_Init+0xf6>
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	2302      	movs	r3, #2
 8007512:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007516:	4621      	mov	r1, r4
 8007518:	f851 0b04 	ldr.w	r0, [r1], #4
 800751c:	f7ff ff14 	bl	8007348 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007520:	2301      	movs	r3, #1
 8007522:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007526:	2000      	movs	r0, #0
}
 8007528:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800752a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800752e:	480d      	ldr	r0, [pc, #52]	; (8007564 <HAL_TIM_Base_Init+0x10c>)
 8007530:	f00c ffcc 	bl	80144cc <assert_failed>
 8007534:	e7db      	b.n	80074ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007536:	f240 110f 	movw	r1, #271	; 0x10f
 800753a:	480a      	ldr	r0, [pc, #40]	; (8007564 <HAL_TIM_Base_Init+0x10c>)
 800753c:	f00c ffc6 	bl	80144cc <assert_failed>
 8007540:	e7de      	b.n	8007500 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007542:	f44f 7188 	mov.w	r1, #272	; 0x110
 8007546:	4807      	ldr	r0, [pc, #28]	; (8007564 <HAL_TIM_Base_Init+0x10c>)
 8007548:	f00c ffc0 	bl	80144cc <assert_failed>
 800754c:	e7dd      	b.n	800750a <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 800754e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007552:	4620      	mov	r0, r4
 8007554:	f010 fa14 	bl	8017980 <HAL_TIM_Base_MspInit>
 8007558:	e7da      	b.n	8007510 <HAL_TIM_Base_Init+0xb8>
    return HAL_ERROR;
 800755a:	2001      	movs	r0, #1
}
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40010000 	.word	0x40010000
 8007564:	08019c08 	.word	0x08019c08

08007568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007568:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800756a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800756c:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007570:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007574:	430a      	orrs	r2, r1
 8007576:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800757a:	6082      	str	r2, [r0, #8]
}
 800757c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <HAL_TIM_ConfigClockSource>:
{
 8007584:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007586:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	f000 8232 	beq.w	80079f4 <HAL_TIM_ConfigClockSource+0x470>
 8007590:	4604      	mov	r4, r0
 8007592:	460d      	mov	r5, r1
 8007594:	2301      	movs	r3, #1
 8007596:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800759a:	2302      	movs	r3, #2
 800759c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80075a0:	680b      	ldr	r3, [r1, #0]
 80075a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a6:	bf18      	it	ne
 80075a8:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 80075ac:	d00e      	beq.n	80075cc <HAL_TIM_ConfigClockSource+0x48>
 80075ae:	b16b      	cbz	r3, 80075cc <HAL_TIM_ConfigClockSource+0x48>
 80075b0:	2b10      	cmp	r3, #16
 80075b2:	d00b      	beq.n	80075cc <HAL_TIM_ConfigClockSource+0x48>
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d009      	beq.n	80075cc <HAL_TIM_ConfigClockSource+0x48>
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d007      	beq.n	80075cc <HAL_TIM_ConfigClockSource+0x48>
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	d005      	beq.n	80075cc <HAL_TIM_ConfigClockSource+0x48>
 80075c0:	2b50      	cmp	r3, #80	; 0x50
 80075c2:	d003      	beq.n	80075cc <HAL_TIM_ConfigClockSource+0x48>
 80075c4:	2b60      	cmp	r3, #96	; 0x60
 80075c6:	d001      	beq.n	80075cc <HAL_TIM_ConfigClockSource+0x48>
 80075c8:	2b70      	cmp	r3, #112	; 0x70
 80075ca:	d145      	bne.n	8007658 <HAL_TIM_ConfigClockSource+0xd4>
  tmpsmcr = htim->Instance->SMCR;
 80075cc:	6822      	ldr	r2, [r4, #0]
 80075ce:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d0:	4b88      	ldr	r3, [pc, #544]	; (80077f4 <HAL_TIM_ConfigClockSource+0x270>)
 80075d2:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 80075d4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80075d6:	682b      	ldr	r3, [r5, #0]
 80075d8:	2b60      	cmp	r3, #96	; 0x60
 80075da:	f000 818b 	beq.w	80078f4 <HAL_TIM_ConfigClockSource+0x370>
 80075de:	d871      	bhi.n	80076c4 <HAL_TIM_ConfigClockSource+0x140>
 80075e0:	2b40      	cmp	r3, #64	; 0x40
 80075e2:	f000 81c7 	beq.w	8007974 <HAL_TIM_ConfigClockSource+0x3f0>
 80075e6:	d93d      	bls.n	8007664 <HAL_TIM_ConfigClockSource+0xe0>
 80075e8:	2b50      	cmp	r3, #80	; 0x50
 80075ea:	d140      	bne.n	800766e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	4a82      	ldr	r2, [pc, #520]	; (80077f8 <HAL_TIM_ConfigClockSource+0x274>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	bf18      	it	ne
 80075f4:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80075f8:	d014      	beq.n	8007624 <HAL_TIM_ConfigClockSource+0xa0>
 80075fa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80075fe:	4293      	cmp	r3, r2
 8007600:	d010      	beq.n	8007624 <HAL_TIM_ConfigClockSource+0xa0>
 8007602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007606:	4293      	cmp	r3, r2
 8007608:	d00c      	beq.n	8007624 <HAL_TIM_ConfigClockSource+0xa0>
 800760a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800760e:	4293      	cmp	r3, r2
 8007610:	d008      	beq.n	8007624 <HAL_TIM_ConfigClockSource+0xa0>
 8007612:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007616:	4293      	cmp	r3, r2
 8007618:	d004      	beq.n	8007624 <HAL_TIM_ConfigClockSource+0xa0>
 800761a:	f241 2135 	movw	r1, #4661	; 0x1235
 800761e:	4877      	ldr	r0, [pc, #476]	; (80077fc <HAL_TIM_ConfigClockSource+0x278>)
 8007620:	f00c ff54 	bl	80144cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007624:	686b      	ldr	r3, [r5, #4]
 8007626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800762a:	bf18      	it	ne
 800762c:	2b00      	cmpne	r3, #0
 800762e:	d005      	beq.n	800763c <HAL_TIM_ConfigClockSource+0xb8>
 8007630:	b123      	cbz	r3, 800763c <HAL_TIM_ConfigClockSource+0xb8>
 8007632:	2b02      	cmp	r3, #2
 8007634:	d002      	beq.n	800763c <HAL_TIM_ConfigClockSource+0xb8>
 8007636:	2b0a      	cmp	r3, #10
 8007638:	f040 8150 	bne.w	80078dc <HAL_TIM_ConfigClockSource+0x358>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800763c:	68eb      	ldr	r3, [r5, #12]
 800763e:	2b0f      	cmp	r3, #15
 8007640:	f200 8152 	bhi.w	80078e8 <HAL_TIM_ConfigClockSource+0x364>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007644:	68ea      	ldr	r2, [r5, #12]
 8007646:	6869      	ldr	r1, [r5, #4]
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	f7ff fccc 	bl	8006fe6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800764e:	2150      	movs	r1, #80	; 0x50
 8007650:	6820      	ldr	r0, [r4, #0]
 8007652:	f7ff fcef 	bl	8007034 <TIM_ITRx_SetConfig>
      break;
 8007656:	e00a      	b.n	800766e <HAL_TIM_ConfigClockSource+0xea>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007658:	f241 11f6 	movw	r1, #4598	; 0x11f6
 800765c:	4867      	ldr	r0, [pc, #412]	; (80077fc <HAL_TIM_ConfigClockSource+0x278>)
 800765e:	f00c ff35 	bl	80144cc <assert_failed>
 8007662:	e7b3      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8007664:	2b20      	cmp	r3, #32
 8007666:	d00c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0xfe>
 8007668:	d908      	bls.n	800767c <HAL_TIM_ConfigClockSource+0xf8>
 800766a:	2b30      	cmp	r3, #48	; 0x30
 800766c:	d009      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0xfe>
  htim->State = HAL_TIM_STATE_READY;
 800766e:	2301      	movs	r3, #1
 8007670:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007674:	2000      	movs	r0, #0
 8007676:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800767a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800767c:	b10b      	cbz	r3, 8007682 <HAL_TIM_ConfigClockSource+0xfe>
 800767e:	2b10      	cmp	r3, #16
 8007680:	d1f5      	bne.n	800766e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	4a5c      	ldr	r2, [pc, #368]	; (80077f8 <HAL_TIM_ConfigClockSource+0x274>)
 8007686:	4293      	cmp	r3, r2
 8007688:	bf18      	it	ne
 800768a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800768e:	d014      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x136>
 8007690:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007694:	4293      	cmp	r3, r2
 8007696:	d010      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x136>
 8007698:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800769c:	4293      	cmp	r3, r2
 800769e:	d00c      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x136>
 80076a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d008      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x136>
 80076a8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x136>
 80076b0:	f241 2168 	movw	r1, #4712	; 0x1268
 80076b4:	4851      	ldr	r0, [pc, #324]	; (80077fc <HAL_TIM_ConfigClockSource+0x278>)
 80076b6:	f00c ff09 	bl	80144cc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ba:	6829      	ldr	r1, [r5, #0]
 80076bc:	6820      	ldr	r0, [r4, #0]
 80076be:	f7ff fcb9 	bl	8007034 <TIM_ITRx_SetConfig>
      break;
 80076c2:	e7d4      	b.n	800766e <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 80076c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c8:	f000 809a 	beq.w	8007800 <HAL_TIM_ConfigClockSource+0x27c>
 80076cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d0:	d144      	bne.n	800775c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	4a48      	ldr	r2, [pc, #288]	; (80077f8 <HAL_TIM_ConfigClockSource+0x274>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	bf18      	it	ne
 80076da:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80076de:	d014      	beq.n	800770a <HAL_TIM_ConfigClockSource+0x186>
 80076e0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d010      	beq.n	800770a <HAL_TIM_ConfigClockSource+0x186>
 80076e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00c      	beq.n	800770a <HAL_TIM_ConfigClockSource+0x186>
 80076f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d008      	beq.n	800770a <HAL_TIM_ConfigClockSource+0x186>
 80076f8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d004      	beq.n	800770a <HAL_TIM_ConfigClockSource+0x186>
 8007700:	f241 2121 	movw	r1, #4641	; 0x1221
 8007704:	483d      	ldr	r0, [pc, #244]	; (80077fc <HAL_TIM_ConfigClockSource+0x278>)
 8007706:	f00c fee1 	bl	80144cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800770a:	68ab      	ldr	r3, [r5, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	bf18      	it	ne
 8007710:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 8007714:	d006      	beq.n	8007724 <HAL_TIM_ConfigClockSource+0x1a0>
 8007716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800771a:	d003      	beq.n	8007724 <HAL_TIM_ConfigClockSource+0x1a0>
 800771c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007720:	f040 80ca 	bne.w	80078b8 <HAL_TIM_ConfigClockSource+0x334>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007724:	686b      	ldr	r3, [r5, #4]
 8007726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800772a:	bf18      	it	ne
 800772c:	2b00      	cmpne	r3, #0
 800772e:	d005      	beq.n	800773c <HAL_TIM_ConfigClockSource+0x1b8>
 8007730:	b123      	cbz	r3, 800773c <HAL_TIM_ConfigClockSource+0x1b8>
 8007732:	2b02      	cmp	r3, #2
 8007734:	d002      	beq.n	800773c <HAL_TIM_ConfigClockSource+0x1b8>
 8007736:	2b0a      	cmp	r3, #10
 8007738:	f040 80c4 	bne.w	80078c4 <HAL_TIM_ConfigClockSource+0x340>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800773c:	68eb      	ldr	r3, [r5, #12]
 800773e:	2b0f      	cmp	r3, #15
 8007740:	f200 80c6 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x34c>
      TIM_ETR_SetConfig(htim->Instance,
 8007744:	68eb      	ldr	r3, [r5, #12]
 8007746:	686a      	ldr	r2, [r5, #4]
 8007748:	68a9      	ldr	r1, [r5, #8]
 800774a:	6820      	ldr	r0, [r4, #0]
 800774c:	f7ff ff0c 	bl	8007568 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007750:	6822      	ldr	r2, [r4, #0]
 8007752:	6893      	ldr	r3, [r2, #8]
 8007754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007758:	6093      	str	r3, [r2, #8]
      break;
 800775a:	e788      	b.n	800766e <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 800775c:	2b70      	cmp	r3, #112	; 0x70
 800775e:	d186      	bne.n	800766e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	4a25      	ldr	r2, [pc, #148]	; (80077f8 <HAL_TIM_ConfigClockSource+0x274>)
 8007764:	4293      	cmp	r3, r2
 8007766:	bf18      	it	ne
 8007768:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800776c:	d01c      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x224>
 800776e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007772:	4293      	cmp	r3, r2
 8007774:	d018      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x224>
 8007776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800777a:	4293      	cmp	r3, r2
 800777c:	d014      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x224>
 800777e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007782:	4293      	cmp	r3, r2
 8007784:	d010      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x224>
 8007786:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800778a:	4293      	cmp	r3, r2
 800778c:	d00c      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x224>
 800778e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007792:	4293      	cmp	r3, r2
 8007794:	d008      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x224>
 8007796:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x224>
 800779e:	f241 2109 	movw	r1, #4617	; 0x1209
 80077a2:	4816      	ldr	r0, [pc, #88]	; (80077fc <HAL_TIM_ConfigClockSource+0x278>)
 80077a4:	f00c fe92 	bl	80144cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80077a8:	68ab      	ldr	r3, [r5, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf18      	it	ne
 80077ae:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 80077b2:	d005      	beq.n	80077c0 <HAL_TIM_ConfigClockSource+0x23c>
 80077b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b8:	d002      	beq.n	80077c0 <HAL_TIM_ConfigClockSource+0x23c>
 80077ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077be:	d169      	bne.n	8007894 <HAL_TIM_ConfigClockSource+0x310>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80077c0:	686b      	ldr	r3, [r5, #4]
 80077c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c6:	bf18      	it	ne
 80077c8:	2b00      	cmpne	r3, #0
 80077ca:	d004      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x252>
 80077cc:	b11b      	cbz	r3, 80077d6 <HAL_TIM_ConfigClockSource+0x252>
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d001      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x252>
 80077d2:	2b0a      	cmp	r3, #10
 80077d4:	d164      	bne.n	80078a0 <HAL_TIM_ConfigClockSource+0x31c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80077d6:	68eb      	ldr	r3, [r5, #12]
 80077d8:	2b0f      	cmp	r3, #15
 80077da:	d867      	bhi.n	80078ac <HAL_TIM_ConfigClockSource+0x328>
      TIM_ETR_SetConfig(htim->Instance,
 80077dc:	68eb      	ldr	r3, [r5, #12]
 80077de:	686a      	ldr	r2, [r5, #4]
 80077e0:	68a9      	ldr	r1, [r5, #8]
 80077e2:	6820      	ldr	r0, [r4, #0]
 80077e4:	f7ff fec0 	bl	8007568 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077e8:	6822      	ldr	r2, [r4, #0]
 80077ea:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80077f0:	6093      	str	r3, [r2, #8]
      break;
 80077f2:	e73c      	b.n	800766e <HAL_TIM_ConfigClockSource+0xea>
 80077f4:	fffe0088 	.word	0xfffe0088
 80077f8:	40010000 	.word	0x40010000
 80077fc:	08019c08 	.word	0x08019c08
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	4a7d      	ldr	r2, [pc, #500]	; (80079f8 <HAL_TIM_ConfigClockSource+0x474>)
 8007804:	4293      	cmp	r3, r2
 8007806:	bf18      	it	ne
 8007808:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800780c:	f43f af2f 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 8007810:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007814:	4293      	cmp	r3, r2
 8007816:	f43f af2a 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 800781a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800781e:	4293      	cmp	r3, r2
 8007820:	f43f af25 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 8007824:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007828:	4293      	cmp	r3, r2
 800782a:	f43f af20 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 800782e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007832:	4293      	cmp	r3, r2
 8007834:	f43f af1b 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 8007838:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800783c:	4293      	cmp	r3, r2
 800783e:	f43f af16 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 8007842:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007846:	4293      	cmp	r3, r2
 8007848:	f43f af11 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 800784c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007850:	4293      	cmp	r3, r2
 8007852:	f43f af0c 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 8007856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800785a:	4293      	cmp	r3, r2
 800785c:	f43f af07 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 8007860:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007864:	4293      	cmp	r3, r2
 8007866:	f43f af02 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 800786a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800786e:	4293      	cmp	r3, r2
 8007870:	f43f aefd 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 8007874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007878:	4293      	cmp	r3, r2
 800787a:	f43f aef8 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 800787e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007882:	4293      	cmp	r3, r2
 8007884:	f43f aef3 	beq.w	800766e <HAL_TIM_ConfigClockSource+0xea>
 8007888:	f241 2102 	movw	r1, #4610	; 0x1202
 800788c:	485b      	ldr	r0, [pc, #364]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 800788e:	f00c fe1d 	bl	80144cc <assert_failed>
 8007892:	e6ec      	b.n	800766e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007894:	f241 210c 	movw	r1, #4620	; 0x120c
 8007898:	4858      	ldr	r0, [pc, #352]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 800789a:	f00c fe17 	bl	80144cc <assert_failed>
 800789e:	e78f      	b.n	80077c0 <HAL_TIM_ConfigClockSource+0x23c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80078a0:	f241 210d 	movw	r1, #4621	; 0x120d
 80078a4:	4855      	ldr	r0, [pc, #340]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80078a6:	f00c fe11 	bl	80144cc <assert_failed>
 80078aa:	e794      	b.n	80077d6 <HAL_TIM_ConfigClockSource+0x252>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80078ac:	f241 210e 	movw	r1, #4622	; 0x120e
 80078b0:	4852      	ldr	r0, [pc, #328]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80078b2:	f00c fe0b 	bl	80144cc <assert_failed>
 80078b6:	e791      	b.n	80077dc <HAL_TIM_ConfigClockSource+0x258>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80078b8:	f241 2124 	movw	r1, #4644	; 0x1224
 80078bc:	484f      	ldr	r0, [pc, #316]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80078be:	f00c fe05 	bl	80144cc <assert_failed>
 80078c2:	e72f      	b.n	8007724 <HAL_TIM_ConfigClockSource+0x1a0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80078c4:	f241 2125 	movw	r1, #4645	; 0x1225
 80078c8:	484c      	ldr	r0, [pc, #304]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80078ca:	f00c fdff 	bl	80144cc <assert_failed>
 80078ce:	e735      	b.n	800773c <HAL_TIM_ConfigClockSource+0x1b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80078d0:	f241 2126 	movw	r1, #4646	; 0x1226
 80078d4:	4849      	ldr	r0, [pc, #292]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80078d6:	f00c fdf9 	bl	80144cc <assert_failed>
 80078da:	e733      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80078dc:	f241 2138 	movw	r1, #4664	; 0x1238
 80078e0:	4846      	ldr	r0, [pc, #280]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80078e2:	f00c fdf3 	bl	80144cc <assert_failed>
 80078e6:	e6a9      	b.n	800763c <HAL_TIM_ConfigClockSource+0xb8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80078e8:	f241 2139 	movw	r1, #4665	; 0x1239
 80078ec:	4843      	ldr	r0, [pc, #268]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80078ee:	f00c fded 	bl	80144cc <assert_failed>
 80078f2:	e6a7      	b.n	8007644 <HAL_TIM_ConfigClockSource+0xc0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	4a40      	ldr	r2, [pc, #256]	; (80079f8 <HAL_TIM_ConfigClockSource+0x474>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	bf18      	it	ne
 80078fc:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007900:	d014      	beq.n	800792c <HAL_TIM_ConfigClockSource+0x3a8>
 8007902:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007906:	4293      	cmp	r3, r2
 8007908:	d010      	beq.n	800792c <HAL_TIM_ConfigClockSource+0x3a8>
 800790a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800790e:	4293      	cmp	r3, r2
 8007910:	d00c      	beq.n	800792c <HAL_TIM_ConfigClockSource+0x3a8>
 8007912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007916:	4293      	cmp	r3, r2
 8007918:	d008      	beq.n	800792c <HAL_TIM_ConfigClockSource+0x3a8>
 800791a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_TIM_ConfigClockSource+0x3a8>
 8007922:	f241 2145 	movw	r1, #4677	; 0x1245
 8007926:	4835      	ldr	r0, [pc, #212]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 8007928:	f00c fdd0 	bl	80144cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800792c:	686b      	ldr	r3, [r5, #4]
 800792e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007932:	bf18      	it	ne
 8007934:	2b00      	cmpne	r3, #0
 8007936:	d004      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x3be>
 8007938:	b11b      	cbz	r3, 8007942 <HAL_TIM_ConfigClockSource+0x3be>
 800793a:	2b02      	cmp	r3, #2
 800793c:	d001      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x3be>
 800793e:	2b0a      	cmp	r3, #10
 8007940:	d10c      	bne.n	800795c <HAL_TIM_ConfigClockSource+0x3d8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007942:	68eb      	ldr	r3, [r5, #12]
 8007944:	2b0f      	cmp	r3, #15
 8007946:	d80f      	bhi.n	8007968 <HAL_TIM_ConfigClockSource+0x3e4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007948:	68ea      	ldr	r2, [r5, #12]
 800794a:	6869      	ldr	r1, [r5, #4]
 800794c:	6820      	ldr	r0, [r4, #0]
 800794e:	f7ff fb5d 	bl	800700c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007952:	2160      	movs	r1, #96	; 0x60
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	f7ff fb6d 	bl	8007034 <TIM_ITRx_SetConfig>
      break;
 800795a:	e688      	b.n	800766e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800795c:	f241 2148 	movw	r1, #4680	; 0x1248
 8007960:	4826      	ldr	r0, [pc, #152]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 8007962:	f00c fdb3 	bl	80144cc <assert_failed>
 8007966:	e7ec      	b.n	8007942 <HAL_TIM_ConfigClockSource+0x3be>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007968:	f241 2149 	movw	r1, #4681	; 0x1249
 800796c:	4823      	ldr	r0, [pc, #140]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 800796e:	f00c fdad 	bl	80144cc <assert_failed>
 8007972:	e7e9      	b.n	8007948 <HAL_TIM_ConfigClockSource+0x3c4>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	4a20      	ldr	r2, [pc, #128]	; (80079f8 <HAL_TIM_ConfigClockSource+0x474>)
 8007978:	4293      	cmp	r3, r2
 800797a:	bf18      	it	ne
 800797c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007980:	d014      	beq.n	80079ac <HAL_TIM_ConfigClockSource+0x428>
 8007982:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007986:	4293      	cmp	r3, r2
 8007988:	d010      	beq.n	80079ac <HAL_TIM_ConfigClockSource+0x428>
 800798a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800798e:	4293      	cmp	r3, r2
 8007990:	d00c      	beq.n	80079ac <HAL_TIM_ConfigClockSource+0x428>
 8007992:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007996:	4293      	cmp	r3, r2
 8007998:	d008      	beq.n	80079ac <HAL_TIM_ConfigClockSource+0x428>
 800799a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800799e:	4293      	cmp	r3, r2
 80079a0:	d004      	beq.n	80079ac <HAL_TIM_ConfigClockSource+0x428>
 80079a2:	f241 2155 	movw	r1, #4693	; 0x1255
 80079a6:	4815      	ldr	r0, [pc, #84]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80079a8:	f00c fd90 	bl	80144cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80079ac:	686b      	ldr	r3, [r5, #4]
 80079ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b2:	bf18      	it	ne
 80079b4:	2b00      	cmpne	r3, #0
 80079b6:	d004      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0x43e>
 80079b8:	b11b      	cbz	r3, 80079c2 <HAL_TIM_ConfigClockSource+0x43e>
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d001      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0x43e>
 80079be:	2b0a      	cmp	r3, #10
 80079c0:	d10c      	bne.n	80079dc <HAL_TIM_ConfigClockSource+0x458>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80079c2:	68eb      	ldr	r3, [r5, #12]
 80079c4:	2b0f      	cmp	r3, #15
 80079c6:	d80f      	bhi.n	80079e8 <HAL_TIM_ConfigClockSource+0x464>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c8:	68ea      	ldr	r2, [r5, #12]
 80079ca:	6869      	ldr	r1, [r5, #4]
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	f7ff fb0a 	bl	8006fe6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079d2:	2140      	movs	r1, #64	; 0x40
 80079d4:	6820      	ldr	r0, [r4, #0]
 80079d6:	f7ff fb2d 	bl	8007034 <TIM_ITRx_SetConfig>
      break;
 80079da:	e648      	b.n	800766e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80079dc:	f241 2158 	movw	r1, #4696	; 0x1258
 80079e0:	4806      	ldr	r0, [pc, #24]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80079e2:	f00c fd73 	bl	80144cc <assert_failed>
 80079e6:	e7ec      	b.n	80079c2 <HAL_TIM_ConfigClockSource+0x43e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80079e8:	f241 2159 	movw	r1, #4697	; 0x1259
 80079ec:	4803      	ldr	r0, [pc, #12]	; (80079fc <HAL_TIM_ConfigClockSource+0x478>)
 80079ee:	f00c fd6d 	bl	80144cc <assert_failed>
 80079f2:	e7e9      	b.n	80079c8 <HAL_TIM_ConfigClockSource+0x444>
  __HAL_LOCK(htim);
 80079f4:	2002      	movs	r0, #2
 80079f6:	e640      	b.n	800767a <HAL_TIM_ConfigClockSource+0xf6>
 80079f8:	40010000 	.word	0x40010000
 80079fc:	08019c08 	.word	0x08019c08

08007a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	4604      	mov	r4, r0
 8007a04:	460d      	mov	r5, r1
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8007a06:	6803      	ldr	r3, [r0, #0]
 8007a08:	4a53      	ldr	r2, [pc, #332]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bf18      	it	ne
 8007a0e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007a12:	d01c      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a14:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d018      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d014      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d010      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d00c      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d008      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a3c:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d004      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007a44:	f240 6163 	movw	r1, #1635	; 0x663
 8007a48:	4844      	ldr	r0, [pc, #272]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007a4a:	f00c fd3f 	bl	80144cc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bf18      	it	ne
 8007a54:	2b10      	cmpne	r3, #16
 8007a56:	d00b      	beq.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	d009      	beq.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a5c:	2b30      	cmp	r3, #48	; 0x30
 8007a5e:	d007      	beq.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a60:	2b40      	cmp	r3, #64	; 0x40
 8007a62:	d005      	beq.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a64:	2b50      	cmp	r3, #80	; 0x50
 8007a66:	d003      	beq.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a68:	2b60      	cmp	r3, #96	; 0x60
 8007a6a:	d001      	beq.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a6c:	2b70      	cmp	r3, #112	; 0x70
 8007a6e:	d15e      	bne.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007a70:	68ab      	ldr	r3, [r5, #8]
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	bf18      	it	ne
 8007a76:	2b00      	cmpne	r3, #0
 8007a78:	d15f      	bne.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x13a>

  /* Check input state */
  __HAL_LOCK(htim);
 8007a7a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d067      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0x152>
 8007a82:	2301      	movs	r3, #1
 8007a84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	2302      	movs	r3, #2
 8007a8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	685e      	ldr	r6, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a92:	689f      	ldr	r7, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a94:	4930      	ldr	r1, [pc, #192]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8007a96:	4a32      	ldr	r2, [pc, #200]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	bf18      	it	ne
 8007a9c:	428b      	cmpne	r3, r1
 8007a9e:	d133      	bne.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x108>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007aa0:	686b      	ldr	r3, [r5, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	bf18      	it	ne
 8007aa6:	f5b3 1f80 	cmpne.w	r3, #1048576	; 0x100000
 8007aaa:	d029      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ab0:	d026      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ab2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ab6:	d023      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007abc:	d020      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007abe:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007ac2:	d01d      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ac4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ac8:	d01a      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007aca:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8007ace:	d017      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ad0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ad4:	d014      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ad6:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8007ada:	d011      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007adc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007ae0:	d00e      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ae2:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8007ae6:	d00b      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007ae8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007aec:	d008      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007aee:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8007af2:	d005      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007af4:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8007af8:	d002      	beq.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8007afa:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8007afe:	d122      	bne.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0x146>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b00:	f426 0670 	bic.w	r6, r6, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b04:	686b      	ldr	r3, [r5, #4]
 8007b06:	431e      	orrs	r6, r3
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b08:	f026 0670 	bic.w	r6, r6, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	431e      	orrs	r6, r3

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007b10:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b14:	68ab      	ldr	r3, [r5, #8]
 8007b16:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b18:	6822      	ldr	r2, [r4, #0]
 8007b1a:	6056      	str	r6, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b1c:	6822      	ldr	r2, [r4, #0]
 8007b1e:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b20:	2301      	movs	r3, #1
 8007b22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b26:	2000      	movs	r0, #0
 8007b28:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8007b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007b2e:	f240 6164 	movw	r1, #1636	; 0x664
 8007b32:	480a      	ldr	r0, [pc, #40]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007b34:	f00c fcca 	bl	80144cc <assert_failed>
 8007b38:	e79a      	b.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007b3a:	f240 6165 	movw	r1, #1637	; 0x665
 8007b3e:	4807      	ldr	r0, [pc, #28]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007b40:	f00c fcc4 	bl	80144cc <assert_failed>
 8007b44:	e799      	b.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007b46:	f240 6177 	movw	r1, #1655	; 0x677
 8007b4a:	4804      	ldr	r0, [pc, #16]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007b4c:	f00c fcbe 	bl	80144cc <assert_failed>
 8007b50:	e7d6      	b.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>
  __HAL_LOCK(htim);
 8007b52:	2002      	movs	r0, #2
 8007b54:	e7ea      	b.n	8007b2c <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8007b56:	bf00      	nop
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	08019c40 	.word	0x08019c40
 8007b60:	40010400 	.word	0x40010400

08007b64 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b64:	4770      	bx	lr

08007b66 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b66:	4770      	bx	lr

08007b68 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b68:	4770      	bx	lr
	...

08007b6c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4605      	mov	r5, r0
 8007b70:	460c      	mov	r4, r1
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007b72:	4b5d      	ldr	r3, [pc, #372]	; (8007ce8 <FMC_SDRAM_Init+0x17c>)
 8007b74:	4298      	cmp	r0, r3
 8007b76:	d004      	beq.n	8007b82 <FMC_SDRAM_Init+0x16>
 8007b78:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8007b7c:	485b      	ldr	r0, [pc, #364]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007b7e:	f00c fca5 	bl	80144cc <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d857      	bhi.n	8007c38 <FMC_SDRAM_Init+0xcc>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 8007b88:	6863      	ldr	r3, [r4, #4]
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d85a      	bhi.n	8007c44 <FMC_SDRAM_Init+0xd8>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 8007b8e:	68a3      	ldr	r3, [r4, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf18      	it	ne
 8007b94:	2b04      	cmpne	r3, #4
 8007b96:	d001      	beq.n	8007b9c <FMC_SDRAM_Init+0x30>
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d159      	bne.n	8007c50 <FMC_SDRAM_Init+0xe4>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 8007b9c:	68e3      	ldr	r3, [r4, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bf18      	it	ne
 8007ba2:	2b10      	cmpne	r3, #16
 8007ba4:	d001      	beq.n	8007baa <FMC_SDRAM_Init+0x3e>
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d158      	bne.n	8007c5c <FMC_SDRAM_Init+0xf0>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bf18      	it	ne
 8007bb0:	2b40      	cmpne	r3, #64	; 0x40
 8007bb2:	d159      	bne.n	8007c68 <FMC_SDRAM_Init+0xfc>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 8007bb4:	6963      	ldr	r3, [r4, #20]
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	bf18      	it	ne
 8007bba:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 8007bbe:	d002      	beq.n	8007bc6 <FMC_SDRAM_Init+0x5a>
 8007bc0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007bc4:	d156      	bne.n	8007c74 <FMC_SDRAM_Init+0x108>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 8007bc6:	69a3      	ldr	r3, [r4, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	bf18      	it	ne
 8007bcc:	f5b3 7f00 	cmpne.w	r3, #512	; 0x200
 8007bd0:	d156      	bne.n	8007c80 <FMC_SDRAM_Init+0x114>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 8007bd2:	69e3      	ldr	r3, [r4, #28]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf18      	it	ne
 8007bd8:	f5b3 6f00 	cmpne.w	r3, #2048	; 0x800
 8007bdc:	d002      	beq.n	8007be4 <FMC_SDRAM_Init+0x78>
 8007bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007be2:	d153      	bne.n	8007c8c <FMC_SDRAM_Init+0x120>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8007be4:	6a23      	ldr	r3, [r4, #32]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bf18      	it	ne
 8007bea:	f5b3 5f80 	cmpne.w	r3, #4096	; 0x1000
 8007bee:	d153      	bne.n	8007c98 <FMC_SDRAM_Init+0x12c>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 8007bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bf18      	it	ne
 8007bf6:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 8007bfa:	d002      	beq.n	8007c02 <FMC_SDRAM_Init+0x96>
 8007bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c00:	d150      	bne.n	8007ca4 <FMC_SDRAM_Init+0x138>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d053      	beq.n	8007cb0 <FMC_SDRAM_Init+0x144>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007c08:	682b      	ldr	r3, [r5, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007c0a:	4a39      	ldr	r2, [pc, #228]	; (8007cf0 <FMC_SDRAM_Init+0x184>)
 8007c0c:	401a      	ands	r2, r3
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c0e:	6863      	ldr	r3, [r4, #4]
                        Init->RowBitsNumber      |\
 8007c10:	68a1      	ldr	r1, [r4, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c12:	430b      	orrs	r3, r1
                        Init->MemoryDataWidth    |\
 8007c14:	68e1      	ldr	r1, [r4, #12]
                        Init->RowBitsNumber      |\
 8007c16:	430b      	orrs	r3, r1
                        Init->InternalBankNumber |\
 8007c18:	6921      	ldr	r1, [r4, #16]
                        Init->MemoryDataWidth    |\
 8007c1a:	430b      	orrs	r3, r1
                        Init->CASLatency         |\
 8007c1c:	6961      	ldr	r1, [r4, #20]
                        Init->InternalBankNumber |\
 8007c1e:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
 8007c20:	69a1      	ldr	r1, [r4, #24]
                        Init->CASLatency         |\
 8007c22:	430b      	orrs	r3, r1
                        Init->SDClockPeriod      |\
 8007c24:	69e1      	ldr	r1, [r4, #28]
                        Init->WriteProtection    |\
 8007c26:	430b      	orrs	r3, r1
                        Init->ReadBurst          |\
 8007c28:	6a21      	ldr	r1, [r4, #32]
                        Init->SDClockPeriod      |\
 8007c2a:	430b      	orrs	r3, r1
                        Init->ReadPipeDelay
 8007c2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                        Init->ReadBurst          |\
 8007c2e:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c30:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007c32:	602b      	str	r3, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8007c34:	2000      	movs	r0, #0
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 8007c38:	f240 21ed 	movw	r1, #749	; 0x2ed
 8007c3c:	482b      	ldr	r0, [pc, #172]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007c3e:	f00c fc45 	bl	80144cc <assert_failed>
 8007c42:	e7a1      	b.n	8007b88 <FMC_SDRAM_Init+0x1c>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 8007c44:	f240 21ee 	movw	r1, #750	; 0x2ee
 8007c48:	4828      	ldr	r0, [pc, #160]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007c4a:	f00c fc3f 	bl	80144cc <assert_failed>
 8007c4e:	e79e      	b.n	8007b8e <FMC_SDRAM_Init+0x22>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 8007c50:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c54:	4825      	ldr	r0, [pc, #148]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007c56:	f00c fc39 	bl	80144cc <assert_failed>
 8007c5a:	e79f      	b.n	8007b9c <FMC_SDRAM_Init+0x30>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 8007c5c:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8007c60:	4822      	ldr	r0, [pc, #136]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007c62:	f00c fc33 	bl	80144cc <assert_failed>
 8007c66:	e7a0      	b.n	8007baa <FMC_SDRAM_Init+0x3e>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 8007c68:	f240 21f1 	movw	r1, #753	; 0x2f1
 8007c6c:	481f      	ldr	r0, [pc, #124]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007c6e:	f00c fc2d 	bl	80144cc <assert_failed>
 8007c72:	e79f      	b.n	8007bb4 <FMC_SDRAM_Init+0x48>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 8007c74:	f240 21f2 	movw	r1, #754	; 0x2f2
 8007c78:	481c      	ldr	r0, [pc, #112]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007c7a:	f00c fc27 	bl	80144cc <assert_failed>
 8007c7e:	e7a2      	b.n	8007bc6 <FMC_SDRAM_Init+0x5a>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 8007c80:	f240 21f3 	movw	r1, #755	; 0x2f3
 8007c84:	4819      	ldr	r0, [pc, #100]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007c86:	f00c fc21 	bl	80144cc <assert_failed>
 8007c8a:	e7a2      	b.n	8007bd2 <FMC_SDRAM_Init+0x66>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 8007c8c:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8007c90:	4816      	ldr	r0, [pc, #88]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007c92:	f00c fc1b 	bl	80144cc <assert_failed>
 8007c96:	e7a5      	b.n	8007be4 <FMC_SDRAM_Init+0x78>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8007c98:	f240 21f5 	movw	r1, #757	; 0x2f5
 8007c9c:	4813      	ldr	r0, [pc, #76]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007c9e:	f00c fc15 	bl	80144cc <assert_failed>
 8007ca2:	e7a5      	b.n	8007bf0 <FMC_SDRAM_Init+0x84>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 8007ca4:	f240 21f6 	movw	r1, #758	; 0x2f6
 8007ca8:	4810      	ldr	r0, [pc, #64]	; (8007cec <FMC_SDRAM_Init+0x180>)
 8007caa:	f00c fc0f 	bl	80144cc <assert_failed>
 8007cae:	e7a8      	b.n	8007c02 <FMC_SDRAM_Init+0x96>
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007cb0:	6829      	ldr	r1, [r5, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007cb2:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cb6:	69e3      	ldr	r3, [r4, #28]
                        Init->ReadBurst          |\
 8007cb8:	6a22      	ldr	r2, [r4, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cba:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
                        Init->ReadBurst          |\
 8007cbe:	431a      	orrs	r2, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cc0:	430a      	orrs	r2, r1
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007cc2:	686b      	ldr	r3, [r5, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007cc4:	490a      	ldr	r1, [pc, #40]	; (8007cf0 <FMC_SDRAM_Init+0x184>)
 8007cc6:	4019      	ands	r1, r3
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007cc8:	6863      	ldr	r3, [r4, #4]
                       Init->RowBitsNumber       |\
 8007cca:	68a0      	ldr	r0, [r4, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ccc:	4303      	orrs	r3, r0
                       Init->MemoryDataWidth     |\
 8007cce:	68e0      	ldr	r0, [r4, #12]
                       Init->RowBitsNumber       |\
 8007cd0:	4303      	orrs	r3, r0
                       Init->InternalBankNumber  |\
 8007cd2:	6920      	ldr	r0, [r4, #16]
                       Init->MemoryDataWidth     |\
 8007cd4:	4303      	orrs	r3, r0
                       Init->CASLatency          |\
 8007cd6:	6960      	ldr	r0, [r4, #20]
                       Init->InternalBankNumber  |\
 8007cd8:	4303      	orrs	r3, r0
                       Init->WriteProtection);
 8007cda:	69a0      	ldr	r0, [r4, #24]
                       Init->CASLatency          |\
 8007cdc:	4303      	orrs	r3, r0
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007cde:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007ce0:	602a      	str	r2, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007ce2:	606b      	str	r3, [r5, #4]
 8007ce4:	e7a6      	b.n	8007c34 <FMC_SDRAM_Init+0xc8>
 8007ce6:	bf00      	nop
 8007ce8:	a0000140 	.word	0xa0000140
 8007cec:	08019c7c 	.word	0x08019c7c
 8007cf0:	ffff8000 	.word	0xffff8000

08007cf4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	4616      	mov	r6, r2
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007cfc:	4b4e      	ldr	r3, [pc, #312]	; (8007e38 <FMC_SDRAM_Timing_Init+0x144>)
 8007cfe:	4298      	cmp	r0, r3
 8007d00:	d004      	beq.n	8007d0c <FMC_SDRAM_Timing_Init+0x18>
 8007d02:	f240 313d 	movw	r1, #829	; 0x33d
 8007d06:	484d      	ldr	r0, [pc, #308]	; (8007e3c <FMC_SDRAM_Timing_Init+0x148>)
 8007d08:	f00c fbe0 	bl	80144cc <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	2b0f      	cmp	r3, #15
 8007d12:	d83c      	bhi.n	8007d8e <FMC_SDRAM_Timing_Init+0x9a>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	2b0f      	cmp	r3, #15
 8007d1a:	d83e      	bhi.n	8007d9a <FMC_SDRAM_Timing_Init+0xa6>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 8007d1c:	68a3      	ldr	r3, [r4, #8]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	2b0f      	cmp	r3, #15
 8007d22:	d840      	bhi.n	8007da6 <FMC_SDRAM_Timing_Init+0xb2>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 8007d24:	68e3      	ldr	r3, [r4, #12]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b0f      	cmp	r3, #15
 8007d2a:	d842      	bhi.n	8007db2 <FMC_SDRAM_Timing_Init+0xbe>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 8007d2c:	6923      	ldr	r3, [r4, #16]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	2b0f      	cmp	r3, #15
 8007d32:	d844      	bhi.n	8007dbe <FMC_SDRAM_Timing_Init+0xca>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 8007d34:	6963      	ldr	r3, [r4, #20]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	2b0f      	cmp	r3, #15
 8007d3a:	d846      	bhi.n	8007dca <FMC_SDRAM_Timing_Init+0xd6>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 8007d3c:	69a3      	ldr	r3, [r4, #24]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	2b0f      	cmp	r3, #15
 8007d42:	d848      	bhi.n	8007dd6 <FMC_SDRAM_Timing_Init+0xe2>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 8007d44:	2e01      	cmp	r6, #1
 8007d46:	d84c      	bhi.n	8007de2 <FMC_SDRAM_Timing_Init+0xee>
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007d48:	2e01      	cmp	r6, #1
 8007d4a:	d050      	beq.n	8007dee <FMC_SDRAM_Timing_Init+0xfa>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007d4c:	68aa      	ldr	r2, [r5, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007d4e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007d56:	6861      	ldr	r1, [r4, #4]
 8007d58:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d5a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007d5e:	68a1      	ldr	r1, [r4, #8]
 8007d60:	3901      	subs	r1, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007d62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007d66:	68e1      	ldr	r1, [r4, #12]
 8007d68:	3901      	subs	r1, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007d6a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007d6e:	6921      	ldr	r1, [r4, #16]
 8007d70:	3901      	subs	r1, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 8007d76:	6961      	ldr	r1, [r4, #20]
 8007d78:	3901      	subs	r1, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007d7a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 8007d7e:	69a1      	ldr	r1, [r4, #24]
 8007d80:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d82:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007d86:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007d88:	60ab      	str	r3, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 8007d8e:	f240 313e 	movw	r1, #830	; 0x33e
 8007d92:	482a      	ldr	r0, [pc, #168]	; (8007e3c <FMC_SDRAM_Timing_Init+0x148>)
 8007d94:	f00c fb9a 	bl	80144cc <assert_failed>
 8007d98:	e7bc      	b.n	8007d14 <FMC_SDRAM_Timing_Init+0x20>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 8007d9a:	f240 313f 	movw	r1, #831	; 0x33f
 8007d9e:	4827      	ldr	r0, [pc, #156]	; (8007e3c <FMC_SDRAM_Timing_Init+0x148>)
 8007da0:	f00c fb94 	bl	80144cc <assert_failed>
 8007da4:	e7ba      	b.n	8007d1c <FMC_SDRAM_Timing_Init+0x28>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 8007da6:	f44f 7150 	mov.w	r1, #832	; 0x340
 8007daa:	4824      	ldr	r0, [pc, #144]	; (8007e3c <FMC_SDRAM_Timing_Init+0x148>)
 8007dac:	f00c fb8e 	bl	80144cc <assert_failed>
 8007db0:	e7b8      	b.n	8007d24 <FMC_SDRAM_Timing_Init+0x30>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 8007db2:	f240 3141 	movw	r1, #833	; 0x341
 8007db6:	4821      	ldr	r0, [pc, #132]	; (8007e3c <FMC_SDRAM_Timing_Init+0x148>)
 8007db8:	f00c fb88 	bl	80144cc <assert_failed>
 8007dbc:	e7b6      	b.n	8007d2c <FMC_SDRAM_Timing_Init+0x38>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 8007dbe:	f240 3142 	movw	r1, #834	; 0x342
 8007dc2:	481e      	ldr	r0, [pc, #120]	; (8007e3c <FMC_SDRAM_Timing_Init+0x148>)
 8007dc4:	f00c fb82 	bl	80144cc <assert_failed>
 8007dc8:	e7b4      	b.n	8007d34 <FMC_SDRAM_Timing_Init+0x40>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 8007dca:	f240 3143 	movw	r1, #835	; 0x343
 8007dce:	481b      	ldr	r0, [pc, #108]	; (8007e3c <FMC_SDRAM_Timing_Init+0x148>)
 8007dd0:	f00c fb7c 	bl	80144cc <assert_failed>
 8007dd4:	e7b2      	b.n	8007d3c <FMC_SDRAM_Timing_Init+0x48>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 8007dd6:	f44f 7151 	mov.w	r1, #836	; 0x344
 8007dda:	4818      	ldr	r0, [pc, #96]	; (8007e3c <FMC_SDRAM_Timing_Init+0x148>)
 8007ddc:	f00c fb76 	bl	80144cc <assert_failed>
 8007de0:	e7b0      	b.n	8007d44 <FMC_SDRAM_Timing_Init+0x50>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 8007de2:	f240 3145 	movw	r1, #837	; 0x345
 8007de6:	4815      	ldr	r0, [pc, #84]	; (8007e3c <FMC_SDRAM_Timing_Init+0x148>)
 8007de8:	f00c fb70 	bl	80144cc <assert_failed>
 8007dec:	e7ac      	b.n	8007d48 <FMC_SDRAM_Timing_Init+0x54>
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007dee:	68ab      	ldr	r3, [r5, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007df0:	4913      	ldr	r1, [pc, #76]	; (8007e40 <FMC_SDRAM_Timing_Init+0x14c>)
 8007df2:	4019      	ands	r1, r3
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007df4:	68e2      	ldr	r2, [r4, #12]
 8007df6:	1e50      	subs	r0, r2, #1
                        (((Timing->RPDelay)-1) << 20)); 
 8007df8:	6963      	ldr	r3, [r4, #20]
 8007dfa:	1e5a      	subs	r2, r3, #1
 8007dfc:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007dfe:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8007e02:	430a      	orrs	r2, r1
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007e04:	68e9      	ldr	r1, [r5, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007e06:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007e0e:	6860      	ldr	r0, [r4, #4]
 8007e10:	3801      	subs	r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e12:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007e16:	68a0      	ldr	r0, [r4, #8]
 8007e18:	3801      	subs	r0, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007e1a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007e1e:	6920      	ldr	r0, [r4, #16]
 8007e20:	3801      	subs	r0, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007e22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 8007e26:	69a0      	ldr	r0, [r4, #24]
 8007e28:	3801      	subs	r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e2a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007e2e:	430b      	orrs	r3, r1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007e30:	60aa      	str	r2, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007e32:	60eb      	str	r3, [r5, #12]
 8007e34:	e7a9      	b.n	8007d8a <FMC_SDRAM_Timing_Init+0x96>
 8007e36:	bf00      	nop
 8007e38:	a0000140 	.word	0xa0000140
 8007e3c:	08019c7c 	.word	0x08019c7c
 8007e40:	ff0f0fff 	.word	0xff0f0fff

08007e44 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007e44:	b530      	push	{r4, r5, lr}
 8007e46:	b083      	sub	sp, #12
 8007e48:	4605      	mov	r5, r0
 8007e4a:	460c      	mov	r4, r1
  __IO uint32_t tmpr = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007e50:	4b20      	ldr	r3, [pc, #128]	; (8007ed4 <FMC_SDRAM_SendCommand+0x90>)
 8007e52:	4298      	cmp	r0, r3
 8007e54:	d004      	beq.n	8007e60 <FMC_SDRAM_SendCommand+0x1c>
 8007e56:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 8007e5a:	481f      	ldr	r0, [pc, #124]	; (8007ed8 <FMC_SDRAM_SendCommand+0x94>)
 8007e5c:	f00c fb36 	bl	80144cc <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	2b06      	cmp	r3, #6
 8007e64:	d81e      	bhi.n	8007ea4 <FMC_SDRAM_SendCommand+0x60>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 8007e66:	6863      	ldr	r3, [r4, #4]
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	bf18      	it	ne
 8007e6c:	2b08      	cmpne	r3, #8
 8007e6e:	d001      	beq.n	8007e74 <FMC_SDRAM_SendCommand+0x30>
 8007e70:	2b18      	cmp	r3, #24
 8007e72:	d11d      	bne.n	8007eb0 <FMC_SDRAM_SendCommand+0x6c>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 8007e74:	68a3      	ldr	r3, [r4, #8]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	2b0f      	cmp	r3, #15
 8007e7a:	d81f      	bhi.n	8007ebc <FMC_SDRAM_SendCommand+0x78>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 8007e7c:	68e3      	ldr	r3, [r4, #12]
 8007e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e82:	d221      	bcs.n	8007ec8 <FMC_SDRAM_SendCommand+0x84>

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007e84:	6823      	ldr	r3, [r4, #0]
                    (Command->CommandTarget)                |\
 8007e86:	6862      	ldr	r2, [r4, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007e88:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007e8a:	68a2      	ldr	r2, [r4, #8]
 8007e8c:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8007e8e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9)
 8007e92:	68e2      	ldr	r2, [r4, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007e94:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8007e98:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8007e9a:	9b01      	ldr	r3, [sp, #4]
 8007e9c:	612b      	str	r3, [r5, #16]
  
  return HAL_OK;  
}
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 8007ea4:	f240 31d1 	movw	r1, #977	; 0x3d1
 8007ea8:	480b      	ldr	r0, [pc, #44]	; (8007ed8 <FMC_SDRAM_SendCommand+0x94>)
 8007eaa:	f00c fb0f 	bl	80144cc <assert_failed>
 8007eae:	e7da      	b.n	8007e66 <FMC_SDRAM_SendCommand+0x22>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 8007eb0:	f240 31d2 	movw	r1, #978	; 0x3d2
 8007eb4:	4808      	ldr	r0, [pc, #32]	; (8007ed8 <FMC_SDRAM_SendCommand+0x94>)
 8007eb6:	f00c fb09 	bl	80144cc <assert_failed>
 8007eba:	e7db      	b.n	8007e74 <FMC_SDRAM_SendCommand+0x30>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 8007ebc:	f240 31d3 	movw	r1, #979	; 0x3d3
 8007ec0:	4805      	ldr	r0, [pc, #20]	; (8007ed8 <FMC_SDRAM_SendCommand+0x94>)
 8007ec2:	f00c fb03 	bl	80144cc <assert_failed>
 8007ec6:	e7d9      	b.n	8007e7c <FMC_SDRAM_SendCommand+0x38>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 8007ec8:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 8007ecc:	4802      	ldr	r0, [pc, #8]	; (8007ed8 <FMC_SDRAM_SendCommand+0x94>)
 8007ece:	f00c fafd 	bl	80144cc <assert_failed>
 8007ed2:	e7d7      	b.n	8007e84 <FMC_SDRAM_SendCommand+0x40>
 8007ed4:	a0000140 	.word	0xa0000140
 8007ed8:	08019c7c 	.word	0x08019c7c

08007edc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4604      	mov	r4, r0
 8007ee0:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <FMC_SDRAM_ProgramRefreshRate+0x34>)
 8007ee4:	4298      	cmp	r0, r3
 8007ee6:	d004      	beq.n	8007ef2 <FMC_SDRAM_ProgramRefreshRate+0x16>
 8007ee8:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8007eec:	4809      	ldr	r0, [pc, #36]	; (8007f14 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 8007eee:	f00c faed 	bl	80144cc <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 8007ef2:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8007ef6:	d205      	bcs.n	8007f04 <FMC_SDRAM_ProgramRefreshRate+0x28>
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007ef8:	6961      	ldr	r1, [r4, #20]
 8007efa:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
 8007efe:	6165      	str	r5, [r4, #20]
  
  return HAL_OK;   
}
 8007f00:	2000      	movs	r0, #0
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 8007f04:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8007f08:	4802      	ldr	r0, [pc, #8]	; (8007f14 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 8007f0a:	f00c fadf 	bl	80144cc <assert_failed>
 8007f0e:	e7f3      	b.n	8007ef8 <FMC_SDRAM_ProgramRefreshRate+0x1c>
 8007f10:	a0000140 	.word	0xa0000140
 8007f14:	08019c7c 	.word	0x08019c7c

08007f18 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <SDMMC_GetCmdError+0x34>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a0c      	ldr	r2, [pc, #48]	; (8007f50 <SDMMC_GetCmdError+0x38>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	0a5b      	lsrs	r3, r3, #9
 8007f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f28:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0)
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b142      	cbz	r2, 8007f44 <SDMMC_GetCmdError+0x2c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007f32:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007f34:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007f38:	d0f8      	beq.n	8007f2c <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007f3a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007f3e:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007f40:	2000      	movs	r0, #0
 8007f42:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007f44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	200000a8 	.word	0x200000a8
 8007f50:	10624dd3 	.word	0x10624dd3

08007f54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007f54:	4601      	mov	r1, r0
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007f56:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <SDMMC_GetCmdResp2+0x50>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a13      	ldr	r2, [pc, #76]	; (8007fa8 <SDMMC_GetCmdResp2+0x54>)
 8007f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f60:	0a5b      	lsrs	r3, r3, #9
 8007f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f66:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0)
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	b1aa      	cbz	r2, 8007f9c <SDMMC_GetCmdResp2+0x48>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007f70:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007f72:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007f76:	d0f8      	beq.n	8007f6a <SDMMC_GetCmdResp2+0x16>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f78:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007f7a:	f013 0f04 	tst.w	r3, #4
 8007f7e:	d107      	bne.n	8007f90 <SDMMC_GetCmdResp2+0x3c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f80:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007f82:	f010 0001 	ands.w	r0, r0, #1
 8007f86:	d106      	bne.n	8007f96 <SDMMC_GetCmdResp2+0x42>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007f88:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007f8c:	638b      	str	r3, [r1, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007f8e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f90:	2004      	movs	r0, #4
 8007f92:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f94:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f96:	2001      	movs	r0, #1
 8007f98:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f9a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007f9c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200000a8 	.word	0x200000a8
 8007fa8:	10624dd3 	.word	0x10624dd3

08007fac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007fac:	4601      	mov	r1, r0
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007fae:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <SDMMC_GetCmdResp3+0x40>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a0f      	ldr	r2, [pc, #60]	; (8007ff0 <SDMMC_GetCmdResp3+0x44>)
 8007fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb8:	0a5b      	lsrs	r3, r3, #9
 8007fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fbe:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0)
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b172      	cbz	r2, 8007fe6 <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007fc8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007fca:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007fce:	d0f8      	beq.n	8007fc2 <SDMMC_GetCmdResp3+0x16>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fd0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007fd2:	f010 0004 	ands.w	r0, r0, #4
 8007fd6:	d103      	bne.n	8007fe0 <SDMMC_GetCmdResp3+0x34>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007fd8:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007fdc:	638b      	str	r3, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007fde:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007fe0:	2004      	movs	r0, #4
 8007fe2:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fe4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007fe6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007fea:	4770      	bx	lr
 8007fec:	200000a8 	.word	0x200000a8
 8007ff0:	10624dd3 	.word	0x10624dd3

08007ff4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007ff4:	4601      	mov	r1, r0
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007ff6:	4b12      	ldr	r3, [pc, #72]	; (8008040 <SDMMC_GetCmdResp7+0x4c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a12      	ldr	r2, [pc, #72]	; (8008044 <SDMMC_GetCmdResp7+0x50>)
 8007ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8008000:	0a5b      	lsrs	r3, r3, #9
 8008002:	f241 3288 	movw	r2, #5000	; 0x1388
 8008006:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0)
 800800a:	461a      	mov	r2, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b19a      	cbz	r2, 8008038 <SDMMC_GetCmdResp7+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008010:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8008012:	f012 0f45 	tst.w	r2, #69	; 0x45
 8008016:	d0f8      	beq.n	800800a <SDMMC_GetCmdResp7+0x16>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008018:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800801a:	f013 0304 	ands.w	r3, r3, #4
 800801e:	d107      	bne.n	8008030 <SDMMC_GetCmdResp7+0x3c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008020:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8008022:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8008026:	d009      	beq.n	800803c <SDMMC_GetCmdResp7+0x48>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008028:	2240      	movs	r2, #64	; 0x40
 800802a:	638a      	str	r2, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800802c:	4618      	mov	r0, r3
 800802e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008030:	2340      	movs	r3, #64	; 0x40
 8008032:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008034:	2004      	movs	r0, #4
 8008036:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008038:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
}
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	200000a8 	.word	0x200000a8
 8008044:	10624dd3 	.word	0x10624dd3

08008048 <SDMMC_Init>:
{
 8008048:	b084      	sub	sp, #16
 800804a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800804e:	4606      	mov	r6, r0
 8008050:	a809      	add	r0, sp, #36	; 0x24
 8008052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 8008056:	4b30      	ldr	r3, [pc, #192]	; (8008118 <SDMMC_Init+0xd0>)
 8008058:	429e      	cmp	r6, r3
 800805a:	d003      	beq.n	8008064 <SDMMC_Init+0x1c>
 800805c:	21d8      	movs	r1, #216	; 0xd8
 800805e:	482f      	ldr	r0, [pc, #188]	; (800811c <SDMMC_Init+0xd4>)
 8008060:	f00c fa34 	bl	80144cc <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 8008064:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008066:	2c00      	cmp	r4, #0
 8008068:	bf18      	it	ne
 800806a:	f5b4 5f00 	cmpne.w	r4, #8192	; 0x2000
 800806e:	d135      	bne.n	80080dc <SDMMC_Init+0x94>
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 8008070:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008074:	f1ba 0f00 	cmp.w	sl, #0
 8008078:	bf18      	it	ne
 800807a:	f5ba 6f80 	cmpne.w	sl, #1024	; 0x400
 800807e:	d132      	bne.n	80080e6 <SDMMC_Init+0x9e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8008080:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008084:	f1b9 0f00 	cmp.w	r9, #0
 8008088:	bf18      	it	ne
 800808a:	f5b9 7f00 	cmpne.w	r9, #512	; 0x200
 800808e:	d12f      	bne.n	80080f0 <SDMMC_Init+0xa8>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 8008090:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008092:	2f00      	cmp	r7, #0
 8008094:	bf18      	it	ne
 8008096:	f5b7 6f00 	cmpne.w	r7, #2048	; 0x800
 800809a:	d002      	beq.n	80080a2 <SDMMC_Init+0x5a>
 800809c:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80080a0:	d12b      	bne.n	80080fa <SDMMC_Init+0xb2>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 80080a2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80080a6:	f1b8 0f00 	cmp.w	r8, #0
 80080aa:	bf18      	it	ne
 80080ac:	f5b8 4f80 	cmpne.w	r8, #16384	; 0x4000
 80080b0:	d128      	bne.n	8008104 <SDMMC_Init+0xbc>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 80080b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80080b4:	2dff      	cmp	r5, #255	; 0xff
 80080b6:	d82a      	bhi.n	800810e <SDMMC_Init+0xc6>
  tmpreg |= (Init.ClockEdge           |\
 80080b8:	ea44 040a 	orr.w	r4, r4, sl
             Init.ClockBypass         |\
 80080bc:	ea44 0409 	orr.w	r4, r4, r9
             Init.ClockPowerSave      |\
 80080c0:	433c      	orrs	r4, r7
             Init.BusWide             |\
 80080c2:	ea44 0408 	orr.w	r4, r4, r8
             Init.HardwareFlowControl |\
 80080c6:	4325      	orrs	r5, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080c8:	6873      	ldr	r3, [r6, #4]
 80080ca:	4c15      	ldr	r4, [pc, #84]	; (8008120 <SDMMC_Init+0xd8>)
 80080cc:	401c      	ands	r4, r3
 80080ce:	4325      	orrs	r5, r4
 80080d0:	6075      	str	r5, [r6, #4]
}
 80080d2:	2000      	movs	r0, #0
 80080d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	b004      	add	sp, #16
 80080da:	4770      	bx	lr
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 80080dc:	21d9      	movs	r1, #217	; 0xd9
 80080de:	480f      	ldr	r0, [pc, #60]	; (800811c <SDMMC_Init+0xd4>)
 80080e0:	f00c f9f4 	bl	80144cc <assert_failed>
 80080e4:	e7c4      	b.n	8008070 <SDMMC_Init+0x28>
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 80080e6:	21da      	movs	r1, #218	; 0xda
 80080e8:	480c      	ldr	r0, [pc, #48]	; (800811c <SDMMC_Init+0xd4>)
 80080ea:	f00c f9ef 	bl	80144cc <assert_failed>
 80080ee:	e7c7      	b.n	8008080 <SDMMC_Init+0x38>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 80080f0:	21db      	movs	r1, #219	; 0xdb
 80080f2:	480a      	ldr	r0, [pc, #40]	; (800811c <SDMMC_Init+0xd4>)
 80080f4:	f00c f9ea 	bl	80144cc <assert_failed>
 80080f8:	e7ca      	b.n	8008090 <SDMMC_Init+0x48>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 80080fa:	21dc      	movs	r1, #220	; 0xdc
 80080fc:	4807      	ldr	r0, [pc, #28]	; (800811c <SDMMC_Init+0xd4>)
 80080fe:	f00c f9e5 	bl	80144cc <assert_failed>
 8008102:	e7ce      	b.n	80080a2 <SDMMC_Init+0x5a>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8008104:	21dd      	movs	r1, #221	; 0xdd
 8008106:	4805      	ldr	r0, [pc, #20]	; (800811c <SDMMC_Init+0xd4>)
 8008108:	f00c f9e0 	bl	80144cc <assert_failed>
 800810c:	e7d1      	b.n	80080b2 <SDMMC_Init+0x6a>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800810e:	21de      	movs	r1, #222	; 0xde
 8008110:	4802      	ldr	r0, [pc, #8]	; (800811c <SDMMC_Init+0xd4>)
 8008112:	f00c f9db 	bl	80144cc <assert_failed>
 8008116:	e7cf      	b.n	80080b8 <SDMMC_Init+0x70>
 8008118:	40012c00 	.word	0x40012c00
 800811c:	08019cb4 	.word	0x08019cb4
 8008120:	ffff8100 	.word	0xffff8100

08008124 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8008124:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8008128:	4770      	bx	lr

0800812a <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800812a:	680b      	ldr	r3, [r1, #0]
 800812c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8008130:	2000      	movs	r0, #0
 8008132:	4770      	bx	lr

08008134 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008134:	2303      	movs	r3, #3
 8008136:	6003      	str	r3, [r0, #0]
}
 8008138:	2000      	movs	r0, #0
 800813a:	4770      	bx	lr

0800813c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800813c:	6800      	ldr	r0, [r0, #0]
}
 800813e:	f000 0003 	and.w	r0, r0, #3
 8008142:	4770      	bx	lr

08008144 <SDMMC_SendCommand>:
{
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4605      	mov	r5, r0
 8008148:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800814a:	684b      	ldr	r3, [r1, #4]
 800814c:	2b3f      	cmp	r3, #63	; 0x3f
 800814e:	d825      	bhi.n	800819c <SDMMC_SendCommand+0x58>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 8008150:	68a3      	ldr	r3, [r4, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	bf18      	it	ne
 8008156:	2b40      	cmpne	r3, #64	; 0x40
 8008158:	d001      	beq.n	800815e <SDMMC_SendCommand+0x1a>
 800815a:	2bc0      	cmp	r3, #192	; 0xc0
 800815c:	d124      	bne.n	80081a8 <SDMMC_SendCommand+0x64>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 800815e:	68e3      	ldr	r3, [r4, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	bf18      	it	ne
 8008164:	f5b3 7f80 	cmpne.w	r3, #256	; 0x100
 8008168:	d002      	beq.n	8008170 <SDMMC_SendCommand+0x2c>
 800816a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800816e:	d121      	bne.n	80081b4 <SDMMC_SendCommand+0x70>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	bf18      	it	ne
 8008176:	f5b3 6f80 	cmpne.w	r3, #1024	; 0x400
 800817a:	d121      	bne.n	80081c0 <SDMMC_SendCommand+0x7c>
  SDMMCx->ARG = Command->Argument;
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008180:	6863      	ldr	r3, [r4, #4]
                       Command->Response         |\
 8008182:	68a2      	ldr	r2, [r4, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008184:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8008186:	68e2      	ldr	r2, [r4, #12]
                       Command->Response         |\
 8008188:	4313      	orrs	r3, r2
                       Command->CPSM);
 800818a:	6922      	ldr	r2, [r4, #16]
                       Command->WaitForInterrupt |\
 800818c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800818e:	68e9      	ldr	r1, [r5, #12]
 8008190:	4a0e      	ldr	r2, [pc, #56]	; (80081cc <SDMMC_SendCommand+0x88>)
 8008192:	400a      	ands	r2, r1
 8008194:	4313      	orrs	r3, r2
 8008196:	60eb      	str	r3, [r5, #12]
}
 8008198:	2000      	movs	r0, #0
 800819a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800819c:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80081a0:	480b      	ldr	r0, [pc, #44]	; (80081d0 <SDMMC_SendCommand+0x8c>)
 80081a2:	f00c f993 	bl	80144cc <assert_failed>
 80081a6:	e7d3      	b.n	8008150 <SDMMC_SendCommand+0xc>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 80081a8:	f240 1165 	movw	r1, #357	; 0x165
 80081ac:	4808      	ldr	r0, [pc, #32]	; (80081d0 <SDMMC_SendCommand+0x8c>)
 80081ae:	f00c f98d 	bl	80144cc <assert_failed>
 80081b2:	e7d4      	b.n	800815e <SDMMC_SendCommand+0x1a>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 80081b4:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80081b8:	4805      	ldr	r0, [pc, #20]	; (80081d0 <SDMMC_SendCommand+0x8c>)
 80081ba:	f00c f987 	bl	80144cc <assert_failed>
 80081be:	e7d7      	b.n	8008170 <SDMMC_SendCommand+0x2c>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 80081c0:	f240 1167 	movw	r1, #359	; 0x167
 80081c4:	4802      	ldr	r0, [pc, #8]	; (80081d0 <SDMMC_SendCommand+0x8c>)
 80081c6:	f00c f981 	bl	80144cc <assert_failed>
 80081ca:	e7d7      	b.n	800817c <SDMMC_SendCommand+0x38>
 80081cc:	fffff000 	.word	0xfffff000
 80081d0:	08019cb4 	.word	0x08019cb4

080081d4 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 80081d4:	6900      	ldr	r0, [r0, #16]
}
 80081d6:	b2c0      	uxtb	r0, r0
 80081d8:	4770      	bx	lr
	...

080081dc <SDMMC_GetResponse>:
{
 80081dc:	b530      	push	{r4, r5, lr}
 80081de:	b083      	sub	sp, #12
 80081e0:	4604      	mov	r4, r0
  __IO uint32_t tmp = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	9301      	str	r3, [sp, #4]
  assert_param(IS_SDMMC_RESP(Response));
 80081e6:	460d      	mov	r5, r1
 80081e8:	4299      	cmp	r1, r3
 80081ea:	bf18      	it	ne
 80081ec:	2904      	cmpne	r1, #4
 80081ee:	d006      	beq.n	80081fe <SDMMC_GetResponse+0x22>
 80081f0:	f1b1 030c 	subs.w	r3, r1, #12
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	2908      	cmp	r1, #8
 80081fa:	d000      	beq.n	80081fe <SDMMC_GetResponse+0x22>
 80081fc:	b933      	cbnz	r3, 800820c <SDMMC_GetResponse+0x30>
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80081fe:	3414      	adds	r4, #20
 8008200:	442c      	add	r4, r5
 8008202:	9401      	str	r4, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	6818      	ldr	r0, [r3, #0]
}  
 8008208:	b003      	add	sp, #12
 800820a:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_SDMMC_RESP(Response));
 800820c:	f240 1193 	movw	r1, #403	; 0x193
 8008210:	4801      	ldr	r0, [pc, #4]	; (8008218 <SDMMC_GetResponse+0x3c>)
 8008212:	f00c f95b 	bl	80144cc <assert_failed>
 8008216:	e7f2      	b.n	80081fe <SDMMC_GetResponse+0x22>
 8008218:	08019cb4 	.word	0x08019cb4

0800821c <SDMMC_GetCmdResp1>:
{
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4604      	mov	r4, r0
 8008220:	460d      	mov	r5, r1
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8008222:	4b4f      	ldr	r3, [pc, #316]	; (8008360 <SDMMC_GetCmdResp1+0x144>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	494f      	ldr	r1, [pc, #316]	; (8008364 <SDMMC_GetCmdResp1+0x148>)
 8008228:	fba1 1303 	umull	r1, r3, r1, r3
 800822c:	0a5b      	lsrs	r3, r3, #9
 800822e:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0)
 8008232:	4613      	mov	r3, r2
 8008234:	3a01      	subs	r2, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d05b      	beq.n	80082f2 <SDMMC_GetCmdResp1+0xd6>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800823a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800823c:	f013 0f45 	tst.w	r3, #69	; 0x45
 8008240:	d0f7      	beq.n	8008232 <SDMMC_GetCmdResp1+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008244:	f013 0f04 	tst.w	r3, #4
 8008248:	d106      	bne.n	8008258 <SDMMC_GetCmdResp1+0x3c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800824a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800824c:	f013 0f01 	tst.w	r3, #1
 8008250:	d005      	beq.n	800825e <SDMMC_GetCmdResp1+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008252:	2001      	movs	r0, #1
 8008254:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008256:	e04e      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008258:	2004      	movs	r0, #4
 800825a:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800825c:	e04b      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800825e:	4620      	mov	r0, r4
 8008260:	f7ff ffb8 	bl	80081d4 <SDMMC_GetCommandResponse>
 8008264:	42a8      	cmp	r0, r5
 8008266:	d001      	beq.n	800826c <SDMMC_GetCmdResp1+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008268:	2001      	movs	r0, #1
 800826a:	e044      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800826c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8008270:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008272:	2100      	movs	r1, #0
 8008274:	4620      	mov	r0, r4
 8008276:	f7ff ffb1 	bl	80081dc <SDMMC_GetResponse>
 800827a:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800827c:	483a      	ldr	r0, [pc, #232]	; (8008368 <SDMMC_GetCmdResp1+0x14c>)
 800827e:	4018      	ands	r0, r3
 8008280:	b3c8      	cbz	r0, 80082f6 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008282:	2b00      	cmp	r3, #0
 8008284:	db38      	blt.n	80082f8 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008286:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800828a:	d138      	bne.n	80082fe <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800828c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008290:	d137      	bne.n	8008302 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008292:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008296:	d136      	bne.n	8008306 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008298:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800829c:	d136      	bne.n	800830c <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800829e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80082a2:	d136      	bne.n	8008312 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80082a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80082a8:	d136      	bne.n	8008318 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80082aa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80082ae:	d136      	bne.n	800831e <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80082b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80082b4:	d136      	bne.n	8008324 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80082b6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80082ba:	d136      	bne.n	800832a <SDMMC_GetCmdResp1+0x10e>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80082bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80082c0:	d136      	bne.n	8008330 <SDMMC_GetCmdResp1+0x114>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80082c2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80082c6:	d136      	bne.n	8008336 <SDMMC_GetCmdResp1+0x11a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80082c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80082cc:	d136      	bne.n	800833c <SDMMC_GetCmdResp1+0x120>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80082ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80082d2:	d136      	bne.n	8008342 <SDMMC_GetCmdResp1+0x126>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80082d4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80082d8:	d136      	bne.n	8008348 <SDMMC_GetCmdResp1+0x12c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80082da:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80082de:	d136      	bne.n	800834e <SDMMC_GetCmdResp1+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80082e0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80082e4:	d136      	bne.n	8008354 <SDMMC_GetCmdResp1+0x138>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80082e6:	f013 0f08 	tst.w	r3, #8
 80082ea:	d036      	beq.n	800835a <SDMMC_GetCmdResp1+0x13e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80082ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80082f0:	e001      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
      return SDMMC_ERROR_TIMEOUT;
 80082f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80082f8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80082fc:	e7fb      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80082fe:	2040      	movs	r0, #64	; 0x40
 8008300:	e7f9      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008302:	2080      	movs	r0, #128	; 0x80
 8008304:	e7f7      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008306:	f44f 7080 	mov.w	r0, #256	; 0x100
 800830a:	e7f4      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800830c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008310:	e7f1      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008312:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008316:	e7ee      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008318:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800831c:	e7eb      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800831e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008322:	e7e8      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008324:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008328:	e7e5      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800832a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800832e:	e7e2      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CC_ERR;
 8008330:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008334:	e7df      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008336:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800833a:	e7dc      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800833c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8008340:	e7d9      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008342:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008346:	e7d6      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008348:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800834c:	e7d3      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800834e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008352:	e7d0      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_ERASE_RESET;
 8008354:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008358:	e7cd      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800835a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800835e:	e7ca      	b.n	80082f6 <SDMMC_GetCmdResp1+0xda>
 8008360:	200000a8 	.word	0x200000a8
 8008364:	10624dd3 	.word	0x10624dd3
 8008368:	fdffe008 	.word	0xfdffe008

0800836c <SDMMC_GetCmdResp6>:
{
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	4605      	mov	r5, r0
 8008370:	460e      	mov	r6, r1
 8008372:	4617      	mov	r7, r2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8008374:	4b22      	ldr	r3, [pc, #136]	; (8008400 <SDMMC_GetCmdResp6+0x94>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a22      	ldr	r2, [pc, #136]	; (8008404 <SDMMC_GetCmdResp6+0x98>)
 800837a:	fba2 2303 	umull	r2, r3, r2, r3
 800837e:	0a5b      	lsrs	r3, r3, #9
 8008380:	f241 3288 	movw	r2, #5000	; 0x1388
 8008384:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0)
 8008388:	461c      	mov	r4, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	b37c      	cbz	r4, 80083ee <SDMMC_GetCmdResp6+0x82>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800838e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008390:	f012 0f45 	tst.w	r2, #69	; 0x45
 8008394:	d0f8      	beq.n	8008388 <SDMMC_GetCmdResp6+0x1c>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008396:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008398:	f013 0f04 	tst.w	r3, #4
 800839c:	d106      	bne.n	80083ac <SDMMC_GetCmdResp6+0x40>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800839e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80083a0:	f013 0f01 	tst.w	r3, #1
 80083a4:	d005      	beq.n	80083b2 <SDMMC_GetCmdResp6+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80083a6:	2001      	movs	r0, #1
 80083a8:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083aa:	e022      	b.n	80083f2 <SDMMC_GetCmdResp6+0x86>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80083ac:	2004      	movs	r0, #4
 80083ae:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083b0:	e01f      	b.n	80083f2 <SDMMC_GetCmdResp6+0x86>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80083b2:	4628      	mov	r0, r5
 80083b4:	f7ff ff0e 	bl	80081d4 <SDMMC_GetCommandResponse>
 80083b8:	42b0      	cmp	r0, r6
 80083ba:	d001      	beq.n	80083c0 <SDMMC_GetCmdResp6+0x54>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083bc:	2001      	movs	r0, #1
 80083be:	e018      	b.n	80083f2 <SDMMC_GetCmdResp6+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80083c0:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80083c4:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80083c6:	2100      	movs	r1, #0
 80083c8:	4628      	mov	r0, r5
 80083ca:	f7ff ff07 	bl	80081dc <SDMMC_GetResponse>
 80083ce:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80083d0:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 80083d4:	d008      	beq.n	80083e8 <SDMMC_GetCmdResp6+0x7c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80083d6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80083da:	d10b      	bne.n	80083f4 <SDMMC_GetCmdResp6+0x88>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80083dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80083e0:	d00b      	beq.n	80083fa <SDMMC_GetCmdResp6+0x8e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80083e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80083e6:	e004      	b.n	80083f2 <SDMMC_GetCmdResp6+0x86>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80083e8:	0c1b      	lsrs	r3, r3, #16
 80083ea:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 80083ec:	e001      	b.n	80083f2 <SDMMC_GetCmdResp6+0x86>
      return SDMMC_ERROR_TIMEOUT;
 80083ee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80083f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80083f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80083f8:	e7fb      	b.n	80083f2 <SDMMC_GetCmdResp6+0x86>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80083fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80083fe:	e7f8      	b.n	80083f2 <SDMMC_GetCmdResp6+0x86>
 8008400:	200000a8 	.word	0x200000a8
 8008404:	10624dd3 	.word	0x10624dd3

08008408 <SDMMC_ConfigData>:
{
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4605      	mov	r5, r0
 800840c:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800840e:	684b      	ldr	r3, [r1, #4]
 8008410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008414:	d23d      	bcs.n	8008492 <SDMMC_ConfigData+0x8a>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	bf18      	it	ne
 800841c:	2b10      	cmpne	r3, #16
 800841e:	d019      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008420:	2b20      	cmp	r3, #32
 8008422:	d017      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008424:	2b30      	cmp	r3, #48	; 0x30
 8008426:	d015      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008428:	2b40      	cmp	r3, #64	; 0x40
 800842a:	d013      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 800842c:	2b50      	cmp	r3, #80	; 0x50
 800842e:	d011      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008430:	2b60      	cmp	r3, #96	; 0x60
 8008432:	d00f      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008434:	2b70      	cmp	r3, #112	; 0x70
 8008436:	d00d      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008438:	2b80      	cmp	r3, #128	; 0x80
 800843a:	d00b      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 800843c:	2b90      	cmp	r3, #144	; 0x90
 800843e:	d009      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008440:	2ba0      	cmp	r3, #160	; 0xa0
 8008442:	d007      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008444:	2bb0      	cmp	r3, #176	; 0xb0
 8008446:	d005      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008448:	2bc0      	cmp	r3, #192	; 0xc0
 800844a:	d003      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 800844c:	2bd0      	cmp	r3, #208	; 0xd0
 800844e:	d001      	beq.n	8008454 <SDMMC_ConfigData+0x4c>
 8008450:	2be0      	cmp	r3, #224	; 0xe0
 8008452:	d124      	bne.n	800849e <SDMMC_ConfigData+0x96>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 8008454:	68e3      	ldr	r3, [r4, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	bf18      	it	ne
 800845a:	2b02      	cmpne	r3, #2
 800845c:	d125      	bne.n	80084aa <SDMMC_ConfigData+0xa2>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	bf18      	it	ne
 8008464:	2b04      	cmpne	r3, #4
 8008466:	d126      	bne.n	80084b6 <SDMMC_ConfigData+0xae>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 8008468:	6963      	ldr	r3, [r4, #20]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d829      	bhi.n	80084c2 <SDMMC_ConfigData+0xba>
  SDMMCx->DTIMER = Data->DataTimeOut;
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	626b      	str	r3, [r5, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8008472:	6863      	ldr	r3, [r4, #4]
 8008474:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008476:	68a3      	ldr	r3, [r4, #8]
                       Data->TransferDir   |\
 8008478:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800847a:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800847c:	6922      	ldr	r2, [r4, #16]
                       Data->TransferDir   |\
 800847e:	4313      	orrs	r3, r2
                       Data->DPSM);
 8008480:	6962      	ldr	r2, [r4, #20]
                       Data->TransferMode  |\
 8008482:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008484:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008486:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800848a:	4313      	orrs	r3, r2
 800848c:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800848e:	2000      	movs	r0, #0
 8008490:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 8008492:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8008496:	480e      	ldr	r0, [pc, #56]	; (80084d0 <SDMMC_ConfigData+0xc8>)
 8008498:	f00c f818 	bl	80144cc <assert_failed>
 800849c:	e7bb      	b.n	8008416 <SDMMC_ConfigData+0xe>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800849e:	f240 11a9 	movw	r1, #425	; 0x1a9
 80084a2:	480b      	ldr	r0, [pc, #44]	; (80084d0 <SDMMC_ConfigData+0xc8>)
 80084a4:	f00c f812 	bl	80144cc <assert_failed>
 80084a8:	e7d4      	b.n	8008454 <SDMMC_ConfigData+0x4c>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 80084aa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084ae:	4808      	ldr	r0, [pc, #32]	; (80084d0 <SDMMC_ConfigData+0xc8>)
 80084b0:	f00c f80c 	bl	80144cc <assert_failed>
 80084b4:	e7d3      	b.n	800845e <SDMMC_ConfigData+0x56>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 80084b6:	f240 11ab 	movw	r1, #427	; 0x1ab
 80084ba:	4805      	ldr	r0, [pc, #20]	; (80084d0 <SDMMC_ConfigData+0xc8>)
 80084bc:	f00c f806 	bl	80144cc <assert_failed>
 80084c0:	e7d2      	b.n	8008468 <SDMMC_ConfigData+0x60>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 80084c2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80084c6:	4802      	ldr	r0, [pc, #8]	; (80084d0 <SDMMC_ConfigData+0xc8>)
 80084c8:	f00c f800 	bl	80144cc <assert_failed>
 80084cc:	e7cf      	b.n	800846e <SDMMC_ConfigData+0x66>
 80084ce:	bf00      	nop
 80084d0:	08019cb4 	.word	0x08019cb4

080084d4 <SDMMC_CmdBlockLength>:
{
 80084d4:	b530      	push	{r4, r5, lr}
 80084d6:	b087      	sub	sp, #28
 80084d8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80084da:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80084dc:	2510      	movs	r5, #16
 80084de:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084e0:	2340      	movs	r3, #64	; 0x40
 80084e2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084e4:	2300      	movs	r3, #0
 80084e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ec:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084ee:	a901      	add	r1, sp, #4
 80084f0:	f7ff fe28 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80084f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f8:	4629      	mov	r1, r5
 80084fa:	4620      	mov	r0, r4
 80084fc:	f7ff fe8e 	bl	800821c <SDMMC_GetCmdResp1>
}
 8008500:	b007      	add	sp, #28
 8008502:	bd30      	pop	{r4, r5, pc}

08008504 <SDMMC_CmdReadSingleBlock>:
{
 8008504:	b530      	push	{r4, r5, lr}
 8008506:	b087      	sub	sp, #28
 8008508:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800850a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800850c:	2511      	movs	r5, #17
 800850e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008510:	2340      	movs	r3, #64	; 0x40
 8008512:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008514:	2300      	movs	r3, #0
 8008516:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800851c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800851e:	a901      	add	r1, sp, #4
 8008520:	f7ff fe10 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008524:	f241 3288 	movw	r2, #5000	; 0x1388
 8008528:	4629      	mov	r1, r5
 800852a:	4620      	mov	r0, r4
 800852c:	f7ff fe76 	bl	800821c <SDMMC_GetCmdResp1>
}
 8008530:	b007      	add	sp, #28
 8008532:	bd30      	pop	{r4, r5, pc}

08008534 <SDMMC_CmdReadMultiBlock>:
{
 8008534:	b530      	push	{r4, r5, lr}
 8008536:	b087      	sub	sp, #28
 8008538:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800853a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800853c:	2512      	movs	r5, #18
 800853e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008540:	2340      	movs	r3, #64	; 0x40
 8008542:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008544:	2300      	movs	r3, #0
 8008546:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800854c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800854e:	a901      	add	r1, sp, #4
 8008550:	f7ff fdf8 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008554:	f241 3288 	movw	r2, #5000	; 0x1388
 8008558:	4629      	mov	r1, r5
 800855a:	4620      	mov	r0, r4
 800855c:	f7ff fe5e 	bl	800821c <SDMMC_GetCmdResp1>
}
 8008560:	b007      	add	sp, #28
 8008562:	bd30      	pop	{r4, r5, pc}

08008564 <SDMMC_CmdWriteSingleBlock>:
{
 8008564:	b530      	push	{r4, r5, lr}
 8008566:	b087      	sub	sp, #28
 8008568:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800856a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800856c:	2518      	movs	r5, #24
 800856e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008570:	2340      	movs	r3, #64	; 0x40
 8008572:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008574:	2300      	movs	r3, #0
 8008576:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800857c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800857e:	a901      	add	r1, sp, #4
 8008580:	f7ff fde0 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008584:	f241 3288 	movw	r2, #5000	; 0x1388
 8008588:	4629      	mov	r1, r5
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff fe46 	bl	800821c <SDMMC_GetCmdResp1>
}
 8008590:	b007      	add	sp, #28
 8008592:	bd30      	pop	{r4, r5, pc}

08008594 <SDMMC_CmdWriteMultiBlock>:
{
 8008594:	b530      	push	{r4, r5, lr}
 8008596:	b087      	sub	sp, #28
 8008598:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800859a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800859c:	2519      	movs	r5, #25
 800859e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085a0:	2340      	movs	r3, #64	; 0x40
 80085a2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085a4:	2300      	movs	r3, #0
 80085a6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ac:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085ae:	a901      	add	r1, sp, #4
 80085b0:	f7ff fdc8 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80085b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b8:	4629      	mov	r1, r5
 80085ba:	4620      	mov	r0, r4
 80085bc:	f7ff fe2e 	bl	800821c <SDMMC_GetCmdResp1>
}
 80085c0:	b007      	add	sp, #28
 80085c2:	bd30      	pop	{r4, r5, pc}

080085c4 <SDMMC_CmdStopTransfer>:
{
 80085c4:	b530      	push	{r4, r5, lr}
 80085c6:	b087      	sub	sp, #28
 80085c8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80085ce:	250c      	movs	r5, #12
 80085d0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085d2:	2240      	movs	r2, #64	; 0x40
 80085d4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085dc:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085de:	a901      	add	r1, sp, #4
 80085e0:	f7ff fdb0 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80085e4:	4a03      	ldr	r2, [pc, #12]	; (80085f4 <SDMMC_CmdStopTransfer+0x30>)
 80085e6:	4629      	mov	r1, r5
 80085e8:	4620      	mov	r0, r4
 80085ea:	f7ff fe17 	bl	800821c <SDMMC_GetCmdResp1>
}
 80085ee:	b007      	add	sp, #28
 80085f0:	bd30      	pop	{r4, r5, pc}
 80085f2:	bf00      	nop
 80085f4:	05f5e100 	.word	0x05f5e100

080085f8 <SDMMC_CmdSelDesel>:
{
 80085f8:	b530      	push	{r4, r5, lr}
 80085fa:	b087      	sub	sp, #28
 80085fc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80085fe:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008600:	2507      	movs	r5, #7
 8008602:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008604:	2340      	movs	r3, #64	; 0x40
 8008606:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008608:	2300      	movs	r3, #0
 800860a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800860c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008610:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008612:	a901      	add	r1, sp, #4
 8008614:	f7ff fd96 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008618:	f241 3288 	movw	r2, #5000	; 0x1388
 800861c:	4629      	mov	r1, r5
 800861e:	4620      	mov	r0, r4
 8008620:	f7ff fdfc 	bl	800821c <SDMMC_GetCmdResp1>
}
 8008624:	b007      	add	sp, #28
 8008626:	bd30      	pop	{r4, r5, pc}

08008628 <SDMMC_CmdGoIdleState>:
{
 8008628:	b510      	push	{r4, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008632:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008634:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008636:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800863c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800863e:	a901      	add	r1, sp, #4
 8008640:	f7ff fd80 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008644:	4620      	mov	r0, r4
 8008646:	f7ff fc67 	bl	8007f18 <SDMMC_GetCmdError>
}
 800864a:	b006      	add	sp, #24
 800864c:	bd10      	pop	{r4, pc}

0800864e <SDMMC_CmdOperCond>:
{
 800864e:	b510      	push	{r4, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008654:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008658:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800865a:	2308      	movs	r3, #8
 800865c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800865e:	2340      	movs	r3, #64	; 0x40
 8008660:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008662:	2300      	movs	r3, #0
 8008664:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800866a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800866c:	a901      	add	r1, sp, #4
 800866e:	f7ff fd69 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008672:	4620      	mov	r0, r4
 8008674:	f7ff fcbe 	bl	8007ff4 <SDMMC_GetCmdResp7>
}
 8008678:	b006      	add	sp, #24
 800867a:	bd10      	pop	{r4, pc}

0800867c <SDMMC_CmdAppCommand>:
{
 800867c:	b530      	push	{r4, r5, lr}
 800867e:	b087      	sub	sp, #28
 8008680:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008682:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008684:	2537      	movs	r5, #55	; 0x37
 8008686:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008688:	2340      	movs	r3, #64	; 0x40
 800868a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800868c:	2300      	movs	r3, #0
 800868e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008694:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008696:	a901      	add	r1, sp, #4
 8008698:	f7ff fd54 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800869c:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a0:	4629      	mov	r1, r5
 80086a2:	4620      	mov	r0, r4
 80086a4:	f7ff fdba 	bl	800821c <SDMMC_GetCmdResp1>
}
 80086a8:	b007      	add	sp, #28
 80086aa:	bd30      	pop	{r4, r5, pc}

080086ac <SDMMC_CmdAppOperCommand>:
{
 80086ac:	b510      	push	{r4, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80086b2:	4b0a      	ldr	r3, [pc, #40]	; (80086dc <SDMMC_CmdAppOperCommand+0x30>)
 80086b4:	430b      	orrs	r3, r1
 80086b6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80086b8:	2329      	movs	r3, #41	; 0x29
 80086ba:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086bc:	2340      	movs	r3, #64	; 0x40
 80086be:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086c0:	2300      	movs	r3, #0
 80086c2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086c8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086ca:	a901      	add	r1, sp, #4
 80086cc:	f7ff fd3a 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff fc6b 	bl	8007fac <SDMMC_GetCmdResp3>
}
 80086d6:	b006      	add	sp, #24
 80086d8:	bd10      	pop	{r4, pc}
 80086da:	bf00      	nop
 80086dc:	80100000 	.word	0x80100000

080086e0 <SDMMC_CmdBusWidth>:
{
 80086e0:	b530      	push	{r4, r5, lr}
 80086e2:	b087      	sub	sp, #28
 80086e4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80086e6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80086e8:	2506      	movs	r5, #6
 80086ea:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086ec:	2340      	movs	r3, #64	; 0x40
 80086ee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086f0:	2300      	movs	r3, #0
 80086f2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086f8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086fa:	a901      	add	r1, sp, #4
 80086fc:	f7ff fd22 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008700:	f241 3288 	movw	r2, #5000	; 0x1388
 8008704:	4629      	mov	r1, r5
 8008706:	4620      	mov	r0, r4
 8008708:	f7ff fd88 	bl	800821c <SDMMC_GetCmdResp1>
}
 800870c:	b007      	add	sp, #28
 800870e:	bd30      	pop	{r4, r5, pc}

08008710 <SDMMC_CmdSendSCR>:
{
 8008710:	b530      	push	{r4, r5, lr}
 8008712:	b087      	sub	sp, #28
 8008714:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800871a:	2533      	movs	r5, #51	; 0x33
 800871c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800871e:	2240      	movs	r2, #64	; 0x40
 8008720:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008722:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008728:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800872a:	a901      	add	r1, sp, #4
 800872c:	f7ff fd0a 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008730:	f241 3288 	movw	r2, #5000	; 0x1388
 8008734:	4629      	mov	r1, r5
 8008736:	4620      	mov	r0, r4
 8008738:	f7ff fd70 	bl	800821c <SDMMC_GetCmdResp1>
}
 800873c:	b007      	add	sp, #28
 800873e:	bd30      	pop	{r4, r5, pc}

08008740 <SDMMC_CmdSendCID>:
{
 8008740:	b510      	push	{r4, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800874a:	2202      	movs	r2, #2
 800874c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800874e:	22c0      	movs	r2, #192	; 0xc0
 8008750:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008752:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008758:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800875a:	a901      	add	r1, sp, #4
 800875c:	f7ff fcf2 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008760:	4620      	mov	r0, r4
 8008762:	f7ff fbf7 	bl	8007f54 <SDMMC_GetCmdResp2>
}
 8008766:	b006      	add	sp, #24
 8008768:	bd10      	pop	{r4, pc}

0800876a <SDMMC_CmdSendCSD>:
{
 800876a:	b510      	push	{r4, lr}
 800876c:	b086      	sub	sp, #24
 800876e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008770:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008772:	2309      	movs	r3, #9
 8008774:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008776:	23c0      	movs	r3, #192	; 0xc0
 8008778:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800877a:	2300      	movs	r3, #0
 800877c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800877e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008782:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008784:	a901      	add	r1, sp, #4
 8008786:	f7ff fcdd 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800878a:	4620      	mov	r0, r4
 800878c:	f7ff fbe2 	bl	8007f54 <SDMMC_GetCmdResp2>
}
 8008790:	b006      	add	sp, #24
 8008792:	bd10      	pop	{r4, pc}

08008794 <SDMMC_CmdSetRelAdd>:
{
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	4604      	mov	r4, r0
 800879a:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80087a0:	2603      	movs	r6, #3
 80087a2:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087a4:	2240      	movs	r2, #64	; 0x40
 80087a6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087a8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ae:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087b0:	a901      	add	r1, sp, #4
 80087b2:	f7ff fcc7 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80087b6:	462a      	mov	r2, r5
 80087b8:	4631      	mov	r1, r6
 80087ba:	4620      	mov	r0, r4
 80087bc:	f7ff fdd6 	bl	800836c <SDMMC_GetCmdResp6>
}
 80087c0:	b006      	add	sp, #24
 80087c2:	bd70      	pop	{r4, r5, r6, pc}

080087c4 <SDMMC_CmdSendStatus>:
{
 80087c4:	b530      	push	{r4, r5, lr}
 80087c6:	b087      	sub	sp, #28
 80087c8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80087ca:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80087cc:	250d      	movs	r5, #13
 80087ce:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087d0:	2340      	movs	r3, #64	; 0x40
 80087d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087d4:	2300      	movs	r3, #0
 80087d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087dc:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087de:	a901      	add	r1, sp, #4
 80087e0:	f7ff fcb0 	bl	8008144 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80087e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e8:	4629      	mov	r1, r5
 80087ea:	4620      	mov	r0, r4
 80087ec:	f7ff fd16 	bl	800821c <SDMMC_GetCmdResp1>
}
 80087f0:	b007      	add	sp, #28
 80087f2:	bd30      	pop	{r4, r5, pc}

080087f4 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80087f4:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80087f6:	3301      	adds	r3, #1
 80087f8:	4a0c      	ldr	r2, [pc, #48]	; (800882c <USB_CoreReset+0x38>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d811      	bhi.n	8008822 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087fe:	6902      	ldr	r2, [r0, #16]
 8008800:	2a00      	cmp	r2, #0
 8008802:	daf8      	bge.n	80087f6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008804:	6903      	ldr	r3, [r0, #16]
 8008806:	f043 0301 	orr.w	r3, r3, #1
 800880a:	6103      	str	r3, [r0, #16]
  count = 0U;
 800880c:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800880e:	3301      	adds	r3, #1
 8008810:	4a06      	ldr	r2, [pc, #24]	; (800882c <USB_CoreReset+0x38>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d807      	bhi.n	8008826 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008816:	6902      	ldr	r2, [r0, #16]
 8008818:	f012 0f01 	tst.w	r2, #1
 800881c:	d1f7      	bne.n	800880e <USB_CoreReset+0x1a>

  return HAL_OK;
 800881e:	2000      	movs	r0, #0
 8008820:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008822:	2003      	movs	r0, #3
 8008824:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008826:	2003      	movs	r0, #3
}
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	00030d40 	.word	0x00030d40

08008830 <USB_CoreInit>:
{
 8008830:	b084      	sub	sp, #16
 8008832:	b510      	push	{r4, lr}
 8008834:	4604      	mov	r4, r0
 8008836:	a803      	add	r0, sp, #12
 8008838:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800883c:	9b08      	ldr	r3, [sp, #32]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d11d      	bne.n	800887e <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008848:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800884a:	68e2      	ldr	r2, [r4, #12]
 800884c:	4b16      	ldr	r3, [pc, #88]	; (80088a8 <USB_CoreInit+0x78>)
 800884e:	4013      	ands	r3, r2
 8008850:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008858:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800885a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800885c:	2b01      	cmp	r3, #1
 800885e:	d009      	beq.n	8008874 <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff ffc7 	bl	80087f4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8008866:	9b06      	ldr	r3, [sp, #24]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d014      	beq.n	8008896 <USB_CoreInit+0x66>
}
 800886c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008870:	b004      	add	sp, #16
 8008872:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008874:	68e3      	ldr	r3, [r4, #12]
 8008876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800887a:	60e3      	str	r3, [r4, #12]
 800887c:	e7f0      	b.n	8008860 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008884:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8008886:	4620      	mov	r0, r4
 8008888:	f7ff ffb4 	bl	80087f4 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800888c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800888e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008892:	63a3      	str	r3, [r4, #56]	; 0x38
 8008894:	e7e7      	b.n	8008866 <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008896:	68a3      	ldr	r3, [r4, #8]
 8008898:	f043 0306 	orr.w	r3, r3, #6
 800889c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	f043 0320 	orr.w	r3, r3, #32
 80088a4:	60a3      	str	r3, [r4, #8]
 80088a6:	e7e1      	b.n	800886c <USB_CoreInit+0x3c>
 80088a8:	ffbdffbf 	.word	0xffbdffbf

080088ac <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088ac:	6883      	ldr	r3, [r0, #8]
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	6083      	str	r3, [r0, #8]
}
 80088b4:	2000      	movs	r0, #0
 80088b6:	4770      	bx	lr

080088b8 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088b8:	6883      	ldr	r3, [r0, #8]
 80088ba:	f023 0301 	bic.w	r3, r3, #1
 80088be:	6083      	str	r3, [r0, #8]
}
 80088c0:	2000      	movs	r0, #0
 80088c2:	4770      	bx	lr

080088c4 <USB_SetCurrentMode>:
{
 80088c4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088c6:	68c3      	ldr	r3, [r0, #12]
 80088c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088cc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80088ce:	2901      	cmp	r1, #1
 80088d0:	d009      	beq.n	80088e6 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 80088d2:	b969      	cbnz	r1, 80088f0 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088d4:	68c3      	ldr	r3, [r0, #12]
 80088d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088da:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80088dc:	2032      	movs	r0, #50	; 0x32
 80088de:	f7f8 fcb7 	bl	8001250 <HAL_Delay>
  return HAL_OK;
 80088e2:	2000      	movs	r0, #0
}
 80088e4:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088e6:	68c3      	ldr	r3, [r0, #12]
 80088e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088ec:	60c3      	str	r3, [r0, #12]
 80088ee:	e7f5      	b.n	80088dc <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 80088f0:	2001      	movs	r0, #1
 80088f2:	e7f7      	b.n	80088e4 <USB_SetCurrentMode+0x20>

080088f4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088f4:	0189      	lsls	r1, r1, #6
 80088f6:	f041 0120 	orr.w	r1, r1, #32
 80088fa:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 80088fc:	2300      	movs	r3, #0
    if (++count > 200000U)
 80088fe:	3301      	adds	r3, #1
 8008900:	4a05      	ldr	r2, [pc, #20]	; (8008918 <USB_FlushTxFifo+0x24>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d805      	bhi.n	8008912 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008906:	6902      	ldr	r2, [r0, #16]
 8008908:	f012 0f20 	tst.w	r2, #32
 800890c:	d1f7      	bne.n	80088fe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800890e:	2000      	movs	r0, #0
 8008910:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008912:	2003      	movs	r0, #3
}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	00030d40 	.word	0x00030d40

0800891c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800891c:	2310      	movs	r3, #16
 800891e:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8008920:	2300      	movs	r3, #0
    if (++count > 200000U)
 8008922:	3301      	adds	r3, #1
 8008924:	4a05      	ldr	r2, [pc, #20]	; (800893c <USB_FlushRxFifo+0x20>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d805      	bhi.n	8008936 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800892a:	6902      	ldr	r2, [r0, #16]
 800892c:	f012 0f10 	tst.w	r2, #16
 8008930:	d1f7      	bne.n	8008922 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8008932:	2000      	movs	r0, #0
 8008934:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008936:	2003      	movs	r0, #3
}
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	00030d40 	.word	0x00030d40

08008940 <USB_WritePacket>:
{
 8008940:	b510      	push	{r4, lr}
 8008942:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8008946:	b984      	cbnz	r4, 800896a <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8008948:	3303      	adds	r3, #3
 800894a:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 800894e:	f04f 0c00 	mov.w	ip, #0
 8008952:	e008      	b.n	8008966 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8008954:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8008958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800895c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008960:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8008962:	f10c 0c01 	add.w	ip, ip, #1
 8008966:	45f4      	cmp	ip, lr
 8008968:	d3f4      	bcc.n	8008954 <USB_WritePacket+0x14>
}
 800896a:	2000      	movs	r0, #0
 800896c:	bd10      	pop	{r4, pc}

0800896e <USB_ReadPacket>:
{
 800896e:	4684      	mov	ip, r0
 8008970:	4608      	mov	r0, r1
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008972:	1cd1      	adds	r1, r2, #3
 8008974:	0889      	lsrs	r1, r1, #2
  for (i = 0U; i < count32b; i++)
 8008976:	2300      	movs	r3, #0
 8008978:	e005      	b.n	8008986 <USB_ReadPacket+0x18>
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800897a:	f50c 5280 	add.w	r2, ip, #4096	; 0x1000
 800897e:	6812      	ldr	r2, [r2, #0]
 8008980:	f840 2b04 	str.w	r2, [r0], #4
  for (i = 0U; i < count32b; i++)
 8008984:	3301      	adds	r3, #1
 8008986:	428b      	cmp	r3, r1
 8008988:	d3f7      	bcc.n	800897a <USB_ReadPacket+0xc>
}
 800898a:	4770      	bx	lr

0800898c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800898c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800898e:	6980      	ldr	r0, [r0, #24]
}
 8008990:	4010      	ands	r0, r2
 8008992:	4770      	bx	lr

08008994 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8008994:	6940      	ldr	r0, [r0, #20]
}
 8008996:	f000 0001 	and.w	r0, r0, #1
 800899a:	4770      	bx	lr

0800899c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800899c:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80089a0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80089a4:	f023 0303 	bic.w	r3, r3, #3
 80089a8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80089ac:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80089b0:	f001 0203 	and.w	r2, r1, #3
 80089b4:	4313      	orrs	r3, r2
 80089b6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 80089ba:	2901      	cmp	r1, #1
 80089bc:	d003      	beq.n	80089c6 <USB_InitFSLSPClkSel+0x2a>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 80089be:	2902      	cmp	r1, #2
 80089c0:	d006      	beq.n	80089d0 <USB_InitFSLSPClkSel+0x34>
  {
    /* ... */
  }

  return HAL_OK;
}
 80089c2:	2000      	movs	r0, #0
 80089c4:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 80089c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80089ca:	f8cc 3004 	str.w	r3, [ip, #4]
 80089ce:	e7f8      	b.n	80089c2 <USB_InitFSLSPClkSel+0x26>
    USBx_HOST->HFIR = 6000U;
 80089d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80089d4:	f8cc 3004 	str.w	r3, [ip, #4]
 80089d8:	e7f3      	b.n	80089c2 <USB_InitFSLSPClkSel+0x26>

080089da <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80089da:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80089e0:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80089e4:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80089ec:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80089ee:	9b01      	ldr	r3, [sp, #4]
 80089f0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80089f4:	d101      	bne.n	80089fa <USB_DriveVbus+0x20>
 80089f6:	2901      	cmp	r1, #1
 80089f8:	d00c      	beq.n	8008a14 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008a00:	d005      	beq.n	8008a0e <USB_DriveVbus+0x34>
 8008a02:	b921      	cbnz	r1, 8008a0e <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008a04:	9b01      	ldr	r3, [sp, #4]
 8008a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a0a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8008a0e:	2000      	movs	r0, #0
 8008a10:	b002      	add	sp, #8
 8008a12:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008a14:	9b01      	ldr	r3, [sp, #4]
 8008a16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a1a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 8008a1e:	e7ec      	b.n	80089fa <USB_DriveVbus+0x20>

08008a20 <USB_HostInit>:
{
 8008a20:	b084      	sub	sp, #16
 8008a22:	b510      	push	{r4, lr}
 8008a24:	4604      	mov	r4, r0
 8008a26:	a803      	add	r0, sp, #12
 8008a28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a38:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a40:	d010      	beq.n	8008a64 <USB_HostInit+0x44>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8008a42:	9b05      	ldr	r3, [sp, #20]
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d006      	beq.n	8008a56 <USB_HostInit+0x36>
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008a48:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008a4c:	f023 0304 	bic.w	r3, r3, #4
 8008a50:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8008a54:	e00c      	b.n	8008a70 <USB_HostInit+0x50>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008a56:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008a5a:	f043 0304 	orr.w	r3, r3, #4
 8008a5e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8008a62:	e005      	b.n	8008a70 <USB_HostInit+0x50>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008a64:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8008a68:	f023 0304 	bic.w	r3, r3, #4
 8008a6c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008a70:	2110      	movs	r1, #16
 8008a72:	4620      	mov	r0, r4
 8008a74:	f7ff ff3e 	bl	80088f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f7ff ff4f 	bl	800891c <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	e009      	b.n	8008a96 <USB_HostInit+0x76>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008a82:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8008a86:	f04f 31ff 	mov.w	r1, #4294967295
 8008a8a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 8008a8e:	2100      	movs	r1, #0
 8008a90:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a94:	3201      	adds	r2, #1
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d8f2      	bhi.n	8008a82 <USB_HostInit+0x62>
  (void)USB_DriveVbus(USBx, 1U);
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f7ff ff9b 	bl	80089da <USB_DriveVbus>
  HAL_Delay(200U);
 8008aa4:	20c8      	movs	r0, #200	; 0xc8
 8008aa6:	f7f8 fbd3 	bl	8001250 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008aae:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab2:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ab4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ab6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008aba:	d017      	beq.n	8008aec <USB_HostInit+0xcc>
    USBx->GRXFSIZ  = 0x200U;
 8008abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ac0:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008ac2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8008ac6:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <USB_HostInit+0xe0>)
 8008aca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8008ace:	9b06      	ldr	r3, [sp, #24]
 8008ad0:	b91b      	cbnz	r3, 8008ada <USB_HostInit+0xba>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ad2:	69a3      	ldr	r3, [r4, #24]
 8008ad4:	f043 0310 	orr.w	r3, r3, #16
 8008ad8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008ada:	69a2      	ldr	r2, [r4, #24]
 8008adc:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <USB_HostInit+0xe4>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	61a3      	str	r3, [r4, #24]
}
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae8:	b004      	add	sp, #16
 8008aea:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008af0:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8008af4:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008af6:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <USB_HostInit+0xe8>)
 8008af8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008afc:	e7e7      	b.n	8008ace <USB_HostInit+0xae>
 8008afe:	bf00      	nop
 8008b00:	00e00300 	.word	0x00e00300
 8008b04:	a3200008 	.word	0xa3200008
 8008b08:	004000e0 	.word	0x004000e0

08008b0c <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008b0c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008b10:	6880      	ldr	r0, [r0, #8]
}
 8008b12:	b280      	uxth	r0, r0
 8008b14:	4770      	bx	lr

08008b16 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b18:	4604      	mov	r4, r0
 8008b1a:	f89d c018 	ldrb.w	ip, [sp, #24]
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008b1e:	eb00 1e41 	add.w	lr, r0, r1, lsl #5
 8008b22:	f50e 60a0 	add.w	r0, lr, #1280	; 0x500
 8008b26:	f04f 35ff 	mov.w	r5, #4294967295
 8008b2a:	6085      	str	r5, [r0, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008b2c:	f1bc 0f03 	cmp.w	ip, #3
 8008b30:	d864      	bhi.n	8008bfc <USB_HC_Init+0xe6>
 8008b32:	e8df f00c 	tbb	[pc, ip]
 8008b36:	5502      	.short	0x5502
 8008b38:	1802      	.short	0x1802
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b3a:	f240 459d 	movw	r5, #1181	; 0x49d
 8008b3e:	60c5      	str	r5, [r0, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008b40:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008b44:	d109      	bne.n	8008b5a <USB_HC_Init+0x44>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b46:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8008b48:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008b4c:	d058      	beq.n	8008c00 <USB_HC_Init+0xea>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008b4e:	68c5      	ldr	r5, [r0, #12]
 8008b50:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 8008b54:	60c5      	str	r5, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b56:	2000      	movs	r0, #0
 8008b58:	e00c      	b.n	8008b74 <USB_HC_Init+0x5e>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b5a:	68c5      	ldr	r5, [r0, #12]
 8008b5c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8008b60:	60c5      	str	r5, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b62:	2000      	movs	r0, #0
 8008b64:	e006      	b.n	8008b74 <USB_HC_Init+0x5e>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b66:	f240 659d 	movw	r5, #1693	; 0x69d
 8008b6a:	60c5      	str	r5, [r0, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b6c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008b70:	d130      	bne.n	8008bd4 <USB_HC_Init+0xbe>
  HAL_StatusTypeDef ret = HAL_OK;
 8008b72:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008b74:	f8d4 5418 	ldr.w	r5, [r4, #1048]	; 0x418
 8008b78:	f001 010f 	and.w	r1, r1, #15
 8008b7c:	2601      	movs	r6, #1
 8008b7e:	fa06 f101 	lsl.w	r1, r6, r1
 8008b82:	4329      	orrs	r1, r5
 8008b84:	f8c4 1418 	str.w	r1, [r4, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008b88:	69a1      	ldr	r1, [r4, #24]
 8008b8a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8008b8e:	61a1      	str	r1, [r4, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008b90:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008b94:	d136      	bne.n	8008c04 <USB_HC_Init+0xee>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8008b96:	2400      	movs	r4, #0
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008b98:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8008b9c:	2902      	cmp	r1, #2
 8008b9e:	d034      	beq.n	8008c0a <USB_HC_Init+0xf4>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008ba0:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ba2:	059b      	lsls	r3, r3, #22
 8008ba4:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008ba8:	02d2      	lsls	r2, r2, #11
 8008baa:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bae:	4313      	orrs	r3, r2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008bb0:	ea4f 428c 	mov.w	r2, ip, lsl #18
 8008bb4:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008bb8:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008bbe:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008bc2:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bc4:	4323      	orrs	r3, r4
 8008bc6:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bc8:	f8ce 3500 	str.w	r3, [lr, #1280]	; 0x500

  if (ep_type == EP_TYPE_INTR)
 8008bcc:	f1bc 0f03 	cmp.w	ip, #3
 8008bd0:	d01e      	beq.n	8008c10 <USB_HC_Init+0xfa>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }

  return ret;
}
 8008bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008bd4:	68c5      	ldr	r5, [r0, #12]
 8008bd6:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8008bda:	60c5      	str	r5, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e7c9      	b.n	8008b74 <USB_HC_Init+0x5e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008be0:	f240 2525 	movw	r5, #549	; 0x225
 8008be4:	60c5      	str	r5, [r0, #12]
      if ((epnum & 0x80U) == 0x80U)
 8008be6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008bea:	d101      	bne.n	8008bf0 <USB_HC_Init+0xda>
  HAL_StatusTypeDef ret = HAL_OK;
 8008bec:	2000      	movs	r0, #0
 8008bee:	e7c1      	b.n	8008b74 <USB_HC_Init+0x5e>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008bf0:	68c5      	ldr	r5, [r0, #12]
 8008bf2:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 8008bf6:	60c5      	str	r5, [r0, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e7bb      	b.n	8008b74 <USB_HC_Init+0x5e>
  switch (ep_type)
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	e7b9      	b.n	8008b74 <USB_HC_Init+0x5e>
  HAL_StatusTypeDef ret = HAL_OK;
 8008c00:	2000      	movs	r0, #0
 8008c02:	e7b7      	b.n	8008b74 <USB_HC_Init+0x5e>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008c04:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8008c08:	e7c6      	b.n	8008b98 <USB_HC_Init+0x82>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008c0a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008c0e:	e7c8      	b.n	8008ba2 <USB_HC_Init+0x8c>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008c10:	f8de 3500 	ldr.w	r3, [lr, #1280]	; 0x500
 8008c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c18:	f8ce 3500 	str.w	r3, [lr, #1280]	; 0x500
 8008c1c:	e7d9      	b.n	8008bd2 <USB_HC_Init+0xbc>

08008c1e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c1e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008c22:	6940      	ldr	r0, [r0, #20]
}
 8008c24:	b280      	uxth	r0, r0
 8008c26:	4770      	bx	lr

08008c28 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c28:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8008c2c:	f501 6ca0 	add.w	ip, r1, #1280	; 0x500
 8008c30:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008c34:	f3c3 4281 	ubfx	r2, r3, #18, #2

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c38:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8008c3c:	bf0c      	ite	eq
 8008c3e:	2301      	moveq	r3, #1
 8008c40:	2300      	movne	r3, #0
 8008c42:	2a02      	cmp	r2, #2
 8008c44:	bf08      	it	eq
 8008c46:	f043 0301 	orreq.w	r3, r3, #1
 8008c4a:	b363      	cbz	r3, 8008ca6 <USB_HC_Halt+0x7e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c4c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c54:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008c58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008c5a:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 8008c5e:	d11a      	bne.n	8008c96 <USB_HC_Halt+0x6e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c60:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008c64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008c68:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c6c:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008c70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008c74:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008c78:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c80:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      do
      {
        if (++count > 1000U)
 8008c84:	3301      	adds	r3, #1
 8008c86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c8a:	d80a      	bhi.n	8008ca2 <USB_HC_Halt+0x7a>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c8c:	f8dc 2000 	ldr.w	r2, [ip]
 8008c90:	2a00      	cmp	r2, #0
 8008c92:	dbf7      	blt.n	8008c84 <USB_HC_Halt+0x5c>
 8008c94:	e005      	b.n	8008ca2 <USB_HC_Halt+0x7a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c96:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008c9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c9e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	4770      	bx	lr
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ca6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008caa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cae:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008cb2:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8008cb6:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 8008cba:	d11a      	bne.n	8008cf2 <USB_HC_Halt+0xca>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cbc:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008cc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008cc4:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cc8:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008ccc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008cd0:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008cd4:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 8008cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cdc:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
        if (++count > 1000U)
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ce6:	d8dc      	bhi.n	8008ca2 <USB_HC_Halt+0x7a>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ce8:	f8dc 2000 	ldr.w	r2, [ip]
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	dbf7      	blt.n	8008ce0 <USB_HC_Halt+0xb8>
 8008cf0:	e7d7      	b.n	8008ca2 <USB_HC_Halt+0x7a>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cf2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8008cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cfa:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8008cfe:	e7d0      	b.n	8008ca2 <USB_HC_Halt+0x7a>

08008d00 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d00:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8008d04:	4a06      	ldr	r2, [pc, #24]	; (8008d20 <USB_DoPing+0x20>)
 8008d06:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d0a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d16:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	80080000 	.word	0x80080000

08008d24 <USB_HC_StartXfer>:
{
 8008d24:	b530      	push	{r4, r5, lr}
 8008d26:	b083      	sub	sp, #12
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008d28:	f891 c001 	ldrb.w	ip, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8008d2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008d2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008d32:	d007      	beq.n	8008d44 <USB_HC_StartXfer+0x20>
 8008d34:	790b      	ldrb	r3, [r1, #4]
 8008d36:	b92b      	cbnz	r3, 8008d44 <USB_HC_StartXfer+0x20>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008d38:	b912      	cbnz	r2, 8008d40 <USB_HC_StartXfer+0x1c>
 8008d3a:	794b      	ldrb	r3, [r1, #5]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d011      	beq.n	8008d64 <USB_HC_StartXfer+0x40>
    else if (dma == 1U)
 8008d40:	2a01      	cmp	r2, #1
 8008d42:	d013      	beq.n	8008d6c <USB_HC_StartXfer+0x48>
  if (hc->xfer_len > 0U)
 8008d44:	690b      	ldr	r3, [r1, #16]
 8008d46:	b1e3      	cbz	r3, 8008d82 <USB_HC_StartXfer+0x5e>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008d48:	890c      	ldrh	r4, [r1, #8]
 8008d4a:	4423      	add	r3, r4
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	fbb3 f3f4 	udiv	r3, r3, r4
 8008d52:	b29b      	uxth	r3, r3
    if (num_packets > max_hc_pkt_count)
 8008d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d58:	d914      	bls.n	8008d84 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008d5a:	0224      	lsls	r4, r4, #8
 8008d5c:	610c      	str	r4, [r1, #16]
      num_packets = max_hc_pkt_count;
 8008d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d62:	e00f      	b.n	8008d84 <USB_HC_StartXfer+0x60>
      (void)USB_DoPing(USBx, hc->ch_num);
 8008d64:	4661      	mov	r1, ip
 8008d66:	f7ff ffcb 	bl	8008d00 <USB_DoPing>
      return HAL_OK;
 8008d6a:	e079      	b.n	8008e60 <USB_HC_StartXfer+0x13c>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008d6c:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8008d70:	f8d3 450c 	ldr.w	r4, [r3, #1292]	; 0x50c
 8008d74:	f024 0460 	bic.w	r4, r4, #96	; 0x60
 8008d78:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	714b      	strb	r3, [r1, #5]
 8008d80:	e7e0      	b.n	8008d44 <USB_HC_StartXfer+0x20>
    num_packets = 1U;
 8008d82:	2301      	movs	r3, #1
  if (hc->ep_is_in != 0U)
 8008d84:	78cc      	ldrb	r4, [r1, #3]
 8008d86:	b11c      	cbz	r4, 8008d90 <USB_HC_StartXfer+0x6c>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008d88:	890c      	ldrh	r4, [r1, #8]
 8008d8a:	fb03 f404 	mul.w	r4, r3, r4
 8008d8e:	610c      	str	r4, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d90:	690c      	ldr	r4, [r1, #16]
 8008d92:	f3c4 0e12 	ubfx	lr, r4, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d96:	4c3a      	ldr	r4, [pc, #232]	; (8008e80 <USB_HC_StartXfer+0x15c>)
 8008d98:	ea04 43c3 	and.w	r3, r4, r3, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d9c:	ea4e 0303 	orr.w	r3, lr, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008da0:	f891 e00a 	ldrb.w	lr, [r1, #10]
 8008da4:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
 8008da8:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008dac:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008db0:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008db4:	f8cc 3510 	str.w	r3, [ip, #1296]	; 0x510
  if (dma != 0U)
 8008db8:	b112      	cbz	r2, 8008dc0 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008dba:	68cb      	ldr	r3, [r1, #12]
 8008dbc:	f8cc 3514 	str.w	r3, [ip, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008dc0:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8008dc4:	f8de 3008 	ldr.w	r3, [lr, #8]
 8008dc8:	f013 0f01 	tst.w	r3, #1
 8008dcc:	bf0c      	ite	eq
 8008dce:	2501      	moveq	r5, #1
 8008dd0:	2500      	movne	r5, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008dd2:	f8dc 4500 	ldr.w	r4, [ip, #1280]	; 0x500
 8008dd6:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8008dda:	f8cc 4500 	str.w	r4, [ip, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008dde:	f8dc 3500 	ldr.w	r3, [ip, #1280]	; 0x500
 8008de2:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 8008de6:	f8cc 3500 	str.w	r3, [ip, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008dea:	f8dc 4500 	ldr.w	r4, [ip, #1280]	; 0x500
 8008dee:	4b25      	ldr	r3, [pc, #148]	; (8008e84 <USB_HC_StartXfer+0x160>)
 8008df0:	601c      	str	r4, [r3, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008df2:	681c      	ldr	r4, [r3, #0]
 8008df4:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8008df8:	601c      	str	r4, [r3, #0]
  if (hc->ep_is_in != 0U)
 8008dfa:	78cb      	ldrb	r3, [r1, #3]
 8008dfc:	b1c3      	cbz	r3, 8008e30 <USB_HC_StartXfer+0x10c>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008dfe:	4c21      	ldr	r4, [pc, #132]	; (8008e84 <USB_HC_StartXfer+0x160>)
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e06:	6023      	str	r3, [r4, #0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e08:	4b1e      	ldr	r3, [pc, #120]	; (8008e84 <USB_HC_StartXfer+0x160>)
 8008e0a:	681c      	ldr	r4, [r3, #0]
 8008e0c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8008e10:	601c      	str	r4, [r3, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f8cc 3500 	str.w	r3, [ip, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8008e18:	bb12      	cbnz	r2, 8008e60 <USB_HC_StartXfer+0x13c>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008e1a:	78cb      	ldrb	r3, [r1, #3]
 8008e1c:	bb03      	cbnz	r3, 8008e60 <USB_HC_StartXfer+0x13c>
 8008e1e:	690b      	ldr	r3, [r1, #16]
 8008e20:	b1f3      	cbz	r3, 8008e60 <USB_HC_StartXfer+0x13c>
      switch (hc->ep_type)
 8008e22:	79ca      	ldrb	r2, [r1, #7]
 8008e24:	2a03      	cmp	r2, #3
 8008e26:	d814      	bhi.n	8008e52 <USB_HC_StartXfer+0x12e>
 8008e28:	e8df f002 	tbb	[pc, r2]
 8008e2c:	1d081d08 	.word	0x1d081d08
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008e30:	4c14      	ldr	r4, [pc, #80]	; (8008e84 <USB_HC_StartXfer+0x160>)
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	e7e5      	b.n	8008e08 <USB_HC_StartXfer+0xe4>
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e3c:	3303      	adds	r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008e3e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008e40:	b292      	uxth	r2, r2
 8008e42:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d203      	bcs.n	8008e52 <USB_HC_StartXfer+0x12e>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008e4a:	6983      	ldr	r3, [r0, #24]
 8008e4c:	f043 0320 	orr.w	r3, r3, #32
 8008e50:	6183      	str	r3, [r0, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008e52:	2300      	movs	r3, #0
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	8a0b      	ldrh	r3, [r1, #16]
 8008e58:	784a      	ldrb	r2, [r1, #1]
 8008e5a:	68c9      	ldr	r1, [r1, #12]
 8008e5c:	f7ff fd70 	bl	8008940 <USB_WritePacket>
}
 8008e60:	2000      	movs	r0, #0
 8008e62:	b003      	add	sp, #12
 8008e64:	bd30      	pop	{r4, r5, pc}
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e66:	3303      	adds	r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008e68:	f8de 2010 	ldr.w	r2, [lr, #16]
 8008e6c:	b292      	uxth	r2, r2
 8008e6e:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d2ed      	bcs.n	8008e52 <USB_HC_StartXfer+0x12e>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008e76:	6983      	ldr	r3, [r0, #24]
 8008e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e7c:	6183      	str	r3, [r0, #24]
 8008e7e:	e7e8      	b.n	8008e52 <USB_HC_StartXfer+0x12e>
 8008e80:	1ff80000 	.word	0x1ff80000
 8008e84:	20000160 	.word	0x20000160

08008e88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	4604      	mov	r4, r0
  uint32_t count = 0U;
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8008e8c:	f7ff fd14 	bl	80088b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008e90:	2110      	movs	r1, #16
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7ff fd2e 	bl	80088f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7ff fd3f 	bl	800891c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	e00a      	b.n	8008eb8 <USB_StopHost+0x30>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ea2:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8008ea6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008eaa:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 8008eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8008eb2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 8008eb6:	3201      	adds	r2, #1
 8008eb8:	2a0f      	cmp	r2, #15
 8008eba:	d9f2      	bls.n	8008ea2 <USB_StopHost+0x1a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008ebc:	2000      	movs	r0, #0
  uint32_t count = 0U;
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	e000      	b.n	8008ec4 <USB_StopHost+0x3c>
  for (i = 0U; i <= 15U; i++)
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	280f      	cmp	r0, #15
 8008ec6:	d813      	bhi.n	8008ef0 <USB_StopHost+0x68>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ec8:	eb04 1c40 	add.w	ip, r4, r0, lsl #5
 8008ecc:	f50c 61a0 	add.w	r1, ip, #1280	; 0x500
 8008ed0:	f8dc 2500 	ldr.w	r2, [ip, #1280]	; 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ed8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8008edc:	f8cc 2500 	str.w	r2, [ip, #1280]	; 0x500

    do
    {
      if (++count > 1000U)
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ee6:	d8ec      	bhi.n	8008ec2 <USB_StopHost+0x3a>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ee8:	680a      	ldr	r2, [r1, #0]
 8008eea:	2a00      	cmp	r2, #0
 8008eec:	dbf8      	blt.n	8008ee0 <USB_StopHost+0x58>
 8008eee:	e7e8      	b.n	8008ec2 <USB_StopHost+0x3a>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef4:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ef8:	6163      	str	r3, [r4, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7ff fcd6 	bl	80088ac <USB_EnableGlobalInt>

  return HAL_OK;
}
 8008f00:	2000      	movs	r0, #0
 8008f02:	bd10      	pop	{r4, pc}

08008f04 <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 8008f04:	2000      	movs	r0, #0
 8008f06:	4770      	bx	lr

08008f08 <USBH_MSC_Process>:
{
 8008f08:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f0a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8008f0e:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->state)
 8008f10:	7b33      	ldrb	r3, [r6, #12]
 8008f12:	b123      	cbz	r3, 8008f1e <USBH_MSC_Process+0x16>
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	f040 8145 	bne.w	80091a4 <USBH_MSC_Process+0x29c>
    error = USBH_OK;
 8008f1a:	2000      	movs	r0, #0
}
 8008f1c:	bd70      	pop	{r4, r5, r6, pc}
 8008f1e:	4604      	mov	r4, r0
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008f20:	f8b6 10f8 	ldrh.w	r1, [r6, #248]	; 0xf8
 8008f24:	6833      	ldr	r3, [r6, #0]
 8008f26:	4299      	cmp	r1, r3
 8008f28:	f080 8131 	bcs.w	800918e <USBH_MSC_Process+0x286>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008f2c:	2334      	movs	r3, #52	; 0x34
 8008f2e:	fb03 6301 	mla	r3, r3, r1, r6
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008f38:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	f200 8133 	bhi.w	80091a8 <USBH_MSC_Process+0x2a0>
 8008f42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008f46:	0009      	.short	0x0009
 8008f48:	00440131 	.word	0x00440131
 8008f4c:	0015009e 	.word	0x0015009e
 8008f50:	013100d3 	.word	0x013100d3
 8008f54:	011f0131 	.word	0x011f0131
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008f58:	2334      	movs	r3, #52	; 0x34
 8008f5a:	fb03 6101 	mla	r1, r3, r1, r6
 8008f5e:	2304      	movs	r3, #4
 8008f60:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 8008f64:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 8008f68:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008f6c:	2001      	movs	r0, #1
        break;
 8008f6e:	e7d5      	b.n	8008f1c <USBH_MSC_Process+0x14>
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008f70:	2234      	movs	r2, #52	; 0x34
 8008f72:	fb01 f202 	mul.w	r2, r1, r2
 8008f76:	3298      	adds	r2, #152	; 0x98
 8008f78:	4432      	add	r2, r6
 8008f7a:	3207      	adds	r2, #7
 8008f7c:	b2c9      	uxtb	r1, r1
 8008f7e:	f000 fc0c 	bl	800979a <USBH_MSC_SCSI_Inquiry>
        if (scsi_status == USBH_OK)
 8008f82:	4603      	mov	r3, r0
 8008f84:	b938      	cbnz	r0, 8008f96 <USBH_MSC_Process+0x8e>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f86:	f8b6 20f8 	ldrh.w	r2, [r6, #248]	; 0xf8
 8008f8a:	2134      	movs	r1, #52	; 0x34
 8008f8c:	fb01 6202 	mla	r2, r1, r2, r6
 8008f90:	2102      	movs	r1, #2
 8008f92:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
        if (scsi_status == USBH_FAIL)
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d003      	beq.n	8008fa2 <USBH_MSC_Process+0x9a>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d00b      	beq.n	8008fb6 <USBH_MSC_Process+0xae>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	e7bc      	b.n	8008f1c <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008fa2:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8008fa6:	2234      	movs	r2, #52	; 0x34
 8008fa8:	fb02 6603 	mla	r6, r2, r3, r6
 8008fac:	2305      	movs	r3, #5
 8008fae:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	e7b2      	b.n	8008f1c <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008fb6:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8008fba:	2234      	movs	r2, #52	; 0x34
 8008fbc:	fb02 6603 	mla	r6, r2, r3, r6
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 8008fcc:	e7a6      	b.n	8008f1c <USBH_MSC_Process+0x14>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008fce:	b2c9      	uxtb	r1, r1
 8008fd0:	f000 fb75 	bl	80096be <USBH_MSC_SCSI_TestUnitReady>
        if (ready_status == USBH_OK)
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	b9c0      	cbnz	r0, 800900a <USBH_MSC_Process+0x102>
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008fd8:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8008fdc:	2134      	movs	r1, #52	; 0x34
 8008fde:	fb01 6103 	mla	r1, r1, r3, r6
 8008fe2:	f891 1092 	ldrb.w	r1, [r1, #146]	; 0x92
 8008fe6:	b1b1      	cbz	r1, 8009016 <USBH_MSC_Process+0x10e>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008fe8:	2134      	movs	r1, #52	; 0x34
 8008fea:	fb01 6103 	mla	r1, r1, r3, r6
 8008fee:	2001      	movs	r0, #1
 8008ff0:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008ff4:	2134      	movs	r1, #52	; 0x34
 8008ff6:	fb01 6303 	mla	r3, r1, r3, r6
 8008ffa:	2103      	movs	r1, #3
 8008ffc:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009000:	2100      	movs	r1, #0
 8009002:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009006:	f883 1092 	strb.w	r1, [r3, #146]	; 0x92
        if (ready_status == USBH_FAIL)
 800900a:	2a02      	cmp	r2, #2
 800900c:	d00a      	beq.n	8009024 <USBH_MSC_Process+0x11c>
          if (ready_status == USBH_UNRECOVERED_ERROR)
 800900e:	2a04      	cmp	r2, #4
 8009010:	d02b      	beq.n	800906a <USBH_MSC_Process+0x162>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009012:	2001      	movs	r0, #1
 8009014:	e782      	b.n	8008f1c <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009016:	2134      	movs	r1, #52	; 0x34
 8009018:	fb01 6103 	mla	r1, r1, r3, r6
 800901c:	2000      	movs	r0, #0
 800901e:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
 8009022:	e7e7      	b.n	8008ff4 <USBH_MSC_Process+0xec>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009024:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009028:	2234      	movs	r2, #52	; 0x34
 800902a:	fb02 6203 	mla	r2, r2, r3, r6
 800902e:	f892 2092 	ldrb.w	r2, [r2, #146]	; 0x92
 8009032:	2a02      	cmp	r2, #2
 8009034:	d012      	beq.n	800905c <USBH_MSC_Process+0x154>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009036:	2234      	movs	r2, #52	; 0x34
 8009038:	fb02 6203 	mla	r2, r2, r3, r6
 800903c:	2101      	movs	r1, #1
 800903e:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009042:	2234      	movs	r2, #52	; 0x34
 8009044:	fb02 6603 	mla	r6, r2, r3, r6
 8009048:	2305      	movs	r3, #5
 800904a:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800904e:	2001      	movs	r0, #1
 8009050:	f886 0091 	strb.w	r0, [r6, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009054:	2302      	movs	r3, #2
 8009056:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
 800905a:	e75f      	b.n	8008f1c <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800905c:	2234      	movs	r2, #52	; 0x34
 800905e:	fb02 6203 	mla	r2, r2, r3, r6
 8009062:	2100      	movs	r1, #0
 8009064:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
 8009068:	e7eb      	b.n	8009042 <USBH_MSC_Process+0x13a>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800906a:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800906e:	2234      	movs	r2, #52	; 0x34
 8009070:	fb02 6603 	mla	r6, r2, r3, r6
 8009074:	2001      	movs	r0, #1
 8009076:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800907a:	2302      	movs	r3, #2
 800907c:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 8009080:	e74c      	b.n	8008f1c <USBH_MSC_Process+0x14>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009082:	2234      	movs	r2, #52	; 0x34
 8009084:	fb01 f202 	mul.w	r2, r1, r2
 8009088:	3290      	adds	r2, #144	; 0x90
 800908a:	4432      	add	r2, r6
 800908c:	3204      	adds	r2, #4
 800908e:	b2c9      	uxtb	r1, r1
 8009090:	f000 fb3c 	bl	800970c <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 8009094:	b970      	cbnz	r0, 80090b4 <USBH_MSC_Process+0x1ac>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8009096:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800909a:	2234      	movs	r2, #52	; 0x34
 800909c:	fb02 6203 	mla	r2, r2, r3, r6
 80090a0:	2001      	movs	r0, #1
 80090a2:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80090a6:	2100      	movs	r1, #0
 80090a8:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
          MSC_Handle->current_lun++;
 80090ac:	4403      	add	r3, r0
 80090ae:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
 80090b2:	e733      	b.n	8008f1c <USBH_MSC_Process+0x14>
        else if(scsi_status == USBH_FAIL)
 80090b4:	2802      	cmp	r0, #2
 80090b6:	d003      	beq.n	80090c0 <USBH_MSC_Process+0x1b8>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 80090b8:	2804      	cmp	r0, #4
 80090ba:	d00b      	beq.n	80090d4 <USBH_MSC_Process+0x1cc>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80090bc:	2001      	movs	r0, #1
 80090be:	e72d      	b.n	8008f1c <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090c0:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80090c4:	2234      	movs	r2, #52	; 0x34
 80090c6:	fb02 6603 	mla	r6, r2, r3, r6
 80090ca:	2305      	movs	r3, #5
 80090cc:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80090d0:	2001      	movs	r0, #1
 80090d2:	e723      	b.n	8008f1c <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80090d4:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80090d8:	2234      	movs	r2, #52	; 0x34
 80090da:	fb02 6603 	mla	r6, r2, r3, r6
 80090de:	2001      	movs	r0, #1
 80090e0:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80090e4:	2302      	movs	r3, #2
 80090e6:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 80090ea:	e717      	b.n	8008f1c <USBH_MSC_Process+0x14>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80090ec:	2234      	movs	r2, #52	; 0x34
 80090ee:	fb01 f202 	mul.w	r2, r1, r2
 80090f2:	3298      	adds	r2, #152	; 0x98
 80090f4:	4432      	add	r2, r6
 80090f6:	3204      	adds	r2, #4
 80090f8:	b2c9      	uxtb	r1, r1
 80090fa:	f000 fbb4 	bl	8009866 <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 80090fe:	4602      	mov	r2, r0
 8009100:	bb20      	cbnz	r0, 800914c <USBH_MSC_Process+0x244>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009102:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009106:	2134      	movs	r1, #52	; 0x34
 8009108:	fb01 6103 	mla	r1, r1, r3, r6
 800910c:	f891 109c 	ldrb.w	r1, [r1, #156]	; 0x9c
 8009110:	2902      	cmp	r1, #2
 8009112:	bf18      	it	ne
 8009114:	2906      	cmpne	r1, #6
 8009116:	d110      	bne.n	800913a <USBH_MSC_Process+0x232>
            if((phost->Timer - MSC_Handle->timer) < 10000U)
 8009118:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
 800911c:	f8d6 00fc 	ldr.w	r0, [r6, #252]	; 0xfc
 8009120:	1a09      	subs	r1, r1, r0
 8009122:	f242 700f 	movw	r0, #9999	; 0x270f
 8009126:	4281      	cmp	r1, r0
 8009128:	d807      	bhi.n	800913a <USBH_MSC_Process+0x232>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800912a:	2234      	movs	r2, #52	; 0x34
 800912c:	fb02 6303 	mla	r3, r2, r3, r6
 8009130:	2202      	movs	r2, #2
 8009132:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009136:	2001      	movs	r0, #1
              break;
 8009138:	e6f0      	b.n	8008f1c <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800913a:	2134      	movs	r1, #52	; 0x34
 800913c:	fb01 6103 	mla	r1, r1, r3, r6
 8009140:	2001      	movs	r0, #1
 8009142:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
          MSC_Handle->current_lun++;
 8009146:	4403      	add	r3, r0
 8009148:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
        if(scsi_status == USBH_FAIL)
 800914c:	2a02      	cmp	r2, #2
 800914e:	d003      	beq.n	8009158 <USBH_MSC_Process+0x250>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8009150:	2a04      	cmp	r2, #4
 8009152:	d00b      	beq.n	800916c <USBH_MSC_Process+0x264>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009154:	2001      	movs	r0, #1
 8009156:	e6e1      	b.n	8008f1c <USBH_MSC_Process+0x14>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009158:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800915c:	2234      	movs	r2, #52	; 0x34
 800915e:	fb02 6603 	mla	r6, r2, r3, r6
 8009162:	2308      	movs	r3, #8
 8009164:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009168:	2001      	movs	r0, #1
 800916a:	e6d7      	b.n	8008f1c <USBH_MSC_Process+0x14>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800916c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8009170:	2234      	movs	r2, #52	; 0x34
 8009172:	fb02 6603 	mla	r6, r2, r3, r6
 8009176:	2001      	movs	r0, #1
 8009178:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800917c:	2302      	movs	r3, #2
 800917e:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 8009182:	e6cb      	b.n	8008f1c <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun++;
 8009184:	3101      	adds	r1, #1
 8009186:	f8a6 10f8 	strh.w	r1, [r6, #248]	; 0xf8
  USBH_StatusTypeDef error = USBH_BUSY ;
 800918a:	2001      	movs	r0, #1
        break;
 800918c:	e6c6      	b.n	8008f1c <USBH_MSC_Process+0x14>
      MSC_Handle->current_lun = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
      MSC_Handle->state = MSC_IDLE;
 8009194:	2501      	movs	r5, #1
 8009196:	7335      	strb	r5, [r6, #12]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009198:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800919c:	2102      	movs	r1, #2
 800919e:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY ;
 80091a0:	4628      	mov	r0, r5
 80091a2:	e6bb      	b.n	8008f1c <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
 80091a4:	2001      	movs	r0, #1
 80091a6:	e6b9      	b.n	8008f1c <USBH_MSC_Process+0x14>
 80091a8:	2001      	movs	r0, #1
 80091aa:	e6b7      	b.n	8008f1c <USBH_MSC_Process+0x14>

080091ac <USBH_MSC_ClassRequest>:
{
 80091ac:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091ae:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80091b2:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 80091b4:	7ba3      	ldrb	r3, [r4, #14]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d004      	beq.n	80091c4 <USBH_MSC_ClassRequest+0x18>
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d024      	beq.n	8009208 <USBH_MSC_ClassRequest+0x5c>
 80091be:	b10b      	cbz	r3, 80091c4 <USBH_MSC_ClassRequest+0x18>
 80091c0:	2001      	movs	r0, #1
}
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)(void *)&MSC_Handle->max_lun);
 80091c4:	4621      	mov	r1, r4
 80091c6:	f000 f92f 	bl	8009428 <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 80091ca:	2803      	cmp	r0, #3
 80091cc:	d002      	beq.n	80091d4 <USBH_MSC_ClassRequest+0x28>
    if(status == USBH_OK)
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d1f7      	bne.n	80091c2 <USBH_MSC_ClassRequest+0x16>
 80091d2:	e001      	b.n	80091d8 <USBH_MSC_ClassRequest+0x2c>
      MSC_Handle->max_lun = 0U;
 80091d4:	2000      	movs	r0, #0
 80091d6:	6020      	str	r0, [r4, #0]
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 80091d8:	6825      	ldr	r5, [r4, #0]
 80091da:	2d02      	cmp	r5, #2
 80091dc:	d804      	bhi.n	80091e8 <USBH_MSC_ClassRequest+0x3c>
 80091de:	b2ed      	uxtb	r5, r5
 80091e0:	3501      	adds	r5, #1
 80091e2:	6025      	str	r5, [r4, #0]
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 80091e4:	2300      	movs	r3, #0
 80091e6:	e00c      	b.n	8009202 <USBH_MSC_ClassRequest+0x56>
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 80091e8:	2502      	movs	r5, #2
 80091ea:	e7fa      	b.n	80091e2 <USBH_MSC_ClassRequest+0x36>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80091ec:	2234      	movs	r2, #52	; 0x34
 80091ee:	fb02 4203 	mla	r2, r2, r3, r4
 80091f2:	2102      	movs	r1, #2
 80091f4:	f882 1092 	strb.w	r1, [r2, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0U;
 80091f8:	2100      	movs	r1, #0
 80091fa:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 80091fe:	3301      	adds	r3, #1
 8009200:	b2db      	uxtb	r3, r3
 8009202:	42ab      	cmp	r3, r5
 8009204:	d3f2      	bcc.n	80091ec <USBH_MSC_ClassRequest+0x40>
 8009206:	e7dc      	b.n	80091c2 <USBH_MSC_ClassRequest+0x16>
    if(USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009208:	2100      	movs	r1, #0
 800920a:	f000 fd61 	bl	8009cd0 <USBH_ClrFeature>
 800920e:	b918      	cbnz	r0, 8009218 <USBH_MSC_ClassRequest+0x6c>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009210:	7be3      	ldrb	r3, [r4, #15]
 8009212:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009214:	2001      	movs	r0, #1
 8009216:	e7d4      	b.n	80091c2 <USBH_MSC_ClassRequest+0x16>
 8009218:	2001      	movs	r0, #1
 800921a:	e7d2      	b.n	80091c2 <USBH_MSC_ClassRequest+0x16>

0800921c <USBH_MSC_InterfaceDeInit>:
{
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009220:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009224:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 8009226:	7969      	ldrb	r1, [r5, #5]
 8009228:	b969      	cbnz	r1, 8009246 <USBH_MSC_InterfaceDeInit+0x2a>
  if ( MSC_Handle->InPipe)
 800922a:	7929      	ldrb	r1, [r5, #4]
 800922c:	b9a1      	cbnz	r1, 8009258 <USBH_MSC_InterfaceDeInit+0x3c>
  if(phost->pActiveClass->pData)
 800922e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8009232:	69d8      	ldr	r0, [r3, #28]
 8009234:	b128      	cbz	r0, 8009242 <USBH_MSC_InterfaceDeInit+0x26>
    USBH_free (phost->pActiveClass->pData);
 8009236:	f00f fe9d 	bl	8018f74 <free>
    phost->pActiveClass->pData = 0U;
 800923a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800923e:	2200      	movs	r2, #0
 8009240:	61da      	str	r2, [r3, #28]
}
 8009242:	2000      	movs	r0, #0
 8009244:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009246:	f000 fdd4 	bl	8009df2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 800924a:	7969      	ldrb	r1, [r5, #5]
 800924c:	4620      	mov	r0, r4
 800924e:	f000 fde6 	bl	8009e1e <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009252:	2300      	movs	r3, #0
 8009254:	716b      	strb	r3, [r5, #5]
 8009256:	e7e8      	b.n	800922a <USBH_MSC_InterfaceDeInit+0xe>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009258:	4620      	mov	r0, r4
 800925a:	f000 fdca 	bl	8009df2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 800925e:	7929      	ldrb	r1, [r5, #4]
 8009260:	4620      	mov	r0, r4
 8009262:	f000 fddc 	bl	8009e1e <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009266:	2300      	movs	r3, #0
 8009268:	712b      	strb	r3, [r5, #4]
 800926a:	e7e0      	b.n	800922e <USBH_MSC_InterfaceDeInit+0x12>

0800926c <USBH_MSC_InterfaceInit>:
{
 800926c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800926e:	b085      	sub	sp, #20
 8009270:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009272:	f8d0 1378 	ldr.w	r1, [r0, #888]	; 0x378
 8009276:	2350      	movs	r3, #80	; 0x50
 8009278:	2206      	movs	r2, #6
 800927a:	7909      	ldrb	r1, [r1, #4]
 800927c:	f000 fba5 	bl	80099ca <USBH_FindInterface>
  if(interface == 0xFFU) /* Not Valid Interface */
 8009280:	28ff      	cmp	r0, #255	; 0xff
 8009282:	f000 808d 	beq.w	80093a0 <USBH_MSC_InterfaceInit+0x134>
 8009286:	4601      	mov	r1, r0
    USBH_SelectInterface (phost, interface);
 8009288:	4620      	mov	r0, r4
 800928a:	f000 fb94 	bl	80099b6 <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800928e:	f8d4 5378 	ldr.w	r5, [r4, #888]	; 0x378
 8009292:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009296:	f00f fe65 	bl	8018f64 <malloc>
 800929a:	61e8      	str	r0, [r5, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800929c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80092a0:	69dd      	ldr	r5, [r3, #28]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80092a2:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80092a6:	221a      	movs	r2, #26
 80092a8:	fb02 4303 	mla	r3, r2, r3, r4
 80092ac:	f893 234a 	ldrb.w	r2, [r3, #842]	; 0x34a
 80092b0:	f993 334a 	ldrsb.w	r3, [r3, #842]	; 0x34a
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	db5f      	blt.n	8009378 <USBH_MSC_InterfaceInit+0x10c>
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80092b8:	71aa      	strb	r2, [r5, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80092ba:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80092be:	221a      	movs	r2, #26
 80092c0:	fb02 4303 	mla	r3, r2, r3, r4
 80092c4:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
 80092c8:	812b      	strh	r3, [r5, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80092ca:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80092ce:	221a      	movs	r2, #26
 80092d0:	fb02 4303 	mla	r3, r2, r3, r4
 80092d4:	f893 2352 	ldrb.w	r2, [r3, #850]	; 0x352
 80092d8:	f993 3352 	ldrsb.w	r3, [r3, #850]	; 0x352
 80092dc:	2b00      	cmp	r3, #0
 80092de:	db55      	blt.n	800938c <USBH_MSC_InterfaceInit+0x120>
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80092e0:	71aa      	strb	r2, [r5, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80092e2:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80092e6:	221a      	movs	r2, #26
 80092e8:	fb02 4303 	mla	r3, r2, r3, r4
 80092ec:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
 80092f0:	812b      	strh	r3, [r5, #8]
    MSC_Handle->current_lun = 0U;
 80092f2:	2600      	movs	r6, #0
 80092f4:	f8a5 60f8 	strh.w	r6, [r5, #248]	; 0xf8
    MSC_Handle->rw_lun = 0U;
 80092f8:	f8a5 60fa 	strh.w	r6, [r5, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 80092fc:	732e      	strb	r6, [r5, #12]
    MSC_Handle->error = MSC_OK;
 80092fe:	736e      	strb	r6, [r5, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8009300:	73ae      	strb	r6, [r5, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009302:	79a9      	ldrb	r1, [r5, #6]
 8009304:	4620      	mov	r0, r4
 8009306:	f000 fd79 	bl	8009dfc <USBH_AllocPipe>
 800930a:	7168      	strb	r0, [r5, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800930c:	79e9      	ldrb	r1, [r5, #7]
 800930e:	4620      	mov	r0, r4
 8009310:	f000 fd74 	bl	8009dfc <USBH_AllocPipe>
 8009314:	7128      	strb	r0, [r5, #4]
    USBH_MSC_BOT_Init(phost);
 8009316:	4620      	mov	r0, r4
 8009318:	f000 f894 	bl	8009444 <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 800931c:	2268      	movs	r2, #104	; 0x68
 800931e:	4631      	mov	r1, r6
 8009320:	f105 0090 	add.w	r0, r5, #144	; 0x90
 8009324:	f00f fe56 	bl	8018fd4 <memset>
    USBH_OpenPipe  (phost,
 8009328:	79aa      	ldrb	r2, [r5, #6]
 800932a:	7969      	ldrb	r1, [r5, #5]
 800932c:	892b      	ldrh	r3, [r5, #8]
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	2702      	movs	r7, #2
 8009332:	9701      	str	r7, [sp, #4]
 8009334:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800933e:	4620      	mov	r0, r4
 8009340:	f000 fd47 	bl	8009dd2 <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 8009344:	79ea      	ldrb	r2, [r5, #7]
 8009346:	7929      	ldrb	r1, [r5, #4]
 8009348:	896b      	ldrh	r3, [r5, #10]
 800934a:	9302      	str	r3, [sp, #8]
 800934c:	9701      	str	r7, [sp, #4]
 800934e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fd3a 	bl	8009dd2 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, MSC_Handle->InPipe, 0U);
 800935e:	4632      	mov	r2, r6
 8009360:	7929      	ldrb	r1, [r5, #4]
 8009362:	4620      	mov	r0, r4
 8009364:	f00e fcc2 	bl	8017cec <USBH_LL_SetToggle>
    USBH_LL_SetToggle (phost, MSC_Handle->OutPipe, 0U);
 8009368:	4632      	mov	r2, r6
 800936a:	7969      	ldrb	r1, [r5, #5]
 800936c:	4620      	mov	r0, r4
 800936e:	f00e fcbd 	bl	8017cec <USBH_LL_SetToggle>
    status = USBH_OK;
 8009372:	4630      	mov	r0, r6
}
 8009374:	b005      	add	sp, #20
 8009376:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8009378:	71ea      	strb	r2, [r5, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800937a:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800937e:	221a      	movs	r2, #26
 8009380:	fb02 4303 	mla	r3, r2, r3, r4
 8009384:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
 8009388:	816b      	strh	r3, [r5, #10]
 800938a:	e79e      	b.n	80092ca <USBH_MSC_InterfaceInit+0x5e>
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800938c:	71ea      	strb	r2, [r5, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800938e:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8009392:	221a      	movs	r2, #26
 8009394:	fb02 4303 	mla	r3, r2, r3, r4
 8009398:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
 800939c:	816b      	strh	r3, [r5, #10]
 800939e:	e7a8      	b.n	80092f2 <USBH_MSC_InterfaceInit+0x86>
    status = USBH_FAIL;
 80093a0:	2002      	movs	r0, #2
 80093a2:	e7e7      	b.n	8009374 <USBH_MSC_InterfaceInit+0x108>

080093a4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80093a4:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093a6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80093aa:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

    /*Checking if the transfer length is different than 13*/
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80093ac:	7921      	ldrb	r1, [r4, #4]
 80093ae:	f00e fc83 	bl	8017cb8 <USBH_LL_GetLastXferSize>
 80093b2:	280d      	cmp	r0, #13
 80093b4:	d001      	beq.n	80093ba <USBH_MSC_DecodeCSW+0x16>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/


      status = BOT_CSW_PHASE_ERROR;
 80093b6:	2002      	movs	r0, #2
        status = BOT_CSW_PHASE_ERROR;
      }
    } /* CSW Length Check*/

  return status;
}
 80093b8:	bd10      	pop	{r4, pc}
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80093ba:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <USBH_MSC_DecodeCSW+0x44>)
 80093be:	429a      	cmp	r2, r3
 80093c0:	d001      	beq.n	80093c6 <USBH_MSC_DecodeCSW+0x22>
        status = BOT_CSW_PHASE_ERROR;
 80093c2:	2002      	movs	r0, #2
 80093c4:	e7f8      	b.n	80093b8 <USBH_MSC_DecodeCSW+0x14>
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80093c6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80093c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d001      	beq.n	80093d2 <USBH_MSC_DecodeCSW+0x2e>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80093ce:	2001      	movs	r0, #1
 80093d0:	e7f2      	b.n	80093b8 <USBH_MSC_DecodeCSW+0x14>
          if(MSC_Handle->hbot.csw.field.Status == 0U)
 80093d2:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d0ee      	beq.n	80093b8 <USBH_MSC_DecodeCSW+0x14>
          else if(MSC_Handle->hbot.csw.field.Status == 1U)
 80093da:	2801      	cmp	r0, #1
 80093dc:	d0ec      	beq.n	80093b8 <USBH_MSC_DecodeCSW+0x14>
          else if(MSC_Handle->hbot.csw.field.Status == 2U)
 80093de:	2802      	cmp	r0, #2
 80093e0:	d0ea      	beq.n	80093b8 <USBH_MSC_DecodeCSW+0x14>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80093e2:	2001      	movs	r0, #1
 80093e4:	e7e8      	b.n	80093b8 <USBH_MSC_DecodeCSW+0x14>
 80093e6:	bf00      	nop
 80093e8:	53425355 	.word	0x53425355

080093ec <USBH_MSC_BOT_Abort>:
{
 80093ec:	b508      	push	{r3, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093ee:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80093f2:	69d9      	ldr	r1, [r3, #28]
  switch (dir)
 80093f4:	b11a      	cbz	r2, 80093fe <USBH_MSC_BOT_Abort+0x12>
 80093f6:	2a01      	cmp	r2, #1
 80093f8:	d005      	beq.n	8009406 <USBH_MSC_BOT_Abort+0x1a>
 80093fa:	2002      	movs	r0, #2
}
 80093fc:	bd08      	pop	{r3, pc}
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80093fe:	79c9      	ldrb	r1, [r1, #7]
 8009400:	f000 fc66 	bl	8009cd0 <USBH_ClrFeature>
    break;
 8009404:	e7fa      	b.n	80093fc <USBH_MSC_BOT_Abort+0x10>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009406:	7989      	ldrb	r1, [r1, #6]
 8009408:	f000 fc62 	bl	8009cd0 <USBH_ClrFeature>
    break;
 800940c:	e7f6      	b.n	80093fc <USBH_MSC_BOT_Abort+0x10>

0800940e <USBH_MSC_BOT_REQ_Reset>:
{
 800940e:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009410:	2221      	movs	r2, #33	; 0x21
 8009412:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009414:	22ff      	movs	r2, #255	; 0xff
 8009416:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009418:	2100      	movs	r1, #0
 800941a:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800941c:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800941e:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8009420:	460a      	mov	r2, r1
 8009422:	f000 fc30 	bl	8009c86 <USBH_CtlReq>
}
 8009426:	bd08      	pop	{r3, pc}

08009428 <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
 8009428:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800942a:	22a1      	movs	r2, #161	; 0xa1
 800942c:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800942e:	22fe      	movs	r2, #254	; 0xfe
 8009430:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009432:	2200      	movs	r2, #0
 8009434:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009436:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009438:	2201      	movs	r2, #1
 800943a:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, Maxlun, 1U);
 800943c:	f000 fc23 	bl	8009c86 <USBH_CtlReq>
}
 8009440:	bd08      	pop	{r3, pc}
	...

08009444 <USBH_MSC_BOT_Init>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009444:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009448:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800944a:	4a05      	ldr	r2, [pc, #20]	; (8009460 <USBH_MSC_BOT_Init+0x1c>)
 800944c:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800944e:	4a05      	ldr	r2, [pc, #20]	; (8009464 <USBH_MSC_BOT_Init+0x20>)
 8009450:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009458:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 800945c:	2000      	movs	r0, #0
 800945e:	4770      	bx	lr
 8009460:	43425355 	.word	0x43425355
 8009464:	20304050 	.word	0x20304050

08009468 <USBH_MSC_BOT_Process>:
{
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	4605      	mov	r5, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800946e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8009472:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->hbot.state)
 8009474:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 8009478:	1e63      	subs	r3, r4, #1
 800947a:	2b0a      	cmp	r3, #10
 800947c:	f200 811d 	bhi.w	80096ba <USBH_MSC_BOT_Process+0x252>
 8009480:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009484:	001b000b 	.word	0x001b000b
 8009488:	004d0042 	.word	0x004d0042
 800948c:	00830077 	.word	0x00830077
 8009490:	00c100b6 	.word	0x00c100b6
 8009494:	00ef00dd 	.word	0x00ef00dd
 8009498:	0111      	.short	0x0111
    MSC_Handle->hbot.cbw.field.LUN = lun;
 800949a:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800949e:	2302      	movs	r3, #2
 80094a0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 80094a4:	7973      	ldrb	r3, [r6, #5]
 80094a6:	2201      	movs	r2, #1
 80094a8:	9200      	str	r2, [sp, #0]
 80094aa:	221f      	movs	r2, #31
 80094ac:	f106 0154 	add.w	r1, r6, #84	; 0x54
 80094b0:	f000 fc57 	bl	8009d62 <USBH_BulkSendData>
}
 80094b4:	4620      	mov	r0, r4
 80094b6:	b002      	add	sp, #8
 80094b8:	bd70      	pop	{r4, r5, r6, pc}
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80094ba:	7971      	ldrb	r1, [r6, #5]
 80094bc:	f00e fc02 	bl	8017cc4 <USBH_LL_GetURBState>
 80094c0:	4604      	mov	r4, r0
    if(URB_Status == USBH_URB_DONE)
 80094c2:	2801      	cmp	r0, #1
 80094c4:	d005      	beq.n	80094d2 <USBH_MSC_BOT_Process+0x6a>
    else if(URB_Status == USBH_URB_NOTREADY)
 80094c6:	2802      	cmp	r0, #2
 80094c8:	d015      	beq.n	80094f6 <USBH_MSC_BOT_Process+0x8e>
      if(URB_Status == USBH_URB_STALL)
 80094ca:	2805      	cmp	r0, #5
 80094cc:	d017      	beq.n	80094fe <USBH_MSC_BOT_Process+0x96>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80094ce:	2401      	movs	r4, #1
 80094d0:	e7f0      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80094d2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80094d4:	b15b      	cbz	r3, 80094ee <USBH_MSC_BOT_Process+0x86>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80094d6:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 80094da:	2b00      	cmp	r3, #0
 80094dc:	db03      	blt.n	80094e6 <USBH_MSC_BOT_Process+0x7e>
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 80094de:	2305      	movs	r3, #5
 80094e0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80094e4:	e7e6      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_DATA_IN;
 80094e6:	2303      	movs	r3, #3
 80094e8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80094ec:	e7e2      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80094ee:	2307      	movs	r3, #7
 80094f0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80094f4:	e7de      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80094f6:	2401      	movs	r4, #1
 80094f8:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
 80094fc:	e7da      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80094fe:	230a      	movs	r3, #10
 8009500:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009504:	2401      	movs	r4, #1
 8009506:	e7d5      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8009508:	7933      	ldrb	r3, [r6, #4]
 800950a:	8972      	ldrh	r2, [r6, #10]
 800950c:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8009510:	f000 fc3d 	bl	8009d8e <USBH_BulkReceiveData>
    MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009514:	2304      	movs	r3, #4
 8009516:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800951a:	2401      	movs	r4, #1
    break;
 800951c:	e7ca      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800951e:	7931      	ldrb	r1, [r6, #4]
 8009520:	f00e fbd0 	bl	8017cc4 <USBH_LL_GetURBState>
 8009524:	4604      	mov	r4, r0
    if(URB_Status == USBH_URB_DONE)
 8009526:	2801      	cmp	r0, #1
 8009528:	d003      	beq.n	8009532 <USBH_MSC_BOT_Process+0xca>
    else if(URB_Status == USBH_URB_STALL)
 800952a:	2805      	cmp	r0, #5
 800952c:	d01c      	beq.n	8009568 <USBH_MSC_BOT_Process+0x100>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800952e:	2401      	movs	r4, #1
 8009530:	e7c0      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009532:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8009534:	8972      	ldrh	r2, [r6, #10]
 8009536:	4293      	cmp	r3, r2
 8009538:	d90c      	bls.n	8009554 <USBH_MSC_BOT_Process+0xec>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800953a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800953e:	4411      	add	r1, r2
 8009540:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009544:	1a9b      	subs	r3, r3, r2
 8009546:	65f3      	str	r3, [r6, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009548:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800954a:	b933      	cbnz	r3, 800955a <USBH_MSC_BOT_Process+0xf2>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800954c:	2307      	movs	r3, #7
 800954e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8009552:	e7af      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	65f3      	str	r3, [r6, #92]	; 0x5c
 8009558:	e7f6      	b.n	8009548 <USBH_MSC_BOT_Process+0xe0>
        USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 800955a:	7933      	ldrb	r3, [r6, #4]
 800955c:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8009560:	4628      	mov	r0, r5
 8009562:	f000 fc14 	bl	8009d8e <USBH_BulkReceiveData>
 8009566:	e7a5      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009568:	2309      	movs	r3, #9
 800956a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800956e:	2401      	movs	r4, #1
 8009570:	e7a0      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8009572:	7973      	ldrb	r3, [r6, #5]
 8009574:	8932      	ldrh	r2, [r6, #8]
 8009576:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800957a:	2401      	movs	r4, #1
 800957c:	9400      	str	r4, [sp, #0]
 800957e:	f000 fbf0 	bl	8009d62 <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009582:	2306      	movs	r3, #6
 8009584:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    break;
 8009588:	e794      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800958a:	7971      	ldrb	r1, [r6, #5]
 800958c:	f00e fb9a 	bl	8017cc4 <USBH_LL_GetURBState>
 8009590:	4604      	mov	r4, r0
    if(URB_Status == USBH_URB_DONE)
 8009592:	2801      	cmp	r0, #1
 8009594:	d005      	beq.n	80095a2 <USBH_MSC_BOT_Process+0x13a>
    else if(URB_Status == USBH_URB_NOTREADY)
 8009596:	2802      	cmp	r0, #2
 8009598:	d020      	beq.n	80095dc <USBH_MSC_BOT_Process+0x174>
    else if(URB_Status == USBH_URB_STALL)
 800959a:	2805      	cmp	r0, #5
 800959c:	d023      	beq.n	80095e6 <USBH_MSC_BOT_Process+0x17e>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800959e:	2401      	movs	r4, #1
 80095a0:	e788      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80095a2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80095a4:	8932      	ldrh	r2, [r6, #8]
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d90c      	bls.n	80095c4 <USBH_MSC_BOT_Process+0x15c>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80095aa:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80095ae:	4411      	add	r1, r2
 80095b0:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	65f3      	str	r3, [r6, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80095b8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80095ba:	b933      	cbnz	r3, 80095ca <USBH_MSC_BOT_Process+0x162>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80095bc:	2307      	movs	r3, #7
 80095be:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80095c2:	e777      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	65f3      	str	r3, [r6, #92]	; 0x5c
 80095c8:	e7f6      	b.n	80095b8 <USBH_MSC_BOT_Process+0x150>
        USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 80095ca:	7973      	ldrb	r3, [r6, #5]
 80095cc:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80095d0:	2001      	movs	r0, #1
 80095d2:	9000      	str	r0, [sp, #0]
 80095d4:	4628      	mov	r0, r5
 80095d6:	f000 fbc4 	bl	8009d62 <USBH_BulkSendData>
 80095da:	e76b      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80095dc:	2305      	movs	r3, #5
 80095de:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80095e2:	2401      	movs	r4, #1
 80095e4:	e766      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80095e6:	230a      	movs	r3, #10
 80095e8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80095ec:	2401      	movs	r4, #1
 80095ee:	e761      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 80095f0:	7933      	ldrb	r3, [r6, #4]
 80095f2:	220d      	movs	r2, #13
 80095f4:	f106 0178 	add.w	r1, r6, #120	; 0x78
 80095f8:	f000 fbc9 	bl	8009d8e <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80095fc:	2308      	movs	r3, #8
 80095fe:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009602:	2401      	movs	r4, #1
    break;
 8009604:	e756      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009606:	7931      	ldrb	r1, [r6, #4]
 8009608:	f00e fb5c 	bl	8017cc4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800960c:	2801      	cmp	r0, #1
 800960e:	d003      	beq.n	8009618 <USBH_MSC_BOT_Process+0x1b0>
    else if(URB_Status == USBH_URB_STALL)
 8009610:	2805      	cmp	r0, #5
 8009612:	d00f      	beq.n	8009634 <USBH_MSC_BOT_Process+0x1cc>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009614:	2401      	movs	r4, #1
 8009616:	e74d      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009618:	2301      	movs	r3, #1
 800961a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800961e:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009622:	4628      	mov	r0, r5
 8009624:	f7ff febe 	bl	80093a4 <USBH_MSC_DecodeCSW>
      if(CSW_Status == BOT_CSW_CMD_PASSED)
 8009628:	4604      	mov	r4, r0
 800962a:	2800      	cmp	r0, #0
 800962c:	f43f af42 	beq.w	80094b4 <USBH_MSC_BOT_Process+0x4c>
        status = USBH_FAIL;
 8009630:	2402      	movs	r4, #2
 8009632:	e73f      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009634:	2309      	movs	r3, #9
 8009636:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800963a:	2401      	movs	r4, #1
 800963c:	e73a      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800963e:	2200      	movs	r2, #0
 8009640:	f7ff fed4 	bl	80093ec <USBH_MSC_BOT_Abort>
    if (error == USBH_OK)
 8009644:	b920      	cbnz	r0, 8009650 <USBH_MSC_BOT_Process+0x1e8>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009646:	2307      	movs	r3, #7
 8009648:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800964c:	2401      	movs	r4, #1
 800964e:	e731      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    else if (error == USBH_UNRECOVERED_ERROR)
 8009650:	2804      	cmp	r0, #4
 8009652:	d001      	beq.n	8009658 <USBH_MSC_BOT_Process+0x1f0>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009654:	2401      	movs	r4, #1
 8009656:	e72d      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009658:	230b      	movs	r3, #11
 800965a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800965e:	2401      	movs	r4, #1
 8009660:	e728      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009662:	2201      	movs	r2, #1
 8009664:	f7ff fec2 	bl	80093ec <USBH_MSC_BOT_Abort>
    if (error == USBH_OK)
 8009668:	b118      	cbz	r0, 8009672 <USBH_MSC_BOT_Process+0x20a>
      if (error == USBH_UNRECOVERED_ERROR)
 800966a:	2804      	cmp	r0, #4
 800966c:	d016      	beq.n	800969c <USBH_MSC_BOT_Process+0x234>
  USBH_StatusTypeDef   status = USBH_BUSY;
 800966e:	2401      	movs	r4, #1
 8009670:	e720      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009672:	7971      	ldrb	r1, [r6, #5]
 8009674:	4628      	mov	r0, r5
 8009676:	f00e fb51 	bl	8017d1c <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800967a:	f1c0 0201 	rsb	r2, r0, #1
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	7971      	ldrb	r1, [r6, #5]
 8009682:	4628      	mov	r0, r5
 8009684:	f00e fb32 	bl	8017cec <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009688:	2200      	movs	r2, #0
 800968a:	7931      	ldrb	r1, [r6, #4]
 800968c:	4628      	mov	r0, r5
 800968e:	f00e fb2d 	bl	8017cec <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009692:	2309      	movs	r3, #9
 8009694:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009698:	2401      	movs	r4, #1
 800969a:	e70b      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800969c:	230b      	movs	r3, #11
 800969e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 80096a2:	2401      	movs	r4, #1
 80096a4:	e706      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
    status = USBH_MSC_BOT_REQ_Reset(phost);
 80096a6:	f7ff feb2 	bl	800940e <USBH_MSC_BOT_REQ_Reset>
    if ( status == USBH_OK)
 80096aa:	4604      	mov	r4, r0
 80096ac:	2800      	cmp	r0, #0
 80096ae:	f47f af01 	bne.w	80094b4 <USBH_MSC_BOT_Process+0x4c>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096b2:	2301      	movs	r3, #1
 80096b4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80096b8:	e6fc      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>
  switch (MSC_Handle->hbot.state)
 80096ba:	2401      	movs	r4, #1
 80096bc:	e6fa      	b.n	80094b4 <USBH_MSC_BOT_Process+0x4c>

080096be <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost,
                                                uint8_t lun)
{
 80096be:	b508      	push	{r3, lr}
 80096c0:	4602      	mov	r2, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096c2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80096c6:	69db      	ldr	r3, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 80096c8:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 80096cc:	2801      	cmp	r0, #1
 80096ce:	d003      	beq.n	80096d8 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 80096d0:	2802      	cmp	r0, #2
 80096d2:	d017      	beq.n	8009704 <USBH_MSC_SCSI_TestUnitReady+0x46>
 80096d4:	2002      	movs	r0, #2
  default:
    break;
  }

  return error;
}
 80096d6:	bd08      	pop	{r3, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80096d8:	2200      	movs	r2, #0
 80096da:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80096dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80096e0:	210a      	movs	r1, #10
 80096e2:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80096e6:	f8c3 2063 	str.w	r2, [r3, #99]	; 0x63
 80096ea:	f8c3 2067 	str.w	r2, [r3, #103]	; 0x67
 80096ee:	f8c3 206b 	str.w	r2, [r3, #107]	; 0x6b
 80096f2:	f8c3 206f 	str.w	r2, [r3, #111]	; 0x6f
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80096fc:	2202      	movs	r2, #2
 80096fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    break;
 8009702:	e7e8      	b.n	80096d6 <USBH_MSC_SCSI_TestUnitReady+0x18>
    error = USBH_MSC_BOT_Process(phost, lun);
 8009704:	4610      	mov	r0, r2
 8009706:	f7ff feaf 	bl	8009468 <USBH_MSC_BOT_Process>
    break;
 800970a:	e7e4      	b.n	80096d6 <USBH_MSC_SCSI_TestUnitReady+0x18>

0800970c <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009710:	f8d0 0378 	ldr.w	r0, [r0, #888]	; 0x378
 8009714:	69c4      	ldr	r4, [r0, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8009716:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 800971a:	2801      	cmp	r0, #1
 800971c:	d004      	beq.n	8009728 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 800971e:	4615      	mov	r5, r2
 8009720:	2802      	cmp	r0, #2
 8009722:	d020      	beq.n	8009766 <USBH_MSC_SCSI_ReadCapacity+0x5a>
 8009724:	2001      	movs	r0, #1
  default:
    break;
  }

  return error;
}
 8009726:	bd38      	pop	{r3, r4, r5, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009728:	2308      	movs	r3, #8
 800972a:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800972c:	2380      	movs	r3, #128	; 0x80
 800972e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009732:	230a      	movs	r3, #10
 8009734:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009738:	2300      	movs	r3, #0
 800973a:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 800973e:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8009742:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8009746:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800974a:	2325      	movs	r3, #37	; 0x25
 800974c:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009750:	2301      	movs	r3, #1
 8009752:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009756:	2302      	movs	r3, #2
 8009758:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800975c:	f104 0310 	add.w	r3, r4, #16
 8009760:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 8009764:	e7df      	b.n	8009726 <USBH_MSC_SCSI_ReadCapacity+0x1a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fe7e 	bl	8009468 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 800976c:	2800      	cmp	r0, #0
 800976e:	d1da      	bne.n	8009726 <USBH_MSC_SCSI_ReadCapacity+0x1a>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8009770:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009774:	78d3      	ldrb	r3, [r2, #3]
 8009776:	7891      	ldrb	r1, [r2, #2]
 8009778:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800977c:	7851      	ldrb	r1, [r2, #1]
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 800977e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009782:	7812      	ldrb	r2, [r2, #0]
 8009784:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8009788:	602b      	str	r3, [r5, #0]
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800978a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800978e:	79d3      	ldrb	r3, [r2, #7]
 8009790:	7992      	ldrb	r2, [r2, #6]
 8009792:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009796:	80ab      	strh	r3, [r5, #4]
 8009798:	e7c5      	b.n	8009726 <USBH_MSC_SCSI_ReadCapacity+0x1a>

0800979a <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, uint8_t lun,
                                          SCSI_StdInquiryDataTypeDef *inquiry)
{
 800979a:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800979c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80097a0:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 80097a2:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80097a6:	2d01      	cmp	r5, #1
 80097a8:	d005      	beq.n	80097b6 <USBH_MSC_SCSI_Inquiry+0x1c>
 80097aa:	4616      	mov	r6, r2
 80097ac:	2d02      	cmp	r5, #2
 80097ae:	d024      	beq.n	80097fa <USBH_MSC_SCSI_Inquiry+0x60>
 80097b0:	2502      	movs	r5, #2
  default:
    break;
  }

  return error;
}
 80097b2:	4628      	mov	r0, r5
 80097b4:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80097b6:	2224      	movs	r2, #36	; 0x24
 80097b8:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80097ba:	2380      	movs	r3, #128	; 0x80
 80097bc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80097c0:	230a      	movs	r3, #10
 80097c2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80097c6:	2300      	movs	r3, #0
 80097c8:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 80097cc:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80097d0:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80097d4:	2312      	movs	r3, #18
 80097d6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80097da:	0149      	lsls	r1, r1, #5
 80097dc:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80097e0:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80097ea:	2302      	movs	r3, #2
 80097ec:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80097f0:	f104 0310 	add.w	r3, r4, #16
 80097f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 80097f8:	e7db      	b.n	80097b2 <USBH_MSC_SCSI_Inquiry+0x18>
    error = USBH_MSC_BOT_Process(phost, lun);
 80097fa:	f7ff fe35 	bl	8009468 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 80097fe:	4605      	mov	r5, r0
 8009800:	2800      	cmp	r0, #0
 8009802:	d1d6      	bne.n	80097b2 <USBH_MSC_SCSI_Inquiry+0x18>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009804:	2222      	movs	r2, #34	; 0x22
 8009806:	2100      	movs	r1, #0
 8009808:	4630      	mov	r0, r6
 800980a:	f00f fbe3 	bl	8018fd4 <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800980e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 031f 	and.w	r3, r3, #31
 8009818:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800981a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	095b      	lsrs	r3, r3, #5
 8009822:	7033      	strb	r3, [r6, #0]
      if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009824:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009828:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800982c:	2b00      	cmp	r3, #0
 800982e:	db17      	blt.n	8009860 <USBH_MSC_SCSI_Inquiry+0xc6>
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009830:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009834:	689a      	ldr	r2, [r3, #8]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f8c6 2003 	str.w	r2, [r6, #3]
 800983c:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009840:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009844:	6918      	ldr	r0, [r3, #16]
 8009846:	6959      	ldr	r1, [r3, #20]
 8009848:	699a      	ldr	r2, [r3, #24]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	60f0      	str	r0, [r6, #12]
 800984e:	6131      	str	r1, [r6, #16]
 8009850:	6172      	str	r2, [r6, #20]
 8009852:	61b3      	str	r3, [r6, #24]
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009854:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	f8c6 301d 	str.w	r3, [r6, #29]
 800985e:	e7a8      	b.n	80097b2 <USBH_MSC_SCSI_Inquiry+0x18>
        inquiry->RemovableMedia = 1U;
 8009860:	2301      	movs	r3, #1
 8009862:	70b3      	strb	r3, [r6, #2]
 8009864:	e7e4      	b.n	8009830 <USBH_MSC_SCSI_Inquiry+0x96>

08009866 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_SenseTypeDef *sense_data)
{
 8009866:	b538      	push	{r3, r4, r5, lr}
 8009868:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800986a:	f8d0 0378 	ldr.w	r0, [r0, #888]	; 0x378
 800986e:	69c4      	ldr	r4, [r0, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8009870:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8009874:	2801      	cmp	r0, #1
 8009876:	d004      	beq.n	8009882 <USBH_MSC_SCSI_RequestSense+0x1c>
 8009878:	4615      	mov	r5, r2
 800987a:	2802      	cmp	r0, #2
 800987c:	d025      	beq.n	80098ca <USBH_MSC_SCSI_RequestSense+0x64>
 800987e:	2002      	movs	r0, #2
  default:
    break;
  }

  return error;
}
 8009880:	bd38      	pop	{r3, r4, r5, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009882:	220e      	movs	r2, #14
 8009884:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009886:	2380      	movs	r3, #128	; 0x80
 8009888:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800988c:	230a      	movs	r3, #10
 800988e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009892:	2300      	movs	r3, #0
 8009894:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8009898:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 800989c:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 80098a0:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80098a4:	2303      	movs	r3, #3
 80098a6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80098aa:	0149      	lsls	r1, r1, #5
 80098ac:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80098b0:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098b4:	2301      	movs	r3, #1
 80098b6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80098ba:	2302      	movs	r3, #2
 80098bc:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80098c0:	f104 0310 	add.w	r3, r4, #16
 80098c4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 80098c8:	e7da      	b.n	8009880 <USBH_MSC_SCSI_RequestSense+0x1a>
    error = USBH_MSC_BOT_Process(phost, lun);
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff fdcc 	bl	8009468 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d1d5      	bne.n	8009880 <USBH_MSC_SCSI_RequestSense+0x1a>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80098d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80098d8:	789b      	ldrb	r3, [r3, #2]
 80098da:	f003 030f 	and.w	r3, r3, #15
 80098de:	702b      	strb	r3, [r5, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80098e0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80098e4:	7b1b      	ldrb	r3, [r3, #12]
 80098e6:	706b      	strb	r3, [r5, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80098e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80098ec:	7b5b      	ldrb	r3, [r3, #13]
 80098ee:	70ab      	strb	r3, [r5, #2]
 80098f0:	e7c6      	b.n	8009880 <USBH_MSC_SCSI_RequestSense+0x1a>

080098f2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80098f2:	4684      	mov	ip, r0
  uint32_t i = 0U;
 80098f4:	2300      	movs	r3, #0

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80098f6:	e005      	b.n	8009904 <DeInitStateMachine+0x12>
  {
    phost->Pipes[i] = 0U;
 80098f8:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 80098fc:	2100      	movs	r1, #0
 80098fe:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009902:	3301      	adds	r3, #1
 8009904:	2b0e      	cmp	r3, #14
 8009906:	d9f7      	bls.n	80098f8 <DeInitStateMachine+0x6>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009908:	2300      	movs	r3, #0
 800990a:	e005      	b.n	8009918 <DeInitStateMachine+0x26>
  {
    phost->device.Data[i] = 0U;
 800990c:	eb0c 0203 	add.w	r2, ip, r3
 8009910:	2100      	movs	r1, #0
 8009912:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009916:	3301      	adds	r3, #1
 8009918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800991c:	d3f6      	bcc.n	800990c <DeInitStateMachine+0x1a>
  }

  phost->gState = HOST_IDLE;
 800991e:	2000      	movs	r0, #0
 8009920:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8009924:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8009928:	2301      	movs	r3, #1
 800992a:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 800992e:	f8cc 03bc 	str.w	r0, [ip, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8009932:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009936:	2240      	movs	r2, #64	; 0x40
 8009938:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 800993c:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009940:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8009944:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d

  return USBH_OK;
}
 8009948:	4770      	bx	lr

0800994a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800994a:	b508      	push	{r3, lr}
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800994c:	7803      	ldrb	r3, [r0, #0]
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b0b      	cmp	r3, #11
 8009952:	d000      	beq.n	8009956 <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 8009954:	bd08      	pop	{r3, pc}
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009956:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0fa      	beq.n	8009954 <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	4798      	blx	r3
}
 8009962:	e7f7      	b.n	8009954 <USBH_HandleSof+0xa>

08009964 <USBH_Init>:
  if(phost == NULL)
 8009964:	b198      	cbz	r0, 800998e <USBH_Init+0x2a>
{
 8009966:	b538      	push	{r3, r4, r5, lr}
 8009968:	460d      	mov	r5, r1
 800996a:	4604      	mov	r4, r0
  phost->id = id;
 800996c:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8009970:	2300      	movs	r3, #0
 8009972:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8009976:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 800997a:	f7ff ffba 	bl	80098f2 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 800997e:	b10d      	cbz	r5, 8009984 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8009980:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8009984:	4620      	mov	r0, r4
 8009986:	f00e f96d 	bl	8017c64 <USBH_LL_Init>
  return USBH_OK;
 800998a:	2000      	movs	r0, #0
}
 800998c:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 800998e:	2002      	movs	r0, #2
}
 8009990:	4770      	bx	lr

08009992 <USBH_RegisterClass>:
  if(pclass != 0)
 8009992:	460a      	mov	r2, r1
 8009994:	b159      	cbz	r1, 80099ae <USBH_RegisterClass+0x1c>
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009996:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800999a:	b953      	cbnz	r3, 80099b2 <USBH_RegisterClass+0x20>
      phost->pClass[phost->ClassNumber++] = pclass;
 800999c:	1c59      	adds	r1, r3, #1
 800999e:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
 80099a2:	33dc      	adds	r3, #220	; 0xdc
 80099a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80099a8:	6042      	str	r2, [r0, #4]
      status = USBH_OK;
 80099aa:	2000      	movs	r0, #0
 80099ac:	4770      	bx	lr
    status = USBH_FAIL;
 80099ae:	2002      	movs	r0, #2
 80099b0:	4770      	bx	lr
      status = USBH_FAIL;
 80099b2:	2002      	movs	r0, #2
}
 80099b4:	4770      	bx	lr

080099b6 <USBH_SelectInterface>:
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80099b6:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 80099ba:	428b      	cmp	r3, r1
 80099bc:	d903      	bls.n	80099c6 <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 80099be:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 80099c2:	2000      	movs	r0, #0
 80099c4:	4770      	bx	lr
    status = USBH_FAIL;
 80099c6:	2002      	movs	r0, #2
}
 80099c8:	4770      	bx	lr

080099ca <USBH_FindInterface>:
{
 80099ca:	b510      	push	{r4, lr}
 80099cc:	4604      	mov	r4, r0
  uint8_t                        if_ix = 0U;
 80099ce:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099d0:	e00b      	b.n	80099ea <USBH_FindInterface+0x20>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80099d2:	f04f 0c1a 	mov.w	ip, #26
 80099d6:	fb0c 4e0e 	mla	lr, ip, lr, r4
 80099da:	f89e c345 	ldrb.w	ip, [lr, #837]	; 0x345
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80099de:	459c      	cmp	ip, r3
 80099e0:	d01c      	beq.n	8009a1c <USBH_FindInterface+0x52>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80099e2:	2bff      	cmp	r3, #255	; 0xff
 80099e4:	d01a      	beq.n	8009a1c <USBH_FindInterface+0x52>
    if_ix++;
 80099e6:	3001      	adds	r0, #1
 80099e8:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099ea:	2801      	cmp	r0, #1
 80099ec:	d815      	bhi.n	8009a1a <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 80099ee:	4686      	mov	lr, r0
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80099f0:	f04f 0c1a 	mov.w	ip, #26
 80099f4:	fb0c 4c00 	mla	ip, ip, r0, r4
 80099f8:	f89c c343 	ldrb.w	ip, [ip, #835]	; 0x343
 80099fc:	458c      	cmp	ip, r1
 80099fe:	d001      	beq.n	8009a04 <USBH_FindInterface+0x3a>
 8009a00:	29ff      	cmp	r1, #255	; 0xff
 8009a02:	d1f0      	bne.n	80099e6 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009a04:	f04f 0c1a 	mov.w	ip, #26
 8009a08:	fb0c 4c0e 	mla	ip, ip, lr, r4
 8009a0c:	f89c c344 	ldrb.w	ip, [ip, #836]	; 0x344
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8009a10:	4594      	cmp	ip, r2
 8009a12:	d0de      	beq.n	80099d2 <USBH_FindInterface+0x8>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009a14:	2aff      	cmp	r2, #255	; 0xff
 8009a16:	d1e6      	bne.n	80099e6 <USBH_FindInterface+0x1c>
 8009a18:	e7db      	b.n	80099d2 <USBH_FindInterface+0x8>
  return 0xFFU;
 8009a1a:	20ff      	movs	r0, #255	; 0xff
}
 8009a1c:	bd10      	pop	{r4, pc}

08009a1e <USBH_Start>:
{
 8009a1e:	b510      	push	{r4, lr}
 8009a20:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 8009a22:	f00e f99c 	bl	8017d5e <USBH_LL_Start>
  USBH_LL_DriverVBUS (phost, TRUE);
 8009a26:	2101      	movs	r1, #1
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f00e f951 	bl	8017cd0 <USBH_LL_DriverVBUS>
}
 8009a2e:	2000      	movs	r0, #0
 8009a30:	bd10      	pop	{r4, pc}

08009a32 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8009a32:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 8009a36:	4770      	bx	lr

08009a38 <USBH_LL_IncTimer>:
{
 8009a38:	b508      	push	{r3, lr}
  phost->Timer ++;
 8009a3a:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8009a3e:	3201      	adds	r2, #1
 8009a40:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8009a44:	f7ff ff81 	bl	800994a <USBH_HandleSof>
}
 8009a48:	bd08      	pop	{r3, pc}

08009a4a <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f

  return;
}
 8009a50:	4770      	bx	lr

08009a52 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f

  return;
}
 8009a58:	4770      	bx	lr

08009a5a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8009a5a:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8009a5c:	7803      	ldrb	r3, [r0, #0]
 8009a5e:	b94b      	cbnz	r3, 8009a74 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;
 8009a60:	2301      	movs	r3, #1
 8009a62:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e

    if(phost->pUser != NULL)
 8009a66:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8009a6a:	b10b      	cbz	r3, 8009a70 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8009a6c:	2104      	movs	r1, #4
 8009a6e:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8009a70:	2000      	movs	r0, #0
 8009a72:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8009a74:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d1f9      	bne.n	8009a70 <USBH_LL_Connect+0x16>
      phost->gState = HOST_DEV_ATTACHED;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	7003      	strb	r3, [r0, #0]
 8009a80:	e7f6      	b.n	8009a70 <USBH_LL_Connect+0x16>

08009a82 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8009a82:	b510      	push	{r4, lr}
 8009a84:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8009a86:	f00e f972 	bl	8017d6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8009a8a:	7921      	ldrb	r1, [r4, #4]
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f000 f9c6 	bl	8009e1e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8009a92:	7961      	ldrb	r1, [r4, #5]
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 f9c2 	bl	8009e1e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 8009aa0:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8009aa4:	b113      	cbz	r3, 8009aac <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009aa6:	2105      	movs	r1, #5
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009aac:	4620      	mov	r0, r4
 8009aae:	f00e f956 	bl	8017d5e <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	bd10      	pop	{r4, pc}

08009aba <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8009aba:	b530      	push	{r4, r5, lr}
 8009abc:	b083      	sub	sp, #12
 8009abe:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8009ac0:	7e05      	ldrb	r5, [r0, #24]
 8009ac2:	1e6b      	subs	r3, r5, #1
 8009ac4:	2b0a      	cmp	r3, #10
 8009ac6:	f200 80d6 	bhi.w	8009c76 <USBH_HandleControl+0x1bc>
 8009aca:	e8df f003 	tbb	[pc, r3]
 8009ace:	1006      	.short	0x1006
 8009ad0:	60534034 	.word	0x60534034
 8009ad4:	a99c897d 	.word	0xa99c897d
 8009ad8:	c0          	.byte	0xc0
 8009ad9:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ada:	7942      	ldrb	r2, [r0, #5]
 8009adc:	f100 0110 	add.w	r1, r0, #16
 8009ae0:	f000 f908 	bl	8009cf4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	7623      	strb	r3, [r4, #24]

  default:
    break;
  }
  return status;
}
 8009ae8:	4628      	mov	r0, r5
 8009aea:	b003      	add	sp, #12
 8009aec:	bd30      	pop	{r4, r5, pc}
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009aee:	7941      	ldrb	r1, [r0, #5]
 8009af0:	f00e f8e8 	bl	8017cc4 <USBH_LL_GetURBState>
 8009af4:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 8009af6:	2801      	cmp	r0, #1
 8009af8:	d008      	beq.n	8009b0c <USBH_HandleControl+0x52>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009afa:	2802      	cmp	r0, #2
 8009afc:	bf18      	it	ne
 8009afe:	2804      	cmpne	r0, #4
 8009b00:	f040 80bb 	bne.w	8009c7a <USBH_HandleControl+0x1c0>
        phost->Control.state = CTRL_ERROR;
 8009b04:	230b      	movs	r3, #11
 8009b06:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b08:	2501      	movs	r5, #1
 8009b0a:	e7ed      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009b0c:	7c23      	ldrb	r3, [r4, #16]
      if (phost->Control.setup.b.wLength.w != 0U)
 8009b0e:	8ae2      	ldrh	r2, [r4, #22]
 8009b10:	b142      	cbz	r2, 8009b24 <USBH_HandleControl+0x6a>
        if (direction == USB_D2H)
 8009b12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b16:	d102      	bne.n	8009b1e <USBH_HandleControl+0x64>
          phost->Control.state = CTRL_DATA_OUT;
 8009b18:	2305      	movs	r3, #5
 8009b1a:	7623      	strb	r3, [r4, #24]
 8009b1c:	e7e4      	b.n	8009ae8 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_DATA_IN;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	7623      	strb	r3, [r4, #24]
 8009b22:	e7e1      	b.n	8009ae8 <USBH_HandleControl+0x2e>
        if (direction == USB_D2H)
 8009b24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b28:	d102      	bne.n	8009b30 <USBH_HandleControl+0x76>
          phost->Control.state = CTRL_STATUS_IN;
 8009b2a:	2307      	movs	r3, #7
 8009b2c:	7623      	strb	r3, [r4, #24]
 8009b2e:	e7db      	b.n	8009ae8 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_STATUS_OUT;
 8009b30:	2309      	movs	r3, #9
 8009b32:	7623      	strb	r3, [r4, #24]
 8009b34:	e7d8      	b.n	8009ae8 <USBH_HandleControl+0x2e>
    phost->Control.timer = (uint16_t)phost->Timer;
 8009b36:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 8009b3a:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 8009b3c:	7903      	ldrb	r3, [r0, #4]
 8009b3e:	8982      	ldrh	r2, [r0, #12]
 8009b40:	6881      	ldr	r1, [r0, #8]
 8009b42:	f000 f8fe 	bl	8009d42 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b46:	2304      	movs	r3, #4
 8009b48:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b4a:	2501      	movs	r5, #1
    break;
 8009b4c:	e7cc      	b.n	8009ae8 <USBH_HandleControl+0x2e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009b4e:	7901      	ldrb	r1, [r0, #4]
 8009b50:	f00e f8b8 	bl	8017cc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009b54:	2801      	cmp	r0, #1
 8009b56:	d006      	beq.n	8009b66 <USBH_HandleControl+0xac>
    if  (URB_Status == USBH_URB_STALL)
 8009b58:	2805      	cmp	r0, #5
 8009b5a:	f000 8090 	beq.w	8009c7e <USBH_HandleControl+0x1c4>
      if (URB_Status == USBH_URB_ERROR)
 8009b5e:	2804      	cmp	r0, #4
 8009b60:	d004      	beq.n	8009b6c <USBH_HandleControl+0xb2>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b62:	2501      	movs	r5, #1
 8009b64:	e7c0      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_STATUS_OUT;
 8009b66:	2309      	movs	r3, #9
 8009b68:	7623      	strb	r3, [r4, #24]
 8009b6a:	e7f5      	b.n	8009b58 <USBH_HandleControl+0x9e>
        phost->Control.state = CTRL_ERROR;
 8009b6c:	230b      	movs	r3, #11
 8009b6e:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b70:	2501      	movs	r5, #1
 8009b72:	e7b9      	b.n	8009ae8 <USBH_HandleControl+0x2e>
    USBH_CtlSendData (phost,
 8009b74:	2501      	movs	r5, #1
 8009b76:	9500      	str	r5, [sp, #0]
 8009b78:	7943      	ldrb	r3, [r0, #5]
 8009b7a:	8982      	ldrh	r2, [r0, #12]
 8009b7c:	6881      	ldr	r1, [r0, #8]
 8009b7e:	f000 f8ca 	bl	8009d16 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8009b82:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8009b86:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009b88:	2306      	movs	r3, #6
 8009b8a:	7623      	strb	r3, [r4, #24]
    break;
 8009b8c:	e7ac      	b.n	8009ae8 <USBH_HandleControl+0x2e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009b8e:	7941      	ldrb	r1, [r0, #5]
 8009b90:	f00e f898 	bl	8017cc4 <USBH_LL_GetURBState>
 8009b94:	4605      	mov	r5, r0
    if  (URB_Status == USBH_URB_DONE)
 8009b96:	2801      	cmp	r0, #1
 8009b98:	d007      	beq.n	8009baa <USBH_HandleControl+0xf0>
    else if  (URB_Status == USBH_URB_STALL)
 8009b9a:	2805      	cmp	r0, #5
 8009b9c:	d008      	beq.n	8009bb0 <USBH_HandleControl+0xf6>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009b9e:	2802      	cmp	r0, #2
 8009ba0:	d00a      	beq.n	8009bb8 <USBH_HandleControl+0xfe>
      if (URB_Status == USBH_URB_ERROR)
 8009ba2:	2804      	cmp	r0, #4
 8009ba4:	d00c      	beq.n	8009bc0 <USBH_HandleControl+0x106>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ba6:	2501      	movs	r5, #1
 8009ba8:	e79e      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_STATUS_IN;
 8009baa:	2307      	movs	r3, #7
 8009bac:	7623      	strb	r3, [r4, #24]
 8009bae:	e79b      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_STALLED;
 8009bb0:	230c      	movs	r3, #12
 8009bb2:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8009bb4:	2503      	movs	r5, #3
 8009bb6:	e797      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_DATA_OUT;
 8009bb8:	2305      	movs	r3, #5
 8009bba:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009bbc:	2501      	movs	r5, #1
 8009bbe:	e793      	b.n	8009ae8 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 8009bc0:	230b      	movs	r3, #11
 8009bc2:	7623      	strb	r3, [r4, #24]
        status = USBH_FAIL;
 8009bc4:	2502      	movs	r5, #2
 8009bc6:	e78f      	b.n	8009ae8 <USBH_HandleControl+0x2e>
    USBH_CtlReceiveData (phost,
 8009bc8:	7903      	ldrb	r3, [r0, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	4611      	mov	r1, r2
 8009bce:	f000 f8b8 	bl	8009d42 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8009bd2:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8009bd6:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009bd8:	2308      	movs	r3, #8
 8009bda:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009bdc:	2501      	movs	r5, #1
    break;
 8009bde:	e783      	b.n	8009ae8 <USBH_HandleControl+0x2e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009be0:	7901      	ldrb	r1, [r0, #4]
 8009be2:	f00e f86f 	bl	8017cc4 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8009be6:	2801      	cmp	r0, #1
 8009be8:	d005      	beq.n	8009bf6 <USBH_HandleControl+0x13c>
    else if (URB_Status == USBH_URB_ERROR)
 8009bea:	2804      	cmp	r0, #4
 8009bec:	d007      	beq.n	8009bfe <USBH_HandleControl+0x144>
      if(URB_Status == USBH_URB_STALL)
 8009bee:	2805      	cmp	r0, #5
 8009bf0:	d047      	beq.n	8009c82 <USBH_HandleControl+0x1c8>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009bf2:	2501      	movs	r5, #1
 8009bf4:	e778      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_COMPLETE;
 8009bf6:	230d      	movs	r3, #13
 8009bf8:	7623      	strb	r3, [r4, #24]
      status = USBH_OK;
 8009bfa:	2500      	movs	r5, #0
 8009bfc:	e774      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_ERROR;
 8009bfe:	230b      	movs	r3, #11
 8009c00:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c02:	2501      	movs	r5, #1
 8009c04:	e770      	b.n	8009ae8 <USBH_HandleControl+0x2e>
    USBH_CtlSendData (phost,
 8009c06:	2501      	movs	r5, #1
 8009c08:	9500      	str	r5, [sp, #0]
 8009c0a:	7943      	ldrb	r3, [r0, #5]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4611      	mov	r1, r2
 8009c10:	f000 f881 	bl	8009d16 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8009c14:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8009c18:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	7623      	strb	r3, [r4, #24]
    break;
 8009c1e:	e763      	b.n	8009ae8 <USBH_HandleControl+0x2e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009c20:	7941      	ldrb	r1, [r0, #5]
 8009c22:	f00e f84f 	bl	8017cc4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8009c26:	2801      	cmp	r0, #1
 8009c28:	d005      	beq.n	8009c36 <USBH_HandleControl+0x17c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009c2a:	2802      	cmp	r0, #2
 8009c2c:	d007      	beq.n	8009c3e <USBH_HandleControl+0x184>
      if (URB_Status == USBH_URB_ERROR)
 8009c2e:	2804      	cmp	r0, #4
 8009c30:	d009      	beq.n	8009c46 <USBH_HandleControl+0x18c>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c32:	2501      	movs	r5, #1
 8009c34:	e758      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_COMPLETE;
 8009c36:	230d      	movs	r3, #13
 8009c38:	7623      	strb	r3, [r4, #24]
      status = USBH_OK;
 8009c3a:	2500      	movs	r5, #0
 8009c3c:	e754      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      phost->Control.state = CTRL_STATUS_OUT;
 8009c3e:	2309      	movs	r3, #9
 8009c40:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c42:	2501      	movs	r5, #1
 8009c44:	e750      	b.n	8009ae8 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 8009c46:	230b      	movs	r3, #11
 8009c48:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c4a:	2501      	movs	r5, #1
 8009c4c:	e74c      	b.n	8009ae8 <USBH_HandleControl+0x2e>
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009c4e:	7e43      	ldrb	r3, [r0, #25]
 8009c50:	3301      	adds	r3, #1
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	7643      	strb	r3, [r0, #25]
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d907      	bls.n	8009c6a <USBH_HandleControl+0x1b0>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009c5a:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8009c5e:	2106      	movs	r1, #6
 8009c60:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	7663      	strb	r3, [r4, #25]
      status = USBH_FAIL;
 8009c66:	2502      	movs	r5, #2
 8009c68:	e73e      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      USBH_LL_Stop(phost);
 8009c6a:	f00e f880 	bl	8017d6e <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8009c6e:	2501      	movs	r5, #1
 8009c70:	7625      	strb	r5, [r4, #24]
      phost->RequestState = CMD_SEND;
 8009c72:	70a5      	strb	r5, [r4, #2]
 8009c74:	e738      	b.n	8009ae8 <USBH_HandleControl+0x2e>
  switch (phost->Control.state)
 8009c76:	2501      	movs	r5, #1
 8009c78:	e736      	b.n	8009ae8 <USBH_HandleControl+0x2e>
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c7a:	2501      	movs	r5, #1
 8009c7c:	e734      	b.n	8009ae8 <USBH_HandleControl+0x2e>
      status = USBH_NOT_SUPPORTED;
 8009c7e:	2503      	movs	r5, #3
 8009c80:	e732      	b.n	8009ae8 <USBH_HandleControl+0x2e>
        status = USBH_NOT_SUPPORTED;
 8009c82:	2503      	movs	r5, #3
 8009c84:	e730      	b.n	8009ae8 <USBH_HandleControl+0x2e>

08009c86 <USBH_CtlReq>:
{
 8009c86:	b510      	push	{r4, lr}
 8009c88:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8009c8a:	7880      	ldrb	r0, [r0, #2]
 8009c8c:	2801      	cmp	r0, #1
 8009c8e:	d003      	beq.n	8009c98 <USBH_CtlReq+0x12>
 8009c90:	2802      	cmp	r0, #2
 8009c92:	d008      	beq.n	8009ca6 <USBH_CtlReq+0x20>
 8009c94:	2001      	movs	r0, #1
}
 8009c96:	bd10      	pop	{r4, pc}
    phost->Control.buff = buff;
 8009c98:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8009c9a:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	7623      	strb	r3, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	70a3      	strb	r3, [r4, #2]
    break;
 8009ca4:	e7f7      	b.n	8009c96 <USBH_CtlReq+0x10>
    status = USBH_HandleControl(phost);
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7ff ff07 	bl	8009aba <USBH_HandleControl>
    if (status == USBH_OK)
 8009cac:	b920      	cbnz	r0, 8009cb8 <USBH_CtlReq+0x32>
      phost->RequestState = CMD_SEND;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	7623      	strb	r3, [r4, #24]
      status = USBH_OK;
 8009cb6:	e7ee      	b.n	8009c96 <USBH_CtlReq+0x10>
    else if (status == USBH_NOT_SUPPORTED)
 8009cb8:	2803      	cmp	r0, #3
 8009cba:	d004      	beq.n	8009cc6 <USBH_CtlReq+0x40>
      if (status == USBH_FAIL)
 8009cbc:	2802      	cmp	r0, #2
 8009cbe:	d1ea      	bne.n	8009c96 <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8009cc4:	e7e7      	b.n	8009c96 <USBH_CtlReq+0x10>
      phost->RequestState = CMD_SEND;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8009cce:	e7e2      	b.n	8009c96 <USBH_CtlReq+0x10>

08009cd0 <USBH_ClrFeature>:
{
 8009cd0:	b508      	push	{r3, lr}
  if(phost->RequestState == CMD_SEND)
 8009cd2:	7883      	ldrb	r3, [r0, #2]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d004      	beq.n	8009ce2 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, 0U , 0U);
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4611      	mov	r1, r2
 8009cdc:	f7ff ffd3 	bl	8009c86 <USBH_CtlReq>
}
 8009ce0:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009cea:	2300      	movs	r3, #0
 8009cec:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009cee:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009cf0:	82c3      	strh	r3, [r0, #22]
 8009cf2:	e7f1      	b.n	8009cd8 <USBH_ClrFeature+0x8>

08009cf4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4611      	mov	r1, r2

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009cfc:	2400      	movs	r4, #0
 8009cfe:	9403      	str	r4, [sp, #12]
 8009d00:	2208      	movs	r2, #8
 8009d02:	9202      	str	r2, [sp, #8]
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	9400      	str	r4, [sp, #0]
 8009d08:	4623      	mov	r3, r4
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	f00e f852 	bl	8017db4 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8009d10:	4620      	mov	r0, r4
 8009d12:	b004      	add	sp, #16
 8009d14:	bd10      	pop	{r4, pc}

08009d16 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8009d16:	b530      	push	{r4, r5, lr}
 8009d18:	b085      	sub	sp, #20
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009d22:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8009d26:	b105      	cbz	r5, 8009d2a <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 8009d28:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009d2a:	9303      	str	r3, [sp, #12]
 8009d2c:	9202      	str	r2, [sp, #8]
 8009d2e:	9401      	str	r4, [sp, #4]
 8009d30:	2301      	movs	r3, #1
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	2300      	movs	r3, #0
 8009d36:	461a      	mov	r2, r3
 8009d38:	f00e f83c 	bl	8017db4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	b005      	add	sp, #20
 8009d40:	bd30      	pop	{r4, r5, pc}

08009d42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009d42:	b530      	push	{r4, r5, lr}
 8009d44:	b085      	sub	sp, #20
 8009d46:	460d      	mov	r5, r1
 8009d48:	4619      	mov	r1, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009d4a:	2400      	movs	r4, #0
 8009d4c:	9403      	str	r4, [sp, #12]
 8009d4e:	9202      	str	r2, [sp, #8]
 8009d50:	9501      	str	r5, [sp, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	9200      	str	r2, [sp, #0]
 8009d56:	4623      	mov	r3, r4
 8009d58:	f00e f82c 	bl	8017db4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	b005      	add	sp, #20
 8009d60:	bd30      	pop	{r4, r5, pc}

08009d62 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8009d62:	b530      	push	{r4, r5, lr}
 8009d64:	b085      	sub	sp, #20
 8009d66:	460c      	mov	r4, r1
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009d6e:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8009d72:	b105      	cbz	r5, 8009d76 <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 8009d74:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009d76:	9303      	str	r3, [sp, #12]
 8009d78:	9202      	str	r2, [sp, #8]
 8009d7a:	9401      	str	r4, [sp, #4]
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	2302      	movs	r3, #2
 8009d82:	2200      	movs	r2, #0
 8009d84:	f00e f816 	bl	8017db4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8009d88:	2000      	movs	r0, #0
 8009d8a:	b005      	add	sp, #20
 8009d8c:	bd30      	pop	{r4, r5, pc}

08009d8e <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009d8e:	b530      	push	{r4, r5, lr}
 8009d90:	b085      	sub	sp, #20
 8009d92:	460d      	mov	r5, r1
 8009d94:	4619      	mov	r1, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009d96:	2400      	movs	r4, #0
 8009d98:	9403      	str	r4, [sp, #12]
 8009d9a:	9202      	str	r2, [sp, #8]
 8009d9c:	9501      	str	r5, [sp, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	9200      	str	r2, [sp, #0]
 8009da2:	2302      	movs	r3, #2
 8009da4:	f00e f806 	bl	8017db4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8009da8:	4620      	mov	r0, r4
 8009daa:	b005      	add	sp, #20
 8009dac:	bd30      	pop	{r4, r5, pc}

08009dae <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8009dae:	2300      	movs	r3, #0
 8009db0:	2b0a      	cmp	r3, #10
 8009db2:	d80b      	bhi.n	8009dcc <USBH_GetFreePipe+0x1e>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009db4:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8009db8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8009dbc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009dc0:	d002      	beq.n	8009dc8 <USBH_GetFreePipe+0x1a>
  for (idx = 0U ; idx < 11U ; idx++)
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	e7f3      	b.n	8009db0 <USBH_GetFreePipe+0x2>
	{
	   return (uint16_t)idx;
 8009dc8:	b298      	uxth	r0, r3
 8009dca:	4770      	bx	lr
	}
  }
  return 0xFFFFU;
 8009dcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8009dd0:	4770      	bx	lr

08009dd2 <USBH_OpenPipe>:
{
 8009dd2:	b510      	push	{r4, lr}
 8009dd4:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost,
 8009dd6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8009dda:	9402      	str	r4, [sp, #8]
 8009ddc:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8009de0:	9401      	str	r4, [sp, #4]
 8009de2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8009de6:	9400      	str	r4, [sp, #0]
 8009de8:	f00d ffc9 	bl	8017d7e <USBH_LL_OpenPipe>
}
 8009dec:	2000      	movs	r0, #0
 8009dee:	b004      	add	sp, #16
 8009df0:	bd10      	pop	{r4, pc}

08009df2 <USBH_ClosePipe>:
{
 8009df2:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8009df4:	f00d ffd6 	bl	8017da4 <USBH_LL_ClosePipe>
}
 8009df8:	2000      	movs	r0, #0
 8009dfa:	bd08      	pop	{r3, pc}

08009dfc <USBH_AllocPipe>:
{
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4605      	mov	r5, r0
 8009e00:	460c      	mov	r4, r1
  pipe =  USBH_GetFreePipe(phost);
 8009e02:	f7ff ffd4 	bl	8009dae <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 8009e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e0a:	4298      	cmp	r0, r3
 8009e0c:	d005      	beq.n	8009e1a <USBH_AllocPipe+0x1e>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8009e0e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8009e12:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 8009e16:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
}
 8009e1a:	b2c0      	uxtb	r0, r0
 8009e1c:	bd38      	pop	{r3, r4, r5, pc}

08009e1e <USBH_FreePipe>:
   if(idx < 11U)
 8009e1e:	290a      	cmp	r1, #10
 8009e20:	d806      	bhi.n	8009e30 <USBH_FreePipe+0x12>
	 phost->Pipes[idx] &= 0x7FFFU;
 8009e22:	31e0      	adds	r1, #224	; 0xe0
 8009e24:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8009e28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009e2c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8009e30:	2000      	movs	r0, #0
 8009e32:	4770      	bx	lr

08009e34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009e34:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009e36:	4b04      	ldr	r3, [pc, #16]	; (8009e48 <disk_status+0x14>)
 8009e38:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8009e3c:	6852      	ldr	r2, [r2, #4]
 8009e3e:	6852      	ldr	r2, [r2, #4]
 8009e40:	4403      	add	r3, r0
 8009e42:	7a18      	ldrb	r0, [r3, #8]
 8009e44:	4790      	blx	r2
  return stat;
}
 8009e46:	bd08      	pop	{r3, pc}
 8009e48:	200005cc 	.word	0x200005cc

08009e4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009e4c:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8009e4e:	4b08      	ldr	r3, [pc, #32]	; (8009e70 <disk_initialize+0x24>)
 8009e50:	5c1b      	ldrb	r3, [r3, r0]
 8009e52:	b953      	cbnz	r3, 8009e6a <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8009e54:	4b06      	ldr	r3, [pc, #24]	; (8009e70 <disk_initialize+0x24>)
 8009e56:	2201      	movs	r2, #1
 8009e58:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009e5a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8009e5e:	6852      	ldr	r2, [r2, #4]
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	4418      	add	r0, r3
 8009e64:	7a00      	ldrb	r0, [r0, #8]
 8009e66:	4790      	blx	r2
  }
  return stat;
}
 8009e68:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e7fc      	b.n	8009e68 <disk_initialize+0x1c>
 8009e6e:	bf00      	nop
 8009e70:	200005cc 	.word	0x200005cc

08009e74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009e74:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009e76:	4c04      	ldr	r4, [pc, #16]	; (8009e88 <disk_read+0x14>)
 8009e78:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8009e7c:	686d      	ldr	r5, [r5, #4]
 8009e7e:	68ad      	ldr	r5, [r5, #8]
 8009e80:	4404      	add	r4, r0
 8009e82:	7a20      	ldrb	r0, [r4, #8]
 8009e84:	47a8      	blx	r5
  return res;
}
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	200005cc 	.word	0x200005cc

08009e8c <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8009e8c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8009e8e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8009e90:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8009e94:	4770      	bx	lr

08009e96 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8009e96:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8009e98:	7883      	ldrb	r3, [r0, #2]
 8009e9a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8009e9e:	7843      	ldrb	r3, [r0, #1]
 8009ea0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8009ea4:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8009ea6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009eaa:	4770      	bx	lr

08009eac <ld_qword>:
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
	QWORD rv;

	rv = ptr[7];
 8009eac:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
 8009eae:	7983      	ldrb	r3, [r0, #6]
 8009eb0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[5];
 8009eb4:	7943      	ldrb	r3, [r0, #5]
 8009eb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[4];
 8009eba:	7902      	ldrb	r2, [r0, #4]
 8009ebc:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
	rv = rv << 8 | ptr[3];
 8009ec0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009ec4:	78c2      	ldrb	r2, [r0, #3]
 8009ec6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[2];
 8009eca:	021b      	lsls	r3, r3, #8
 8009ecc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009ed0:	7881      	ldrb	r1, [r0, #2]
 8009ed2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8009ed6:	021b      	lsls	r3, r3, #8
 8009ed8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009edc:	7841      	ldrb	r1, [r0, #1]
 8009ede:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8009ee2:	021b      	lsls	r3, r3, #8
 8009ee4:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8009ee6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8009eea:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
 8009eee:	4770      	bx	lr

08009ef0 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8009ef0:	4694      	mov	ip, r2
 8009ef2:	b132      	cbz	r2, 8009f02 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8009ef4:	780a      	ldrb	r2, [r1, #0]
 8009ef6:	3101      	adds	r1, #1
 8009ef8:	7002      	strb	r2, [r0, #0]
 8009efa:	3001      	adds	r0, #1
		} while (--cnt);
 8009efc:	f1bc 0c01 	subs.w	ip, ip, #1
 8009f00:	d1f8      	bne.n	8009ef4 <mem_cpy+0x4>
	}
}
 8009f02:	4770      	bx	lr

08009f04 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8009f04:	7001      	strb	r1, [r0, #0]
 8009f06:	3001      	adds	r0, #1
	} while (--cnt);
 8009f08:	3a01      	subs	r2, #1
 8009f0a:	d1fb      	bne.n	8009f04 <mem_set>
}
 8009f0c:	4770      	bx	lr

08009f0e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f0e:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8009f10:	f89c 0000 	ldrb.w	r0, [ip]
 8009f14:	f10c 0c01 	add.w	ip, ip, #1
 8009f18:	780b      	ldrb	r3, [r1, #0]
 8009f1a:	3101      	adds	r1, #1
 8009f1c:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8009f1e:	3a01      	subs	r2, #1
 8009f20:	d001      	beq.n	8009f26 <mem_cmp+0x18>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d0f4      	beq.n	8009f10 <mem_cmp+0x2>

	return r;
}
 8009f26:	4770      	bx	lr

08009f28 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009f28:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8009f2a:	e000      	b.n	8009f2e <chk_chr+0x6>
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	7818      	ldrb	r0, [r3, #0]
 8009f30:	b108      	cbz	r0, 8009f36 <chk_chr+0xe>
 8009f32:	4288      	cmp	r0, r1
 8009f34:	d1fa      	bne.n	8009f2c <chk_chr+0x4>
	return *str;
}
 8009f36:	4770      	bx	lr

08009f38 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8009f38:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f3a:	6943      	ldr	r3, [r0, #20]
 8009f3c:	3b02      	subs	r3, #2
 8009f3e:	428b      	cmp	r3, r1
 8009f40:	d904      	bls.n	8009f4c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8009f42:	8943      	ldrh	r3, [r0, #10]
 8009f44:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009f46:	fb01 0003 	mla	r0, r1, r3, r0
 8009f4a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f4c:	2000      	movs	r0, #0
}
 8009f4e:	4770      	bx	lr

08009f50 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009f50:	b510      	push	{r4, lr}
 8009f52:	4619      	mov	r1, r3
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009f54:	6803      	ldr	r3, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f56:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009f58:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f5a:	0a50      	lsrs	r0, r2, #9
 8009f5c:	895a      	ldrh	r2, [r3, #10]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
 8009f64:	0a49      	lsrs	r1, r1, #9
 8009f66:	f7f6 ff87 	bl	8000e78 <__aeabi_uldivmod>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	e001      	b.n	8009f72 <clmt_clust+0x22>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 8009f6e:	1a12      	subs	r2, r2, r0
 8009f70:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f72:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f74:	b118      	cbz	r0, 8009f7e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009f76:	4282      	cmp	r2, r0
 8009f78:	d2f9      	bcs.n	8009f6e <clmt_clust+0x1e>
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f7a:	6860      	ldr	r0, [r4, #4]
 8009f7c:	4410      	add	r0, r2
}
 8009f7e:	bd10      	pop	{r4, pc}

08009f80 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	4606      	mov	r6, r0
 8009f84:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009f86:	f101 001a 	add.w	r0, r1, #26
 8009f8a:	f7ff ff7f 	bl	8009e8c <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8009f8e:	7833      	ldrb	r3, [r6, #0]
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d000      	beq.n	8009f96 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8009f94:	bd70      	pop	{r4, r5, r6, pc}
 8009f96:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009f98:	f105 0014 	add.w	r0, r5, #20
 8009f9c:	f7ff ff76 	bl	8009e8c <ld_word>
 8009fa0:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8009fa4:	e7f6      	b.n	8009f94 <ld_clust+0x14>
	...

08009fa8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8009fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fac:	4680      	mov	r8, r0
 8009fae:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8009fb0:	f101 001a 	add.w	r0, r1, #26
 8009fb4:	f7ff ff6a 	bl	8009e8c <ld_word>
 8009fb8:	bb50      	cbnz	r0, 800a010 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8009fba:	7835      	ldrb	r5, [r6, #0]
 8009fbc:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8009fc0:	3d01      	subs	r5, #1
 8009fc2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009fc6:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009fca:	2701      	movs	r7, #1
 8009fcc:	2400      	movs	r4, #0
 8009fce:	e004      	b.n	8009fda <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fd4:	4298      	cmp	r0, r3
 8009fd6:	d120      	bne.n	800a01a <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009fd8:	3401      	adds	r4, #1
 8009fda:	2c0c      	cmp	r4, #12
 8009fdc:	d80d      	bhi.n	8009ffa <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009fde:	4b12      	ldr	r3, [pc, #72]	; (800a028 <pick_lfn+0x80>)
 8009fe0:	5d18      	ldrb	r0, [r3, r4]
 8009fe2:	4430      	add	r0, r6
 8009fe4:	f7ff ff52 	bl	8009e8c <ld_word>
		if (wc) {
 8009fe8:	2f00      	cmp	r7, #0
 8009fea:	d0f1      	beq.n	8009fd0 <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009fec:	2dfe      	cmp	r5, #254	; 0xfe
 8009fee:	d812      	bhi.n	800a016 <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009ff0:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 8009ff4:	4607      	mov	r7, r0
 8009ff6:	3501      	adds	r5, #1
 8009ff8:	e7ee      	b.n	8009fd8 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009ffa:	7833      	ldrb	r3, [r6, #0]
 8009ffc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a000:	d00d      	beq.n	800a01e <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a002:	2dfe      	cmp	r5, #254	; 0xfe
 800a004:	d80d      	bhi.n	800a022 <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 800a00c:	2001      	movs	r0, #1
 800a00e:	e000      	b.n	800a012 <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a010:	2000      	movs	r0, #0
}
 800a012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a016:	2000      	movs	r0, #0
 800a018:	e7fb      	b.n	800a012 <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a01a:	2000      	movs	r0, #0
 800a01c:	e7f9      	b.n	800a012 <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 800a01e:	2001      	movs	r0, #1
 800a020:	e7f7      	b.n	800a012 <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a022:	2000      	movs	r0, #0
 800a024:	e7f5      	b.n	800a012 <pick_lfn+0x6a>
 800a026:	bf00      	nop
 800a028:	08019d94 	.word	0x08019d94

0800a02c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a02c:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800a02e:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 800a032:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a034:	01c3      	lsls	r3, r0, #7
 800a036:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800a03a:	7808      	ldrb	r0, [r1, #0]
 800a03c:	3101      	adds	r1, #1
 800a03e:	fa50 f383 	uxtab	r3, r0, r3
 800a042:	b2d8      	uxtb	r0, r3
	} while (--n);
 800a044:	f1bc 0c01 	subs.w	ip, ip, #1
 800a048:	d1f4      	bne.n	800a034 <sum_sfn+0x8>
	return sum;
}
 800a04a:	4770      	bx	lr

0800a04c <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a04c:	b500      	push	{lr}
 800a04e:	4686      	mov	lr, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a050:	7841      	ldrb	r1, [r0, #1]
 800a052:	3101      	adds	r1, #1
 800a054:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
 800a056:	2000      	movs	r0, #0
 800a058:	4603      	mov	r3, r0
 800a05a:	e001      	b.n	800a060 <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
 800a05c:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
 800a05e:	3301      	adds	r3, #1
 800a060:	428b      	cmp	r3, r1
 800a062:	d20a      	bcs.n	800a07a <xdir_sum+0x2e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a064:	2b02      	cmp	r3, #2
 800a066:	d0f9      	beq.n	800a05c <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a068:	0842      	lsrs	r2, r0, #1
 800a06a:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
 800a06e:	f81e c003 	ldrb.w	ip, [lr, r3]
 800a072:	fa1c f282 	uxtah	r2, ip, r2
 800a076:	b290      	uxth	r0, r2
 800a078:	e7f1      	b.n	800a05e <xdir_sum+0x12>
		}
	}
	return sum;
}
 800a07a:	f85d fb04 	ldr.w	pc, [sp], #4

0800a07e <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800a07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a080:	4606      	mov	r6, r0
 800a082:	460f      	mov	r7, r1
#endif

	/* Get file name */
	di = 0;
#if _LFN_UNICODE
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800a084:	2540      	movs	r5, #64	; 0x40
	di = 0;
 800a086:	2400      	movs	r4, #0
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800a088:	e00a      	b.n	800a0a0 <get_xdir_info+0x22>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
		w = ld_word(dirb + si);					/* Get a character */
 800a08a:	1970      	adds	r0, r6, r5
 800a08c:	f7ff fefe 	bl	8009e8c <ld_word>
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
 800a090:	2cfe      	cmp	r4, #254	; 0xfe
 800a092:	d80e      	bhi.n	800a0b2 <get_xdir_info+0x34>
		fno->fname[di] = w;						/* Store it */
 800a094:	f104 0314 	add.w	r3, r4, #20
 800a098:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
 800a09c:	3502      	adds	r5, #2
 800a09e:	3401      	adds	r4, #1
 800a0a0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	d905      	bls.n	800a0b4 <get_xdir_info+0x36>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800a0a8:	f015 0f1f 	tst.w	r5, #31
 800a0ac:	d1ed      	bne.n	800a08a <get_xdir_info+0xc>
 800a0ae:	3502      	adds	r5, #2
 800a0b0:	e7eb      	b.n	800a08a <get_xdir_info+0xc>
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
 800a0b2:	2400      	movs	r4, #0
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
		fno->fname[di++] = (char)w;
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800a0b4:	b92c      	cbnz	r4, 800a0c2 <get_xdir_info+0x44>
 800a0b6:	f104 0314 	add.w	r3, r4, #20
 800a0ba:	223f      	movs	r2, #63	; 0x3f
 800a0bc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800a0c0:	3401      	adds	r4, #1
	fno->fname[di] = 0;						/* Terminate file name */
 800a0c2:	3414      	adds	r4, #20
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]

	fno->altname[0] = 0;							/* No SFN */
 800a0ca:	81fb      	strh	r3, [r7, #14]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800a0cc:	7933      	ldrb	r3, [r6, #4]
 800a0ce:	733b      	strb	r3, [r7, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800a0d0:	f013 0f10 	tst.w	r3, #16
 800a0d4:	d110      	bne.n	800a0f8 <get_xdir_info+0x7a>
 800a0d6:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800a0da:	f7ff fee7 	bl	8009eac <ld_qword>
 800a0de:	6038      	str	r0, [r7, #0]
 800a0e0:	6079      	str	r1, [r7, #4]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800a0e2:	f106 000c 	add.w	r0, r6, #12
 800a0e6:	f7ff fed1 	bl	8009e8c <ld_word>
 800a0ea:	8178      	strh	r0, [r7, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800a0ec:	f106 000e 	add.w	r0, r6, #14
 800a0f0:	f7ff fecc 	bl	8009e8c <ld_word>
 800a0f4:	8138      	strh	r0, [r7, #8]
}
 800a0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	e7ef      	b.n	800a0de <get_xdir_info+0x60>

0800a0fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a0fe:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a100:	6800      	ldr	r0, [r0, #0]
 800a102:	b108      	cbz	r0, 800a108 <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a104:	4602      	mov	r2, r0
 800a106:	e003      	b.n	800a110 <get_ldnumber+0x12>
	int vol = -1;
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a10e:	3202      	adds	r2, #2
 800a110:	8813      	ldrh	r3, [r2, #0]
 800a112:	2b3a      	cmp	r3, #58	; 0x3a
 800a114:	bf18      	it	ne
 800a116:	2b1f      	cmpne	r3, #31
 800a118:	d8f9      	bhi.n	800a10e <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a11a:	2b3a      	cmp	r3, #58	; 0x3a
 800a11c:	d001      	beq.n	800a122 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a11e:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800a120:	4770      	bx	lr
			i = *tp++ - '0';
 800a122:	4603      	mov	r3, r0
 800a124:	f833 0b02 	ldrh.w	r0, [r3], #2
 800a128:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a12a:	2809      	cmp	r0, #9
 800a12c:	bf98      	it	ls
 800a12e:	429a      	cmpls	r2, r3
 800a130:	d103      	bne.n	800a13a <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a132:	b928      	cbnz	r0, 800a140 <get_ldnumber+0x42>
					*path = ++tt;
 800a134:	3202      	adds	r2, #2
 800a136:	600a      	str	r2, [r1, #0]
 800a138:	4770      	bx	lr
	int vol = -1;
 800a13a:	f04f 30ff 	mov.w	r0, #4294967295
 800a13e:	4770      	bx	lr
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 800a144:	4770      	bx	lr

0800a146 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a146:	b538      	push	{r3, r4, r5, lr}
 800a148:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a14a:	4604      	mov	r4, r0
 800a14c:	b198      	cbz	r0, 800a176 <validate+0x30>
 800a14e:	6803      	ldr	r3, [r0, #0]
 800a150:	b19b      	cbz	r3, 800a17a <validate+0x34>
 800a152:	781a      	ldrb	r2, [r3, #0]
 800a154:	b1a2      	cbz	r2, 800a180 <validate+0x3a>
 800a156:	8881      	ldrh	r1, [r0, #4]
 800a158:	88da      	ldrh	r2, [r3, #6]
 800a15a:	4291      	cmp	r1, r2
 800a15c:	d003      	beq.n	800a166 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800a15e:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a160:	2400      	movs	r4, #0
 800a162:	602c      	str	r4, [r5, #0]
	return res;
}
 800a164:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a166:	7858      	ldrb	r0, [r3, #1]
 800a168:	f7ff fe64 	bl	8009e34 <disk_status>
 800a16c:	f010 0001 	ands.w	r0, r0, #1
 800a170:	d109      	bne.n	800a186 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a172:	6824      	ldr	r4, [r4, #0]
 800a174:	e7f5      	b.n	800a162 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800a176:	2009      	movs	r0, #9
 800a178:	e7f3      	b.n	800a162 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a17a:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800a17c:	2009      	movs	r0, #9
 800a17e:	e7f0      	b.n	800a162 <validate+0x1c>
 800a180:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a182:	2400      	movs	r4, #0
 800a184:	e7ed      	b.n	800a162 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800a186:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a188:	2400      	movs	r4, #0
 800a18a:	e7ea      	b.n	800a162 <validate+0x1c>

0800a18c <move_window>:
{
 800a18c:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a18e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a190:	428b      	cmp	r3, r1
 800a192:	d101      	bne.n	800a198 <move_window+0xc>
	FRESULT res = FR_OK;
 800a194:	2000      	movs	r0, #0
}
 800a196:	bd38      	pop	{r3, r4, r5, pc}
 800a198:	4604      	mov	r4, r0
 800a19a:	460d      	mov	r5, r1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a19c:	2301      	movs	r3, #1
 800a19e:	460a      	mov	r2, r1
 800a1a0:	f100 0130 	add.w	r1, r0, #48	; 0x30
 800a1a4:	7840      	ldrb	r0, [r0, #1]
 800a1a6:	f7ff fe65 	bl	8009e74 <disk_read>
 800a1aa:	b110      	cbz	r0, 800a1b2 <move_window+0x26>
				res = FR_DISK_ERR;
 800a1ac:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1ae:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800a1b2:	62e5      	str	r5, [r4, #44]	; 0x2c
 800a1b4:	e7ef      	b.n	800a196 <move_window+0xa>
	...

0800a1b8 <check_fs>:
{
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a1bc:	2300      	movs	r3, #0
 800a1be:	70c3      	strb	r3, [r0, #3]
 800a1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c4:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a1c6:	f7ff ffe1 	bl	800a18c <move_window>
 800a1ca:	bb60      	cbnz	r0, 800a226 <check_fs+0x6e>
 800a1cc:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1ce:	f204 202e 	addw	r0, r4, #558	; 0x22e
 800a1d2:	f7ff fe5b 	bl	8009e8c <ld_word>
 800a1d6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1da:	4298      	cmp	r0, r3
 800a1dc:	d125      	bne.n	800a22a <check_fs+0x72>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a1de:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a1e2:	2be9      	cmp	r3, #233	; 0xe9
 800a1e4:	d00e      	beq.n	800a204 <check_fs+0x4c>
 800a1e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a1e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800a1ec:	4a11      	ldr	r2, [pc, #68]	; (800a234 <check_fs+0x7c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d008      	beq.n	800a204 <check_fs+0x4c>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800a1f2:	220b      	movs	r2, #11
 800a1f4:	4910      	ldr	r1, [pc, #64]	; (800a238 <check_fs+0x80>)
 800a1f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a1fa:	f7ff fe88 	bl	8009f0e <mem_cmp>
 800a1fe:	b1b8      	cbz	r0, 800a230 <check_fs+0x78>
	return 2;
 800a200:	2502      	movs	r5, #2
 800a202:	e013      	b.n	800a22c <check_fs+0x74>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a204:	f104 0066 	add.w	r0, r4, #102	; 0x66
 800a208:	f7ff fe45 	bl	8009e96 <ld_dword>
 800a20c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800a210:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <check_fs+0x84>)
 800a212:	4298      	cmp	r0, r3
 800a214:	d00a      	beq.n	800a22c <check_fs+0x74>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a216:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800a21a:	f7ff fe3c 	bl	8009e96 <ld_dword>
 800a21e:	4b08      	ldr	r3, [pc, #32]	; (800a240 <check_fs+0x88>)
 800a220:	4298      	cmp	r0, r3
 800a222:	d1e6      	bne.n	800a1f2 <check_fs+0x3a>
 800a224:	e002      	b.n	800a22c <check_fs+0x74>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a226:	2504      	movs	r5, #4
 800a228:	e000      	b.n	800a22c <check_fs+0x74>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a22a:	2503      	movs	r5, #3
}
 800a22c:	4628      	mov	r0, r5
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800a230:	2501      	movs	r5, #1
 800a232:	e7fb      	b.n	800a22c <check_fs+0x74>
 800a234:	009000eb 	.word	0x009000eb
 800a238:	08019cf4 	.word	0x08019cf4
 800a23c:	00544146 	.word	0x00544146
 800a240:	33544146 	.word	0x33544146

0800a244 <find_volume>:
{
 800a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	b087      	sub	sp, #28
 800a24a:	460d      	mov	r5, r1
	*rfs = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800a250:	f7ff ff55 	bl	800a0fe <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a254:	1e06      	subs	r6, r0, #0
 800a256:	f2c0 819e 	blt.w	800a596 <find_volume+0x352>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a25a:	4bc8      	ldr	r3, [pc, #800]	; (800a57c <find_volume+0x338>)
 800a25c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a260:	2c00      	cmp	r4, #0
 800a262:	f000 819a 	beq.w	800a59a <find_volume+0x356>
	*rfs = fs;							/* Return pointer to the file system object */
 800a266:	602c      	str	r4, [r5, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a268:	7823      	ldrb	r3, [r4, #0]
 800a26a:	b133      	cbz	r3, 800a27a <find_volume+0x36>
		stat = disk_status(fs->drv);
 800a26c:	7860      	ldrb	r0, [r4, #1]
 800a26e:	f7ff fde1 	bl	8009e34 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a272:	f010 0501 	ands.w	r5, r0, #1
 800a276:	f000 8193 	beq.w	800a5a0 <find_volume+0x35c>
	fs->fs_type = 0;					/* Clear the file system object */
 800a27a:	2300      	movs	r3, #0
 800a27c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a27e:	b2f0      	uxtb	r0, r6
 800a280:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a282:	f7ff fde3 	bl	8009e4c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a286:	f010 0501 	ands.w	r5, r0, #1
 800a28a:	f040 8188 	bne.w	800a59e <find_volume+0x35a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a28e:	2100      	movs	r1, #0
 800a290:	4620      	mov	r0, r4
 800a292:	f7ff ff91 	bl	800a1b8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a296:	2802      	cmp	r0, #2
 800a298:	f000 80b3 	beq.w	800a402 <find_volume+0x1be>
	bsect = 0;
 800a29c:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a29e:	2804      	cmp	r0, #4
 800a2a0:	f000 8182 	beq.w	800a5a8 <find_volume+0x364>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a2a4:	2801      	cmp	r0, #1
 800a2a6:	f200 8181 	bhi.w	800a5ac <find_volume+0x368>
	if (fmt == 1) {
 800a2aa:	f000 8139 	beq.w	800a520 <find_volume+0x2dc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a2ae:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 800a2b2:	f7ff fdeb 	bl	8009e8c <ld_word>
 800a2b6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a2ba:	f040 818d 	bne.w	800a5d8 <find_volume+0x394>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a2be:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800a2c2:	f7ff fde3 	bl	8009e8c <ld_word>
 800a2c6:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a2c8:	b920      	cbnz	r0, 800a2d4 <find_volume+0x90>
 800a2ca:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800a2ce:	f7ff fde2 	bl	8009e96 <ld_dword>
 800a2d2:	4680      	mov	r8, r0
		fs->fsize = fasize;
 800a2d4:	f8c4 8018 	str.w	r8, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a2d8:	f894 7040 	ldrb.w	r7, [r4, #64]	; 0x40
 800a2dc:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a2de:	1e7b      	subs	r3, r7, #1
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	f200 817a 	bhi.w	800a5dc <find_volume+0x398>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a2e8:	fb08 f707 	mul.w	r7, r8, r7
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a2ec:	f894 b03d 	ldrb.w	fp, [r4, #61]	; 0x3d
 800a2f0:	f8a4 b00a 	strh.w	fp, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a2f4:	f1bb 0f00 	cmp.w	fp, #0
 800a2f8:	f000 8172 	beq.w	800a5e0 <find_volume+0x39c>
 800a2fc:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a300:	ea1b 0f03 	tst.w	fp, r3
 800a304:	f040 816e 	bne.w	800a5e4 <find_volume+0x3a0>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a308:	f104 0041 	add.w	r0, r4, #65	; 0x41
 800a30c:	f7ff fdbe 	bl	8009e8c <ld_word>
 800a310:	4681      	mov	r9, r0
 800a312:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a314:	f010 0f0f 	tst.w	r0, #15
 800a318:	f040 8166 	bne.w	800a5e8 <find_volume+0x3a4>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a31c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800a320:	f7ff fdb4 	bl	8009e8c <ld_word>
 800a324:	4682      	mov	sl, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a326:	b920      	cbnz	r0, 800a332 <find_volume+0xee>
 800a328:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a32c:	f7ff fdb3 	bl	8009e96 <ld_dword>
 800a330:	4682      	mov	sl, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a332:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 800a336:	f7ff fda9 	bl	8009e8c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a33a:	4602      	mov	r2, r0
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f000 8155 	beq.w	800a5ec <find_volume+0x3a8>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a342:	19c3      	adds	r3, r0, r7
 800a344:	eb03 1319 	add.w	r3, r3, r9, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a348:	459a      	cmp	sl, r3
 800a34a:	f0c0 8151 	bcc.w	800a5f0 <find_volume+0x3ac>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a34e:	ebaa 0a03 	sub.w	sl, sl, r3
 800a352:	fbba f1fb 	udiv	r1, sl, fp
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a356:	45da      	cmp	sl, fp
 800a358:	f0c0 814c 	bcc.w	800a5f4 <find_volume+0x3b0>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a35c:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800a360:	4281      	cmp	r1, r0
 800a362:	f240 80f7 	bls.w	800a554 <find_volume+0x310>
		fmt = FS_FAT32;
 800a366:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a36a:	f640 70f5 	movw	r0, #4085	; 0xff5
 800a36e:	4281      	cmp	r1, r0
 800a370:	d801      	bhi.n	800a376 <find_volume+0x132>
 800a372:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a376:	f101 0a02 	add.w	sl, r1, #2
 800a37a:	f8c4 a014 	str.w	sl, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a37e:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a380:	4432      	add	r2, r6
 800a382:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a384:	441e      	add	r6, r3
 800a386:	62a6      	str	r6, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a388:	f1bb 0f03 	cmp.w	fp, #3
 800a38c:	f000 80e5 	beq.w	800a55a <find_volume+0x316>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a390:	f1b9 0f00 	cmp.w	r9, #0
 800a394:	f000 8134 	beq.w	800a600 <find_volume+0x3bc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a398:	443a      	add	r2, r7
 800a39a:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a39c:	f1bb 0f02 	cmp.w	fp, #2
 800a3a0:	f000 80f6 	beq.w	800a590 <find_volume+0x34c>
 800a3a4:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 800a3a8:	f00a 0a01 	and.w	sl, sl, #1
 800a3ac:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a3b0:	f20a 13ff 	addw	r3, sl, #511	; 0x1ff
 800a3b4:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800a3b8:	f0c0 8124 	bcc.w	800a604 <find_volume+0x3c0>
	fs->fs_type = fmt;		/* FAT sub-type */
 800a3bc:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800a3c0:	4a6f      	ldr	r2, [pc, #444]	; (800a580 <find_volume+0x33c>)
 800a3c2:	8813      	ldrh	r3, [r2, #0]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	8013      	strh	r3, [r2, #0]
 800a3ca:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a3cc:	4b6d      	ldr	r3, [pc, #436]	; (800a584 <find_volume+0x340>)
 800a3ce:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800a3d0:	4b6d      	ldr	r3, [pc, #436]	; (800a588 <find_volume+0x344>)
 800a3d2:	6123      	str	r3, [r4, #16]
	return FR_OK;
 800a3d4:	e0e4      	b.n	800a5a0 <find_volume+0x35c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	ab06      	add	r3, sp, #24
 800a3da:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a3de:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3e2:	3601      	adds	r6, #1
 800a3e4:	2e03      	cmp	r6, #3
 800a3e6:	d80e      	bhi.n	800a406 <find_volume+0x1c2>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a3e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a3ec:	0133      	lsls	r3, r6, #4
 800a3ee:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a3f2:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a3f4:	7903      	ldrb	r3, [r0, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0ed      	beq.n	800a3d6 <find_volume+0x192>
 800a3fa:	3008      	adds	r0, #8
 800a3fc:	f7ff fd4b 	bl	8009e96 <ld_dword>
 800a400:	e7ea      	b.n	800a3d8 <find_volume+0x194>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a402:	2600      	movs	r6, #0
 800a404:	e7ee      	b.n	800a3e4 <find_volume+0x1a0>
 800a406:	2700      	movs	r7, #0
 800a408:	e00a      	b.n	800a420 <find_volume+0x1dc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a40a:	4631      	mov	r1, r6
 800a40c:	4620      	mov	r0, r4
 800a40e:	f7ff fed3 	bl	800a1b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a412:	2801      	cmp	r0, #1
 800a414:	f67f af43 	bls.w	800a29e <find_volume+0x5a>
 800a418:	3701      	adds	r7, #1
 800a41a:	2f03      	cmp	r7, #3
 800a41c:	f63f af3f 	bhi.w	800a29e <find_volume+0x5a>
			bsect = br[i];
 800a420:	ab06      	add	r3, sp, #24
 800a422:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800a426:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a42a:	2e00      	cmp	r6, #0
 800a42c:	d1ed      	bne.n	800a40a <find_volume+0x1c6>
 800a42e:	2003      	movs	r0, #3
 800a430:	e7f2      	b.n	800a418 <find_volume+0x1d4>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800a432:	3301      	adds	r3, #1
 800a434:	2b3f      	cmp	r3, #63	; 0x3f
 800a436:	d804      	bhi.n	800a442 <find_volume+0x1fe>
 800a438:	18e2      	adds	r2, r4, r3
 800a43a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a43e:	2a00      	cmp	r2, #0
 800a440:	d0f7      	beq.n	800a432 <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800a442:	2b3f      	cmp	r3, #63	; 0x3f
 800a444:	f240 80b4 	bls.w	800a5b0 <find_volume+0x36c>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800a448:	f104 0098 	add.w	r0, r4, #152	; 0x98
 800a44c:	f7ff fd1e 	bl	8009e8c <ld_word>
 800a450:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a454:	f040 80ae 	bne.w	800a5b4 <find_volume+0x370>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800a458:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800a45c:	2b09      	cmp	r3, #9
 800a45e:	f040 80ab 	bne.w	800a5b8 <find_volume+0x374>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800a462:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800a466:	f7ff fd21 	bl	8009eac <ld_qword>
 800a46a:	1987      	adds	r7, r0, r6
 800a46c:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800a470:	f04f 33ff 	mov.w	r3, #4294967295
 800a474:	42bb      	cmp	r3, r7
 800a476:	f04f 0300 	mov.w	r3, #0
 800a47a:	eb73 0309 	sbcs.w	r3, r3, r9
 800a47e:	f0c0 809d 	bcc.w	800a5bc <find_volume+0x378>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800a482:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800a486:	f7ff fd06 	bl	8009e96 <ld_dword>
 800a48a:	61a0      	str	r0, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800a48c:	f894 a09e 	ldrb.w	sl, [r4, #158]	; 0x9e
 800a490:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800a494:	f1ba 0f01 	cmp.w	sl, #1
 800a498:	f040 8092 	bne.w	800a5c0 <find_volume+0x37c>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800a49c:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800a4a0:	f04f 0801 	mov.w	r8, #1
 800a4a4:	fa08 f803 	lsl.w	r8, r8, r3
 800a4a8:	fa1f f888 	uxth.w	r8, r8
 800a4ac:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800a4b0:	f1b8 0f00 	cmp.w	r8, #0
 800a4b4:	f000 8086 	beq.w	800a5c4 <find_volume+0x380>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800a4b8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800a4bc:	f7ff fceb 	bl	8009e96 <ld_dword>
 800a4c0:	4683      	mov	fp, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800a4c2:	4b32      	ldr	r3, [pc, #200]	; (800a58c <find_volume+0x348>)
 800a4c4:	4298      	cmp	r0, r3
 800a4c6:	d87f      	bhi.n	800a5c8 <find_volume+0x384>
		fs->n_fatent = nclst + 2;
 800a4c8:	1c83      	adds	r3, r0, #2
 800a4ca:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;
 800a4cc:	61e6      	str	r6, [r4, #28]
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800a4ce:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800a4d2:	f7ff fce0 	bl	8009e96 <ld_dword>
 800a4d6:	1983      	adds	r3, r0, r6
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800a4dc:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800a4e0:	f7ff fcd9 	bl	8009e96 <ld_dword>
 800a4e4:	4406      	add	r6, r0
 800a4e6:	6226      	str	r6, [r4, #32]
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	fb0b f808 	mul.w	r8, fp, r8
 800a4ee:	9a01      	ldr	r2, [sp, #4]
 800a4f0:	eb12 0808 	adds.w	r8, r2, r8
 800a4f4:	415b      	adcs	r3, r3
 800a4f6:	4547      	cmp	r7, r8
 800a4f8:	eb79 0303 	sbcs.w	r3, r9, r3
 800a4fc:	d366      	bcc.n	800a5cc <find_volume+0x388>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800a4fe:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800a502:	f7ff fcc8 	bl	8009e96 <ld_dword>
 800a506:	4601      	mov	r1, r0
 800a508:	6260      	str	r0, [r4, #36]	; 0x24
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800a50a:	4620      	mov	r0, r4
 800a50c:	f7ff fd14 	bl	8009f38 <clust2sect>
 800a510:	4601      	mov	r1, r0
 800a512:	4620      	mov	r0, r4
 800a514:	f7ff fe3a 	bl	800a18c <move_window>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d159      	bne.n	800a5d0 <find_volume+0x38c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a51c:	2600      	movs	r6, #0
 800a51e:	e002      	b.n	800a526 <find_volume+0x2e2>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800a520:	230b      	movs	r3, #11
 800a522:	e787      	b.n	800a434 <find_volume+0x1f0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a524:	3620      	adds	r6, #32
 800a526:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800a52a:	d20d      	bcs.n	800a548 <find_volume+0x304>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a52c:	19a3      	adds	r3, r4, r6
 800a52e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a532:	2b81      	cmp	r3, #129	; 0x81
 800a534:	d1f6      	bne.n	800a524 <find_volume+0x2e0>
 800a536:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800a53a:	f106 0014 	add.w	r0, r6, #20
 800a53e:	4418      	add	r0, r3
 800a540:	f7ff fca9 	bl	8009e96 <ld_dword>
 800a544:	2802      	cmp	r0, #2
 800a546:	d1ed      	bne.n	800a524 <find_volume+0x2e0>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800a548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800a54c:	d042      	beq.n	800a5d4 <find_volume+0x390>
		fmt = FS_EXFAT;			/* FAT sub-type */
 800a54e:	f04f 0b04 	mov.w	fp, #4
 800a552:	e733      	b.n	800a3bc <find_volume+0x178>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a554:	f04f 0b02 	mov.w	fp, #2
 800a558:	e707      	b.n	800a36a <find_volume+0x126>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a55a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800a55e:	f7ff fc95 	bl	8009e8c <ld_word>
 800a562:	2800      	cmp	r0, #0
 800a564:	d148      	bne.n	800a5f8 <find_volume+0x3b4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a566:	f1b9 0f00 	cmp.w	r9, #0
 800a56a:	d147      	bne.n	800a5fc <find_volume+0x3b8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a56c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a570:	f7ff fc91 	bl	8009e96 <ld_dword>
 800a574:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a576:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800a57a:	e719      	b.n	800a3b0 <find_volume+0x16c>
 800a57c:	200003c4 	.word	0x200003c4
 800a580:	200003c8 	.word	0x200003c8
 800a584:	200003cc 	.word	0x200003cc
 800a588:	20000164 	.word	0x20000164
 800a58c:	7ffffffd 	.word	0x7ffffffd
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a590:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800a594:	e70c      	b.n	800a3b0 <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a596:	250b      	movs	r5, #11
 800a598:	e002      	b.n	800a5a0 <find_volume+0x35c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a59a:	250c      	movs	r5, #12
 800a59c:	e000      	b.n	800a5a0 <find_volume+0x35c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a59e:	2503      	movs	r5, #3
}
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	b007      	add	sp, #28
 800a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a5a8:	2501      	movs	r5, #1
 800a5aa:	e7f9      	b.n	800a5a0 <find_volume+0x35c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a5ac:	250d      	movs	r5, #13
 800a5ae:	e7f7      	b.n	800a5a0 <find_volume+0x35c>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800a5b0:	250d      	movs	r5, #13
 800a5b2:	e7f5      	b.n	800a5a0 <find_volume+0x35c>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800a5b4:	250d      	movs	r5, #13
 800a5b6:	e7f3      	b.n	800a5a0 <find_volume+0x35c>
			return FR_NO_FILESYSTEM;
 800a5b8:	250d      	movs	r5, #13
 800a5ba:	e7f1      	b.n	800a5a0 <find_volume+0x35c>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800a5bc:	250d      	movs	r5, #13
 800a5be:	e7ef      	b.n	800a5a0 <find_volume+0x35c>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800a5c0:	250d      	movs	r5, #13
 800a5c2:	e7ed      	b.n	800a5a0 <find_volume+0x35c>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800a5c4:	250d      	movs	r5, #13
 800a5c6:	e7eb      	b.n	800a5a0 <find_volume+0x35c>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800a5c8:	250d      	movs	r5, #13
 800a5ca:	e7e9      	b.n	800a5a0 <find_volume+0x35c>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a5cc:	250d      	movs	r5, #13
 800a5ce:	e7e7      	b.n	800a5a0 <find_volume+0x35c>
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800a5d0:	4655      	mov	r5, sl
 800a5d2:	e7e5      	b.n	800a5a0 <find_volume+0x35c>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800a5d4:	250d      	movs	r5, #13
 800a5d6:	e7e3      	b.n	800a5a0 <find_volume+0x35c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a5d8:	250d      	movs	r5, #13
 800a5da:	e7e1      	b.n	800a5a0 <find_volume+0x35c>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a5dc:	250d      	movs	r5, #13
 800a5de:	e7df      	b.n	800a5a0 <find_volume+0x35c>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a5e0:	250d      	movs	r5, #13
 800a5e2:	e7dd      	b.n	800a5a0 <find_volume+0x35c>
 800a5e4:	250d      	movs	r5, #13
 800a5e6:	e7db      	b.n	800a5a0 <find_volume+0x35c>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a5e8:	250d      	movs	r5, #13
 800a5ea:	e7d9      	b.n	800a5a0 <find_volume+0x35c>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a5ec:	250d      	movs	r5, #13
 800a5ee:	e7d7      	b.n	800a5a0 <find_volume+0x35c>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a5f0:	250d      	movs	r5, #13
 800a5f2:	e7d5      	b.n	800a5a0 <find_volume+0x35c>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a5f4:	250d      	movs	r5, #13
 800a5f6:	e7d3      	b.n	800a5a0 <find_volume+0x35c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a5f8:	250d      	movs	r5, #13
 800a5fa:	e7d1      	b.n	800a5a0 <find_volume+0x35c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a5fc:	250d      	movs	r5, #13
 800a5fe:	e7cf      	b.n	800a5a0 <find_volume+0x35c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a600:	250d      	movs	r5, #13
 800a602:	e7cd      	b.n	800a5a0 <find_volume+0x35c>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a604:	250d      	movs	r5, #13
 800a606:	e7cb      	b.n	800a5a0 <find_volume+0x35c>

0800a608 <get_fat>:
{
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800a60a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a60c:	2901      	cmp	r1, #1
 800a60e:	f240 8093 	bls.w	800a738 <get_fat+0x130>
 800a612:	460c      	mov	r4, r1
 800a614:	696b      	ldr	r3, [r5, #20]
 800a616:	428b      	cmp	r3, r1
 800a618:	f240 8090 	bls.w	800a73c <get_fat+0x134>
		switch (fs->fs_type) {
 800a61c:	782b      	ldrb	r3, [r5, #0]
 800a61e:	3b01      	subs	r3, #1
 800a620:	2b03      	cmp	r3, #3
 800a622:	f200 808d 	bhi.w	800a740 <get_fat+0x138>
 800a626:	e8df f003 	tbb	[pc, r3]
 800a62a:	2b02      	.short	0x2b02
 800a62c:	4f3c      	.short	0x4f3c
			bc = (UINT)clst; bc += bc / 2;
 800a62e:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a632:	6a29      	ldr	r1, [r5, #32]
 800a634:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800a638:	4628      	mov	r0, r5
 800a63a:	f7ff fda7 	bl	800a18c <move_window>
 800a63e:	b110      	cbz	r0, 800a646 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	e079      	b.n	800a73a <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a646:	1c77      	adds	r7, r6, #1
 800a648:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800a64c:	442e      	add	r6, r5
 800a64e:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a652:	6a29      	ldr	r1, [r5, #32]
 800a654:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800a658:	4628      	mov	r0, r5
 800a65a:	f7ff fd97 	bl	800a18c <move_window>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d170      	bne.n	800a744 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a662:	f3c7 0008 	ubfx	r0, r7, #0, #9
 800a666:	4428      	add	r0, r5
 800a668:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 800a66c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a670:	f014 0f01 	tst.w	r4, #1
 800a674:	d001      	beq.n	800a67a <get_fat+0x72>
 800a676:	0900      	lsrs	r0, r0, #4
 800a678:	e05f      	b.n	800a73a <get_fat+0x132>
 800a67a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800a67e:	e05c      	b.n	800a73a <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a680:	6a29      	ldr	r1, [r5, #32]
 800a682:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800a686:	4628      	mov	r0, r5
 800a688:	f7ff fd80 	bl	800a18c <move_window>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d15c      	bne.n	800a74a <get_fat+0x142>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a690:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a694:	0064      	lsls	r4, r4, #1
 800a696:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800a69a:	4420      	add	r0, r4
 800a69c:	f7ff fbf6 	bl	8009e8c <ld_word>
			break;
 800a6a0:	e04b      	b.n	800a73a <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6a2:	6a29      	ldr	r1, [r5, #32]
 800a6a4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f7ff fd6f 	bl	800a18c <move_window>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d14e      	bne.n	800a750 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a6b2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a6b6:	00a4      	lsls	r4, r4, #2
 800a6b8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800a6bc:	4420      	add	r0, r4
 800a6be:	f7ff fbea 	bl	8009e96 <ld_dword>
 800a6c2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800a6c6:	e038      	b.n	800a73a <get_fat+0x132>
			if (obj->objsize) {
 800a6c8:	6903      	ldr	r3, [r0, #16]
 800a6ca:	6942      	ldr	r2, [r0, #20]
 800a6cc:	ea53 0102 	orrs.w	r1, r3, r2
 800a6d0:	d041      	beq.n	800a756 <get_fat+0x14e>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a6d2:	6881      	ldr	r1, [r0, #8]
 800a6d4:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	f142 32ff 	adc.w	r2, r2, #4294967295
 800a6dc:	0a5b      	lsrs	r3, r3, #9
 800a6de:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a6e2:	896a      	ldrh	r2, [r5, #10]
 800a6e4:	fbb3 f3f2 	udiv	r3, r3, r2
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a6e8:	79c2      	ldrb	r2, [r0, #7]
 800a6ea:	2a02      	cmp	r2, #2
 800a6ec:	d008      	beq.n	800a700 <get_fat+0xf8>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a6ee:	2a03      	cmp	r2, #3
 800a6f0:	d00b      	beq.n	800a70a <get_fat+0x102>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a6f2:	2a02      	cmp	r2, #2
 800a6f4:	d034      	beq.n	800a760 <get_fat+0x158>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a6f6:	69c3      	ldr	r3, [r0, #28]
 800a6f8:	b163      	cbz	r3, 800a714 <get_fat+0x10c>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a6fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a6fe:	e01c      	b.n	800a73a <get_fat+0x132>
					if (cofs <= clen) {
 800a700:	4299      	cmp	r1, r3
 800a702:	d8f4      	bhi.n	800a6ee <get_fat+0xe6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a704:	d029      	beq.n	800a75a <get_fat+0x152>
 800a706:	1c60      	adds	r0, r4, #1
 800a708:	e017      	b.n	800a73a <get_fat+0x132>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a70a:	6983      	ldr	r3, [r0, #24]
 800a70c:	428b      	cmp	r3, r1
 800a70e:	d9f0      	bls.n	800a6f2 <get_fat+0xea>
					val = clst + 1; 	/* Generate the value */
 800a710:	1c60      	adds	r0, r4, #1
					break;
 800a712:	e012      	b.n	800a73a <get_fat+0x132>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a714:	6a29      	ldr	r1, [r5, #32]
 800a716:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800a71a:	4628      	mov	r0, r5
 800a71c:	f7ff fd36 	bl	800a18c <move_window>
 800a720:	bb00      	cbnz	r0, 800a764 <get_fat+0x15c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a722:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a726:	00a3      	lsls	r3, r4, #2
 800a728:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a72c:	4418      	add	r0, r3
 800a72e:	f7ff fbb2 	bl	8009e96 <ld_dword>
 800a732:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a736:	e000      	b.n	800a73a <get_fat+0x132>
		val = 1;	/* Internal error */
 800a738:	2001      	movs	r0, #1
}
 800a73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800a73c:	2001      	movs	r0, #1
 800a73e:	e7fc      	b.n	800a73a <get_fat+0x132>
		switch (fs->fs_type) {
 800a740:	2001      	movs	r0, #1
 800a742:	e7fa      	b.n	800a73a <get_fat+0x132>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a744:	f04f 30ff 	mov.w	r0, #4294967295
 800a748:	e7f7      	b.n	800a73a <get_fat+0x132>
 800a74a:	f04f 30ff 	mov.w	r0, #4294967295
 800a74e:	e7f4      	b.n	800a73a <get_fat+0x132>
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e7f1      	b.n	800a73a <get_fat+0x132>
			val = 1;	/* Internal error */
 800a756:	2001      	movs	r0, #1
 800a758:	e7ef      	b.n	800a73a <get_fat+0x132>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a75a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a75e:	e7ec      	b.n	800a73a <get_fat+0x132>
			val = 1;	/* Internal error */
 800a760:	2001      	movs	r0, #1
 800a762:	e7ea      	b.n	800a73a <get_fat+0x132>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 800a768:	e7e7      	b.n	800a73a <get_fat+0x132>

0800a76a <dir_sdi>:
{
 800a76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76e:	4606      	mov	r6, r0
 800a770:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 800a772:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a776:	f898 3000 	ldrb.w	r3, [r8]
 800a77a:	2b04      	cmp	r3, #4
 800a77c:	d029      	beq.n	800a7d2 <dir_sdi+0x68>
 800a77e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a782:	42bb      	cmp	r3, r7
 800a784:	d943      	bls.n	800a80e <dir_sdi+0xa4>
 800a786:	f017 0f1f 	tst.w	r7, #31
 800a78a:	d142      	bne.n	800a812 <dir_sdi+0xa8>
	dp->dptr = ofs;				/* Set current offset */
 800a78c:	6337      	str	r7, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a78e:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a790:	b93c      	cbnz	r4, 800a7a2 <dir_sdi+0x38>
 800a792:	f898 3000 	ldrb.w	r3, [r8]
 800a796:	2b02      	cmp	r3, #2
 800a798:	d903      	bls.n	800a7a2 <dir_sdi+0x38>
		clst = fs->dirbase;
 800a79a:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800a79e:	2300      	movs	r3, #0
 800a7a0:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a7a2:	b9cc      	cbnz	r4, 800a7d8 <dir_sdi+0x6e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a7a4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800a7a8:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800a7ac:	d933      	bls.n	800a816 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 800a7ae:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800a7b2:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 800a7b4:	6374      	str	r4, [r6, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a7b6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800a7b8:	b3ab      	cbz	r3, 800a826 <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a7ba:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 800a7be:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a7c0:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800a7c4:	f3c7 0108 	ubfx	r1, r7, #0, #9
 800a7c8:	4419      	add	r1, r3
 800a7ca:	63f1      	str	r1, [r6, #60]	; 0x3c
	return FR_OK;
 800a7cc:	2000      	movs	r0, #0
}
 800a7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a7d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a7d6:	e7d4      	b.n	800a782 <dir_sdi+0x18>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a7d8:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 800a7dc:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800a7de:	42af      	cmp	r7, r5
 800a7e0:	d30f      	bcc.n	800a802 <dir_sdi+0x98>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7ff ff0f 	bl	800a608 <get_fat>
 800a7ea:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a7ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a7f0:	d013      	beq.n	800a81a <dir_sdi+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a7f2:	2801      	cmp	r0, #1
 800a7f4:	d913      	bls.n	800a81e <dir_sdi+0xb4>
 800a7f6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a7fa:	4283      	cmp	r3, r0
 800a7fc:	d911      	bls.n	800a822 <dir_sdi+0xb8>
			ofs -= csz;
 800a7fe:	1b7f      	subs	r7, r7, r5
 800a800:	e7ed      	b.n	800a7de <dir_sdi+0x74>
		dp->sect = clust2sect(fs, clst);
 800a802:	4621      	mov	r1, r4
 800a804:	4640      	mov	r0, r8
 800a806:	f7ff fb97 	bl	8009f38 <clust2sect>
 800a80a:	63b0      	str	r0, [r6, #56]	; 0x38
 800a80c:	e7d2      	b.n	800a7b4 <dir_sdi+0x4a>
		return FR_INT_ERR;
 800a80e:	2002      	movs	r0, #2
 800a810:	e7dd      	b.n	800a7ce <dir_sdi+0x64>
 800a812:	2002      	movs	r0, #2
 800a814:	e7db      	b.n	800a7ce <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a816:	2002      	movs	r0, #2
 800a818:	e7d9      	b.n	800a7ce <dir_sdi+0x64>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a81a:	2001      	movs	r0, #1
 800a81c:	e7d7      	b.n	800a7ce <dir_sdi+0x64>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a81e:	2002      	movs	r0, #2
 800a820:	e7d5      	b.n	800a7ce <dir_sdi+0x64>
 800a822:	2002      	movs	r0, #2
 800a824:	e7d3      	b.n	800a7ce <dir_sdi+0x64>
	if (!dp->sect) return FR_INT_ERR;
 800a826:	2002      	movs	r0, #2
 800a828:	e7d1      	b.n	800a7ce <dir_sdi+0x64>

0800a82a <dir_next>:
{
 800a82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800a82e:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a830:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a832:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a834:	2b00      	cmp	r3, #0
 800a836:	d043      	beq.n	800a8c0 <dir_next+0x96>
 800a838:	4604      	mov	r4, r0
 800a83a:	4688      	mov	r8, r1
 800a83c:	3520      	adds	r5, #32
 800a83e:	7832      	ldrb	r2, [r6, #0]
 800a840:	2a04      	cmp	r2, #4
 800a842:	d016      	beq.n	800a872 <dir_next+0x48>
 800a844:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a848:	42aa      	cmp	r2, r5
 800a84a:	d93b      	bls.n	800a8c4 <dir_next+0x9a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a84c:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800a850:	b93f      	cbnz	r7, 800a862 <dir_next+0x38>
		dp->sect++;				/* Next sector */
 800a852:	3301      	adds	r3, #1
 800a854:	63a3      	str	r3, [r4, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 800a856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a858:	b991      	cbnz	r1, 800a880 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a85a:	8933      	ldrh	r3, [r6, #8]
 800a85c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800a860:	d90a      	bls.n	800a878 <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
 800a862:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a864:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800a868:	443b      	add	r3, r7
 800a86a:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
 800a86c:	2000      	movs	r0, #0
}
 800a86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a876:	e7e7      	b.n	800a848 <dir_next+0x1e>
				dp->sect = 0; return FR_NO_FILE;
 800a878:	2300      	movs	r3, #0
 800a87a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a87c:	2004      	movs	r0, #4
 800a87e:	e7f6      	b.n	800a86e <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a880:	8973      	ldrh	r3, [r6, #10]
 800a882:	3b01      	subs	r3, #1
 800a884:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800a888:	d1eb      	bne.n	800a862 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7ff febc 	bl	800a608 <get_fat>
 800a890:	4601      	mov	r1, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a892:	2801      	cmp	r0, #1
 800a894:	d918      	bls.n	800a8c8 <dir_next+0x9e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a896:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a89a:	d017      	beq.n	800a8cc <dir_next+0xa2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a89c:	6973      	ldr	r3, [r6, #20]
 800a89e:	4283      	cmp	r3, r0
 800a8a0:	d905      	bls.n	800a8ae <dir_next+0x84>
				dp->clust = clst;		/* Initialize data for new cluster */
 800a8a2:	6360      	str	r0, [r4, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	f7ff fb47 	bl	8009f38 <clust2sect>
 800a8aa:	63a0      	str	r0, [r4, #56]	; 0x38
 800a8ac:	e7d9      	b.n	800a862 <dir_next+0x38>
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
 800a8ae:	f1b8 0f00 	cmp.w	r8, #0
 800a8b2:	d101      	bne.n	800a8b8 <dir_next+0x8e>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63a3      	str	r3, [r4, #56]	; 0x38
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	63a3      	str	r3, [r4, #56]	; 0x38
 800a8bc:	2004      	movs	r0, #4
 800a8be:	e7d6      	b.n	800a86e <dir_next+0x44>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a8c0:	2004      	movs	r0, #4
 800a8c2:	e7d4      	b.n	800a86e <dir_next+0x44>
 800a8c4:	2004      	movs	r0, #4
 800a8c6:	e7d2      	b.n	800a86e <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a8c8:	2002      	movs	r0, #2
 800a8ca:	e7d0      	b.n	800a86e <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a8cc:	2001      	movs	r0, #1
 800a8ce:	e7ce      	b.n	800a86e <dir_next+0x44>

0800a8d0 <load_xdir>:
{
 800a8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d4:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a8d6:	6800      	ldr	r0, [r0, #0]
 800a8d8:	6907      	ldr	r7, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 800a8da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a8dc:	f7ff fc56 	bl	800a18c <move_window>
	if (res != FR_OK) return res;
 800a8e0:	4605      	mov	r5, r0
 800a8e2:	b920      	cbnz	r0, 800a8ee <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a8e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a8e6:	780b      	ldrb	r3, [r1, #0]
 800a8e8:	2b85      	cmp	r3, #133	; 0x85
 800a8ea:	d003      	beq.n	800a8f4 <load_xdir+0x24>
 800a8ec:	2502      	movs	r5, #2
}
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	f7ff fafa 	bl	8009ef0 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a8fc:	787e      	ldrb	r6, [r7, #1]
 800a8fe:	3601      	adds	r6, #1
 800a900:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a902:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
 800a906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a90a:	d851      	bhi.n	800a9b0 <load_xdir+0xe0>
	res = dir_next(dp, 0);
 800a90c:	2100      	movs	r1, #0
 800a90e:	4620      	mov	r0, r4
 800a910:	f7ff ff8b 	bl	800a82a <dir_next>
	if (res != FR_OK) return res;
 800a914:	4605      	mov	r5, r0
 800a916:	2800      	cmp	r0, #0
 800a918:	d1e9      	bne.n	800a8ee <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 800a91a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a91c:	6820      	ldr	r0, [r4, #0]
 800a91e:	f7ff fc35 	bl	800a18c <move_window>
	if (res != FR_OK) return res;
 800a922:	4605      	mov	r5, r0
 800a924:	2800      	cmp	r0, #0
 800a926:	d1e2      	bne.n	800a8ee <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800a928:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a92a:	780b      	ldrb	r3, [r1, #0]
 800a92c:	2bc0      	cmp	r3, #192	; 0xc0
 800a92e:	d001      	beq.n	800a934 <load_xdir+0x64>
 800a930:	2502      	movs	r5, #2
 800a932:	e7dc      	b.n	800a8ee <load_xdir+0x1e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800a934:	2220      	movs	r2, #32
 800a936:	18b8      	adds	r0, r7, r2
 800a938:	f7ff fada 	bl	8009ef0 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800a93c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a940:	332c      	adds	r3, #44	; 0x2c
 800a942:	4a1e      	ldr	r2, [pc, #120]	; (800a9bc <load_xdir+0xec>)
 800a944:	fba2 2303 	umull	r2, r3, r2, r3
 800a948:	08db      	lsrs	r3, r3, #3
 800a94a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 800a94e:	d331      	bcc.n	800a9b4 <load_xdir+0xe4>
	i = SZDIRE * 2;	/* C1 offset */
 800a950:	f04f 0840 	mov.w	r8, #64	; 0x40
 800a954:	e003      	b.n	800a95e <load_xdir+0x8e>
	} while ((i += SZDIRE) < sz_ent);
 800a956:	f108 0820 	add.w	r8, r8, #32
 800a95a:	4546      	cmp	r6, r8
 800a95c:	d91a      	bls.n	800a994 <load_xdir+0xc4>
		res = dir_next(dp, 0);
 800a95e:	2100      	movs	r1, #0
 800a960:	4620      	mov	r0, r4
 800a962:	f7ff ff62 	bl	800a82a <dir_next>
		if (res != FR_OK) return res;
 800a966:	4605      	mov	r5, r0
 800a968:	2800      	cmp	r0, #0
 800a96a:	d1c0      	bne.n	800a8ee <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 800a96c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	f7ff fc0c 	bl	800a18c <move_window>
		if (res != FR_OK) return res;
 800a974:	4605      	mov	r5, r0
 800a976:	2800      	cmp	r0, #0
 800a978:	d1b9      	bne.n	800a8ee <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800a97a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a97c:	780b      	ldrb	r3, [r1, #0]
 800a97e:	2bc1      	cmp	r3, #193	; 0xc1
 800a980:	d11a      	bne.n	800a9b8 <load_xdir+0xe8>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800a982:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 800a986:	d2e6      	bcs.n	800a956 <load_xdir+0x86>
 800a988:	2220      	movs	r2, #32
 800a98a:	eb07 0008 	add.w	r0, r7, r8
 800a98e:	f7ff faaf 	bl	8009ef0 <mem_cpy>
 800a992:	e7e0      	b.n	800a956 <load_xdir+0x86>
	if (i <= MAXDIRB(_MAX_LFN)) {
 800a994:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 800a998:	d8a9      	bhi.n	800a8ee <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800a99a:	4638      	mov	r0, r7
 800a99c:	f7ff fb56 	bl	800a04c <xdir_sum>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	1cb8      	adds	r0, r7, #2
 800a9a4:	f7ff fa72 	bl	8009e8c <ld_word>
 800a9a8:	4284      	cmp	r4, r0
 800a9aa:	d0a0      	beq.n	800a8ee <load_xdir+0x1e>
 800a9ac:	2502      	movs	r5, #2
 800a9ae:	e79e      	b.n	800a8ee <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a9b0:	2502      	movs	r5, #2
 800a9b2:	e79c      	b.n	800a8ee <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800a9b4:	2502      	movs	r5, #2
 800a9b6:	e79a      	b.n	800a8ee <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800a9b8:	2502      	movs	r5, #2
 800a9ba:	e798      	b.n	800a8ee <load_xdir+0x1e>
 800a9bc:	88888889 	.word	0x88888889

0800a9c0 <dir_read>:
{
 800a9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 800a9c8:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800a9ca:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800a9ce:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
 800a9d0:	2504      	movs	r5, #4
	while (dp->sect) {
 800a9d2:	e008      	b.n	800a9e6 <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
 800a9d4:	2b85      	cmp	r3, #133	; 0x85
 800a9d6:	d028      	beq.n	800aa2a <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7ff ff25 	bl	800a82a <dir_next>
		if (res != FR_OK) break;
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d159      	bne.n	800aa9a <dir_read+0xda>
	while (dp->sect) {
 800a9e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a9e8:	2900      	cmp	r1, #0
 800a9ea:	d056      	beq.n	800aa9a <dir_read+0xda>
		res = move_window(fs, dp->sect);
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7ff fbcd 	bl	800a18c <move_window>
		if (res != FR_OK) break;
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d150      	bne.n	800aa9a <dir_read+0xda>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a9f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a9fa:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d04b      	beq.n	800aa98 <dir_read+0xd8>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800aa00:	7832      	ldrb	r2, [r6, #0]
 800aa02:	2a04      	cmp	r2, #4
 800aa04:	d0e6      	beq.n	800a9d4 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800aa06:	7aca      	ldrb	r2, [r1, #11]
 800aa08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800aa0c:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800aa0e:	2b2e      	cmp	r3, #46	; 0x2e
 800aa10:	bf18      	it	ne
 800aa12:	2be5      	cmpne	r3, #229	; 0xe5
 800aa14:	d03c      	beq.n	800aa90 <dir_read+0xd0>
 800aa16:	f022 0020 	bic.w	r0, r2, #32
 800aa1a:	2808      	cmp	r0, #8
 800aa1c:	bf14      	ite	ne
 800aa1e:	2000      	movne	r0, #0
 800aa20:	2001      	moveq	r0, #1
 800aa22:	4540      	cmp	r0, r8
 800aa24:	d00e      	beq.n	800aa44 <dir_read+0x84>
				ord = 0xFF;
 800aa26:	27ff      	movs	r7, #255	; 0xff
 800aa28:	e7d6      	b.n	800a9d8 <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800aa2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aa2c:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f7ff ff4e 	bl	800a8d0 <load_xdir>
					if (res == FR_OK) {
 800aa34:	4605      	mov	r5, r0
 800aa36:	bb80      	cbnz	r0, 800aa9a <dir_read+0xda>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800aa38:	6933      	ldr	r3, [r6, #16]
 800aa3a:	791b      	ldrb	r3, [r3, #4]
 800aa3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa40:	71a3      	strb	r3, [r4, #6]
 800aa42:	e02a      	b.n	800aa9a <dir_read+0xda>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800aa44:	2a0f      	cmp	r2, #15
 800aa46:	d119      	bne.n	800aa7c <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800aa48:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aa4c:	d006      	beq.n	800aa5c <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
 800aa4e:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800aa52:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800aa56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800aa58:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
 800aa5a:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800aa5c:	42bb      	cmp	r3, r7
 800aa5e:	d001      	beq.n	800aa64 <dir_read+0xa4>
 800aa60:	27ff      	movs	r7, #255	; 0xff
 800aa62:	e7b9      	b.n	800a9d8 <dir_read+0x18>
 800aa64:	7b4b      	ldrb	r3, [r1, #13]
 800aa66:	454b      	cmp	r3, r9
 800aa68:	d001      	beq.n	800aa6e <dir_read+0xae>
 800aa6a:	27ff      	movs	r7, #255	; 0xff
 800aa6c:	e7b4      	b.n	800a9d8 <dir_read+0x18>
 800aa6e:	68f0      	ldr	r0, [r6, #12]
 800aa70:	f7ff fa9a 	bl	8009fa8 <pick_lfn>
 800aa74:	b170      	cbz	r0, 800aa94 <dir_read+0xd4>
 800aa76:	3f01      	subs	r7, #1
 800aa78:	b2ff      	uxtb	r7, r7
 800aa7a:	e7ad      	b.n	800a9d8 <dir_read+0x18>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800aa7c:	b927      	cbnz	r7, 800aa88 <dir_read+0xc8>
 800aa7e:	4608      	mov	r0, r1
 800aa80:	f7ff fad4 	bl	800a02c <sum_sfn>
 800aa84:	4548      	cmp	r0, r9
 800aa86:	d008      	beq.n	800aa9a <dir_read+0xda>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800aa88:	f04f 33ff 	mov.w	r3, #4294967295
 800aa8c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800aa8e:	e004      	b.n	800aa9a <dir_read+0xda>
				ord = 0xFF;
 800aa90:	27ff      	movs	r7, #255	; 0xff
 800aa92:	e7a1      	b.n	800a9d8 <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800aa94:	27ff      	movs	r7, #255	; 0xff
 800aa96:	e79f      	b.n	800a9d8 <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aa98:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800aa9a:	b10d      	cbz	r5, 800aaa0 <dir_read+0xe0>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800aaa8 <create_name>:
{
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	b083      	sub	sp, #12
 800aaae:	4681      	mov	r9, r0
 800aab0:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800aab2:	f8d1 8000 	ldr.w	r8, [r1]
 800aab6:	6803      	ldr	r3, [r0, #0]
 800aab8:	68dd      	ldr	r5, [r3, #12]
 800aaba:	2400      	movs	r4, #0
 800aabc:	4623      	mov	r3, r4
 800aabe:	e01e      	b.n	800aafe <create_name+0x56>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aac0:	3701      	adds	r7, #1
 800aac2:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
 800aac6:	2b5c      	cmp	r3, #92	; 0x5c
 800aac8:	bf18      	it	ne
 800aaca:	2b2f      	cmpne	r3, #47	; 0x2f
 800aacc:	d0f8      	beq.n	800aac0 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 800aace:	eb08 0747 	add.w	r7, r8, r7, lsl #1
 800aad2:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aad6:	2e1f      	cmp	r6, #31
 800aad8:	d827      	bhi.n	800ab2a <create_name+0x82>
 800aada:	f04f 0804 	mov.w	r8, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aade:	b33c      	cbz	r4, 800ab30 <create_name+0x88>
		w = lfn[di - 1];
 800aae0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800aae4:	4423      	add	r3, r4
 800aae6:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 800aaea:	2b20      	cmp	r3, #32
 800aaec:	bf18      	it	ne
 800aaee:	2b2e      	cmpne	r3, #46	; 0x2e
 800aaf0:	d11e      	bne.n	800ab30 <create_name+0x88>
		di--;
 800aaf2:	3c01      	subs	r4, #1
 800aaf4:	e7f3      	b.n	800aade <create_name+0x36>
		lfn[di++] = w;					/* Store the Unicode character */
 800aaf6:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 800aafa:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 800aafc:	463b      	mov	r3, r7
 800aafe:	1c5f      	adds	r7, r3, #1
 800ab00:	f838 6013 	ldrh.w	r6, [r8, r3, lsl #1]
		if (w < ' ') break;				/* Break if end of the path name */
 800ab04:	2e1f      	cmp	r6, #31
 800ab06:	d9e2      	bls.n	800aace <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ab08:	2e5c      	cmp	r6, #92	; 0x5c
 800ab0a:	bf18      	it	ne
 800ab0c:	2e2f      	cmpne	r6, #47	; 0x2f
 800ab0e:	d0d8      	beq.n	800aac2 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ab10:	2cfe      	cmp	r4, #254	; 0xfe
 800ab12:	f200 80d0 	bhi.w	800acb6 <create_name+0x20e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ab16:	2e7f      	cmp	r6, #127	; 0x7f
 800ab18:	d8ed      	bhi.n	800aaf6 <create_name+0x4e>
 800ab1a:	4631      	mov	r1, r6
 800ab1c:	4868      	ldr	r0, [pc, #416]	; (800acc0 <create_name+0x218>)
 800ab1e:	f7ff fa03 	bl	8009f28 <chk_chr>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d0e7      	beq.n	800aaf6 <create_name+0x4e>
 800ab26:	2006      	movs	r0, #6
 800ab28:	e06f      	b.n	800ac0a <create_name+0x162>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ab2a:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ab2e:	e7d6      	b.n	800aade <create_name+0x36>
	lfn[di] = 0;						/* LFN is created */
 800ab30:	2300      	movs	r3, #0
 800ab32:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ab36:	2c00      	cmp	r4, #0
 800ab38:	f000 80bf 	beq.w	800acba <create_name+0x212>
	mem_set(dp->fn, ' ', 11);
 800ab3c:	220b      	movs	r2, #11
 800ab3e:	2120      	movs	r1, #32
 800ab40:	f109 0040 	add.w	r0, r9, #64	; 0x40
 800ab44:	f7ff f9de 	bl	8009f04 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800ab4e:	2a2e      	cmp	r2, #46	; 0x2e
 800ab50:	bf18      	it	ne
 800ab52:	2a20      	cmpne	r2, #32
 800ab54:	d101      	bne.n	800ab5a <create_name+0xb2>
 800ab56:	3301      	adds	r3, #1
 800ab58:	e7f7      	b.n	800ab4a <create_name+0xa2>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ab5a:	b11b      	cbz	r3, 800ab64 <create_name+0xbc>
 800ab5c:	f048 0803 	orr.w	r8, r8, #3
 800ab60:	e000      	b.n	800ab64 <create_name+0xbc>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ab62:	3c01      	subs	r4, #1
 800ab64:	b16c      	cbz	r4, 800ab82 <create_name+0xda>
 800ab66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ab6a:	4422      	add	r2, r4
 800ab6c:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800ab70:	2a2e      	cmp	r2, #46	; 0x2e
 800ab72:	d1f6      	bne.n	800ab62 <create_name+0xba>
 800ab74:	f04f 0b08 	mov.w	fp, #8
 800ab78:	f04f 0a00 	mov.w	sl, #0
 800ab7c:	f8cd a004 	str.w	sl, [sp, #4]
 800ab80:	e008      	b.n	800ab94 <create_name+0xec>
 800ab82:	46a2      	mov	sl, r4
 800ab84:	f04f 0b08 	mov.w	fp, #8
 800ab88:	2200      	movs	r2, #0
 800ab8a:	9201      	str	r2, [sp, #4]
 800ab8c:	e002      	b.n	800ab94 <create_name+0xec>
			cf |= NS_LOSS | NS_LFN; continue;
 800ab8e:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 800ab92:	463b      	mov	r3, r7
 800ab94:	1c5f      	adds	r7, r3, #1
 800ab96:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800ab9a:	b1be      	cbz	r6, 800abcc <create_name+0x124>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ab9c:	2e20      	cmp	r6, #32
 800ab9e:	d0f6      	beq.n	800ab8e <create_name+0xe6>
 800aba0:	2e2e      	cmp	r6, #46	; 0x2e
 800aba2:	bf14      	ite	ne
 800aba4:	2300      	movne	r3, #0
 800aba6:	2301      	moveq	r3, #1
 800aba8:	42bc      	cmp	r4, r7
 800abaa:	bf08      	it	eq
 800abac:	2300      	moveq	r3, #0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1ed      	bne.n	800ab8e <create_name+0xe6>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800abb2:	42bc      	cmp	r4, r7
 800abb4:	bf18      	it	ne
 800abb6:	45da      	cmpne	sl, fp
 800abb8:	d337      	bcc.n	800ac2a <create_name+0x182>
			if (ni == 11) {				/* Long extension */
 800abba:	f1bb 0f0b 	cmp.w	fp, #11
 800abbe:	d027      	beq.n	800ac10 <create_name+0x168>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800abc0:	42bc      	cmp	r4, r7
 800abc2:	d001      	beq.n	800abc8 <create_name+0x120>
 800abc4:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 800abc8:	42bc      	cmp	r4, r7
 800abca:	d224      	bcs.n	800ac16 <create_name+0x16e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800abcc:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 800abd0:	2be5      	cmp	r3, #229	; 0xe5
 800abd2:	d061      	beq.n	800ac98 <create_name+0x1f0>
	if (ni == 8) b <<= 2;
 800abd4:	f1bb 0f08 	cmp.w	fp, #8
 800abd8:	d062      	beq.n	800aca0 <create_name+0x1f8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800abda:	9b01      	ldr	r3, [sp, #4]
 800abdc:	f003 020c 	and.w	r2, r3, #12
 800abe0:	2a0c      	cmp	r2, #12
 800abe2:	d003      	beq.n	800abec <create_name+0x144>
 800abe4:	f003 0303 	and.w	r3, r3, #3
 800abe8:	2b03      	cmp	r3, #3
 800abea:	d101      	bne.n	800abf0 <create_name+0x148>
 800abec:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800abf0:	f018 0f02 	tst.w	r8, #2
 800abf4:	d106      	bne.n	800ac04 <create_name+0x15c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800abf6:	9b01      	ldr	r3, [sp, #4]
 800abf8:	f003 0303 	and.w	r3, r3, #3
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d054      	beq.n	800acaa <create_name+0x202>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ac00:	2a04      	cmp	r2, #4
 800ac02:	d055      	beq.n	800acb0 <create_name+0x208>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ac04:	f889 804b 	strb.w	r8, [r9, #75]	; 0x4b
	return FR_OK;
 800ac08:	2000      	movs	r0, #0
}
 800ac0a:	b003      	add	sp, #12
 800ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 800ac10:	f048 0803 	orr.w	r8, r8, #3
 800ac14:	e7da      	b.n	800abcc <create_name+0x124>
			b <<= 2; continue;
 800ac16:	9b01      	ldr	r3, [sp, #4]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ac1e:	4623      	mov	r3, r4
 800ac20:	f04f 0b0b 	mov.w	fp, #11
 800ac24:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800ac28:	e7b4      	b.n	800ab94 <create_name+0xec>
		if (w >= 0x80) {				/* Non ASCII character */
 800ac2a:	2e7f      	cmp	r6, #127	; 0x7f
 800ac2c:	d80b      	bhi.n	800ac46 <create_name+0x19e>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ac2e:	b9be      	cbnz	r6, 800ac60 <create_name+0x1b8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ac30:	f048 0803 	orr.w	r8, r8, #3
 800ac34:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800ac36:	eb09 030a 	add.w	r3, r9, sl
 800ac3a:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800ac3e:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 800ac40:	f10a 0a01 	add.w	sl, sl, #1
 800ac44:	e7a6      	b.n	800ab94 <create_name+0xec>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ac46:	2100      	movs	r1, #0
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f000 fddb 	bl	800b804 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ac4e:	4606      	mov	r6, r0
 800ac50:	b118      	cbz	r0, 800ac5a <create_name+0x1b2>
 800ac52:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 800ac56:	4b1b      	ldr	r3, [pc, #108]	; (800acc4 <create_name+0x21c>)
 800ac58:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 800ac5a:	f048 0802 	orr.w	r8, r8, #2
 800ac5e:	e7e6      	b.n	800ac2e <create_name+0x186>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ac60:	4631      	mov	r1, r6
 800ac62:	4819      	ldr	r0, [pc, #100]	; (800acc8 <create_name+0x220>)
 800ac64:	f7ff f960 	bl	8009f28 <chk_chr>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d1e1      	bne.n	800ac30 <create_name+0x188>
				if (IsUpper(w)) {		/* ASCII large capital */
 800ac6c:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	2b19      	cmp	r3, #25
 800ac74:	d804      	bhi.n	800ac80 <create_name+0x1d8>
					b |= 2;
 800ac76:	9b01      	ldr	r3, [sp, #4]
 800ac78:	f043 0302 	orr.w	r3, r3, #2
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	e7da      	b.n	800ac36 <create_name+0x18e>
					if (IsLower(w)) {	/* ASCII small capital */
 800ac80:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	2b19      	cmp	r3, #25
 800ac88:	d8d5      	bhi.n	800ac36 <create_name+0x18e>
						b |= 1; w -= 0x20;
 800ac8a:	9b01      	ldr	r3, [sp, #4]
 800ac8c:	f043 0301 	orr.w	r3, r3, #1
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	3e20      	subs	r6, #32
 800ac94:	b2b6      	uxth	r6, r6
 800ac96:	e7ce      	b.n	800ac36 <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ac98:	2305      	movs	r3, #5
 800ac9a:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
 800ac9e:	e799      	b.n	800abd4 <create_name+0x12c>
	if (ni == 8) b <<= 2;
 800aca0:	9b01      	ldr	r3, [sp, #4]
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	e797      	b.n	800abda <create_name+0x132>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800acaa:	f048 0810 	orr.w	r8, r8, #16
 800acae:	e7a7      	b.n	800ac00 <create_name+0x158>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800acb0:	f048 0808 	orr.w	r8, r8, #8
 800acb4:	e7a6      	b.n	800ac04 <create_name+0x15c>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800acb6:	2006      	movs	r0, #6
 800acb8:	e7a7      	b.n	800ac0a <create_name+0x162>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800acba:	2006      	movs	r0, #6
 800acbc:	e7a5      	b.n	800ac0a <create_name+0x162>
 800acbe:	bf00      	nop
 800acc0:	08019d00 	.word	0x08019d00
 800acc4:	08019d14 	.word	0x08019d14
 800acc8:	08019d0c 	.word	0x08019d0c

0800accc <get_fileinfo>:
{
 800accc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800acd0:	6804      	ldr	r4, [r0, #0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800acd2:	2300      	movs	r3, #0
 800acd4:	850b      	strh	r3, [r1, #40]	; 0x28
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800acd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f000 8088 	beq.w	800adee <get_fileinfo+0x122>
 800acde:	4606      	mov	r6, r0
 800ace0:	460d      	mov	r5, r1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ace2:	7823      	ldrb	r3, [r4, #0]
 800ace4:	2b04      	cmp	r3, #4
 800ace6:	d013      	beq.n	800ad10 <get_fileinfo+0x44>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ace8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800acea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acee:	d018      	beq.n	800ad22 <get_fileinfo+0x56>
			i = j = 0;
 800acf0:	2200      	movs	r2, #0
 800acf2:	4613      	mov	r3, r2
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800acf4:	68e1      	ldr	r1, [r4, #12]
 800acf6:	1c50      	adds	r0, r2, #1
 800acf8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800acfc:	b16a      	cbz	r2, 800ad1a <get_fileinfo+0x4e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800acfe:	2bfe      	cmp	r3, #254	; 0xfe
 800ad00:	d80a      	bhi.n	800ad18 <get_fileinfo+0x4c>
				fno->fname[i++] = (TCHAR)w;
 800ad02:	f103 0114 	add.w	r1, r3, #20
 800ad06:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ad0a:	4602      	mov	r2, r0
				fno->fname[i++] = (TCHAR)w;
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	e7f1      	b.n	800acf4 <get_fileinfo+0x28>
		get_xdir_info(fs->dirbuf, fno);
 800ad10:	6920      	ldr	r0, [r4, #16]
 800ad12:	f7ff f9b4 	bl	800a07e <get_xdir_info>
		return;
 800ad16:	e06a      	b.n	800adee <get_fileinfo+0x122>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ad18:	2300      	movs	r3, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ad1a:	3314      	adds	r3, #20
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ad22:	f8b5 8028 	ldrh.w	r8, [r5, #40]	; 0x28
	i = j = 0;
 800ad26:	2400      	movs	r4, #0
 800ad28:	4623      	mov	r3, r4
	while (i < 11) {		/* Copy name body and extension */
 800ad2a:	e018      	b.n	800ad5e <get_fileinfo+0x92>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ad2c:	20e5      	movs	r0, #229	; 0xe5
 800ad2e:	e01f      	b.n	800ad70 <get_fileinfo+0xa4>
			if (!lfv) fno->fname[j] = '.';
 800ad30:	f1b8 0f00 	cmp.w	r8, #0
 800ad34:	d104      	bne.n	800ad40 <get_fileinfo+0x74>
 800ad36:	f104 0314 	add.w	r3, r4, #20
 800ad3a:	222e      	movs	r2, #46	; 0x2e
 800ad3c:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
			fno->altname[j++] = '.';
 800ad40:	1d23      	adds	r3, r4, #4
 800ad42:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ad46:	222e      	movs	r2, #46	; 0x2e
 800ad48:	80da      	strh	r2, [r3, #6]
 800ad4a:	3401      	adds	r4, #1
 800ad4c:	e012      	b.n	800ad74 <get_fileinfo+0xa8>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ad4e:	2310      	movs	r3, #16
 800ad50:	e027      	b.n	800ada2 <get_fileinfo+0xd6>
			fno->fname[j] = c;
 800ad52:	f104 0314 	add.w	r3, r4, #20
 800ad56:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
		j++;
 800ad5a:	3401      	adds	r4, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ad5c:	463b      	mov	r3, r7
	while (i < 11) {		/* Copy name body and extension */
 800ad5e:	2b0a      	cmp	r3, #10
 800ad60:	d824      	bhi.n	800adac <get_fileinfo+0xe0>
		c = (TCHAR)dp->dir[i++];
 800ad62:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800ad64:	1c5f      	adds	r7, r3, #1
 800ad66:	5cd0      	ldrb	r0, [r2, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ad68:	2820      	cmp	r0, #32
 800ad6a:	d0f7      	beq.n	800ad5c <get_fileinfo+0x90>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ad6c:	2805      	cmp	r0, #5
 800ad6e:	d0dd      	beq.n	800ad2c <get_fileinfo+0x60>
		if (i == 9) {						/* Insert a . if extension is exist */
 800ad70:	2f09      	cmp	r7, #9
 800ad72:	d0dd      	beq.n	800ad30 <get_fileinfo+0x64>
		c = ff_convert(c, 1);	/* OEM -> Unicode */
 800ad74:	2101      	movs	r1, #1
 800ad76:	f000 fd45 	bl	800b804 <ff_convert>
		if (!c) c = '?';
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	b900      	cbnz	r0, 800ad80 <get_fileinfo+0xb4>
 800ad7e:	223f      	movs	r2, #63	; 0x3f
		fno->altname[j] = c;
 800ad80:	1d23      	adds	r3, r4, #4
 800ad82:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ad86:	80da      	strh	r2, [r3, #6]
		if (!lfv) {
 800ad88:	f1b8 0f00 	cmp.w	r8, #0
 800ad8c:	d1e5      	bne.n	800ad5a <get_fileinfo+0x8e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ad8e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	2b19      	cmp	r3, #25
 800ad96:	d8dc      	bhi.n	800ad52 <get_fileinfo+0x86>
 800ad98:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800ad9a:	7b19      	ldrb	r1, [r3, #12]
 800ad9c:	2f08      	cmp	r7, #8
 800ad9e:	d8d6      	bhi.n	800ad4e <get_fileinfo+0x82>
 800ada0:	2308      	movs	r3, #8
 800ada2:	4219      	tst	r1, r3
 800ada4:	d0d5      	beq.n	800ad52 <get_fileinfo+0x86>
				c += 0x20;			/* To lower */
 800ada6:	3220      	adds	r2, #32
 800ada8:	b292      	uxth	r2, r2
 800adaa:	e7d2      	b.n	800ad52 <get_fileinfo+0x86>
	if (!lfv) {
 800adac:	f1b8 0f00 	cmp.w	r8, #0
 800adb0:	d108      	bne.n	800adc4 <get_fileinfo+0xf8>
		fno->fname[j] = 0;
 800adb2:	f104 0314 	add.w	r3, r4, #20
 800adb6:	2200      	movs	r2, #0
 800adb8:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800adbc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800adbe:	7b1b      	ldrb	r3, [r3, #12]
 800adc0:	b903      	cbnz	r3, 800adc4 <get_fileinfo+0xf8>
 800adc2:	4614      	mov	r4, r2
	fno->altname[j] = 0;	/* Terminate the SFN */
 800adc4:	3404      	adds	r4, #4
 800adc6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800adca:	2700      	movs	r7, #0
 800adcc:	80e7      	strh	r7, [r4, #6]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800adce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800add0:	7adb      	ldrb	r3, [r3, #11]
 800add2:	732b      	strb	r3, [r5, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800add4:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800add6:	301c      	adds	r0, #28
 800add8:	f7ff f85d 	bl	8009e96 <ld_dword>
 800addc:	6028      	str	r0, [r5, #0]
 800adde:	606f      	str	r7, [r5, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ade0:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800ade2:	3016      	adds	r0, #22
 800ade4:	f7ff f857 	bl	8009e96 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ade8:	8168      	strh	r0, [r5, #10]
 800adea:	0c00      	lsrs	r0, r0, #16
 800adec:	8128      	strh	r0, [r5, #8]
}
 800adee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800adf2 <xname_sum>:
{
 800adf2:	b538      	push	{r3, r4, r5, lr}
 800adf4:	4604      	mov	r4, r0
	WORD sum = 0;
 800adf6:	2500      	movs	r5, #0
	while ((chr = *name++) != 0) {
 800adf8:	e011      	b.n	800ae1e <xname_sum+0x2c>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800adfa:	f000 fd21 	bl	800b840 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800adfe:	086b      	lsrs	r3, r5, #1
 800ae00:	eb03 33c5 	add.w	r3, r3, r5, lsl #15
 800ae04:	b2c2      	uxtb	r2, r0
 800ae06:	fa12 f383 	uxtah	r3, r2, r3
 800ae0a:	b29a      	uxth	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ae0c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800ae10:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 800ae14:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800ae18:	fa10 f383 	uxtah	r3, r0, r3
 800ae1c:	b29d      	uxth	r5, r3
	while ((chr = *name++) != 0) {
 800ae1e:	f834 0b02 	ldrh.w	r0, [r4], #2
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d1e9      	bne.n	800adfa <xname_sum+0x8>
}
 800ae26:	4628      	mov	r0, r5
 800ae28:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ae2c <cmp_lfn>:
{
 800ae2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae30:	4681      	mov	r9, r0
 800ae32:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ae34:	f101 001a 	add.w	r0, r1, #26
 800ae38:	f7ff f828 	bl	8009e8c <ld_word>
 800ae3c:	bbc8      	cbnz	r0, 800aeb2 <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ae3e:	783e      	ldrb	r6, [r7, #0]
 800ae40:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800ae44:	3e01      	subs	r6, #1
 800ae46:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800ae4a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ae4e:	f04f 0801 	mov.w	r8, #1
 800ae52:	2500      	movs	r5, #0
 800ae54:	e006      	b.n	800ae64 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 800ae56:	2000      	movs	r0, #0
 800ae58:	e02c      	b.n	800aeb4 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ae5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae5e:	4298      	cmp	r0, r3
 800ae60:	d12a      	bne.n	800aeb8 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ae62:	3501      	adds	r5, #1
 800ae64:	2d0c      	cmp	r5, #12
 800ae66:	d818      	bhi.n	800ae9a <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ae68:	4b17      	ldr	r3, [pc, #92]	; (800aec8 <cmp_lfn+0x9c>)
 800ae6a:	5d58      	ldrb	r0, [r3, r5]
 800ae6c:	4438      	add	r0, r7
 800ae6e:	f7ff f80d 	bl	8009e8c <ld_word>
 800ae72:	4604      	mov	r4, r0
		if (wc) {
 800ae74:	f1b8 0f00 	cmp.w	r8, #0
 800ae78:	d0ef      	beq.n	800ae5a <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ae7a:	2efe      	cmp	r6, #254	; 0xfe
 800ae7c:	d8eb      	bhi.n	800ae56 <cmp_lfn+0x2a>
 800ae7e:	f000 fcdf 	bl	800b840 <ff_wtoupper>
 800ae82:	4680      	mov	r8, r0
 800ae84:	f106 0a01 	add.w	sl, r6, #1
 800ae88:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 800ae8c:	f000 fcd8 	bl	800b840 <ff_wtoupper>
 800ae90:	4580      	cmp	r8, r0
 800ae92:	d1e0      	bne.n	800ae56 <cmp_lfn+0x2a>
			wc = uc;
 800ae94:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ae96:	4656      	mov	r6, sl
 800ae98:	e7e3      	b.n	800ae62 <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ae9a:	783b      	ldrb	r3, [r7, #0]
 800ae9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aea0:	d00c      	beq.n	800aebc <cmp_lfn+0x90>
 800aea2:	f1b8 0f00 	cmp.w	r8, #0
 800aea6:	d00b      	beq.n	800aec0 <cmp_lfn+0x94>
 800aea8:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 800aeac:	b953      	cbnz	r3, 800aec4 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 800aeae:	2001      	movs	r0, #1
 800aeb0:	e000      	b.n	800aeb4 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800aeb2:	2000      	movs	r0, #0
}
 800aeb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e7fb      	b.n	800aeb4 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 800aebc:	2001      	movs	r0, #1
 800aebe:	e7f9      	b.n	800aeb4 <cmp_lfn+0x88>
 800aec0:	2001      	movs	r0, #1
 800aec2:	e7f7      	b.n	800aeb4 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800aec4:	2000      	movs	r0, #0
 800aec6:	e7f5      	b.n	800aeb4 <cmp_lfn+0x88>
 800aec8:	08019d94 	.word	0x08019d94

0800aecc <dir_find>:
{
 800aecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800aed2:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aed4:	2100      	movs	r1, #0
 800aed6:	f7ff fc48 	bl	800a76a <dir_sdi>
	if (res != FR_OK) return res;
 800aeda:	4606      	mov	r6, r0
 800aedc:	2800      	cmp	r0, #0
 800aede:	f040 80ab 	bne.w	800b038 <dir_find+0x16c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800aee2:	783b      	ldrb	r3, [r7, #0]
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	d006      	beq.n	800aef6 <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aee8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeec:	64e3      	str	r3, [r4, #76]	; 0x4c
 800aeee:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800aef2:	46c8      	mov	r8, r9
 800aef4:	e046      	b.n	800af84 <dir_find+0xb8>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff ff7b 	bl	800adf2 <xname_sum>
 800aefc:	4683      	mov	fp, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800aefe:	e020      	b.n	800af42 <dir_find+0x76>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800af00:	6938      	ldr	r0, [r7, #16]
 800af02:	4440      	add	r0, r8
 800af04:	f7fe ffc2 	bl	8009e8c <ld_word>
 800af08:	f000 fc9a 	bl	800b840 <ff_wtoupper>
 800af0c:	4681      	mov	r9, r0
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f833 001a 	ldrh.w	r0, [r3, sl, lsl #1]
 800af14:	f000 fc94 	bl	800b840 <ff_wtoupper>
 800af18:	4581      	cmp	r9, r0
 800af1a:	d10c      	bne.n	800af36 <dir_find+0x6a>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800af1c:	3d01      	subs	r5, #1
 800af1e:	b2ed      	uxtb	r5, r5
 800af20:	f108 0802 	add.w	r8, r8, #2
 800af24:	f10a 0a01 	add.w	sl, sl, #1
 800af28:	b12d      	cbz	r5, 800af36 <dir_find+0x6a>
				if ((di % SZDIRE) == 0) di += 2;
 800af2a:	f018 0f1f 	tst.w	r8, #31
 800af2e:	d1e7      	bne.n	800af00 <dir_find+0x34>
 800af30:	f108 0802 	add.w	r8, r8, #2
 800af34:	e7e4      	b.n	800af00 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800af36:	b925      	cbnz	r5, 800af42 <dir_find+0x76>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d07a      	beq.n	800b038 <dir_find+0x16c>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800af42:	2100      	movs	r1, #0
 800af44:	4620      	mov	r0, r4
 800af46:	f7ff fd3b 	bl	800a9c0 <dir_read>
 800af4a:	4606      	mov	r6, r0
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d173      	bne.n	800b038 <dir_find+0x16c>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800af50:	693d      	ldr	r5, [r7, #16]
 800af52:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800af56:	f7fe ff99 	bl	8009e8c <ld_word>
 800af5a:	4558      	cmp	r0, fp
 800af5c:	d1f1      	bne.n	800af42 <dir_find+0x76>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800af5e:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 800af62:	f04f 0a00 	mov.w	sl, #0
 800af66:	f04f 0840 	mov.w	r8, #64	; 0x40
 800af6a:	e7dd      	b.n	800af28 <dir_find+0x5c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af6c:	f04f 33ff 	mov.w	r3, #4294967295
 800af70:	64e3      	str	r3, [r4, #76]	; 0x4c
 800af72:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800af76:	2100      	movs	r1, #0
 800af78:	4620      	mov	r0, r4
 800af7a:	f7ff fc56 	bl	800a82a <dir_next>
	} while (res == FR_OK);
 800af7e:	4606      	mov	r6, r0
 800af80:	2800      	cmp	r0, #0
 800af82:	d159      	bne.n	800b038 <dir_find+0x16c>
		res = move_window(fs, dp->sect);
 800af84:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800af86:	4638      	mov	r0, r7
 800af88:	f7ff f900 	bl	800a18c <move_window>
		if (res != FR_OK) break;
 800af8c:	4606      	mov	r6, r0
 800af8e:	2800      	cmp	r0, #0
 800af90:	d152      	bne.n	800b038 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800af92:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800af94:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af96:	2b00      	cmp	r3, #0
 800af98:	d04d      	beq.n	800b036 <dir_find+0x16a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800af9a:	7ae9      	ldrb	r1, [r5, #11]
 800af9c:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800afa0:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800afa2:	2be5      	cmp	r3, #229	; 0xe5
 800afa4:	d0e2      	beq.n	800af6c <dir_find+0xa0>
 800afa6:	f011 0f08 	tst.w	r1, #8
 800afaa:	d001      	beq.n	800afb0 <dir_find+0xe4>
 800afac:	2a0f      	cmp	r2, #15
 800afae:	d1dd      	bne.n	800af6c <dir_find+0xa0>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800afb0:	2a0f      	cmp	r2, #15
 800afb2:	d019      	beq.n	800afe8 <dir_find+0x11c>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800afb4:	f1b8 0f00 	cmp.w	r8, #0
 800afb8:	d104      	bne.n	800afc4 <dir_find+0xf8>
 800afba:	4628      	mov	r0, r5
 800afbc:	f7ff f836 	bl	800a02c <sum_sfn>
 800afc0:	4548      	cmp	r0, r9
 800afc2:	d039      	beq.n	800b038 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800afc4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800afc8:	f013 0f01 	tst.w	r3, #1
 800afcc:	d106      	bne.n	800afdc <dir_find+0x110>
 800afce:	220b      	movs	r2, #11
 800afd0:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800afd4:	4628      	mov	r0, r5
 800afd6:	f7fe ff9a 	bl	8009f0e <mem_cmp>
 800afda:	b368      	cbz	r0, 800b038 <dir_find+0x16c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afdc:	f04f 33ff 	mov.w	r3, #4294967295
 800afe0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800afe2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800afe6:	e7c6      	b.n	800af76 <dir_find+0xaa>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800afe8:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800afec:	f012 0f40 	tst.w	r2, #64	; 0x40
 800aff0:	d1c1      	bne.n	800af76 <dir_find+0xaa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800aff2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aff6:	d006      	beq.n	800b006 <dir_find+0x13a>
						sum = dp->dir[LDIR_Chksum];
 800aff8:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800affc:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b000:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b002:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b004:	4698      	mov	r8, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b006:	4543      	cmp	r3, r8
 800b008:	d002      	beq.n	800b010 <dir_find+0x144>
 800b00a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800b00e:	e7b2      	b.n	800af76 <dir_find+0xaa>
 800b010:	7b6b      	ldrb	r3, [r5, #13]
 800b012:	454b      	cmp	r3, r9
 800b014:	d002      	beq.n	800b01c <dir_find+0x150>
 800b016:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800b01a:	e7ac      	b.n	800af76 <dir_find+0xaa>
 800b01c:	4629      	mov	r1, r5
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f7ff ff04 	bl	800ae2c <cmp_lfn>
 800b024:	b120      	cbz	r0, 800b030 <dir_find+0x164>
 800b026:	f108 38ff 	add.w	r8, r8, #4294967295
 800b02a:	fa5f f888 	uxtb.w	r8, r8
 800b02e:	e7a2      	b.n	800af76 <dir_find+0xaa>
 800b030:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800b034:	e79f      	b.n	800af76 <dir_find+0xaa>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b036:	2604      	movs	r6, #4
}
 800b038:	4630      	mov	r0, r6
 800b03a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b03e <follow_path>:
{
 800b03e:	b530      	push	{r4, r5, lr}
 800b040:	b083      	sub	sp, #12
 800b042:	4604      	mov	r4, r0
 800b044:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800b046:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b048:	e001      	b.n	800b04e <follow_path+0x10>
 800b04a:	3302      	adds	r3, #2
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	9b01      	ldr	r3, [sp, #4]
 800b050:	881a      	ldrh	r2, [r3, #0]
 800b052:	2a5c      	cmp	r2, #92	; 0x5c
 800b054:	bf18      	it	ne
 800b056:	2a2f      	cmpne	r2, #47	; 0x2f
 800b058:	d0f7      	beq.n	800b04a <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800b05a:	2200      	movs	r2, #0
 800b05c:	60a2      	str	r2, [r4, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800b05e:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	2b1f      	cmp	r3, #31
 800b064:	d82c      	bhi.n	800b0c0 <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
 800b066:	2380      	movs	r3, #128	; 0x80
 800b068:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800b06c:	4611      	mov	r1, r2
 800b06e:	4620      	mov	r0, r4
 800b070:	f7ff fb7b 	bl	800a76a <dir_sdi>
 800b074:	4603      	mov	r3, r0
}
 800b076:	4618      	mov	r0, r3
 800b078:	b003      	add	sp, #12
 800b07a:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b07c:	2804      	cmp	r0, #4
 800b07e:	d1fa      	bne.n	800b076 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b080:	f012 0f04 	tst.w	r2, #4
 800b084:	d1f7      	bne.n	800b076 <follow_path+0x38>
 800b086:	2305      	movs	r3, #5
 800b088:	e7f5      	b.n	800b076 <follow_path+0x38>
				obj->c_scl = obj->sclust;
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	6223      	str	r3, [r4, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b08e:	6923      	ldr	r3, [r4, #16]
 800b090:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b094:	79e2      	ldrb	r2, [r4, #7]
 800b096:	4313      	orrs	r3, r2
 800b098:	6263      	str	r3, [r4, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800b09a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b09c:	62a3      	str	r3, [r4, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800b09e:	6928      	ldr	r0, [r5, #16]
 800b0a0:	3034      	adds	r0, #52	; 0x34
 800b0a2:	f7fe fef8 	bl	8009e96 <ld_dword>
 800b0a6:	60a0      	str	r0, [r4, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b0a8:	692b      	ldr	r3, [r5, #16]
 800b0aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	71e3      	strb	r3, [r4, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b0b4:	6928      	ldr	r0, [r5, #16]
 800b0b6:	3038      	adds	r0, #56	; 0x38
 800b0b8:	f7fe fef8 	bl	8009eac <ld_qword>
 800b0bc:	e9c4 0104 	strd	r0, r1, [r4, #16]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b0c0:	a901      	add	r1, sp, #4
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f7ff fcf0 	bl	800aaa8 <create_name>
			if (res != FR_OK) break;
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d1d3      	bne.n	800b076 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f7ff fefc 	bl	800aecc <dir_find>
			ns = dp->fn[NSFLAG];
 800b0d4:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d1ce      	bne.n	800b07c <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b0de:	f012 0f04 	tst.w	r2, #4
 800b0e2:	d1c8      	bne.n	800b076 <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b0e4:	79a3      	ldrb	r3, [r4, #6]
 800b0e6:	f013 0f10 	tst.w	r3, #16
 800b0ea:	d00d      	beq.n	800b108 <follow_path+0xca>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800b0ec:	782b      	ldrb	r3, [r5, #0]
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	d0cb      	beq.n	800b08a <follow_path+0x4c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b0f2:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800b0f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b0f8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800b0fc:	4419      	add	r1, r3
 800b0fe:	4628      	mov	r0, r5
 800b100:	f7fe ff3e 	bl	8009f80 <ld_clust>
 800b104:	60a0      	str	r0, [r4, #8]
 800b106:	e7db      	b.n	800b0c0 <follow_path+0x82>
				res = FR_NO_PATH; break;
 800b108:	2305      	movs	r3, #5
 800b10a:	e7b4      	b.n	800b076 <follow_path+0x38>

0800b10c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b10c:	b510      	push	{r4, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	9001      	str	r0, [sp, #4]
 800b112:	9100      	str	r1, [sp, #0]
 800b114:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b116:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b118:	a803      	add	r0, sp, #12
 800b11a:	f7fe fff0 	bl	800a0fe <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800b11e:	2800      	cmp	r0, #0
 800b120:	db1d      	blt.n	800b15e <f_mount+0x52>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b122:	4b10      	ldr	r3, [pc, #64]	; (800b164 <f_mount+0x58>)
 800b124:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 800b128:	b10b      	cbz	r3, 800b12e <f_mount+0x22>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b12a:	2200      	movs	r2, #0
 800b12c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b12e:	9b01      	ldr	r3, [sp, #4]
 800b130:	b10b      	cbz	r3, 800b136 <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
 800b132:	2200      	movs	r2, #0
 800b134:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b136:	9b01      	ldr	r3, [sp, #4]
 800b138:	4a0a      	ldr	r2, [pc, #40]	; (800b164 <f_mount+0x58>)
 800b13a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b13e:	1e62      	subs	r2, r4, #1
 800b140:	bf18      	it	ne
 800b142:	2201      	movne	r2, #1
 800b144:	2b00      	cmp	r3, #0
 800b146:	bf08      	it	eq
 800b148:	f042 0201 	orreq.w	r2, r2, #1
 800b14c:	b112      	cbz	r2, 800b154 <f_mount+0x48>
 800b14e:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800b150:	b004      	add	sp, #16
 800b152:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b154:	a901      	add	r1, sp, #4
 800b156:	4668      	mov	r0, sp
 800b158:	f7ff f874 	bl	800a244 <find_volume>
	LEAVE_FF(fs, res);
 800b15c:	e7f8      	b.n	800b150 <f_mount+0x44>
	if (vol < 0) return FR_INVALID_DRIVE;
 800b15e:	200b      	movs	r0, #11
 800b160:	e7f6      	b.n	800b150 <f_mount+0x44>
 800b162:	bf00      	nop
 800b164:	200003c4 	.word	0x200003c4

0800b168 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16c:	b098      	sub	sp, #96	; 0x60
 800b16e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b170:	2800      	cmp	r0, #0
 800b172:	d066      	beq.n	800b242 <f_open+0xda>
 800b174:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b176:	f002 0401 	and.w	r4, r2, #1
	res = find_volume(&path, &fs, mode);
 800b17a:	4622      	mov	r2, r4
 800b17c:	a903      	add	r1, sp, #12
 800b17e:	a801      	add	r0, sp, #4
 800b180:	f7ff f860 	bl	800a244 <find_volume>
	if (res == FR_OK) {
 800b184:	4605      	mov	r5, r0
 800b186:	b130      	cbz	r0, 800b196 <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b188:	b10d      	cbz	r5, 800b18e <f_open+0x26>
 800b18a:	2300      	movs	r3, #0
 800b18c:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800b18e:	4628      	mov	r0, r5
 800b190:	b018      	add	sp, #96	; 0x60
 800b192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dj.obj.fs = fs;
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b19a:	9901      	ldr	r1, [sp, #4]
 800b19c:	a804      	add	r0, sp, #16
 800b19e:	f7ff ff4e 	bl	800b03e <follow_path>
		if (res == FR_OK) {
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	b940      	cbnz	r0, 800b1b8 <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b1a6:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	db45      	blt.n	800b23a <f_open+0xd2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b1ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800b1b2:	f013 0f10 	tst.w	r3, #16
 800b1b6:	d142      	bne.n	800b23e <f_open+0xd6>
		if (res == FR_OK) {
 800b1b8:	2d00      	cmp	r5, #0
 800b1ba:	d1e5      	bne.n	800b188 <f_open+0x20>
			if (fs->fs_type == FS_EXFAT) {
 800b1bc:	9f03      	ldr	r7, [sp, #12]
 800b1be:	783b      	ldrb	r3, [r7, #0]
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d01d      	beq.n	800b200 <f_open+0x98>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b1c4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800b1c8:	4641      	mov	r1, r8
 800b1ca:	4638      	mov	r0, r7
 800b1cc:	f7fe fed8 	bl	8009f80 <ld_clust>
 800b1d0:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b1d2:	f108 001c 	add.w	r0, r8, #28
 800b1d6:	f7fe fe5e 	bl	8009e96 <ld_dword>
 800b1da:	6130      	str	r0, [r6, #16]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	6173      	str	r3, [r6, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	64b3      	str	r3, [r6, #72]	; 0x48
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b1e4:	6037      	str	r7, [r6, #0]
			fp->obj.id = fs->id;
 800b1e6:	9a03      	ldr	r2, [sp, #12]
 800b1e8:	88d2      	ldrh	r2, [r2, #6]
 800b1ea:	80b2      	strh	r2, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800b1ec:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800b1f0:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800b1f4:	6473      	str	r3, [r6, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e9c6 230e 	strd	r2, r3, [r6, #56]	; 0x38
 800b1fe:	e7c3      	b.n	800b188 <f_open+0x20>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800b200:	9b06      	ldr	r3, [sp, #24]
 800b202:	6233      	str	r3, [r6, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800b204:	9b08      	ldr	r3, [sp, #32]
 800b206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b20a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800b20e:	4313      	orrs	r3, r2
 800b210:	6273      	str	r3, [r6, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800b212:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b214:	62b3      	str	r3, [r6, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b216:	6938      	ldr	r0, [r7, #16]
 800b218:	3034      	adds	r0, #52	; 0x34
 800b21a:	f7fe fe3c 	bl	8009e96 <ld_dword>
 800b21e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b220:	6938      	ldr	r0, [r7, #16]
 800b222:	3038      	adds	r0, #56	; 0x38
 800b224:	f7fe fe42 	bl	8009eac <ld_qword>
 800b228:	e9c6 0104 	strd	r0, r1, [r6, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	71f3      	strb	r3, [r6, #7]
 800b238:	e7d2      	b.n	800b1e0 <f_open+0x78>
				res = FR_INVALID_NAME;
 800b23a:	2506      	movs	r5, #6
 800b23c:	e7a4      	b.n	800b188 <f_open+0x20>
					res = FR_NO_FILE;
 800b23e:	2504      	movs	r5, #4
 800b240:	e7a2      	b.n	800b188 <f_open+0x20>
	if (!fp) return FR_INVALID_OBJECT;
 800b242:	2509      	movs	r5, #9
 800b244:	e7a3      	b.n	800b18e <f_open+0x26>

0800b246 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24a:	b085      	sub	sp, #20
 800b24c:	4604      	mov	r4, r0
 800b24e:	460e      	mov	r6, r1
 800b250:	4615      	mov	r5, r2
 800b252:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800b254:	2300      	movs	r3, #0
 800b256:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b25a:	a903      	add	r1, sp, #12
 800b25c:	f7fe ff73 	bl	800a146 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b260:	9001      	str	r0, [sp, #4]
 800b262:	2800      	cmp	r0, #0
 800b264:	f040 809e 	bne.w	800b3a4 <f_read+0x15e>
 800b268:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800b26c:	9301      	str	r3, [sp, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f040 8098 	bne.w	800b3a4 <f_read+0x15e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b274:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800b278:	f013 0f01 	tst.w	r3, #1
 800b27c:	f000 80a7 	beq.w	800b3ce <f_read+0x188>
	remain = fp->obj.objsize - fp->fptr;
 800b280:	6923      	ldr	r3, [r4, #16]
 800b282:	6962      	ldr	r2, [r4, #20]
 800b284:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b286:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b288:	1a1b      	subs	r3, r3, r0
 800b28a:	eb62 0201 	sbc.w	r2, r2, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b28e:	42ab      	cmp	r3, r5
 800b290:	f172 0200 	sbcs.w	r2, r2, #0
 800b294:	d246      	bcs.n	800b324 <f_read+0xde>
 800b296:	461d      	mov	r5, r3
 800b298:	e044      	b.n	800b324 <f_read+0xde>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b29a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b29c:	b119      	cbz	r1, 800b2a6 <f_read+0x60>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f7fe fe56 	bl	8009f50 <clmt_clust>
 800b2a4:	e052      	b.n	800b34c <f_read+0x106>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b2a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f7ff f9ad 	bl	800a608 <get_fat>
 800b2ae:	e04d      	b.n	800b34c <f_read+0x106>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b2b0:	f04f 0a02 	mov.w	sl, #2
 800b2b4:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800b2b8:	f8cd a004 	str.w	sl, [sp, #4]
 800b2bc:	e072      	b.n	800b3a4 <f_read+0x15e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b2be:	f04f 0a01 	mov.w	sl, #1
 800b2c2:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800b2c6:	f8cd a004 	str.w	sl, [sp, #4]
 800b2ca:	e06b      	b.n	800b3a4 <f_read+0x15e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b2cc:	f04f 0a02 	mov.w	sl, #2
 800b2d0:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800b2d4:	f8cd a004 	str.w	sl, [sp, #4]
 800b2d8:	e064      	b.n	800b3a4 <f_read+0x15e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b2da:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800b2de:	e013      	b.n	800b308 <f_read+0xc2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b2e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b2e2:	454b      	cmp	r3, r9
 800b2e4:	d162      	bne.n	800b3ac <f_read+0x166>
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
 800b2e6:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b2ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b2ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f0:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b2f4:	42bd      	cmp	r5, r7
 800b2f6:	d200      	bcs.n	800b2fa <f_read+0xb4>
 800b2f8:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b2fa:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800b2fe:	463a      	mov	r2, r7
 800b300:	4419      	add	r1, r3
 800b302:	4630      	mov	r0, r6
 800b304:	f7fe fdf4 	bl	8009ef0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b308:	443e      	add	r6, r7
 800b30a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b30c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b30e:	19db      	adds	r3, r3, r7
 800b310:	f142 0200 	adc.w	r2, r2, #0
 800b314:	63a3      	str	r3, [r4, #56]	; 0x38
 800b316:	63e2      	str	r2, [r4, #60]	; 0x3c
 800b318:	f8d8 3000 	ldr.w	r3, [r8]
 800b31c:	443b      	add	r3, r7
 800b31e:	f8c8 3000 	str.w	r3, [r8]
 800b322:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 800b324:	2d00      	cmp	r5, #0
 800b326:	d03d      	beq.n	800b3a4 <f_read+0x15e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b328:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b32a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b32c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b330:	2900      	cmp	r1, #0
 800b332:	d1da      	bne.n	800b2ea <f_read+0xa4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b334:	0a57      	lsrs	r7, r2, #9
 800b336:	ea47 57c3 	orr.w	r7, r7, r3, lsl #23
 800b33a:	9903      	ldr	r1, [sp, #12]
 800b33c:	8949      	ldrh	r1, [r1, #10]
 800b33e:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800b340:	400f      	ands	r7, r1
 800b342:	d109      	bne.n	800b358 <f_read+0x112>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b344:	ea52 0103 	orrs.w	r1, r2, r3
 800b348:	d1a7      	bne.n	800b29a <f_read+0x54>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b34a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b34c:	2801      	cmp	r0, #1
 800b34e:	d9af      	bls.n	800b2b0 <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b350:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b354:	d0b3      	beq.n	800b2be <f_read+0x78>
				fp->clust = clst;				/* Update current cluster */
 800b356:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b358:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b35c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b35e:	4658      	mov	r0, fp
 800b360:	f7fe fdea 	bl	8009f38 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b364:	4681      	mov	r9, r0
 800b366:	2800      	cmp	r0, #0
 800b368:	d0b0      	beq.n	800b2cc <f_read+0x86>
			sect += csect;
 800b36a:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b36c:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b370:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800b374:	d3b4      	bcc.n	800b2e0 <f_read+0x9a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b376:	eb07 030a 	add.w	r3, r7, sl
 800b37a:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800b37e:	4293      	cmp	r3, r2
 800b380:	d901      	bls.n	800b386 <f_read+0x140>
					cc = fs->csize - csect;
 800b382:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b386:	4653      	mov	r3, sl
 800b388:	464a      	mov	r2, r9
 800b38a:	4631      	mov	r1, r6
 800b38c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800b390:	f7fe fd70 	bl	8009e74 <disk_read>
 800b394:	2800      	cmp	r0, #0
 800b396:	d0a0      	beq.n	800b2da <f_read+0x94>
 800b398:	f04f 0a01 	mov.w	sl, #1
 800b39c:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800b3a0:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800b3a4:	9801      	ldr	r0, [sp, #4]
 800b3a6:	b005      	add	sp, #20
 800b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	464a      	mov	r2, r9
 800b3b0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800b3b4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800b3b8:	f7fe fd5c 	bl	8009e74 <disk_read>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d092      	beq.n	800b2e6 <f_read+0xa0>
 800b3c0:	f04f 0a01 	mov.w	sl, #1
 800b3c4:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 800b3c8:	f8cd a004 	str.w	sl, [sp, #4]
 800b3cc:	e7ea      	b.n	800b3a4 <f_read+0x15e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b3ce:	2307      	movs	r3, #7
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	e7e7      	b.n	800b3a4 <f_read+0x15e>

0800b3d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	4604      	mov	r4, r0
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b3da:	a901      	add	r1, sp, #4
 800b3dc:	f7fe feb3 	bl	800a146 <validate>
		if (res == FR_OK) {
 800b3e0:	b900      	cbnz	r0, 800b3e4 <f_close+0x10>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b3e2:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800b3e4:	b002      	add	sp, #8
 800b3e6:	bd10      	pop	{r4, pc}

0800b3e8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4692      	mov	sl, r2
 800b3f2:	4699      	mov	r9, r3
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b3f4:	a903      	add	r1, sp, #12
 800b3f6:	f7fe fea6 	bl	800a146 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	b908      	cbnz	r0, 800b402 <f_lseek+0x1a>
 800b3fe:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b402:	b9b5      	cbnz	r5, 800b432 <f_lseek+0x4a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b404:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b406:	2b00      	cmp	r3, #0
 800b408:	f000 8089 	beq.w	800b51e <f_lseek+0x136>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b40c:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b410:	bf08      	it	eq
 800b412:	f1ba 3fff 	cmpeq.w	sl, #4294967295
 800b416:	d010      	beq.n	800b43a <f_lseek+0x52>
				*tbl = 0;		/* Terminate table */
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b418:	6926      	ldr	r6, [r4, #16]
 800b41a:	6967      	ldr	r7, [r4, #20]
 800b41c:	4556      	cmp	r6, sl
 800b41e:	eb77 0309 	sbcs.w	r3, r7, r9
 800b422:	d301      	bcc.n	800b428 <f_lseek+0x40>
 800b424:	4656      	mov	r6, sl
 800b426:	464f      	mov	r7, r9
			fp->fptr = ofs;				/* Set file pointer */
 800b428:	63a6      	str	r6, [r4, #56]	; 0x38
 800b42a:	63e7      	str	r7, [r4, #60]	; 0x3c
			if (ofs) {
 800b42c:	ea56 0307 	orrs.w	r3, r6, r7
 800b430:	d141      	bne.n	800b4b6 <f_lseek+0xce>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800b432:	4628      	mov	r0, r5
 800b434:	b005      	add	sp, #20
 800b436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b43a:	4698      	mov	r8, r3
 800b43c:	f858 bb04 	ldr.w	fp, [r8], #4
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b440:	f8d4 a008 	ldr.w	sl, [r4, #8]
			if (cl) {
 800b444:	f1ba 0f00 	cmp.w	sl, #0
 800b448:	d029      	beq.n	800b49e <f_lseek+0xb6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b44a:	f04f 0902 	mov.w	r9, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b44e:	f109 0902 	add.w	r9, r9, #2
 800b452:	4651      	mov	r1, sl
 800b454:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 800b456:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 800b458:	460e      	mov	r6, r1
 800b45a:	4620      	mov	r0, r4
 800b45c:	f7ff f8d4 	bl	800a608 <get_fat>
 800b460:	4601      	mov	r1, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b462:	2801      	cmp	r0, #1
 800b464:	d913      	bls.n	800b48e <f_lseek+0xa6>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b466:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b46a:	d014      	beq.n	800b496 <f_lseek+0xae>
					} while (cl == pcl + 1);
 800b46c:	3601      	adds	r6, #1
 800b46e:	4286      	cmp	r6, r0
 800b470:	d0f1      	beq.n	800b456 <f_lseek+0x6e>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b472:	45cb      	cmp	fp, r9
 800b474:	d305      	bcc.n	800b482 <f_lseek+0x9a>
						*tbl++ = ncl; *tbl++ = tcl;
 800b476:	4643      	mov	r3, r8
 800b478:	f843 7b08 	str.w	r7, [r3], #8
 800b47c:	f8c8 a004 	str.w	sl, [r8, #4]
 800b480:	4698      	mov	r8, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b482:	9b03      	ldr	r3, [sp, #12]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	428b      	cmp	r3, r1
 800b488:	d90b      	bls.n	800b4a2 <f_lseek+0xba>
						cl = get_fat(&fp->obj, cl);
 800b48a:	468a      	mov	sl, r1
 800b48c:	e7df      	b.n	800b44e <f_lseek+0x66>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b48e:	2502      	movs	r5, #2
 800b490:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800b494:	e7cd      	b.n	800b432 <f_lseek+0x4a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b496:	2501      	movs	r5, #1
 800b498:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800b49c:	e7c9      	b.n	800b432 <f_lseek+0x4a>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b49e:	f04f 0902 	mov.w	r9, #2
			*fp->cltbl = ulen;	/* Number of items used */
 800b4a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b4a4:	f8c3 9000 	str.w	r9, [r3]
			if (ulen <= tlen) {
 800b4a8:	45d9      	cmp	r9, fp
 800b4aa:	f200 80ef 	bhi.w	800b68c <f_lseek+0x2a4>
				*tbl = 0;		/* Terminate table */
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f8c8 3000 	str.w	r3, [r8]
 800b4b4:	e7bd      	b.n	800b432 <f_lseek+0x4a>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b4b6:	f116 38ff 	adds.w	r8, r6, #4294967295
 800b4ba:	f147 37ff 	adc.w	r7, r7, #4294967295
 800b4be:	4642      	mov	r2, r8
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f7fe fd44 	bl	8009f50 <clmt_clust>
 800b4c8:	4601      	mov	r1, r0
 800b4ca:	6420      	str	r0, [r4, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800b4cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b4d0:	4648      	mov	r0, r9
 800b4d2:	f7fe fd31 	bl	8009f38 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b4d6:	b1d0      	cbz	r0, 800b50e <f_lseek+0x126>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b4d8:	ea4f 2258 	mov.w	r2, r8, lsr #9
 800b4dc:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
 800b4e0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	401a      	ands	r2, r3
 800b4e8:	1817      	adds	r7, r2, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b4ea:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800b4ee:	2e00      	cmp	r6, #0
 800b4f0:	d09f      	beq.n	800b432 <f_lseek+0x4a>
 800b4f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b4f4:	42bb      	cmp	r3, r7
 800b4f6:	d09c      	beq.n	800b432 <f_lseek+0x4a>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	463a      	mov	r2, r7
 800b4fc:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800b500:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b504:	f7fe fcb6 	bl	8009e74 <disk_read>
 800b508:	b928      	cbnz	r0, 800b516 <f_lseek+0x12e>
					fp->sect = dsc;
 800b50a:	6467      	str	r7, [r4, #68]	; 0x44
 800b50c:	e791      	b.n	800b432 <f_lseek+0x4a>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b50e:	2502      	movs	r5, #2
 800b510:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800b514:	e78d      	b.n	800b432 <f_lseek+0x4a>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b516:	2501      	movs	r5, #1
 800b518:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800b51c:	e789      	b.n	800b432 <f_lseek+0x4a>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	781a      	ldrb	r2, [r3, #0]
 800b522:	2a04      	cmp	r2, #4
 800b524:	d00b      	beq.n	800b53e <f_lseek+0x156>
 800b526:	f04f 32ff 	mov.w	r2, #4294967295
 800b52a:	4552      	cmp	r2, sl
 800b52c:	f04f 0200 	mov.w	r2, #0
 800b530:	eb72 0209 	sbcs.w	r2, r2, r9
 800b534:	d203      	bcs.n	800b53e <f_lseek+0x156>
 800b536:	f04f 3aff 	mov.w	sl, #4294967295
 800b53a:	f04f 0900 	mov.w	r9, #0
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b53e:	6926      	ldr	r6, [r4, #16]
 800b540:	6967      	ldr	r7, [r4, #20]
 800b542:	4556      	cmp	r6, sl
 800b544:	eb77 0209 	sbcs.w	r2, r7, r9
 800b548:	d301      	bcc.n	800b54e <f_lseek+0x166>
 800b54a:	4656      	mov	r6, sl
 800b54c:	464f      	mov	r7, r9
		ifptr = fp->fptr;
 800b54e:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 800b552:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		fp->fptr = nsect = 0;
 800b556:	2000      	movs	r0, #0
 800b558:	2100      	movs	r1, #0
 800b55a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs) {
 800b55e:	ea56 0207 	orrs.w	r2, r6, r7
 800b562:	d074      	beq.n	800b64e <f_lseek+0x266>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b564:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 800b568:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800b56c:	ea59 030a 	orrs.w	r3, r9, sl
 800b570:	d026      	beq.n	800b5c0 <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b572:	1e70      	subs	r0, r6, #1
 800b574:	f04f 0b00 	mov.w	fp, #0
 800b578:	4642      	mov	r2, r8
 800b57a:	465b      	mov	r3, fp
 800b57c:	f147 31ff 	adc.w	r1, r7, #4294967295
 800b580:	f7f5 fc7a 	bl	8000e78 <__aeabi_uldivmod>
 800b584:	9000      	str	r0, [sp, #0]
 800b586:	9101      	str	r1, [sp, #4]
 800b588:	f119 39ff 	adds.w	r9, r9, #4294967295
 800b58c:	f14a 3aff 	adc.w	sl, sl, #4294967295
 800b590:	4642      	mov	r2, r8
 800b592:	465b      	mov	r3, fp
 800b594:	4648      	mov	r0, r9
 800b596:	4651      	mov	r1, sl
 800b598:	f7f5 fc6e 	bl	8000e78 <__aeabi_uldivmod>
			if (ifptr > 0 &&
 800b59c:	9b00      	ldr	r3, [sp, #0]
 800b59e:	4283      	cmp	r3, r0
 800b5a0:	9b01      	ldr	r3, [sp, #4]
 800b5a2:	418b      	sbcs	r3, r1
 800b5a4:	d30c      	bcc.n	800b5c0 <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b5a6:	f1c8 0300 	rsb	r3, r8, #0
 800b5aa:	ea09 0303 	and.w	r3, r9, r3
 800b5ae:	63a3      	str	r3, [r4, #56]	; 0x38
 800b5b0:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
				ofs -= fp->fptr;
 800b5b4:	1af6      	subs	r6, r6, r3
 800b5b6:	eb67 070a 	sbc.w	r7, r7, sl
				clst = fp->clust;
 800b5ba:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
 800b5be:	e003      	b.n	800b5c8 <f_lseek+0x1e0>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b5c0:	f8d4 9008 	ldr.w	r9, [r4, #8]
				fp->clust = clst;
 800b5c4:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
			if (clst != 0) {
 800b5c8:	f1b9 0f00 	cmp.w	r9, #0
 800b5cc:	d041      	beq.n	800b652 <f_lseek+0x26a>
 800b5ce:	4649      	mov	r1, r9
				while (ofs > bcs) {						/* Cluster following loop */
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	45b0      	cmp	r8, r6
 800b5d4:	f04f 0300 	mov.w	r3, #0
 800b5d8:	41bb      	sbcs	r3, r7
 800b5da:	d220      	bcs.n	800b61e <f_lseek+0x236>
					ofs -= bcs; fp->fptr += bcs;
 800b5dc:	1a36      	subs	r6, r6, r0
 800b5de:	f167 0700 	sbc.w	r7, r7, #0
 800b5e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b5e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b5e6:	181b      	adds	r3, r3, r0
 800b5e8:	f142 0200 	adc.w	r2, r2, #0
 800b5ec:	63a3      	str	r3, [r4, #56]	; 0x38
 800b5ee:	63e2      	str	r2, [r4, #60]	; 0x3c
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f7ff f809 	bl	800a608 <get_fat>
 800b5f6:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b5f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5fc:	d007      	beq.n	800b60e <f_lseek+0x226>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b5fe:	2801      	cmp	r0, #1
 800b600:	d909      	bls.n	800b616 <f_lseek+0x22e>
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	4283      	cmp	r3, r0
 800b608:	d905      	bls.n	800b616 <f_lseek+0x22e>
					fp->clust = clst;
 800b60a:	6420      	str	r0, [r4, #64]	; 0x40
 800b60c:	e7e0      	b.n	800b5d0 <f_lseek+0x1e8>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b60e:	2501      	movs	r5, #1
 800b610:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800b614:	e70d      	b.n	800b432 <f_lseek+0x4a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b616:	2502      	movs	r5, #2
 800b618:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800b61c:	e709      	b.n	800b432 <f_lseek+0x4a>
				fp->fptr += ofs;
 800b61e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b620:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b622:	199b      	adds	r3, r3, r6
 800b624:	eb47 0202 	adc.w	r2, r7, r2
 800b628:	63a3      	str	r3, [r4, #56]	; 0x38
 800b62a:	63e2      	str	r2, [r4, #60]	; 0x3c
				if (ofs % SS(fs)) {
 800b62c:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800b630:	b32b      	cbz	r3, 800b67e <f_lseek+0x296>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b632:	9803      	ldr	r0, [sp, #12]
 800b634:	f7fe fc80 	bl	8009f38 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b638:	4681      	mov	r9, r0
 800b63a:	b120      	cbz	r0, 800b646 <f_lseek+0x25e>
					nsect += (DWORD)(ofs / SS(fs));
 800b63c:	0a76      	lsrs	r6, r6, #9
 800b63e:	ea46 56c7 	orr.w	r6, r6, r7, lsl #23
 800b642:	44b1      	add	r9, r6
 800b644:	e005      	b.n	800b652 <f_lseek+0x26a>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b646:	2502      	movs	r5, #2
 800b648:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800b64c:	e6f1      	b.n	800b432 <f_lseek+0x4a>
		fp->fptr = nsect = 0;
 800b64e:	f04f 0900 	mov.w	r9, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f43f aeea 	beq.w	800b432 <f_lseek+0x4a>
 800b65e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b660:	454b      	cmp	r3, r9
 800b662:	f43f aee6 	beq.w	800b432 <f_lseek+0x4a>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b666:	2301      	movs	r3, #1
 800b668:	464a      	mov	r2, r9
 800b66a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800b66e:	9803      	ldr	r0, [sp, #12]
 800b670:	7840      	ldrb	r0, [r0, #1]
 800b672:	f7fe fbff 	bl	8009e74 <disk_read>
 800b676:	b928      	cbnz	r0, 800b684 <f_lseek+0x29c>
			fp->sect = nsect;
 800b678:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
 800b67c:	e6d9      	b.n	800b432 <f_lseek+0x4a>
		fp->fptr = nsect = 0;
 800b67e:	f04f 0900 	mov.w	r9, #0
 800b682:	e7e6      	b.n	800b652 <f_lseek+0x26a>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b684:	2501      	movs	r5, #1
 800b686:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 800b68a:	e6d2      	b.n	800b432 <f_lseek+0x4a>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b68c:	2511      	movs	r5, #17
 800b68e:	e6d0      	b.n	800b432 <f_lseek+0x4a>

0800b690 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b690:	b530      	push	{r4, r5, lr}
 800b692:	b085      	sub	sp, #20
 800b694:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b696:	2800      	cmp	r0, #0
 800b698:	d050      	beq.n	800b73c <f_opendir+0xac>
 800b69a:	4604      	mov	r4, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800b69c:	2200      	movs	r2, #0
 800b69e:	a903      	add	r1, sp, #12
 800b6a0:	a801      	add	r0, sp, #4
 800b6a2:	f7fe fdcf 	bl	800a244 <find_volume>
	if (res == FR_OK) {
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	b128      	cbz	r0, 800b6b6 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b6aa:	b10b      	cbz	r3, 800b6b0 <f_opendir+0x20>
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	6022      	str	r2, [r4, #0]

	LEAVE_FF(fs, res);
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	b005      	add	sp, #20
 800b6b4:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b6ba:	9901      	ldr	r1, [sp, #4]
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f7ff fcbe 	bl	800b03e <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	b9c0      	cbnz	r0, 800b6f8 <f_opendir+0x68>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b6c6:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	db0c      	blt.n	800b6e8 <f_opendir+0x58>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b6ce:	79a3      	ldrb	r3, [r4, #6]
 800b6d0:	f013 0f10 	tst.w	r3, #16
 800b6d4:	d030      	beq.n	800b738 <f_opendir+0xa8>
					if (fs->fs_type == FS_EXFAT) {
 800b6d6:	9d03      	ldr	r5, [sp, #12]
 800b6d8:	782b      	ldrb	r3, [r5, #0]
 800b6da:	2b04      	cmp	r3, #4
 800b6dc:	d010      	beq.n	800b700 <f_opendir+0x70>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b6de:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f7fe fc4d 	bl	8009f80 <ld_clust>
 800b6e6:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 800b6e8:	9b03      	ldr	r3, [sp, #12]
 800b6ea:	88db      	ldrh	r3, [r3, #6]
 800b6ec:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f7ff f83a 	bl	800a76a <dir_sdi>
 800b6f6:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b6f8:	2b04      	cmp	r3, #4
 800b6fa:	d1d6      	bne.n	800b6aa <f_opendir+0x1a>
 800b6fc:	2305      	movs	r3, #5
 800b6fe:	e7d5      	b.n	800b6ac <f_opendir+0x1c>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800b700:	68a3      	ldr	r3, [r4, #8]
 800b702:	6223      	str	r3, [r4, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b70a:	79e2      	ldrb	r2, [r4, #7]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	6263      	str	r3, [r4, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800b710:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b712:	62a3      	str	r3, [r4, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b714:	6928      	ldr	r0, [r5, #16]
 800b716:	3034      	adds	r0, #52	; 0x34
 800b718:	f7fe fbbd 	bl	8009e96 <ld_dword>
 800b71c:	60a0      	str	r0, [r4, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b71e:	6928      	ldr	r0, [r5, #16]
 800b720:	3038      	adds	r0, #56	; 0x38
 800b722:	f7fe fbc3 	bl	8009eac <ld_qword>
 800b726:	e9c4 0104 	strd	r0, r1, [r4, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b72a:	692b      	ldr	r3, [r5, #16]
 800b72c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b730:	f003 0302 	and.w	r3, r3, #2
 800b734:	71e3      	strb	r3, [r4, #7]
 800b736:	e7d7      	b.n	800b6e8 <f_opendir+0x58>
					res = FR_NO_PATH;
 800b738:	2305      	movs	r3, #5
 800b73a:	e7dd      	b.n	800b6f8 <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 800b73c:	2309      	movs	r3, #9
 800b73e:	e7b7      	b.n	800b6b0 <f_opendir+0x20>

0800b740 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b740:	b510      	push	{r4, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b746:	a901      	add	r1, sp, #4
 800b748:	f7fe fcfd 	bl	800a146 <validate>
	if (res == FR_OK) {
 800b74c:	b900      	cbnz	r0, 800b750 <f_closedir+0x10>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b74e:	6020      	str	r0, [r4, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 800b750:	b002      	add	sp, #8
 800b752:	bd10      	pop	{r4, pc}

0800b754 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	4604      	mov	r4, r0
 800b75a:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b75c:	a901      	add	r1, sp, #4
 800b75e:	f7fe fcf2 	bl	800a146 <validate>
	if (res == FR_OK) {
 800b762:	4606      	mov	r6, r0
 800b764:	b9c0      	cbnz	r0, 800b798 <f_readdir+0x44>
		if (!fno) {
 800b766:	b195      	cbz	r5, 800b78e <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b768:	2100      	movs	r1, #0
 800b76a:	4620      	mov	r0, r4
 800b76c:	f7ff f928 	bl	800a9c0 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b770:	2804      	cmp	r0, #4
 800b772:	d000      	beq.n	800b776 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 800b774:	b998      	cbnz	r0, 800b79e <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b776:	4629      	mov	r1, r5
 800b778:	4620      	mov	r0, r4
 800b77a:	f7ff faa7 	bl	800accc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b77e:	2100      	movs	r1, #0
 800b780:	4620      	mov	r0, r4
 800b782:	f7ff f852 	bl	800a82a <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b786:	2804      	cmp	r0, #4
 800b788:	d006      	beq.n	800b798 <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b78a:	4606      	mov	r6, r0
 800b78c:	e004      	b.n	800b798 <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b78e:	2100      	movs	r1, #0
 800b790:	4620      	mov	r0, r4
 800b792:	f7fe ffea 	bl	800a76a <dir_sdi>
 800b796:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800b798:	4630      	mov	r0, r6
 800b79a:	b002      	add	sp, #8
 800b79c:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800b79e:	4606      	mov	r6, r0
 800b7a0:	e7fa      	b.n	800b798 <f_readdir+0x44>
	...

0800b7a4 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800b7a4:	4b13      	ldr	r3, [pc, #76]	; (800b7f4 <FATFS_LinkDriverEx+0x50>)
 800b7a6:	7a5b      	ldrb	r3, [r3, #9]
 800b7a8:	bb13      	cbnz	r3, 800b7f0 <FATFS_LinkDriverEx+0x4c>
{
 800b7aa:	b510      	push	{r4, lr}
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800b7b2:	4b10      	ldr	r3, [pc, #64]	; (800b7f4 <FATFS_LinkDriverEx+0x50>)
 800b7b4:	f893 c009 	ldrb.w	ip, [r3, #9]
 800b7b8:	fa5f fc8c 	uxtb.w	ip, ip
 800b7bc:	f04f 0e00 	mov.w	lr, #0
 800b7c0:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800b7c4:	f893 c009 	ldrb.w	ip, [r3, #9]
 800b7c8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800b7cc:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800b7d0:	7a5c      	ldrb	r4, [r3, #9]
 800b7d2:	441c      	add	r4, r3
 800b7d4:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800b7d6:	7a5a      	ldrb	r2, [r3, #9]
 800b7d8:	1c54      	adds	r4, r2, #1
 800b7da:	b2e4      	uxtb	r4, r4
 800b7dc:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800b7de:	3230      	adds	r2, #48	; 0x30
 800b7e0:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800b7e2:	233a      	movs	r3, #58	; 0x3a
 800b7e4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800b7e6:	232f      	movs	r3, #47	; 0x2f
 800b7e8:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800b7ea:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800b7ee:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800b7f0:	2001      	movs	r0, #1
}
 800b7f2:	4770      	bx	lr
 800b7f4:	200005cc 	.word	0x200005cc

0800b7f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b7f8:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f7ff ffd2 	bl	800b7a4 <FATFS_LinkDriverEx>
}
 800b800:	bd08      	pop	{r3, pc}
	...

0800b804 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b804:	287f      	cmp	r0, #127	; 0x7f
 800b806:	d917      	bls.n	800b838 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b808:	b131      	cbz	r1, 800b818 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b80a:	28ff      	cmp	r0, #255	; 0xff
 800b80c:	d813      	bhi.n	800b836 <ff_convert+0x32>
 800b80e:	3880      	subs	r0, #128	; 0x80
 800b810:	4b0a      	ldr	r3, [pc, #40]	; (800b83c <ff_convert+0x38>)
 800b812:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800b816:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b818:	2300      	movs	r3, #0
 800b81a:	2b7f      	cmp	r3, #127	; 0x7f
 800b81c:	d807      	bhi.n	800b82e <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800b81e:	4a07      	ldr	r2, [pc, #28]	; (800b83c <ff_convert+0x38>)
 800b820:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800b824:	4282      	cmp	r2, r0
 800b826:	d002      	beq.n	800b82e <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800b828:	3301      	adds	r3, #1
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	e7f5      	b.n	800b81a <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800b82e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800b832:	b2c0      	uxtb	r0, r0
 800b834:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b836:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	08019da4 	.word	0x08019da4

0800b840 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b840:	b510      	push	{r4, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b842:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800b846:	d201      	bcs.n	800b84c <ff_wtoupper+0xc>
 800b848:	4b22      	ldr	r3, [pc, #136]	; (800b8d4 <ff_wtoupper+0x94>)
 800b84a:	e002      	b.n	800b852 <ff_wtoupper+0x12>
 800b84c:	4b22      	ldr	r3, [pc, #136]	; (800b8d8 <ff_wtoupper+0x98>)
 800b84e:	e000      	b.n	800b852 <ff_wtoupper+0x12>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b850:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 800b852:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 800b854:	4288      	cmp	r0, r1
 800b856:	bf2c      	ite	cs
 800b858:	2200      	movcs	r2, #0
 800b85a:	2201      	movcc	r2, #1
 800b85c:	2900      	cmp	r1, #0
 800b85e:	bf08      	it	eq
 800b860:	f042 0201 	orreq.w	r2, r2, #1
 800b864:	b9ca      	cbnz	r2, 800b89a <ff_wtoupper+0x5a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b866:	f103 0e04 	add.w	lr, r3, #4
 800b86a:	885b      	ldrh	r3, [r3, #2]
 800b86c:	0a1a      	lsrs	r2, r3, #8
 800b86e:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800b870:	eb03 0c01 	add.w	ip, r3, r1
 800b874:	4560      	cmp	r0, ip
 800b876:	db04      	blt.n	800b882 <ff_wtoupper+0x42>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800b878:	2a00      	cmp	r2, #0
 800b87a:	d1e9      	bne.n	800b850 <ff_wtoupper+0x10>
 800b87c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b880:	e7e7      	b.n	800b852 <ff_wtoupper+0x12>
			switch (cmd) {
 800b882:	2a08      	cmp	r2, #8
 800b884:	d809      	bhi.n	800b89a <ff_wtoupper+0x5a>
 800b886:	e8df f002 	tbb	[pc, r2]
 800b88a:	0905      	.short	0x0905
 800b88c:	1815120f 	.word	0x1815120f
 800b890:	1e1b      	.short	0x1e1b
 800b892:	21          	.byte	0x21
 800b893:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b894:	1a41      	subs	r1, r0, r1
 800b896:	f83e 0011 	ldrh.w	r0, [lr, r1, lsl #1]
	}

	return chr;
}
 800b89a:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b89c:	1a43      	subs	r3, r0, r1
 800b89e:	f003 0301 	and.w	r3, r3, #1
 800b8a2:	1ac0      	subs	r0, r0, r3
 800b8a4:	b280      	uxth	r0, r0
 800b8a6:	e7f8      	b.n	800b89a <ff_wtoupper+0x5a>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b8a8:	3810      	subs	r0, #16
 800b8aa:	b280      	uxth	r0, r0
 800b8ac:	e7f5      	b.n	800b89a <ff_wtoupper+0x5a>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b8ae:	3820      	subs	r0, #32
 800b8b0:	b280      	uxth	r0, r0
 800b8b2:	e7f2      	b.n	800b89a <ff_wtoupper+0x5a>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b8b4:	3830      	subs	r0, #48	; 0x30
 800b8b6:	b280      	uxth	r0, r0
 800b8b8:	e7ef      	b.n	800b89a <ff_wtoupper+0x5a>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b8ba:	381a      	subs	r0, #26
 800b8bc:	b280      	uxth	r0, r0
 800b8be:	e7ec      	b.n	800b89a <ff_wtoupper+0x5a>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b8c0:	3008      	adds	r0, #8
 800b8c2:	b280      	uxth	r0, r0
 800b8c4:	e7e9      	b.n	800b89a <ff_wtoupper+0x5a>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b8c6:	3850      	subs	r0, #80	; 0x50
 800b8c8:	b280      	uxth	r0, r0
 800b8ca:	e7e6      	b.n	800b89a <ff_wtoupper+0x5a>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b8cc:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800b8d0:	b280      	uxth	r0, r0
 800b8d2:	e7e2      	b.n	800b89a <ff_wtoupper+0x5a>
 800b8d4:	08019ea4 	.word	0x08019ea4
 800b8d8:	0801a098 	.word	0x0801a098

0800b8dc <MP3ClearBadFrame>:
 **************************************************************************************/
static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, short *outbuf)
{
	int i;

	if (!mp3DecInfo)
 800b8dc:	4684      	mov	ip, r0
 800b8de:	b188      	cbz	r0, 800b904 <MP3ClearBadFrame+0x28>
		return;

	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	e003      	b.n	800b8ec <MP3ClearBadFrame+0x10>
		outbuf[i] = 0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	f8dc 37c4 	ldr.w	r3, [ip, #1988]	; 0x7c4
 800b8f0:	f8dc 07c8 	ldr.w	r0, [ip, #1992]	; 0x7c8
 800b8f4:	fb00 f303 	mul.w	r3, r0, r3
 800b8f8:	f8dc 07bc 	ldr.w	r0, [ip, #1980]	; 0x7bc
 800b8fc:	fb00 f303 	mul.w	r3, r0, r3
 800b900:	4293      	cmp	r3, r2
 800b902:	dcef      	bgt.n	800b8e4 <MP3ClearBadFrame+0x8>
}
 800b904:	4770      	bx	lr

0800b906 <MP3InitDecoder>:
{
 800b906:	b508      	push	{r3, lr}
	mp3DecInfo = AllocateBuffers();
 800b908:	f000 fce3 	bl	800c2d2 <xmp3fixpt_AllocateBuffers>
}
 800b90c:	bd08      	pop	{r3, pc}

0800b90e <MP3FindSyncWord>:
{
 800b90e:	4602      	mov	r2, r0
	for (i = 0; i < nBytes - 1; i++) {
 800b910:	2000      	movs	r0, #0
 800b912:	e000      	b.n	800b916 <MP3FindSyncWord+0x8>
 800b914:	3001      	adds	r0, #1
 800b916:	1e4b      	subs	r3, r1, #1
 800b918:	4283      	cmp	r3, r0
 800b91a:	dd09      	ble.n	800b930 <MP3FindSyncWord+0x22>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 800b91c:	5c13      	ldrb	r3, [r2, r0]
 800b91e:	2bff      	cmp	r3, #255	; 0xff
 800b920:	d1f8      	bne.n	800b914 <MP3FindSyncWord+0x6>
 800b922:	1813      	adds	r3, r2, r0
 800b924:	785b      	ldrb	r3, [r3, #1]
 800b926:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b92a:	2be0      	cmp	r3, #224	; 0xe0
 800b92c:	d1f2      	bne.n	800b914 <MP3FindSyncWord+0x6>
 800b92e:	e001      	b.n	800b934 <MP3FindSyncWord+0x26>
	return -1;
 800b930:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b934:	4770      	bx	lr

0800b936 <MP3FindFreeSync>:
{
 800b936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b938:	4607      	mov	r7, r0
 800b93a:	460e      	mov	r6, r1
 800b93c:	4615      	mov	r5, r2
	unsigned char *bufPtr = buf;
 800b93e:	4604      	mov	r4, r0
 800b940:	e002      	b.n	800b948 <MP3FindFreeSync+0x12>
		bufPtr += 3;
 800b942:	1cdc      	adds	r4, r3, #3
		nBytes -= (offset + 3);
 800b944:	3003      	adds	r0, #3
 800b946:	1a2d      	subs	r5, r5, r0
		offset = MP3FindSyncWord(bufPtr, nBytes);
 800b948:	4629      	mov	r1, r5
 800b94a:	4620      	mov	r0, r4
 800b94c:	f7ff ffdf 	bl	800b90e <MP3FindSyncWord>
		bufPtr += offset;
 800b950:	1823      	adds	r3, r4, r0
		if (offset < 0) {
 800b952:	2800      	cmp	r0, #0
 800b954:	db13      	blt.n	800b97e <MP3FindFreeSync+0x48>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 800b956:	5c21      	ldrb	r1, [r4, r0]
 800b958:	7832      	ldrb	r2, [r6, #0]
 800b95a:	4291      	cmp	r1, r2
 800b95c:	d1f1      	bne.n	800b942 <MP3FindFreeSync+0xc>
 800b95e:	7859      	ldrb	r1, [r3, #1]
 800b960:	7872      	ldrb	r2, [r6, #1]
 800b962:	4291      	cmp	r1, r2
 800b964:	d1ed      	bne.n	800b942 <MP3FindFreeSync+0xc>
 800b966:	789a      	ldrb	r2, [r3, #2]
 800b968:	78b1      	ldrb	r1, [r6, #2]
 800b96a:	404a      	eors	r2, r1
 800b96c:	f012 0ffc 	tst.w	r2, #252	; 0xfc
 800b970:	d1e7      	bne.n	800b942 <MP3FindFreeSync+0xc>
			if ((firstFH[2] >> 1) & 0x01)
 800b972:	f011 0f02 	tst.w	r1, #2
 800b976:	d000      	beq.n	800b97a <MP3FindFreeSync+0x44>
				bufPtr--;
 800b978:	3b01      	subs	r3, #1
			return bufPtr - buf;
 800b97a:	1bd8      	subs	r0, r3, r7
 800b97c:	e001      	b.n	800b982 <MP3FindFreeSync+0x4c>
			return -1;
 800b97e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b984 <MP3GetLastFrameInfo>:
	if (!mp3DecInfo || mp3DecInfo->layer != 3) {
 800b984:	b120      	cbz	r0, 800b990 <MP3GetLastFrameInfo+0xc>
 800b986:	4603      	mov	r3, r0
 800b988:	f8d0 27d0 	ldr.w	r2, [r0, #2000]	; 0x7d0
 800b98c:	2a03      	cmp	r2, #3
 800b98e:	d008      	beq.n	800b9a2 <MP3GetLastFrameInfo+0x1e>
		mp3FrameInfo->bitrate = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	600b      	str	r3, [r1, #0]
		mp3FrameInfo->nChans = 0;
 800b994:	604b      	str	r3, [r1, #4]
		mp3FrameInfo->samprate = 0;
 800b996:	608b      	str	r3, [r1, #8]
		mp3FrameInfo->bitsPerSample = 0;
 800b998:	60cb      	str	r3, [r1, #12]
		mp3FrameInfo->outputSamps = 0;
 800b99a:	610b      	str	r3, [r1, #16]
		mp3FrameInfo->layer = 0;
 800b99c:	614b      	str	r3, [r1, #20]
		mp3FrameInfo->version = 0;
 800b99e:	618b      	str	r3, [r1, #24]
 800b9a0:	4770      	bx	lr
{
 800b9a2:	b410      	push	{r4}
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 800b9a4:	f8d0 27b8 	ldr.w	r2, [r0, #1976]	; 0x7b8
 800b9a8:	600a      	str	r2, [r1, #0]
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 800b9aa:	f8d0 27bc 	ldr.w	r2, [r0, #1980]	; 0x7bc
 800b9ae:	604a      	str	r2, [r1, #4]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 800b9b0:	f8d0 27c0 	ldr.w	r2, [r0, #1984]	; 0x7c0
 800b9b4:	608a      	str	r2, [r1, #8]
		mp3FrameInfo->bitsPerSample = 16;
 800b9b6:	2210      	movs	r2, #16
 800b9b8:	60ca      	str	r2, [r1, #12]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800b9ba:	f8d0 07bc 	ldr.w	r0, [r0, #1980]	; 0x7bc
 800b9be:	f893 27d4 	ldrb.w	r2, [r3, #2004]	; 0x7d4
 800b9c2:	f8d3 47d0 	ldr.w	r4, [r3, #2000]	; 0x7d0
 800b9c6:	f104 3cff 	add.w	ip, r4, #4294967295
 800b9ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b9ce:	4462      	add	r2, ip
 800b9d0:	4c07      	ldr	r4, [pc, #28]	; (800b9f0 <MP3GetLastFrameInfo+0x6c>)
 800b9d2:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
 800b9d6:	fb02 f000 	mul.w	r0, r2, r0
 800b9da:	6108      	str	r0, [r1, #16]
		mp3FrameInfo->layer = mp3DecInfo->layer;
 800b9dc:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	; 0x7d0
 800b9e0:	614a      	str	r2, [r1, #20]
		mp3FrameInfo->version = mp3DecInfo->version;
 800b9e2:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 800b9e6:	618b      	str	r3, [r1, #24]
}
 800b9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	0801a288 	.word	0x0801a288

0800b9f4 <MP3Decode>:
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
//mw	ULONG32 ulTime;
//mw	StartYield(&ulTime); 
	if (!mp3DecInfo)
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	f000 815d 	beq.w	800bcb4 <MP3Decode+0x2c0>
{
 800b9fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	460c      	mov	r4, r1
 800ba02:	4615      	mov	r5, r2
 800ba04:	469b      	mov	fp, r3
 800ba06:	4606      	mov	r6, r0
		return ERR_MP3_NULL_POINTER;

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 800ba08:	6809      	ldr	r1, [r1, #0]
 800ba0a:	f000 f9cf 	bl	800bdac <xmp3fixpt_UnpackFrameHeader>
	if (fhBytes < 0)	
 800ba0e:	1e07      	subs	r7, r0, #0
 800ba10:	f2c0 8153 	blt.w	800bcba <MP3Decode+0x2c6>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
	*inbuf += fhBytes;
 800ba14:	6821      	ldr	r1, [r4, #0]
 800ba16:	4439      	add	r1, r7
 800ba18:	6021      	str	r1, [r4, #0]
	
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f000 fac2 	bl	800bfa4 <xmp3fixpt_UnpackSideInfo>
	if (siBytes < 0) {
 800ba20:	f1b0 0800 	subs.w	r8, r0, #0
 800ba24:	f2c0 8098 	blt.w	800bb58 <MP3Decode+0x164>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
		return ERR_MP3_INVALID_SIDEINFO;
	}
	*inbuf += siBytes;
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	4443      	add	r3, r8
 800ba2c:	6023      	str	r3, [r4, #0]
	*bytesLeft -= (fhBytes + siBytes);
 800ba2e:	eb07 0208 	add.w	r2, r7, r8
 800ba32:	682b      	ldr	r3, [r5, #0]
 800ba34:	1a9b      	subs	r3, r3, r2
 800ba36:	602b      	str	r3, [r5, #0]
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 800ba38:	f8d6 37b8 	ldr.w	r3, [r6, #1976]	; 0x7b8
 800ba3c:	b113      	cbz	r3, 800ba44 <MP3Decode+0x50>
 800ba3e:	f8d6 37b0 	ldr.w	r3, [r6, #1968]	; 0x7b0
 800ba42:	b353      	cbz	r3, 800ba9a <MP3Decode+0xa6>
		if (!mp3DecInfo->freeBitrateFlag) {
 800ba44:	f8d6 37b0 	ldr.w	r3, [r6, #1968]	; 0x7b0
 800ba48:	b9fb      	cbnz	r3, 800ba8a <MP3Decode+0x96>
			/* first time through, need to scan for next sync word and figure out frame size */
			mp3DecInfo->freeBitrateFlag = 1;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	f8c6 37b0 	str.w	r3, [r6, #1968]	; 0x7b0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800ba50:	6820      	ldr	r0, [r4, #0]
 800ba52:	4279      	negs	r1, r7
 800ba54:	eba1 0108 	sub.w	r1, r1, r8
 800ba58:	682a      	ldr	r2, [r5, #0]
 800ba5a:	4401      	add	r1, r0
 800ba5c:	f7ff ff6b 	bl	800b936 <MP3FindFreeSync>
 800ba60:	f8c6 07b4 	str.w	r0, [r6, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 800ba64:	2800      	cmp	r0, #0
 800ba66:	db7e      	blt.n	800bb66 <MP3Decode+0x172>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_FREE_BITRATE_SYNC;
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 800ba68:	4438      	add	r0, r7
 800ba6a:	4480      	add	r8, r0
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 800ba6c:	f8d6 37c0 	ldr.w	r3, [r6, #1984]	; 0x7c0
 800ba70:	fb08 f303 	mul.w	r3, r8, r3
 800ba74:	00db      	lsls	r3, r3, #3
 800ba76:	f8d6 27c4 	ldr.w	r2, [r6, #1988]	; 0x7c4
 800ba7a:	f8d6 17c8 	ldr.w	r1, [r6, #1992]	; 0x7c8
 800ba7e:	fb01 f202 	mul.w	r2, r1, r2
 800ba82:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba86:	f8c6 37b8 	str.w	r3, [r6, #1976]	; 0x7b8
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 800ba8a:	f8d6 77b4 	ldr.w	r7, [r6, #1972]	; 0x7b4
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f000 f97e 	bl	800bd90 <xmp3fixpt_CheckPadBit>
 800ba94:	4407      	add	r7, r0
 800ba96:	f8c6 77cc 	str.w	r7, [r6, #1996]	; 0x7cc
	 *  - calling function assembles "self-contained" MP3 frames by shifting any main_data 
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
 800ba9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d070      	beq.n	800bb82 <MP3Decode+0x18e>
		mp3DecInfo->nSlots = *bytesLeft;
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	f8c6 37cc 	str.w	r3, [r6, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 800baa6:	f8d6 27d8 	ldr.w	r2, [r6, #2008]	; 0x7d8
 800baaa:	2a00      	cmp	r2, #0
 800baac:	d162      	bne.n	800bb74 <MP3Decode+0x180>
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd60      	ble.n	800bb74 <MP3Decode+0x180>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_FRAMEHEADER;
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 800bab2:	f8c6 37dc 	str.w	r3, [r6, #2012]	; 0x7dc
		mainPtr = *inbuf;
 800bab6:	6827      	ldr	r7, [r4, #0]
		*inbuf += mp3DecInfo->nSlots;
 800bab8:	443b      	add	r3, r7
 800baba:	6023      	str	r3, [r4, #0]
		*bytesLeft -= (mp3DecInfo->nSlots);
 800babc:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	1a9b      	subs	r3, r3, r2
 800bac4:	602b      	str	r3, [r5, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_MAINDATA_UNDERFLOW;
		}
	}
	bitOffset = 0;
 800bac6:	2300      	movs	r3, #0
 800bac8:	9303      	str	r3, [sp, #12]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 800baca:	f8d6 27dc 	ldr.w	r2, [r6, #2012]	; 0x7dc
 800bace:	ea4f 09c2 	mov.w	r9, r2, lsl #3

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800bad2:	469a      	mov	sl, r3
 800bad4:	f8d6 37c4 	ldr.w	r3, [r6, #1988]	; 0x7c4
 800bad8:	4553      	cmp	r3, sl
 800bada:	f340 80e9 	ble.w	800bcb0 <MP3Decode+0x2bc>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800bade:	f04f 0800 	mov.w	r8, #0
 800bae2:	f8d6 37bc 	ldr.w	r3, [r6, #1980]	; 0x7bc
 800bae6:	4543      	cmp	r3, r8
 800bae8:	f340 80a9 	ble.w	800bc3e <MP3Decode+0x24a>
			/* unpack scale factors and compute size of scale factor block */
			prevBitOffset = bitOffset;
 800baec:	9c03      	ldr	r4, [sp, #12]
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 800baee:	f8cd 8004 	str.w	r8, [sp, #4]
 800baf2:	f8cd a000 	str.w	sl, [sp]
 800baf6:	464b      	mov	r3, r9
 800baf8:	aa03      	add	r2, sp, #12
 800bafa:	4639      	mov	r1, r7
 800bafc:	4630      	mov	r0, r6
 800bafe:	f004 fb93 	bl	8010228 <xmp3fixpt_UnpackScaleFactors>

			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 800bb02:	ebc4 04c0 	rsb	r4, r4, r0, lsl #3
 800bb06:	9d03      	ldr	r5, [sp, #12]
 800bb08:	442c      	add	r4, r5
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 800bb0a:	eb08 034a 	add.w	r3, r8, sl, lsl #1
 800bb0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bb12:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800bb16:	1b13      	subs	r3, r2, r4
			mainPtr += offset;
 800bb18:	4407      	add	r7, r0
			mainBits -= sfBlockBits;
 800bb1a:	eba9 0404 	sub.w	r4, r9, r4

			if (offset < 0 || mainBits < huffBlockBits) {
 800bb1e:	454a      	cmp	r2, r9
 800bb20:	bfd4      	ite	le
 800bb22:	2200      	movle	r2, #0
 800bb24:	2201      	movgt	r2, #1
 800bb26:	ea52 72d0 	orrs.w	r2, r2, r0, lsr #31
 800bb2a:	d178      	bne.n	800bc1e <MP3Decode+0x22a>
				return ERR_MP3_INVALID_SCALEFACT;
			}

			/* decode Huffman code words */
			prevBitOffset = bitOffset;
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800bb2c:	f8cd 8004 	str.w	r8, [sp, #4]
 800bb30:	f8cd a000 	str.w	sl, [sp]
 800bb34:	aa03      	add	r2, sp, #12
 800bb36:	4639      	mov	r1, r7
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f001 fd43 	bl	800d5c4 <xmp3fixpt_DecodeHuffman>
			if (offset < 0) {
 800bb3e:	f1b0 0900 	subs.w	r9, r0, #0
 800bb42:	db75      	blt.n	800bc30 <MP3Decode+0x23c>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_INVALID_HUFFCODES;
			}

			mainPtr += offset;
 800bb44:	444f      	add	r7, r9
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800bb46:	ebc5 09c9 	rsb	r9, r5, r9, lsl #3
 800bb4a:	9d03      	ldr	r5, [sp, #12]
 800bb4c:	44a9      	add	r9, r5
 800bb4e:	eba4 0909 	sub.w	r9, r4, r9
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800bb52:	f108 0801 	add.w	r8, r8, #1
 800bb56:	e7c4      	b.n	800bae2 <MP3Decode+0xee>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bb58:	4659      	mov	r1, fp
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7ff febe 	bl	800b8dc <MP3ClearBadFrame>
		return ERR_MP3_INVALID_SIDEINFO;
 800bb60:	f06f 0006 	mvn.w	r0, #6
 800bb64:	e061      	b.n	800bc2a <MP3Decode+0x236>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bb66:	4659      	mov	r1, fp
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7ff feb7 	bl	800b8dc <MP3ClearBadFrame>
				return ERR_MP3_FREE_BITRATE_SYNC;
 800bb6e:	f06f 0002 	mvn.w	r0, #2
 800bb72:	e05a      	b.n	800bc2a <MP3Decode+0x236>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bb74:	4659      	mov	r1, fp
 800bb76:	4630      	mov	r0, r6
 800bb78:	f7ff feb0 	bl	800b8dc <MP3ClearBadFrame>
			return ERR_MP3_INVALID_FRAMEHEADER;
 800bb7c:	f06f 0005 	mvn.w	r0, #5
 800bb80:	e053      	b.n	800bc2a <MP3Decode+0x236>
		if (mp3DecInfo->nSlots > *bytesLeft) {
 800bb82:	f8d6 17cc 	ldr.w	r1, [r6, #1996]	; 0x7cc
 800bb86:	682b      	ldr	r3, [r5, #0]
 800bb88:	4299      	cmp	r1, r3
 800bb8a:	dc24      	bgt.n	800bbd6 <MP3Decode+0x1e2>
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 800bb8c:	f8d6 37dc 	ldr.w	r3, [r6, #2012]	; 0x7dc
 800bb90:	f8d6 27d8 	ldr.w	r2, [r6, #2008]	; 0x7d8
 800bb94:	4293      	cmp	r3, r2
 800bb96:	db25      	blt.n	800bbe4 <MP3Decode+0x1f0>
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 800bb98:	f106 071c 	add.w	r7, r6, #28
 800bb9c:	1a99      	subs	r1, r3, r2
 800bb9e:	4439      	add	r1, r7
 800bba0:	4638      	mov	r0, r7
 800bba2:	f00d f9fd 	bl	8018fa0 <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 800bba6:	f8d6 07d8 	ldr.w	r0, [r6, #2008]	; 0x7d8
 800bbaa:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800bbae:	6821      	ldr	r1, [r4, #0]
 800bbb0:	4438      	add	r0, r7
 800bbb2:	f00d f9e7 	bl	8018f84 <memcpy>
			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 800bbb6:	f8d6 27d8 	ldr.w	r2, [r6, #2008]	; 0x7d8
 800bbba:	f8d6 17cc 	ldr.w	r1, [r6, #1996]	; 0x7cc
 800bbbe:	440a      	add	r2, r1
 800bbc0:	f8c6 27dc 	str.w	r2, [r6, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	440b      	add	r3, r1
 800bbc8:	6023      	str	r3, [r4, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 800bbca:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800bbce:	682b      	ldr	r3, [r5, #0]
 800bbd0:	1a9b      	subs	r3, r3, r2
 800bbd2:	602b      	str	r3, [r5, #0]
			mainPtr = mp3DecInfo->mainBuf;
 800bbd4:	e777      	b.n	800bac6 <MP3Decode+0xd2>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bbd6:	4659      	mov	r1, fp
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f7ff fe7f 	bl	800b8dc <MP3ClearBadFrame>
			return ERR_MP3_INDATA_UNDERFLOW;	
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	e022      	b.n	800bc2a <MP3Decode+0x236>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 800bbe4:	f106 001c 	add.w	r0, r6, #28
 800bbe8:	460a      	mov	r2, r1
 800bbea:	6821      	ldr	r1, [r4, #0]
 800bbec:	4418      	add	r0, r3
 800bbee:	f00d f9c9 	bl	8018f84 <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 800bbf2:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800bbf6:	f8d6 37dc 	ldr.w	r3, [r6, #2012]	; 0x7dc
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f8c6 37dc 	str.w	r3, [r6, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 800bc00:	6823      	ldr	r3, [r4, #0]
 800bc02:	4413      	add	r3, r2
 800bc04:	6023      	str	r3, [r4, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 800bc06:	f8d6 27cc 	ldr.w	r2, [r6, #1996]	; 0x7cc
 800bc0a:	682b      	ldr	r3, [r5, #0]
 800bc0c:	1a9b      	subs	r3, r3, r2
 800bc0e:	602b      	str	r3, [r5, #0]
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bc10:	4659      	mov	r1, fp
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7ff fe62 	bl	800b8dc <MP3ClearBadFrame>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 800bc18:	f06f 0001 	mvn.w	r0, #1
 800bc1c:	e005      	b.n	800bc2a <MP3Decode+0x236>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bc1e:	4659      	mov	r1, fp
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7ff fe5b 	bl	800b8dc <MP3ClearBadFrame>
				return ERR_MP3_INVALID_SCALEFACT;
 800bc26:	f06f 0007 	mvn.w	r0, #7
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_SUBBAND;			
		}
	}
	return ERR_MP3_NONE;
}
 800bc2a:	b005      	add	sp, #20
 800bc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bc30:	4659      	mov	r1, fp
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7ff fe52 	bl	800b8dc <MP3ClearBadFrame>
				return ERR_MP3_INVALID_HUFFCODES;
 800bc38:	f06f 0008 	mvn.w	r0, #8
 800bc3c:	e7f5      	b.n	800bc2a <MP3Decode+0x236>
		if (Dequantize(mp3DecInfo, gr) < 0) {
 800bc3e:	4651      	mov	r1, sl
 800bc40:	4630      	mov	r0, r6
 800bc42:	f000 fefd 	bl	800ca40 <xmp3fixpt_Dequantize>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	db0d      	blt.n	800bc66 <MP3Decode+0x272>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800bc4a:	2400      	movs	r4, #0
 800bc4c:	f8d6 17bc 	ldr.w	r1, [r6, #1980]	; 0x7bc
 800bc50:	42a1      	cmp	r1, r4
 800bc52:	dd16      	ble.n	800bc82 <MP3Decode+0x28e>
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 800bc54:	4622      	mov	r2, r4
 800bc56:	4651      	mov	r1, sl
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f002 fcd7 	bl	800e60c <xmp3fixpt_IMDCT>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	db08      	blt.n	800bc74 <MP3Decode+0x280>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800bc62:	3401      	adds	r4, #1
 800bc64:	e7f2      	b.n	800bc4c <MP3Decode+0x258>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bc66:	4659      	mov	r1, fp
 800bc68:	4630      	mov	r0, r6
 800bc6a:	f7ff fe37 	bl	800b8dc <MP3ClearBadFrame>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 800bc6e:	f06f 0009 	mvn.w	r0, #9
 800bc72:	e7da      	b.n	800bc2a <MP3Decode+0x236>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bc74:	4659      	mov	r1, fp
 800bc76:	4630      	mov	r0, r6
 800bc78:	f7ff fe30 	bl	800b8dc <MP3ClearBadFrame>
				return ERR_MP3_INVALID_IMDCT;			
 800bc7c:	f06f 000a 	mvn.w	r0, #10
 800bc80:	e7d3      	b.n	800bc2a <MP3Decode+0x236>
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 800bc82:	f8d6 37c8 	ldr.w	r3, [r6, #1992]	; 0x7c8
 800bc86:	fb0a f303 	mul.w	r3, sl, r3
 800bc8a:	fb03 f101 	mul.w	r1, r3, r1
 800bc8e:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 800bc92:	4630      	mov	r0, r6
 800bc94:	f004 fe0a 	bl	80108ac <xmp3fixpt_Subband>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	db02      	blt.n	800bca2 <MP3Decode+0x2ae>
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800bc9c:	f10a 0a01 	add.w	sl, sl, #1
 800bca0:	e718      	b.n	800bad4 <MP3Decode+0xe0>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 800bca2:	4659      	mov	r1, fp
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff fe19 	bl	800b8dc <MP3ClearBadFrame>
			return ERR_MP3_INVALID_SUBBAND;			
 800bcaa:	f06f 000b 	mvn.w	r0, #11
 800bcae:	e7bc      	b.n	800bc2a <MP3Decode+0x236>
	return ERR_MP3_NONE;
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	e7ba      	b.n	800bc2a <MP3Decode+0x236>
		return ERR_MP3_NULL_POINTER;
 800bcb4:	f06f 0004 	mvn.w	r0, #4
}
 800bcb8:	4770      	bx	lr
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 800bcba:	f06f 0005 	mvn.w	r0, #5
 800bcbe:	e7b4      	b.n	800bc2a <MP3Decode+0x236>

0800bcc0 <xmp3fixpt_SetBitstreamPointer>:
 * Return:      none
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
	/* init bitstream */
	bsi->bytePtr = buf;
 800bcc0:	6002      	str	r2, [r0, #0]
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	6043      	str	r3, [r0, #4]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800bcc6:	6083      	str	r3, [r0, #8]
	bsi->nBytes = nBytes;
 800bcc8:	60c1      	str	r1, [r0, #12]
}
 800bcca:	4770      	bx	lr

0800bccc <xmp3fixpt_GetBits>:
 *              if nBits = 0, returns 0 (useful for scalefactor unpacking)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
 800bccc:	4603      	mov	r3, r0
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 800bcce:	f001 011f 	and.w	r1, r1, #31
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800bcd2:	6842      	ldr	r2, [r0, #4]
 800bcd4:	f1c1 001f 	rsb	r0, r1, #31
 800bcd8:	fa22 f000 	lsr.w	r0, r2, r0
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800bcdc:	0840      	lsrs	r0, r0, #1
	bsi->iCache <<= nBits;					/* left-justify cache */
 800bcde:	408a      	lsls	r2, r1
 800bce0:	605a      	str	r2, [r3, #4]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800bce2:	689a      	ldr	r2, [r3, #8]
 800bce4:	1a51      	subs	r1, r2, r1
 800bce6:	6099      	str	r1, [r3, #8]

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 800bce8:	2900      	cmp	r1, #0
 800bcea:	db00      	blt.n	800bcee <xmp3fixpt_GetBits+0x22>
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
		bsi->iCache <<= lowBits;			/* left-justify cache */
	}

	return data;
}
 800bcec:	4770      	bx	lr
{
 800bcee:	b5f0      	push	{r4, r5, r6, r7, lr}
		lowBits = -bsi->cachedBits;
 800bcf0:	f1c1 0c00 	rsb	ip, r1, #0
	int nBytes = bsi->nBytes;
 800bcf4:	68dc      	ldr	r4, [r3, #12]
	if (nBytes >= 4) {
 800bcf6:	2c03      	cmp	r4, #3
 800bcf8:	dd27      	ble.n	800bd4a <xmp3fixpt_GetBits+0x7e>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800bcfa:	681d      	ldr	r5, [r3, #0]
 800bcfc:	1c6f      	adds	r7, r5, #1
 800bcfe:	601f      	str	r7, [r3, #0]
 800bd00:	782a      	ldrb	r2, [r5, #0]
 800bd02:	0612      	lsls	r2, r2, #24
 800bd04:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800bd06:	1cae      	adds	r6, r5, #2
 800bd08:	601e      	str	r6, [r3, #0]
 800bd0a:	786d      	ldrb	r5, [r5, #1]
 800bd0c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800bd10:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800bd12:	1cbd      	adds	r5, r7, #2
 800bd14:	601d      	str	r5, [r3, #0]
 800bd16:	787f      	ldrb	r7, [r7, #1]
 800bd18:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800bd1c:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++);
 800bd1e:	1cb5      	adds	r5, r6, #2
 800bd20:	601d      	str	r5, [r3, #0]
 800bd22:	7875      	ldrb	r5, [r6, #1]
 800bd24:	432a      	orrs	r2, r5
 800bd26:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 32;
 800bd28:	2220      	movs	r2, #32
 800bd2a:	609a      	str	r2, [r3, #8]
		bsi->nBytes -= 4;
 800bd2c:	3c04      	subs	r4, #4
 800bd2e:	60dc      	str	r4, [r3, #12]
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	f101 0420 	add.w	r4, r1, #32
 800bd36:	fa22 f404 	lsr.w	r4, r2, r4
 800bd3a:	4320      	orrs	r0, r4
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 800bd3c:	689c      	ldr	r4, [r3, #8]
 800bd3e:	4421      	add	r1, r4
 800bd40:	6099      	str	r1, [r3, #8]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800bd42:	fa02 f20c 	lsl.w	r2, r2, ip
 800bd46:	605a      	str	r2, [r3, #4]
}
 800bd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bsi->iCache = 0;
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	605a      	str	r2, [r3, #4]
	int nBytes = bsi->nBytes;
 800bd4e:	4622      	mov	r2, r4
		while (nBytes--) {
 800bd50:	f102 3eff 	add.w	lr, r2, #4294967295
 800bd54:	b152      	cbz	r2, 800bd6c <xmp3fixpt_GetBits+0xa0>
			bsi->iCache |= (*bsi->bytePtr++);
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	1c55      	adds	r5, r2, #1
 800bd5a:	601d      	str	r5, [r3, #0]
 800bd5c:	7812      	ldrb	r2, [r2, #0]
 800bd5e:	685d      	ldr	r5, [r3, #4]
 800bd60:	432a      	orrs	r2, r5
 800bd62:	605a      	str	r2, [r3, #4]
			bsi->iCache <<= 8;
 800bd64:	0212      	lsls	r2, r2, #8
 800bd66:	605a      	str	r2, [r3, #4]
		while (nBytes--) {
 800bd68:	4672      	mov	r2, lr
 800bd6a:	e7f1      	b.n	800bd50 <xmp3fixpt_GetBits+0x84>
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800bd6c:	f1c4 0203 	rsb	r2, r4, #3
 800bd70:	00d5      	lsls	r5, r2, #3
 800bd72:	685a      	ldr	r2, [r3, #4]
 800bd74:	40aa      	lsls	r2, r5
 800bd76:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 8*bsi->nBytes;
 800bd78:	00e4      	lsls	r4, r4, #3
 800bd7a:	609c      	str	r4, [r3, #8]
		bsi->nBytes = 0;
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	60da      	str	r2, [r3, #12]
 800bd80:	e7d6      	b.n	800bd30 <xmp3fixpt_GetBits+0x64>

0800bd82 <xmp3fixpt_CalcBitsUsed>:
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 800bd82:	6803      	ldr	r3, [r0, #0]
 800bd84:	1a5b      	subs	r3, r3, r1
	bitsUsed -= bsi->cachedBits;
 800bd86:	6881      	ldr	r1, [r0, #8]
 800bd88:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
	bitsUsed -= startOffset;

	return bitsUsed;
}
 800bd8c:	1a88      	subs	r0, r1, r2
 800bd8e:	4770      	bx	lr

0800bd90 <xmp3fixpt_CheckPadBit>:
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 800bd90:	b130      	cbz	r0, 800bda0 <xmp3fixpt_CheckPadBit+0x10>
 800bd92:	6803      	ldr	r3, [r0, #0]
 800bd94:	b13b      	cbz	r3, 800bda6 <xmp3fixpt_CheckPadBit+0x16>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	return (fh->paddingBit ? 1 : 0);
 800bd96:	6958      	ldr	r0, [r3, #20]
 800bd98:	3800      	subs	r0, #0
 800bd9a:	bf18      	it	ne
 800bd9c:	2001      	movne	r0, #1
 800bd9e:	4770      	bx	lr
		return -1;
 800bda0:	f04f 30ff 	mov.w	r0, #4294967295
 800bda4:	4770      	bx	lr
 800bda6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bdaa:	4770      	bx	lr

0800bdac <xmp3fixpt_UnpackFrameHeader>:

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 800bdac:	2800      	cmp	r0, #0
 800bdae:	f000 80d8 	beq.w	800bf62 <xmp3fixpt_UnpackFrameHeader+0x1b6>
 800bdb2:	4684      	mov	ip, r0
 800bdb4:	6803      	ldr	r3, [r0, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 80d6 	beq.w	800bf68 <xmp3fixpt_UnpackFrameHeader+0x1bc>
 800bdbc:	780a      	ldrb	r2, [r1, #0]
 800bdbe:	2aff      	cmp	r2, #255	; 0xff
 800bdc0:	f040 80d5 	bne.w	800bf6e <xmp3fixpt_UnpackFrameHeader+0x1c2>
 800bdc4:	7848      	ldrb	r0, [r1, #1]
 800bdc6:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
 800bdca:	2ae0      	cmp	r2, #224	; 0xe0
 800bdcc:	f040 80d2 	bne.w	800bf74 <xmp3fixpt_UnpackFrameHeader+0x1c8>
{
 800bdd0:	b570      	push	{r4, r5, r6, lr}
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
 800bdd2:	08c2      	lsrs	r2, r0, #3
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800bdd4:	f010 0f18 	tst.w	r0, #24
 800bdd8:	f000 80b9 	beq.w	800bf4e <xmp3fixpt_UnpackFrameHeader+0x1a2>
 800bddc:	f082 0201 	eor.w	r2, r2, #1
 800bde0:	f002 0201 	and.w	r2, r2, #1
 800bde4:	701a      	strb	r2, [r3, #0]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 800bde6:	7848      	ldrb	r0, [r1, #1]
 800bde8:	f3c0 0041 	ubfx	r0, r0, #1, #2
 800bdec:	f1c0 0004 	rsb	r0, r0, #4
 800bdf0:	6058      	str	r0, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 800bdf2:	784c      	ldrb	r4, [r1, #1]
 800bdf4:	f084 0401 	eor.w	r4, r4, #1
 800bdf8:	f004 0401 	and.w	r4, r4, #1
 800bdfc:	609c      	str	r4, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 800bdfe:	788d      	ldrb	r5, [r1, #2]
 800be00:	092d      	lsrs	r5, r5, #4
 800be02:	60dd      	str	r5, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 800be04:	788c      	ldrb	r4, [r1, #2]
 800be06:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800be0a:	611c      	str	r4, [r3, #16]
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 800be0c:	788e      	ldrb	r6, [r1, #2]
 800be0e:	f3c6 0640 	ubfx	r6, r6, #1, #1
 800be12:	615e      	str	r6, [r3, #20]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 800be14:	788e      	ldrb	r6, [r1, #2]
 800be16:	f006 0601 	and.w	r6, r6, #1
 800be1a:	619e      	str	r6, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 800be1c:	f891 e003 	ldrb.w	lr, [r1, #3]
 800be20:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
 800be24:	f883 e01c 	strb.w	lr, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 800be28:	78ce      	ldrb	r6, [r1, #3]
 800be2a:	f3c6 1601 	ubfx	r6, r6, #4, #2
 800be2e:	621e      	str	r6, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 800be30:	78ce      	ldrb	r6, [r1, #3]
 800be32:	f3c6 06c0 	ubfx	r6, r6, #3, #1
 800be36:	625e      	str	r6, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 800be38:	78ce      	ldrb	r6, [r1, #3]
 800be3a:	f3c6 0680 	ubfx	r6, r6, #2, #1
 800be3e:	629e      	str	r6, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 800be40:	78ce      	ldrb	r6, [r1, #3]
 800be42:	f006 0603 	and.w	r6, r6, #3
 800be46:	62de      	str	r6, [r3, #44]	; 0x2c

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 800be48:	2c03      	cmp	r4, #3
 800be4a:	f000 8096 	beq.w	800bf7a <xmp3fixpt_UnpackFrameHeader+0x1ce>
 800be4e:	2804      	cmp	r0, #4
 800be50:	f000 8096 	beq.w	800bf80 <xmp3fixpt_UnpackFrameHeader+0x1d4>
 800be54:	2d0f      	cmp	r5, #15
 800be56:	f000 8096 	beq.w	800bf86 <xmp3fixpt_UnpackFrameHeader+0x1da>
		return -1;

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 800be5a:	20de      	movs	r0, #222	; 0xde
 800be5c:	fb00 f202 	mul.w	r2, r0, r2
 800be60:	204a      	movs	r0, #74	; 0x4a
 800be62:	fb00 2204 	mla	r2, r0, r4, r2
 800be66:	4849      	ldr	r0, [pc, #292]	; (800bf8c <xmp3fixpt_UnpackFrameHeader+0x1e0>)
 800be68:	4402      	add	r2, r0
 800be6a:	635a      	str	r2, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 800be6c:	f1be 0f01 	cmp.w	lr, #1
 800be70:	d001      	beq.n	800be76 <xmp3fixpt_UnpackFrameHeader+0xca>
		fh->modeExt = 0;
 800be72:	2200      	movs	r2, #0
 800be74:	621a      	str	r2, [r3, #32]

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800be76:	f1be 0f03 	cmp.w	lr, #3
 800be7a:	d06a      	beq.n	800bf52 <xmp3fixpt_UnpackFrameHeader+0x1a6>
 800be7c:	2202      	movs	r2, #2
 800be7e:	f8cc 27bc 	str.w	r2, [ip, #1980]	; 0x7bc
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800be82:	781a      	ldrb	r2, [r3, #0]
 800be84:	6918      	ldr	r0, [r3, #16]
 800be86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800be8a:	4402      	add	r2, r0
 800be8c:	4840      	ldr	r0, [pc, #256]	; (800bf90 <xmp3fixpt_UnpackFrameHeader+0x1e4>)
 800be8e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800be92:	f8cc 27c0 	str.w	r2, [ip, #1984]	; 0x7c0
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800be96:	781a      	ldrb	r2, [r3, #0]
 800be98:	2a00      	cmp	r2, #0
 800be9a:	d15c      	bne.n	800bf56 <xmp3fixpt_UnpackFrameHeader+0x1aa>
 800be9c:	2402      	movs	r4, #2
 800be9e:	f8cc 47c4 	str.w	r4, [ip, #1988]	; 0x7c4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800bea2:	781a      	ldrb	r2, [r3, #0]
 800bea4:	6858      	ldr	r0, [r3, #4]
 800bea6:	3801      	subs	r0, #1
 800bea8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800beac:	4402      	add	r2, r0
 800beae:	4839      	ldr	r0, [pc, #228]	; (800bf94 <xmp3fixpt_UnpackFrameHeader+0x1e8>)
 800beb0:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
 800beb4:	fb92 f2f4 	sdiv	r2, r2, r4
 800beb8:	f8cc 27c8 	str.w	r2, [ip, #1992]	; 0x7c8
	mp3DecInfo->layer = fh->layer;
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	f8cc 27d0 	str.w	r2, [ip, #2000]	; 0x7d0
	mp3DecInfo->version = fh->ver;
 800bec2:	781a      	ldrb	r2, [r3, #0]
 800bec4:	f88c 27d4 	strb.w	r2, [ip, #2004]	; 0x7d4
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 800bec8:	68dc      	ldr	r4, [r3, #12]
 800beca:	2c00      	cmp	r4, #0
 800becc:	d036      	beq.n	800bf3c <xmp3fixpt_UnpackFrameHeader+0x190>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800bece:	7818      	ldrb	r0, [r3, #0]
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	3a01      	subs	r2, #1
 800bed4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800bed8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bedc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800bee0:	4402      	add	r2, r0
 800bee2:	4422      	add	r2, r4
 800bee4:	482c      	ldr	r0, [pc, #176]	; (800bf98 <xmp3fixpt_UnpackFrameHeader+0x1ec>)
 800bee6:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
 800beea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800beee:	fb00 f202 	mul.w	r2, r0, r2
 800bef2:	f8cc 27b8 	str.w	r2, [ip, #1976]	; 0x7b8
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800bef6:	781e      	ldrb	r6, [r3, #0]
 800bef8:	691a      	ldr	r2, [r3, #16]
 800befa:	68dd      	ldr	r5, [r3, #12]
 800befc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800bf00:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 800bf04:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800bf08:	4422      	add	r2, r4
 800bf0a:	442a      	add	r2, r5
 800bf0c:	4823      	ldr	r0, [pc, #140]	; (800bf9c <xmp3fixpt_UnpackFrameHeader+0x1f0>)
 800bf0e:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800bf12:	7f18      	ldrb	r0, [r3, #28]
 800bf14:	3803      	subs	r0, #3
 800bf16:	bf18      	it	ne
 800bf18:	2001      	movne	r0, #1
 800bf1a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800bf1e:	4c20      	ldr	r4, [pc, #128]	; (800bfa0 <xmp3fixpt_UnpackFrameHeader+0x1f4>)
 800bf20:	f934 0010 	ldrsh.w	r0, [r4, r0, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800bf24:	1a12      	subs	r2, r2, r0
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800bf26:	3a04      	subs	r2, #4
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 800bf28:	6898      	ldr	r0, [r3, #8]
 800bf2a:	b100      	cbz	r0, 800bf2e <xmp3fixpt_UnpackFrameHeader+0x182>
 800bf2c:	2002      	movs	r0, #2
 800bf2e:	1a12      	subs	r2, r2, r0
 800bf30:	6958      	ldr	r0, [r3, #20]
 800bf32:	2800      	cmp	r0, #0
 800bf34:	bf18      	it	ne
 800bf36:	3201      	addne	r2, #1
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800bf38:	f8cc 27cc 	str.w	r2, [ip, #1996]	; 0x7cc
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 800bf3c:	689a      	ldr	r2, [r3, #8]
 800bf3e:	b162      	cbz	r2, 800bf5a <xmp3fixpt_UnpackFrameHeader+0x1ae>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 800bf40:	7908      	ldrb	r0, [r1, #4]
 800bf42:	794a      	ldrb	r2, [r1, #5]
 800bf44:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800bf48:	631a      	str	r2, [r3, #48]	; 0x30
		return 6;
 800bf4a:	2006      	movs	r0, #6
	} else {
		fh->CRCWord = 0;
		return 4;
	}
}
 800bf4c:	bd70      	pop	{r4, r5, r6, pc}
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800bf4e:	2202      	movs	r2, #2
 800bf50:	e748      	b.n	800bde4 <xmp3fixpt_UnpackFrameHeader+0x38>
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800bf52:	2201      	movs	r2, #1
 800bf54:	e793      	b.n	800be7e <xmp3fixpt_UnpackFrameHeader+0xd2>
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800bf56:	2401      	movs	r4, #1
 800bf58:	e7a1      	b.n	800be9e <xmp3fixpt_UnpackFrameHeader+0xf2>
		fh->CRCWord = 0;
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	631a      	str	r2, [r3, #48]	; 0x30
		return 4;
 800bf5e:	2004      	movs	r0, #4
 800bf60:	e7f4      	b.n	800bf4c <xmp3fixpt_UnpackFrameHeader+0x1a0>
		return -1;
 800bf62:	f04f 30ff 	mov.w	r0, #4294967295
 800bf66:	4770      	bx	lr
 800bf68:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6c:	4770      	bx	lr
 800bf6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf72:	4770      	bx	lr
 800bf74:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bf78:	4770      	bx	lr
		return -1;
 800bf7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7e:	e7e5      	b.n	800bf4c <xmp3fixpt_UnpackFrameHeader+0x1a0>
 800bf80:	f04f 30ff 	mov.w	r0, #4294967295
 800bf84:	e7e2      	b.n	800bf4c <xmp3fixpt_UnpackFrameHeader+0x1a0>
 800bf86:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8a:	e7df      	b.n	800bf4c <xmp3fixpt_UnpackFrameHeader+0x1a0>
 800bf8c:	0801a29c 	.word	0x0801a29c
 800bf90:	0801a264 	.word	0x0801a264
 800bf94:	0801a288 	.word	0x0801a288
 800bf98:	0801a154 	.word	0x0801a154
 800bf9c:	0801a544 	.word	0x0801a544
 800bfa0:	0801a538 	.word	0x0801a538

0800bfa4 <xmp3fixpt_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 800bfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa8:	b084      	sub	sp, #16
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	f000 814e 	beq.w	800c24c <xmp3fixpt_UnpackSideInfo+0x2a8>
 800bfb0:	460a      	mov	r2, r1
 800bfb2:	4680      	mov	r8, r0
 800bfb4:	f8d0 9000 	ldr.w	r9, [r0]
 800bfb8:	f1b9 0f00 	cmp.w	r9, #0
 800bfbc:	f000 8149 	beq.w	800c252 <xmp3fixpt_UnpackSideInfo+0x2ae>
 800bfc0:	6847      	ldr	r7, [r0, #4]
 800bfc2:	2f00      	cmp	r7, #0
 800bfc4:	f000 8148 	beq.w	800c258 <xmp3fixpt_UnpackSideInfo+0x2b4>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));

	bsi = &bitStreamInfo;
	if (fh->ver == MPEG1) {
 800bfc8:	f899 3000 	ldrb.w	r3, [r9]
 800bfcc:	bb8b      	cbnz	r3, 800c032 <xmp3fixpt_UnpackSideInfo+0x8e>
		/* MPEG 1 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800bfce:	f899 301c 	ldrb.w	r3, [r9, #28]
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d015      	beq.n	800c002 <xmp3fixpt_UnpackSideInfo+0x5e>
 800bfd6:	f04f 0a20 	mov.w	sl, #32
		SetBitstreamPointer(bsi, nBytes, buf);
 800bfda:	4651      	mov	r1, sl
 800bfdc:	4668      	mov	r0, sp
 800bfde:	f7ff fe6f 	bl	800bcc0 <xmp3fixpt_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 9);
 800bfe2:	2109      	movs	r1, #9
 800bfe4:	4668      	mov	r0, sp
 800bfe6:	f7ff fe71 	bl	800bccc <xmp3fixpt_GetBits>
 800bfea:	6038      	str	r0, [r7, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800bfec:	f899 301c 	ldrb.w	r3, [r9, #28]
 800bff0:	2b03      	cmp	r3, #3
 800bff2:	d009      	beq.n	800c008 <xmp3fixpt_UnpackSideInfo+0x64>
 800bff4:	2103      	movs	r1, #3
 800bff6:	4668      	mov	r0, sp
 800bff8:	f7ff fe68 	bl	800bccc <xmp3fixpt_GetBits>
 800bffc:	6078      	str	r0, [r7, #4]

		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800bffe:	2500      	movs	r5, #0
 800c000:	e011      	b.n	800c026 <xmp3fixpt_UnpackSideInfo+0x82>
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800c002:	f04f 0a11 	mov.w	sl, #17
 800c006:	e7e8      	b.n	800bfda <xmp3fixpt_UnpackSideInfo+0x36>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800c008:	2105      	movs	r1, #5
 800c00a:	e7f4      	b.n	800bff6 <xmp3fixpt_UnpackSideInfo+0x52>
			for (bd = 0; bd < MAX_SCFBD; bd++)
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 800c00c:	2101      	movs	r1, #1
 800c00e:	4668      	mov	r0, sp
 800c010:	f7ff fe5c 	bl	800bccc <xmp3fixpt_GetBits>
 800c014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c018:	3302      	adds	r3, #2
 800c01a:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800c01e:	3401      	adds	r4, #1
 800c020:	2c03      	cmp	r4, #3
 800c022:	ddf3      	ble.n	800c00c <xmp3fixpt_UnpackSideInfo+0x68>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800c024:	3501      	adds	r5, #1
 800c026:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c02a:	42ab      	cmp	r3, r5
 800c02c:	dd19      	ble.n	800c062 <xmp3fixpt_UnpackSideInfo+0xbe>
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800c02e:	2400      	movs	r4, #0
 800c030:	e7f6      	b.n	800c020 <xmp3fixpt_UnpackSideInfo+0x7c>
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800c032:	f899 301c 	ldrb.w	r3, [r9, #28]
 800c036:	2b03      	cmp	r3, #3
 800c038:	d015      	beq.n	800c066 <xmp3fixpt_UnpackSideInfo+0xc2>
 800c03a:	f04f 0a11 	mov.w	sl, #17
		SetBitstreamPointer(bsi, nBytes, buf);
 800c03e:	4651      	mov	r1, sl
 800c040:	4668      	mov	r0, sp
 800c042:	f7ff fe3d 	bl	800bcc0 <xmp3fixpt_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 8);
 800c046:	2108      	movs	r1, #8
 800c048:	4668      	mov	r0, sp
 800c04a:	f7ff fe3f 	bl	800bccc <xmp3fixpt_GetBits>
 800c04e:	6038      	str	r0, [r7, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800c050:	f899 301c 	ldrb.w	r3, [r9, #28]
 800c054:	2b03      	cmp	r3, #3
 800c056:	d009      	beq.n	800c06c <xmp3fixpt_UnpackSideInfo+0xc8>
 800c058:	2102      	movs	r1, #2
 800c05a:	4668      	mov	r0, sp
 800c05c:	f7ff fe36 	bl	800bccc <xmp3fixpt_GetBits>
 800c060:	6078      	str	r0, [r7, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800c062:	2500      	movs	r5, #0
 800c064:	e0e5      	b.n	800c232 <xmp3fixpt_UnpackSideInfo+0x28e>
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800c066:	f04f 0a09 	mov.w	sl, #9
 800c06a:	e7e8      	b.n	800c03e <xmp3fixpt_UnpackSideInfo+0x9a>
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800c06c:	2101      	movs	r1, #1
 800c06e:	e7f4      	b.n	800c05a <xmp3fixpt_UnpackSideInfo+0xb6>
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */

			sis->part23Length =    GetBits(bsi, 12);
			sis->nBigvals =        GetBits(bsi, 9);
			sis->globalGain =      GetBits(bsi, 8);
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800c070:	2109      	movs	r1, #9
 800c072:	e053      	b.n	800c11c <xmp3fixpt_UnpackSideInfo+0x178>
				if (sis->blockType == 0) {
					/* this should not be allowed, according to spec */
					sis->nBigvals = 0;
					sis->part23Length = 0;
					sis->sfCompress = 0;
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800c074:	2b02      	cmp	r3, #2
 800c076:	f000 809a 	beq.w	800c1ae <xmp3fixpt_UnpackSideInfo+0x20a>
					/* short block, not mixed */
					sis->region0Count = 8;
				} else {
					/* start, stop, or short-mixed */
					sis->region0Count = 7;
 800c07a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c07e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800c082:	0112      	lsls	r2, r2, #4
 800c084:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c088:	443b      	add	r3, r7
 800c08a:	2207      	movs	r2, #7
 800c08c:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				sis->region1Count = 20 - sis->region0Count;
 800c08e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c092:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800c096:	0112      	lsls	r2, r2, #4
 800c098:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c09c:	443b      	add	r3, r7
 800c09e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0a0:	f1c2 0214 	rsb	r2, r2, #20
 800c0a4:	661a      	str	r2, [r3, #96]	; 0x60
				sis->tableSelect[1] =  GetBits(bsi, 5);
				sis->tableSelect[2] =  GetBits(bsi, 5);
				sis->region0Count =    GetBits(bsi, 4);
				sis->region1Count =    GetBits(bsi, 3);
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800c0a6:	f899 3000 	ldrb.w	r3, [r9]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f000 80bb 	beq.w	800c226 <xmp3fixpt_UnpackSideInfo+0x282>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c0b6:	eb05 06c5 	add.w	r6, r5, r5, lsl #3
 800c0ba:	0136      	lsls	r6, r6, #4
 800c0bc:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 800c0c0:	443e      	add	r6, r7
 800c0c2:	6670      	str	r0, [r6, #100]	; 0x64
			sis->sfactScale =        GetBits(bsi, 1);
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	4668      	mov	r0, sp
 800c0c8:	f7ff fe00 	bl	800bccc <xmp3fixpt_GetBits>
 800c0cc:	66b0      	str	r0, [r6, #104]	; 0x68
			sis->count1TableSelect = GetBits(bsi, 1);
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	4668      	mov	r0, sp
 800c0d2:	f7ff fdfb 	bl	800bccc <xmp3fixpt_GetBits>
 800c0d6:	66f0      	str	r0, [r6, #108]	; 0x6c
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c0d8:	3401      	adds	r4, #1
 800c0da:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800c0de:	42a3      	cmp	r3, r4
 800c0e0:	f340 80a6 	ble.w	800c230 <xmp3fixpt_UnpackSideInfo+0x28c>
			sis->part23Length =    GetBits(bsi, 12);
 800c0e4:	210c      	movs	r1, #12
 800c0e6:	4668      	mov	r0, sp
 800c0e8:	f7ff fdf0 	bl	800bccc <xmp3fixpt_GetBits>
 800c0ec:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 800c0f0:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800c0f4:	011b      	lsls	r3, r3, #4
 800c0f6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c0fa:	443e      	add	r6, r7
 800c0fc:	62b0      	str	r0, [r6, #40]	; 0x28
			sis->nBigvals =        GetBits(bsi, 9);
 800c0fe:	2109      	movs	r1, #9
 800c100:	4668      	mov	r0, sp
 800c102:	f7ff fde3 	bl	800bccc <xmp3fixpt_GetBits>
 800c106:	62f0      	str	r0, [r6, #44]	; 0x2c
			sis->globalGain =      GetBits(bsi, 8);
 800c108:	2108      	movs	r1, #8
 800c10a:	4668      	mov	r0, sp
 800c10c:	f7ff fdde 	bl	800bccc <xmp3fixpt_GetBits>
 800c110:	6330      	str	r0, [r6, #48]	; 0x30
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800c112:	f899 3000 	ldrb.w	r3, [r9]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1aa      	bne.n	800c070 <xmp3fixpt_UnpackSideInfo+0xcc>
 800c11a:	2104      	movs	r1, #4
 800c11c:	4668      	mov	r0, sp
 800c11e:	f7ff fdd5 	bl	800bccc <xmp3fixpt_GetBits>
 800c122:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c126:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800c12a:	0112      	lsls	r2, r2, #4
 800c12c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c130:	18fe      	adds	r6, r7, r3
 800c132:	6370      	str	r0, [r6, #52]	; 0x34
			sis->winSwitchFlag =   GetBits(bsi, 1);
 800c134:	2101      	movs	r1, #1
 800c136:	4668      	mov	r0, sp
 800c138:	f7ff fdc8 	bl	800bccc <xmp3fixpt_GetBits>
 800c13c:	63b0      	str	r0, [r6, #56]	; 0x38
			if(sis->winSwitchFlag) {
 800c13e:	2800      	cmp	r0, #0
 800c140:	d04c      	beq.n	800c1dc <xmp3fixpt_UnpackSideInfo+0x238>
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 800c142:	2102      	movs	r1, #2
 800c144:	4668      	mov	r0, sp
 800c146:	f7ff fdc1 	bl	800bccc <xmp3fixpt_GetBits>
 800c14a:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 800c14e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800c152:	011b      	lsls	r3, r3, #4
 800c154:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c158:	443e      	add	r6, r7
 800c15a:	63f0      	str	r0, [r6, #60]	; 0x3c
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800c15c:	2101      	movs	r1, #1
 800c15e:	4668      	mov	r0, sp
 800c160:	f7ff fdb4 	bl	800bccc <xmp3fixpt_GetBits>
 800c164:	6430      	str	r0, [r6, #64]	; 0x40
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800c166:	2105      	movs	r1, #5
 800c168:	4668      	mov	r0, sp
 800c16a:	f7ff fdaf 	bl	800bccc <xmp3fixpt_GetBits>
 800c16e:	6470      	str	r0, [r6, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800c170:	2105      	movs	r1, #5
 800c172:	4668      	mov	r0, sp
 800c174:	f7ff fdaa 	bl	800bccc <xmp3fixpt_GetBits>
 800c178:	64b0      	str	r0, [r6, #72]	; 0x48
				sis->tableSelect[2] =  0;					/* unused */
 800c17a:	2300      	movs	r3, #0
 800c17c:	64f3      	str	r3, [r6, #76]	; 0x4c
				sis->subBlockGain[0] = GetBits(bsi, 3);
 800c17e:	2103      	movs	r1, #3
 800c180:	4668      	mov	r0, sp
 800c182:	f7ff fda3 	bl	800bccc <xmp3fixpt_GetBits>
 800c186:	6530      	str	r0, [r6, #80]	; 0x50
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800c188:	2103      	movs	r1, #3
 800c18a:	4668      	mov	r0, sp
 800c18c:	f7ff fd9e 	bl	800bccc <xmp3fixpt_GetBits>
 800c190:	6570      	str	r0, [r6, #84]	; 0x54
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800c192:	2103      	movs	r1, #3
 800c194:	4668      	mov	r0, sp
 800c196:	f7ff fd99 	bl	800bccc <xmp3fixpt_GetBits>
 800c19a:	65b0      	str	r0, [r6, #88]	; 0x58
				if (sis->blockType == 0) {
 800c19c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f47f af68 	bne.w	800c074 <xmp3fixpt_UnpackSideInfo+0xd0>
					sis->nBigvals = 0;
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	62f2      	str	r2, [r6, #44]	; 0x2c
					sis->part23Length = 0;
 800c1a8:	62b2      	str	r2, [r6, #40]	; 0x28
					sis->sfCompress = 0;
 800c1aa:	6372      	str	r2, [r6, #52]	; 0x34
 800c1ac:	e76f      	b.n	800c08e <xmp3fixpt_UnpackSideInfo+0xea>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800c1ae:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c1b2:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800c1b6:	0112      	lsls	r2, r2, #4
 800c1b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1bc:	443b      	add	r3, r7
 800c1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f47f af5a 	bne.w	800c07a <xmp3fixpt_UnpackSideInfo+0xd6>
					sis->region0Count = 8;
 800c1c6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c1ca:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800c1ce:	0112      	lsls	r2, r2, #4
 800c1d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1d4:	443b      	add	r3, r7
 800c1d6:	2208      	movs	r2, #8
 800c1d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800c1da:	e758      	b.n	800c08e <xmp3fixpt_UnpackSideInfo+0xea>
				sis->blockType = 0;
 800c1dc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c1e0:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800c1e4:	0112      	lsls	r2, r2, #4
 800c1e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1ea:	18fe      	adds	r6, r7, r3
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	63f3      	str	r3, [r6, #60]	; 0x3c
				sis->mixedBlock = 0;
 800c1f0:	6433      	str	r3, [r6, #64]	; 0x40
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800c1f2:	2105      	movs	r1, #5
 800c1f4:	4668      	mov	r0, sp
 800c1f6:	f7ff fd69 	bl	800bccc <xmp3fixpt_GetBits>
 800c1fa:	6470      	str	r0, [r6, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800c1fc:	2105      	movs	r1, #5
 800c1fe:	4668      	mov	r0, sp
 800c200:	f7ff fd64 	bl	800bccc <xmp3fixpt_GetBits>
 800c204:	64b0      	str	r0, [r6, #72]	; 0x48
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800c206:	2105      	movs	r1, #5
 800c208:	4668      	mov	r0, sp
 800c20a:	f7ff fd5f 	bl	800bccc <xmp3fixpt_GetBits>
 800c20e:	64f0      	str	r0, [r6, #76]	; 0x4c
				sis->region0Count =    GetBits(bsi, 4);
 800c210:	2104      	movs	r1, #4
 800c212:	4668      	mov	r0, sp
 800c214:	f7ff fd5a 	bl	800bccc <xmp3fixpt_GetBits>
 800c218:	65f0      	str	r0, [r6, #92]	; 0x5c
				sis->region1Count =    GetBits(bsi, 3);
 800c21a:	2103      	movs	r1, #3
 800c21c:	4668      	mov	r0, sp
 800c21e:	f7ff fd55 	bl	800bccc <xmp3fixpt_GetBits>
 800c222:	6630      	str	r0, [r6, #96]	; 0x60
 800c224:	e73f      	b.n	800c0a6 <xmp3fixpt_UnpackSideInfo+0x102>
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800c226:	2101      	movs	r1, #1
 800c228:	4668      	mov	r0, sp
 800c22a:	f7ff fd4f 	bl	800bccc <xmp3fixpt_GetBits>
 800c22e:	e740      	b.n	800c0b2 <xmp3fixpt_UnpackSideInfo+0x10e>
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800c230:	3501      	adds	r5, #1
 800c232:	f8d8 37c4 	ldr.w	r3, [r8, #1988]	; 0x7c4
 800c236:	42ab      	cmp	r3, r5
 800c238:	dd01      	ble.n	800c23e <xmp3fixpt_UnpackSideInfo+0x29a>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800c23a:	2400      	movs	r4, #0
 800c23c:	e74d      	b.n	800c0da <xmp3fixpt_UnpackSideInfo+0x136>
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	f8c8 37d8 	str.w	r3, [r8, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
}
 800c244:	4650      	mov	r0, sl
 800c246:	b004      	add	sp, #16
 800c248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
 800c24c:	f04f 3aff 	mov.w	sl, #4294967295
 800c250:	e7f8      	b.n	800c244 <xmp3fixpt_UnpackSideInfo+0x2a0>
 800c252:	f04f 3aff 	mov.w	sl, #4294967295
 800c256:	e7f5      	b.n	800c244 <xmp3fixpt_UnpackSideInfo+0x2a0>
 800c258:	f04f 3aff 	mov.w	sl, #4294967295
 800c25c:	e7f2      	b.n	800c244 <xmp3fixpt_UnpackSideInfo+0x2a0>

0800c25e <ClearBuffer>:
static void ClearBuffer(void *buf, int nBytes)
{
	int i;
	unsigned char *cbuf = (unsigned char *)buf;

	for (i = 0; i < nBytes; i++)
 800c25e:	2300      	movs	r3, #0
 800c260:	e002      	b.n	800c268 <ClearBuffer+0xa>
		cbuf[i] = 0;
 800c262:	2200      	movs	r2, #0
 800c264:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < nBytes; i++)
 800c266:	3301      	adds	r3, #1
 800c268:	428b      	cmp	r3, r1
 800c26a:	dbfa      	blt.n	800c262 <ClearBuffer+0x4>

	return;
}
 800c26c:	4770      	bx	lr

0800c26e <xmp3fixpt_FreeBuffers>:
 *
 * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
 **************************************************************************************/
void FreeBuffers(MP3DecInfo *mp3DecInfo)
{
	if (!mp3DecInfo)
 800c26e:	b378      	cbz	r0, 800c2d0 <xmp3fixpt_FreeBuffers+0x62>
{
 800c270:	b510      	push	{r4, lr}
 800c272:	4604      	mov	r4, r0
		return;

	SAFE_FREE(mp3DecInfo->FrameHeaderPS);
 800c274:	6800      	ldr	r0, [r0, #0]
 800c276:	b108      	cbz	r0, 800c27c <xmp3fixpt_FreeBuffers+0xe>
 800c278:	f00c fe7c 	bl	8018f74 <free>
 800c27c:	2300      	movs	r3, #0
 800c27e:	6023      	str	r3, [r4, #0]
	SAFE_FREE(mp3DecInfo->SideInfoPS);
 800c280:	6860      	ldr	r0, [r4, #4]
 800c282:	b108      	cbz	r0, 800c288 <xmp3fixpt_FreeBuffers+0x1a>
 800c284:	f00c fe76 	bl	8018f74 <free>
 800c288:	2300      	movs	r3, #0
 800c28a:	6063      	str	r3, [r4, #4]
	SAFE_FREE(mp3DecInfo->ScaleFactorInfoPS);
 800c28c:	68a0      	ldr	r0, [r4, #8]
 800c28e:	b108      	cbz	r0, 800c294 <xmp3fixpt_FreeBuffers+0x26>
 800c290:	f00c fe70 	bl	8018f74 <free>
 800c294:	2300      	movs	r3, #0
 800c296:	60a3      	str	r3, [r4, #8]
	SAFE_FREE(mp3DecInfo->HuffmanInfoPS);
 800c298:	68e0      	ldr	r0, [r4, #12]
 800c29a:	b108      	cbz	r0, 800c2a0 <xmp3fixpt_FreeBuffers+0x32>
 800c29c:	f00c fe6a 	bl	8018f74 <free>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	60e3      	str	r3, [r4, #12]
	SAFE_FREE(mp3DecInfo->DequantInfoPS);
 800c2a4:	6920      	ldr	r0, [r4, #16]
 800c2a6:	b108      	cbz	r0, 800c2ac <xmp3fixpt_FreeBuffers+0x3e>
 800c2a8:	f00c fe64 	bl	8018f74 <free>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	6123      	str	r3, [r4, #16]
	SAFE_FREE(mp3DecInfo->IMDCTInfoPS);
 800c2b0:	6960      	ldr	r0, [r4, #20]
 800c2b2:	b108      	cbz	r0, 800c2b8 <xmp3fixpt_FreeBuffers+0x4a>
 800c2b4:	f00c fe5e 	bl	8018f74 <free>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	6163      	str	r3, [r4, #20]
	SAFE_FREE(mp3DecInfo->SubbandInfoPS);
 800c2bc:	69a0      	ldr	r0, [r4, #24]
 800c2be:	b108      	cbz	r0, 800c2c4 <xmp3fixpt_FreeBuffers+0x56>
 800c2c0:	f00c fe58 	bl	8018f74 <free>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61a3      	str	r3, [r4, #24]

	SAFE_FREE(mp3DecInfo);
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f00c fe53 	bl	8018f74 <free>
}
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	4770      	bx	lr

0800c2d2 <xmp3fixpt_AllocateBuffers>:
{
 800c2d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mp3DecInfo = (MP3DecInfo *)malloc(sizeof(MP3DecInfo));
 800c2d6:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
 800c2da:	f00c fe43 	bl	8018f64 <malloc>
	if (!mp3DecInfo)
 800c2de:	4604      	mov	r4, r0
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d063      	beq.n	800c3ac <xmp3fixpt_AllocateBuffers+0xda>
	ClearBuffer(mp3DecInfo, sizeof(MP3DecInfo));
 800c2e4:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800c2e8:	f7ff ffb9 	bl	800c25e <ClearBuffer>
	fh =  (FrameHeader *)     malloc(sizeof(FrameHeader));
 800c2ec:	2038      	movs	r0, #56	; 0x38
 800c2ee:	f00c fe39 	bl	8018f64 <malloc>
 800c2f2:	4680      	mov	r8, r0
	si =  (SideInfo *)        malloc(sizeof(SideInfo));
 800c2f4:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800c2f8:	f00c fe34 	bl	8018f64 <malloc>
 800c2fc:	4607      	mov	r7, r0
	sfi = (ScaleFactorInfo *) malloc(sizeof(ScaleFactorInfo));
 800c2fe:	f44f 708e 	mov.w	r0, #284	; 0x11c
 800c302:	f00c fe2f 	bl	8018f64 <malloc>
 800c306:	4606      	mov	r6, r0
	hi =  (HuffmanInfo *)     malloc(sizeof(HuffmanInfo));
 800c308:	f241 2010 	movw	r0, #4624	; 0x1210
 800c30c:	f00c fe2a 	bl	8018f64 <malloc>
 800c310:	4605      	mov	r5, r0
	di =  (DequantInfo *)     malloc(sizeof(DequantInfo));
 800c312:	f44f 7052 	mov.w	r0, #840	; 0x348
 800c316:	f00c fe25 	bl	8018f64 <malloc>
 800c31a:	4683      	mov	fp, r0
	mi =  (IMDCTInfo *)       malloc(sizeof(IMDCTInfo));
 800c31c:	f44f 50d9 	mov.w	r0, #6944	; 0x1b20
 800c320:	f00c fe20 	bl	8018f64 <malloc>
 800c324:	4682      	mov	sl, r0
	sbi = (SubbandInfo *)     malloc(sizeof(SubbandInfo));
 800c326:	f242 2004 	movw	r0, #8708	; 0x2204
 800c32a:	f00c fe1b 	bl	8018f64 <malloc>
 800c32e:	4681      	mov	r9, r0
	mp3DecInfo->FrameHeaderPS =     (void *)fh;
 800c330:	f8c4 8000 	str.w	r8, [r4]
	mp3DecInfo->SideInfoPS =        (void *)si;
 800c334:	6067      	str	r7, [r4, #4]
	mp3DecInfo->ScaleFactorInfoPS = (void *)sfi;
 800c336:	60a6      	str	r6, [r4, #8]
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 800c338:	60e5      	str	r5, [r4, #12]
	mp3DecInfo->DequantInfoPS =     (void *)di;
 800c33a:	f8c4 b010 	str.w	fp, [r4, #16]
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 800c33e:	f8c4 a014 	str.w	sl, [r4, #20]
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 800c342:	61a0      	str	r0, [r4, #24]
	if (!fh || !si || !sfi || !hi || !di || !mi || !sbi) {
 800c344:	2f00      	cmp	r7, #0
 800c346:	bf18      	it	ne
 800c348:	f1b8 0f00 	cmpne.w	r8, #0
 800c34c:	d031      	beq.n	800c3b2 <xmp3fixpt_AllocateBuffers+0xe0>
 800c34e:	fab5 f385 	clz	r3, r5
 800c352:	095b      	lsrs	r3, r3, #5
 800c354:	b36e      	cbz	r6, 800c3b2 <xmp3fixpt_AllocateBuffers+0xe0>
 800c356:	bb63      	cbnz	r3, 800c3b2 <xmp3fixpt_AllocateBuffers+0xe0>
 800c358:	faba f38a 	clz	r3, sl
 800c35c:	095b      	lsrs	r3, r3, #5
 800c35e:	f1bb 0f00 	cmp.w	fp, #0
 800c362:	d026      	beq.n	800c3b2 <xmp3fixpt_AllocateBuffers+0xe0>
 800c364:	bb2b      	cbnz	r3, 800c3b2 <xmp3fixpt_AllocateBuffers+0xe0>
 800c366:	b320      	cbz	r0, 800c3b2 <xmp3fixpt_AllocateBuffers+0xe0>
	ClearBuffer(fh,  sizeof(FrameHeader));
 800c368:	2138      	movs	r1, #56	; 0x38
 800c36a:	4640      	mov	r0, r8
 800c36c:	f7ff ff77 	bl	800c25e <ClearBuffer>
	ClearBuffer(si,  sizeof(SideInfo));
 800c370:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800c374:	4638      	mov	r0, r7
 800c376:	f7ff ff72 	bl	800c25e <ClearBuffer>
	ClearBuffer(sfi, sizeof(ScaleFactorInfo));
 800c37a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800c37e:	4630      	mov	r0, r6
 800c380:	f7ff ff6d 	bl	800c25e <ClearBuffer>
	ClearBuffer(hi,  sizeof(HuffmanInfo));
 800c384:	f241 2110 	movw	r1, #4624	; 0x1210
 800c388:	4628      	mov	r0, r5
 800c38a:	f7ff ff68 	bl	800c25e <ClearBuffer>
	ClearBuffer(di,  sizeof(DequantInfo));
 800c38e:	f44f 7152 	mov.w	r1, #840	; 0x348
 800c392:	4658      	mov	r0, fp
 800c394:	f7ff ff63 	bl	800c25e <ClearBuffer>
	ClearBuffer(mi,  sizeof(IMDCTInfo));
 800c398:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 800c39c:	4650      	mov	r0, sl
 800c39e:	f7ff ff5e 	bl	800c25e <ClearBuffer>
	ClearBuffer(sbi, sizeof(SubbandInfo));
 800c3a2:	f242 2104 	movw	r1, #8708	; 0x2204
 800c3a6:	4648      	mov	r0, r9
 800c3a8:	f7ff ff59 	bl	800c25e <ClearBuffer>
}
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		FreeBuffers(mp3DecInfo);	/* safe to call - only frees memory that was successfully allocated */
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f7ff ff5b 	bl	800c26e <xmp3fixpt_FreeBuffers>
		return 0;
 800c3b8:	2400      	movs	r4, #0
 800c3ba:	e7f7      	b.n	800c3ac <xmp3fixpt_AllocateBuffers+0xda>

0800c3bc <xmp3fixpt_FDCT32>:
 * TODO:        code organization and optimization for ARM
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	b085      	sub	sp, #20
 800c3c2:	9100      	str	r1, [sp, #0]
 800c3c4:	9201      	str	r2, [sp, #4]
 800c3c6:	9302      	str	r3, [sp, #8]
 800c3c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
	if (gb < 6) {
 800c3ca:	2c05      	cmp	r4, #5
 800c3cc:	f300 8109 	bgt.w	800c5e2 <xmp3fixpt_FDCT32+0x226>
		es = 6 - gb;
 800c3d0:	f1c4 0406 	rsb	r4, r4, #6
		for (i = 0; i < 32; i++)
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	e005      	b.n	800c3e4 <xmp3fixpt_FDCT32+0x28>
			buf[i] >>= es;
 800c3d8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c3dc:	4122      	asrs	r2, r4
 800c3de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (i = 0; i < 32; i++)
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	2b1f      	cmp	r3, #31
 800c3e6:	ddf7      	ble.n	800c3d8 <xmp3fixpt_FDCT32+0x1c>
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 800c3e8:	6803      	ldr	r3, [r0, #0]
 800c3ea:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 800c3ec:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800c3ee:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800c3f0:	195a      	adds	r2, r3, r5
 800c3f2:	1b5b      	subs	r3, r3, r5
	 * For inline assembly, x and y are not assumed to be R0, R1 so it shouldn't matter
	 *   which one is returned. (If this were a function call, returning y (R1) would 
	 *   require an extra "mov r0, r1")
     */
    int zlow;
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800c3f4:	4d7c      	ldr	r5, [pc, #496]	; (800c5e8 <xmp3fixpt_FDCT32+0x22c>)
 800c3f6:	fb85 7303 	smull	r7, r3, r5, r3
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	198d      	adds	r5, r1, r6
 800c3fe:	1b89      	subs	r1, r1, r6
 800c400:	4e7a      	ldr	r6, [pc, #488]	; (800c5ec <xmp3fixpt_FDCT32+0x230>)
 800c402:	fb86 7101 	smull	r7, r1, r6, r1
 800c406:	0149      	lsls	r1, r1, #5
 800c408:	1956      	adds	r6, r2, r5
 800c40a:	6006      	str	r6, [r0, #0]
 800c40c:	1b52      	subs	r2, r2, r5
 800c40e:	4d78      	ldr	r5, [pc, #480]	; (800c5f0 <xmp3fixpt_FDCT32+0x234>)
 800c410:	fb85 6202 	smull	r6, r2, r5, r2
 800c414:	0052      	lsls	r2, r2, #1
 800c416:	63c2      	str	r2, [r0, #60]	; 0x3c
 800c418:	185a      	adds	r2, r3, r1
 800c41a:	6402      	str	r2, [r0, #64]	; 0x40
 800c41c:	1a5b      	subs	r3, r3, r1
 800c41e:	fb85 2303 	smull	r2, r3, r5, r3
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	67c3      	str	r3, [r0, #124]	; 0x7c
	D32FP(1, 1, 3, 1);
 800c426:	6843      	ldr	r3, [r0, #4]
 800c428:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800c42a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800c42c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800c42e:	195a      	adds	r2, r3, r5
 800c430:	1b5b      	subs	r3, r3, r5
 800c432:	4d70      	ldr	r5, [pc, #448]	; (800c5f4 <xmp3fixpt_FDCT32+0x238>)
 800c434:	fb85 7303 	smull	r7, r3, r5, r3
 800c438:	005b      	lsls	r3, r3, #1
 800c43a:	198d      	adds	r5, r1, r6
 800c43c:	1b89      	subs	r1, r1, r6
 800c43e:	4e6e      	ldr	r6, [pc, #440]	; (800c5f8 <xmp3fixpt_FDCT32+0x23c>)
 800c440:	fb86 7101 	smull	r7, r1, r6, r1
 800c444:	00c9      	lsls	r1, r1, #3
 800c446:	1956      	adds	r6, r2, r5
 800c448:	6046      	str	r6, [r0, #4]
 800c44a:	1b52      	subs	r2, r2, r5
 800c44c:	4d6b      	ldr	r5, [pc, #428]	; (800c5fc <xmp3fixpt_FDCT32+0x240>)
 800c44e:	fb85 6202 	smull	r6, r2, r5, r2
 800c452:	0052      	lsls	r2, r2, #1
 800c454:	6382      	str	r2, [r0, #56]	; 0x38
 800c456:	185a      	adds	r2, r3, r1
 800c458:	6442      	str	r2, [r0, #68]	; 0x44
 800c45a:	1a5b      	subs	r3, r3, r1
 800c45c:	fb85 2303 	smull	r2, r3, r5, r3
 800c460:	005b      	lsls	r3, r3, #1
 800c462:	6783      	str	r3, [r0, #120]	; 0x78
	D32FP(2, 1, 3, 1);
 800c464:	6883      	ldr	r3, [r0, #8]
 800c466:	6f45      	ldr	r5, [r0, #116]	; 0x74
 800c468:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800c46a:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800c46c:	195a      	adds	r2, r3, r5
 800c46e:	1b5b      	subs	r3, r3, r5
 800c470:	4d63      	ldr	r5, [pc, #396]	; (800c600 <xmp3fixpt_FDCT32+0x244>)
 800c472:	fb85 7303 	smull	r7, r3, r5, r3
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	198d      	adds	r5, r1, r6
 800c47a:	1b89      	subs	r1, r1, r6
 800c47c:	4e61      	ldr	r6, [pc, #388]	; (800c604 <xmp3fixpt_FDCT32+0x248>)
 800c47e:	fb86 7101 	smull	r7, r1, r6, r1
 800c482:	00c9      	lsls	r1, r1, #3
 800c484:	1956      	adds	r6, r2, r5
 800c486:	6086      	str	r6, [r0, #8]
 800c488:	1b52      	subs	r2, r2, r5
 800c48a:	4d5f      	ldr	r5, [pc, #380]	; (800c608 <xmp3fixpt_FDCT32+0x24c>)
 800c48c:	fb85 6202 	smull	r6, r2, r5, r2
 800c490:	0052      	lsls	r2, r2, #1
 800c492:	6342      	str	r2, [r0, #52]	; 0x34
 800c494:	185a      	adds	r2, r3, r1
 800c496:	6482      	str	r2, [r0, #72]	; 0x48
 800c498:	1a5b      	subs	r3, r3, r1
 800c49a:	fb85 2303 	smull	r2, r3, r5, r3
 800c49e:	005b      	lsls	r3, r3, #1
 800c4a0:	6743      	str	r3, [r0, #116]	; 0x74
	D32FP(3, 1, 2, 1);
 800c4a2:	68c3      	ldr	r3, [r0, #12]
 800c4a4:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800c4a6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800c4a8:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 800c4aa:	195a      	adds	r2, r3, r5
 800c4ac:	1b5b      	subs	r3, r3, r5
 800c4ae:	4d57      	ldr	r5, [pc, #348]	; (800c60c <xmp3fixpt_FDCT32+0x250>)
 800c4b0:	fb85 7303 	smull	r7, r3, r5, r3
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	198d      	adds	r5, r1, r6
 800c4b8:	1b89      	subs	r1, r1, r6
 800c4ba:	4e55      	ldr	r6, [pc, #340]	; (800c610 <xmp3fixpt_FDCT32+0x254>)
 800c4bc:	fb86 7101 	smull	r7, r1, r6, r1
 800c4c0:	0089      	lsls	r1, r1, #2
 800c4c2:	1956      	adds	r6, r2, r5
 800c4c4:	60c6      	str	r6, [r0, #12]
 800c4c6:	1b52      	subs	r2, r2, r5
 800c4c8:	4d52      	ldr	r5, [pc, #328]	; (800c614 <xmp3fixpt_FDCT32+0x258>)
 800c4ca:	fb85 6202 	smull	r6, r2, r5, r2
 800c4ce:	0052      	lsls	r2, r2, #1
 800c4d0:	6302      	str	r2, [r0, #48]	; 0x30
 800c4d2:	185a      	adds	r2, r3, r1
 800c4d4:	64c2      	str	r2, [r0, #76]	; 0x4c
 800c4d6:	1a5b      	subs	r3, r3, r1
 800c4d8:	fb85 2303 	smull	r2, r3, r5, r3
 800c4dc:	005b      	lsls	r3, r3, #1
 800c4de:	6703      	str	r3, [r0, #112]	; 0x70
	D32FP(4, 1, 2, 1);
 800c4e0:	6903      	ldr	r3, [r0, #16]
 800c4e2:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 800c4e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c4e6:	6d06      	ldr	r6, [r0, #80]	; 0x50
 800c4e8:	195a      	adds	r2, r3, r5
 800c4ea:	1b5b      	subs	r3, r3, r5
 800c4ec:	4d4a      	ldr	r5, [pc, #296]	; (800c618 <xmp3fixpt_FDCT32+0x25c>)
 800c4ee:	fb85 7303 	smull	r7, r3, r5, r3
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	198d      	adds	r5, r1, r6
 800c4f6:	1b89      	subs	r1, r1, r6
 800c4f8:	4e48      	ldr	r6, [pc, #288]	; (800c61c <xmp3fixpt_FDCT32+0x260>)
 800c4fa:	fb86 7101 	smull	r7, r1, r6, r1
 800c4fe:	0089      	lsls	r1, r1, #2
 800c500:	1956      	adds	r6, r2, r5
 800c502:	6106      	str	r6, [r0, #16]
 800c504:	1b52      	subs	r2, r2, r5
 800c506:	4d46      	ldr	r5, [pc, #280]	; (800c620 <xmp3fixpt_FDCT32+0x264>)
 800c508:	fb85 6202 	smull	r6, r2, r5, r2
 800c50c:	0052      	lsls	r2, r2, #1
 800c50e:	62c2      	str	r2, [r0, #44]	; 0x2c
 800c510:	185a      	adds	r2, r3, r1
 800c512:	6502      	str	r2, [r0, #80]	; 0x50
 800c514:	1a5b      	subs	r3, r3, r1
 800c516:	fb85 2303 	smull	r2, r3, r5, r3
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	66c3      	str	r3, [r0, #108]	; 0x6c
	D32FP(5, 1, 1, 2);
 800c51e:	6943      	ldr	r3, [r0, #20]
 800c520:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800c522:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800c524:	6d46      	ldr	r6, [r0, #84]	; 0x54
 800c526:	195a      	adds	r2, r3, r5
 800c528:	1b5b      	subs	r3, r3, r5
 800c52a:	4d3e      	ldr	r5, [pc, #248]	; (800c624 <xmp3fixpt_FDCT32+0x268>)
 800c52c:	fb85 7303 	smull	r7, r3, r5, r3
 800c530:	005b      	lsls	r3, r3, #1
 800c532:	198d      	adds	r5, r1, r6
 800c534:	1b89      	subs	r1, r1, r6
 800c536:	4e3c      	ldr	r6, [pc, #240]	; (800c628 <xmp3fixpt_FDCT32+0x26c>)
 800c538:	fb86 7101 	smull	r7, r1, r6, r1
 800c53c:	0049      	lsls	r1, r1, #1
 800c53e:	1956      	adds	r6, r2, r5
 800c540:	6146      	str	r6, [r0, #20]
 800c542:	1b52      	subs	r2, r2, r5
 800c544:	4d39      	ldr	r5, [pc, #228]	; (800c62c <xmp3fixpt_FDCT32+0x270>)
 800c546:	fb85 6202 	smull	r6, r2, r5, r2
 800c54a:	0092      	lsls	r2, r2, #2
 800c54c:	6282      	str	r2, [r0, #40]	; 0x28
 800c54e:	185a      	adds	r2, r3, r1
 800c550:	6542      	str	r2, [r0, #84]	; 0x54
 800c552:	1a5b      	subs	r3, r3, r1
 800c554:	fb85 2303 	smull	r2, r3, r5, r3
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	6683      	str	r3, [r0, #104]	; 0x68
	D32FP(6, 1, 1, 2);
 800c55c:	6983      	ldr	r3, [r0, #24]
 800c55e:	6e45      	ldr	r5, [r0, #100]	; 0x64
 800c560:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c562:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800c564:	195a      	adds	r2, r3, r5
 800c566:	1b5b      	subs	r3, r3, r5
 800c568:	4d31      	ldr	r5, [pc, #196]	; (800c630 <xmp3fixpt_FDCT32+0x274>)
 800c56a:	fb85 7303 	smull	r7, r3, r5, r3
 800c56e:	005b      	lsls	r3, r3, #1
 800c570:	198d      	adds	r5, r1, r6
 800c572:	1b89      	subs	r1, r1, r6
 800c574:	4e2f      	ldr	r6, [pc, #188]	; (800c634 <xmp3fixpt_FDCT32+0x278>)
 800c576:	fb86 7101 	smull	r7, r1, r6, r1
 800c57a:	0049      	lsls	r1, r1, #1
 800c57c:	1956      	adds	r6, r2, r5
 800c57e:	6186      	str	r6, [r0, #24]
 800c580:	1b52      	subs	r2, r2, r5
 800c582:	4d2d      	ldr	r5, [pc, #180]	; (800c638 <xmp3fixpt_FDCT32+0x27c>)
 800c584:	fb85 6202 	smull	r6, r2, r5, r2
 800c588:	0092      	lsls	r2, r2, #2
 800c58a:	6242      	str	r2, [r0, #36]	; 0x24
 800c58c:	185a      	adds	r2, r3, r1
 800c58e:	6582      	str	r2, [r0, #88]	; 0x58
 800c590:	1a5b      	subs	r3, r3, r1
 800c592:	fb85 2303 	smull	r2, r3, r5, r3
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	6643      	str	r3, [r0, #100]	; 0x64
	D32FP(7, 1, 1, 4);
 800c59a:	69c3      	ldr	r3, [r0, #28]
 800c59c:	6e05      	ldr	r5, [r0, #96]	; 0x60
 800c59e:	6a01      	ldr	r1, [r0, #32]
 800c5a0:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 800c5a2:	195a      	adds	r2, r3, r5
 800c5a4:	1b5b      	subs	r3, r3, r5
 800c5a6:	4d25      	ldr	r5, [pc, #148]	; (800c63c <xmp3fixpt_FDCT32+0x280>)
 800c5a8:	fb85 7303 	smull	r7, r3, r5, r3
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	198d      	adds	r5, r1, r6
 800c5b0:	1b89      	subs	r1, r1, r6
 800c5b2:	4e23      	ldr	r6, [pc, #140]	; (800c640 <xmp3fixpt_FDCT32+0x284>)
 800c5b4:	fb86 7101 	smull	r7, r1, r6, r1
 800c5b8:	0049      	lsls	r1, r1, #1
 800c5ba:	1956      	adds	r6, r2, r5
 800c5bc:	61c6      	str	r6, [r0, #28]
 800c5be:	1b52      	subs	r2, r2, r5
 800c5c0:	4d20      	ldr	r5, [pc, #128]	; (800c644 <xmp3fixpt_FDCT32+0x288>)
 800c5c2:	fb85 6202 	smull	r6, r2, r5, r2
 800c5c6:	0112      	lsls	r2, r2, #4
 800c5c8:	6202      	str	r2, [r0, #32]
 800c5ca:	185a      	adds	r2, r3, r1
 800c5cc:	65c2      	str	r2, [r0, #92]	; 0x5c
 800c5ce:	1a5b      	subs	r3, r3, r1
 800c5d0:	fb85 2303 	smull	r2, r3, r5, r3
 800c5d4:	011b      	lsls	r3, r3, #4
 800c5d6:	6603      	str	r3, [r0, #96]	; 0x60
 800c5d8:	4f1b      	ldr	r7, [pc, #108]	; (800c648 <xmp3fixpt_FDCT32+0x28c>)

	/* second pass */
	for (i = 4; i > 0; i--) {
 800c5da:	f04f 0804 	mov.w	r8, #4
 800c5de:	9403      	str	r4, [sp, #12]
 800c5e0:	e0ae      	b.n	800c740 <xmp3fixpt_FDCT32+0x384>
	es = 0;
 800c5e2:	2400      	movs	r4, #0
 800c5e4:	e700      	b.n	800c3e8 <xmp3fixpt_FDCT32+0x2c>
 800c5e6:	bf00      	nop
 800c5e8:	4013c251 	.word	0x4013c251
 800c5ec:	518522fb 	.word	0x518522fb
 800c5f0:	404f4672 	.word	0x404f4672
 800c5f4:	40b345bd 	.word	0x40b345bd
 800c5f8:	6d0b20cf 	.word	0x6d0b20cf
 800c5fc:	42e13c10 	.word	0x42e13c10
 800c600:	41fa2d6d 	.word	0x41fa2d6d
 800c604:	41d95790 	.word	0x41d95790
 800c608:	48919f44 	.word	0x48919f44
 800c60c:	43f93421 	.word	0x43f93421
 800c610:	5efc8d96 	.word	0x5efc8d96
 800c614:	52cb0e63 	.word	0x52cb0e63
 800c618:	46cc1bc4 	.word	0x46cc1bc4
 800c61c:	4ad81a97 	.word	0x4ad81a97
 800c620:	64e2402e 	.word	0x64e2402e
 800c624:	4a9d9cf0 	.word	0x4a9d9cf0
 800c628:	7c7d1db3 	.word	0x7c7d1db3
 800c62c:	43e224a9 	.word	0x43e224a9
 800c630:	4fae3711 	.word	0x4fae3711
 800c634:	6b6fcf26 	.word	0x6b6fcf26
 800c638:	6e3c92c1 	.word	0x6e3c92c1
 800c63c:	56601ea7 	.word	0x56601ea7
 800c640:	5f4cf6eb 	.word	0x5f4cf6eb
 800c644:	519e4e04 	.word	0x519e4e04
 800c648:	0801a6b4 	.word	0x0801a6b4
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 800c64c:	6801      	ldr	r1, [r0, #0]
 800c64e:	69c5      	ldr	r5, [r0, #28]
 800c650:	68c3      	ldr	r3, [r0, #12]
 800c652:	6906      	ldr	r6, [r0, #16]
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800c654:	194a      	adds	r2, r1, r5
 800c656:	1b49      	subs	r1, r1, r5
 800c658:	683d      	ldr	r5, [r7, #0]
 800c65a:	fb85 c101 	smull	ip, r1, r5, r1
 800c65e:	0049      	lsls	r1, r1, #1
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800c660:	eb03 0c06 	add.w	ip, r3, r6
 800c664:	687d      	ldr	r5, [r7, #4]
 800c666:	1b9b      	subs	r3, r3, r6
 800c668:	fb85 6303 	smull	r6, r3, r5, r3
 800c66c:	00db      	lsls	r3, r3, #3
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800c66e:	eb02 090c 	add.w	r9, r2, ip
 800c672:	68be      	ldr	r6, [r7, #8]
 800c674:	eba2 020c 	sub.w	r2, r2, ip
 800c678:	fb86 5202 	smull	r5, r2, r6, r2
 800c67c:	0052      	lsls	r2, r2, #1
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800c67e:	18cd      	adds	r5, r1, r3
 800c680:	1ac9      	subs	r1, r1, r3
 800c682:	fb86 3101 	smull	r3, r1, r6, r1
 800c686:	0049      	lsls	r1, r1, #1

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 800c688:	6843      	ldr	r3, [r0, #4]
 800c68a:	f8d0 b018 	ldr.w	fp, [r0, #24]
 800c68e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800c692:	6946      	ldr	r6, [r0, #20]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800c694:	eb03 0c0b 	add.w	ip, r3, fp
 800c698:	eba3 030b 	sub.w	r3, r3, fp
 800c69c:	68fc      	ldr	r4, [r7, #12]
 800c69e:	fb84 b303 	smull	fp, r3, r4, r3
 800c6a2:	005b      	lsls	r3, r3, #1
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800c6a4:	eb0e 0b06 	add.w	fp, lr, r6
 800c6a8:	ebae 0e06 	sub.w	lr, lr, r6
 800c6ac:	693c      	ldr	r4, [r7, #16]
 800c6ae:	fb84 ae0e 	smull	sl, lr, r4, lr
 800c6b2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800c6b6:	eb0c 0a0b 	add.w	sl, ip, fp
 800c6ba:	697e      	ldr	r6, [r7, #20]
 800c6bc:	ebac 0c0b 	sub.w	ip, ip, fp
 800c6c0:	fb86 bc0c 	smull	fp, ip, r6, ip
 800c6c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 800c6c8:	eb03 0b0e 	add.w	fp, r3, lr
 800c6cc:	3718      	adds	r7, #24
 800c6ce:	eba3 030e 	sub.w	r3, r3, lr
 800c6d2:	fb86 e303 	smull	lr, r3, r6, r3
 800c6d6:	009b      	lsls	r3, r3, #2

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800c6d8:	eb09 0e0a 	add.w	lr, r9, sl
 800c6dc:	eba9 090a 	sub.w	r9, r9, sl
 800c6e0:	4ed6      	ldr	r6, [pc, #856]	; (800ca3c <xmp3fixpt_FDCT32+0x680>)
 800c6e2:	fb86 a909 	smull	sl, r9, r6, r9
 800c6e6:	ea4f 0949 	mov.w	r9, r9, lsl #1
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800c6ea:	eb02 0a0c 	add.w	sl, r2, ip
 800c6ee:	eba2 020c 	sub.w	r2, r2, ip
 800c6f2:	fb86 c202 	smull	ip, r2, r6, r2
 800c6f6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		buf[0] = b0;	    buf[1] = b1;
 800c6fa:	f8c0 e000 	str.w	lr, [r0]
 800c6fe:	f8c0 9004 	str.w	r9, [r0, #4]
		buf[2] = b2 + b3;	buf[3] = b3;
 800c702:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 800c706:	6082      	str	r2, [r0, #8]
 800c708:	f8c0 c00c 	str.w	ip, [r0, #12]

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800c70c:	eb05 0c0b 	add.w	ip, r5, fp
 800c710:	eba5 020b 	sub.w	r2, r5, fp
 800c714:	fb86 5202 	smull	r5, r2, r6, r2
 800c718:	0052      	lsls	r2, r2, #1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800c71a:	18cd      	adds	r5, r1, r3
 800c71c:	1acb      	subs	r3, r1, r3
 800c71e:	fb86 1303 	smull	r1, r3, r6, r3
 800c722:	005e      	lsls	r6, r3, #1
		b6 += b7;
 800c724:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800c728:	eb0c 0501 	add.w	r5, ip, r1
 800c72c:	6105      	str	r5, [r0, #16]
 800c72e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800c732:	6143      	str	r3, [r0, #20]
		buf[6] = b5 + b6;	buf[7] = b7;
 800c734:	440a      	add	r2, r1
 800c736:	6182      	str	r2, [r0, #24]
 800c738:	61c6      	str	r6, [r0, #28]

		buf += 8;
 800c73a:	3020      	adds	r0, #32
	for (i = 4; i > 0; i--) {
 800c73c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c740:	f1b8 0f00 	cmp.w	r8, #0
 800c744:	dc82      	bgt.n	800c64c <xmp3fixpt_FDCT32+0x290>
	}
	buf -= 32;	/* reset */

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800c746:	9c03      	ldr	r4, [sp, #12]
 800c748:	9a01      	ldr	r2, [sp, #4]
 800c74a:	9b02      	ldr	r3, [sp, #8]
 800c74c:	1ad1      	subs	r1, r2, r3
 800c74e:	f001 0107 	and.w	r1, r1, #7
 800c752:	f501 6280 	add.w	r2, r1, #1024	; 0x400
 800c756:	0092      	lsls	r2, r2, #2
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 813b 	beq.w	800c9d4 <xmp3fixpt_FDCT32+0x618>
 800c75e:	f04f 0c00 	mov.w	ip, #0
 800c762:	4462      	add	r2, ip
 800c764:	9d00      	ldr	r5, [sp, #0]
 800c766:	eb05 0e02 	add.w	lr, r5, r2
	s = buf[ 0];				d[0] = d[8] = s;
 800c76a:	f850 3c80 	ldr.w	r3, [r0, #-128]
 800c76e:	f8ce 3020 	str.w	r3, [lr, #32]
 800c772:	50ab      	str	r3, [r5, r2]
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800c774:	9b01      	ldr	r3, [sp, #4]
 800c776:	009d      	lsls	r5, r3, #2
 800c778:	9b02      	ldr	r3, [sp, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 812d 	beq.w	800c9da <xmp3fixpt_FDCT32+0x61e>
 800c780:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800c784:	441d      	add	r5, r3
 800c786:	9f00      	ldr	r7, [sp, #0]
 800c788:	197b      	adds	r3, r7, r5

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800c78a:	f850 6c7c 	ldr.w	r6, [r0, #-124]
 800c78e:	621e      	str	r6, [r3, #32]
 800c790:	517e      	str	r6, [r7, r5]

	tmp = buf[25] + buf[29];
 800c792:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 800c796:	f850 5c1c 	ldr.w	r5, [r0, #-28]
 800c79a:	442f      	add	r7, r5
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800c79c:	f850 5c3c 	ldr.w	r5, [r0, #-60]
 800c7a0:	443d      	add	r5, r7
 800c7a2:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
 800c7a6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 800c7aa:	f850 6c4c 	ldr.w	r6, [r0, #-76]
 800c7ae:	f850 5c5c 	ldr.w	r5, [r0, #-92]
 800c7b2:	442e      	add	r6, r5
 800c7b4:	f8c3 6220 	str.w	r6, [r3, #544]	; 0x220
 800c7b8:	f8c3 6200 	str.w	r6, [r3, #512]	; 0x200
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800c7bc:	f850 5c2c 	ldr.w	r5, [r0, #-44]
 800c7c0:	443d      	add	r5, r7
 800c7c2:	f8c3 5320 	str.w	r5, [r3, #800]	; 0x320
 800c7c6:	f8c3 5300 	str.w	r5, [r3, #768]	; 0x300

	tmp = buf[29] + buf[27];
 800c7ca:	f850 7c14 	ldr.w	r7, [r0, #-20]
 800c7ce:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 800c7d2:	442f      	add	r7, r5
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 800c7d4:	f850 5c6c 	ldr.w	r5, [r0, #-108]
 800c7d8:	f8c3 5420 	str.w	r5, [r3, #1056]	; 0x420
 800c7dc:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800c7e0:	f850 5c2c 	ldr.w	r5, [r0, #-44]
 800c7e4:	443d      	add	r5, r7
 800c7e6:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
 800c7ea:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 800c7ee:	f850 6c54 	ldr.w	r6, [r0, #-84]
 800c7f2:	f850 5c4c 	ldr.w	r5, [r0, #-76]
 800c7f6:	442e      	add	r6, r5
 800c7f8:	f8c3 6620 	str.w	r6, [r3, #1568]	; 0x620
 800c7fc:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800c800:	f850 5c34 	ldr.w	r5, [r0, #-52]
 800c804:	443d      	add	r5, r7
 800c806:	f8c3 5720 	str.w	r5, [r3, #1824]	; 0x720
 800c80a:	f8c3 5700 	str.w	r5, [r3, #1792]	; 0x700

	tmp = buf[27] + buf[31];
 800c80e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c812:	f850 5c14 	ldr.w	r5, [r0, #-20]
 800c816:	442f      	add	r7, r5
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 800c818:	f850 5c74 	ldr.w	r5, [r0, #-116]
 800c81c:	f8c3 5820 	str.w	r5, [r3, #2080]	; 0x820
 800c820:	f8c3 5800 	str.w	r5, [r3, #2048]	; 0x800
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800c824:	f850 5c34 	ldr.w	r5, [r0, #-52]
 800c828:	443d      	add	r5, r7
 800c82a:	f8c3 5920 	str.w	r5, [r3, #2336]	; 0x920
 800c82e:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 800c832:	f850 6c44 	ldr.w	r6, [r0, #-68]
 800c836:	f850 5c54 	ldr.w	r5, [r0, #-84]
 800c83a:	442e      	add	r6, r5
 800c83c:	f8c3 6a20 	str.w	r6, [r3, #2592]	; 0xa20
 800c840:	f8c3 6a00 	str.w	r6, [r3, #2560]	; 0xa00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800c844:	f850 5c24 	ldr.w	r5, [r0, #-36]
 800c848:	443d      	add	r5, r7
 800c84a:	f8c3 5b20 	str.w	r5, [r3, #2848]	; 0xb20
 800c84e:	f8c3 5b00 	str.w	r5, [r3, #2816]	; 0xb00

	tmp = buf[31];
 800c852:	f850 6c04 	ldr.w	r6, [r0, #-4]
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800c856:	f850 5c64 	ldr.w	r5, [r0, #-100]
 800c85a:	f8c3 5c20 	str.w	r5, [r3, #3104]	; 0xc20
 800c85e:	f8c3 5c00 	str.w	r5, [r3, #3072]	; 0xc00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800c862:	f850 5c24 	ldr.w	r5, [r0, #-36]
 800c866:	4435      	add	r5, r6
 800c868:	f8c3 5d20 	str.w	r5, [r3, #3360]	; 0xd20
 800c86c:	f8c3 5d00 	str.w	r5, [r3, #3328]	; 0xd00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800c870:	f850 5c44 	ldr.w	r5, [r0, #-68]
 800c874:	f8c3 5e20 	str.w	r5, [r3, #3616]	; 0xe20
 800c878:	f8c3 5e00 	str.w	r5, [r3, #3584]	; 0xe00
	s = tmp;					d[0] = d[8] = s;
 800c87c:	f8c3 6f20 	str.w	r6, [r3, #3872]	; 0xf20
 800c880:	f8c3 6f00 	str.w	r6, [r3, #3840]	; 0xf00

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800c884:	3110      	adds	r1, #16
 800c886:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 800c88a:	9e00      	ldr	r6, [sp, #0]
 800c88c:	eb06 010c 	add.w	r1, r6, ip

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800c890:	f850 5c7c 	ldr.w	r5, [r0, #-124]
 800c894:	620d      	str	r5, [r1, #32]
 800c896:	f846 500c 	str.w	r5, [r6, ip]

	tmp = buf[30] + buf[25];
 800c89a:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800c89e:	f850 6c1c 	ldr.w	r6, [r0, #-28]
 800c8a2:	eb05 0c06 	add.w	ip, r5, r6
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800c8a6:	f850 7c3c 	ldr.w	r7, [r0, #-60]
 800c8aa:	4467      	add	r7, ip
 800c8ac:	f8c1 7120 	str.w	r7, [r1, #288]	; 0x120
 800c8b0:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 800c8b4:	f850 6c48 	ldr.w	r6, [r0, #-72]
 800c8b8:	f850 7c5c 	ldr.w	r7, [r0, #-92]
 800c8bc:	443e      	add	r6, r7
 800c8be:	f8c1 6220 	str.w	r6, [r1, #544]	; 0x220
 800c8c2:	f8c1 6200 	str.w	r6, [r1, #512]	; 0x200
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800c8c6:	f850 5c28 	ldr.w	r5, [r0, #-40]
 800c8ca:	4465      	add	r5, ip
 800c8cc:	f8c1 5320 	str.w	r5, [r1, #800]	; 0x320
 800c8d0:	f8c1 5300 	str.w	r5, [r1, #768]	; 0x300
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 800c8d4:	f850 5c68 	ldr.w	r5, [r0, #-104]
 800c8d8:	f8c1 5420 	str.w	r5, [r1, #1056]	; 0x420
 800c8dc:	f8c1 5400 	str.w	r5, [r1, #1024]	; 0x400

	tmp = buf[26] + buf[30];
 800c8e0:	f850 5c18 	ldr.w	r5, [r0, #-24]
 800c8e4:	f850 6c08 	ldr.w	r6, [r0, #-8]
 800c8e8:	eb05 0c06 	add.w	ip, r5, r6
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800c8ec:	f850 7c28 	ldr.w	r7, [r0, #-40]
 800c8f0:	4467      	add	r7, ip
 800c8f2:	f8c1 7520 	str.w	r7, [r1, #1312]	; 0x520
 800c8f6:	f8c1 7500 	str.w	r7, [r1, #1280]	; 0x500
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 800c8fa:	f850 6c58 	ldr.w	r6, [r0, #-88]
 800c8fe:	f850 7c48 	ldr.w	r7, [r0, #-72]
 800c902:	443e      	add	r6, r7
 800c904:	f8c1 6620 	str.w	r6, [r1, #1568]	; 0x620
 800c908:	f8c1 6600 	str.w	r6, [r1, #1536]	; 0x600
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800c90c:	f850 5c38 	ldr.w	r5, [r0, #-56]
 800c910:	4465      	add	r5, ip
 800c912:	f8c1 5720 	str.w	r5, [r1, #1824]	; 0x720
 800c916:	f8c1 5700 	str.w	r5, [r1, #1792]	; 0x700
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 800c91a:	f850 5c78 	ldr.w	r5, [r0, #-120]
 800c91e:	f8c1 5820 	str.w	r5, [r1, #2080]	; 0x820
 800c922:	f8c1 5800 	str.w	r5, [r1, #2048]	; 0x800

	tmp = buf[28] + buf[26];
 800c926:	f850 5c10 	ldr.w	r5, [r0, #-16]
 800c92a:	f850 6c18 	ldr.w	r6, [r0, #-24]
 800c92e:	eb05 0c06 	add.w	ip, r5, r6
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800c932:	f850 7c38 	ldr.w	r7, [r0, #-56]
 800c936:	4467      	add	r7, ip
 800c938:	f8c1 7920 	str.w	r7, [r1, #2336]	; 0x920
 800c93c:	f8c1 7900 	str.w	r7, [r1, #2304]	; 0x900
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 800c940:	f850 6c50 	ldr.w	r6, [r0, #-80]
 800c944:	f850 7c58 	ldr.w	r7, [r0, #-88]
 800c948:	443e      	add	r6, r7
 800c94a:	f8c1 6a20 	str.w	r6, [r1, #2592]	; 0xa20
 800c94e:	f8c1 6a00 	str.w	r6, [r1, #2560]	; 0xa00
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800c952:	f850 5c30 	ldr.w	r5, [r0, #-48]
 800c956:	4465      	add	r5, ip
 800c958:	f8c1 5b20 	str.w	r5, [r1, #2848]	; 0xb20
 800c95c:	f8c1 5b00 	str.w	r5, [r1, #2816]	; 0xb00
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 800c960:	f850 5c70 	ldr.w	r5, [r0, #-112]
 800c964:	f8c1 5c20 	str.w	r5, [r1, #3104]	; 0xc20
 800c968:	f8c1 5c00 	str.w	r5, [r1, #3072]	; 0xc00

	tmp = buf[24] + buf[28];
 800c96c:	f850 5c20 	ldr.w	r5, [r0, #-32]
 800c970:	f850 6c10 	ldr.w	r6, [r0, #-16]
 800c974:	4435      	add	r5, r6
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800c976:	f850 7c30 	ldr.w	r7, [r0, #-48]
 800c97a:	442f      	add	r7, r5
 800c97c:	f8c1 7d20 	str.w	r7, [r1, #3360]	; 0xd20
 800c980:	f8c1 7d00 	str.w	r7, [r1, #3328]	; 0xd00
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 800c984:	f850 6c60 	ldr.w	r6, [r0, #-96]
 800c988:	f850 7c50 	ldr.w	r7, [r0, #-80]
 800c98c:	443e      	add	r6, r7
 800c98e:	f8c1 6e20 	str.w	r6, [r1, #3616]	; 0xe20
 800c992:	f8c1 6e00 	str.w	r6, [r1, #3584]	; 0xe00
	s = buf[16] + tmp;			d[0] = d[8] = s;
 800c996:	f850 0c40 	ldr.w	r0, [r0, #-64]
 800c99a:	4405      	add	r5, r0
 800c99c:	f8c1 5f20 	str.w	r5, [r1, #3872]	; 0xf20
 800c9a0:	f8c1 5f00 	str.w	r5, [r1, #3840]	; 0xf00

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 800c9a4:	2c00      	cmp	r4, #0
 800c9a6:	d046      	beq.n	800ca36 <xmp3fixpt_FDCT32+0x67a>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 800c9a8:	9e00      	ldr	r6, [sp, #0]
 800c9aa:	58b5      	ldr	r5, [r6, r2]
 800c9ac:	17ef      	asrs	r7, r5, #31
 800c9ae:	f1c4 001f 	rsb	r0, r4, #31
 800c9b2:	fa45 f600 	asr.w	r6, r5, r0
 800c9b6:	ebb6 7fe5 	cmp.w	r6, r5, asr #31
 800c9ba:	d004      	beq.n	800c9c6 <xmp3fixpt_FDCT32+0x60a>
 800c9bc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800c9c0:	40e5      	lsrs	r5, r4
 800c9c2:	3d01      	subs	r5, #1
 800c9c4:	407d      	eors	r5, r7
 800c9c6:	40a5      	lsls	r5, r4
 800c9c8:	f8ce 5020 	str.w	r5, [lr, #32]
 800c9cc:	9e00      	ldr	r6, [sp, #0]
 800c9ce:	50b5      	str	r5, [r6, r2]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
		for (i = 16; i <= 31; i++) {
 800c9d0:	2510      	movs	r5, #16
 800c9d2:	e00a      	b.n	800c9ea <xmp3fixpt_FDCT32+0x62e>
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800c9d4:	f44f 5c88 	mov.w	ip, #4352	; 0x1100
 800c9d8:	e6c3      	b.n	800c762 <xmp3fixpt_FDCT32+0x3a6>
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e6d2      	b.n	800c784 <xmp3fixpt_FDCT32+0x3c8>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800c9de:	40a2      	lsls	r2, r4
 800c9e0:	621a      	str	r2, [r3, #32]
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
		for (i = 16; i <= 31; i++) {
 800c9e8:	3501      	adds	r5, #1
 800c9ea:	2d1f      	cmp	r5, #31
 800c9ec:	dc0c      	bgt.n	800ca08 <xmp3fixpt_FDCT32+0x64c>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	17d7      	asrs	r7, r2, #31
 800c9f2:	fa42 f600 	asr.w	r6, r2, r0
 800c9f6:	ebb6 7fe2 	cmp.w	r6, r2, asr #31
 800c9fa:	d0f0      	beq.n	800c9de <xmp3fixpt_FDCT32+0x622>
 800c9fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca00:	40e2      	lsrs	r2, r4
 800ca02:	3a01      	subs	r2, #1
 800ca04:	407a      	eors	r2, r7
 800ca06:	e7ea      	b.n	800c9de <xmp3fixpt_FDCT32+0x622>
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		for (i = 15; i >= 0; i--) {
 800ca08:	220f      	movs	r2, #15
 800ca0a:	e005      	b.n	800ca18 <xmp3fixpt_FDCT32+0x65c>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800ca0c:	40a3      	lsls	r3, r4
 800ca0e:	620b      	str	r3, [r1, #32]
 800ca10:	600b      	str	r3, [r1, #0]
 800ca12:	f501 7180 	add.w	r1, r1, #256	; 0x100
		for (i = 15; i >= 0; i--) {
 800ca16:	3a01      	subs	r2, #1
 800ca18:	2a00      	cmp	r2, #0
 800ca1a:	db0c      	blt.n	800ca36 <xmp3fixpt_FDCT32+0x67a>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800ca1c:	680b      	ldr	r3, [r1, #0]
 800ca1e:	17de      	asrs	r6, r3, #31
 800ca20:	fa43 f500 	asr.w	r5, r3, r0
 800ca24:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800ca28:	d0f0      	beq.n	800ca0c <xmp3fixpt_FDCT32+0x650>
 800ca2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca2e:	40e3      	lsrs	r3, r4
 800ca30:	3b01      	subs	r3, #1
 800ca32:	4073      	eors	r3, r6
 800ca34:	e7ea      	b.n	800ca0c <xmp3fixpt_FDCT32+0x650>
		}
	}
}
 800ca36:	b005      	add	sp, #20
 800ca38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3c:	5a82799a 	.word	0x5a82799a

0800ca40 <xmp3fixpt_Dequantize>:
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800ca40:	2800      	cmp	r0, #0
 800ca42:	f000 8133 	beq.w	800ccac <xmp3fixpt_Dequantize+0x26c>
{
 800ca46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4a:	b08b      	sub	sp, #44	; 0x2c
 800ca4c:	460e      	mov	r6, r1
 800ca4e:	4680      	mov	r8, r0
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800ca50:	6807      	ldr	r7, [r0, #0]
 800ca52:	2f00      	cmp	r7, #0
 800ca54:	f000 812d 	beq.w	800ccb2 <xmp3fixpt_Dequantize+0x272>
 800ca58:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800ca5c:	f1ba 0f00 	cmp.w	sl, #0
 800ca60:	f000 812a 	beq.w	800ccb8 <xmp3fixpt_Dequantize+0x278>
 800ca64:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800ca68:	f1bb 0f00 	cmp.w	fp, #0
 800ca6c:	f000 8127 	beq.w	800ccbe <xmp3fixpt_Dequantize+0x27e>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800ca70:	68c4      	ldr	r4, [r0, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800ca72:	2c00      	cmp	r4, #0
 800ca74:	f000 8126 	beq.w	800ccc4 <xmp3fixpt_Dequantize+0x284>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800ca78:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800ca7c:	f1b9 0f00 	cmp.w	r9, #0
 800ca80:	f000 8123 	beq.w	800ccca <xmp3fixpt_Dequantize+0x28a>
	/* si is an array of up to 4 structs, stored as gr0ch0, gr0ch1, gr1ch0, gr1ch1 */
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
	sfi = (ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS);
	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
	cbi = di->cbi;
 800ca84:	f509 7346 	add.w	r3, r9, #792	; 0x318
 800ca88:	9307      	str	r3, [sp, #28]
	mOut[0] = mOut[1] = 0;
 800ca8a:	2500      	movs	r5, #0
 800ca8c:	9509      	str	r5, [sp, #36]	; 0x24
 800ca8e:	9508      	str	r5, [sp, #32]

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800ca90:	e027      	b.n	800cae2 <xmp3fixpt_Dequantize+0xa2>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800ca92:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
			&si->sis[gr][ch], &sfi->sfis[gr][ch], &cbi[ch]);
 800ca96:	eb05 0345 	add.w	r3, r5, r5, lsl #1
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800ca9a:	f505 6290 	add.w	r2, r5, #1152	; 0x480
 800ca9e:	9907      	ldr	r1, [sp, #28]
 800caa0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800caa4:	9302      	str	r3, [sp, #8]
 800caa6:	ebc5 1145 	rsb	r1, r5, r5, lsl #5
 800caaa:	ebc6 1346 	rsb	r3, r6, r6, lsl #5
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800cab4:	445b      	add	r3, fp
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800cabc:	011b      	lsls	r3, r3, #4
 800cabe:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800cac2:	3328      	adds	r3, #40	; 0x28
 800cac4:	4453      	add	r3, sl
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	463b      	mov	r3, r7
 800caca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cace:	4649      	mov	r1, r9
 800cad0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 800cad4:	f000 f9be 	bl	800ce54 <xmp3fixpt_DequantChannel>
 800cad8:	f205 4382 	addw	r3, r5, #1154	; 0x482
 800cadc:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800cae0:	3501      	adds	r5, #1
 800cae2:	f8d8 37bc 	ldr.w	r3, [r8, #1980]	; 0x7bc
 800cae6:	42ab      	cmp	r3, r5
 800cae8:	dcd3      	bgt.n	800ca92 <xmp3fixpt_Dequantize+0x52>
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 800caea:	6a3b      	ldr	r3, [r7, #32]
 800caec:	b15b      	cbz	r3, 800cb06 <xmp3fixpt_Dequantize+0xc6>
 800caee:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800caf2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	dd2f      	ble.n	800cb5a <xmp3fixpt_Dequantize+0x11a>
 800cafa:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800cafe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dd2b      	ble.n	800cb5e <xmp3fixpt_Dequantize+0x11e>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	085a      	lsrs	r2, r3, #1
 800cb0a:	d065      	beq.n	800cbd8 <xmp3fixpt_Dequantize+0x198>
		if (fh->modeExt & 0x01) {
 800cb0c:	f013 0f01 	tst.w	r3, #1
 800cb10:	d055      	beq.n	800cbbe <xmp3fixpt_Dequantize+0x17e>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 800cb12:	f8d9 3330 	ldr.w	r3, [r9, #816]	; 0x330
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d146      	bne.n	800cba8 <xmp3fixpt_Dequantize+0x168>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 800cb1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb1c:	f8d9 3344 	ldr.w	r3, [r9, #836]	; 0x344
 800cb20:	3301      	adds	r3, #1
 800cb22:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cb26:	e053      	b.n	800cbd0 <xmp3fixpt_Dequantize+0x190>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800cb28:	3301      	adds	r3, #1
 800cb2a:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800cb2e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800cb32:	429a      	cmp	r2, r3
 800cb34:	dd15      	ble.n	800cb62 <xmp3fixpt_Dequantize+0x122>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800cb36:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800cb3a:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800cb3e:	dc02      	bgt.n	800cb46 <xmp3fixpt_Dequantize+0x106>
 800cb40:	4a63      	ldr	r2, [pc, #396]	; (800ccd0 <xmp3fixpt_Dequantize+0x290>)
 800cb42:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800cb46:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800cb4a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800cb4e:	dbeb      	blt.n	800cb28 <xmp3fixpt_Dequantize+0xe8>
 800cb50:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800cb54:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800cb58:	e7e6      	b.n	800cb28 <xmp3fixpt_Dequantize+0xe8>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	e7e5      	b.n	800cb2a <xmp3fixpt_Dequantize+0xea>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e7e3      	b.n	800cb2a <xmp3fixpt_Dequantize+0xea>
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800cb62:	2300      	movs	r3, #0
 800cb64:	e000      	b.n	800cb68 <xmp3fixpt_Dequantize+0x128>
 800cb66:	3301      	adds	r3, #1
 800cb68:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800cb6c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800cb70:	429a      	cmp	r2, r3
 800cb72:	ddc8      	ble.n	800cb06 <xmp3fixpt_Dequantize+0xc6>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800cb74:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800cb78:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb7c:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800cb80:	dc04      	bgt.n	800cb8c <xmp3fixpt_Dequantize+0x14c>
 800cb82:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800cb86:	4952      	ldr	r1, [pc, #328]	; (800ccd0 <xmp3fixpt_Dequantize+0x290>)
 800cb88:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800cb8c:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800cb90:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb94:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800cb98:	dbe5      	blt.n	800cb66 <xmp3fixpt_Dequantize+0x126>
 800cb9a:	f503 7210 	add.w	r2, r3, #576	; 0x240
 800cb9e:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800cba2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800cba6:	e7de      	b.n	800cb66 <xmp3fixpt_Dequantize+0x126>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 800cba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbaa:	f8d9 2340 	ldr.w	r2, [r9, #832]	; 0x340
 800cbae:	3215      	adds	r2, #21
 800cbb0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800cbb4:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800cbb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cbbc:	e008      	b.n	800cbd0 <xmp3fixpt_Dequantize+0x190>
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800cbbe:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800cbc2:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800cbc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cbca:	4299      	cmp	r1, r3
 800cbcc:	bfb8      	it	lt
 800cbce:	4619      	movlt	r1, r3
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 800cbd0:	aa08      	add	r2, sp, #32
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f003 fbb8 	bl	8010348 <xmp3fixpt_MidSideProc>
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 800cbd8:	6a3a      	ldr	r2, [r7, #32]
 800cbda:	f012 0f01 	tst.w	r2, #1
 800cbde:	d01b      	beq.n	800cc18 <xmp3fixpt_Dequantize+0x1d8>
		nSamps = hi->nonZeroBound[0];
 800cbe0:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800cbe4:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
		if (fh->ver == MPEG1) {
 800cbe8:	783b      	ldrb	r3, [r7, #0]
 800cbea:	b9e3      	cbnz	r3, 800cc26 <xmp3fixpt_Dequantize+0x1e6>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800cbec:	ebc6 1346 	rsb	r3, r6, r6, lsl #5
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	333e      	adds	r3, #62	; 0x3e
 800cbf4:	a808      	add	r0, sp, #32
 800cbf6:	9003      	str	r0, [sp, #12]
 800cbf8:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800cbfc:	eb0a 1a06 	add.w	sl, sl, r6, lsl #4
 800cc00:	f8da 0088 	ldr.w	r0, [sl, #136]	; 0x88
 800cc04:	9002      	str	r0, [sp, #8]
 800cc06:	1052      	asrs	r2, r2, #1
 800cc08:	9201      	str	r2, [sp, #4]
 800cc0a:	9a07      	ldr	r2, [sp, #28]
 800cc0c:	9200      	str	r2, [sp, #0]
 800cc0e:	445b      	add	r3, fp
 800cc10:	463a      	mov	r2, r7
 800cc12:	4620      	mov	r0, r4
 800cc14:	f003 fbc6 	bl	80103a4 <xmp3fixpt_IntensityProcMPEG1>
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 800cc18:	6a38      	ldr	r0, [r7, #32]
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d041      	beq.n	800cca2 <xmp3fixpt_Dequantize+0x262>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800cc1e:	9b08      	ldr	r3, [sp, #32]

static __inline int CLZ(int x)
{
	int numZeros;

	if (!x)
 800cc20:	b343      	cbz	r3, 800cc74 <xmp3fixpt_Dequantize+0x234>
		return (sizeof(int) * 8);

	numZeros = 0;
 800cc22:	2200      	movs	r2, #0
 800cc24:	e01b      	b.n	800cc5e <xmp3fixpt_Dequantize+0x21e>
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800cc26:	ebc6 1346 	rsb	r3, r6, r6, lsl #5
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	333e      	adds	r3, #62	; 0x3e
 800cc2e:	a808      	add	r0, sp, #32
 800cc30:	9004      	str	r0, [sp, #16]
 800cc32:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800cc36:	eb0a 1606 	add.w	r6, sl, r6, lsl #4
 800cc3a:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 800cc3e:	9003      	str	r0, [sp, #12]
 800cc40:	1052      	asrs	r2, r2, #1
 800cc42:	9202      	str	r2, [sp, #8]
 800cc44:	f10b 02f8 	add.w	r2, fp, #248	; 0xf8
 800cc48:	9201      	str	r2, [sp, #4]
 800cc4a:	9a07      	ldr	r2, [sp, #28]
 800cc4c:	9200      	str	r2, [sp, #0]
 800cc4e:	445b      	add	r3, fp
 800cc50:	463a      	mov	r2, r7
 800cc52:	4620      	mov	r0, r4
 800cc54:	f003 fd08 	bl	8010668 <xmp3fixpt_IntensityProcMPEG2>
 800cc58:	e7de      	b.n	800cc18 <xmp3fixpt_Dequantize+0x1d8>
	while (!(x & 0x80000000)) {
		numZeros++;
 800cc5a:	3201      	adds	r2, #1
		x <<= 1;
 800cc5c:	005b      	lsls	r3, r3, #1
	while (!(x & 0x80000000)) {
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	dafb      	bge.n	800cc5a <xmp3fixpt_Dequantize+0x21a>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800cc62:	3a01      	subs	r2, #1
 800cc64:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800cc68:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800cc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (!x)
 800cc6e:	b1db      	cbz	r3, 800cca8 <xmp3fixpt_Dequantize+0x268>
	numZeros = 0;
 800cc70:	2200      	movs	r2, #0
 800cc72:	e003      	b.n	800cc7c <xmp3fixpt_Dequantize+0x23c>
		return (sizeof(int) * 8);
 800cc74:	2220      	movs	r2, #32
 800cc76:	e7f4      	b.n	800cc62 <xmp3fixpt_Dequantize+0x222>
		numZeros++;
 800cc78:	3201      	adds	r2, #1
		x <<= 1;
 800cc7a:	005b      	lsls	r3, r3, #1
	while (!(x & 0x80000000)) {
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	dafb      	bge.n	800cc78 <xmp3fixpt_Dequantize+0x238>
 800cc80:	3a01      	subs	r2, #1
 800cc82:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800cc86:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800cc8a:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 800cc8e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800cc92:	4293      	cmp	r3, r2
 800cc94:	bfb8      	it	lt
 800cc96:	4613      	movlt	r3, r2
		hi->nonZeroBound[0] = nSamps;
 800cc98:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
		hi->nonZeroBound[1] = nSamps;
 800cc9c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 800cca0:	2000      	movs	r0, #0
}
 800cca2:	b00b      	add	sp, #44	; 0x2c
 800cca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (sizeof(int) * 8);
 800cca8:	2220      	movs	r2, #32
 800ccaa:	e7e9      	b.n	800cc80 <xmp3fixpt_Dequantize+0x240>
		return -1;
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ccb0:	4770      	bx	lr
		return -1;
 800ccb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb6:	e7f4      	b.n	800cca2 <xmp3fixpt_Dequantize+0x262>
 800ccb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccbc:	e7f1      	b.n	800cca2 <xmp3fixpt_Dequantize+0x262>
 800ccbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc2:	e7ee      	b.n	800cca2 <xmp3fixpt_Dequantize+0x262>
 800ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc8:	e7eb      	b.n	800cca2 <xmp3fixpt_Dequantize+0x262>
 800ccca:	f04f 30ff 	mov.w	r0, #4294967295
 800ccce:	e7e8      	b.n	800cca2 <xmp3fixpt_Dequantize+0x262>
 800ccd0:	c0000001 	.word	0xc0000001

0800ccd4 <DequantBlock>:
 * Outputs:     dequantized samples in Q25 format
 *
 * Return:      bitwise-OR of the unsigned outputs (for guard bit calculations)
 **************************************************************************************/
static int DequantBlock(int *inbuf, int *outbuf, int num, int scale)
{
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	b087      	sub	sp, #28
 800ccda:	4684      	mov	ip, r0
 800ccdc:	4688      	mov	r8, r1
	int scalef, scalei, shift;
	int sx, x, y;
	int mask = 0;
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
 800ccde:	f003 0103 	and.w	r1, r3, #3
 800cce2:	4c51      	ldr	r4, [pc, #324]	; (800ce28 <DequantBlock+0x154>)
 800cce4:	eb04 1481 	add.w	r4, r4, r1, lsl #6
	scalef = pow14[scale & 0x3];
 800cce8:	4850      	ldr	r0, [pc, #320]	; (800ce2c <DequantBlock+0x158>)
 800ccea:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800ccee:	9101      	str	r1, [sp, #4]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800ccf0:	ea4f 0ea3 	mov.w	lr, r3, asr #2
 800ccf4:	4677      	mov	r7, lr
 800ccf6:	2f1f      	cmp	r7, #31
 800ccf8:	bfa8      	it	ge
 800ccfa:	271f      	movge	r7, #31

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 800ccfc:	4671      	mov	r1, lr
 800ccfe:	291c      	cmp	r1, #28
 800cd00:	bfa8      	it	ge
 800cd02:	211c      	movge	r1, #28
 800cd04:	3103      	adds	r1, #3
	shift = MAX(shift, 0);
 800cd06:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	tab4[0] = 0;
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	9002      	str	r0, [sp, #8]
	tab4[1] = tab16[1] >> shift;
 800cd0e:	6863      	ldr	r3, [r4, #4]
 800cd10:	410b      	asrs	r3, r1
 800cd12:	9303      	str	r3, [sp, #12]
	tab4[2] = tab16[2] >> shift;
 800cd14:	68a3      	ldr	r3, [r4, #8]
 800cd16:	410b      	asrs	r3, r1
 800cd18:	9304      	str	r3, [sp, #16]
	tab4[3] = tab16[3] >> shift;
 800cd1a:	68e3      	ldr	r3, [r4, #12]
 800cd1c:	410b      	asrs	r3, r1
 800cd1e:	9305      	str	r3, [sp, #20]
 800cd20:	e00f      	b.n	800cd42 <DequantBlock+0x6e>

		if (x < 4) {

			y = tab4[x];

		} else if (x < 16) {
 800cd22:	4943      	ldr	r1, [pc, #268]	; (800ce30 <DequantBlock+0x15c>)
 800cd24:	4019      	ands	r1, r3
 800cd26:	b9f9      	cbnz	r1, 800cd68 <DequantBlock+0x94>

			y = tab16[x];
 800cd28:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800cd2c:	f1be 0f00 	cmp.w	lr, #0
 800cd30:	db17      	blt.n	800cd62 <DequantBlock+0x8e>
 800cd32:	413d      	asrs	r5, r7
				y >>= shift;
			}
		}

		/* sign and store */
		mask |= y;
 800cd34:	4328      	orrs	r0, r5
		*outbuf++ = (sx < 0) ? -y : y;
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	db71      	blt.n	800ce1e <DequantBlock+0x14a>
 800cd3a:	f848 5b04 	str.w	r5, [r8], #4

	} while (--num);
 800cd3e:	3a01      	subs	r2, #1
 800cd40:	d06f      	beq.n	800ce22 <DequantBlock+0x14e>
		sx = *inbuf++;
 800cd42:	f8dc 3000 	ldr.w	r3, [ip]
 800cd46:	f10c 0c04 	add.w	ip, ip, #4
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 800cd4a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
		if (x < 4) {
 800cd4e:	4939      	ldr	r1, [pc, #228]	; (800ce34 <DequantBlock+0x160>)
 800cd50:	4019      	ands	r1, r3
 800cd52:	2900      	cmp	r1, #0
 800cd54:	d1e5      	bne.n	800cd22 <DequantBlock+0x4e>
			y = tab4[x];
 800cd56:	a906      	add	r1, sp, #24
 800cd58:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800cd5c:	f855 5c10 	ldr.w	r5, [r5, #-16]
 800cd60:	e7e8      	b.n	800cd34 <DequantBlock+0x60>
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800cd62:	4279      	negs	r1, r7
 800cd64:	408d      	lsls	r5, r1
 800cd66:	e7e5      	b.n	800cd34 <DequantBlock+0x60>
			if (x < 64) {
 800cd68:	4933      	ldr	r1, [pc, #204]	; (800ce38 <DequantBlock+0x164>)
 800cd6a:	4019      	ands	r1, r3
 800cd6c:	b959      	cbnz	r1, 800cd86 <DequantBlock+0xb2>
				y = pow43[x-16];
 800cd6e:	3d10      	subs	r5, #16
 800cd70:	4932      	ldr	r1, [pc, #200]	; (800ce3c <DequantBlock+0x168>)
 800cd72:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800cd76:	9d01      	ldr	r5, [sp, #4]
 800cd78:	fb81 6505 	smull	r6, r5, r1, r5
				shift = scalei - 3;
 800cd7c:	1ef9      	subs	r1, r7, #3
			if (shift < 0) {
 800cd7e:	2900      	cmp	r1, #0
 800cd80:	db42      	blt.n	800ce08 <DequantBlock+0x134>
				y >>= shift;
 800cd82:	410d      	asrs	r5, r1
 800cd84:	e7d6      	b.n	800cd34 <DequantBlock+0x60>
				x <<= 17;
 800cd86:	0469      	lsls	r1, r5, #17
				if (x < 0x08000000)
 800cd88:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800cd8c:	da37      	bge.n	800cdfe <DequantBlock+0x12a>
					x <<= 4, shift += 4;
 800cd8e:	0569      	lsls	r1, r5, #21
 800cd90:	2504      	movs	r5, #4
 800cd92:	9500      	str	r5, [sp, #0]
				if (x < 0x20000000)
 800cd94:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800cd98:	da03      	bge.n	800cda2 <DequantBlock+0xce>
					x <<= 2, shift += 2;
 800cd9a:	0089      	lsls	r1, r1, #2
 800cd9c:	9d00      	ldr	r5, [sp, #0]
 800cd9e:	3502      	adds	r5, #2
 800cda0:	9500      	str	r5, [sp, #0]
				if (x < 0x40000000)
 800cda2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800cda6:	da03      	bge.n	800cdb0 <DequantBlock+0xdc>
					x <<= 1, shift += 1;
 800cda8:	0049      	lsls	r1, r1, #1
 800cdaa:	9d00      	ldr	r5, [sp, #0]
 800cdac:	3501      	adds	r5, #1
 800cdae:	9500      	str	r5, [sp, #0]
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800cdb0:	4d23      	ldr	r5, [pc, #140]	; (800ce40 <DequantBlock+0x16c>)
 800cdb2:	42a9      	cmp	r1, r5
 800cdb4:	dc26      	bgt.n	800ce04 <DequantBlock+0x130>
 800cdb6:	4d23      	ldr	r5, [pc, #140]	; (800ce44 <DequantBlock+0x170>)
 800cdb8:	4689      	mov	r9, r1
 800cdba:	682e      	ldr	r6, [r5, #0]
 800cdbc:	fb86 a909 	smull	sl, r9, r6, r9
				y = MULSHIFT32(y, x) + coef[1];
 800cdc0:	686e      	ldr	r6, [r5, #4]
 800cdc2:	44b1      	add	r9, r6
 800cdc4:	468a      	mov	sl, r1
 800cdc6:	fb89 ba0a 	smull	fp, sl, r9, sl
				y = MULSHIFT32(y, x) + coef[2];
 800cdca:	68ae      	ldr	r6, [r5, #8]
 800cdcc:	44b2      	add	sl, r6
 800cdce:	4689      	mov	r9, r1
 800cdd0:	fb8a b909 	smull	fp, r9, sl, r9
				y = MULSHIFT32(y, x) + coef[3];
 800cdd4:	68ee      	ldr	r6, [r5, #12]
 800cdd6:	44b1      	add	r9, r6
 800cdd8:	fb89 a101 	smull	sl, r1, r9, r1
				y = MULSHIFT32(y, x) + coef[4];
 800cddc:	692d      	ldr	r5, [r5, #16]
 800cdde:	4429      	add	r1, r5
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800cde0:	4d19      	ldr	r5, [pc, #100]	; (800ce48 <DequantBlock+0x174>)
 800cde2:	9e00      	ldr	r6, [sp, #0]
 800cde4:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
 800cde8:	fb81 9505 	smull	r9, r5, r1, r5
 800cdec:	00e9      	lsls	r1, r5, #3
 800cdee:	9d01      	ldr	r5, [sp, #4]
 800cdf0:	fb81 9505 	smull	r9, r5, r1, r5
				shift = scalei - pow2exp[shift];
 800cdf4:	4915      	ldr	r1, [pc, #84]	; (800ce4c <DequantBlock+0x178>)
 800cdf6:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800cdfa:	1a79      	subs	r1, r7, r1
 800cdfc:	e7bf      	b.n	800cd7e <DequantBlock+0xaa>
				shift = 0;
 800cdfe:	2500      	movs	r5, #0
 800ce00:	9500      	str	r5, [sp, #0]
 800ce02:	e7c7      	b.n	800cd94 <DequantBlock+0xc0>
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800ce04:	4d12      	ldr	r5, [pc, #72]	; (800ce50 <DequantBlock+0x17c>)
 800ce06:	e7d7      	b.n	800cdb8 <DequantBlock+0xe4>
				shift = -shift;
 800ce08:	4249      	negs	r1, r1
				if (y > (0x7fffffff >> shift))
 800ce0a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800ce0e:	410e      	asrs	r6, r1
 800ce10:	42ae      	cmp	r6, r5
 800ce12:	db01      	blt.n	800ce18 <DequantBlock+0x144>
					y <<= shift;
 800ce14:	408d      	lsls	r5, r1
 800ce16:	e78d      	b.n	800cd34 <DequantBlock+0x60>
					y = 0x7fffffff;		/* clip */
 800ce18:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800ce1c:	e78a      	b.n	800cd34 <DequantBlock+0x60>
		*outbuf++ = (sx < 0) ? -y : y;
 800ce1e:	426d      	negs	r5, r5
 800ce20:	e78b      	b.n	800cd3a <DequantBlock+0x66>

	return mask;
}
 800ce22:	b007      	add	sp, #28
 800ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce28:	0801a84c 	.word	0x0801a84c
 800ce2c:	0801a73c 	.word	0x0801a73c
 800ce30:	7ffffff0 	.word	0x7ffffff0
 800ce34:	7ffffffc 	.word	0x7ffffffc
 800ce38:	7fffffc0 	.word	0x7fffffc0
 800ce3c:	0801a78c 	.word	0x0801a78c
 800ce40:	5a827999 	.word	0x5a827999
 800ce44:	0801a728 	.word	0x0801a728
 800ce48:	0801a76c 	.word	0x0801a76c
 800ce4c:	0801a74c 	.word	0x0801a74c
 800ce50:	0801a714 	.word	0x0801a714

0800ce54 <xmp3fixpt_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 800ce54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce58:	b08b      	sub	sp, #44	; 0x2c
 800ce5a:	4682      	mov	sl, r0
 800ce5c:	460d      	mov	r5, r1
 800ce5e:	9204      	str	r2, [sp, #16]
 800ce60:	469b      	mov	fp, r3
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 800ce62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce64:	695b      	ldr	r3, [r3, #20]
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d01f      	beq.n	800ceaa <xmp3fixpt_DequantChannel+0x56>
		cbEndS = 13;
	} else {
		/* long block */
		cbStartL = 0;
		cbEndL =   22;
		cbStartS = 13;
 800ce6a:	f04f 080d 	mov.w	r8, #13
		cbEndL =   22;
 800ce6e:	2316      	movs	r3, #22
 800ce70:	9300      	str	r3, [sp, #0]
		cbEndS =   13;
	}
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	9307      	str	r3, [sp, #28]
 800ce76:	9308      	str	r3, [sp, #32]
 800ce78:	9309      	str	r3, [sp, #36]	; 0x24

	/* sfactScale = 0 --> quantizer step size = 2
	 * sfactScale = 1 --> quantizer step size = sqrt(2)
	 *   so sfactMultiplier = 2 or 4 (jump through globalGain by powers of 2 or sqrt(2))
	 */
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800ce7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7e:	3301      	adds	r3, #1
 800ce80:	005b      	lsls	r3, r3, #1
 800ce82:	9301      	str	r3, [sp, #4]

	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
 800ce84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce86:	689b      	ldr	r3, [r3, #8]
	if (fh->modeExt >> 1)
 800ce88:	f8db 2020 	ldr.w	r2, [fp, #32]
 800ce8c:	0852      	lsrs	r2, r2, #1
 800ce8e:	d000      	beq.n	800ce92 <xmp3fixpt_DequantChannel+0x3e>
		 globalGain -= 2;
 800ce90:	3b02      	subs	r3, #2
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 800ce92:	3302      	adds	r3, #2
 800ce94:	9302      	str	r3, [sp, #8]
	gbMask = 0;
 800ce96:	f04f 0900 	mov.w	r9, #0

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 800ce9a:	464c      	mov	r4, r9
	i = 0;
 800ce9c:	464f      	mov	r7, r9
 800ce9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea2:	9505      	str	r5, [sp, #20]
 800cea4:	f8dd 8010 	ldr.w	r8, [sp, #16]
	for (cb = 0; cb < cbEndL; cb++) {
 800cea8:	e01a      	b.n	800cee0 <xmp3fixpt_DequantChannel+0x8c>
		if (sis->mixedBlock) { 
 800ceaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	b13b      	cbz	r3, 800cec2 <xmp3fixpt_DequantChannel+0x6e>
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800ceb2:	f89b 3000 	ldrb.w	r3, [fp]
 800ceb6:	b93b      	cbnz	r3, 800cec8 <xmp3fixpt_DequantChannel+0x74>
			cbStartS = 3; 
 800ceb8:	f04f 0803 	mov.w	r8, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800cebc:	2308      	movs	r3, #8
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	e7d7      	b.n	800ce72 <xmp3fixpt_DequantChannel+0x1e>
			cbStartS = 0;
 800cec2:	f8dd 8000 	ldr.w	r8, [sp]
 800cec6:	e7d4      	b.n	800ce72 <xmp3fixpt_DequantChannel+0x1e>
			cbStartS = 3; 
 800cec8:	f04f 0803 	mov.w	r8, #3
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800cecc:	2306      	movs	r3, #6
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	e7cf      	b.n	800ce72 <xmp3fixpt_DequantChannel+0x1e>
		i += nSamps;

		/* update highest non-zero critical band */
		if (nonZero) 
			cbMax[0] = cb;
		gbMask |= nonZero;
 800ced2:	ea49 0903 	orr.w	r9, r9, r3

		if (i >= *nonZeroBound) 
 800ced6:	f8d8 3000 	ldr.w	r3, [r8]
 800ceda:	42bb      	cmp	r3, r7
 800cedc:	dd25      	ble.n	800cf2a <xmp3fixpt_DequantChannel+0xd6>
	for (cb = 0; cb < cbEndL; cb++) {
 800cede:	4634      	mov	r4, r6
 800cee0:	9b00      	ldr	r3, [sp, #0]
 800cee2:	429c      	cmp	r4, r3
 800cee4:	da21      	bge.n	800cf2a <xmp3fixpt_DequantChannel+0xd6>
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800cee6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800ceea:	1c66      	adds	r6, r4, #1
 800ceec:	f933 5016 	ldrsh.w	r5, [r3, r6, lsl #1]
 800cef0:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 800cef4:	1aed      	subs	r5, r5, r3
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800cef6:	9b02      	ldr	r3, [sp, #8]
 800cef8:	f1c3 01d2 	rsb	r1, r3, #210	; 0xd2
 800cefc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cefe:	5d1b      	ldrb	r3, [r3, r4]
 800cf00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cf04:	b10a      	cbz	r2, 800cf0a <xmp3fixpt_DequantChannel+0xb6>
 800cf06:	4a66      	ldr	r2, [pc, #408]	; (800d0a0 <xmp3fixpt_DequantChannel+0x24c>)
 800cf08:	5d12      	ldrb	r2, [r2, r4]
 800cf0a:	4413      	add	r3, r2
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800cf0c:	eb0a 0087 	add.w	r0, sl, r7, lsl #2
 800cf10:	9a01      	ldr	r2, [sp, #4]
 800cf12:	fb02 1303 	mla	r3, r2, r3, r1
 800cf16:	462a      	mov	r2, r5
 800cf18:	4601      	mov	r1, r0
 800cf1a:	f7ff fedb 	bl	800ccd4 <DequantBlock>
		i += nSamps;
 800cf1e:	442f      	add	r7, r5
		if (nonZero) 
 800cf20:	4603      	mov	r3, r0
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d0d5      	beq.n	800ced2 <xmp3fixpt_DequantChannel+0x7e>
			cbMax[0] = cb;
 800cf26:	9407      	str	r4, [sp, #28]
 800cf28:	e7d3      	b.n	800ced2 <xmp3fixpt_DequantChannel+0x7e>
			break;
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
 800cf2a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cf2e:	9d05      	ldr	r5, [sp, #20]
 800cf30:	2300      	movs	r3, #0
 800cf32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cf34:	6013      	str	r3, [r2, #0]
	cbi->cbEndL  = cbMax[0];
 800cf36:	9a07      	ldr	r2, [sp, #28]
 800cf38:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cf3a:	614a      	str	r2, [r1, #20]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800cf3c:	60cb      	str	r3, [r1, #12]
 800cf3e:	608b      	str	r3, [r1, #8]
 800cf40:	604b      	str	r3, [r1, #4]
	cbi->cbEndSMax = 0;
 800cf42:	610b      	str	r3, [r1, #16]

	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 800cf44:	f1b8 0f0b 	cmp.w	r8, #11
 800cf48:	dc0d      	bgt.n	800cf66 <xmp3fixpt_DequantChannel+0x112>
		return CLZ(gbMask) - 1;
	
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800cf4a:	f8cd 801c 	str.w	r8, [sp, #28]
 800cf4e:	f8cd 8020 	str.w	r8, [sp, #32]
 800cf52:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800cf56:	4643      	mov	r3, r8
 800cf58:	46b8      	mov	r8, r7
 800cf5a:	f8cd b014 	str.w	fp, [sp, #20]
 800cf5e:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 800cf62:	461f      	mov	r7, r3
 800cf64:	e059      	b.n	800d01a <xmp3fixpt_DequantChannel+0x1c6>
	if (!x)
 800cf66:	f1b9 0f00 	cmp.w	r9, #0
 800cf6a:	d104      	bne.n	800cf76 <xmp3fixpt_DequantChannel+0x122>
		return (sizeof(int) * 8);
 800cf6c:	2320      	movs	r3, #32
 800cf6e:	e005      	b.n	800cf7c <xmp3fixpt_DequantChannel+0x128>
		numZeros++;
 800cf70:	3301      	adds	r3, #1
		x <<= 1;
 800cf72:	ea4f 0949 	mov.w	r9, r9, lsl #1
	while (!(x & 0x80000000)) {
 800cf76:	f1b9 0f00 	cmp.w	r9, #0
 800cf7a:	daf9      	bge.n	800cf70 <xmp3fixpt_DequantChannel+0x11c>
		return CLZ(gbMask) - 1;
 800cf7c:	1e58      	subs	r0, r3, #1
 800cf7e:	e089      	b.n	800d094 <xmp3fixpt_DequantChannel+0x240>
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);

			/* update highest non-zero critical band */
			if (nonZero)
				cbMax[w] = cb;
			gbMask |= nonZero;
 800cf80:	ea49 0903 	orr.w	r9, r9, r3
		for (w = 0; w < 3; w++) {
 800cf84:	3601      	adds	r6, #1
 800cf86:	2e02      	cmp	r6, #2
 800cf88:	dc26      	bgt.n	800cfd8 <xmp3fixpt_DequantChannel+0x184>
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 800cf8a:	9b02      	ldr	r3, [sp, #8]
 800cf8c:	f1c3 03d2 	rsb	r3, r3, #210	; 0xd2
 800cf90:	f106 020a 	add.w	r2, r6, #10
 800cf94:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cf96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cf9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf9e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800cfa2:	445a      	add	r2, fp
 800cfa4:	4432      	add	r2, r6
 800cfa6:	7dd2      	ldrb	r2, [r2, #23]
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800cfa8:	fb04 f106 	mul.w	r1, r4, r6
 800cfac:	eb08 0001 	add.w	r0, r8, r1
 800cfb0:	9d01      	ldr	r5, [sp, #4]
 800cfb2:	fb05 3302 	mla	r3, r5, r2, r3
 800cfb6:	4622      	mov	r2, r4
 800cfb8:	9d00      	ldr	r5, [sp, #0]
 800cfba:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800cfbe:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800cfc2:	f7ff fe87 	bl	800ccd4 <DequantBlock>
			if (nonZero)
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d0d9      	beq.n	800cf80 <xmp3fixpt_DequantChannel+0x12c>
				cbMax[w] = cb;
 800cfcc:	aa0a      	add	r2, sp, #40	; 0x28
 800cfce:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800cfd2:	f842 7c0c 	str.w	r7, [r2, #-12]
 800cfd6:	e7d3      	b.n	800cf80 <xmp3fixpt_DequantChannel+0x12c>
		}

		/* reorder blocks */
		buf = (ARRAY3 *)(sampleBuf + i);
 800cfd8:	9d00      	ldr	r5, [sp, #0]
 800cfda:	eb0a 0688 	add.w	r6, sl, r8, lsl #2
		i += 3*nSamps;
 800cfde:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cfe2:	4498      	add	r8, r3
		for (j = 0; j < nSamps; j++) {
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	e011      	b.n	800d00c <xmp3fixpt_DequantChannel+0x1b8>
			buf[j][0] = workBuf[0*nSamps + j];
 800cfe8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800cfec:	eb06 0281 	add.w	r2, r6, r1, lsl #2
 800cff0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800cff4:	f846 0021 	str.w	r0, [r6, r1, lsl #2]
			buf[j][1] = workBuf[1*nSamps + j];
 800cff8:	1919      	adds	r1, r3, r4
 800cffa:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800cffe:	6051      	str	r1, [r2, #4]
			buf[j][2] = workBuf[2*nSamps + j];
 800d000:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800d004:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800d008:	6091      	str	r1, [r2, #8]
		for (j = 0; j < nSamps; j++) {
 800d00a:	3301      	adds	r3, #1
 800d00c:	42a3      	cmp	r3, r4
 800d00e:	dbeb      	blt.n	800cfe8 <xmp3fixpt_DequantChannel+0x194>
		}

		ASSERT(3*nSamps <= MAX_REORDER_SAMPS);

		if (i >= *nonZeroBound) 
 800d010:	9b04      	ldr	r3, [sp, #16]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4543      	cmp	r3, r8
 800d016:	dd16      	ble.n	800d046 <xmp3fixpt_DequantChannel+0x1f2>
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800d018:	9f03      	ldr	r7, [sp, #12]
 800d01a:	2f0c      	cmp	r7, #12
 800d01c:	dc13      	bgt.n	800d046 <xmp3fixpt_DequantChannel+0x1f2>
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800d01e:	9b05      	ldr	r3, [sp, #20]
 800d020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d022:	1c7a      	adds	r2, r7, #1
 800d024:	9203      	str	r2, [sp, #12]
 800d026:	f107 0215 	add.w	r2, r7, #21
 800d02a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d02e:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 800d032:	f107 0214 	add.w	r2, r7, #20
 800d036:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800d03a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d03e:	1ae4      	subs	r4, r4, r3
		for (w = 0; w < 3; w++) {
 800d040:	2600      	movs	r6, #0
 800d042:	9500      	str	r5, [sp, #0]
 800d044:	e79f      	b.n	800cf86 <xmp3fixpt_DequantChannel+0x132>
	 * however, the original nzb is no longer necessarily true
	 *   for each cb, buf[][] is updated with 3*nSamps samples (i increases 3*nSamps each time)
	 *   (buf[j + 1][0] = 3 (input) samples ahead of buf[j][0])
     * so update nonZeroBound to i
	 */
	*nonZeroBound = i;
 800d046:	9b04      	ldr	r3, [sp, #16]
 800d048:	f8c3 8000 	str.w	r8, [r3]

	ASSERT(*nonZeroBound <= MAX_NSAMP);

	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800d04c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	b1bb      	cbz	r3, 800d082 <xmp3fixpt_DequantChannel+0x22e>
 800d052:	2302      	movs	r3, #2
 800d054:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d056:	6013      	str	r3, [r2, #0]

	cbi->cbEndS[0] = cbMax[0];
 800d058:	9b07      	ldr	r3, [sp, #28]
 800d05a:	6053      	str	r3, [r2, #4]
	cbi->cbEndS[1] = cbMax[1];
 800d05c:	9908      	ldr	r1, [sp, #32]
 800d05e:	6091      	str	r1, [r2, #8]
	cbi->cbEndS[2] = cbMax[2];
 800d060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d062:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d064:	60c2      	str	r2, [r0, #12]

	cbi->cbEndSMax = cbMax[0];
 800d066:	6103      	str	r3, [r0, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 800d068:	428b      	cmp	r3, r1
 800d06a:	bfb8      	it	lt
 800d06c:	460b      	movlt	r3, r1
 800d06e:	6103      	str	r3, [r0, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800d070:	4293      	cmp	r3, r2
 800d072:	bfb8      	it	lt
 800d074:	4613      	movlt	r3, r2
 800d076:	6103      	str	r3, [r0, #16]
	if (!x)
 800d078:	f1b9 0f00 	cmp.w	r9, #0
 800d07c:	d00d      	beq.n	800d09a <xmp3fixpt_DequantChannel+0x246>
	numZeros = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	e004      	b.n	800d08c <xmp3fixpt_DequantChannel+0x238>
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800d082:	2301      	movs	r3, #1
 800d084:	e7e6      	b.n	800d054 <xmp3fixpt_DequantChannel+0x200>
		numZeros++;
 800d086:	3301      	adds	r3, #1
		x <<= 1;
 800d088:	ea4f 0949 	mov.w	r9, r9, lsl #1
	while (!(x & 0x80000000)) {
 800d08c:	f1b9 0f00 	cmp.w	r9, #0
 800d090:	daf9      	bge.n	800d086 <xmp3fixpt_DequantChannel+0x232>

	return CLZ(gbMask) - 1;
 800d092:	1e58      	subs	r0, r3, #1
}
 800d094:	b00b      	add	sp, #44	; 0x2c
 800d096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (sizeof(int) * 8);
 800d09a:	2320      	movs	r3, #32
 800d09c:	e7f9      	b.n	800d092 <xmp3fixpt_DequantChannel+0x23e>
 800d09e:	bf00      	nop
 800d0a0:	0801a94c 	.word	0x0801a94c

0800d0a4 <DecodeHuffmanPairs>:
 * Notes:       assumes that nVals is an even number
 *              si_huff.bit tests every Huffman codeword in every table (though not
 *                necessarily all linBits outputs for x,y > 15)
 **************************************************************************************/
static int DecodeHuffmanPairs(int *xy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 800d0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a8:	b085      	sub	sp, #20
 800d0aa:	4614      	mov	r4, r2
 800d0ac:	9303      	str	r3, [sp, #12]
 800d0ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	int cachedBits, padBits, len, startBits, linBits, maxBits, minBits;
	HuffTabType tabType;
	unsigned short cw, *tBase, *tCurr;
	unsigned int cache;

	if(nVals <= 0) 
 800d0b0:	1e0d      	subs	r5, r1, #0
 800d0b2:	f340 81c1 	ble.w	800d438 <DecodeHuffmanPairs+0x394>
		return 0;

	if (bitsLeft < 0)
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f2c0 81c2 	blt.w	800d440 <DecodeHuffmanPairs+0x39c>
		return -1;
	startBits = bitsLeft;

	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800d0bc:	4bb4      	ldr	r3, [pc, #720]	; (800d390 <DecodeHuffmanPairs+0x2ec>)
 800d0be:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 800d0c2:	49b4      	ldr	r1, [pc, #720]	; (800d394 <DecodeHuffmanPairs+0x2f0>)
 800d0c4:	eb01 0346 	add.w	r3, r1, r6, lsl #1
 800d0c8:	9301      	str	r3, [sp, #4]
	linBits = huffTabLookup[tabIdx].linBits;
 800d0ca:	4bb3      	ldr	r3, [pc, #716]	; (800d398 <DecodeHuffmanPairs+0x2f4>)
 800d0cc:	f853 a034 	ldr.w	sl, [r3, r4, lsl #3]
	tabType = huffTabLookup[tabIdx].tabType;
 800d0d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d0d4:	f893 b004 	ldrb.w	fp, [r3, #4]
	ASSERT(tabIdx >= 0);
	ASSERT(tabType != invalidTab);

	/* initially fill cache with any partial byte */
	cache = 0;
	cachedBits = (8 - bitOffset) & 0x07;
 800d0d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0da:	425b      	negs	r3, r3
	if (cachedBits)
 800d0dc:	f013 0307 	ands.w	r3, r3, #7
 800d0e0:	d006      	beq.n	800d0f0 <DecodeHuffmanPairs+0x4c>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800d0e2:	f812 cb01 	ldrb.w	ip, [r2], #1
 800d0e6:	f1c3 0420 	rsb	r4, r3, #32
 800d0ea:	fa0c fc04 	lsl.w	ip, ip, r4
 800d0ee:	e001      	b.n	800d0f4 <DecodeHuffmanPairs+0x50>
	cache = 0;
 800d0f0:	f04f 0c00 	mov.w	ip, #0
	bitsLeft -= cachedBits;
 800d0f4:	9c03      	ldr	r4, [sp, #12]
 800d0f6:	eba4 0e03 	sub.w	lr, r4, r3

	if (tabType == noBits) {
 800d0fa:	f1bb 0f00 	cmp.w	fp, #0
 800d0fe:	d030      	beq.n	800d162 <DecodeHuffmanPairs+0xbe>
		for (i = 0; i < nVals; i+=2) {
			xy[i+0] = 0;
			xy[i+1] = 0;
		}
		return 0;
	} else if (tabType == oneShot) {
 800d100:	f1bb 0f01 	cmp.w	fp, #1
 800d104:	d02f      	beq.n	800d166 <DecodeHuffmanPairs+0xc2>
				nVals -= 2;
			}
		}
		bitsLeft += (cachedBits - padBits);
		return (startBits - bitsLeft);
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 800d106:	f1ab 0102 	sub.w	r1, fp, #2
 800d10a:	b2c9      	uxtb	r1, r1
 800d10c:	2901      	cmp	r1, #1
 800d10e:	f200 80ae 	bhi.w	800d26e <DecodeHuffmanPairs+0x1ca>
		tCurr = tBase;
 800d112:	9e01      	ldr	r6, [sp, #4]
		padBits = 0;
 800d114:	2100      	movs	r1, #0
 800d116:	9102      	str	r1, [sp, #8]
		while (nVals > 0) {
 800d118:	2d00      	cmp	r5, #0
 800d11a:	f340 8186 	ble.w	800d42a <DecodeHuffmanPairs+0x386>
			/* refill cache - assumes cachedBits <= 16 */
			if (bitsLeft >= 16) {
 800d11e:	f1be 0f0f 	cmp.w	lr, #15
 800d122:	f340 80a7 	ble.w	800d274 <DecodeHuffmanPairs+0x1d0>
				/* load 2 new bytes into left-justified cache */
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800d126:	4611      	mov	r1, r2
 800d128:	f811 4b02 	ldrb.w	r4, [r1], #2
 800d12c:	f1c3 0718 	rsb	r7, r3, #24
 800d130:	40bc      	lsls	r4, r7
 800d132:	ea4c 0c04 	orr.w	ip, ip, r4
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800d136:	7852      	ldrb	r2, [r2, #1]
 800d138:	f1c3 0410 	rsb	r4, r3, #16
 800d13c:	40a2      	lsls	r2, r4
 800d13e:	ea4c 0c02 	orr.w	ip, ip, r2
				cachedBits += 16;
 800d142:	3310      	adds	r3, #16
				bitsLeft -= 16;
 800d144:	f1ae 0e10 	sub.w	lr, lr, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800d148:	460a      	mov	r2, r1
 800d14a:	e131      	b.n	800d3b0 <DecodeHuffmanPairs+0x30c>
			xy[i+0] = 0;
 800d14c:	2200      	movs	r2, #0
 800d14e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			xy[i+1] = 0;
 800d152:	1c59      	adds	r1, r3, #1
 800d154:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		for (i = 0; i < nVals; i+=2) {
 800d158:	3302      	adds	r3, #2
 800d15a:	42ab      	cmp	r3, r5
 800d15c:	dbf6      	blt.n	800d14c <DecodeHuffmanPairs+0xa8>
		return 0;
 800d15e:	2000      	movs	r0, #0
 800d160:	e16b      	b.n	800d43a <DecodeHuffmanPairs+0x396>
		for (i = 0; i < nVals; i+=2) {
 800d162:	2300      	movs	r3, #0
 800d164:	e7f9      	b.n	800d15a <DecodeHuffmanPairs+0xb6>
		maxBits = GetMaxbits(tBase[0]);
 800d166:	f831 4016 	ldrh.w	r4, [r1, r6, lsl #1]
 800d16a:	f004 040f 	and.w	r4, r4, #15
		padBits = 0;
 800d16e:	2600      	movs	r6, #0
 800d170:	9f01      	ldr	r7, [sp, #4]
 800d172:	4692      	mov	sl, r2
		while (nVals > 0) {
 800d174:	2d00      	cmp	r5, #0
 800d176:	dd74      	ble.n	800d262 <DecodeHuffmanPairs+0x1be>
			if (bitsLeft >= 16) {
 800d178:	f1be 0f0f 	cmp.w	lr, #15
 800d17c:	dd14      	ble.n	800d1a8 <DecodeHuffmanPairs+0x104>
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800d17e:	46d0      	mov	r8, sl
 800d180:	f818 1b02 	ldrb.w	r1, [r8], #2
 800d184:	f1c3 0918 	rsb	r9, r3, #24
 800d188:	fa01 f109 	lsl.w	r1, r1, r9
 800d18c:	ea4c 0c01 	orr.w	ip, ip, r1
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800d190:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800d194:	f1c3 0110 	rsb	r1, r3, #16
 800d198:	408a      	lsls	r2, r1
 800d19a:	ea4c 0c02 	orr.w	ip, ip, r2
				cachedBits += 16;
 800d19e:	3310      	adds	r3, #16
				bitsLeft -= 16;
 800d1a0:	f1ae 0e10 	sub.w	lr, lr, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800d1a4:	46c2      	mov	sl, r8
 800d1a6:	e033      	b.n	800d210 <DecodeHuffmanPairs+0x16c>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800d1a8:	eb0e 0103 	add.w	r1, lr, r3
 800d1ac:	2900      	cmp	r1, #0
 800d1ae:	f340 814a 	ble.w	800d446 <DecodeHuffmanPairs+0x3a2>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800d1b2:	f1be 0f00 	cmp.w	lr, #0
 800d1b6:	dd09      	ble.n	800d1cc <DecodeHuffmanPairs+0x128>
 800d1b8:	4652      	mov	r2, sl
 800d1ba:	f812 6b01 	ldrb.w	r6, [r2], #1
 800d1be:	f1c3 0818 	rsb	r8, r3, #24
 800d1c2:	fa06 f608 	lsl.w	r6, r6, r8
 800d1c6:	ea4c 0c06 	orr.w	ip, ip, r6
 800d1ca:	4692      	mov	sl, r2
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800d1cc:	f1be 0f08 	cmp.w	lr, #8
 800d1d0:	dd09      	ble.n	800d1e6 <DecodeHuffmanPairs+0x142>
 800d1d2:	4652      	mov	r2, sl
 800d1d4:	f812 6b01 	ldrb.w	r6, [r2], #1
 800d1d8:	f1c3 0310 	rsb	r3, r3, #16
 800d1dc:	fa06 f303 	lsl.w	r3, r6, r3
 800d1e0:	ea4c 0c03 	orr.w	ip, ip, r3
 800d1e4:	4692      	mov	sl, r2
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800d1e6:	1e4e      	subs	r6, r1, #1
 800d1e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1ec:	4133      	asrs	r3, r6
 800d1ee:	ea0c 0c03 	and.w	ip, ip, r3
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800d1f2:	f101 030b 	add.w	r3, r1, #11
				padBits = 11;
 800d1f6:	260b      	movs	r6, #11
				bitsLeft = 0;
 800d1f8:	f04f 0e00 	mov.w	lr, #0
 800d1fc:	e008      	b.n	800d210 <DecodeHuffmanPairs+0x16c>
				if (cachedBits < padBits)
 800d1fe:	42b3      	cmp	r3, r6
 800d200:	f2c0 8124 	blt.w	800d44c <DecodeHuffmanPairs+0x3a8>
				*xy++ = x;
 800d204:	4601      	mov	r1, r0
 800d206:	f841 9b08 	str.w	r9, [r1], #8
				*xy++ = y;
 800d20a:	6042      	str	r2, [r0, #4]
				nVals -= 2;
 800d20c:	3d02      	subs	r5, #2
				*xy++ = y;
 800d20e:	4608      	mov	r0, r1
			while (nVals > 0 && cachedBits >= 11 ) {
 800d210:	2d00      	cmp	r5, #0
 800d212:	bfc8      	it	gt
 800d214:	2b0a      	cmpgt	r3, #10
 800d216:	ddad      	ble.n	800d174 <DecodeHuffmanPairs+0xd0>
				cw = tBase[cache >> (32 - maxBits)];
 800d218:	f1c4 0120 	rsb	r1, r4, #32
 800d21c:	fa2c f101 	lsr.w	r1, ip, r1
 800d220:	3101      	adds	r1, #1
 800d222:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
				len = GetHLen(cw);
 800d226:	ea4f 3811 	mov.w	r8, r1, lsr #12
				cachedBits -= len;
 800d22a:	eba3 3311 	sub.w	r3, r3, r1, lsr #12
				cache <<= len;
 800d22e:	fa0c fc08 	lsl.w	ip, ip, r8
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800d232:	f3c1 1203 	ubfx	r2, r1, #4, #4
 800d236:	4691      	mov	r9, r2
 800d238:	b132      	cbz	r2, 800d248 <DecodeHuffmanPairs+0x1a4>
 800d23a:	f00c 4900 	and.w	r9, ip, #2147483648	; 0x80000000
 800d23e:	ea42 0909 	orr.w	r9, r2, r9
 800d242:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d246:	3b01      	subs	r3, #1
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800d248:	f3c1 2103 	ubfx	r1, r1, #8, #4
 800d24c:	460a      	mov	r2, r1
 800d24e:	2900      	cmp	r1, #0
 800d250:	d0d5      	beq.n	800d1fe <DecodeHuffmanPairs+0x15a>
 800d252:	f00c 4800 	and.w	r8, ip, #2147483648	; 0x80000000
 800d256:	ea41 0208 	orr.w	r2, r1, r8
 800d25a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d25e:	3b01      	subs	r3, #1
 800d260:	e7cd      	b.n	800d1fe <DecodeHuffmanPairs+0x15a>
		bitsLeft += (cachedBits - padBits);
 800d262:	1b9b      	subs	r3, r3, r6
 800d264:	449e      	add	lr, r3
		return (startBits - bitsLeft);
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	eba3 000e 	sub.w	r0, r3, lr
 800d26c:	e0e5      	b.n	800d43a <DecodeHuffmanPairs+0x396>
		bitsLeft += (cachedBits - padBits);
		return (startBits - bitsLeft);
	}

	/* error in bitstream - trying to access unused Huffman table */
	return -1;
 800d26e:	f04f 30ff 	mov.w	r0, #4294967295
 800d272:	e0e2      	b.n	800d43a <DecodeHuffmanPairs+0x396>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800d274:	eb0e 0103 	add.w	r1, lr, r3
 800d278:	2900      	cmp	r1, #0
 800d27a:	f340 80ea 	ble.w	800d452 <DecodeHuffmanPairs+0x3ae>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800d27e:	f1be 0f00 	cmp.w	lr, #0
 800d282:	dd06      	ble.n	800d292 <DecodeHuffmanPairs+0x1ee>
 800d284:	f812 4b01 	ldrb.w	r4, [r2], #1
 800d288:	f1c3 0718 	rsb	r7, r3, #24
 800d28c:	40bc      	lsls	r4, r7
 800d28e:	ea4c 0c04 	orr.w	ip, ip, r4
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800d292:	f1be 0f08 	cmp.w	lr, #8
 800d296:	dd07      	ble.n	800d2a8 <DecodeHuffmanPairs+0x204>
 800d298:	f812 4b01 	ldrb.w	r4, [r2], #1
 800d29c:	f1c3 0310 	rsb	r3, r3, #16
 800d2a0:	fa04 f303 	lsl.w	r3, r4, r3
 800d2a4:	ea4c 0c03 	orr.w	ip, ip, r3
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800d2a8:	1e4c      	subs	r4, r1, #1
 800d2aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2ae:	4123      	asrs	r3, r4
 800d2b0:	ea0c 0c03 	and.w	ip, ip, r3
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800d2b4:	f101 030b 	add.w	r3, r1, #11
				padBits = 11;
 800d2b8:	210b      	movs	r1, #11
 800d2ba:	9102      	str	r1, [sp, #8]
				bitsLeft = 0;
 800d2bc:	f04f 0e00 	mov.w	lr, #0
 800d2c0:	e076      	b.n	800d3b0 <DecodeHuffmanPairs+0x30c>
					cachedBits -= maxBits;
 800d2c2:	1b1b      	subs	r3, r3, r4
					cache <<= maxBits;
 800d2c4:	fa0c fc04 	lsl.w	ip, ip, r4
					tCurr += cw;
 800d2c8:	eb06 0641 	add.w	r6, r6, r1, lsl #1
					continue;
 800d2cc:	e070      	b.n	800d3b0 <DecodeHuffmanPairs+0x30c>
					minBits = linBits + 1 + (y ? 1 : 0);
 800d2ce:	f10a 0801 	add.w	r8, sl, #1
 800d2d2:	2900      	cmp	r1, #0
 800d2d4:	bf18      	it	ne
 800d2d6:	f108 0801 	addne.w	r8, r8, #1
					if (cachedBits + bitsLeft < minBits)
 800d2da:	eb0e 0403 	add.w	r4, lr, r3
 800d2de:	4544      	cmp	r4, r8
 800d2e0:	da0d      	bge.n	800d2fe <DecodeHuffmanPairs+0x25a>
						return -1;
 800d2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e6:	e0a8      	b.n	800d43a <DecodeHuffmanPairs+0x396>
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800d2e8:	f812 4b01 	ldrb.w	r4, [r2], #1
 800d2ec:	f1c3 0918 	rsb	r9, r3, #24
 800d2f0:	fa04 f409 	lsl.w	r4, r4, r9
 800d2f4:	ea4c 0c04 	orr.w	ip, ip, r4
						cachedBits += 8;
 800d2f8:	3308      	adds	r3, #8
						bitsLeft -= 8;
 800d2fa:	f1ae 0e08 	sub.w	lr, lr, #8
					while (cachedBits < minBits) {
 800d2fe:	4543      	cmp	r3, r8
 800d300:	dbf2      	blt.n	800d2e8 <DecodeHuffmanPairs+0x244>
					if (bitsLeft < 0) {
 800d302:	f1be 0f00 	cmp.w	lr, #0
 800d306:	db09      	blt.n	800d31c <DecodeHuffmanPairs+0x278>
					x += (int)(cache >> (32 - linBits));
 800d308:	f1ca 0420 	rsb	r4, sl, #32
 800d30c:	fa2c f404 	lsr.w	r4, ip, r4
 800d310:	4426      	add	r6, r4
					cachedBits -= linBits;
 800d312:	eba3 030a 	sub.w	r3, r3, sl
					cache <<= linBits;
 800d316:	fa0c fc0a 	lsl.w	ip, ip, sl
 800d31a:	e06f      	b.n	800d3fc <DecodeHuffmanPairs+0x358>
						cachedBits += bitsLeft;
 800d31c:	4473      	add	r3, lr
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800d31e:	f103 3eff 	add.w	lr, r3, #4294967295
 800d322:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d326:	fa44 f40e 	asr.w	r4, r4, lr
 800d32a:	ea0c 0c04 	and.w	ip, ip, r4
						bitsLeft = 0;
 800d32e:	f04f 0e00 	mov.w	lr, #0
 800d332:	e7e9      	b.n	800d308 <DecodeHuffmanPairs+0x264>
					minBits = linBits + 1;
 800d334:	f10a 0701 	add.w	r7, sl, #1
					if (cachedBits + bitsLeft < minBits)
 800d338:	eb0e 0403 	add.w	r4, lr, r3
 800d33c:	42bc      	cmp	r4, r7
 800d33e:	da0d      	bge.n	800d35c <DecodeHuffmanPairs+0x2b8>
						return -1;
 800d340:	f04f 30ff 	mov.w	r0, #4294967295
 800d344:	e079      	b.n	800d43a <DecodeHuffmanPairs+0x396>
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800d346:	f812 4b01 	ldrb.w	r4, [r2], #1
 800d34a:	f1c3 0818 	rsb	r8, r3, #24
 800d34e:	fa04 f408 	lsl.w	r4, r4, r8
 800d352:	ea4c 0c04 	orr.w	ip, ip, r4
						cachedBits += 8;
 800d356:	3308      	adds	r3, #8
						bitsLeft -= 8;
 800d358:	f1ae 0e08 	sub.w	lr, lr, #8
					while (cachedBits < minBits) {
 800d35c:	42bb      	cmp	r3, r7
 800d35e:	dbf2      	blt.n	800d346 <DecodeHuffmanPairs+0x2a2>
					if (bitsLeft < 0) {
 800d360:	f1be 0f00 	cmp.w	lr, #0
 800d364:	db09      	blt.n	800d37a <DecodeHuffmanPairs+0x2d6>
					y += (int)(cache >> (32 - linBits));
 800d366:	f1ca 0420 	rsb	r4, sl, #32
 800d36a:	fa2c f404 	lsr.w	r4, ip, r4
 800d36e:	4421      	add	r1, r4
					cachedBits -= linBits;
 800d370:	eba3 030a 	sub.w	r3, r3, sl
					cache <<= linBits;
 800d374:	fa0c fc0a 	lsl.w	ip, ip, sl
 800d378:	e04e      	b.n	800d418 <DecodeHuffmanPairs+0x374>
						cachedBits += bitsLeft;
 800d37a:	4473      	add	r3, lr
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800d37c:	1e5f      	subs	r7, r3, #1
 800d37e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d382:	413c      	asrs	r4, r7
 800d384:	ea0c 0c04 	and.w	ip, ip, r4
						bitsLeft = 0;
 800d388:	f04f 0e00 	mov.w	lr, #0
 800d38c:	e7eb      	b.n	800d366 <DecodeHuffmanPairs+0x2c2>
 800d38e:	bf00      	nop
 800d390:	0801aa64 	.word	0x0801aa64
 800d394:	0801aae4 	.word	0x0801aae4
 800d398:	0801a964 	.word	0x0801a964
				if (cachedBits < padBits)
 800d39c:	9c02      	ldr	r4, [sp, #8]
 800d39e:	42a3      	cmp	r3, r4
 800d3a0:	db5a      	blt.n	800d458 <DecodeHuffmanPairs+0x3b4>
				*xy++ = x;
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	f844 6b08 	str.w	r6, [r4], #8
				*xy++ = y;
 800d3a8:	6041      	str	r1, [r0, #4]
				nVals -= 2;
 800d3aa:	3d02      	subs	r5, #2
				tCurr = tBase;
 800d3ac:	9e01      	ldr	r6, [sp, #4]
				*xy++ = y;
 800d3ae:	4620      	mov	r0, r4
			while (nVals > 0 && cachedBits >= 11 ) {
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	bfc8      	it	gt
 800d3b4:	2b0a      	cmpgt	r3, #10
 800d3b6:	f77f aeaf 	ble.w	800d118 <DecodeHuffmanPairs+0x74>
				maxBits = GetMaxbits(tCurr[0]);
 800d3ba:	8834      	ldrh	r4, [r6, #0]
 800d3bc:	f004 040f 	and.w	r4, r4, #15
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 800d3c0:	f1c4 0120 	rsb	r1, r4, #32
 800d3c4:	fa2c f101 	lsr.w	r1, ip, r1
 800d3c8:	3101      	adds	r1, #1
 800d3ca:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
				if (!len) {
 800d3ce:	0b0f      	lsrs	r7, r1, #12
 800d3d0:	f43f af77 	beq.w	800d2c2 <DecodeHuffmanPairs+0x21e>
				cachedBits -= len;
 800d3d4:	1bdb      	subs	r3, r3, r7
				cache <<= len;
 800d3d6:	fa0c fc07 	lsl.w	ip, ip, r7
				x = GetCWX(cw);
 800d3da:	f3c1 1603 	ubfx	r6, r1, #4, #4
				y = GetCWY(cw);
 800d3de:	f3c1 2103 	ubfx	r1, r1, #8, #4
				if (x == 15 && tabType == loopLinbits) {
 800d3e2:	f1bb 0f03 	cmp.w	fp, #3
 800d3e6:	bf14      	ite	ne
 800d3e8:	2700      	movne	r7, #0
 800d3ea:	2701      	moveq	r7, #1
 800d3ec:	2e0f      	cmp	r6, #15
 800d3ee:	bf14      	ite	ne
 800d3f0:	2400      	movne	r4, #0
 800d3f2:	f007 0401 	andeq.w	r4, r7, #1
 800d3f6:	2c00      	cmp	r4, #0
 800d3f8:	f47f af69 	bne.w	800d2ce <DecodeHuffmanPairs+0x22a>
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800d3fc:	b12e      	cbz	r6, 800d40a <DecodeHuffmanPairs+0x366>
 800d3fe:	f00c 4400 	and.w	r4, ip, #2147483648	; 0x80000000
 800d402:	4326      	orrs	r6, r4
 800d404:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d408:	3b01      	subs	r3, #1
				if (y == 15 && tabType == loopLinbits) {
 800d40a:	290f      	cmp	r1, #15
 800d40c:	bf14      	ite	ne
 800d40e:	2700      	movne	r7, #0
 800d410:	f007 0701 	andeq.w	r7, r7, #1
 800d414:	2f00      	cmp	r7, #0
 800d416:	d18d      	bne.n	800d334 <DecodeHuffmanPairs+0x290>
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800d418:	2900      	cmp	r1, #0
 800d41a:	d0bf      	beq.n	800d39c <DecodeHuffmanPairs+0x2f8>
 800d41c:	f00c 4400 	and.w	r4, ip, #2147483648	; 0x80000000
 800d420:	4321      	orrs	r1, r4
 800d422:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800d426:	3b01      	subs	r3, #1
 800d428:	e7b8      	b.n	800d39c <DecodeHuffmanPairs+0x2f8>
		bitsLeft += (cachedBits - padBits);
 800d42a:	9a02      	ldr	r2, [sp, #8]
 800d42c:	1a9b      	subs	r3, r3, r2
 800d42e:	449e      	add	lr, r3
		return (startBits - bitsLeft);
 800d430:	9b03      	ldr	r3, [sp, #12]
 800d432:	eba3 000e 	sub.w	r0, r3, lr
 800d436:	e000      	b.n	800d43a <DecodeHuffmanPairs+0x396>
		return 0;
 800d438:	2000      	movs	r0, #0
}
 800d43a:	b005      	add	sp, #20
 800d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 800d440:	f04f 30ff 	mov.w	r0, #4294967295
 800d444:	e7f9      	b.n	800d43a <DecodeHuffmanPairs+0x396>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800d446:	f04f 30ff 	mov.w	r0, #4294967295
 800d44a:	e7f6      	b.n	800d43a <DecodeHuffmanPairs+0x396>
					return -1;
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295
 800d450:	e7f3      	b.n	800d43a <DecodeHuffmanPairs+0x396>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800d452:	f04f 30ff 	mov.w	r0, #4294967295
 800d456:	e7f0      	b.n	800d43a <DecodeHuffmanPairs+0x396>
					return -1;
 800d458:	f04f 30ff 	mov.w	r0, #4294967295
 800d45c:	e7ed      	b.n	800d43a <DecodeHuffmanPairs+0x396>
 800d45e:	bf00      	nop

0800d460 <DecodeHuffmanQuads>:
 *                of the quad word after which all samples are 0)
 * 
 * Notes:        si_huff.bit tests every vwxy output in both quad tables
 **************************************************************************************/
static int DecodeHuffmanQuads(int *vwxy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 800d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	b083      	sub	sp, #12
 800d466:	9101      	str	r1, [sp, #4]
	int i, v, w, x, y;
	int len, maxBits, cachedBits, padBits;
	unsigned int cache;
	unsigned char cw, *tBase;

	if (bitsLeft <= 0)
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f340 80a1 	ble.w	800d5b0 <DecodeHuffmanQuads+0x150>
 800d46e:	4684      	mov	ip, r0
		return 0;

	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 800d470:	4951      	ldr	r1, [pc, #324]	; (800d5b8 <DecodeHuffmanQuads+0x158>)
 800d472:	f851 8022 	ldr.w	r8, [r1, r2, lsl #2]
	maxBits = quadTabMaxBits[tabIdx];
 800d476:	4951      	ldr	r1, [pc, #324]	; (800d5bc <DecodeHuffmanQuads+0x15c>)
 800d478:	f851 9022 	ldr.w	r9, [r1, r2, lsl #2]

	/* initially fill cache with any partial byte */
	cache = 0;
	cachedBits = (8 - bitOffset) & 0x07;
 800d47c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d47e:	4249      	negs	r1, r1
	if (cachedBits)
 800d480:	f011 0107 	ands.w	r1, r1, #7
 800d484:	d025      	beq.n	800d4d2 <DecodeHuffmanQuads+0x72>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800d486:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d488:	f810 4b01 	ldrb.w	r4, [r0], #1
 800d48c:	f1c1 0220 	rsb	r2, r1, #32
 800d490:	fa04 f202 	lsl.w	r2, r4, r2
 800d494:	900c      	str	r0, [sp, #48]	; 0x30
	bitsLeft -= cachedBits;
 800d496:	eba3 0a01 	sub.w	sl, r3, r1

	i = padBits = 0;
 800d49a:	2700      	movs	r7, #0
 800d49c:	4638      	mov	r0, r7
	while (i < (nVals - 3)) {
 800d49e:	9b01      	ldr	r3, [sp, #4]
 800d4a0:	1edc      	subs	r4, r3, #3
 800d4a2:	4284      	cmp	r4, r0
 800d4a4:	f340 8085 	ble.w	800d5b2 <DecodeHuffmanQuads+0x152>
		/* refill cache - assumes cachedBits <= 16 */
		if (bitsLeft >= 16) {
 800d4a8:	f1ba 0f0f 	cmp.w	sl, #15
 800d4ac:	dd13      	ble.n	800d4d6 <DecodeHuffmanQuads+0x76>
			/* load 2 new bytes into left-justified cache */
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800d4ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d4b0:	f815 3b02 	ldrb.w	r3, [r5], #2
 800d4b4:	f1c1 0618 	rsb	r6, r1, #24
 800d4b8:	40b3      	lsls	r3, r6
 800d4ba:	431a      	orrs	r2, r3
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800d4bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4be:	785b      	ldrb	r3, [r3, #1]
 800d4c0:	f1c1 0610 	rsb	r6, r1, #16
 800d4c4:	40b3      	lsls	r3, r6
 800d4c6:	431a      	orrs	r2, r3
			cachedBits += 16;
 800d4c8:	3110      	adds	r1, #16
			bitsLeft -= 16;
 800d4ca:	f1aa 0a10 	sub.w	sl, sl, #16
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800d4ce:	950c      	str	r5, [sp, #48]	; 0x30
 800d4d0:	e034      	b.n	800d53c <DecodeHuffmanQuads+0xdc>
	cache = 0;
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	e7df      	b.n	800d496 <DecodeHuffmanQuads+0x36>
		} else {
			/* last time through, pad cache with zeros and drain cache */
			if (cachedBits + bitsLeft <= 0) return i;
 800d4d6:	eb0a 0301 	add.w	r3, sl, r1
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	dd69      	ble.n	800d5b2 <DecodeHuffmanQuads+0x152>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800d4de:	f1ba 0f00 	cmp.w	sl, #0
 800d4e2:	dd07      	ble.n	800d4f4 <DecodeHuffmanQuads+0x94>
 800d4e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d4e6:	f815 6b01 	ldrb.w	r6, [r5], #1
 800d4ea:	f1c1 0718 	rsb	r7, r1, #24
 800d4ee:	40be      	lsls	r6, r7
 800d4f0:	4332      	orrs	r2, r6
 800d4f2:	950c      	str	r5, [sp, #48]	; 0x30
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800d4f4:	f1ba 0f08 	cmp.w	sl, #8
 800d4f8:	dd08      	ble.n	800d50c <DecodeHuffmanQuads+0xac>
 800d4fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d4fc:	f815 6b01 	ldrb.w	r6, [r5], #1
 800d500:	f1c1 0110 	rsb	r1, r1, #16
 800d504:	fa06 f101 	lsl.w	r1, r6, r1
 800d508:	430a      	orrs	r2, r1
 800d50a:	950c      	str	r5, [sp, #48]	; 0x30
			cachedBits += bitsLeft;
			bitsLeft = 0;

			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800d50c:	1e5d      	subs	r5, r3, #1
 800d50e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d512:	4129      	asrs	r1, r5
 800d514:	400a      	ands	r2, r1
			padBits = 10;
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800d516:	f103 010a 	add.w	r1, r3, #10
			padBits = 10;
 800d51a:	270a      	movs	r7, #10
			bitsLeft = 0;
 800d51c:	f04f 0a00 	mov.w	sl, #0
 800d520:	e00c      	b.n	800d53c <DecodeHuffmanQuads+0xdc>
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}

			/* ran out of bits - okay (means we're done) */
			if (cachedBits < padBits)
 800d522:	42b9      	cmp	r1, r7
 800d524:	db45      	blt.n	800d5b2 <DecodeHuffmanQuads+0x152>
				return i;

			*vwxy++ = v;
 800d526:	f8cc e000 	str.w	lr, [ip]
			*vwxy++ = w;
 800d52a:	f8cc 6004 	str.w	r6, [ip, #4]
			*vwxy++ = x;
 800d52e:	f8cc 5008 	str.w	r5, [ip, #8]
			*vwxy++ = y;
 800d532:	f8cc b00c 	str.w	fp, [ip, #12]
			i += 4;
 800d536:	3004      	adds	r0, #4
			*vwxy++ = y;
 800d538:	f10c 0c10 	add.w	ip, ip, #16
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800d53c:	4284      	cmp	r4, r0
 800d53e:	ddae      	ble.n	800d49e <DecodeHuffmanQuads+0x3e>
 800d540:	2909      	cmp	r1, #9
 800d542:	ddac      	ble.n	800d49e <DecodeHuffmanQuads+0x3e>
			cw = tBase[cache >> (32 - maxBits)];
 800d544:	f1c9 0320 	rsb	r3, r9, #32
 800d548:	fa22 f303 	lsr.w	r3, r2, r3
 800d54c:	4443      	add	r3, r8
 800d54e:	4d1c      	ldr	r5, [pc, #112]	; (800d5c0 <DecodeHuffmanQuads+0x160>)
 800d550:	5d5b      	ldrb	r3, [r3, r5]
			len = GetHLenQ(cw);
 800d552:	091d      	lsrs	r5, r3, #4
			cachedBits -= len;
 800d554:	eba1 1113 	sub.w	r1, r1, r3, lsr #4
			cache <<= len;
 800d558:	40aa      	lsls	r2, r5
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800d55a:	f3c3 05c0 	ubfx	r5, r3, #3, #1
 800d55e:	46ae      	mov	lr, r5
 800d560:	b12d      	cbz	r5, 800d56e <DecodeHuffmanQuads+0x10e>
 800d562:	f002 4e00 	and.w	lr, r2, #2147483648	; 0x80000000
 800d566:	ea45 0e0e 	orr.w	lr, r5, lr
 800d56a:	0052      	lsls	r2, r2, #1
 800d56c:	3901      	subs	r1, #1
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 800d56e:	f3c3 0580 	ubfx	r5, r3, #2, #1
 800d572:	462e      	mov	r6, r5
 800d574:	b125      	cbz	r5, 800d580 <DecodeHuffmanQuads+0x120>
 800d576:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800d57a:	432e      	orrs	r6, r5
 800d57c:	0052      	lsls	r2, r2, #1
 800d57e:	3901      	subs	r1, #1
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800d580:	f3c3 0b40 	ubfx	fp, r3, #1, #1
 800d584:	465d      	mov	r5, fp
 800d586:	f1bb 0f00 	cmp.w	fp, #0
 800d58a:	d005      	beq.n	800d598 <DecodeHuffmanQuads+0x138>
 800d58c:	f002 4500 	and.w	r5, r2, #2147483648	; 0x80000000
 800d590:	ea4b 0505 	orr.w	r5, fp, r5
 800d594:	0052      	lsls	r2, r2, #1
 800d596:	3901      	subs	r1, #1
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800d598:	f003 0301 	and.w	r3, r3, #1
 800d59c:	469b      	mov	fp, r3
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d0bf      	beq.n	800d522 <DecodeHuffmanQuads+0xc2>
 800d5a2:	f002 4b00 	and.w	fp, r2, #2147483648	; 0x80000000
 800d5a6:	ea43 0b0b 	orr.w	fp, r3, fp
 800d5aa:	0052      	lsls	r2, r2, #1
 800d5ac:	3901      	subs	r1, #1
 800d5ae:	e7b8      	b.n	800d522 <DecodeHuffmanQuads+0xc2>
		return 0;
 800d5b0:	2000      	movs	r0, #0
		}
	}

	/* decoded max number of quad values */
	return i;
}
 800d5b2:	b003      	add	sp, #12
 800d5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b8:	0801cc10 	.word	0x0801cc10
 800d5bc:	0801cc08 	.word	0x0801cc08
 800d5c0:	0801cc18 	.word	0x0801cc18

0800d5c4 <xmp3fixpt_DecodeHuffman>:
 *                byte located at buf + offset)
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 800d5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c8:	b089      	sub	sp, #36	; 0x24
 800d5ca:	9102      	str	r1, [sp, #8]
 800d5cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800d5ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	SideInfoSub *sis;
	ScaleFactorInfo *sfi;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS) {
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	f000 8118 	beq.w	800d806 <xmp3fixpt_DecodeHuffman+0x242>
 800d5d6:	4691      	mov	r9, r2
 800d5d8:	461e      	mov	r6, r3
 800d5da:	6802      	ldr	r2, [r0, #0]
 800d5dc:	2a00      	cmp	r2, #0
 800d5de:	f000 8115 	beq.w	800d80c <xmp3fixpt_DecodeHuffman+0x248>
 800d5e2:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800d5e6:	f1ba 0f00 	cmp.w	sl, #0
 800d5ea:	f000 8112 	beq.w	800d812 <xmp3fixpt_DecodeHuffman+0x24e>
 800d5ee:	6881      	ldr	r1, [r0, #8]
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	f000 8111 	beq.w	800d818 <xmp3fixpt_DecodeHuffman+0x254>
 800d5f6:	68c7      	ldr	r7, [r0, #12]
 800d5f8:	2f00      	cmp	r7, #0
 800d5fa:	f000 8110 	beq.w	800d81e <xmp3fixpt_DecodeHuffman+0x25a>
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
	sis = &si->sis[gr][ch];
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);

	if (huffBlockBits < 0) {
 800d5fe:	2e00      	cmp	r6, #0
 800d600:	f2c0 8110 	blt.w	800d824 <xmp3fixpt_DecodeHuffman+0x260>
		i = 1;
		return -1;
	}

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800d604:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800d608:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800d60c:	011b      	lsls	r3, r3, #4
 800d60e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d612:	4453      	add	r3, sl
 800d614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d616:	b143      	cbz	r3, 800d62a <xmp3fixpt_DecodeHuffman+0x66>
 800d618:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800d61c:	011b      	lsls	r3, r3, #4
 800d61e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d622:	4453      	add	r3, sl
 800d624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d626:	2b02      	cmp	r3, #2
 800d628:	d072      	beq.n	800d710 <xmp3fixpt_DecodeHuffman+0x14c>
				r1Start = fh->sfBand->l[6] + 2*w;
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800d62a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800d62c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d630:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800d634:	0109      	lsls	r1, r1, #4
 800d636:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d63a:	4451      	add	r1, sl
 800d63c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800d63e:	3301      	adds	r3, #1
 800d640:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800d644:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800d646:	440b      	add	r3, r1
 800d648:	3301      	adds	r3, #1
 800d64a:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800d64e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800d652:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800d656:	011b      	lsls	r3, r3, #4
 800d658:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800d65c:	4453      	add	r3, sl
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800d666:	bfa8      	it	ge
 800d668:	f44f 7310 	movge.w	r3, #576	; 0x240
 800d66c:	469b      	mov	fp, r3
 800d66e:	9307      	str	r3, [sp, #28]
	rEnd[2] = MIN(r2Start, rEnd[3]);
 800d670:	4299      	cmp	r1, r3
 800d672:	bfa8      	it	ge
 800d674:	4619      	movge	r1, r3
 800d676:	9106      	str	r1, [sp, #24]
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800d678:	429a      	cmp	r2, r3
 800d67a:	bfa8      	it	ge
 800d67c:	461a      	movge	r2, r3
 800d67e:	9205      	str	r2, [sp, #20]
	rEnd[0] = 0;
 800d680:	2300      	movs	r3, #0
 800d682:	9304      	str	r3, [sp, #16]

	/* rounds up to first all-zero pair (we don't check last pair for (x,y) == (non-zero, zero)) */
	hi->nonZeroBound[ch] = rEnd[3];
 800d684:	f504 6290 	add.w	r2, r4, #1152	; 0x480
 800d688:	f847 b022 	str.w	fp, [r7, r2, lsl #2]

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
	for (i = 0; i < 3; i++) {
 800d68c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d690:	f8cd b00c 	str.w	fp, [sp, #12]
 800d694:	2b02      	cmp	r3, #2
 800d696:	dc7a      	bgt.n	800d78e <xmp3fixpt_DecodeHuffman+0x1ca>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800d698:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800d69c:	eb07 2000 	add.w	r0, r7, r0, lsl #8
 800d6a0:	aa08      	add	r2, sp, #32
 800d6a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d6a6:	f852 cc10 	ldr.w	ip, [r2, #-16]
 800d6aa:	f103 0b01 	add.w	fp, r3, #1
 800d6ae:	aa08      	add	r2, sp, #32
 800d6b0:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 800d6b4:	f852 1c10 	ldr.w	r1, [r2, #-16]
 800d6b8:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
 800d6bc:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800d6c0:	0092      	lsls	r2, r2, #2
 800d6c2:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 800d6c6:	4413      	add	r3, r2
 800d6c8:	3310      	adds	r3, #16
 800d6ca:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800d6ce:	685a      	ldr	r2, [r3, #4]
 800d6d0:	f8d9 3000 	ldr.w	r3, [r9]
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	f8cd 8000 	str.w	r8, [sp]
 800d6da:	4633      	mov	r3, r6
 800d6dc:	eba1 010c 	sub.w	r1, r1, ip
 800d6e0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800d6e4:	f7ff fcde 	bl	800d0a4 <DecodeHuffmanPairs>
		if (bitsUsed < 0 || bitsUsed > bitsLeft) {
 800d6e8:	4286      	cmp	r6, r0
 800d6ea:	bfac      	ite	ge
 800d6ec:	2300      	movge	r3, #0
 800d6ee:	2301      	movlt	r3, #1
 800d6f0:	ea53 73d0 	orrs.w	r3, r3, r0, lsr #31
 800d6f4:	f040 8099 	bne.w	800d82a <xmp3fixpt_DecodeHuffman+0x266>
			i = 1;
			return -1;
		}

		/* update bitstream position */
		buf += (bitsUsed + *bitOffset) >> 3;
 800d6f8:	f8d9 3000 	ldr.w	r3, [r9]
 800d6fc:	4403      	add	r3, r0
 800d6fe:	eb08 08e3 	add.w	r8, r8, r3, asr #3
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800d702:	f003 0307 	and.w	r3, r3, #7
 800d706:	f8c9 3000 	str.w	r3, [r9]
		bitsLeft -= bitsUsed;
 800d70a:	1a36      	subs	r6, r6, r0
	for (i = 0; i < 3; i++) {
 800d70c:	465b      	mov	r3, fp
 800d70e:	e7c1      	b.n	800d694 <xmp3fixpt_DecodeHuffman+0xd0>
		if (sis->mixedBlock == 0) {
 800d710:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800d714:	011b      	lsls	r3, r3, #4
 800d716:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d71a:	4453      	add	r3, sl
 800d71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d71e:	b9bb      	cbnz	r3, 800d750 <xmp3fixpt_DecodeHuffman+0x18c>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800d720:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d722:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800d726:	011b      	lsls	r3, r3, #4
 800d728:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d72c:	4453      	add	r3, sl
 800d72e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d730:	3101      	adds	r1, #1
 800d732:	4b3f      	ldr	r3, [pc, #252]	; (800d830 <xmp3fixpt_DecodeHuffman+0x26c>)
 800d734:	fb83 0301 	smull	r0, r3, r3, r1
 800d738:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 800d73c:	3314      	adds	r3, #20
 800d73e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800d742:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d746:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800d74a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d74e:	e77e      	b.n	800d64e <xmp3fixpt_DecodeHuffman+0x8a>
			if (fh->ver == MPEG1) {
 800d750:	7813      	ldrb	r3, [r2, #0]
 800d752:	b97b      	cbnz	r3, 800d774 <xmp3fixpt_DecodeHuffman+0x1b0>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800d754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d756:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800d75a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800d75e:	011b      	lsls	r3, r3, #4
 800d760:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d764:	4453      	add	r3, sl
 800d766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d768:	3301      	adds	r3, #1
 800d76a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800d76e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d772:	e76c      	b.n	800d64e <xmp3fixpt_DecodeHuffman+0x8a>
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 800d774:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d776:	f9b2 3036 	ldrsh.w	r3, [r2, #54]	; 0x36
 800d77a:	f9b2 1034 	ldrsh.w	r1, [r2, #52]	; 0x34
 800d77e:	1a5b      	subs	r3, r3, r1
				r1Start = fh->sfBand->l[6] + 2*w;
 800d780:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800d784:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800d788:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d78c:	e75f      	b.n	800d64e <xmp3fixpt_DecodeHuffman+0x8a>
	}

	/* decode Huffman quads (if any) */
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800d78e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d792:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800d796:	eb07 2000 	add.w	r0, r7, r0, lsl #8
 800d79a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d79e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800d7a2:	012d      	lsls	r5, r5, #4
 800d7a4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d7a8:	4455      	add	r5, sl
 800d7aa:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800d7ac:	f8d9 3000 	ldr.w	r3, [r9]
 800d7b0:	9301      	str	r3, [sp, #4]
 800d7b2:	f8cd 8000 	str.w	r8, [sp]
 800d7b6:	4633      	mov	r3, r6
 800d7b8:	f5cb 7110 	rsb	r1, fp, #576	; 0x240
 800d7bc:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800d7c0:	f7ff fe4e 	bl	800d460 <DecodeHuffmanQuads>
 800d7c4:	f504 6390 	add.w	r3, r4, #1152	; 0x480
 800d7c8:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800d7cc:	4410      	add	r0, r2
 800d7ce:	f847 0023 	str.w	r0, [r7, r3, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800d7d2:	e007      	b.n	800d7e4 <xmp3fixpt_DecodeHuffman+0x220>
		hi->huffDecBuf[ch][i] = 0;
 800d7d4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d7d8:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 800d7e8:	dbf4      	blt.n	800d7d4 <xmp3fixpt_DecodeHuffman+0x210>
	
	/* If bits used for 576 samples < huffBlockBits, then the extras are considered
	 *  to be stuffing bits (throw away, but need to return correct bitstream position) 
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
 800d7ea:	f8d9 3000 	ldr.w	r3, [r9]
 800d7ee:	441e      	add	r6, r3
 800d7f0:	eb08 00e6 	add.w	r0, r8, r6, asr #3
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 800d7f4:	f006 0607 	and.w	r6, r6, #7
 800d7f8:	f8c9 6000 	str.w	r6, [r9]
	
	return (buf - startBuf);
 800d7fc:	9b02      	ldr	r3, [sp, #8]
 800d7fe:	1ac0      	subs	r0, r0, r3
}
 800d800:	b009      	add	sp, #36	; 0x24
 800d802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 800d806:	f04f 30ff 	mov.w	r0, #4294967295
 800d80a:	e7f9      	b.n	800d800 <xmp3fixpt_DecodeHuffman+0x23c>
 800d80c:	f04f 30ff 	mov.w	r0, #4294967295
 800d810:	e7f6      	b.n	800d800 <xmp3fixpt_DecodeHuffman+0x23c>
 800d812:	f04f 30ff 	mov.w	r0, #4294967295
 800d816:	e7f3      	b.n	800d800 <xmp3fixpt_DecodeHuffman+0x23c>
 800d818:	f04f 30ff 	mov.w	r0, #4294967295
 800d81c:	e7f0      	b.n	800d800 <xmp3fixpt_DecodeHuffman+0x23c>
 800d81e:	f04f 30ff 	mov.w	r0, #4294967295
 800d822:	e7ed      	b.n	800d800 <xmp3fixpt_DecodeHuffman+0x23c>
		return -1;
 800d824:	f04f 30ff 	mov.w	r0, #4294967295
 800d828:	e7ea      	b.n	800d800 <xmp3fixpt_DecodeHuffman+0x23c>
			return -1;
 800d82a:	f04f 30ff 	mov.w	r0, #4294967295
 800d82e:	e7e7      	b.n	800d800 <xmp3fixpt_DecodeHuffman+0x23c>
 800d830:	55555556 	.word	0x55555556

0800d834 <AntiAlias>:
{
	int k, a0, b0, c0, c1;
	const int *c;

	/* csa = Q31 */
	for (k = nBfly; k > 0; k--) {
 800d834:	2900      	cmp	r1, #0
 800d836:	f340 80c7 	ble.w	800d9c8 <AntiAlias+0x194>
{
 800d83a:	b570      	push	{r4, r5, r6, lr}
		c = csa[0];
		x += 18;
 800d83c:	3048      	adds	r0, #72	; 0x48

		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800d83e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d842:	4b62      	ldr	r3, [pc, #392]	; (800d9cc <AntiAlias+0x198>)
 800d844:	681e      	ldr	r6, [r3, #0]
 800d846:	685d      	ldr	r5, [r3, #4]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800d848:	4614      	mov	r4, r2
 800d84a:	fb86 c404 	smull	ip, r4, r6, r4
 800d84e:	f8d0 c000 	ldr.w	ip, [r0]
 800d852:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800d856:	eba4 040c 	sub.w	r4, r4, ip
 800d85a:	0064      	lsls	r4, r4, #1
 800d85c:	f840 4c04 	str.w	r4, [r0, #-4]
 800d860:	6804      	ldr	r4, [r0, #0]
 800d862:	fb86 c404 	smull	ip, r4, r6, r4
 800d866:	fb85 6202 	smull	r6, r2, r5, r2
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800d86a:	4422      	add	r2, r4
 800d86c:	0052      	lsls	r2, r2, #1
 800d86e:	6002      	str	r2, [r0, #0]

		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800d870:	f850 2c08 	ldr.w	r2, [r0, #-8]
 800d874:	689e      	ldr	r6, [r3, #8]
 800d876:	68dd      	ldr	r5, [r3, #12]
 800d878:	4614      	mov	r4, r2
 800d87a:	fb86 c404 	smull	ip, r4, r6, r4
 800d87e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800d882:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800d886:	eba4 040c 	sub.w	r4, r4, ip
 800d88a:	0064      	lsls	r4, r4, #1
 800d88c:	f840 4c08 	str.w	r4, [r0, #-8]
 800d890:	6844      	ldr	r4, [r0, #4]
 800d892:	fb86 c404 	smull	ip, r4, r6, r4
 800d896:	fb85 6202 	smull	r6, r2, r5, r2
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800d89a:	4422      	add	r2, r4
 800d89c:	0052      	lsls	r2, r2, #1
 800d89e:	6042      	str	r2, [r0, #4]
		
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800d8a0:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 800d8a4:	691e      	ldr	r6, [r3, #16]
 800d8a6:	695d      	ldr	r5, [r3, #20]
 800d8a8:	4614      	mov	r4, r2
 800d8aa:	fb86 c404 	smull	ip, r4, r6, r4
 800d8ae:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800d8b2:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800d8b6:	eba4 040c 	sub.w	r4, r4, ip
 800d8ba:	0064      	lsls	r4, r4, #1
 800d8bc:	f840 4c0c 	str.w	r4, [r0, #-12]
 800d8c0:	6884      	ldr	r4, [r0, #8]
 800d8c2:	fb86 c404 	smull	ip, r4, r6, r4
 800d8c6:	fb85 6202 	smull	r6, r2, r5, r2
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800d8ca:	4422      	add	r2, r4
 800d8cc:	0052      	lsls	r2, r2, #1
 800d8ce:	6082      	str	r2, [r0, #8]

		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800d8d0:	f850 2c10 	ldr.w	r2, [r0, #-16]
 800d8d4:	699e      	ldr	r6, [r3, #24]
 800d8d6:	69dd      	ldr	r5, [r3, #28]
 800d8d8:	4614      	mov	r4, r2
 800d8da:	fb86 c404 	smull	ip, r4, r6, r4
 800d8de:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800d8e2:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800d8e6:	eba4 040c 	sub.w	r4, r4, ip
 800d8ea:	0064      	lsls	r4, r4, #1
 800d8ec:	f840 4c10 	str.w	r4, [r0, #-16]
 800d8f0:	68c4      	ldr	r4, [r0, #12]
 800d8f2:	fb86 c404 	smull	ip, r4, r6, r4
 800d8f6:	fb85 6202 	smull	r6, r2, r5, r2
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800d8fa:	4422      	add	r2, r4
 800d8fc:	0052      	lsls	r2, r2, #1
 800d8fe:	60c2      	str	r2, [r0, #12]

		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800d900:	f850 2c14 	ldr.w	r2, [r0, #-20]
 800d904:	6a1e      	ldr	r6, [r3, #32]
 800d906:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d908:	4614      	mov	r4, r2
 800d90a:	fb86 c404 	smull	ip, r4, r6, r4
 800d90e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800d912:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800d916:	eba4 040c 	sub.w	r4, r4, ip
 800d91a:	0064      	lsls	r4, r4, #1
 800d91c:	f840 4c14 	str.w	r4, [r0, #-20]
 800d920:	6904      	ldr	r4, [r0, #16]
 800d922:	fb86 c404 	smull	ip, r4, r6, r4
 800d926:	fb85 6202 	smull	r6, r2, r5, r2
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800d92a:	4422      	add	r2, r4
 800d92c:	0052      	lsls	r2, r2, #1
 800d92e:	6102      	str	r2, [r0, #16]

		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800d930:	f850 2c18 	ldr.w	r2, [r0, #-24]
 800d934:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800d936:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800d938:	4614      	mov	r4, r2
 800d93a:	fb86 c404 	smull	ip, r4, r6, r4
 800d93e:	f8d0 c014 	ldr.w	ip, [r0, #20]
 800d942:	fb85 ec0c 	smull	lr, ip, r5, ip
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800d946:	eba4 040c 	sub.w	r4, r4, ip
 800d94a:	0064      	lsls	r4, r4, #1
 800d94c:	f840 4c18 	str.w	r4, [r0, #-24]
 800d950:	6944      	ldr	r4, [r0, #20]
 800d952:	fb86 c404 	smull	ip, r4, r6, r4
 800d956:	fb85 6202 	smull	r6, r2, r5, r2
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800d95a:	4422      	add	r2, r4
 800d95c:	0052      	lsls	r2, r2, #1
 800d95e:	6142      	str	r2, [r0, #20]

		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800d960:	f850 2c1c 	ldr.w	r2, [r0, #-28]
 800d964:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800d966:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800d968:	4694      	mov	ip, r2
 800d96a:	fb86 4c0c 	smull	r4, ip, r6, ip
 800d96e:	6984      	ldr	r4, [r0, #24]
 800d970:	fb85 e404 	smull	lr, r4, r5, r4
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800d974:	ebac 0c04 	sub.w	ip, ip, r4
 800d978:	ea4f 044c 	mov.w	r4, ip, lsl #1
 800d97c:	f840 4c1c 	str.w	r4, [r0, #-28]
 800d980:	6984      	ldr	r4, [r0, #24]
 800d982:	fb86 c404 	smull	ip, r4, r6, r4
 800d986:	fb85 6202 	smull	r6, r2, r5, r2
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800d98a:	4422      	add	r2, r4
 800d98c:	0052      	lsls	r2, r2, #1
 800d98e:	6182      	str	r2, [r0, #24]

		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800d990:	f850 2c20 	ldr.w	r2, [r0, #-32]
 800d994:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800d996:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800d998:	4613      	mov	r3, r2
 800d99a:	fb86 4303 	smull	r4, r3, r6, r3
 800d99e:	69c4      	ldr	r4, [r0, #28]
 800d9a0:	fb85 c404 	smull	ip, r4, r5, r4
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800d9a4:	1b1b      	subs	r3, r3, r4
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	f840 3c20 	str.w	r3, [r0, #-32]
 800d9ac:	69c4      	ldr	r4, [r0, #28]
 800d9ae:	fb86 3404 	smull	r3, r4, r6, r4
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	fb85 2303 	smull	r2, r3, r5, r3
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800d9b8:	4423      	add	r3, r4
 800d9ba:	005b      	lsls	r3, r3, #1
 800d9bc:	61c3      	str	r3, [r0, #28]
	for (k = nBfly; k > 0; k--) {
 800d9be:	3901      	subs	r1, #1
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	f73f af3b 	bgt.w	800d83c <AntiAlias+0x8>
	}
}
 800d9c6:	bd70      	pop	{r4, r5, r6, pc}
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	0801ce84 	.word	0x0801ce84

0800d9d0 <WinPrevious>:
 * Notes:       produces 9 output samples from 18 input samples via symmetry
 *              all blocks gain at least 1 guard bit via window (long blocks get extra
 *                sign bit, short blocks can have one addition but max gain < 1.0)
 **************************************************************************************/
static void WinPrevious(int *xPrev, int *xPrevWin, int btPrev)
{
 800d9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	4608      	mov	r0, r1
	int i, x, *xp, *xpwLo, *xpwHi, wLo, wHi;
	const int *wpLo, *wpHi;

	xp = xPrev;
	/* mapping (see IMDCT12x3): xPrev[0-2] = sum[6-8], xPrev[3-8] = sum[12-17] */
	if (btPrev == 2) {
 800d9d8:	2a02      	cmp	r2, #2
 800d9da:	d00b      	beq.n	800d9f4 <WinPrevious+0x24>
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
	} else {
		/* use ARM-style pointers (*ptr++) so that ADS compiles well */
		wpLo = imdctWin[btPrev] + 18;
 800d9dc:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 800d9e0:	4a43      	ldr	r2, [pc, #268]	; (800daf0 <WinPrevious+0x120>)
 800d9e2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800d9e6:	f102 0c48 	add.w	ip, r2, #72	; 0x48
		wpHi = wpLo + 17;
 800d9ea:	328c      	adds	r2, #140	; 0x8c
		xpwLo = xPrevWin;
		xpwHi = xPrevWin + 17;
 800d9ec:	f101 0e44 	add.w	lr, r1, #68	; 0x44
		for (i = 9; i > 0; i--) {
 800d9f0:	2509      	movs	r5, #9
 800d9f2:	e079      	b.n	800dae8 <WinPrevious+0x118>
		wpLo = imdctWin[btPrev];
 800d9f4:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800d9f8:	0116      	lsls	r6, r2, #4
 800d9fa:	4d3d      	ldr	r5, [pc, #244]	; (800daf0 <WinPrevious+0x120>)
 800d9fc:	eb05 1302 	add.w	r3, r5, r2, lsl #4
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800da00:	699a      	ldr	r2, [r3, #24]
 800da02:	68a1      	ldr	r1, [r4, #8]
 800da04:	fb82 7101 	smull	r7, r1, r2, r1
 800da08:	5975      	ldr	r5, [r6, r5]
 800da0a:	69a2      	ldr	r2, [r4, #24]
 800da0c:	fb85 6202 	smull	r6, r2, r5, r2
 800da10:	440a      	add	r2, r1
 800da12:	6002      	str	r2, [r0, #0]
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 800da14:	69da      	ldr	r2, [r3, #28]
 800da16:	6861      	ldr	r1, [r4, #4]
 800da18:	fb82 5101 	smull	r5, r1, r2, r1
 800da1c:	685d      	ldr	r5, [r3, #4]
 800da1e:	69e2      	ldr	r2, [r4, #28]
 800da20:	fb85 6202 	smull	r6, r2, r5, r2
 800da24:	440a      	add	r2, r1
 800da26:	6042      	str	r2, [r0, #4]
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 800da28:	6a1a      	ldr	r2, [r3, #32]
 800da2a:	6821      	ldr	r1, [r4, #0]
 800da2c:	fb82 5101 	smull	r5, r1, r2, r1
 800da30:	689d      	ldr	r5, [r3, #8]
 800da32:	6a22      	ldr	r2, [r4, #32]
 800da34:	fb85 6202 	smull	r6, r2, r5, r2
 800da38:	440a      	add	r2, r1
 800da3a:	6082      	str	r2, [r0, #8]
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 800da3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da3e:	6821      	ldr	r1, [r4, #0]
 800da40:	fb82 5101 	smull	r5, r1, r2, r1
 800da44:	68dd      	ldr	r5, [r3, #12]
 800da46:	6a22      	ldr	r2, [r4, #32]
 800da48:	fb85 6202 	smull	r6, r2, r5, r2
 800da4c:	440a      	add	r2, r1
 800da4e:	60c2      	str	r2, [r0, #12]
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 800da50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da52:	6861      	ldr	r1, [r4, #4]
 800da54:	fb82 5101 	smull	r5, r1, r2, r1
 800da58:	691d      	ldr	r5, [r3, #16]
 800da5a:	69e2      	ldr	r2, [r4, #28]
 800da5c:	fb85 6202 	smull	r6, r2, r5, r2
 800da60:	440a      	add	r2, r1
 800da62:	6102      	str	r2, [r0, #16]
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 800da64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da66:	68a1      	ldr	r1, [r4, #8]
 800da68:	fb82 5101 	smull	r5, r1, r2, r1
 800da6c:	695d      	ldr	r5, [r3, #20]
 800da6e:	69a2      	ldr	r2, [r4, #24]
 800da70:	fb85 6202 	smull	r6, r2, r5, r2
 800da74:	440a      	add	r2, r1
 800da76:	6142      	str	r2, [r0, #20]
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 800da78:	6999      	ldr	r1, [r3, #24]
 800da7a:	6962      	ldr	r2, [r4, #20]
 800da7c:	fb81 5202 	smull	r5, r2, r1, r2
 800da80:	6182      	str	r2, [r0, #24]
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 800da82:	69d9      	ldr	r1, [r3, #28]
 800da84:	6922      	ldr	r2, [r4, #16]
 800da86:	fb81 5202 	smull	r5, r2, r1, r2
 800da8a:	61c2      	str	r2, [r0, #28]
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 800da8c:	6a19      	ldr	r1, [r3, #32]
 800da8e:	68e2      	ldr	r2, [r4, #12]
 800da90:	fb81 5202 	smull	r5, r2, r1, r2
 800da94:	6202      	str	r2, [r0, #32]
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 800da96:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800da98:	68e2      	ldr	r2, [r4, #12]
 800da9a:	fb81 5202 	smull	r5, r2, r1, r2
 800da9e:	6242      	str	r2, [r0, #36]	; 0x24
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 800daa0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800daa2:	6922      	ldr	r2, [r4, #16]
 800daa4:	fb81 5202 	smull	r5, r2, r1, r2
 800daa8:	6282      	str	r2, [r0, #40]	; 0x28
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 800daaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daac:	6963      	ldr	r3, [r4, #20]
 800daae:	fb82 1303 	smull	r1, r3, r2, r3
 800dab2:	62c3      	str	r3, [r0, #44]	; 0x2c
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 800dab4:	2300      	movs	r3, #0
 800dab6:	6443      	str	r3, [r0, #68]	; 0x44
 800dab8:	6403      	str	r3, [r0, #64]	; 0x40
 800daba:	63c3      	str	r3, [r0, #60]	; 0x3c
 800dabc:	6383      	str	r3, [r0, #56]	; 0x38
 800dabe:	6343      	str	r3, [r0, #52]	; 0x34
 800dac0:	6303      	str	r3, [r0, #48]	; 0x30
 800dac2:	e013      	b.n	800daec <WinPrevious+0x11c>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800dac4:	f854 3b04 	ldr.w	r3, [r4], #4
 800dac8:	f85c 7b04 	ldr.w	r7, [ip], #4
 800dacc:	f852 6904 	ldr.w	r6, [r2], #-4
 800dad0:	4619      	mov	r1, r3
 800dad2:	fb87 8101 	smull	r8, r1, r7, r1
			*xpwLo++ = MULSHIFT32(wLo, x);
 800dad6:	f840 1b04 	str.w	r1, [r0], #4
			*xpwHi-- = MULSHIFT32(wHi, x);
 800dada:	4671      	mov	r1, lr
 800dadc:	fb86 7303 	smull	r7, r3, r6, r3
 800dae0:	f841 3904 	str.w	r3, [r1], #-4
		for (i = 9; i > 0; i--) {
 800dae4:	3d01      	subs	r5, #1
			*xpwHi-- = MULSHIFT32(wHi, x);
 800dae6:	468e      	mov	lr, r1
		for (i = 9; i > 0; i--) {
 800dae8:	2d00      	cmp	r5, #0
 800daea:	dceb      	bgt.n	800dac4 <WinPrevious+0xf4>
		}
	}
}
 800daec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf0:	0801cec4 	.word	0x0801cec4

0800daf4 <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	4684      	mov	ip, r0
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 800daf8:	469e      	mov	lr, r3
 800dafa:	bb8b      	cbnz	r3, 800db60 <FreqInvertRescale+0x6c>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 800dafc:	f012 0f01 	tst.w	r2, #1
 800db00:	d02c      	beq.n	800db5c <FreqInvertRescale+0x68>
			y += NBANDS;
			y0 = *y;	y += 2*NBANDS;
 800db02:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
			y1 = *y;	y += 2*NBANDS;
			y2 = *y;	y += 2*NBANDS;
			y3 = *y;	y += 2*NBANDS;
			y4 = *y;	y += 2*NBANDS;
			y5 = *y;	y += 2*NBANDS;
 800db06:	f8dc 1580 	ldr.w	r1, [ip, #1408]	; 0x580
			y6 = *y;	y += 2*NBANDS;
 800db0a:	f8dc 2680 	ldr.w	r2, [ip, #1664]	; 0x680
			y7 = *y;	y += 2*NBANDS;
 800db0e:	f8dc 3780 	ldr.w	r3, [ip, #1920]	; 0x780
			y8 = *y;	y += 2*NBANDS;

			y -= 18*NBANDS;
			*y = -y0;	y += 2*NBANDS;
 800db12:	4240      	negs	r0, r0
 800db14:	f8cc 0080 	str.w	r0, [ip, #128]	; 0x80
			*y = -y1;	y += 2*NBANDS;
 800db18:	f8dc 0180 	ldr.w	r0, [ip, #384]	; 0x180
 800db1c:	4240      	negs	r0, r0
 800db1e:	f8cc 0180 	str.w	r0, [ip, #384]	; 0x180
			*y = -y2;	y += 2*NBANDS;
 800db22:	f8dc 0280 	ldr.w	r0, [ip, #640]	; 0x280
 800db26:	4240      	negs	r0, r0
 800db28:	f8cc 0280 	str.w	r0, [ip, #640]	; 0x280
			*y = -y3;	y += 2*NBANDS;
 800db2c:	f8dc 0380 	ldr.w	r0, [ip, #896]	; 0x380
 800db30:	4240      	negs	r0, r0
 800db32:	f8cc 0380 	str.w	r0, [ip, #896]	; 0x380
			*y = -y4;	y += 2*NBANDS;
 800db36:	f8dc 0480 	ldr.w	r0, [ip, #1152]	; 0x480
 800db3a:	4240      	negs	r0, r0
 800db3c:	f8cc 0480 	str.w	r0, [ip, #1152]	; 0x480
			*y = -y5;	y += 2*NBANDS;
 800db40:	4249      	negs	r1, r1
 800db42:	f8cc 1580 	str.w	r1, [ip, #1408]	; 0x580
			*y = -y6;	y += 2*NBANDS;
 800db46:	4252      	negs	r2, r2
 800db48:	f8cc 2680 	str.w	r2, [ip, #1664]	; 0x680
			*y = -y7;	y += 2*NBANDS;
 800db4c:	425b      	negs	r3, r3
 800db4e:	f8cc 3780 	str.w	r3, [ip, #1920]	; 0x780
			*y = -y8;	y += 2*NBANDS;
 800db52:	f8dc 3880 	ldr.w	r3, [ip, #2176]	; 0x880
 800db56:	425b      	negs	r3, r3
 800db58:	f8cc 3880 	str.w	r3, [ip, #2176]	; 0x880
		}
		return 0;
 800db5c:	4670      	mov	r0, lr
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		}
		return mOut;
	}
}
 800db5e:	bd70      	pop	{r4, r5, r6, pc}
		if (blockIdx & 0x01) {
 800db60:	f012 0401 	ands.w	r4, r2, #1
 800db64:	d14b      	bne.n	800dbfe <FreqInvertRescale+0x10a>
		mOut = 0;
 800db66:	4620      	mov	r0, r4
 800db68:	e051      	b.n	800dc0e <FreqInvertRescale+0x11a>
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800db6a:	fa03 f30e 	lsl.w	r3, r3, lr
 800db6e:	f841 3b04 	str.w	r3, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800db72:	3402      	adds	r4, #2
 800db74:	2c11      	cmp	r4, #17
 800db76:	dcf2      	bgt.n	800db5e <FreqInvertRescale+0x6a>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800db78:	f8dc 3000 	ldr.w	r3, [ip]
 800db7c:	17de      	asrs	r6, r3, #31
 800db7e:	f1ce 021f 	rsb	r2, lr, #31
 800db82:	fa43 f502 	asr.w	r5, r3, r2
 800db86:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800db8a:	d005      	beq.n	800db98 <FreqInvertRescale+0xa4>
 800db8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db90:	fa23 f30e 	lsr.w	r3, r3, lr
 800db94:	3b01      	subs	r3, #1
 800db96:	4073      	eors	r3, r6
 800db98:	fa03 f30e 	lsl.w	r3, r3, lr
 800db9c:	f8cc 3000 	str.w	r3, [ip]
	__asm__ volatile (
 800dba0:	2500      	movs	r5, #0
 800dba2:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800dba6:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 800dbaa:	4305      	orrs	r5, r0
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800dbac:	f8dc 3080 	ldr.w	r3, [ip, #128]	; 0x80
 800dbb0:	425b      	negs	r3, r3
 800dbb2:	17de      	asrs	r6, r3, #31
 800dbb4:	fa43 f002 	asr.w	r0, r3, r2
 800dbb8:	ebb0 7fe3 	cmp.w	r0, r3, asr #31
 800dbbc:	d005      	beq.n	800dbca <FreqInvertRescale+0xd6>
 800dbbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbc2:	fa23 f30e 	lsr.w	r3, r3, lr
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	4073      	eors	r3, r6
 800dbca:	fa03 f30e 	lsl.w	r3, r3, lr
 800dbce:	f8cc 3080 	str.w	r3, [ip, #128]	; 0x80
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 800dbd8:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800dbdc:	4328      	orrs	r0, r5
 800dbde:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800dbe2:	680b      	ldr	r3, [r1, #0]
 800dbe4:	17dd      	asrs	r5, r3, #31
 800dbe6:	fa43 f202 	asr.w	r2, r3, r2
 800dbea:	ebb2 7fe3 	cmp.w	r2, r3, asr #31
 800dbee:	d0bc      	beq.n	800db6a <FreqInvertRescale+0x76>
 800dbf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbf4:	fa23 f30e 	lsr.w	r3, r3, lr
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	406b      	eors	r3, r5
 800dbfc:	e7b5      	b.n	800db6a <FreqInvertRescale+0x76>
		mOut = 0;
 800dbfe:	2000      	movs	r0, #0
			for (i = 0; i < 18; i+=2) {
 800dc00:	4604      	mov	r4, r0
 800dc02:	e7b7      	b.n	800db74 <FreqInvertRescale+0x80>
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800dc04:	fa03 f30e 	lsl.w	r3, r3, lr
 800dc08:	f841 3b04 	str.w	r3, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800dc0c:	3402      	adds	r4, #2
 800dc0e:	2c11      	cmp	r4, #17
 800dc10:	dca5      	bgt.n	800db5e <FreqInvertRescale+0x6a>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800dc12:	f8dc 3000 	ldr.w	r3, [ip]
 800dc16:	17de      	asrs	r6, r3, #31
 800dc18:	f1ce 021f 	rsb	r2, lr, #31
 800dc1c:	fa43 f502 	asr.w	r5, r3, r2
 800dc20:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800dc24:	d005      	beq.n	800dc32 <FreqInvertRescale+0x13e>
 800dc26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc2a:	fa23 f30e 	lsr.w	r3, r3, lr
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	4073      	eors	r3, r6
 800dc32:	fa03 f30e 	lsl.w	r3, r3, lr
 800dc36:	f8cc 3000 	str.w	r3, [ip]
 800dc3a:	2500      	movs	r5, #0
 800dc3c:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800dc40:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 800dc44:	4328      	orrs	r0, r5
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800dc46:	f8dc 3080 	ldr.w	r3, [ip, #128]	; 0x80
 800dc4a:	17de      	asrs	r6, r3, #31
 800dc4c:	fa43 f502 	asr.w	r5, r3, r2
 800dc50:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800dc54:	d005      	beq.n	800dc62 <FreqInvertRescale+0x16e>
 800dc56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc5a:	fa23 f30e 	lsr.w	r3, r3, lr
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	4073      	eors	r3, r6
 800dc62:	fa03 f30e 	lsl.w	r3, r3, lr
 800dc66:	f8cc 3080 	str.w	r3, [ip, #128]	; 0x80
 800dc6a:	2500      	movs	r5, #0
 800dc6c:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800dc70:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 800dc74:	4328      	orrs	r0, r5
 800dc76:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800dc7a:	680b      	ldr	r3, [r1, #0]
 800dc7c:	17dd      	asrs	r5, r3, #31
 800dc7e:	fa43 f202 	asr.w	r2, r3, r2
 800dc82:	ebb2 7fe3 	cmp.w	r2, r3, asr #31
 800dc86:	d0bd      	beq.n	800dc04 <FreqInvertRescale+0x110>
 800dc88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc8c:	fa23 f30e 	lsr.w	r3, r3, lr
 800dc90:	3b01      	subs	r3, #1
 800dc92:	406b      	eors	r3, r5
 800dc94:	e7b6      	b.n	800dc04 <FreqInvertRescale+0x110>
	...

0800dc98 <IMDCT36>:
 *
 * TODO:        optimize for ARM (reorder window coefs, ARM-style pointers in C, 
 *                inline asm may or may not be helpful)
 **************************************************************************************/
static int IMDCT36(int *xCurr, int *xPrev, int *y, int btCurr, int btPrev, int blockIdx, int gb)
{
 800dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9c:	b0af      	sub	sp, #188	; 0xbc
 800dc9e:	9101      	str	r1, [sp, #4]
 800dca0:	9202      	str	r2, [sp, #8]
 800dca2:	9305      	str	r3, [sp, #20]
 800dca4:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
	int acc1, acc2, s, d, t, mOut;
	int xo, xe, c, *xp, yLo, yHi;
	const int *cp, *wp;

	acc1 = acc2 = 0;
	xCurr += 17;
 800dca6:	3044      	adds	r0, #68	; 0x44

	/* 7 gb is always adequate for antialias + accumulator loop + idct9 */
	if (gb < 7) {
 800dca8:	2e06      	cmp	r6, #6
 800dcaa:	f300 8167 	bgt.w	800df7c <IMDCT36+0x2e4>
 800dcae:	460c      	mov	r4, r1
 800dcb0:	4615      	mov	r5, r2
		/* rarely triggered - 5% to 10% of the time on normal clips (with Q25 input) */
		es = 7 - gb;
 800dcb2:	f1c6 0607 	rsb	r6, r6, #7
	acc1 = acc2 = 0;
 800dcb6:	f04f 0c00 	mov.w	ip, #0
 800dcba:	4663      	mov	r3, ip
		for (i = 8; i >= 0; i--) {	
 800dcbc:	2108      	movs	r1, #8
 800dcbe:	4684      	mov	ip, r0
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	e01c      	b.n	800dcfe <IMDCT36+0x66>
			acc1 = ((*xCurr--) >> es) - acc1;
 800dcc4:	4667      	mov	r7, ip
 800dcc6:	f857 2908 	ldr.w	r2, [r7], #-8
 800dcca:	4132      	asrs	r2, r6
 800dccc:	1ad3      	subs	r3, r2, r3
			acc2 = acc1 - acc2;
 800dcce:	1a18      	subs	r0, r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800dcd0:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800dcd4:	4132      	asrs	r2, r6
 800dcd6:	1ad3      	subs	r3, r2, r3
			xBuf[i+9] = acc2;	/* odd */
 800dcd8:	f101 0209 	add.w	r2, r1, #9
 800dcdc:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800dce0:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 800dce4:	f842 0c48 	str.w	r0, [r2, #-72]
			xBuf[i+0] = acc1;	/* even */
 800dce8:	eb0c 0281 	add.w	r2, ip, r1, lsl #2
 800dcec:	f842 3c48 	str.w	r3, [r2, #-72]
			xPrev[i] >>= es;
 800dcf0:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800dcf4:	4132      	asrs	r2, r6
 800dcf6:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
		for (i = 8; i >= 0; i--) {	
 800dcfa:	3901      	subs	r1, #1
			acc1 = ((*xCurr--) >> es) - acc1;
 800dcfc:	46bc      	mov	ip, r7
		for (i = 8; i >= 0; i--) {	
 800dcfe:	2900      	cmp	r1, #0
 800dd00:	dae0      	bge.n	800dcc4 <IMDCT36+0x2c>
 800dd02:	9603      	str	r6, [sp, #12]
 800dd04:	9401      	str	r4, [sp, #4]
 800dd06:	9502      	str	r5, [sp, #8]
			xBuf[i+9] = acc2;	/* odd */
			xBuf[i+0] = acc1;	/* even */
		}
	}
	/* xEven[0] and xOdd[0] scaled by 0.5 */
	xBuf[9] >>= 1;
 800dd08:	9825      	ldr	r0, [sp, #148]	; 0x94
 800dd0a:	1043      	asrs	r3, r0, #1
 800dd0c:	9304      	str	r3, [sp, #16]
 800dd0e:	9325      	str	r3, [sp, #148]	; 0x94
	xBuf[0] >>= 1;
 800dd10:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dd12:	1049      	asrs	r1, r1, #1
 800dd14:	911c      	str	r1, [sp, #112]	; 0x70
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800dd16:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800dd1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dd1c:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 800dd20:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 800dd24:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800dd26:	9f24      	ldr	r7, [sp, #144]	; 0x90
	a1 = x0 - x6;
 800dd28:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800dd2a:	1b0e      	subs	r6, r1, r4
 800dd2c:	9606      	str	r6, [sp, #24]
	a2 = x1 - x5;
 800dd2e:	eba8 090a 	sub.w	r9, r8, sl
	a3 = x1 + x5;
 800dd32:	eb08 040a 	add.w	r4, r8, sl
	a4 = x2 - x4;
 800dd36:	eba2 0c0e 	sub.w	ip, r2, lr
	a5 = x2 + x4;
 800dd3a:	eb02 030e 	add.w	r3, r2, lr
	a6 = x2 + x8;
 800dd3e:	443a      	add	r2, r7
	a7 = x1 + x7;
 800dd40:	eb08 0500 	add.w	r5, r8, r0
 800dd44:	9507      	str	r5, [sp, #28]
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800dd46:	eba7 0e0e 	sub.w	lr, r7, lr
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800dd4a:	ebaa 0800 	sub.w	r8, sl, r0
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800dd4e:	eba9 0000 	sub.w	r0, r9, r0
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800dd52:	ebac 0507 	sub.w	r5, ip, r7
 800dd56:	9508      	str	r5, [sp, #32]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800dd58:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 800dd5c:	4eb8      	ldr	r6, [pc, #736]	; (800e040 <IMDCT36+0x3a8>)
 800dd5e:	fb86 7c0c 	smull	r7, ip, r6, ip
 800dd62:	4605      	mov	r5, r0
 800dd64:	fb86 0505 	smull	r0, r5, r6, r5
 800dd68:	9509      	str	r5, [sp, #36]	; 0x24
 800dd6a:	469b      	mov	fp, r3
 800dd6c:	4fb5      	ldr	r7, [pc, #724]	; (800e044 <IMDCT36+0x3ac>)
 800dd6e:	fb87 0b0b 	smull	r0, fp, r7, fp
 800dd72:	4eb5      	ldr	r6, [pc, #724]	; (800e048 <IMDCT36+0x3b0>)
 800dd74:	fb86 0202 	smull	r0, r2, r6, r2
 800dd78:	fb87 0e0e 	smull	r0, lr, r7, lr
 800dd7c:	fb86 0303 	smull	r0, r3, r6, r3
 800dd80:	46c2      	mov	sl, r8
 800dd82:	f106 5770 	add.w	r7, r6, #1006632960	; 0x3c000000
 800dd86:	f507 274c 	add.w	r7, r7, #835584	; 0xcc000
 800dd8a:	f207 27cb 	addw	r7, r7, #715	; 0x2cb
 800dd8e:	463e      	mov	r6, r7
 800dd90:	fb87 0a0a 	smull	r0, sl, r7, sl
 800dd94:	9807      	ldr	r0, [sp, #28]
 800dd96:	4dad      	ldr	r5, [pc, #692]	; (800e04c <IMDCT36+0x3b4>)
 800dd98:	fb85 7000 	smull	r7, r0, r5, r0
 800dd9c:	46a1      	mov	r9, r4
 800dd9e:	fb86 7909 	smull	r7, r9, r6, r9
 800dda2:	4647      	mov	r7, r8
 800dda4:	fb85 8707 	smull	r8, r7, r5, r7
	a12 = x[0] +  (x[6] >> 1);
 800dda8:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800ddaa:	eb01 0164 	add.w	r1, r1, r4, asr #1
	a13 = a12  +  (  m1 << 1);
 800ddae:	eb01 084c 	add.w	r8, r1, ip, lsl #1
	a14 = a12  -  (  m1 << 1);
 800ddb2:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
	a15 = a1   +  ( a11 >> 1);
 800ddb6:	9e06      	ldr	r6, [sp, #24]
 800ddb8:	9c08      	ldr	r4, [sp, #32]
 800ddba:	eb06 0c64 	add.w	ip, r6, r4, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800ddbe:	0052      	lsls	r2, r2, #1
 800ddc0:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	a17 = ( m7 << 1) - (m8 << 1);
 800ddc4:	005b      	lsls	r3, r3, #1
 800ddc6:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
	a18 = a16 + a17;
 800ddca:	eb02 0e03 	add.w	lr, r2, r3
	a19 = ( m9 << 1) + (m10 << 1);
 800ddce:	0040      	lsls	r0, r0, #1
 800ddd0:	eb00 004a 	add.w	r0, r0, sl, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800ddd4:	007f      	lsls	r7, r7, #1
 800ddd6:	ebc7 0749 	rsb	r7, r7, r9, lsl #1
	a21 = a20 - a19;
 800ddda:	eba7 0900 	sub.w	r9, r7, r0
	a22 = a13 + a16;
 800ddde:	eb08 0a02 	add.w	sl, r8, r2
	a23 = a14 + a16;
 800dde2:	440a      	add	r2, r1
	a24 = a14 + a17;
 800dde4:	eb01 0b03 	add.w	fp, r1, r3
	a25 = a13 + a17;
 800dde8:	4443      	add	r3, r8
	a26 = a14 - a18;
 800ddea:	eba1 010e 	sub.w	r1, r1, lr
	a27 = a13 - a18;
 800ddee:	eba8 0e0e 	sub.w	lr, r8, lr
	x0 = a22 + a19;			x[0] = x0;
 800ddf2:	4482      	add	sl, r0
 800ddf4:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800ddf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ddfa:	eb0c 0845 	add.w	r8, ip, r5, lsl #1
 800ddfe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
	x2 = a24 + a20;			x[2] = x2;
 800de02:	44bb      	add	fp, r7
 800de04:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
	x3 = a26 - a21;			x[3] = x3;
 800de08:	eba1 0109 	sub.w	r1, r1, r9
 800de0c:	911f      	str	r1, [sp, #124]	; 0x7c
	x4 = a1 - a11;			x[4] = x4;
 800de0e:	1b31      	subs	r1, r6, r4
 800de10:	9120      	str	r1, [sp, #128]	; 0x80
	x5 = a27 + a21;			x[5] = x5;
 800de12:	eb09 010e 	add.w	r1, r9, lr
 800de16:	9121      	str	r1, [sp, #132]	; 0x84
	x6 = a25 - a20;			x[6] = x6;
 800de18:	1bdb      	subs	r3, r3, r7
 800de1a:	9322      	str	r3, [sp, #136]	; 0x88
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800de1c:	ebac 0345 	sub.w	r3, ip, r5, lsl #1
 800de20:	9323      	str	r3, [sp, #140]	; 0x8c
	x8 = a23 - a19;			x[8] = x8;
 800de22:	1a12      	subs	r2, r2, r0
 800de24:	9224      	str	r2, [sp, #144]	; 0x90
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800de26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800de28:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800de2a:	9f29      	ldr	r7, [sp, #164]	; 0xa4
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 800de2c:	f8dd c0a8 	ldr.w	ip, [sp, #168]	; 0xa8
 800de30:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800de32:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
	a1 = x0 - x6;
 800de36:	9b04      	ldr	r3, [sp, #16]
 800de38:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800de3a:	1b1c      	subs	r4, r3, r4
	a2 = x1 - x5;
 800de3c:	eba2 0a0c 	sub.w	sl, r2, ip
	a3 = x1 + x5;
 800de40:	eb02 090c 	add.w	r9, r2, ip
	a4 = x2 - x4;
 800de44:	eba1 0807 	sub.w	r8, r1, r7
	a5 = x2 + x4;
 800de48:	19cb      	adds	r3, r1, r7
	a6 = x2 + x8;
 800de4a:	4471      	add	r1, lr
	a7 = x1 + x7;
 800de4c:	1815      	adds	r5, r2, r0
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800de4e:	ebae 0707 	sub.w	r7, lr, r7
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800de52:	ebac 0c00 	sub.w	ip, ip, r0
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800de56:	ebaa 0000 	sub.w	r0, sl, r0
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800de5a:	eba8 020e 	sub.w	r2, r8, lr
 800de5e:	9206      	str	r2, [sp, #24]
 800de60:	f8dd e0a0 	ldr.w	lr, [sp, #160]	; 0xa0
 800de64:	4e76      	ldr	r6, [pc, #472]	; (800e040 <IMDCT36+0x3a8>)
 800de66:	fb86 8e0e 	smull	r8, lr, r6, lr
 800de6a:	4602      	mov	r2, r0
 800de6c:	fb86 0202 	smull	r0, r2, r6, r2
 800de70:	9207      	str	r2, [sp, #28]
 800de72:	469b      	mov	fp, r3
 800de74:	4e73      	ldr	r6, [pc, #460]	; (800e044 <IMDCT36+0x3ac>)
 800de76:	fb86 0b0b 	smull	r0, fp, r6, fp
 800de7a:	4a73      	ldr	r2, [pc, #460]	; (800e048 <IMDCT36+0x3b0>)
 800de7c:	fb82 0101 	smull	r0, r1, r2, r1
 800de80:	fb86 0707 	smull	r0, r7, r6, r7
 800de84:	fb82 0303 	smull	r0, r3, r2, r3
 800de88:	46e2      	mov	sl, ip
 800de8a:	f1a6 667c 	sub.w	r6, r6, #264241152	; 0xfc00000
 800de8e:	f5a6 26dc 	sub.w	r6, r6, #450560	; 0x6e000
 800de92:	f5a6 76a1 	sub.w	r6, r6, #322	; 0x142
 800de96:	fb86 0a0a 	smull	r0, sl, r6, sl
 800de9a:	462a      	mov	r2, r5
 800de9c:	4d6b      	ldr	r5, [pc, #428]	; (800e04c <IMDCT36+0x3b4>)
 800de9e:	fb85 0202 	smull	r0, r2, r5, r2
 800dea2:	fb86 0909 	smull	r0, r9, r6, r9
 800dea6:	fb85 0c0c 	smull	r0, ip, r5, ip
	a12 = x[0] +  (x[6] >> 1);
 800deaa:	9804      	ldr	r0, [sp, #16]
 800deac:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800deae:	eb00 0065 	add.w	r0, r0, r5, asr #1
	a13 = a12  +  (  m1 << 1);
 800deb2:	eb00 084e 	add.w	r8, r0, lr, lsl #1
	a14 = a12  -  (  m1 << 1);
 800deb6:	eba0 004e 	sub.w	r0, r0, lr, lsl #1
	a15 = a1   +  ( a11 >> 1);
 800deba:	9e06      	ldr	r6, [sp, #24]
 800debc:	eb04 0e66 	add.w	lr, r4, r6, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800dec0:	0049      	lsls	r1, r1, #1
 800dec2:	eb01 014b 	add.w	r1, r1, fp, lsl #1
	a17 = ( m7 << 1) - (m8 << 1);
 800dec6:	005b      	lsls	r3, r3, #1
 800dec8:	ebc3 0347 	rsb	r3, r3, r7, lsl #1
	a18 = a16 + a17;
 800decc:	18cf      	adds	r7, r1, r3
	a19 = ( m9 << 1) + (m10 << 1);
 800dece:	0052      	lsls	r2, r2, #1
 800ded0:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800ded4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ded8:	ebcc 0c49 	rsb	ip, ip, r9, lsl #1
	a21 = a20 - a19;
 800dedc:	ebac 0902 	sub.w	r9, ip, r2
	a22 = a13 + a16;
 800dee0:	eb08 0a01 	add.w	sl, r8, r1
	a23 = a14 + a16;
 800dee4:	4401      	add	r1, r0
	a24 = a14 + a17;
 800dee6:	eb00 0b03 	add.w	fp, r0, r3
	a25 = a13 + a17;
 800deea:	4443      	add	r3, r8
	a26 = a14 - a18;
 800deec:	1bc0      	subs	r0, r0, r7
	a27 = a13 - a18;
 800deee:	eba8 0707 	sub.w	r7, r8, r7
	x0 = a22 + a19;			x[0] = x0;
 800def2:	4492      	add	sl, r2
 800def4:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800def8:	9d07      	ldr	r5, [sp, #28]
 800defa:	eb0e 0845 	add.w	r8, lr, r5, lsl #1
 800defe:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
	x2 = a24 + a20;			x[2] = x2;
 800df02:	44e3      	add	fp, ip
 800df04:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
	x3 = a26 - a21;			x[3] = x3;
 800df08:	eba0 0009 	sub.w	r0, r0, r9
 800df0c:	9028      	str	r0, [sp, #160]	; 0xa0
	x4 = a1 - a11;			x[4] = x4;
 800df0e:	1ba0      	subs	r0, r4, r6
 800df10:	9029      	str	r0, [sp, #164]	; 0xa4
	x5 = a27 + a21;			x[5] = x5;
 800df12:	444f      	add	r7, r9
 800df14:	972a      	str	r7, [sp, #168]	; 0xa8
	x6 = a25 - a20;			x[6] = x6;
 800df16:	eba3 030c 	sub.w	r3, r3, ip
 800df1a:	932b      	str	r3, [sp, #172]	; 0xac
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800df1c:	ebae 0345 	sub.w	r3, lr, r5, lsl #1
 800df20:	932c      	str	r3, [sp, #176]	; 0xb0
	x8 = a23 - a19;			x[8] = x8;
 800df22:	1a89      	subs	r1, r1, r2
 800df24:	912d      	str	r1, [sp, #180]	; 0xb4
	idct9(xBuf+9);	/* odd */

	xp = xBuf + 8;
	cp = c18 + 8;
	mOut = 0;
	if (btPrev == 0 && btCurr == 0) {
 800df26:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800df28:	9a05      	ldr	r2, [sp, #20]
 800df2a:	ea53 0c02 	orrs.w	ip, r3, r2
 800df2e:	d172      	bne.n	800e016 <IMDCT36+0x37e>
	mOut = 0;
 800df30:	4667      	mov	r7, ip
		/* fast path - use symmetry of sin window to reduce windowing multiplies to 18 (N/2) */
		wp = fastWin36;
 800df32:	4847      	ldr	r0, [pc, #284]	; (800e050 <IMDCT36+0x3b8>)
	cp = c18 + 8;
 800df34:	f8df e120 	ldr.w	lr, [pc, #288]	; 800e058 <IMDCT36+0x3c0>
	xp = xBuf + 8;
 800df38:	aa24      	add	r2, sp, #144	; 0x90
 800df3a:	9e03      	ldr	r6, [sp, #12]
 800df3c:	4601      	mov	r1, r0
 800df3e:	9c01      	ldr	r4, [sp, #4]
 800df40:	9d02      	ldr	r5, [sp, #8]
 800df42:	e057      	b.n	800dff4 <IMDCT36+0x35c>
			acc1 = (*xCurr--) - acc1;
 800df44:	4602      	mov	r2, r0
 800df46:	f852 6908 	ldr.w	r6, [r2], #-8
 800df4a:	1af3      	subs	r3, r6, r3
			acc2 = acc1 - acc2;
 800df4c:	1bdf      	subs	r7, r3, r7
			acc1 = (*xCurr--) - acc1;
 800df4e:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800df52:	1ac3      	subs	r3, r0, r3
			xBuf[i+9] = acc2;	/* odd */
 800df54:	f101 0009 	add.w	r0, r1, #9
 800df58:	ae2e      	add	r6, sp, #184	; 0xb8
 800df5a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800df5e:	f840 7c48 	str.w	r7, [r0, #-72]
			xBuf[i+0] = acc1;	/* even */
 800df62:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800df66:	f840 3c48 	str.w	r3, [r0, #-72]
		for (i = 8; i >= 0; i--) {	
 800df6a:	3901      	subs	r1, #1
			acc1 = (*xCurr--) - acc1;
 800df6c:	4610      	mov	r0, r2
		for (i = 8; i >= 0; i--) {	
 800df6e:	2900      	cmp	r1, #0
 800df70:	dae8      	bge.n	800df44 <IMDCT36+0x2ac>
		es = 0;
 800df72:	9401      	str	r4, [sp, #4]
 800df74:	9502      	str	r5, [sp, #8]
 800df76:	2300      	movs	r3, #0
 800df78:	9303      	str	r3, [sp, #12]
 800df7a:	e6c5      	b.n	800dd08 <IMDCT36+0x70>
	acc1 = acc2 = 0;
 800df7c:	2700      	movs	r7, #0
 800df7e:	463b      	mov	r3, r7
		for (i = 8; i >= 0; i--) {	
 800df80:	2108      	movs	r1, #8
 800df82:	9c01      	ldr	r4, [sp, #4]
 800df84:	9d02      	ldr	r5, [sp, #8]
 800df86:	e7f2      	b.n	800df6e <IMDCT36+0x2d6>
		for (i = 0; i < 9; i++) {
			/* do ARM-style pointer arithmetic (i still needed for y[] indexing - compiler spills if 2 y pointers) */
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800df88:	f85e 0904 	ldr.w	r0, [lr], #-4
 800df8c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800df8e:	f852 8904 	ldr.w	r8, [r2], #-4
 800df92:	fb80 9303 	smull	r9, r3, r0, r3
			/* gain 2 int bits here */
			xo = MULSHIFT32(c, xo);			/* 2*c18*xOdd (mul by 2 implicit in scaling)  */
			xe >>= 2;

			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800df96:	f8d4 9000 	ldr.w	r9, [r4]
 800df9a:	f1c9 0000 	rsb	r0, r9, #0
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 800df9e:	eba3 0aa8 	sub.w	sl, r3, r8, asr #2
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800dfa2:	eb03 03a8 	add.w	r3, r3, r8, asr #2
 800dfa6:	f844 3b04 	str.w	r3, [r4], #4
			t = s - d;
 800dfaa:	eba0 030a 	sub.w	r3, r0, sl

			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 800dfae:	4688      	mov	r8, r1
 800dfb0:	f858 0b08 	ldr.w	r0, [r8], #8
 800dfb4:	fb83 b000 	smull	fp, r0, r3, r0
 800dfb8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
			yHi = (s + (MULSHIFT32(t, *wp++) << 2));
 800dfbc:	6849      	ldr	r1, [r1, #4]
 800dfbe:	fb83 a101 	smull	sl, r1, r3, r1
    return y;
 800dfc2:	ebc9 0181 	rsb	r1, r9, r1, lsl #2
			y[(i)*NBANDS]    = 	yLo;
 800dfc6:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800dfca:	50e8      	str	r0, [r5, r3]
			y[(17-i)*NBANDS] =  yHi;
 800dfcc:	f1cc 0311 	rsb	r3, ip, #17
 800dfd0:	01db      	lsls	r3, r3, #7
 800dfd2:	50e9      	str	r1, [r5, r3]
	__asm__ volatile (
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4699      	mov	r9, r3
 800dfd8:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 800dfdc:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
			mOut |= FASTABS(yLo);
 800dfe0:	ea47 0709 	orr.w	r7, r7, r9
 800dfe4:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800dfe8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
			mOut |= FASTABS(yHi);
 800dfec:	431f      	orrs	r7, r3
		for (i = 0; i < 9; i++) {
 800dfee:	f10c 0c01 	add.w	ip, ip, #1
			yHi = (s + (MULSHIFT32(t, *wp++) << 2));
 800dff2:	4641      	mov	r1, r8
		for (i = 0; i < 9; i++) {
 800dff4:	f1bc 0f08 	cmp.w	ip, #8
 800dff8:	ddc6      	ble.n	800df88 <IMDCT36+0x2f0>
 800dffa:	9603      	str	r6, [sp, #12]
 800dffc:	9401      	str	r4, [sp, #4]
 800dffe:	9502      	str	r5, [sp, #8]
			mOut |= FASTABS(yHi);
		}
	}

	xPrev -= 9;
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800e000:	9b03      	ldr	r3, [sp, #12]
 800e002:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800e004:	9901      	ldr	r1, [sp, #4]
 800e006:	3924      	subs	r1, #36	; 0x24
 800e008:	9802      	ldr	r0, [sp, #8]
 800e00a:	f7ff fd73 	bl	800daf4 <FreqInvertRescale>

	return mOut;
}
 800e00e:	4338      	orrs	r0, r7
 800e010:	b02f      	add	sp, #188	; 0xbc
 800e012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		WinPrevious(xPrev, xPrevWin, btPrev);
 800e016:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800e018:	a90a      	add	r1, sp, #40	; 0x28
 800e01a:	9c01      	ldr	r4, [sp, #4]
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7ff fcd7 	bl	800d9d0 <WinPrevious>
		wp = imdctWin[btCurr];
 800e022:	9b05      	ldr	r3, [sp, #20]
 800e024:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800e028:	4a0a      	ldr	r2, [pc, #40]	; (800e054 <IMDCT36+0x3bc>)
 800e02a:	eb02 1e03 	add.w	lr, r2, r3, lsl #4
	cp = c18 + 8;
 800e02e:	f8df c028 	ldr.w	ip, [pc, #40]	; 800e058 <IMDCT36+0x3c0>
	xp = xBuf + 8;
 800e032:	a824      	add	r0, sp, #144	; 0x90
	mOut = 0;
 800e034:	2700      	movs	r7, #0
		for (i = 0; i < 9; i++) {
 800e036:	463a      	mov	r2, r7
 800e038:	9e03      	ldr	r6, [sp, #12]
 800e03a:	9d02      	ldr	r5, [sp, #8]
 800e03c:	e04a      	b.n	800e0d4 <IMDCT36+0x43c>
 800e03e:	bf00      	nop
 800e040:	6ed9eba1 	.word	0x6ed9eba1
 800e044:	620dbe8b 	.word	0x620dbe8b
 800e048:	163a1a7e 	.word	0x163a1a7e
 800e04c:	7e0e2e32 	.word	0x7e0e2e32
 800e050:	0801cc8c 	.word	0x0801cc8c
 800e054:	0801cec4 	.word	0x0801cec4
 800e058:	0801cc88 	.word	0x0801cc88
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800e05c:	f85c 8904 	ldr.w	r8, [ip], #-4
 800e060:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e062:	f850 1904 	ldr.w	r1, [r0], #-4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e066:	fb88 9303 	smull	r9, r3, r8, r3
			d = xe - xo;
 800e06a:	ebc3 09a1 	rsb	r9, r3, r1, asr #2
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800e06e:	eb03 03a1 	add.w	r3, r3, r1, asr #2
 800e072:	f844 3b04 	str.w	r3, [r4], #4
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 800e076:	ab2e      	add	r3, sp, #184	; 0xb8
 800e078:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e07c:	f853 1c90 	ldr.w	r1, [r3, #-144]
 800e080:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
 800e084:	fb89 8303 	smull	r8, r3, r9, r3
 800e088:	eb01 0803 	add.w	r8, r1, r3
 800e08c:	ea4f 0888 	mov.w	r8, r8, lsl #2
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800e090:	f1c2 0a11 	rsb	sl, r2, #17
 800e094:	ab2e      	add	r3, sp, #184	; 0xb8
 800e096:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e09a:	f853 1c90 	ldr.w	r1, [r3, #-144]
 800e09e:	f85e 302a 	ldr.w	r3, [lr, sl, lsl #2]
 800e0a2:	fb89 b303 	smull	fp, r3, r9, r3
 800e0a6:	4419      	add	r1, r3
 800e0a8:	0089      	lsls	r1, r1, #2
			y[(i)*NBANDS]    = yLo;
 800e0aa:	01d3      	lsls	r3, r2, #7
 800e0ac:	f845 8003 	str.w	r8, [r5, r3]
			y[(17-i)*NBANDS] = yHi;
 800e0b0:	ea4f 1aca 	mov.w	sl, sl, lsl #7
 800e0b4:	f845 100a 	str.w	r1, [r5, sl]
	__asm__ volatile (
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	4699      	mov	r9, r3
 800e0bc:	ea88 79e8 	eor.w	r9, r8, r8, asr #31
 800e0c0:	eba9 79e8 	sub.w	r9, r9, r8, asr #31
			mOut |= FASTABS(yLo);
 800e0c4:	ea47 0709 	orr.w	r7, r7, r9
 800e0c8:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800e0cc:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
			mOut |= FASTABS(yHi);
 800e0d0:	431f      	orrs	r7, r3
		for (i = 0; i < 9; i++) {
 800e0d2:	3201      	adds	r2, #1
 800e0d4:	2a08      	cmp	r2, #8
 800e0d6:	ddc1      	ble.n	800e05c <IMDCT36+0x3c4>
 800e0d8:	9603      	str	r6, [sp, #12]
 800e0da:	9401      	str	r4, [sp, #4]
 800e0dc:	9502      	str	r5, [sp, #8]
 800e0de:	e78f      	b.n	800e000 <IMDCT36+0x368>

0800e0e0 <IMDCT12x3>:
 * Return:      mOut (OR of abs(y) for all y calculated here)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
static int IMDCT12x3(int *xCurr, int *xPrev, int *y, int btPrev, int blockIdx, int gb)
{
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	b0a9      	sub	sp, #164	; 0xa4
 800e0e6:	9101      	str	r1, [sp, #4]
 800e0e8:	9202      	str	r2, [sp, #8]
 800e0ea:	9303      	str	r3, [sp, #12]
 800e0ec:	9b33      	ldr	r3, [sp, #204]	; 0xcc
	int i, es, mOut, yLo, xBuf[18], xPrevWin[18];	/* need temp buffer for reordering short blocks */
	const int *wp;

	es = 0;
	/* 7 gb is always adequate for accumulator loop + idct12 + window + overlap */
	if (gb < 7) {
 800e0ee:	2b06      	cmp	r3, #6
 800e0f0:	f300 81a0 	bgt.w	800e434 <IMDCT12x3+0x354>
		es = 7 - gb;
 800e0f4:	f1c3 0b07 	rsb	fp, r3, #7
		for (i = 0; i < 18; i+=2) {
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	460d      	mov	r5, r1
 800e0fc:	4614      	mov	r4, r2
 800e0fe:	e014      	b.n	800e12a <IMDCT12x3+0x4a>
			xCurr[i+0] >>= es;
 800e100:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800e104:	fa42 f20b 	asr.w	r2, r2, fp
 800e108:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			xCurr[i+1] >>= es;
 800e10c:	1c59      	adds	r1, r3, #1
 800e10e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 800e112:	fa42 f20b 	asr.w	r2, r2, fp
 800e116:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
			*xPrev++ >>= es;
 800e11a:	462a      	mov	r2, r5
 800e11c:	f852 1b04 	ldr.w	r1, [r2], #4
 800e120:	fa41 f10b 	asr.w	r1, r1, fp
 800e124:	6029      	str	r1, [r5, #0]
		for (i = 0; i < 18; i+=2) {
 800e126:	3302      	adds	r3, #2
			*xPrev++ >>= es;
 800e128:	4615      	mov	r5, r2
		for (i = 0; i < 18; i+=2) {
 800e12a:	2b11      	cmp	r3, #17
 800e12c:	dde8      	ble.n	800e100 <IMDCT12x3+0x20>
		}
		xPrev -= 9;
 800e12e:	9402      	str	r4, [sp, #8]
 800e130:	f1a5 0324 	sub.w	r3, r5, #36	; 0x24
 800e134:	9301      	str	r3, [sp, #4]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800e136:	6801      	ldr	r1, [r0, #0]
 800e138:	68c2      	ldr	r2, [r0, #12]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800e13a:	6985      	ldr	r5, [r0, #24]
 800e13c:	6a43      	ldr	r3, [r0, #36]	; 0x24
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800e13e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800e140:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
	x4 -= x5;
 800e144:	eba6 060c 	sub.w	r6, r6, ip
	x3 -= x4;
 800e148:	1b9b      	subs	r3, r3, r6
	x2 -= x3;
 800e14a:	1aed      	subs	r5, r5, r3
	x3 -= x5;
 800e14c:	eba3 030c 	sub.w	r3, r3, ip
	x1 -= x2;
 800e150:	1b52      	subs	r2, r2, r5
	x0 -= x1;
 800e152:	1a89      	subs	r1, r1, r2
	x1 -= x3;
 800e154:	1ad2      	subs	r2, r2, r3
	x0 >>= 1;
 800e156:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800e158:	1052      	asrs	r2, r2, #1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e15a:	4fcd      	ldr	r7, [pc, #820]	; (800e490 <IMDCT12x3+0x3b0>)
 800e15c:	fb87 e505 	smull	lr, r5, r7, r5
	a1 = x0 + (x4 >> 1);
 800e160:	eb01 0866 	add.w	r8, r1, r6, asr #1
	a2 = x0 - x4;
 800e164:	1b8e      	subs	r6, r1, r6
	x0 = a1 + a0;
 800e166:	eb08 0e45 	add.w	lr, r8, r5, lsl #1
	x4 = a1 - a0;
 800e16a:	eba8 0545 	sub.w	r5, r8, r5, lsl #1
 800e16e:	fb87 1303 	smull	r1, r3, r7, r3
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800e172:	ea4f 0843 	mov.w	r8, r3, lsl #1
	a1 = x1 + (x5 >> 1);
 800e176:	eb02 016c 	add.w	r1, r2, ip, asr #1
	a2 = x1 - x5;
 800e17a:	eba2 020c 	sub.w	r2, r2, ip
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800e17e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e182:	4cc4      	ldr	r4, [pc, #784]	; (800e494 <IMDCT12x3+0x3b4>)
 800e184:	fb84 c303 	smull	ip, r3, r4, r3
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	f8df a310 	ldr.w	sl, [pc, #784]	; 800e49c <IMDCT12x3+0x3bc>
 800e18e:	fb8a c202 	smull	ip, r2, sl, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800e192:	0092      	lsls	r2, r2, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800e194:	eba1 0108 	sub.w	r1, r1, r8
 800e198:	f8df c304 	ldr.w	ip, [pc, #772]	; 800e4a0 <IMDCT12x3+0x3c0>
 800e19c:	fb8c 8101 	smull	r8, r1, ip, r1
	*out = x0 + x1;	out++;
 800e1a0:	eb0e 0803 	add.w	r8, lr, r3
 800e1a4:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
	*out = x2 + x3;	out++;
 800e1a8:	eb06 0802 	add.w	r8, r6, r2
 800e1ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
	*out = x4 + x5;	out++;
 800e1b0:	eb05 0881 	add.w	r8, r5, r1, lsl #2
 800e1b4:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
	*out = x4 - x5;	out++;
 800e1b8:	eba5 0181 	sub.w	r1, r5, r1, lsl #2
 800e1bc:	9119      	str	r1, [sp, #100]	; 0x64
	*out = x2 - x3;	out++;
 800e1be:	1ab2      	subs	r2, r6, r2
 800e1c0:	921a      	str	r2, [sp, #104]	; 0x68
	*out = x0 - x1;
 800e1c2:	ebae 0303 	sub.w	r3, lr, r3
 800e1c6:	931b      	str	r3, [sp, #108]	; 0x6c
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800e1c8:	6845      	ldr	r5, [r0, #4]
 800e1ca:	6902      	ldr	r2, [r0, #16]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800e1cc:	69c6      	ldr	r6, [r0, #28]
 800e1ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800e1d0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e1d2:	f8d0 9040 	ldr.w	r9, [r0, #64]	; 0x40
	x4 -= x5;
 800e1d6:	eba1 0e09 	sub.w	lr, r1, r9
	x3 -= x4;
 800e1da:	eba3 030e 	sub.w	r3, r3, lr
	x2 -= x3;
 800e1de:	1af6      	subs	r6, r6, r3
	x3 -= x5;
 800e1e0:	eba3 0309 	sub.w	r3, r3, r9
	x1 -= x2;
 800e1e4:	1b92      	subs	r2, r2, r6
	x0 -= x1;
 800e1e6:	1aa9      	subs	r1, r5, r2
	x1 -= x3;
 800e1e8:	1ad2      	subs	r2, r2, r3
	x0 >>= 1;
 800e1ea:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800e1ec:	1052      	asrs	r2, r2, #1
 800e1ee:	fb87 5606 	smull	r5, r6, r7, r6
	a1 = x0 + (x4 >> 1);
 800e1f2:	eb01 086e 	add.w	r8, r1, lr, asr #1
	a2 = x0 - x4;
 800e1f6:	eba1 010e 	sub.w	r1, r1, lr
	x0 = a1 + a0;
 800e1fa:	eb08 0e46 	add.w	lr, r8, r6, lsl #1
	x4 = a1 - a0;
 800e1fe:	eba8 0646 	sub.w	r6, r8, r6, lsl #1
 800e202:	fb87 5303 	smull	r5, r3, r7, r3
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800e206:	ea4f 0843 	mov.w	r8, r3, lsl #1
	a1 = x1 + (x5 >> 1);
 800e20a:	eb02 0569 	add.w	r5, r2, r9, asr #1
	a2 = x1 - x5;
 800e20e:	eba2 0209 	sub.w	r2, r2, r9
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800e212:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e216:	fb84 9303 	smull	r9, r3, r4, r3
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	fb8a 9202 	smull	r9, r2, sl, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800e220:	0092      	lsls	r2, r2, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800e222:	eba5 0508 	sub.w	r5, r5, r8
 800e226:	fb8c 8505 	smull	r8, r5, ip, r5
	*out = x0 + x1;	out++;
 800e22a:	eb0e 0803 	add.w	r8, lr, r3
 800e22e:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
	*out = x2 + x3;	out++;
 800e232:	eb01 0802 	add.w	r8, r1, r2
 800e236:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
	*out = x4 + x5;	out++;
 800e23a:	eb06 0885 	add.w	r8, r6, r5, lsl #2
 800e23e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
	*out = x4 - x5;	out++;
 800e242:	eba6 0585 	sub.w	r5, r6, r5, lsl #2
 800e246:	951f      	str	r5, [sp, #124]	; 0x7c
	*out = x2 - x3;	out++;
 800e248:	1a8a      	subs	r2, r1, r2
 800e24a:	9220      	str	r2, [sp, #128]	; 0x80
	*out = x0 - x1;
 800e24c:	ebae 0303 	sub.w	r3, lr, r3
 800e250:	9321      	str	r3, [sp, #132]	; 0x84
	}

	/* requires 4 input guard bits for each imdct12 */
	imdct12(xCurr + 0, xBuf + 0);
	imdct12(xCurr + 1, xBuf + 6);
	imdct12(xCurr + 2, xBuf + 12);
 800e252:	f100 0e08 	add.w	lr, r0, #8
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800e256:	6880      	ldr	r0, [r0, #8]
 800e258:	f8de 200c 	ldr.w	r2, [lr, #12]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800e25c:	f8de 5018 	ldr.w	r5, [lr, #24]
 800e260:	f8de 3024 	ldr.w	r3, [lr, #36]	; 0x24
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800e264:	f8de 6030 	ldr.w	r6, [lr, #48]	; 0x30
 800e268:	f8de e03c 	ldr.w	lr, [lr, #60]	; 0x3c
	x4 -= x5;
 800e26c:	eba6 060e 	sub.w	r6, r6, lr
	x3 -= x4;
 800e270:	1b9b      	subs	r3, r3, r6
	x2 -= x3;
 800e272:	1aed      	subs	r5, r5, r3
	x3 -= x5;
 800e274:	eba3 030e 	sub.w	r3, r3, lr
	x1 -= x2;
 800e278:	1b52      	subs	r2, r2, r5
	x0 -= x1;
 800e27a:	1a81      	subs	r1, r0, r2
	x1 -= x3;
 800e27c:	1ad2      	subs	r2, r2, r3
	x0 >>= 1;
 800e27e:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800e280:	1052      	asrs	r2, r2, #1
 800e282:	fb87 0505 	smull	r0, r5, r7, r5
	a1 = x0 + (x4 >> 1);
 800e286:	eb01 0066 	add.w	r0, r1, r6, asr #1
	a2 = x0 - x4;
 800e28a:	1b89      	subs	r1, r1, r6
	x0 = a1 + a0;
 800e28c:	eb00 0645 	add.w	r6, r0, r5, lsl #1
	x4 = a1 - a0;
 800e290:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
 800e294:	fb87 0303 	smull	r0, r3, r7, r3
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800e298:	005f      	lsls	r7, r3, #1
	a1 = x1 + (x5 >> 1);
 800e29a:	eb02 006e 	add.w	r0, r2, lr, asr #1
	a2 = x1 - x5;
 800e29e:	eba2 020e 	sub.w	r2, r2, lr
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800e2a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e2a6:	fb84 e303 	smull	lr, r3, r4, r3
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	fb8a e202 	smull	lr, r2, sl, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800e2b0:	0092      	lsls	r2, r2, #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800e2b2:	1bc0      	subs	r0, r0, r7
 800e2b4:	fb8c 7000 	smull	r7, r0, ip, r0
	*out = x0 + x1;	out++;
 800e2b8:	18f7      	adds	r7, r6, r3
 800e2ba:	9722      	str	r7, [sp, #136]	; 0x88
	*out = x2 + x3;	out++;
 800e2bc:	188f      	adds	r7, r1, r2
 800e2be:	9723      	str	r7, [sp, #140]	; 0x8c
	*out = x4 + x5;	out++;
 800e2c0:	eb05 0780 	add.w	r7, r5, r0, lsl #2
 800e2c4:	9724      	str	r7, [sp, #144]	; 0x90
	*out = x4 - x5;	out++;
 800e2c6:	eba5 0080 	sub.w	r0, r5, r0, lsl #2
 800e2ca:	9025      	str	r0, [sp, #148]	; 0x94
	*out = x2 - x3;	out++;
 800e2cc:	1a8a      	subs	r2, r1, r2
 800e2ce:	9226      	str	r2, [sp, #152]	; 0x98
	*out = x0 - x1;
 800e2d0:	1af3      	subs	r3, r6, r3
 800e2d2:	9327      	str	r3, [sp, #156]	; 0x9c

	/* window previous from last time */
	WinPrevious(xPrev, xPrevWin, btPrev);
 800e2d4:	9a03      	ldr	r2, [sp, #12]
 800e2d6:	a904      	add	r1, sp, #16
 800e2d8:	9801      	ldr	r0, [sp, #4]
 800e2da:	f7ff fb79 	bl	800d9d0 <WinPrevious>
	/* could unroll this for speed, minimum loads (short blocks usually rare, so doesn't make much overall difference) 
	 * xPrevWin[i] << 2 still has 1 gb always, max gain of windowed xBuf stuff also < 1.0 and gain the sign bit
	 * so y calculations won't overflow
	 */
	wp = imdctWin[2];
	mOut = 0;
 800e2de:	2500      	movs	r5, #0
	for (i = 0; i < 3; i++) {
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	f8cd b00c 	str.w	fp, [sp, #12]
 800e2e6:	9c02      	ldr	r4, [sp, #8]
 800e2e8:	2902      	cmp	r1, #2
 800e2ea:	f300 80a6 	bgt.w	800e43a <IMDCT12x3+0x35a>
		yLo = (xPrevWin[ 0+i] << 2);
 800e2ee:	ab28      	add	r3, sp, #160	; 0xa0
 800e2f0:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800e2f4:	f85c 2c90 	ldr.w	r2, [ip, #-144]
 800e2f8:	0092      	lsls	r2, r2, #2
	__asm__ volatile (
 800e2fa:	f04f 0b00 	mov.w	fp, #0
 800e2fe:	465b      	mov	r3, fp
 800e300:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800e304:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 800e308:	432b      	orrs	r3, r5
 800e30a:	01c8      	lsls	r0, r1, #7
 800e30c:	5022      	str	r2, [r4, r0]
		yLo = (xPrevWin[ 3+i] << 2);
 800e30e:	1cce      	adds	r6, r1, #3
 800e310:	aa28      	add	r2, sp, #160	; 0xa0
 800e312:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 800e316:	f85e 2c90 	ldr.w	r2, [lr, #-144]
 800e31a:	0092      	lsls	r2, r2, #2
 800e31c:	465d      	mov	r5, fp
 800e31e:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800e322:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 800e326:	432b      	orrs	r3, r5
 800e328:	01f0      	lsls	r0, r6, #7
 800e32a:	5022      	str	r2, [r4, r0]
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 800e32c:	f101 0806 	add.w	r8, r1, #6
 800e330:	aa28      	add	r2, sp, #160	; 0xa0
 800e332:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 800e336:	f852 5c90 	ldr.w	r5, [r2, #-144]
 800e33a:	00ad      	lsls	r5, r5, #2
 800e33c:	4856      	ldr	r0, [pc, #344]	; (800e498 <IMDCT12x3+0x3b8>)
 800e33e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 800e342:	f85e 7c48 	ldr.w	r7, [lr, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e346:	fb82 e707 	smull	lr, r7, r2, r7
 800e34a:	442f      	add	r7, r5
	__asm__ volatile (
 800e34c:	465a      	mov	r2, fp
 800e34e:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
 800e352:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 800e356:	4313      	orrs	r3, r2
 800e358:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 800e35c:	50a7      	str	r7, [r4, r2]
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 800e35e:	f101 0709 	add.w	r7, r1, #9
 800e362:	aa28      	add	r2, sp, #160	; 0xa0
 800e364:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 800e368:	f85e 2c90 	ldr.w	r2, [lr, #-144]
 800e36c:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e370:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 800e374:	f1c1 0205 	rsb	r2, r1, #5
 800e378:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
 800e37c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800e380:	f852 2c48 	ldr.w	r2, [r2, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e384:	fb85 a202 	smull	sl, r2, r5, r2
 800e388:	444a      	add	r2, r9
	__asm__ volatile (
 800e38a:	465d      	mov	r5, fp
 800e38c:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800e390:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 800e394:	432b      	orrs	r3, r5
 800e396:	9302      	str	r3, [sp, #8]
 800e398:	01fd      	lsls	r5, r7, #7
 800e39a:	5162      	str	r2, [r4, r5]
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 800e39c:	f101 090c 	add.w	r9, r1, #12
 800e3a0:	ab28      	add	r3, sp, #160	; 0xa0
 800e3a2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e3a6:	f852 5c90 	ldr.w	r5, [r2, #-144]
 800e3aa:	00ad      	lsls	r5, r5, #2
 800e3ac:	f850 2028 	ldr.w	r2, [r0, r8, lsl #2]
 800e3b0:	f1c1 0802 	rsb	r8, r1, #2
 800e3b4:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800e3b8:	f858 8c48 	ldr.w	r8, [r8, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e3bc:	fb82 a808 	smull	sl, r8, r2, r8
 800e3c0:	f85e 2c48 	ldr.w	r2, [lr, #-72]
 800e3c4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800e3c8:	fb83 e202 	smull	lr, r2, r3, r2
 800e3cc:	4442      	add	r2, r8
 800e3ce:	442a      	add	r2, r5
	__asm__ volatile (
 800e3d0:	465d      	mov	r5, fp
 800e3d2:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800e3d6:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 800e3da:	9b02      	ldr	r3, [sp, #8]
 800e3dc:	432b      	orrs	r3, r5
 800e3de:	ea4f 19c9 	mov.w	r9, r9, lsl #7
 800e3e2:	f844 2009 	str.w	r2, [r4, r9]
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 800e3e6:	f101 0e0f 	add.w	lr, r1, #15
 800e3ea:	aa28      	add	r2, sp, #160	; 0xa0
 800e3ec:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 800e3f0:	f852 5c90 	ldr.w	r5, [r2, #-144]
 800e3f4:	00ad      	lsls	r5, r5, #2
 800e3f6:	f850 8027 	ldr.w	r8, [r0, r7, lsl #2]
 800e3fa:	f85c 7c48 	ldr.w	r7, [ip, #-72]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e3fe:	fb88 2707 	smull	r2, r7, r8, r7
 800e402:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800e406:	f1c1 020b 	rsb	r2, r1, #11
 800e40a:	ae28      	add	r6, sp, #160	; 0xa0
 800e40c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800e410:	f852 2c48 	ldr.w	r2, [r2, #-72]
 800e414:	fb80 6202 	smull	r6, r2, r0, r2
 800e418:	443a      	add	r2, r7
 800e41a:	442a      	add	r2, r5
	__asm__ volatile (
 800e41c:	465d      	mov	r5, fp
 800e41e:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 800e422:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 800e426:	431d      	orrs	r5, r3
 800e428:	ea4f 1ece 	mov.w	lr, lr, lsl #7
 800e42c:	f844 200e 	str.w	r2, [r4, lr]
	for (i = 0; i < 3; i++) {
 800e430:	3101      	adds	r1, #1
 800e432:	e759      	b.n	800e2e8 <IMDCT12x3+0x208>
	es = 0;
 800e434:	f04f 0b00 	mov.w	fp, #0
 800e438:	e67d      	b.n	800e136 <IMDCT12x3+0x56>
	}

	/* save previous (unwindowed) for overlap - only need samples 6-8, 12-17 */
	for (i = 6; i < 9; i++)
 800e43a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e43e:	2306      	movs	r3, #6
 800e440:	2b08      	cmp	r3, #8
 800e442:	dc0b      	bgt.n	800e45c <IMDCT12x3+0x37c>
		*xPrev++ = xBuf[i] >> 2;
 800e444:	aa28      	add	r2, sp, #160	; 0xa0
 800e446:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e44a:	f852 1c48 	ldr.w	r1, [r2, #-72]
 800e44e:	9a01      	ldr	r2, [sp, #4]
 800e450:	1089      	asrs	r1, r1, #2
 800e452:	f842 1b04 	str.w	r1, [r2], #4
	for (i = 6; i < 9; i++)
 800e456:	3301      	adds	r3, #1
		*xPrev++ = xBuf[i] >> 2;
 800e458:	9201      	str	r2, [sp, #4]
 800e45a:	e7f1      	b.n	800e440 <IMDCT12x3+0x360>
	for (i = 12; i < 18; i++)
 800e45c:	230c      	movs	r3, #12
 800e45e:	e00a      	b.n	800e476 <IMDCT12x3+0x396>
		*xPrev++ = xBuf[i] >> 2;
 800e460:	aa28      	add	r2, sp, #160	; 0xa0
 800e462:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e466:	f852 1c48 	ldr.w	r1, [r2, #-72]
 800e46a:	9a01      	ldr	r2, [sp, #4]
 800e46c:	1089      	asrs	r1, r1, #2
 800e46e:	f842 1b04 	str.w	r1, [r2], #4
	for (i = 12; i < 18; i++)
 800e472:	3301      	adds	r3, #1
		*xPrev++ = xBuf[i] >> 2;
 800e474:	9201      	str	r2, [sp, #4]
	for (i = 12; i < 18; i++)
 800e476:	2b11      	cmp	r3, #17
 800e478:	ddf2      	ble.n	800e460 <IMDCT12x3+0x380>

	xPrev -= 9;
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800e47a:	4620      	mov	r0, r4
 800e47c:	465b      	mov	r3, fp
 800e47e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e480:	9901      	ldr	r1, [sp, #4]
 800e482:	3924      	subs	r1, #36	; 0x24
 800e484:	f7ff fb36 	bl	800daf4 <FreqInvertRescale>

	return mOut;
}
 800e488:	4328      	orrs	r0, r5
 800e48a:	b029      	add	sp, #164	; 0xa4
 800e48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e490:	6ed9eba1 	.word	0x6ed9eba1
 800e494:	7ba3751d 	.word	0x7ba3751d
 800e498:	0801cfe4 	.word	0x0801cfe4
 800e49c:	5a82799a 	.word	0x5a82799a
 800e4a0:	2120fb83 	.word	0x2120fb83

0800e4a4 <HybridTransform>:
 *                (including overlap-add)
 *
 * TODO:        examine mixedBlock/winSwitch logic carefully (test he_mode.bit)
 **************************************************************************************/
static int HybridTransform(int *xCurr, int *xPrev, int y[BLOCK_SIZE][NBANDS], SideInfoSub *sis, BlockCount *bc)
{
 800e4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a8:	b097      	sub	sp, #92	; 0x5c
 800e4aa:	4680      	mov	r8, r0
 800e4ac:	4689      	mov	r9, r1
 800e4ae:	4616      	mov	r6, r2
 800e4b0:	469a      	mov	sl, r3
 800e4b2:	9f20      	ldr	r7, [sp, #128]	; 0x80

	ASSERT(bc->nBlocksLong  <= NBANDS);
	ASSERT(bc->nBlocksTotal <= NBANDS);
	ASSERT(bc->nBlocksPrev  <= NBANDS);

	mOut = 0;
 800e4b4:	2500      	movs	r5, #0

	/* do long blocks, if any */
	for(i = 0; i < bc->nBlocksLong; i++) {
 800e4b6:	462c      	mov	r4, r5
 800e4b8:	e014      	b.n	800e4e4 <HybridTransform+0x40>
		/* currWinIdx picks the right window for long blocks (if mixed, long blocks use window type 0) */
		currWinIdx = sis->blockType;
		if (sis->mixedBlock && i < bc->currWinSwitch) 
			currWinIdx = 0;

		prevWinIdx = bc->prevType;
 800e4ba:	68fa      	ldr	r2, [r7, #12]
		if (i < bc->prevWinSwitch)
 800e4bc:	6939      	ldr	r1, [r7, #16]
 800e4be:	42a1      	cmp	r1, r4
 800e4c0:	dd00      	ble.n	800e4c4 <HybridTransform+0x20>
			 prevWinIdx = 0;
 800e4c2:	2200      	movs	r2, #0

		/* do 36-point IMDCT, including windowing and overlap-add */
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 800e4c4:	69b9      	ldr	r1, [r7, #24]
 800e4c6:	9102      	str	r1, [sp, #8]
 800e4c8:	9401      	str	r4, [sp, #4]
 800e4ca:	9200      	str	r2, [sp, #0]
 800e4cc:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 800e4d0:	4649      	mov	r1, r9
 800e4d2:	4640      	mov	r0, r8
 800e4d4:	f7ff fbe0 	bl	800dc98 <IMDCT36>
 800e4d8:	4305      	orrs	r5, r0
		xCurr += 18;
 800e4da:	f108 0848 	add.w	r8, r8, #72	; 0x48
		xPrev += 9;
 800e4de:	f109 0924 	add.w	r9, r9, #36	; 0x24
	for(i = 0; i < bc->nBlocksLong; i++) {
 800e4e2:	3401      	adds	r4, #1
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	42a3      	cmp	r3, r4
 800e4e8:	dd19      	ble.n	800e51e <HybridTransform+0x7a>
		currWinIdx = sis->blockType;
 800e4ea:	f8da 3014 	ldr.w	r3, [sl, #20]
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800e4ee:	f8da 2018 	ldr.w	r2, [sl, #24]
 800e4f2:	2a00      	cmp	r2, #0
 800e4f4:	d0e1      	beq.n	800e4ba <HybridTransform+0x16>
 800e4f6:	697a      	ldr	r2, [r7, #20]
 800e4f8:	42a2      	cmp	r2, r4
 800e4fa:	ddde      	ble.n	800e4ba <HybridTransform+0x16>
			currWinIdx = 0;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	e7dc      	b.n	800e4ba <HybridTransform+0x16>

		prevWinIdx = bc->prevType;
		if (i < bc->prevWinSwitch)
			 prevWinIdx = 0;
		
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 800e500:	69ba      	ldr	r2, [r7, #24]
 800e502:	9201      	str	r2, [sp, #4]
 800e504:	9400      	str	r4, [sp, #0]
 800e506:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 800e50a:	4649      	mov	r1, r9
 800e50c:	4640      	mov	r0, r8
 800e50e:	f7ff fde7 	bl	800e0e0 <IMDCT12x3>
 800e512:	4305      	orrs	r5, r0
		xCurr += 18;
 800e514:	f108 0848 	add.w	r8, r8, #72	; 0x48
		xPrev += 9;
 800e518:	f109 0924 	add.w	r9, r9, #36	; 0x24
	for (   ; i < bc->nBlocksTotal; i++) {
 800e51c:	3401      	adds	r4, #1
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	42a3      	cmp	r3, r4
 800e522:	dd05      	ble.n	800e530 <HybridTransform+0x8c>
		prevWinIdx = bc->prevType;
 800e524:	68fb      	ldr	r3, [r7, #12]
		if (i < bc->prevWinSwitch)
 800e526:	693a      	ldr	r2, [r7, #16]
 800e528:	42a2      	cmp	r2, r4
 800e52a:	dde9      	ble.n	800e500 <HybridTransform+0x5c>
			 prevWinIdx = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	e7e7      	b.n	800e500 <HybridTransform+0x5c>
	}
	nBlocksOut = i;
 800e530:	46a0      	mov	r8, r4
 800e532:	e006      	b.n	800e542 <HybridTransform+0x9e>
			y[2*j+1][i] = xp;
			mOut |= FASTABS(xp);

			xPrev[j] = 0;
		}
		xPrev += 9;
 800e534:	f109 0924 	add.w	r9, r9, #36	; 0x24
		if (nonZero)
 800e538:	f1bc 0f00 	cmp.w	ip, #0
 800e53c:	d000      	beq.n	800e540 <HybridTransform+0x9c>
			nBlocksOut = i;
 800e53e:	46a0      	mov	r8, r4
	for (   ; i < bc->nBlocksPrev; i++) {
 800e540:	3401      	adds	r4, #1
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	42a3      	cmp	r3, r4
 800e546:	dd4d      	ble.n	800e5e4 <HybridTransform+0x140>
		prevWinIdx = bc->prevType;
 800e548:	68fa      	ldr	r2, [r7, #12]
		if (i < bc->prevWinSwitch)
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	42a3      	cmp	r3, r4
 800e54e:	dd00      	ble.n	800e552 <HybridTransform+0xae>
			 prevWinIdx = 0;
 800e550:	2200      	movs	r2, #0
		WinPrevious(xPrev, xPrevWin, prevWinIdx);
 800e552:	a904      	add	r1, sp, #16
 800e554:	4648      	mov	r0, r9
 800e556:	f7ff fa3b 	bl	800d9d0 <WinPrevious>
		fiBit = i << 31;
 800e55a:	ea4f 7ec4 	mov.w	lr, r4, lsl #31
		nonZero = 0;
 800e55e:	f04f 0c00 	mov.w	ip, #0
		for (j = 0; j < 9; j++) {
 800e562:	4663      	mov	r3, ip
 800e564:	2b08      	cmp	r3, #8
 800e566:	dce5      	bgt.n	800e534 <HybridTransform+0x90>
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 800e568:	0058      	lsls	r0, r3, #1
 800e56a:	aa16      	add	r2, sp, #88	; 0x58
 800e56c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e570:	f852 2c48 	ldr.w	r2, [r2, #-72]
 800e574:	ea4f 0a82 	mov.w	sl, r2, lsl #2
			nonZero |= xp;
 800e578:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
			y[2*j+0][i] = xp;
 800e57c:	021a      	lsls	r2, r3, #8
 800e57e:	eb06 2103 	add.w	r1, r6, r3, lsl #8
 800e582:	f841 a024 	str.w	sl, [r1, r4, lsl #2]
 800e586:	2100      	movs	r1, #0
 800e588:	468b      	mov	fp, r1
 800e58a:	ea8a 7bea 	eor.w	fp, sl, sl, asr #31
 800e58e:	ebab 7bea 	sub.w	fp, fp, sl, asr #31
			mOut |= FASTABS(xp);
 800e592:	ea45 050b 	orr.w	r5, r5, fp
			xp = xPrevWin[2*j+1] << 2;
 800e596:	3001      	adds	r0, #1
 800e598:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 800e59c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800e5a0:	f850 ac48 	ldr.w	sl, [r0, #-72]
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 800e5a4:	ea4f 70ee 	mov.w	r0, lr, asr #31
 800e5a8:	ea80 008a 	eor.w	r0, r0, sl, lsl #2
 800e5ac:	f004 0a01 	and.w	sl, r4, #1
 800e5b0:	4450      	add	r0, sl
			nonZero |= xp;
 800e5b2:	ea4c 0c00 	orr.w	ip, ip, r0
			y[2*j+1][i] = xp;
 800e5b6:	3280      	adds	r2, #128	; 0x80
 800e5b8:	4432      	add	r2, r6
 800e5ba:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800e5be:	460a      	mov	r2, r1
 800e5c0:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800e5c4:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
			mOut |= FASTABS(xp);
 800e5c8:	4315      	orrs	r5, r2
			xPrev[j] = 0;
 800e5ca:	f849 1023 	str.w	r1, [r9, r3, lsl #2]
		for (j = 0; j < 9; j++) {
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	e7c8      	b.n	800e564 <HybridTransform+0xc0>
	}
	
	/* clear rest of blocks */
	for (   ; i < 32; i++) {
		for (j = 0; j < 18; j++) 
			y[j][i] = 0;
 800e5d2:	eb06 12c3 	add.w	r2, r6, r3, lsl #7
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
		for (j = 0; j < 18; j++) 
 800e5dc:	3301      	adds	r3, #1
 800e5de:	2b11      	cmp	r3, #17
 800e5e0:	ddf7      	ble.n	800e5d2 <HybridTransform+0x12e>
	for (   ; i < 32; i++) {
 800e5e2:	3401      	adds	r4, #1
 800e5e4:	2c1f      	cmp	r4, #31
 800e5e6:	dc01      	bgt.n	800e5ec <HybridTransform+0x148>
		for (j = 0; j < 18; j++) 
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	e7f8      	b.n	800e5de <HybridTransform+0x13a>
	if (!x)
 800e5ec:	b15d      	cbz	r5, 800e606 <HybridTransform+0x162>
	numZeros = 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	e001      	b.n	800e5f6 <HybridTransform+0x152>
		numZeros++;
 800e5f2:	3301      	adds	r3, #1
		x <<= 1;
 800e5f4:	006d      	lsls	r5, r5, #1
	while (!(x & 0x80000000)) {
 800e5f6:	2d00      	cmp	r5, #0
 800e5f8:	dafb      	bge.n	800e5f2 <HybridTransform+0x14e>
	}

	bc->gbOut = CLZ(mOut) - 1;
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	61fb      	str	r3, [r7, #28]

	return nBlocksOut;
}
 800e5fe:	4640      	mov	r0, r8
 800e600:	b017      	add	sp, #92	; 0x5c
 800e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (sizeof(int) * 8);
 800e606:	2320      	movs	r3, #32
 800e608:	e7f7      	b.n	800e5fa <HybridTransform+0x156>
	...

0800e60c <xmp3fixpt_IMDCT>:
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800e60c:	2800      	cmp	r0, #0
 800e60e:	f000 80d2 	beq.w	800e7b6 <xmp3fixpt_IMDCT+0x1aa>
{
 800e612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e616:	b08b      	sub	sp, #44	; 0x2c
 800e618:	460e      	mov	r6, r1
 800e61a:	4614      	mov	r4, r2
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800e61c:	6802      	ldr	r2, [r0, #0]
 800e61e:	2a00      	cmp	r2, #0
 800e620:	f000 80cc 	beq.w	800e7bc <xmp3fixpt_IMDCT+0x1b0>
 800e624:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800e628:	f1b9 0f00 	cmp.w	r9, #0
 800e62c:	f000 80c9 	beq.w	800e7c2 <xmp3fixpt_IMDCT+0x1b6>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800e630:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800e634:	f1ba 0f00 	cmp.w	sl, #0
 800e638:	f000 80c6 	beq.w	800e7c8 <xmp3fixpt_IMDCT+0x1bc>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800e63c:	6947      	ldr	r7, [r0, #20]
 800e63e:	2f00      	cmp	r7, #0
 800e640:	f000 80c5 	beq.w	800e7ce <xmp3fixpt_IMDCT+0x1c2>
	/* anti-aliasing done on whole long blocks only
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800e644:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e646:	7812      	ldrb	r2, [r2, #0]
 800e648:	2a00      	cmp	r2, #0
 800e64a:	f040 809e 	bne.w	800e78a <xmp3fixpt_IMDCT+0x17e>
 800e64e:	2208      	movs	r2, #8
 800e650:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800e654:	4a5f      	ldr	r2, [pc, #380]	; (800e7d4 <xmp3fixpt_IMDCT+0x1c8>)
 800e656:	fb82 1203 	smull	r1, r2, r2, r3
 800e65a:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800e65e:	ebc8 08a2 	rsb	r8, r8, r2, asr #2
 800e662:	fa0f f888 	sxth.w	r8, r8
	if (si->sis[gr][ch].blockType != 2) {
 800e666:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800e66a:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
 800e66e:	0112      	lsls	r2, r2, #4
 800e670:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e674:	444b      	add	r3, r9
 800e676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e678:	2b02      	cmp	r3, #2
 800e67a:	f000 808a 	beq.w	800e792 <xmp3fixpt_IMDCT+0x186>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800e67e:	f504 6390 	add.w	r3, r4, #1152	; 0x480
 800e682:	f85a 5023 	ldr.w	r5, [sl, r3, lsl #2]
 800e686:	f240 2326 	movw	r3, #550	; 0x226
 800e68a:	429d      	cmp	r5, r3
 800e68c:	dc7f      	bgt.n	800e78e <xmp3fixpt_IMDCT+0x182>
 800e68e:	3507      	adds	r5, #7
 800e690:	4b50      	ldr	r3, [pc, #320]	; (800e7d4 <xmp3fixpt_IMDCT+0x1c8>)
 800e692:	fb83 2305 	smull	r2, r3, r3, r5
 800e696:	17ed      	asrs	r5, r5, #31
 800e698:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
 800e69c:	3501      	adds	r5, #1
 800e69e:	9502      	str	r5, [sp, #8]
		nBfly = bc.nBlocksLong - 1;
 800e6a0:	3d01      	subs	r5, #1
		/* all short transforms */
		bc.nBlocksLong = 0;
		nBfly = 0;
	}
 
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800e6a2:	eb04 0bc4 	add.w	fp, r4, r4, lsl #3
 800e6a6:	eb0a 2b0b 	add.w	fp, sl, fp, lsl #8
 800e6aa:	4629      	mov	r1, r5
 800e6ac:	4658      	mov	r0, fp
 800e6ae:	f7ff f8c1 	bl	800d834 <AntiAlias>
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800e6b2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800e6b6:	005b      	lsls	r3, r3, #1
 800e6b8:	3308      	adds	r3, #8
 800e6ba:	f504 6290 	add.w	r2, r4, #1152	; 0x480
 800e6be:	f85a 5022 	ldr.w	r5, [sl, r2, lsl #2]
 800e6c2:	42ab      	cmp	r3, r5
 800e6c4:	bfb8      	it	lt
 800e6c6:	462b      	movlt	r3, r5
 800e6c8:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);

	/* for readability, use a struct instead of passing a million parameters to HybridTransform() */
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800e6cc:	3311      	adds	r3, #17
 800e6ce:	4a41      	ldr	r2, [pc, #260]	; (800e7d4 <xmp3fixpt_IMDCT+0x1c8>)
 800e6d0:	fb82 1203 	smull	r1, r2, r2, r3
 800e6d4:	17db      	asrs	r3, r3, #31
 800e6d6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800e6da:	9303      	str	r3, [sp, #12]
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800e6dc:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 800e6e0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e6e4:	9304      	str	r3, [sp, #16]
	bc.prevType = mi->prevType[ch];
 800e6e6:	f204 63c2 	addw	r3, r4, #1730	; 0x6c2
 800e6ea:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e6ee:	9305      	str	r3, [sp, #20]
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 800e6f0:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
 800e6f4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e6f8:	9306      	str	r3, [sp, #24]
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800e6fa:	00e3      	lsls	r3, r4, #3
 800e6fc:	191a      	adds	r2, r3, r4
 800e6fe:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800e702:	011b      	lsls	r3, r3, #4
 800e704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e708:	444b      	add	r3, r9
 800e70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e70c:	b103      	cbz	r3, 800e710 <xmp3fixpt_IMDCT+0x104>
 800e70e:	4643      	mov	r3, r8
 800e710:	9307      	str	r3, [sp, #28]
	bc.gbIn = hi->gb[ch];
 800e712:	f204 4382 	addw	r3, r4, #1154	; 0x482
 800e716:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 800e71a:	9308      	str	r3, [sp, #32]

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800e71c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800e720:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800e724:	01c9      	lsls	r1, r1, #7
 800e726:	f501 5190 	add.w	r1, r1, #4608	; 0x1200
 800e72a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800e72e:	00f5      	lsls	r5, r6, #3
 800e730:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800e734:	011b      	lsls	r3, r3, #4
 800e736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e73a:	3328      	adds	r3, #40	; 0x28
 800e73c:	a802      	add	r0, sp, #8
 800e73e:	9000      	str	r0, [sp, #0]
 800e740:	444b      	add	r3, r9
 800e742:	eb07 2202 	add.w	r2, r7, r2, lsl #8
 800e746:	4439      	add	r1, r7
 800e748:	4658      	mov	r0, fp
 800e74a:	f7ff feab 	bl	800e4a4 <HybridTransform>
 800e74e:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 800e752:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800e756:	44a0      	add	r8, r4
 800e758:	442e      	add	r6, r5
 800e75a:	0136      	lsls	r6, r6, #4
 800e75c:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800e760:	44b1      	add	r9, r6
 800e762:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 800e766:	f204 63c2 	addw	r3, r4, #1730	; 0x6c2
 800e76a:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 800e76e:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
 800e772:	9a07      	ldr	r2, [sp, #28]
 800e774:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	mi->gb[ch] = bc.gbOut;
 800e778:	f204 64c6 	addw	r4, r4, #1734	; 0x6c6
 800e77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e77e:	f847 3024 	str.w	r3, [r7, r4, lsl #2]

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 800e782:	2000      	movs	r0, #0
}
 800e784:	b00b      	add	sp, #44	; 0x2c
 800e786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800e78a:	2206      	movs	r2, #6
 800e78c:	e760      	b.n	800e650 <xmp3fixpt_IMDCT+0x44>
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800e78e:	2520      	movs	r5, #32
 800e790:	e785      	b.n	800e69e <xmp3fixpt_IMDCT+0x92>
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 800e792:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800e796:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
 800e79a:	0112      	lsls	r2, r2, #4
 800e79c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e7a0:	444b      	add	r3, r9
 800e7a2:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800e7a4:	b125      	cbz	r5, 800e7b0 <xmp3fixpt_IMDCT+0x1a4>
		bc.nBlocksLong = blockCutoff;	
 800e7a6:	f8cd 8008 	str.w	r8, [sp, #8]
		nBfly = bc.nBlocksLong - 1;
 800e7aa:	f108 35ff 	add.w	r5, r8, #4294967295
 800e7ae:	e778      	b.n	800e6a2 <xmp3fixpt_IMDCT+0x96>
		bc.nBlocksLong = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	9302      	str	r3, [sp, #8]
		nBfly = 0;
 800e7b4:	e775      	b.n	800e6a2 <xmp3fixpt_IMDCT+0x96>
		return -1;
 800e7b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e7ba:	4770      	bx	lr
		return -1;
 800e7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c0:	e7e0      	b.n	800e784 <xmp3fixpt_IMDCT+0x178>
 800e7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c6:	e7dd      	b.n	800e784 <xmp3fixpt_IMDCT+0x178>
 800e7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7cc:	e7da      	b.n	800e784 <xmp3fixpt_IMDCT+0x178>
 800e7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d2:	e7d7      	b.n	800e784 <xmp3fixpt_IMDCT+0x178>
 800e7d4:	38e38e39 	.word	0x38e38e39

0800e7d8 <xmp3fixpt_PolyphaseMono>:
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 *                (note max filter gain - see polyCoef[] comments)
 **************************************************************************************/
void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
{	
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	b085      	sub	sp, #20
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = rndVal;

	MC0M(0)
 800e7de:	6814      	ldr	r4, [r2, #0]
 800e7e0:	6853      	ldr	r3, [r2, #4]
 800e7e2:	680e      	ldr	r6, [r1, #0]
 800e7e4:	6dcf      	ldr	r7, [r1, #92]	; 0x5c
}

//mw
static __inline Word64 MADD64(Word64 sum, int x, int y)
{
   return (sum + ((int64_t)x * y));
 800e7e6:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800e7ea:	17e5      	asrs	r5, r4, #31
 800e7ec:	fb04 fc0c 	mul.w	ip, r4, ip
 800e7f0:	fb06 cc05 	mla	ip, r6, r5, ip
 800e7f4:	fba4 4606 	umull	r4, r6, r4, r6
 800e7f8:	f114 7400 	adds.w	r4, r4, #33554432	; 0x2000000
 800e7fc:	eb4c 0506 	adc.w	r5, ip, r6
 800e800:	425b      	negs	r3, r3
 800e802:	17fe      	asrs	r6, r7, #31
 800e804:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800e808:	fb03 f606 	mul.w	r6, r3, r6
 800e80c:	fb07 660c 	mla	r6, r7, ip, r6
 800e810:	fba3 3c07 	umull	r3, ip, r3, r7
 800e814:	4466      	add	r6, ip
 800e816:	191b      	adds	r3, r3, r4
 800e818:	eb46 0c05 	adc.w	ip, r6, r5
	MC0M(1)
 800e81c:	6895      	ldr	r5, [r2, #8]
 800e81e:	684c      	ldr	r4, [r1, #4]
 800e820:	6d8f      	ldr	r7, [r1, #88]	; 0x58
 800e822:	17e6      	asrs	r6, r4, #31
 800e824:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e828:	fb05 f606 	mul.w	r6, r5, r6
 800e82c:	fb04 6608 	mla	r6, r4, r8, r6
 800e830:	fba5 5e04 	umull	r5, lr, r5, r4
 800e834:	4476      	add	r6, lr
 800e836:	18ed      	adds	r5, r5, r3
 800e838:	eb46 060c 	adc.w	r6, r6, ip
 800e83c:	68d3      	ldr	r3, [r2, #12]
 800e83e:	425b      	negs	r3, r3
 800e840:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800e844:	17dc      	asrs	r4, r3, #31
 800e846:	fb03 fc0c 	mul.w	ip, r3, ip
 800e84a:	fb07 cc04 	mla	ip, r7, r4, ip
 800e84e:	fba3 3707 	umull	r3, r7, r3, r7
 800e852:	44bc      	add	ip, r7
 800e854:	195b      	adds	r3, r3, r5
 800e856:	eb4c 0706 	adc.w	r7, ip, r6
	MC0M(2)
 800e85a:	6915      	ldr	r5, [r2, #16]
 800e85c:	688c      	ldr	r4, [r1, #8]
 800e85e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 800e860:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800e864:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e868:	fb05 fc0c 	mul.w	ip, r5, ip
 800e86c:	fb04 cc08 	mla	ip, r4, r8, ip
 800e870:	fba5 5e04 	umull	r5, lr, r5, r4
 800e874:	44f4      	add	ip, lr
 800e876:	18ed      	adds	r5, r5, r3
 800e878:	eb4c 0c07 	adc.w	ip, ip, r7
 800e87c:	6953      	ldr	r3, [r2, #20]
 800e87e:	425b      	negs	r3, r3
 800e880:	17f7      	asrs	r7, r6, #31
 800e882:	17dc      	asrs	r4, r3, #31
 800e884:	fb03 f707 	mul.w	r7, r3, r7
 800e888:	fb06 7704 	mla	r7, r6, r4, r7
 800e88c:	fba3 3606 	umull	r3, r6, r3, r6
 800e890:	4437      	add	r7, r6
 800e892:	195b      	adds	r3, r3, r5
 800e894:	eb47 060c 	adc.w	r6, r7, ip
	MC0M(3)
 800e898:	6995      	ldr	r5, [r2, #24]
 800e89a:	68cf      	ldr	r7, [r1, #12]
 800e89c:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 800e89e:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800e8a2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e8a6:	fb05 fc0c 	mul.w	ip, r5, ip
 800e8aa:	fb07 cc08 	mla	ip, r7, r8, ip
 800e8ae:	fba5 5707 	umull	r5, r7, r5, r7
 800e8b2:	44bc      	add	ip, r7
 800e8b4:	18ed      	adds	r5, r5, r3
 800e8b6:	eb4c 0706 	adc.w	r7, ip, r6
 800e8ba:	69d3      	ldr	r3, [r2, #28]
 800e8bc:	425b      	negs	r3, r3
 800e8be:	17e6      	asrs	r6, r4, #31
 800e8c0:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800e8c4:	fb03 f606 	mul.w	r6, r3, r6
 800e8c8:	fb04 660c 	mla	r6, r4, ip, r6
 800e8cc:	fba3 3c04 	umull	r3, ip, r3, r4
 800e8d0:	4466      	add	r6, ip
 800e8d2:	195b      	adds	r3, r3, r5
 800e8d4:	eb46 0c07 	adc.w	ip, r6, r7
	MC0M(4)
 800e8d8:	6a15      	ldr	r5, [r2, #32]
 800e8da:	690c      	ldr	r4, [r1, #16]
 800e8dc:	6ccf      	ldr	r7, [r1, #76]	; 0x4c
 800e8de:	17e6      	asrs	r6, r4, #31
 800e8e0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e8e4:	fb05 f606 	mul.w	r6, r5, r6
 800e8e8:	fb04 6608 	mla	r6, r4, r8, r6
 800e8ec:	fba5 5e04 	umull	r5, lr, r5, r4
 800e8f0:	4476      	add	r6, lr
 800e8f2:	18ed      	adds	r5, r5, r3
 800e8f4:	eb46 060c 	adc.w	r6, r6, ip
 800e8f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e8fa:	425b      	negs	r3, r3
 800e8fc:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800e900:	17dc      	asrs	r4, r3, #31
 800e902:	fb03 fc0c 	mul.w	ip, r3, ip
 800e906:	fb07 cc04 	mla	ip, r7, r4, ip
 800e90a:	fba3 3707 	umull	r3, r7, r3, r7
 800e90e:	44bc      	add	ip, r7
 800e910:	195b      	adds	r3, r3, r5
 800e912:	eb4c 0706 	adc.w	r7, ip, r6
	MC0M(5)
 800e916:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800e918:	694c      	ldr	r4, [r1, #20]
 800e91a:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 800e91c:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800e920:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e924:	fb05 fc0c 	mul.w	ip, r5, ip
 800e928:	fb04 cc08 	mla	ip, r4, r8, ip
 800e92c:	fba5 5e04 	umull	r5, lr, r5, r4
 800e930:	44f4      	add	ip, lr
 800e932:	18ed      	adds	r5, r5, r3
 800e934:	eb4c 0c07 	adc.w	ip, ip, r7
 800e938:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e93a:	425b      	negs	r3, r3
 800e93c:	17f7      	asrs	r7, r6, #31
 800e93e:	17dc      	asrs	r4, r3, #31
 800e940:	fb03 f707 	mul.w	r7, r3, r7
 800e944:	fb06 7704 	mla	r7, r6, r4, r7
 800e948:	fba3 3606 	umull	r3, r6, r3, r6
 800e94c:	4437      	add	r7, r6
 800e94e:	195b      	adds	r3, r3, r5
 800e950:	eb47 060c 	adc.w	r6, r7, ip
	MC0M(6)
 800e954:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800e956:	698f      	ldr	r7, [r1, #24]
 800e958:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800e95a:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800e95e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e962:	fb05 fc0c 	mul.w	ip, r5, ip
 800e966:	fb07 cc08 	mla	ip, r7, r8, ip
 800e96a:	fba5 5707 	umull	r5, r7, r5, r7
 800e96e:	44bc      	add	ip, r7
 800e970:	18ed      	adds	r5, r5, r3
 800e972:	eb4c 0706 	adc.w	r7, ip, r6
 800e976:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e978:	425b      	negs	r3, r3
 800e97a:	17e6      	asrs	r6, r4, #31
 800e97c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800e980:	fb03 f606 	mul.w	r6, r3, r6
 800e984:	fb04 660c 	mla	r6, r4, ip, r6
 800e988:	fba3 3c04 	umull	r3, ip, r3, r4
 800e98c:	4466      	add	r6, ip
 800e98e:	195b      	adds	r3, r3, r5
 800e990:	eb46 0c07 	adc.w	ip, r6, r7
	MC0M(7)
 800e994:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800e996:	69cd      	ldr	r5, [r1, #28]
 800e998:	6c0f      	ldr	r7, [r1, #64]	; 0x40
 800e99a:	17ec      	asrs	r4, r5, #31
 800e99c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800e9a0:	fb06 f404 	mul.w	r4, r6, r4
 800e9a4:	fb05 4408 	mla	r4, r5, r8, r4
 800e9a8:	fba6 6e05 	umull	r6, lr, r6, r5
 800e9ac:	4474      	add	r4, lr
 800e9ae:	18f3      	adds	r3, r6, r3
 800e9b0:	eb44 060c 	adc.w	r6, r4, ip
 800e9b4:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800e9b6:	4265      	negs	r5, r4
 800e9b8:	17fc      	asrs	r4, r7, #31
 800e9ba:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800e9be:	fb05 f404 	mul.w	r4, r5, r4
 800e9c2:	fb07 440c 	mla	r4, r7, ip, r4
 800e9c6:	fba5 5707 	umull	r5, r7, r5, r7
 800e9ca:	443c      	add	r4, r7
 800e9cc:	195b      	adds	r3, r3, r5
 800e9ce:	eb44 0406 	adc.w	r4, r4, r6
  return x << n;
}

static __inline Word64 SAR64(Word64 x, int n)
{
  return x >> n;
 800e9d2:	0d1b      	lsrs	r3, r3, #20
 800e9d4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	x >>= fracBits;
 800e9d8:	119c      	asrs	r4, r3, #6
	if (sign != (x >> 15))
 800e9da:	155d      	asrs	r5, r3, #21
 800e9dc:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800e9e0:	d003      	beq.n	800e9ea <xmp3fixpt_PolyphaseMono+0x212>
 800e9e2:	17de      	asrs	r6, r3, #31
		x = sign ^ ((1 << 15) - 1);
 800e9e4:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800e9e8:	4074      	eors	r4, r6

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800e9ea:	8004      	strh	r4, [r0, #0]
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = rndVal;

	MC1M(0)
 800e9ec:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 800e9f0:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
 800e9f4:	6835      	ldr	r5, [r6, #0]
   return (sum + ((int64_t)x * y));
 800e9f6:	17ec      	asrs	r4, r5, #31
 800e9f8:	17df      	asrs	r7, r3, #31
 800e9fa:	fb03 f404 	mul.w	r4, r3, r4
 800e9fe:	fb05 4407 	mla	r4, r5, r7, r4
 800ea02:	fba3 3505 	umull	r3, r5, r3, r5
 800ea06:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 800ea0a:	eb44 0405 	adc.w	r4, r4, r5
	MC1M(1)
 800ea0e:	f8d2 5404 	ldr.w	r5, [r2, #1028]	; 0x404
 800ea12:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800ea16:	ea4f 77ec 	mov.w	r7, ip, asr #31
 800ea1a:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800ea1e:	fb05 f707 	mul.w	r7, r5, r7
 800ea22:	fb0c 770e 	mla	r7, ip, lr, r7
 800ea26:	fba5 5c0c 	umull	r5, ip, r5, ip
 800ea2a:	4467      	add	r7, ip
 800ea2c:	195b      	adds	r3, r3, r5
 800ea2e:	eb47 0404 	adc.w	r4, r7, r4
	MC1M(2)
 800ea32:	f8d2 7408 	ldr.w	r7, [r2, #1032]	; 0x408
 800ea36:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800ea3a:	ea4f 75ec 	mov.w	r5, ip, asr #31
 800ea3e:	ea4f 7ee7 	mov.w	lr, r7, asr #31
 800ea42:	fb07 f505 	mul.w	r5, r7, r5
 800ea46:	fb0c 550e 	mla	r5, ip, lr, r5
 800ea4a:	fba7 7c0c 	umull	r7, ip, r7, ip
 800ea4e:	4465      	add	r5, ip
 800ea50:	19db      	adds	r3, r3, r7
 800ea52:	eb45 0704 	adc.w	r7, r5, r4
	MC1M(3)
 800ea56:	f8d2 540c 	ldr.w	r5, [r2, #1036]	; 0x40c
 800ea5a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800ea5e:	ea4f 74ec 	mov.w	r4, ip, asr #31
 800ea62:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800ea66:	fb05 f404 	mul.w	r4, r5, r4
 800ea6a:	fb0c 440e 	mla	r4, ip, lr, r4
 800ea6e:	fba5 5c0c 	umull	r5, ip, r5, ip
 800ea72:	4464      	add	r4, ip
 800ea74:	195b      	adds	r3, r3, r5
 800ea76:	eb44 0507 	adc.w	r5, r4, r7
	MC1M(4)
 800ea7a:	f8d2 4410 	ldr.w	r4, [r2, #1040]	; 0x410
 800ea7e:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800ea82:	ea4f 77ec 	mov.w	r7, ip, asr #31
 800ea86:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800ea8a:	fb04 f707 	mul.w	r7, r4, r7
 800ea8e:	fb0c 770e 	mla	r7, ip, lr, r7
 800ea92:	fba4 4c0c 	umull	r4, ip, r4, ip
 800ea96:	4467      	add	r7, ip
 800ea98:	191b      	adds	r3, r3, r4
 800ea9a:	eb47 0405 	adc.w	r4, r7, r5
	MC1M(5)
 800ea9e:	f8d2 7414 	ldr.w	r7, [r2, #1044]	; 0x414
 800eaa2:	f8d6 c014 	ldr.w	ip, [r6, #20]
 800eaa6:	ea4f 75ec 	mov.w	r5, ip, asr #31
 800eaaa:	ea4f 7ee7 	mov.w	lr, r7, asr #31
 800eaae:	fb07 f505 	mul.w	r5, r7, r5
 800eab2:	fb0c 550e 	mla	r5, ip, lr, r5
 800eab6:	fba7 7c0c 	umull	r7, ip, r7, ip
 800eaba:	4465      	add	r5, ip
 800eabc:	19db      	adds	r3, r3, r7
 800eabe:	eb45 0704 	adc.w	r7, r5, r4
	MC1M(6)
 800eac2:	f8d2 5418 	ldr.w	r5, [r2, #1048]	; 0x418
 800eac6:	f8d6 c018 	ldr.w	ip, [r6, #24]
 800eaca:	ea4f 74ec 	mov.w	r4, ip, asr #31
 800eace:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800ead2:	fb05 f404 	mul.w	r4, r5, r4
 800ead6:	fb0c 440e 	mla	r4, ip, lr, r4
 800eada:	fba5 5c0c 	umull	r5, ip, r5, ip
 800eade:	4464      	add	r4, ip
 800eae0:	195b      	adds	r3, r3, r5
 800eae2:	eb44 0507 	adc.w	r5, r4, r7
	MC1M(7)
 800eae6:	f8d2 741c 	ldr.w	r7, [r2, #1052]	; 0x41c
 800eaea:	69f6      	ldr	r6, [r6, #28]
 800eaec:	17f4      	asrs	r4, r6, #31
 800eaee:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800eaf2:	fb07 f404 	mul.w	r4, r7, r4
 800eaf6:	fb06 440c 	mla	r4, r6, ip, r4
 800eafa:	fba7 7606 	umull	r7, r6, r7, r6
 800eafe:	4434      	add	r4, r6
 800eb00:	19db      	adds	r3, r3, r7
 800eb02:	eb44 0405 	adc.w	r4, r4, r5
  return x >> n;
 800eb06:	0d1b      	lsrs	r3, r3, #20
 800eb08:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	x >>= fracBits;
 800eb0c:	119c      	asrs	r4, r3, #6
	sign = x >> 31;
 800eb0e:	17de      	asrs	r6, r3, #31
	if (sign != (x >> 15))
 800eb10:	155d      	asrs	r5, r3, #21
 800eb12:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800eb16:	d002      	beq.n	800eb1e <xmp3fixpt_PolyphaseMono+0x346>
		x = sign ^ ((1 << 15) - 1);
 800eb18:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800eb1c:	4074      	eors	r4, r6

	*(pcm + 16) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800eb1e:	8404      	strh	r4, [r0, #32]

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 800eb20:	f102 0b40 	add.w	fp, r2, #64	; 0x40
	vb1 = vbuf + 64;
 800eb24:	f501 7180 	add.w	r1, r1, #256	; 0x100
	pcm++;
 800eb28:	1c83      	adds	r3, r0, #2
 800eb2a:	9302      	str	r3, [sp, #8]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 800eb2c:	230f      	movs	r3, #15
 800eb2e:	9301      	str	r3, [sp, #4]
 800eb30:	e006      	b.n	800eb40 <xmp3fixpt_PolyphaseMono+0x368>
		MC2M(6)
		MC2M(7)

		vb1 += 64;
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800eb32:	8013      	strh	r3, [r2, #0]
		pcm++;
 800eb34:	9b02      	ldr	r3, [sp, #8]
 800eb36:	3302      	adds	r3, #2
 800eb38:	9302      	str	r3, [sp, #8]
	for (i = 15; i > 0; i--) {
 800eb3a:	9b01      	ldr	r3, [sp, #4]
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	9301      	str	r3, [sp, #4]
 800eb40:	9b01      	ldr	r3, [sp, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	f340 8201 	ble.w	800ef4a <xmp3fixpt_PolyphaseMono+0x772>
		MC2M(0)
 800eb48:	f8db 5000 	ldr.w	r5, [fp]
 800eb4c:	f8db 2004 	ldr.w	r2, [fp, #4]
 800eb50:	680c      	ldr	r4, [r1, #0]
 800eb52:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
   return (sum + ((int64_t)x * y));
 800eb54:	17e3      	asrs	r3, r4, #31
 800eb56:	17ef      	asrs	r7, r5, #31
 800eb58:	fb04 fe07 	mul.w	lr, r4, r7
 800eb5c:	fb05 ee03 	mla	lr, r5, r3, lr
 800eb60:	fba4 9605 	umull	r9, r6, r4, r5
 800eb64:	f119 7c00 	adds.w	ip, r9, #33554432	; 0x2000000
 800eb68:	eb4e 0e06 	adc.w	lr, lr, r6
 800eb6c:	ea4f 78e2 	mov.w	r8, r2, asr #31
 800eb70:	fb02 f603 	mul.w	r6, r2, r3
 800eb74:	fb04 6608 	mla	r6, r4, r8, r6
 800eb78:	fba2 4804 	umull	r4, r8, r2, r4
 800eb7c:	f114 7300 	adds.w	r3, r4, #33554432	; 0x2000000
 800eb80:	eb46 0608 	adc.w	r6, r6, r8
 800eb84:	f1c2 0900 	rsb	r9, r2, #0
 800eb88:	17c4      	asrs	r4, r0, #31
 800eb8a:	ea4f 78e9 	mov.w	r8, r9, asr #31
 800eb8e:	fb09 f204 	mul.w	r2, r9, r4
 800eb92:	fb00 2808 	mla	r8, r0, r8, r2
 800eb96:	fba9 9200 	umull	r9, r2, r9, r0
 800eb9a:	4442      	add	r2, r8
 800eb9c:	eb19 090c 	adds.w	r9, r9, ip
 800eba0:	eb42 020e 	adc.w	r2, r2, lr
 800eba4:	fb00 f707 	mul.w	r7, r0, r7
 800eba8:	fb05 7404 	mla	r4, r5, r4, r7
 800ebac:	fba0 0505 	umull	r0, r5, r0, r5
 800ebb0:	4425      	add	r5, r4
 800ebb2:	18c4      	adds	r4, r0, r3
 800ebb4:	eb45 0306 	adc.w	r3, r5, r6
 800ebb8:	9303      	str	r3, [sp, #12]
		MC2M(1)
 800ebba:	f8db 6008 	ldr.w	r6, [fp, #8]
 800ebbe:	f8db 300c 	ldr.w	r3, [fp, #12]
 800ebc2:	684d      	ldr	r5, [r1, #4]
 800ebc4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800ebc6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800ebca:	17f7      	asrs	r7, r6, #31
 800ebcc:	fb05 fc07 	mul.w	ip, r5, r7
 800ebd0:	fb06 cc08 	mla	ip, r6, r8, ip
 800ebd4:	fba5 ea06 	umull	lr, sl, r5, r6
 800ebd8:	44e2      	add	sl, ip
 800ebda:	eb1e 0909 	adds.w	r9, lr, r9
 800ebde:	eb4a 0a02 	adc.w	sl, sl, r2
 800ebe2:	17da      	asrs	r2, r3, #31
 800ebe4:	fb03 f808 	mul.w	r8, r3, r8
 800ebe8:	fb05 8802 	mla	r8, r5, r2, r8
 800ebec:	fba3 2505 	umull	r2, r5, r3, r5
 800ebf0:	44a8      	add	r8, r5
 800ebf2:	1914      	adds	r4, r2, r4
 800ebf4:	9a03      	ldr	r2, [sp, #12]
 800ebf6:	eb48 0802 	adc.w	r8, r8, r2
 800ebfa:	f1c3 0e00 	rsb	lr, r3, #0
 800ebfe:	17c5      	asrs	r5, r0, #31
 800ec00:	ea4f 7cee 	mov.w	ip, lr, asr #31
 800ec04:	fb0e f205 	mul.w	r2, lr, r5
 800ec08:	fb00 2c0c 	mla	ip, r0, ip, r2
 800ec0c:	fbae e200 	umull	lr, r2, lr, r0
 800ec10:	4462      	add	r2, ip
 800ec12:	eb1e 0e09 	adds.w	lr, lr, r9
 800ec16:	eb42 020a 	adc.w	r2, r2, sl
 800ec1a:	fb00 f707 	mul.w	r7, r0, r7
 800ec1e:	fb06 7505 	mla	r5, r6, r5, r7
 800ec22:	fba0 0606 	umull	r0, r6, r0, r6
 800ec26:	442e      	add	r6, r5
 800ec28:	1904      	adds	r4, r0, r4
 800ec2a:	eb46 0308 	adc.w	r3, r6, r8
 800ec2e:	9303      	str	r3, [sp, #12]
		MC2M(2)
 800ec30:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ec34:	f8db 7014 	ldr.w	r7, [fp, #20]
 800ec38:	6888      	ldr	r0, [r1, #8]
 800ec3a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800ec3c:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800ec40:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800ec44:	fb00 f608 	mul.w	r6, r0, r8
 800ec48:	fb03 660c 	mla	r6, r3, ip, r6
 800ec4c:	fba0 9a03 	umull	r9, sl, r0, r3
 800ec50:	44b2      	add	sl, r6
 800ec52:	eb19 0e0e 	adds.w	lr, r9, lr
 800ec56:	eb4a 0a02 	adc.w	sl, sl, r2
 800ec5a:	17fa      	asrs	r2, r7, #31
 800ec5c:	fb07 fc0c 	mul.w	ip, r7, ip
 800ec60:	fb00 cc02 	mla	ip, r0, r2, ip
 800ec64:	fba7 0200 	umull	r0, r2, r7, r0
 800ec68:	4494      	add	ip, r2
 800ec6a:	1904      	adds	r4, r0, r4
 800ec6c:	9a03      	ldr	r2, [sp, #12]
 800ec6e:	eb4c 0c02 	adc.w	ip, ip, r2
 800ec72:	f1c7 0900 	rsb	r9, r7, #0
 800ec76:	17e8      	asrs	r0, r5, #31
 800ec78:	ea4f 76e9 	mov.w	r6, r9, asr #31
 800ec7c:	fb09 f200 	mul.w	r2, r9, r0
 800ec80:	fb05 2606 	mla	r6, r5, r6, r2
 800ec84:	fba9 9205 	umull	r9, r2, r9, r5
 800ec88:	4432      	add	r2, r6
 800ec8a:	eb19 090e 	adds.w	r9, r9, lr
 800ec8e:	eb42 020a 	adc.w	r2, r2, sl
 800ec92:	fb05 f808 	mul.w	r8, r5, r8
 800ec96:	fb03 8000 	mla	r0, r3, r0, r8
 800ec9a:	fba5 5303 	umull	r5, r3, r5, r3
 800ec9e:	4403      	add	r3, r0
 800eca0:	192c      	adds	r4, r5, r4
 800eca2:	eb43 030c 	adc.w	r3, r3, ip
 800eca6:	9303      	str	r3, [sp, #12]
		MC2M(3)
 800eca8:	f8db 7018 	ldr.w	r7, [fp, #24]
 800ecac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ecb0:	68cb      	ldr	r3, [r1, #12]
 800ecb2:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 800ecb4:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800ecb8:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800ecbc:	fb03 f50c 	mul.w	r5, r3, ip
 800ecc0:	fb07 5508 	mla	r5, r7, r8, r5
 800ecc4:	fba3 ea07 	umull	lr, sl, r3, r7
 800ecc8:	44aa      	add	sl, r5
 800ecca:	eb1e 0e09 	adds.w	lr, lr, r9
 800ecce:	eb4a 0a02 	adc.w	sl, sl, r2
 800ecd2:	17c2      	asrs	r2, r0, #31
 800ecd4:	fb00 f808 	mul.w	r8, r0, r8
 800ecd8:	fb03 8802 	mla	r8, r3, r2, r8
 800ecdc:	fba0 3203 	umull	r3, r2, r0, r3
 800ece0:	4490      	add	r8, r2
 800ece2:	191c      	adds	r4, r3, r4
 800ece4:	9b03      	ldr	r3, [sp, #12]
 800ece6:	eb48 0803 	adc.w	r8, r8, r3
 800ecea:	f1c0 0900 	rsb	r9, r0, #0
 800ecee:	17f3      	asrs	r3, r6, #31
 800ecf0:	ea4f 75e9 	mov.w	r5, r9, asr #31
 800ecf4:	fb09 f203 	mul.w	r2, r9, r3
 800ecf8:	fb06 2505 	mla	r5, r6, r5, r2
 800ecfc:	fba9 9206 	umull	r9, r2, r9, r6
 800ed00:	442a      	add	r2, r5
 800ed02:	eb19 090e 	adds.w	r9, r9, lr
 800ed06:	eb42 020a 	adc.w	r2, r2, sl
 800ed0a:	fb06 fc0c 	mul.w	ip, r6, ip
 800ed0e:	fb07 c303 	mla	r3, r7, r3, ip
 800ed12:	fba6 6707 	umull	r6, r7, r6, r7
 800ed16:	441f      	add	r7, r3
 800ed18:	1934      	adds	r4, r6, r4
 800ed1a:	eb47 0308 	adc.w	r3, r7, r8
 800ed1e:	9303      	str	r3, [sp, #12]
		MC2M(4)
 800ed20:	f8db 0020 	ldr.w	r0, [fp, #32]
 800ed24:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
 800ed28:	690e      	ldr	r6, [r1, #16]
 800ed2a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ed2c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800ed30:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 800ed34:	fb06 f70c 	mul.w	r7, r6, ip
 800ed38:	fb00 7708 	mla	r7, r0, r8, r7
 800ed3c:	fba6 ea00 	umull	lr, sl, r6, r0
 800ed40:	44ba      	add	sl, r7
 800ed42:	eb1e 0909 	adds.w	r9, lr, r9
 800ed46:	eb4a 0a02 	adc.w	sl, sl, r2
 800ed4a:	17ea      	asrs	r2, r5, #31
 800ed4c:	fb05 f808 	mul.w	r8, r5, r8
 800ed50:	fb06 8802 	mla	r8, r6, r2, r8
 800ed54:	fba5 6206 	umull	r6, r2, r5, r6
 800ed58:	4490      	add	r8, r2
 800ed5a:	1934      	adds	r4, r6, r4
 800ed5c:	9a03      	ldr	r2, [sp, #12]
 800ed5e:	eb48 0802 	adc.w	r8, r8, r2
 800ed62:	f1c5 0e00 	rsb	lr, r5, #0
 800ed66:	17de      	asrs	r6, r3, #31
 800ed68:	ea4f 77ee 	mov.w	r7, lr, asr #31
 800ed6c:	fb0e f206 	mul.w	r2, lr, r6
 800ed70:	fb03 2707 	mla	r7, r3, r7, r2
 800ed74:	fbae e203 	umull	lr, r2, lr, r3
 800ed78:	443a      	add	r2, r7
 800ed7a:	eb1e 0e09 	adds.w	lr, lr, r9
 800ed7e:	eb42 020a 	adc.w	r2, r2, sl
 800ed82:	fb03 fc0c 	mul.w	ip, r3, ip
 800ed86:	fb00 c606 	mla	r6, r0, r6, ip
 800ed8a:	fba3 3000 	umull	r3, r0, r3, r0
 800ed8e:	4430      	add	r0, r6
 800ed90:	191c      	adds	r4, r3, r4
 800ed92:	eb40 0308 	adc.w	r3, r0, r8
 800ed96:	9303      	str	r3, [sp, #12]
		MC2M(5)
 800ed98:	f8db 5028 	ldr.w	r5, [fp, #40]	; 0x28
 800ed9c:	f8db 602c 	ldr.w	r6, [fp, #44]	; 0x2c
 800eda0:	694b      	ldr	r3, [r1, #20]
 800eda2:	6c8f      	ldr	r7, [r1, #72]	; 0x48
 800eda4:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800eda8:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800edac:	fb03 f00c 	mul.w	r0, r3, ip
 800edb0:	fb05 0008 	mla	r0, r5, r8, r0
 800edb4:	fba3 9a05 	umull	r9, sl, r3, r5
 800edb8:	4482      	add	sl, r0
 800edba:	eb19 090e 	adds.w	r9, r9, lr
 800edbe:	eb4a 0a02 	adc.w	sl, sl, r2
 800edc2:	17f2      	asrs	r2, r6, #31
 800edc4:	fb06 f808 	mul.w	r8, r6, r8
 800edc8:	fb03 8802 	mla	r8, r3, r2, r8
 800edcc:	fba6 3203 	umull	r3, r2, r6, r3
 800edd0:	4490      	add	r8, r2
 800edd2:	191c      	adds	r4, r3, r4
 800edd4:	9b03      	ldr	r3, [sp, #12]
 800edd6:	eb48 0803 	adc.w	r8, r8, r3
 800edda:	f1c6 0e00 	rsb	lr, r6, #0
 800edde:	17fb      	asrs	r3, r7, #31
 800ede0:	ea4f 70ee 	mov.w	r0, lr, asr #31
 800ede4:	fb0e f203 	mul.w	r2, lr, r3
 800ede8:	fb07 2000 	mla	r0, r7, r0, r2
 800edec:	fbae e207 	umull	lr, r2, lr, r7
 800edf0:	4402      	add	r2, r0
 800edf2:	eb1e 0e09 	adds.w	lr, lr, r9
 800edf6:	eb42 020a 	adc.w	r2, r2, sl
 800edfa:	fb07 fc0c 	mul.w	ip, r7, ip
 800edfe:	fb05 c303 	mla	r3, r5, r3, ip
 800ee02:	fba7 7505 	umull	r7, r5, r7, r5
 800ee06:	441d      	add	r5, r3
 800ee08:	193c      	adds	r4, r7, r4
 800ee0a:	eb45 0308 	adc.w	r3, r5, r8
 800ee0e:	9303      	str	r3, [sp, #12]
		MC2M(6)
 800ee10:	f8db 6030 	ldr.w	r6, [fp, #48]	; 0x30
 800ee14:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800ee18:	698d      	ldr	r5, [r1, #24]
 800ee1a:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800ee1c:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800ee20:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800ee24:	fb05 f70c 	mul.w	r7, r5, ip
 800ee28:	fb06 7708 	mla	r7, r6, r8, r7
 800ee2c:	fba5 9a06 	umull	r9, sl, r5, r6
 800ee30:	44ba      	add	sl, r7
 800ee32:	eb19 0e0e 	adds.w	lr, r9, lr
 800ee36:	eb4a 0a02 	adc.w	sl, sl, r2
 800ee3a:	17da      	asrs	r2, r3, #31
 800ee3c:	fb03 f808 	mul.w	r8, r3, r8
 800ee40:	fb05 8802 	mla	r8, r5, r2, r8
 800ee44:	fba3 5205 	umull	r5, r2, r3, r5
 800ee48:	4490      	add	r8, r2
 800ee4a:	192c      	adds	r4, r5, r4
 800ee4c:	9a03      	ldr	r2, [sp, #12]
 800ee4e:	eb48 0802 	adc.w	r8, r8, r2
 800ee52:	f1c3 0900 	rsb	r9, r3, #0
 800ee56:	17c5      	asrs	r5, r0, #31
 800ee58:	ea4f 77e9 	mov.w	r7, r9, asr #31
 800ee5c:	fb09 f205 	mul.w	r2, r9, r5
 800ee60:	fb00 2707 	mla	r7, r0, r7, r2
 800ee64:	fba9 9200 	umull	r9, r2, r9, r0
 800ee68:	443a      	add	r2, r7
 800ee6a:	eb19 090e 	adds.w	r9, r9, lr
 800ee6e:	eb42 020a 	adc.w	r2, r2, sl
 800ee72:	fb00 fc0c 	mul.w	ip, r0, ip
 800ee76:	fb06 c505 	mla	r5, r6, r5, ip
 800ee7a:	fba0 0606 	umull	r0, r6, r0, r6
 800ee7e:	442e      	add	r6, r5
 800ee80:	1904      	adds	r4, r0, r4
 800ee82:	eb46 0308 	adc.w	r3, r6, r8
 800ee86:	9303      	str	r3, [sp, #12]
		MC2M(7)
 800ee88:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800ee8c:	f8db 703c 	ldr.w	r7, [fp, #60]	; 0x3c
 800ee90:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 800ee94:	69c8      	ldr	r0, [r1, #28]
 800ee96:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800ee98:	ea4f 78e0 	mov.w	r8, r0, asr #31
 800ee9c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800eea0:	fb00 f60c 	mul.w	r6, r0, ip
 800eea4:	fb03 6608 	mla	r6, r3, r8, r6
 800eea8:	fba0 ea03 	umull	lr, sl, r0, r3
 800eeac:	4456      	add	r6, sl
 800eeae:	eb1e 0e09 	adds.w	lr, lr, r9
 800eeb2:	eb46 0602 	adc.w	r6, r6, r2
 800eeb6:	17fa      	asrs	r2, r7, #31
 800eeb8:	fb07 f808 	mul.w	r8, r7, r8
 800eebc:	fb00 8802 	mla	r8, r0, r2, r8
 800eec0:	fba7 2000 	umull	r2, r0, r7, r0
 800eec4:	4480      	add	r8, r0
 800eec6:	1914      	adds	r4, r2, r4
 800eec8:	9a03      	ldr	r2, [sp, #12]
 800eeca:	eb48 0802 	adc.w	r8, r8, r2
 800eece:	427f      	negs	r7, r7
 800eed0:	17e8      	asrs	r0, r5, #31
 800eed2:	ea4f 79e7 	mov.w	r9, r7, asr #31
 800eed6:	fb07 f200 	mul.w	r2, r7, r0
 800eeda:	fb05 2209 	mla	r2, r5, r9, r2
 800eede:	fba7 7905 	umull	r7, r9, r7, r5
 800eee2:	444a      	add	r2, r9
 800eee4:	eb17 0e0e 	adds.w	lr, r7, lr
 800eee8:	eb42 0206 	adc.w	r2, r2, r6
 800eeec:	fb05 fc0c 	mul.w	ip, r5, ip
 800eef0:	fb03 c000 	mla	r0, r3, r0, ip
 800eef4:	fba5 5303 	umull	r5, r3, r5, r3
 800eef8:	4403      	add	r3, r0
 800eefa:	192c      	adds	r4, r5, r4
 800eefc:	eb43 0808 	adc.w	r8, r3, r8
		vb1 += 64;
 800ef00:	f501 7180 	add.w	r1, r1, #256	; 0x100
  return x >> n;
 800ef04:	ea4f 5e1e 	mov.w	lr, lr, lsr #20
 800ef08:	ea4e 3e02 	orr.w	lr, lr, r2, lsl #12
	x >>= fracBits;
 800ef0c:	ea4f 13ae 	mov.w	r3, lr, asr #6
	sign = x >> 31;
 800ef10:	ea4f 70ee 	mov.w	r0, lr, asr #31
	if (sign != (x >> 15))
 800ef14:	ea4f 526e 	mov.w	r2, lr, asr #21
 800ef18:	ebb2 7fee 	cmp.w	r2, lr, asr #31
 800ef1c:	d002      	beq.n	800ef24 <xmp3fixpt_PolyphaseMono+0x74c>
		x = sign ^ ((1 << 15) - 1);
 800ef1e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ef22:	4043      	eors	r3, r0
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800ef24:	9a02      	ldr	r2, [sp, #8]
 800ef26:	8013      	strh	r3, [r2, #0]
 800ef28:	0d24      	lsrs	r4, r4, #20
 800ef2a:	ea44 3408 	orr.w	r4, r4, r8, lsl #12
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800ef2e:	9b01      	ldr	r3, [sp, #4]
 800ef30:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	x >>= fracBits;
 800ef34:	11a3      	asrs	r3, r4, #6
	sign = x >> 31;
 800ef36:	17e5      	asrs	r5, r4, #31
	if (sign != (x >> 15))
 800ef38:	1560      	asrs	r0, r4, #21
 800ef3a:	ebb0 7fe4 	cmp.w	r0, r4, asr #31
 800ef3e:	f43f adf8 	beq.w	800eb32 <xmp3fixpt_PolyphaseMono+0x35a>
		x = sign ^ ((1 << 15) - 1);
 800ef42:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ef46:	406b      	eors	r3, r5
 800ef48:	e5f3      	b.n	800eb32 <xmp3fixpt_PolyphaseMono+0x35a>
	}
}
 800ef4a:	b005      	add	sp, #20
 800ef4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef50 <xmp3fixpt_PolyphaseStereo>:
 * Notes:       interleaves PCM samples LRLRLR...
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 **************************************************************************************/
void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
{
 800ef50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef54:	b08d      	sub	sp, #52	; 0x34
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = sum1R = rndVal;

	MC0S(0)
 800ef56:	6814      	ldr	r4, [r2, #0]
 800ef58:	6853      	ldr	r3, [r2, #4]
 800ef5a:	680e      	ldr	r6, [r1, #0]
 800ef5c:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
   return (sum + ((int64_t)x * y));
 800ef5e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800ef62:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800ef66:	fb06 f70c 	mul.w	r7, r6, ip
 800ef6a:	fb04 7909 	mla	r9, r4, r9, r7
 800ef6e:	fba6 6704 	umull	r6, r7, r6, r4
 800ef72:	f116 7600 	adds.w	r6, r6, #33554432	; 0x2000000
 800ef76:	eb49 0707 	adc.w	r7, r9, r7
 800ef7a:	425b      	negs	r3, r3
 800ef7c:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800ef80:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 800ef84:	fb05 f90e 	mul.w	r9, r5, lr
 800ef88:	fb03 9908 	mla	r9, r3, r8, r9
 800ef8c:	fba5 5803 	umull	r5, r8, r5, r3
 800ef90:	44c1      	add	r9, r8
 800ef92:	19ad      	adds	r5, r5, r6
 800ef94:	eb49 0907 	adc.w	r9, r9, r7
 800ef98:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
 800ef9c:	f8d1 70dc 	ldr.w	r7, [r1, #220]	; 0xdc
 800efa0:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800efa4:	fb06 fc0c 	mul.w	ip, r6, ip
 800efa8:	fb04 cc08 	mla	ip, r4, r8, ip
 800efac:	fba6 6404 	umull	r6, r4, r6, r4
 800efb0:	f116 7600 	adds.w	r6, r6, #33554432	; 0x2000000
 800efb4:	eb4c 0404 	adc.w	r4, ip, r4
 800efb8:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800efbc:	fb07 fe0e 	mul.w	lr, r7, lr
 800efc0:	fb03 ee0c 	mla	lr, r3, ip, lr
 800efc4:	fba7 7303 	umull	r7, r3, r7, r3
 800efc8:	4473      	add	r3, lr
 800efca:	eb17 0c06 	adds.w	ip, r7, r6
 800efce:	eb43 0e04 	adc.w	lr, r3, r4
	MC0S(1)
 800efd2:	6894      	ldr	r4, [r2, #8]
 800efd4:	68d3      	ldr	r3, [r2, #12]
 800efd6:	684e      	ldr	r6, [r1, #4]
 800efd8:	6d8f      	ldr	r7, [r1, #88]	; 0x58
 800efda:	ea4f 7ae6 	mov.w	sl, r6, asr #31
 800efde:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800efe2:	fb06 fb08 	mul.w	fp, r6, r8
 800efe6:	fb04 bb0a 	mla	fp, r4, sl, fp
 800efea:	fba6 a604 	umull	sl, r6, r6, r4
 800efee:	445e      	add	r6, fp
 800eff0:	eb1a 0505 	adds.w	r5, sl, r5
 800eff4:	eb46 0609 	adc.w	r6, r6, r9
 800eff8:	425b      	negs	r3, r3
 800effa:	ea4f 7ae7 	mov.w	sl, r7, asr #31
 800effe:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800f002:	fb07 fb09 	mul.w	fp, r7, r9
 800f006:	fb03 bb0a 	mla	fp, r3, sl, fp
 800f00a:	fba7 a703 	umull	sl, r7, r7, r3
 800f00e:	44bb      	add	fp, r7
 800f010:	eb1a 0a05 	adds.w	sl, sl, r5
 800f014:	eb4b 0b06 	adc.w	fp, fp, r6
 800f018:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
 800f01c:	f8d1 50d8 	ldr.w	r5, [r1, #216]	; 0xd8
 800f020:	17f7      	asrs	r7, r6, #31
 800f022:	fb06 f808 	mul.w	r8, r6, r8
 800f026:	fb04 8807 	mla	r8, r4, r7, r8
 800f02a:	fba6 6404 	umull	r6, r4, r6, r4
 800f02e:	4444      	add	r4, r8
 800f030:	eb16 070c 	adds.w	r7, r6, ip
 800f034:	eb44 040e 	adc.w	r4, r4, lr
 800f038:	17ee      	asrs	r6, r5, #31
 800f03a:	fb05 f809 	mul.w	r8, r5, r9
 800f03e:	fb03 8806 	mla	r8, r3, r6, r8
 800f042:	fba5 5303 	umull	r5, r3, r5, r3
 800f046:	4498      	add	r8, r3
 800f048:	19ee      	adds	r6, r5, r7
 800f04a:	eb48 0804 	adc.w	r8, r8, r4
	MC0S(2)
 800f04e:	6914      	ldr	r4, [r2, #16]
 800f050:	6953      	ldr	r3, [r2, #20]
 800f052:	688f      	ldr	r7, [r1, #8]
 800f054:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f056:	ea4f 79e7 	mov.w	r9, r7, asr #31
 800f05a:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800f05e:	fb07 fc0e 	mul.w	ip, r7, lr
 800f062:	fb04 cc09 	mla	ip, r4, r9, ip
 800f066:	fba7 9704 	umull	r9, r7, r7, r4
 800f06a:	4467      	add	r7, ip
 800f06c:	eb19 0a0a 	adds.w	sl, r9, sl
 800f070:	eb47 0b0b 	adc.w	fp, r7, fp
 800f074:	425b      	negs	r3, r3
 800f076:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800f07a:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800f07e:	fb05 f709 	mul.w	r7, r5, r9
 800f082:	fb03 770c 	mla	r7, r3, ip, r7
 800f086:	fba5 c503 	umull	ip, r5, r5, r3
 800f08a:	443d      	add	r5, r7
 800f08c:	eb1c 0a0a 	adds.w	sl, ip, sl
 800f090:	eb45 0b0b 	adc.w	fp, r5, fp
 800f094:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 800f098:	f8d1 70d4 	ldr.w	r7, [r1, #212]	; 0xd4
 800f09c:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800f0a0:	fb05 fe0e 	mul.w	lr, r5, lr
 800f0a4:	fb04 ee0c 	mla	lr, r4, ip, lr
 800f0a8:	fba5 5404 	umull	r5, r4, r5, r4
 800f0ac:	4474      	add	r4, lr
 800f0ae:	19ad      	adds	r5, r5, r6
 800f0b0:	eb44 0808 	adc.w	r8, r4, r8
 800f0b4:	17fe      	asrs	r6, r7, #31
 800f0b6:	fb07 f409 	mul.w	r4, r7, r9
 800f0ba:	fb03 4406 	mla	r4, r3, r6, r4
 800f0be:	fba7 7303 	umull	r7, r3, r7, r3
 800f0c2:	441c      	add	r4, r3
 800f0c4:	eb17 0c05 	adds.w	ip, r7, r5
 800f0c8:	eb44 0908 	adc.w	r9, r4, r8
	MC0S(3)
 800f0cc:	6994      	ldr	r4, [r2, #24]
 800f0ce:	69d3      	ldr	r3, [r2, #28]
 800f0d0:	68cd      	ldr	r5, [r1, #12]
 800f0d2:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 800f0d4:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f0d8:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800f0dc:	fb05 f70e 	mul.w	r7, r5, lr
 800f0e0:	fb04 7708 	mla	r7, r4, r8, r7
 800f0e4:	fba5 8504 	umull	r8, r5, r5, r4
 800f0e8:	443d      	add	r5, r7
 800f0ea:	eb18 0a0a 	adds.w	sl, r8, sl
 800f0ee:	eb45 0b0b 	adc.w	fp, r5, fp
 800f0f2:	425b      	negs	r3, r3
 800f0f4:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800f0f8:	17dd      	asrs	r5, r3, #31
 800f0fa:	fb06 f705 	mul.w	r7, r6, r5
 800f0fe:	fb03 7708 	mla	r7, r3, r8, r7
 800f102:	fba6 8603 	umull	r8, r6, r6, r3
 800f106:	443e      	add	r6, r7
 800f108:	eb18 0a0a 	adds.w	sl, r8, sl
 800f10c:	eb46 0b0b 	adc.w	fp, r6, fp
 800f110:	f8d1 708c 	ldr.w	r7, [r1, #140]	; 0x8c
 800f114:	f8d1 60d0 	ldr.w	r6, [r1, #208]	; 0xd0
 800f118:	ea4f 78e7 	mov.w	r8, r7, asr #31
 800f11c:	fb07 fe0e 	mul.w	lr, r7, lr
 800f120:	fb04 ee08 	mla	lr, r4, r8, lr
 800f124:	fba7 7404 	umull	r7, r4, r7, r4
 800f128:	4474      	add	r4, lr
 800f12a:	eb17 070c 	adds.w	r7, r7, ip
 800f12e:	eb44 0409 	adc.w	r4, r4, r9
 800f132:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800f136:	fb06 f805 	mul.w	r8, r6, r5
 800f13a:	fb03 880c 	mla	r8, r3, ip, r8
 800f13e:	fba6 6303 	umull	r6, r3, r6, r3
 800f142:	4498      	add	r8, r3
 800f144:	19f6      	adds	r6, r6, r7
 800f146:	eb48 0804 	adc.w	r8, r8, r4
	MC0S(4)
 800f14a:	6a14      	ldr	r4, [r2, #32]
 800f14c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f14e:	690f      	ldr	r7, [r1, #16]
 800f150:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 800f152:	ea4f 79e7 	mov.w	r9, r7, asr #31
 800f156:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800f15a:	fb07 fc0e 	mul.w	ip, r7, lr
 800f15e:	fb04 cc09 	mla	ip, r4, r9, ip
 800f162:	fba7 9704 	umull	r9, r7, r7, r4
 800f166:	4467      	add	r7, ip
 800f168:	eb19 0a0a 	adds.w	sl, r9, sl
 800f16c:	eb47 0b0b 	adc.w	fp, r7, fp
 800f170:	425b      	negs	r3, r3
 800f172:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800f176:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800f17a:	fb05 f709 	mul.w	r7, r5, r9
 800f17e:	fb03 770c 	mla	r7, r3, ip, r7
 800f182:	fba5 c503 	umull	ip, r5, r5, r3
 800f186:	443d      	add	r5, r7
 800f188:	eb1c 0a0a 	adds.w	sl, ip, sl
 800f18c:	eb45 0b0b 	adc.w	fp, r5, fp
 800f190:	f8d1 5090 	ldr.w	r5, [r1, #144]	; 0x90
 800f194:	f8d1 70cc 	ldr.w	r7, [r1, #204]	; 0xcc
 800f198:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800f19c:	fb05 fe0e 	mul.w	lr, r5, lr
 800f1a0:	fb04 ee0c 	mla	lr, r4, ip, lr
 800f1a4:	fba5 5404 	umull	r5, r4, r5, r4
 800f1a8:	4474      	add	r4, lr
 800f1aa:	19ad      	adds	r5, r5, r6
 800f1ac:	eb44 0808 	adc.w	r8, r4, r8
 800f1b0:	17fe      	asrs	r6, r7, #31
 800f1b2:	fb07 f409 	mul.w	r4, r7, r9
 800f1b6:	fb03 4406 	mla	r4, r3, r6, r4
 800f1ba:	fba7 7303 	umull	r7, r3, r7, r3
 800f1be:	441c      	add	r4, r3
 800f1c0:	eb17 0c05 	adds.w	ip, r7, r5
 800f1c4:	eb44 0908 	adc.w	r9, r4, r8
	MC0S(5)
 800f1c8:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800f1ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f1cc:	694d      	ldr	r5, [r1, #20]
 800f1ce:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 800f1d0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f1d4:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800f1d8:	fb05 f70e 	mul.w	r7, r5, lr
 800f1dc:	fb04 7708 	mla	r7, r4, r8, r7
 800f1e0:	fba5 8504 	umull	r8, r5, r5, r4
 800f1e4:	443d      	add	r5, r7
 800f1e6:	eb18 0a0a 	adds.w	sl, r8, sl
 800f1ea:	eb45 0b0b 	adc.w	fp, r5, fp
 800f1ee:	425b      	negs	r3, r3
 800f1f0:	17f7      	asrs	r7, r6, #31
 800f1f2:	17dd      	asrs	r5, r3, #31
 800f1f4:	fb06 f805 	mul.w	r8, r6, r5
 800f1f8:	fb03 8807 	mla	r8, r3, r7, r8
 800f1fc:	fba6 7603 	umull	r7, r6, r6, r3
 800f200:	4446      	add	r6, r8
 800f202:	eb17 0a0a 	adds.w	sl, r7, sl
 800f206:	eb46 0b0b 	adc.w	fp, r6, fp
 800f20a:	f8d1 7094 	ldr.w	r7, [r1, #148]	; 0x94
 800f20e:	f8d1 60c8 	ldr.w	r6, [r1, #200]	; 0xc8
 800f212:	ea4f 78e7 	mov.w	r8, r7, asr #31
 800f216:	fb07 fe0e 	mul.w	lr, r7, lr
 800f21a:	fb04 ee08 	mla	lr, r4, r8, lr
 800f21e:	fba7 7404 	umull	r7, r4, r7, r4
 800f222:	4474      	add	r4, lr
 800f224:	eb17 070c 	adds.w	r7, r7, ip
 800f228:	eb44 0409 	adc.w	r4, r4, r9
 800f22c:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800f230:	fb06 f805 	mul.w	r8, r6, r5
 800f234:	fb03 880c 	mla	r8, r3, ip, r8
 800f238:	fba6 6303 	umull	r6, r3, r6, r3
 800f23c:	4498      	add	r8, r3
 800f23e:	19f6      	adds	r6, r6, r7
 800f240:	eb48 0804 	adc.w	r8, r8, r4
	MC0S(6)
 800f244:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800f246:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f248:	698d      	ldr	r5, [r1, #24]
 800f24a:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 800f24c:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800f250:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800f254:	fb05 fc0e 	mul.w	ip, r5, lr
 800f258:	fb04 cc09 	mla	ip, r4, r9, ip
 800f25c:	fba5 9504 	umull	r9, r5, r5, r4
 800f260:	4465      	add	r5, ip
 800f262:	eb19 0a0a 	adds.w	sl, r9, sl
 800f266:	eb45 050b 	adc.w	r5, r5, fp
 800f26a:	425b      	negs	r3, r3
 800f26c:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800f270:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800f274:	fb07 f90b 	mul.w	r9, r7, fp
 800f278:	fb03 990c 	mla	r9, r3, ip, r9
 800f27c:	fba7 7c03 	umull	r7, ip, r7, r3
 800f280:	44cc      	add	ip, r9
 800f282:	eb17 070a 	adds.w	r7, r7, sl
 800f286:	eb4c 0c05 	adc.w	ip, ip, r5
 800f28a:	f8d1 5098 	ldr.w	r5, [r1, #152]	; 0x98
 800f28e:	f8d1 a0c4 	ldr.w	sl, [r1, #196]	; 0xc4
 800f292:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800f296:	fb05 fe0e 	mul.w	lr, r5, lr
 800f29a:	fb04 ee09 	mla	lr, r4, r9, lr
 800f29e:	fba5 5404 	umull	r5, r4, r5, r4
 800f2a2:	4474      	add	r4, lr
 800f2a4:	19ad      	adds	r5, r5, r6
 800f2a6:	eb44 0808 	adc.w	r8, r4, r8
 800f2aa:	ea4f 74ea 	mov.w	r4, sl, asr #31
 800f2ae:	fb0a f60b 	mul.w	r6, sl, fp
 800f2b2:	fb03 6604 	mla	r6, r3, r4, r6
 800f2b6:	fbaa 9303 	umull	r9, r3, sl, r3
 800f2ba:	441e      	add	r6, r3
 800f2bc:	eb19 0905 	adds.w	r9, r9, r5
 800f2c0:	eb46 0a08 	adc.w	sl, r6, r8
	MC0S(7)
 800f2c4:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800f2c6:	69cc      	ldr	r4, [r1, #28]
 800f2c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2ca:	ea4f 7ee4 	mov.w	lr, r4, asr #31
 800f2ce:	17f5      	asrs	r5, r6, #31
 800f2d0:	fb06 fe0e 	mul.w	lr, r6, lr
 800f2d4:	fb04 ee05 	mla	lr, r4, r5, lr
 800f2d8:	fba6 b804 	umull	fp, r8, r6, r4
 800f2dc:	44f0      	add	r8, lr
 800f2de:	eb1b 0707 	adds.w	r7, fp, r7
 800f2e2:	eb48 0c0c 	adc.w	ip, r8, ip
 800f2e6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800f2e8:	4264      	negs	r4, r4
 800f2ea:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 800f2ee:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800f2f2:	fb04 fe0e 	mul.w	lr, r4, lr
 800f2f6:	fb03 ee08 	mla	lr, r3, r8, lr
 800f2fa:	fba4 b303 	umull	fp, r3, r4, r3
 800f2fe:	4473      	add	r3, lr
 800f300:	eb17 070b 	adds.w	r7, r7, fp
 800f304:	eb43 0c0c 	adc.w	ip, r3, ip
 800f308:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 800f30c:	f8d1 e0c0 	ldr.w	lr, [r1, #192]	; 0xc0
 800f310:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800f314:	fb06 fb0b 	mul.w	fp, r6, fp
 800f318:	fb03 b505 	mla	r5, r3, r5, fp
 800f31c:	fba6 3603 	umull	r3, r6, r6, r3
 800f320:	442e      	add	r6, r5
 800f322:	eb13 0309 	adds.w	r3, r3, r9
 800f326:	eb46 060a 	adc.w	r6, r6, sl
 800f32a:	ea4f 75ee 	mov.w	r5, lr, asr #31
 800f32e:	fb04 f505 	mul.w	r5, r4, r5
 800f332:	fb0e 5508 	mla	r5, lr, r8, r5
 800f336:	fba4 4e0e 	umull	r4, lr, r4, lr
 800f33a:	4475      	add	r5, lr
 800f33c:	191b      	adds	r3, r3, r4
 800f33e:	eb45 0406 	adc.w	r4, r5, r6
  return x >> n;
 800f342:	0d3f      	lsrs	r7, r7, #20
 800f344:	ea47 370c 	orr.w	r7, r7, ip, lsl #12
	x >>= fracBits;
 800f348:	11bd      	asrs	r5, r7, #6
	if (sign != (x >> 15))
 800f34a:	157e      	asrs	r6, r7, #21
 800f34c:	ebb6 7fe7 	cmp.w	r6, r7, asr #31
 800f350:	d005      	beq.n	800f35e <xmp3fixpt_PolyphaseStereo+0x40e>
 800f352:	ea4f 7ce7 	mov.w	ip, r7, asr #31
		x = sign ^ ((1 << 15) - 1);
 800f356:	f647 75ff 	movw	r5, #32767	; 0x7fff
 800f35a:	ea8c 0505 	eor.w	r5, ip, r5

	*(pcm + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800f35e:	8005      	strh	r5, [r0, #0]
 800f360:	0d1b      	lsrs	r3, r3, #20
 800f362:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	x >>= fracBits;
 800f366:	119c      	asrs	r4, r3, #6
	sign = x >> 31;
 800f368:	17de      	asrs	r6, r3, #31
	if (sign != (x >> 15))
 800f36a:	155d      	asrs	r5, r3, #21
 800f36c:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800f370:	d002      	beq.n	800f378 <xmp3fixpt_PolyphaseStereo+0x428>
		x = sign ^ ((1 << 15) - 1);
 800f372:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800f376:	4074      	eors	r4, r6
	*(pcm + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 800f378:	8044      	strh	r4, [r0, #2]
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = sum1R = rndVal;

	MC1S(0)
 800f37a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 800f37e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
 800f382:	6825      	ldr	r5, [r4, #0]
   return (sum + ((int64_t)x * y));
 800f384:	17ee      	asrs	r6, r5, #31
 800f386:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800f38a:	fb03 f606 	mul.w	r6, r3, r6
 800f38e:	fb05 660c 	mla	r6, r5, ip, r6
 800f392:	fba3 7505 	umull	r7, r5, r3, r5
 800f396:	f117 7700 	adds.w	r7, r7, #33554432	; 0x2000000
 800f39a:	eb46 0805 	adc.w	r8, r6, r5
 800f39e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800f3a2:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800f3a6:	fb03 fa0a 	mul.w	sl, r3, sl
 800f3aa:	fb05 aa0c 	mla	sl, r5, ip, sl
 800f3ae:	fba3 3505 	umull	r3, r5, r3, r5
 800f3b2:	f113 7300 	adds.w	r3, r3, #33554432	; 0x2000000
 800f3b6:	eb4a 0c05 	adc.w	ip, sl, r5
	MC1S(1)
 800f3ba:	f8d2 5404 	ldr.w	r5, [r2, #1028]	; 0x404
 800f3be:	6866      	ldr	r6, [r4, #4]
 800f3c0:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800f3c4:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800f3c8:	fb05 f909 	mul.w	r9, r5, r9
 800f3cc:	fb06 990a 	mla	r9, r6, sl, r9
 800f3d0:	fba5 6e06 	umull	r6, lr, r5, r6
 800f3d4:	44f1      	add	r9, lr
 800f3d6:	19bf      	adds	r7, r7, r6
 800f3d8:	eb49 0608 	adc.w	r6, r9, r8
 800f3dc:	f8d4 8084 	ldr.w	r8, [r4, #132]	; 0x84
 800f3e0:	ea4f 7ee8 	mov.w	lr, r8, asr #31
 800f3e4:	fb05 fe0e 	mul.w	lr, r5, lr
 800f3e8:	fb08 ee0a 	mla	lr, r8, sl, lr
 800f3ec:	fba5 5a08 	umull	r5, sl, r5, r8
 800f3f0:	44d6      	add	lr, sl
 800f3f2:	195b      	adds	r3, r3, r5
 800f3f4:	eb4e 0a0c 	adc.w	sl, lr, ip
	MC1S(2)
 800f3f8:	f8d2 5408 	ldr.w	r5, [r2, #1032]	; 0x408
 800f3fc:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800f400:	ea4f 78e9 	mov.w	r8, r9, asr #31
 800f404:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800f408:	fb05 f808 	mul.w	r8, r5, r8
 800f40c:	fb09 880e 	mla	r8, r9, lr, r8
 800f410:	fba5 9c09 	umull	r9, ip, r5, r9
 800f414:	44e0      	add	r8, ip
 800f416:	eb17 0709 	adds.w	r7, r7, r9
 800f41a:	eb48 0906 	adc.w	r9, r8, r6
 800f41e:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800f422:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800f426:	fb05 fc0c 	mul.w	ip, r5, ip
 800f42a:	fb06 cc0e 	mla	ip, r6, lr, ip
 800f42e:	fba5 5e06 	umull	r5, lr, r5, r6
 800f432:	44f4      	add	ip, lr
 800f434:	195b      	adds	r3, r3, r5
 800f436:	eb4c 0e0a 	adc.w	lr, ip, sl
	MC1S(3)
 800f43a:	f8d2 540c 	ldr.w	r5, [r2, #1036]	; 0x40c
 800f43e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800f442:	ea4f 76e8 	mov.w	r6, r8, asr #31
 800f446:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800f44a:	fb05 f606 	mul.w	r6, r5, r6
 800f44e:	fb08 660c 	mla	r6, r8, ip, r6
 800f452:	fba5 8a08 	umull	r8, sl, r5, r8
 800f456:	4456      	add	r6, sl
 800f458:	eb17 0708 	adds.w	r7, r7, r8
 800f45c:	eb46 0809 	adc.w	r8, r6, r9
 800f460:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800f464:	ea4f 7ae6 	mov.w	sl, r6, asr #31
 800f468:	fb05 fa0a 	mul.w	sl, r5, sl
 800f46c:	fb06 aa0c 	mla	sl, r6, ip, sl
 800f470:	fba5 5c06 	umull	r5, ip, r5, r6
 800f474:	44e2      	add	sl, ip
 800f476:	195b      	adds	r3, r3, r5
 800f478:	eb4a 0c0e 	adc.w	ip, sl, lr
	MC1S(4)
 800f47c:	f8d2 5410 	ldr.w	r5, [r2, #1040]	; 0x410
 800f480:	6926      	ldr	r6, [r4, #16]
 800f482:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800f486:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800f48a:	fb05 f909 	mul.w	r9, r5, r9
 800f48e:	fb06 990a 	mla	r9, r6, sl, r9
 800f492:	fba5 6e06 	umull	r6, lr, r5, r6
 800f496:	44f1      	add	r9, lr
 800f498:	19bf      	adds	r7, r7, r6
 800f49a:	eb49 0608 	adc.w	r6, r9, r8
 800f49e:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 800f4a2:	ea4f 7ee8 	mov.w	lr, r8, asr #31
 800f4a6:	fb05 fe0e 	mul.w	lr, r5, lr
 800f4aa:	fb08 ee0a 	mla	lr, r8, sl, lr
 800f4ae:	fba5 5a08 	umull	r5, sl, r5, r8
 800f4b2:	44d6      	add	lr, sl
 800f4b4:	195b      	adds	r3, r3, r5
 800f4b6:	eb4e 0a0c 	adc.w	sl, lr, ip
	MC1S(5)
 800f4ba:	f8d2 5414 	ldr.w	r5, [r2, #1044]	; 0x414
 800f4be:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800f4c2:	ea4f 78e9 	mov.w	r8, r9, asr #31
 800f4c6:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800f4ca:	fb05 f808 	mul.w	r8, r5, r8
 800f4ce:	fb09 880e 	mla	r8, r9, lr, r8
 800f4d2:	fba5 9c09 	umull	r9, ip, r5, r9
 800f4d6:	44e0      	add	r8, ip
 800f4d8:	eb17 0709 	adds.w	r7, r7, r9
 800f4dc:	eb48 0906 	adc.w	r9, r8, r6
 800f4e0:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 800f4e4:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800f4e8:	fb05 fc0c 	mul.w	ip, r5, ip
 800f4ec:	fb06 cc0e 	mla	ip, r6, lr, ip
 800f4f0:	fba5 5e06 	umull	r5, lr, r5, r6
 800f4f4:	44f4      	add	ip, lr
 800f4f6:	195b      	adds	r3, r3, r5
 800f4f8:	eb4c 0e0a 	adc.w	lr, ip, sl
	MC1S(6)
 800f4fc:	f8d2 5418 	ldr.w	r5, [r2, #1048]	; 0x418
 800f500:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800f504:	ea4f 76e8 	mov.w	r6, r8, asr #31
 800f508:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800f50c:	fb05 f606 	mul.w	r6, r5, r6
 800f510:	fb08 660a 	mla	r6, r8, sl, r6
 800f514:	fba5 8c08 	umull	r8, ip, r5, r8
 800f518:	4466      	add	r6, ip
 800f51a:	eb17 0708 	adds.w	r7, r7, r8
 800f51e:	eb46 0809 	adc.w	r8, r6, r9
 800f522:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 800f526:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800f52a:	fb05 fc0c 	mul.w	ip, r5, ip
 800f52e:	fb06 cc0a 	mla	ip, r6, sl, ip
 800f532:	fba5 5606 	umull	r5, r6, r5, r6
 800f536:	44b4      	add	ip, r6
 800f538:	195b      	adds	r3, r3, r5
 800f53a:	eb4c 0c0e 	adc.w	ip, ip, lr
	MC1S(7)
 800f53e:	f8d2 e41c 	ldr.w	lr, [r2, #1052]	; 0x41c
 800f542:	69e5      	ldr	r5, [r4, #28]
 800f544:	17ee      	asrs	r6, r5, #31
 800f546:	ea4f 79ee 	mov.w	r9, lr, asr #31
 800f54a:	fb0e f606 	mul.w	r6, lr, r6
 800f54e:	fb05 6609 	mla	r6, r5, r9, r6
 800f552:	fbae 5a05 	umull	r5, sl, lr, r5
 800f556:	4456      	add	r6, sl
 800f558:	197f      	adds	r7, r7, r5
 800f55a:	eb46 0608 	adc.w	r6, r6, r8
 800f55e:	f8d4 409c 	ldr.w	r4, [r4, #156]	; 0x9c
 800f562:	17e5      	asrs	r5, r4, #31
 800f564:	fb0e f505 	mul.w	r5, lr, r5
 800f568:	fb04 5509 	mla	r5, r4, r9, r5
 800f56c:	fbae 4e04 	umull	r4, lr, lr, r4
 800f570:	4475      	add	r5, lr
 800f572:	191b      	adds	r3, r3, r4
 800f574:	eb45 040c 	adc.w	r4, r5, ip
  return x >> n;
 800f578:	0d3d      	lsrs	r5, r7, #20
 800f57a:	ea45 3506 	orr.w	r5, r5, r6, lsl #12
	x >>= fracBits;
 800f57e:	11ae      	asrs	r6, r5, #6
	sign = x >> 31;
 800f580:	ea4f 7ce5 	mov.w	ip, r5, asr #31
	if (sign != (x >> 15))
 800f584:	156f      	asrs	r7, r5, #21
 800f586:	ebb7 7fe5 	cmp.w	r7, r5, asr #31
 800f58a:	d003      	beq.n	800f594 <xmp3fixpt_PolyphaseStereo+0x644>
		x = sign ^ ((1 << 15) - 1);
 800f58c:	f647 76ff 	movw	r6, #32767	; 0x7fff
 800f590:	ea8c 0606 	eor.w	r6, ip, r6

	*(pcm + 2*16 + 0) = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800f594:	f8a0 6040 	strh.w	r6, [r0, #64]	; 0x40
 800f598:	0d1b      	lsrs	r3, r3, #20
 800f59a:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
	x >>= fracBits;
 800f59e:	119c      	asrs	r4, r3, #6
	sign = x >> 31;
 800f5a0:	17de      	asrs	r6, r3, #31
	if (sign != (x >> 15))
 800f5a2:	155d      	asrs	r5, r3, #21
 800f5a4:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 800f5a8:	d002      	beq.n	800f5b0 <xmp3fixpt_PolyphaseStereo+0x660>
		x = sign ^ ((1 << 15) - 1);
 800f5aa:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800f5ae:	4074      	eors	r4, r6
	*(pcm + 2*16 + 1) = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 800f5b0:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42

	/* main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17 */
	coef = coefBase + 16;
 800f5b4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800f5b8:	9301      	str	r3, [sp, #4]
	vb1 = vbuf + 64;
 800f5ba:	f501 7a80 	add.w	sl, r1, #256	; 0x100
	pcm += 2;
 800f5be:	1d03      	adds	r3, r0, #4
 800f5c0:	9302      	str	r3, [sp, #8]

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 800f5c2:	230f      	movs	r3, #15
 800f5c4:	9303      	str	r3, [sp, #12]
 800f5c6:	e006      	b.n	800f5d6 <xmp3fixpt_PolyphaseStereo+0x686>

		vb1 += 64;
		*(pcm + 0)         = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
 800f5c8:	8019      	strh	r1, [r3, #0]
		pcm += 2;
 800f5ca:	9b02      	ldr	r3, [sp, #8]
 800f5cc:	3304      	adds	r3, #4
 800f5ce:	9302      	str	r3, [sp, #8]
	for (i = 15; i > 0; i--) {
 800f5d0:	9b03      	ldr	r3, [sp, #12]
 800f5d2:	3b01      	subs	r3, #1
 800f5d4:	9303      	str	r3, [sp, #12]
 800f5d6:	9b03      	ldr	r3, [sp, #12]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f340 8416 	ble.w	800fe0a <xmp3fixpt_PolyphaseStereo+0xeba>
		MC2S(0)
 800f5de:	9a01      	ldr	r2, [sp, #4]
 800f5e0:	6813      	ldr	r3, [r2, #0]
 800f5e2:	6854      	ldr	r4, [r2, #4]
 800f5e4:	f8da 2000 	ldr.w	r2, [sl]
 800f5e8:	f8da 005c 	ldr.w	r0, [sl, #92]	; 0x5c
   return (sum + ((int64_t)x * y));
 800f5ec:	17d6      	asrs	r6, r2, #31
 800f5ee:	17dd      	asrs	r5, r3, #31
 800f5f0:	9504      	str	r5, [sp, #16]
 800f5f2:	fb02 fc05 	mul.w	ip, r2, r5
 800f5f6:	fb03 cc06 	mla	ip, r3, r6, ip
 800f5fa:	fba2 7103 	umull	r7, r1, r2, r3
 800f5fe:	f117 7700 	adds.w	r7, r7, #33554432	; 0x2000000
 800f602:	eb4c 0c01 	adc.w	ip, ip, r1
 800f606:	17e1      	asrs	r1, r4, #31
 800f608:	fb04 f606 	mul.w	r6, r4, r6
 800f60c:	9105      	str	r1, [sp, #20]
 800f60e:	fb02 6601 	mla	r6, r2, r1, r6
 800f612:	fba4 2102 	umull	r2, r1, r4, r2
 800f616:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800f61a:	eb46 0601 	adc.w	r6, r6, r1
 800f61e:	4261      	negs	r1, r4
 800f620:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800f624:	17cd      	asrs	r5, r1, #31
 800f626:	9506      	str	r5, [sp, #24]
 800f628:	fb00 fe05 	mul.w	lr, r0, r5
 800f62c:	fb01 ee09 	mla	lr, r1, r9, lr
 800f630:	fba0 8b01 	umull	r8, fp, r0, r1
 800f634:	44de      	add	lr, fp
 800f636:	eb18 0807 	adds.w	r8, r8, r7
 800f63a:	eb4e 0b0c 	adc.w	fp, lr, ip
 800f63e:	9d04      	ldr	r5, [sp, #16]
 800f640:	fb00 f705 	mul.w	r7, r0, r5
 800f644:	fb03 7909 	mla	r9, r3, r9, r7
 800f648:	fba0 0703 	umull	r0, r7, r0, r3
 800f64c:	44b9      	add	r9, r7
 800f64e:	1880      	adds	r0, r0, r2
 800f650:	900b      	str	r0, [sp, #44]	; 0x2c
 800f652:	eb49 0906 	adc.w	r9, r9, r6
 800f656:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 800f65a:	f8da 00dc 	ldr.w	r0, [sl, #220]	; 0xdc
 800f65e:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 800f662:	fb02 fc05 	mul.w	ip, r2, r5
 800f666:	fb03 cc0e 	mla	ip, r3, lr, ip
 800f66a:	fba2 6703 	umull	r6, r7, r2, r3
 800f66e:	f116 7600 	adds.w	r6, r6, #33554432	; 0x2000000
 800f672:	eb4c 0707 	adc.w	r7, ip, r7
 800f676:	9d05      	ldr	r5, [sp, #20]
 800f678:	fb02 fc05 	mul.w	ip, r2, r5
 800f67c:	fb04 ce0e 	mla	lr, r4, lr, ip
 800f680:	fba2 2404 	umull	r2, r4, r2, r4
 800f684:	f112 7c00 	adds.w	ip, r2, #33554432	; 0x2000000
 800f688:	f8cd c014 	str.w	ip, [sp, #20]
 800f68c:	eb4e 0404 	adc.w	r4, lr, r4
 800f690:	17c2      	asrs	r2, r0, #31
 800f692:	9d06      	ldr	r5, [sp, #24]
 800f694:	fb00 fc05 	mul.w	ip, r0, r5
 800f698:	fb01 cc02 	mla	ip, r1, r2, ip
 800f69c:	fba0 1e01 	umull	r1, lr, r0, r1
 800f6a0:	44f4      	add	ip, lr
 800f6a2:	1989      	adds	r1, r1, r6
 800f6a4:	9109      	str	r1, [sp, #36]	; 0x24
 800f6a6:	eb4c 0507 	adc.w	r5, ip, r7
 800f6aa:	950a      	str	r5, [sp, #40]	; 0x28
 800f6ac:	9d04      	ldr	r5, [sp, #16]
 800f6ae:	fb00 f505 	mul.w	r5, r0, r5
 800f6b2:	fb03 5502 	mla	r5, r3, r2, r5
 800f6b6:	fba0 1e03 	umull	r1, lr, r0, r3
 800f6ba:	44ae      	add	lr, r5
 800f6bc:	9b05      	ldr	r3, [sp, #20]
 800f6be:	18cb      	adds	r3, r1, r3
 800f6c0:	9307      	str	r3, [sp, #28]
 800f6c2:	eb4e 0404 	adc.w	r4, lr, r4
 800f6c6:	9408      	str	r4, [sp, #32]
		MC2S(1)
 800f6c8:	9a01      	ldr	r2, [sp, #4]
 800f6ca:	6894      	ldr	r4, [r2, #8]
 800f6cc:	68d3      	ldr	r3, [r2, #12]
 800f6ce:	f8da 2004 	ldr.w	r2, [sl, #4]
 800f6d2:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
 800f6d6:	17d6      	asrs	r6, r2, #31
 800f6d8:	17e7      	asrs	r7, r4, #31
 800f6da:	9704      	str	r7, [sp, #16]
 800f6dc:	fb02 fe07 	mul.w	lr, r2, r7
 800f6e0:	fb04 ec06 	mla	ip, r4, r6, lr
 800f6e4:	fba2 7e04 	umull	r7, lr, r2, r4
 800f6e8:	44e6      	add	lr, ip
 800f6ea:	eb17 0708 	adds.w	r7, r7, r8
 800f6ee:	eb4e 050b 	adc.w	r5, lr, fp
 800f6f2:	9505      	str	r5, [sp, #20]
 800f6f4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 800f6f8:	fb03 f606 	mul.w	r6, r3, r6
 800f6fc:	fb02 660e 	mla	r6, r2, lr, r6
 800f700:	fba3 2002 	umull	r2, r0, r3, r2
 800f704:	4406      	add	r6, r0
 800f706:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f708:	1812      	adds	r2, r2, r0
 800f70a:	eb46 0609 	adc.w	r6, r6, r9
 800f70e:	425d      	negs	r5, r3
 800f710:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800f714:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800f718:	fb01 f009 	mul.w	r0, r1, r9
 800f71c:	fb05 000c 	mla	r0, r5, ip, r0
 800f720:	fba1 8b05 	umull	r8, fp, r1, r5
 800f724:	4483      	add	fp, r0
 800f726:	eb18 0007 	adds.w	r0, r8, r7
 800f72a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f72c:	9805      	ldr	r0, [sp, #20]
 800f72e:	eb4b 0b00 	adc.w	fp, fp, r0
 800f732:	9f04      	ldr	r7, [sp, #16]
 800f734:	fb01 f007 	mul.w	r0, r1, r7
 800f738:	fb04 0c0c 	mla	ip, r4, ip, r0
 800f73c:	fba1 1004 	umull	r1, r0, r1, r4
 800f740:	4484      	add	ip, r0
 800f742:	1889      	adds	r1, r1, r2
 800f744:	9105      	str	r1, [sp, #20]
 800f746:	eb4c 0606 	adc.w	r6, ip, r6
 800f74a:	9606      	str	r6, [sp, #24]
 800f74c:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 800f750:	f8da 00d8 	ldr.w	r0, [sl, #216]	; 0xd8
 800f754:	ea4f 78e1 	mov.w	r8, r1, asr #31
 800f758:	463a      	mov	r2, r7
 800f75a:	fb01 f707 	mul.w	r7, r1, r7
 800f75e:	fb04 7708 	mla	r7, r4, r8, r7
 800f762:	fba1 6c04 	umull	r6, ip, r1, r4
 800f766:	44bc      	add	ip, r7
 800f768:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f76a:	19f6      	adds	r6, r6, r7
 800f76c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f76e:	eb4c 0c07 	adc.w	ip, ip, r7
 800f772:	fb01 fe0e 	mul.w	lr, r1, lr
 800f776:	fb03 ee08 	mla	lr, r3, r8, lr
 800f77a:	fba1 1303 	umull	r1, r3, r1, r3
 800f77e:	449e      	add	lr, r3
 800f780:	9b07      	ldr	r3, [sp, #28]
 800f782:	18c9      	adds	r1, r1, r3
 800f784:	9b08      	ldr	r3, [sp, #32]
 800f786:	eb4e 0e03 	adc.w	lr, lr, r3
 800f78a:	17c3      	asrs	r3, r0, #31
 800f78c:	fb00 f909 	mul.w	r9, r0, r9
 800f790:	fb05 9903 	mla	r9, r5, r3, r9
 800f794:	fba0 5705 	umull	r5, r7, r0, r5
 800f798:	44b9      	add	r9, r7
 800f79a:	19ad      	adds	r5, r5, r6
 800f79c:	9509      	str	r5, [sp, #36]	; 0x24
 800f79e:	eb49 070c 	adc.w	r7, r9, ip
 800f7a2:	970a      	str	r7, [sp, #40]	; 0x28
 800f7a4:	fb00 f202 	mul.w	r2, r0, r2
 800f7a8:	fb04 2303 	mla	r3, r4, r3, r2
 800f7ac:	fba0 4004 	umull	r4, r0, r0, r4
 800f7b0:	4403      	add	r3, r0
 800f7b2:	1864      	adds	r4, r4, r1
 800f7b4:	9407      	str	r4, [sp, #28]
 800f7b6:	eb43 030e 	adc.w	r3, r3, lr
 800f7ba:	9308      	str	r3, [sp, #32]
		MC2S(2)
 800f7bc:	9a01      	ldr	r2, [sp, #4]
 800f7be:	6913      	ldr	r3, [r2, #16]
 800f7c0:	6954      	ldr	r4, [r2, #20]
 800f7c2:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f7c6:	f8da 5054 	ldr.w	r5, [sl, #84]	; 0x54
 800f7ca:	17d6      	asrs	r6, r2, #31
 800f7cc:	17df      	asrs	r7, r3, #31
 800f7ce:	fb02 fe07 	mul.w	lr, r2, r7
 800f7d2:	fb03 e006 	mla	r0, r3, r6, lr
 800f7d6:	fba2 8e03 	umull	r8, lr, r2, r3
 800f7da:	4486      	add	lr, r0
 800f7dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f7de:	eb18 0800 	adds.w	r8, r8, r0
 800f7e2:	eb4e 0e0b 	adc.w	lr, lr, fp
 800f7e6:	17e1      	asrs	r1, r4, #31
 800f7e8:	fb04 f606 	mul.w	r6, r4, r6
 800f7ec:	9104      	str	r1, [sp, #16]
 800f7ee:	fb02 6601 	mla	r6, r2, r1, r6
 800f7f2:	fba4 2102 	umull	r2, r1, r4, r2
 800f7f6:	440e      	add	r6, r1
 800f7f8:	9805      	ldr	r0, [sp, #20]
 800f7fa:	1812      	adds	r2, r2, r0
 800f7fc:	9806      	ldr	r0, [sp, #24]
 800f7fe:	eb46 0100 	adc.w	r1, r6, r0
 800f802:	9105      	str	r1, [sp, #20]
 800f804:	f1c4 0c00 	rsb	ip, r4, #0
 800f808:	17e8      	asrs	r0, r5, #31
 800f80a:	ea4f 79ec 	mov.w	r9, ip, asr #31
 800f80e:	fb05 f109 	mul.w	r1, r5, r9
 800f812:	fb0c 1100 	mla	r1, ip, r0, r1
 800f816:	fba5 6b0c 	umull	r6, fp, r5, ip
 800f81a:	448b      	add	fp, r1
 800f81c:	eb16 0808 	adds.w	r8, r6, r8
 800f820:	eb4b 0b0e 	adc.w	fp, fp, lr
 800f824:	fb05 f107 	mul.w	r1, r5, r7
 800f828:	fb03 1000 	mla	r0, r3, r0, r1
 800f82c:	fba5 5103 	umull	r5, r1, r5, r3
 800f830:	4408      	add	r0, r1
 800f832:	18ae      	adds	r6, r5, r2
 800f834:	9606      	str	r6, [sp, #24]
 800f836:	9a05      	ldr	r2, [sp, #20]
 800f838:	eb40 0002 	adc.w	r0, r0, r2
 800f83c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f83e:	f8da 1088 	ldr.w	r1, [sl, #136]	; 0x88
 800f842:	f8da 20d4 	ldr.w	r2, [sl, #212]	; 0xd4
 800f846:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 800f84a:	fb01 f507 	mul.w	r5, r1, r7
 800f84e:	fb03 550e 	mla	r5, r3, lr, r5
 800f852:	fba1 6003 	umull	r6, r0, r1, r3
 800f856:	4428      	add	r0, r5
 800f858:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f85a:	1976      	adds	r6, r6, r5
 800f85c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f85e:	eb40 0005 	adc.w	r0, r0, r5
 800f862:	9d04      	ldr	r5, [sp, #16]
 800f864:	fb01 f505 	mul.w	r5, r1, r5
 800f868:	fb04 5e0e 	mla	lr, r4, lr, r5
 800f86c:	fba1 1404 	umull	r1, r4, r1, r4
 800f870:	44a6      	add	lr, r4
 800f872:	9c07      	ldr	r4, [sp, #28]
 800f874:	1909      	adds	r1, r1, r4
 800f876:	9c08      	ldr	r4, [sp, #32]
 800f878:	eb4e 0e04 	adc.w	lr, lr, r4
 800f87c:	17d4      	asrs	r4, r2, #31
 800f87e:	fb02 f909 	mul.w	r9, r2, r9
 800f882:	fb0c 9904 	mla	r9, ip, r4, r9
 800f886:	fba2 c50c 	umull	ip, r5, r2, ip
 800f88a:	444d      	add	r5, r9
 800f88c:	eb1c 0606 	adds.w	r6, ip, r6
 800f890:	9609      	str	r6, [sp, #36]	; 0x24
 800f892:	eb45 0000 	adc.w	r0, r5, r0
 800f896:	900a      	str	r0, [sp, #40]	; 0x28
 800f898:	fb02 f007 	mul.w	r0, r2, r7
 800f89c:	fb03 0004 	mla	r0, r3, r4, r0
 800f8a0:	fba2 3403 	umull	r3, r4, r2, r3
 800f8a4:	4404      	add	r4, r0
 800f8a6:	185b      	adds	r3, r3, r1
 800f8a8:	9307      	str	r3, [sp, #28]
 800f8aa:	eb44 010e 	adc.w	r1, r4, lr
 800f8ae:	9108      	str	r1, [sp, #32]
		MC2S(3)
 800f8b0:	9a01      	ldr	r2, [sp, #4]
 800f8b2:	6990      	ldr	r0, [r2, #24]
 800f8b4:	69d3      	ldr	r3, [r2, #28]
 800f8b6:	f8da 200c 	ldr.w	r2, [sl, #12]
 800f8ba:	f8da 1050 	ldr.w	r1, [sl, #80]	; 0x50
 800f8be:	17d6      	asrs	r6, r2, #31
 800f8c0:	17c4      	asrs	r4, r0, #31
 800f8c2:	9404      	str	r4, [sp, #16]
 800f8c4:	fb02 fe04 	mul.w	lr, r2, r4
 800f8c8:	fb00 e506 	mla	r5, r0, r6, lr
 800f8cc:	fba2 4e00 	umull	r4, lr, r2, r0
 800f8d0:	44ae      	add	lr, r5
 800f8d2:	eb14 0808 	adds.w	r8, r4, r8
 800f8d6:	eb4e 0e0b 	adc.w	lr, lr, fp
 800f8da:	17df      	asrs	r7, r3, #31
 800f8dc:	fb03 f606 	mul.w	r6, r3, r6
 800f8e0:	9705      	str	r7, [sp, #20]
 800f8e2:	fb02 6607 	mla	r6, r2, r7, r6
 800f8e6:	fba3 2402 	umull	r2, r4, r3, r2
 800f8ea:	4426      	add	r6, r4
 800f8ec:	9d06      	ldr	r5, [sp, #24]
 800f8ee:	1952      	adds	r2, r2, r5
 800f8f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f8f2:	eb46 0605 	adc.w	r6, r6, r5
 800f8f6:	425c      	negs	r4, r3
 800f8f8:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800f8fc:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800f900:	fb01 f509 	mul.w	r5, r1, r9
 800f904:	fb04 550c 	mla	r5, r4, ip, r5
 800f908:	fba1 7b04 	umull	r7, fp, r1, r4
 800f90c:	44ab      	add	fp, r5
 800f90e:	eb17 0808 	adds.w	r8, r7, r8
 800f912:	eb4b 0b0e 	adc.w	fp, fp, lr
 800f916:	9d04      	ldr	r5, [sp, #16]
 800f918:	fb01 f505 	mul.w	r5, r1, r5
 800f91c:	fb00 5c0c 	mla	ip, r0, ip, r5
 800f920:	fba1 1500 	umull	r1, r5, r1, r0
 800f924:	44ac      	add	ip, r5
 800f926:	1889      	adds	r1, r1, r2
 800f928:	9106      	str	r1, [sp, #24]
 800f92a:	eb4c 0c06 	adc.w	ip, ip, r6
 800f92e:	f8da 108c 	ldr.w	r1, [sl, #140]	; 0x8c
 800f932:	f8da 70d0 	ldr.w	r7, [sl, #208]	; 0xd0
 800f936:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 800f93a:	9d04      	ldr	r5, [sp, #16]
 800f93c:	fb01 f505 	mul.w	r5, r1, r5
 800f940:	fb00 550e 	mla	r5, r0, lr, r5
 800f944:	fba1 6200 	umull	r6, r2, r1, r0
 800f948:	4415      	add	r5, r2
 800f94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f94c:	18b6      	adds	r6, r6, r2
 800f94e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f950:	eb45 0502 	adc.w	r5, r5, r2
 800f954:	9a05      	ldr	r2, [sp, #20]
 800f956:	fb01 f202 	mul.w	r2, r1, r2
 800f95a:	fb03 2e0e 	mla	lr, r3, lr, r2
 800f95e:	fba1 1303 	umull	r1, r3, r1, r3
 800f962:	449e      	add	lr, r3
 800f964:	9b07      	ldr	r3, [sp, #28]
 800f966:	18c9      	adds	r1, r1, r3
 800f968:	9b08      	ldr	r3, [sp, #32]
 800f96a:	eb4e 0e03 	adc.w	lr, lr, r3
 800f96e:	17fb      	asrs	r3, r7, #31
 800f970:	fb07 f909 	mul.w	r9, r7, r9
 800f974:	fb04 9903 	mla	r9, r4, r3, r9
 800f978:	fba7 4204 	umull	r4, r2, r7, r4
 800f97c:	4491      	add	r9, r2
 800f97e:	19a6      	adds	r6, r4, r6
 800f980:	9609      	str	r6, [sp, #36]	; 0x24
 800f982:	eb49 0605 	adc.w	r6, r9, r5
 800f986:	960a      	str	r6, [sp, #40]	; 0x28
 800f988:	9d04      	ldr	r5, [sp, #16]
 800f98a:	fb07 f205 	mul.w	r2, r7, r5
 800f98e:	fb00 2203 	mla	r2, r0, r3, r2
 800f992:	fba7 0300 	umull	r0, r3, r7, r0
 800f996:	4413      	add	r3, r2
 800f998:	1840      	adds	r0, r0, r1
 800f99a:	9007      	str	r0, [sp, #28]
 800f99c:	eb43 030e 	adc.w	r3, r3, lr
 800f9a0:	9308      	str	r3, [sp, #32]
		MC2S(4)
 800f9a2:	9a01      	ldr	r2, [sp, #4]
 800f9a4:	6a13      	ldr	r3, [r2, #32]
 800f9a6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800f9a8:	f8da 2010 	ldr.w	r2, [sl, #16]
 800f9ac:	f8da 404c 	ldr.w	r4, [sl, #76]	; 0x4c
 800f9b0:	17d6      	asrs	r6, r2, #31
 800f9b2:	17d9      	asrs	r1, r3, #31
 800f9b4:	9104      	str	r1, [sp, #16]
 800f9b6:	fb02 fe01 	mul.w	lr, r2, r1
 800f9ba:	fb03 e506 	mla	r5, r3, r6, lr
 800f9be:	fba2 7e03 	umull	r7, lr, r2, r3
 800f9c2:	44ae      	add	lr, r5
 800f9c4:	eb17 0708 	adds.w	r7, r7, r8
 800f9c8:	eb4e 050b 	adc.w	r5, lr, fp
 800f9cc:	9505      	str	r5, [sp, #20]
 800f9ce:	ea4f 7ee0 	mov.w	lr, r0, asr #31
 800f9d2:	fb00 f606 	mul.w	r6, r0, r6
 800f9d6:	fb02 660e 	mla	r6, r2, lr, r6
 800f9da:	fba0 2102 	umull	r2, r1, r0, r2
 800f9de:	440e      	add	r6, r1
 800f9e0:	9d06      	ldr	r5, [sp, #24]
 800f9e2:	1952      	adds	r2, r2, r5
 800f9e4:	eb46 060c 	adc.w	r6, r6, ip
 800f9e8:	f1c0 0c00 	rsb	ip, r0, #0
 800f9ec:	17e5      	asrs	r5, r4, #31
 800f9ee:	ea4f 79ec 	mov.w	r9, ip, asr #31
 800f9f2:	fb04 f109 	mul.w	r1, r4, r9
 800f9f6:	fb0c 1105 	mla	r1, ip, r5, r1
 800f9fa:	fba4 8b0c 	umull	r8, fp, r4, ip
 800f9fe:	448b      	add	fp, r1
 800fa00:	eb18 0807 	adds.w	r8, r8, r7
 800fa04:	9f05      	ldr	r7, [sp, #20]
 800fa06:	eb4b 0b07 	adc.w	fp, fp, r7
 800fa0a:	9904      	ldr	r1, [sp, #16]
 800fa0c:	fb04 f101 	mul.w	r1, r4, r1
 800fa10:	fb03 1505 	mla	r5, r3, r5, r1
 800fa14:	fba4 4103 	umull	r4, r1, r4, r3
 800fa18:	440d      	add	r5, r1
 800fa1a:	18a7      	adds	r7, r4, r2
 800fa1c:	9706      	str	r7, [sp, #24]
 800fa1e:	eb45 0506 	adc.w	r5, r5, r6
 800fa22:	950b      	str	r5, [sp, #44]	; 0x2c
 800fa24:	f8da 1090 	ldr.w	r1, [sl, #144]	; 0x90
 800fa28:	f8da 20cc 	ldr.w	r2, [sl, #204]	; 0xcc
 800fa2c:	17cf      	asrs	r7, r1, #31
 800fa2e:	9c04      	ldr	r4, [sp, #16]
 800fa30:	fb01 f404 	mul.w	r4, r1, r4
 800fa34:	fb03 4407 	mla	r4, r3, r7, r4
 800fa38:	fba1 6503 	umull	r6, r5, r1, r3
 800fa3c:	4425      	add	r5, r4
 800fa3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fa40:	1936      	adds	r6, r6, r4
 800fa42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fa44:	eb45 0504 	adc.w	r5, r5, r4
 800fa48:	fb01 fe0e 	mul.w	lr, r1, lr
 800fa4c:	fb00 ee07 	mla	lr, r0, r7, lr
 800fa50:	fba1 1000 	umull	r1, r0, r1, r0
 800fa54:	4486      	add	lr, r0
 800fa56:	9807      	ldr	r0, [sp, #28]
 800fa58:	1809      	adds	r1, r1, r0
 800fa5a:	9808      	ldr	r0, [sp, #32]
 800fa5c:	eb4e 0e00 	adc.w	lr, lr, r0
 800fa60:	17d0      	asrs	r0, r2, #31
 800fa62:	fb02 f909 	mul.w	r9, r2, r9
 800fa66:	fb0c 9900 	mla	r9, ip, r0, r9
 800fa6a:	fba2 c40c 	umull	ip, r4, r2, ip
 800fa6e:	444c      	add	r4, r9
 800fa70:	eb1c 0606 	adds.w	r6, ip, r6
 800fa74:	9609      	str	r6, [sp, #36]	; 0x24
 800fa76:	eb44 0605 	adc.w	r6, r4, r5
 800fa7a:	960a      	str	r6, [sp, #40]	; 0x28
 800fa7c:	9c04      	ldr	r4, [sp, #16]
 800fa7e:	fb02 f404 	mul.w	r4, r2, r4
 800fa82:	fb03 4400 	mla	r4, r3, r0, r4
 800fa86:	fba2 3003 	umull	r3, r0, r2, r3
 800fa8a:	4420      	add	r0, r4
 800fa8c:	185b      	adds	r3, r3, r1
 800fa8e:	9307      	str	r3, [sp, #28]
 800fa90:	eb40 010e 	adc.w	r1, r0, lr
 800fa94:	9108      	str	r1, [sp, #32]
		MC2S(5)
 800fa96:	9a01      	ldr	r2, [sp, #4]
 800fa98:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800fa9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800fa9c:	f8da 2014 	ldr.w	r2, [sl, #20]
 800faa0:	f8da 1048 	ldr.w	r1, [sl, #72]	; 0x48
 800faa4:	17d6      	asrs	r6, r2, #31
 800faa6:	17c4      	asrs	r4, r0, #31
 800faa8:	9404      	str	r4, [sp, #16]
 800faaa:	fb02 fe04 	mul.w	lr, r2, r4
 800faae:	fb00 e406 	mla	r4, r0, r6, lr
 800fab2:	fba2 7e00 	umull	r7, lr, r2, r0
 800fab6:	44a6      	add	lr, r4
 800fab8:	eb17 0708 	adds.w	r7, r7, r8
 800fabc:	eb4e 0e0b 	adc.w	lr, lr, fp
 800fac0:	17dd      	asrs	r5, r3, #31
 800fac2:	fb03 f606 	mul.w	r6, r3, r6
 800fac6:	9505      	str	r5, [sp, #20]
 800fac8:	fb02 6605 	mla	r6, r2, r5, r6
 800facc:	fba3 2402 	umull	r2, r4, r3, r2
 800fad0:	4426      	add	r6, r4
 800fad2:	9d06      	ldr	r5, [sp, #24]
 800fad4:	1952      	adds	r2, r2, r5
 800fad6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800fad8:	eb46 0605 	adc.w	r6, r6, r5
 800fadc:	425d      	negs	r5, r3
 800fade:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800fae2:	ea4f 79e5 	mov.w	r9, r5, asr #31
 800fae6:	fb01 f409 	mul.w	r4, r1, r9
 800faea:	fb05 440c 	mla	r4, r5, ip, r4
 800faee:	fba1 8b05 	umull	r8, fp, r1, r5
 800faf2:	44a3      	add	fp, r4
 800faf4:	eb18 0807 	adds.w	r8, r8, r7
 800faf8:	eb4b 0b0e 	adc.w	fp, fp, lr
 800fafc:	9c04      	ldr	r4, [sp, #16]
 800fafe:	fb01 f404 	mul.w	r4, r1, r4
 800fb02:	fb00 4c0c 	mla	ip, r0, ip, r4
 800fb06:	fba1 1400 	umull	r1, r4, r1, r0
 800fb0a:	44a4      	add	ip, r4
 800fb0c:	188f      	adds	r7, r1, r2
 800fb0e:	9706      	str	r7, [sp, #24]
 800fb10:	eb4c 0c06 	adc.w	ip, ip, r6
 800fb14:	f8da 1094 	ldr.w	r1, [sl, #148]	; 0x94
 800fb18:	f8da 70c8 	ldr.w	r7, [sl, #200]	; 0xc8
 800fb1c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 800fb20:	9c04      	ldr	r4, [sp, #16]
 800fb22:	fb01 f404 	mul.w	r4, r1, r4
 800fb26:	fb00 440e 	mla	r4, r0, lr, r4
 800fb2a:	fba1 6200 	umull	r6, r2, r1, r0
 800fb2e:	4414      	add	r4, r2
 800fb30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb32:	18b6      	adds	r6, r6, r2
 800fb34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb36:	eb44 0402 	adc.w	r4, r4, r2
 800fb3a:	9a05      	ldr	r2, [sp, #20]
 800fb3c:	fb01 f202 	mul.w	r2, r1, r2
 800fb40:	fb03 2e0e 	mla	lr, r3, lr, r2
 800fb44:	fba1 1303 	umull	r1, r3, r1, r3
 800fb48:	449e      	add	lr, r3
 800fb4a:	9b07      	ldr	r3, [sp, #28]
 800fb4c:	18c9      	adds	r1, r1, r3
 800fb4e:	9b08      	ldr	r3, [sp, #32]
 800fb50:	eb4e 0e03 	adc.w	lr, lr, r3
 800fb54:	17fb      	asrs	r3, r7, #31
 800fb56:	fb07 f909 	mul.w	r9, r7, r9
 800fb5a:	fb05 9903 	mla	r9, r5, r3, r9
 800fb5e:	fba7 5205 	umull	r5, r2, r7, r5
 800fb62:	4491      	add	r9, r2
 800fb64:	19ad      	adds	r5, r5, r6
 800fb66:	9509      	str	r5, [sp, #36]	; 0x24
 800fb68:	eb49 0604 	adc.w	r6, r9, r4
 800fb6c:	960a      	str	r6, [sp, #40]	; 0x28
 800fb6e:	9c04      	ldr	r4, [sp, #16]
 800fb70:	fb07 f204 	mul.w	r2, r7, r4
 800fb74:	fb00 2203 	mla	r2, r0, r3, r2
 800fb78:	fba7 0300 	umull	r0, r3, r7, r0
 800fb7c:	4413      	add	r3, r2
 800fb7e:	1841      	adds	r1, r0, r1
 800fb80:	9107      	str	r1, [sp, #28]
 800fb82:	eb43 030e 	adc.w	r3, r3, lr
 800fb86:	9308      	str	r3, [sp, #32]
		MC2S(6)
 800fb88:	9a01      	ldr	r2, [sp, #4]
 800fb8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800fb8c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800fb8e:	f8da 2018 	ldr.w	r2, [sl, #24]
 800fb92:	f8da 5044 	ldr.w	r5, [sl, #68]	; 0x44
 800fb96:	17d6      	asrs	r6, r2, #31
 800fb98:	17d9      	asrs	r1, r3, #31
 800fb9a:	9104      	str	r1, [sp, #16]
 800fb9c:	fb02 fe01 	mul.w	lr, r2, r1
 800fba0:	fb03 e406 	mla	r4, r3, r6, lr
 800fba4:	fba2 7e03 	umull	r7, lr, r2, r3
 800fba8:	44a6      	add	lr, r4
 800fbaa:	eb17 0808 	adds.w	r8, r7, r8
 800fbae:	eb4e 040b 	adc.w	r4, lr, fp
 800fbb2:	9405      	str	r4, [sp, #20]
 800fbb4:	ea4f 7ee0 	mov.w	lr, r0, asr #31
 800fbb8:	fb00 f606 	mul.w	r6, r0, r6
 800fbbc:	fb02 660e 	mla	r6, r2, lr, r6
 800fbc0:	fba0 2102 	umull	r2, r1, r0, r2
 800fbc4:	440e      	add	r6, r1
 800fbc6:	9f06      	ldr	r7, [sp, #24]
 800fbc8:	19d2      	adds	r2, r2, r7
 800fbca:	eb46 060c 	adc.w	r6, r6, ip
 800fbce:	f1c0 0c00 	rsb	ip, r0, #0
 800fbd2:	17ec      	asrs	r4, r5, #31
 800fbd4:	ea4f 79ec 	mov.w	r9, ip, asr #31
 800fbd8:	fb05 f109 	mul.w	r1, r5, r9
 800fbdc:	fb0c 1104 	mla	r1, ip, r4, r1
 800fbe0:	fba5 7b0c 	umull	r7, fp, r5, ip
 800fbe4:	448b      	add	fp, r1
 800fbe6:	eb17 0808 	adds.w	r8, r7, r8
 800fbea:	9f05      	ldr	r7, [sp, #20]
 800fbec:	eb4b 0b07 	adc.w	fp, fp, r7
 800fbf0:	9904      	ldr	r1, [sp, #16]
 800fbf2:	fb05 f101 	mul.w	r1, r5, r1
 800fbf6:	fb03 1404 	mla	r4, r3, r4, r1
 800fbfa:	fba5 5103 	umull	r5, r1, r5, r3
 800fbfe:	440c      	add	r4, r1
 800fc00:	18af      	adds	r7, r5, r2
 800fc02:	9705      	str	r7, [sp, #20]
 800fc04:	eb44 0406 	adc.w	r4, r4, r6
 800fc08:	9406      	str	r4, [sp, #24]
 800fc0a:	f8da 1098 	ldr.w	r1, [sl, #152]	; 0x98
 800fc0e:	f8da 20c4 	ldr.w	r2, [sl, #196]	; 0xc4
 800fc12:	17cf      	asrs	r7, r1, #31
 800fc14:	9c04      	ldr	r4, [sp, #16]
 800fc16:	fb01 f504 	mul.w	r5, r1, r4
 800fc1a:	fb03 5507 	mla	r5, r3, r7, r5
 800fc1e:	fba1 6403 	umull	r6, r4, r1, r3
 800fc22:	442c      	add	r4, r5
 800fc24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fc26:	1976      	adds	r6, r6, r5
 800fc28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fc2a:	eb44 0405 	adc.w	r4, r4, r5
 800fc2e:	fb01 fe0e 	mul.w	lr, r1, lr
 800fc32:	fb00 ee07 	mla	lr, r0, r7, lr
 800fc36:	fba1 1000 	umull	r1, r0, r1, r0
 800fc3a:	4486      	add	lr, r0
 800fc3c:	9807      	ldr	r0, [sp, #28]
 800fc3e:	1809      	adds	r1, r1, r0
 800fc40:	9808      	ldr	r0, [sp, #32]
 800fc42:	eb4e 0e00 	adc.w	lr, lr, r0
 800fc46:	17d0      	asrs	r0, r2, #31
 800fc48:	fb02 f909 	mul.w	r9, r2, r9
 800fc4c:	fb0c 9900 	mla	r9, ip, r0, r9
 800fc50:	fba2 c50c 	umull	ip, r5, r2, ip
 800fc54:	444d      	add	r5, r9
 800fc56:	eb1c 0606 	adds.w	r6, ip, r6
 800fc5a:	960a      	str	r6, [sp, #40]	; 0x28
 800fc5c:	eb45 0504 	adc.w	r5, r5, r4
 800fc60:	950b      	str	r5, [sp, #44]	; 0x2c
 800fc62:	9c04      	ldr	r4, [sp, #16]
 800fc64:	fb02 f404 	mul.w	r4, r2, r4
 800fc68:	fb03 4400 	mla	r4, r3, r0, r4
 800fc6c:	fba2 3003 	umull	r3, r0, r2, r3
 800fc70:	4420      	add	r0, r4
 800fc72:	185b      	adds	r3, r3, r1
 800fc74:	9308      	str	r3, [sp, #32]
 800fc76:	eb40 010e 	adc.w	r1, r0, lr
 800fc7a:	9109      	str	r1, [sp, #36]	; 0x24
		MC2S(7)
 800fc7c:	9a01      	ldr	r2, [sp, #4]
 800fc7e:	6b94      	ldr	r4, [r2, #56]	; 0x38
 800fc80:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800fc82:	3240      	adds	r2, #64	; 0x40
 800fc84:	9201      	str	r2, [sp, #4]
 800fc86:	f8da 201c 	ldr.w	r2, [sl, #28]
 800fc8a:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 800fc8e:	17d6      	asrs	r6, r2, #31
 800fc90:	17e7      	asrs	r7, r4, #31
 800fc92:	9704      	str	r7, [sp, #16]
 800fc94:	fb02 fe07 	mul.w	lr, r2, r7
 800fc98:	fb04 e006 	mla	r0, r4, r6, lr
 800fc9c:	fba2 7e04 	umull	r7, lr, r2, r4
 800fca0:	4486      	add	lr, r0
 800fca2:	eb17 0708 	adds.w	r7, r7, r8
 800fca6:	eb4e 0e0b 	adc.w	lr, lr, fp
 800fcaa:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800fcae:	fb03 f606 	mul.w	r6, r3, r6
 800fcb2:	fb02 6608 	mla	r6, r2, r8, r6
 800fcb6:	fba3 2002 	umull	r2, r0, r3, r2
 800fcba:	4406      	add	r6, r0
 800fcbc:	9805      	ldr	r0, [sp, #20]
 800fcbe:	1812      	adds	r2, r2, r0
 800fcc0:	9207      	str	r2, [sp, #28]
 800fcc2:	9806      	ldr	r0, [sp, #24]
 800fcc4:	eb46 0600 	adc.w	r6, r6, r0
 800fcc8:	4258      	negs	r0, r3
 800fcca:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800fcce:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800fcd2:	fb01 f509 	mul.w	r5, r1, r9
 800fcd6:	fb00 550c 	mla	r5, r0, ip, r5
 800fcda:	fba1 2b00 	umull	r2, fp, r1, r0
 800fcde:	445d      	add	r5, fp
 800fce0:	19d2      	adds	r2, r2, r7
 800fce2:	9205      	str	r2, [sp, #20]
 800fce4:	eb45 020e 	adc.w	r2, r5, lr
 800fce8:	9206      	str	r2, [sp, #24]
 800fcea:	9f04      	ldr	r7, [sp, #16]
 800fcec:	fb01 f507 	mul.w	r5, r1, r7
 800fcf0:	fb04 5c0c 	mla	ip, r4, ip, r5
 800fcf4:	fba1 b104 	umull	fp, r1, r1, r4
 800fcf8:	448c      	add	ip, r1
 800fcfa:	9a07      	ldr	r2, [sp, #28]
 800fcfc:	eb1b 0b02 	adds.w	fp, fp, r2
 800fd00:	eb4c 0606 	adc.w	r6, ip, r6
 800fd04:	f8da 109c 	ldr.w	r1, [sl, #156]	; 0x9c
 800fd08:	f8da 20c0 	ldr.w	r2, [sl, #192]	; 0xc0
 800fd0c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 800fd10:	fb01 f707 	mul.w	r7, r1, r7
 800fd14:	fb04 770e 	mla	r7, r4, lr, r7
 800fd18:	fba1 c504 	umull	ip, r5, r1, r4
 800fd1c:	443d      	add	r5, r7
 800fd1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800fd20:	eb1c 0c07 	adds.w	ip, ip, r7
 800fd24:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800fd26:	eb45 0507 	adc.w	r5, r5, r7
 800fd2a:	fb01 f708 	mul.w	r7, r1, r8
 800fd2e:	fb03 7e0e 	mla	lr, r3, lr, r7
 800fd32:	fba1 8303 	umull	r8, r3, r1, r3
 800fd36:	449e      	add	lr, r3
 800fd38:	9b08      	ldr	r3, [sp, #32]
 800fd3a:	eb18 0803 	adds.w	r8, r8, r3
 800fd3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd40:	eb4e 0e01 	adc.w	lr, lr, r1
 800fd44:	17d3      	asrs	r3, r2, #31
 800fd46:	fb02 f909 	mul.w	r9, r2, r9
 800fd4a:	fb00 9903 	mla	r9, r0, r3, r9
 800fd4e:	fba2 0700 	umull	r0, r7, r2, r0
 800fd52:	44b9      	add	r9, r7
 800fd54:	eb10 0c0c 	adds.w	ip, r0, ip
 800fd58:	eb49 0505 	adc.w	r5, r9, r5
 800fd5c:	9f04      	ldr	r7, [sp, #16]
 800fd5e:	fb02 f107 	mul.w	r1, r2, r7
 800fd62:	fb04 1303 	mla	r3, r4, r3, r1
 800fd66:	fba2 2404 	umull	r2, r4, r2, r4
 800fd6a:	4423      	add	r3, r4
 800fd6c:	eb12 0208 	adds.w	r2, r2, r8
 800fd70:	eb43 030e 	adc.w	r3, r3, lr
		vb1 += 64;
 800fd74:	f50a 7a80 	add.w	sl, sl, #256	; 0x100
  return x >> n;
 800fd78:	9905      	ldr	r1, [sp, #20]
 800fd7a:	0d0f      	lsrs	r7, r1, #20
 800fd7c:	9906      	ldr	r1, [sp, #24]
 800fd7e:	ea47 3701 	orr.w	r7, r7, r1, lsl #12
	x >>= fracBits;
 800fd82:	11b9      	asrs	r1, r7, #6
	sign = x >> 31;
 800fd84:	17fc      	asrs	r4, r7, #31
	if (sign != (x >> 15))
 800fd86:	1578      	asrs	r0, r7, #21
 800fd88:	ebb0 7fe7 	cmp.w	r0, r7, asr #31
 800fd8c:	d002      	beq.n	800fd94 <xmp3fixpt_PolyphaseStereo+0xe44>
		x = sign ^ ((1 << 15) - 1);
 800fd8e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fd92:	4061      	eors	r1, r4
		*(pcm + 0)         = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
 800fd94:	9802      	ldr	r0, [sp, #8]
 800fd96:	8001      	strh	r1, [r0, #0]
 800fd98:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
 800fd9c:	ea4c 3c05 	orr.w	ip, ip, r5, lsl #12
	x >>= fracBits;
 800fda0:	ea4f 11ac 	mov.w	r1, ip, asr #6
	sign = x >> 31;
 800fda4:	ea4f 74ec 	mov.w	r4, ip, asr #31
	if (sign != (x >> 15))
 800fda8:	ea4f 506c 	mov.w	r0, ip, asr #21
 800fdac:	ebb0 7fec 	cmp.w	r0, ip, asr #31
 800fdb0:	d002      	beq.n	800fdb8 <xmp3fixpt_PolyphaseStereo+0xe68>
		x = sign ^ ((1 << 15) - 1);
 800fdb2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fdb6:	4061      	eors	r1, r4
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
 800fdb8:	9802      	ldr	r0, [sp, #8]
 800fdba:	8041      	strh	r1, [r0, #2]
 800fdbc:	ea4f 5b1b 	mov.w	fp, fp, lsr #20
 800fdc0:	ea4b 3b06 	orr.w	fp, fp, r6, lsl #12
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800fdc4:	9c03      	ldr	r4, [sp, #12]
 800fdc6:	00e1      	lsls	r1, r4, #3
 800fdc8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	x >>= fracBits;
 800fdcc:	ea4f 10ab 	mov.w	r0, fp, asr #6
	sign = x >> 31;
 800fdd0:	ea4f 76eb 	mov.w	r6, fp, asr #31
	if (sign != (x >> 15))
 800fdd4:	ea4f 556b 	mov.w	r5, fp, asr #21
 800fdd8:	ebb5 7feb 	cmp.w	r5, fp, asr #31
 800fddc:	d002      	beq.n	800fde4 <xmp3fixpt_PolyphaseStereo+0xe94>
		x = sign ^ ((1 << 15) - 1);
 800fdde:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800fde2:	4070      	eors	r0, r6
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
 800fde4:	8020      	strh	r0, [r4, #0]
 800fde6:	0d12      	lsrs	r2, r2, #20
 800fde8:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
 800fdec:	1c8b      	adds	r3, r1, #2
 800fdee:	9902      	ldr	r1, [sp, #8]
 800fdf0:	440b      	add	r3, r1
	x >>= fracBits;
 800fdf2:	1191      	asrs	r1, r2, #6
	sign = x >> 31;
 800fdf4:	17d4      	asrs	r4, r2, #31
	if (sign != (x >> 15))
 800fdf6:	1550      	asrs	r0, r2, #21
 800fdf8:	ebb0 7fe2 	cmp.w	r0, r2, asr #31
 800fdfc:	f43f abe4 	beq.w	800f5c8 <xmp3fixpt_PolyphaseStereo+0x678>
		x = sign ^ ((1 << 15) - 1);
 800fe00:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fe04:	4061      	eors	r1, r4
 800fe06:	f7ff bbdf 	b.w	800f5c8 <xmp3fixpt_PolyphaseStereo+0x678>
	}
}
 800fe0a:	b00d      	add	sp, #52	; 0x34
 800fe0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe10 <UnpackSFMPEG1>:
 *                so that we index through consectutive memory locations when unpacking 
 *                (make sure dequantizer follows same convention)
 *              Illegal Intensity Position = 7 (always) for MPEG1 scale factors
 **************************************************************************************/
static void UnpackSFMPEG1(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int *scfsi, int gr, ScaleFactorInfoSub *sfisGr0)
{
 800fe10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe14:	4605      	mov	r5, r0
 800fe16:	4616      	mov	r6, r2
 800fe18:	469a      	mov	sl, r3
 800fe1a:	9c08      	ldr	r4, [sp, #32]
 800fe1c:	9f09      	ldr	r7, [sp, #36]	; 0x24
	int sfb;
	int slen0, slen1;
	
	/* these can be 0, so make sure GetBits(bsi, 0) returns 0 (no >> 32 or anything) */
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 800fe1e:	68ca      	ldr	r2, [r1, #12]
 800fe20:	4b57      	ldr	r3, [pc, #348]	; (800ff80 <UnpackSFMPEG1+0x170>)
 800fe22:	f813 8012 	ldrb.w	r8, [r3, r2, lsl #1]
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 800fe26:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800fe2a:	f893 9001 	ldrb.w	r9, [r3, #1]
	
	if (sis->blockType == 2) {
 800fe2e:	694b      	ldr	r3, [r1, #20]
 800fe30:	2b02      	cmp	r3, #2
 800fe32:	d007      	beq.n	800fe44 <UnpackSFMPEG1+0x34>

		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
	} else {
		/* long blocks, type 0, 1, or 3 */
		if(gr == 0) {
 800fe34:	2c00      	cmp	r4, #0
 800fe36:	d04c      	beq.n	800fed2 <UnpackSFMPEG1+0xc2>
			/* second granule
			 * scfsi: 0 = different scalefactors for each granule, 1 = copy sf's from granule 0 into granule 1 
			 * for block type == 2, scfsi is always 0
			 */
			sfb = 0;
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800fe38:	f8da 4000 	ldr.w	r4, [sl]
 800fe3c:	2c00      	cmp	r4, #0
 800fe3e:	d064      	beq.n	800ff0a <UnpackSFMPEG1+0xfa>
			sfb = 0;
 800fe40:	2400      	movs	r4, #0
 800fe42:	e056      	b.n	800fef2 <UnpackSFMPEG1+0xe2>
		if (sis->mixedBlock) {          
 800fe44:	698c      	ldr	r4, [r1, #24]
 800fe46:	b1f4      	cbz	r4, 800fe86 <UnpackSFMPEG1+0x76>
			for (sfb = 0; sfb < 8; sfb++)
 800fe48:	2400      	movs	r4, #0
 800fe4a:	e005      	b.n	800fe58 <UnpackSFMPEG1+0x48>
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 800fe4c:	4641      	mov	r1, r8
 800fe4e:	4628      	mov	r0, r5
 800fe50:	f7fb ff3c 	bl	800bccc <xmp3fixpt_GetBits>
 800fe54:	5530      	strb	r0, [r6, r4]
			for (sfb = 0; sfb < 8; sfb++)
 800fe56:	3401      	adds	r4, #1
 800fe58:	2c07      	cmp	r4, #7
 800fe5a:	ddf7      	ble.n	800fe4c <UnpackSFMPEG1+0x3c>
			sfb = 3;
 800fe5c:	2403      	movs	r4, #3
 800fe5e:	e012      	b.n	800fe86 <UnpackSFMPEG1+0x76>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 800fe60:	4641      	mov	r1, r8
 800fe62:	4628      	mov	r0, r5
 800fe64:	f7fb ff32 	bl	800bccc <xmp3fixpt_GetBits>
 800fe68:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800fe6c:	4437      	add	r7, r6
 800fe6e:	75f8      	strb	r0, [r7, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 800fe70:	4641      	mov	r1, r8
 800fe72:	4628      	mov	r0, r5
 800fe74:	f7fb ff2a 	bl	800bccc <xmp3fixpt_GetBits>
 800fe78:	7638      	strb	r0, [r7, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 800fe7a:	4641      	mov	r1, r8
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f7fb ff25 	bl	800bccc <xmp3fixpt_GetBits>
 800fe82:	7678      	strb	r0, [r7, #25]
		for (      ; sfb < 6; sfb++) {
 800fe84:	3401      	adds	r4, #1
 800fe86:	2c05      	cmp	r4, #5
 800fe88:	ddea      	ble.n	800fe60 <UnpackSFMPEG1+0x50>
 800fe8a:	e012      	b.n	800feb2 <UnpackSFMPEG1+0xa2>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 800fe8c:	4649      	mov	r1, r9
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f7fb ff1c 	bl	800bccc <xmp3fixpt_GetBits>
 800fe94:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800fe98:	4437      	add	r7, r6
 800fe9a:	75f8      	strb	r0, [r7, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 800fe9c:	4649      	mov	r1, r9
 800fe9e:	4628      	mov	r0, r5
 800fea0:	f7fb ff14 	bl	800bccc <xmp3fixpt_GetBits>
 800fea4:	7638      	strb	r0, [r7, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 800fea6:	4649      	mov	r1, r9
 800fea8:	4628      	mov	r0, r5
 800feaa:	f7fb ff0f 	bl	800bccc <xmp3fixpt_GetBits>
 800feae:	7678      	strb	r0, [r7, #25]
		for (      ; sfb < 12; sfb++) {
 800feb0:	3401      	adds	r4, #1
 800feb2:	2c0b      	cmp	r4, #11
 800feb4:	ddea      	ble.n	800fe8c <UnpackSFMPEG1+0x7c>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 800feb6:	2300      	movs	r3, #0
 800feb8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
 800febc:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 800fec0:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
 800fec4:	e050      	b.n	800ff68 <UnpackSFMPEG1+0x158>
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 800fec6:	4641      	mov	r1, r8
 800fec8:	4628      	mov	r0, r5
 800feca:	f7fb feff 	bl	800bccc <xmp3fixpt_GetBits>
 800fece:	5530      	strb	r0, [r6, r4]
			for (sfb = 0;  sfb < 11; sfb++) 
 800fed0:	3401      	adds	r4, #1
 800fed2:	2c0a      	cmp	r4, #10
 800fed4:	ddf7      	ble.n	800fec6 <UnpackSFMPEG1+0xb6>
			for (sfb = 11; sfb < 21; sfb++) 
 800fed6:	240b      	movs	r4, #11
 800fed8:	e005      	b.n	800fee6 <UnpackSFMPEG1+0xd6>
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 800feda:	4649      	mov	r1, r9
 800fedc:	4628      	mov	r0, r5
 800fede:	f7fb fef5 	bl	800bccc <xmp3fixpt_GetBits>
 800fee2:	5530      	strb	r0, [r6, r4]
			for (sfb = 11; sfb < 21; sfb++) 
 800fee4:	3401      	adds	r4, #1
 800fee6:	2c14      	cmp	r4, #20
 800fee8:	ddf7      	ble.n	800feda <UnpackSFMPEG1+0xca>
 800feea:	e03d      	b.n	800ff68 <UnpackSFMPEG1+0x158>
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800feec:	5d3b      	ldrb	r3, [r7, r4]
 800feee:	5533      	strb	r3, [r6, r4]
 800fef0:	3401      	adds	r4, #1
 800fef2:	2c05      	cmp	r4, #5
 800fef4:	ddfa      	ble.n	800feec <UnpackSFMPEG1+0xdc>
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800fef6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fefa:	b963      	cbnz	r3, 800ff16 <UnpackSFMPEG1+0x106>
 800fefc:	e017      	b.n	800ff2e <UnpackSFMPEG1+0x11e>
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 800fefe:	4641      	mov	r1, r8
 800ff00:	4628      	mov	r0, r5
 800ff02:	f7fb fee3 	bl	800bccc <xmp3fixpt_GetBits>
 800ff06:	5530      	strb	r0, [r6, r4]
 800ff08:	3401      	adds	r4, #1
 800ff0a:	2c05      	cmp	r4, #5
 800ff0c:	ddf7      	ble.n	800fefe <UnpackSFMPEG1+0xee>
 800ff0e:	e7f2      	b.n	800fef6 <UnpackSFMPEG1+0xe6>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800ff10:	5d3b      	ldrb	r3, [r7, r4]
 800ff12:	5533      	strb	r3, [r6, r4]
 800ff14:	3401      	adds	r4, #1
 800ff16:	2c0a      	cmp	r4, #10
 800ff18:	ddfa      	ble.n	800ff10 <UnpackSFMPEG1+0x100>
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800ff1a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ff1e:	b963      	cbnz	r3, 800ff3a <UnpackSFMPEG1+0x12a>
 800ff20:	e017      	b.n	800ff52 <UnpackSFMPEG1+0x142>
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 800ff22:	4641      	mov	r1, r8
 800ff24:	4628      	mov	r0, r5
 800ff26:	f7fb fed1 	bl	800bccc <xmp3fixpt_GetBits>
 800ff2a:	5530      	strb	r0, [r6, r4]
 800ff2c:	3401      	adds	r4, #1
 800ff2e:	2c0a      	cmp	r4, #10
 800ff30:	ddf7      	ble.n	800ff22 <UnpackSFMPEG1+0x112>
 800ff32:	e7f2      	b.n	800ff1a <UnpackSFMPEG1+0x10a>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800ff34:	5d3b      	ldrb	r3, [r7, r4]
 800ff36:	5533      	strb	r3, [r6, r4]
 800ff38:	3401      	adds	r4, #1
 800ff3a:	2c0f      	cmp	r4, #15
 800ff3c:	ddfa      	ble.n	800ff34 <UnpackSFMPEG1+0x124>
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800ff3e:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ff42:	b963      	cbnz	r3, 800ff5e <UnpackSFMPEG1+0x14e>
 800ff44:	e018      	b.n	800ff78 <UnpackSFMPEG1+0x168>
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 800ff46:	4649      	mov	r1, r9
 800ff48:	4628      	mov	r0, r5
 800ff4a:	f7fb febf 	bl	800bccc <xmp3fixpt_GetBits>
 800ff4e:	5530      	strb	r0, [r6, r4]
 800ff50:	3401      	adds	r4, #1
 800ff52:	2c0f      	cmp	r4, #15
 800ff54:	ddf7      	ble.n	800ff46 <UnpackSFMPEG1+0x136>
 800ff56:	e7f2      	b.n	800ff3e <UnpackSFMPEG1+0x12e>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 800ff58:	5d3b      	ldrb	r3, [r7, r4]
 800ff5a:	5533      	strb	r3, [r6, r4]
 800ff5c:	3401      	adds	r4, #1
 800ff5e:	2c14      	cmp	r4, #20
 800ff60:	ddfa      	ble.n	800ff58 <UnpackSFMPEG1+0x148>
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
		}
		/* last sf band not transmitted */
		sfis->l[21] = 0;
 800ff62:	2300      	movs	r3, #0
 800ff64:	7573      	strb	r3, [r6, #21]
		sfis->l[22] = 0;
 800ff66:	75b3      	strb	r3, [r6, #22]
	}
}
 800ff68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 800ff6c:	4649      	mov	r1, r9
 800ff6e:	4628      	mov	r0, r5
 800ff70:	f7fb feac 	bl	800bccc <xmp3fixpt_GetBits>
 800ff74:	5530      	strb	r0, [r6, r4]
 800ff76:	3401      	adds	r4, #1
 800ff78:	2c14      	cmp	r4, #20
 800ff7a:	ddf7      	ble.n	800ff6c <UnpackSFMPEG1+0x15c>
 800ff7c:	e7f1      	b.n	800ff62 <UnpackSFMPEG1+0x152>
 800ff7e:	bf00      	nop
 800ff80:	0801cd1c 	.word	0x0801cd1c

0800ff84 <UnpackSFMPEG2>:
 *
 * TODO:        optimize the / and % stuff (only do one divide, get modulo x 
 *                with (x / m) * m, etc.)
 **************************************************************************************/
static void UnpackSFMPEG2(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int gr, int ch, int modeExt, ScaleFactorJS *sfjs)
{
 800ff84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff88:	b088      	sub	sp, #32
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	4617      	mov	r7, r2
 800ff8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ff90:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48

	int i, sfb, sfcIdx, btIdx, nrIdx, iipTest;
	int slen[4], nr[4];
	int sfCompress, preFlag, intensityScale;
	
	sfCompress = sis->sfCompress;
 800ff94:	68cb      	ldr	r3, [r1, #12]
	preFlag = 0;
	intensityScale = 0;

	/* stereo mode bits (1 = on): bit 1 = mid-side on/off, bit 0 = intensity on/off */
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 800ff96:	f012 0c01 	ands.w	ip, r2, #1
 800ff9a:	d002      	beq.n	800ffa2 <UnpackSFMPEG2+0x1e>
 800ff9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff9e:	2a01      	cmp	r2, #1
 800ffa0:	d053      	beq.n	801004a <UnpackSFMPEG2+0xc6>
		/* in other words: if ((modeExt & 0x01) == 0 || ch == 0) */
		if (sfCompress < 400) {
 800ffa2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ffa6:	da1b      	bge.n	800ffe0 <UnpackSFMPEG2+0x5c>
			/* max slen = floor[(399/16) / 5] = 4 */
			slen[0] = (sfCompress >> 4) / 5;
 800ffa8:	1118      	asrs	r0, r3, #4
 800ffaa:	4c9a      	ldr	r4, [pc, #616]	; (8010214 <UnpackSFMPEG2+0x290>)
 800ffac:	fb84 2400 	smull	r2, r4, r4, r0
 800ffb0:	17da      	asrs	r2, r3, #31
 800ffb2:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 800ffb6:	9204      	str	r2, [sp, #16]
			slen[1]= (sfCompress >> 4) % 5;
 800ffb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ffbc:	1a82      	subs	r2, r0, r2
 800ffbe:	9205      	str	r2, [sp, #20]
			slen[2]= (sfCompress & 0x0f) >> 2;
 800ffc0:	f3c3 0281 	ubfx	r2, r3, #2, #2
 800ffc4:	9206      	str	r2, [sp, #24]
			slen[3]= (sfCompress & 0x03);
 800ffc6:	f003 0303 	and.w	r3, r3, #3
 800ffca:	9307      	str	r3, [sp, #28]
	intensityScale = 0;
 800ffcc:	f04f 0900 	mov.w	r9, #0
	preFlag = 0;
 800ffd0:	46ce      	mov	lr, r9
			sfcIdx = 0;
 800ffd2:	464c      	mov	r4, r9
		}
	}
	
	/* set index based on block type: (0,1,3) --> 0, (2 non-mixed) --> 1, (2 mixed) ---> 2 */
	btIdx = 0;
	if (sis->blockType == 2) 
 800ffd4:	694d      	ldr	r5, [r1, #20]
 800ffd6:	2d02      	cmp	r5, #2
 800ffd8:	d07e      	beq.n	80100d8 <UnpackSFMPEG2+0x154>
	btIdx = 0;
 800ffda:	2500      	movs	r5, #0
		btIdx = (sis->mixedBlock ? 2 : 1);
	for (i = 0; i < 4; i++)
 800ffdc:	2300      	movs	r3, #0
 800ffde:	e08e      	b.n	80100fe <UnpackSFMPEG2+0x17a>
		} else if (sfCompress < 500) {
 800ffe0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ffe4:	da16      	bge.n	8010014 <UnpackSFMPEG2+0x90>
			sfCompress -= 400;
 800ffe6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
			slen[0] = (sfCompress >> 2) / 5;
 800ffea:	1098      	asrs	r0, r3, #2
 800ffec:	4c89      	ldr	r4, [pc, #548]	; (8010214 <UnpackSFMPEG2+0x290>)
 800ffee:	fb84 2400 	smull	r2, r4, r4, r0
 800fff2:	17da      	asrs	r2, r3, #31
 800fff4:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 800fff8:	9204      	str	r2, [sp, #16]
			slen[1]= (sfCompress >> 2) % 5;
 800fffa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800fffe:	1a82      	subs	r2, r0, r2
 8010000:	9205      	str	r2, [sp, #20]
			slen[2]= (sfCompress & 0x03);
 8010002:	f003 0303 	and.w	r3, r3, #3
 8010006:	9306      	str	r3, [sp, #24]
			slen[3]= 0;
 8010008:	2300      	movs	r3, #0
 801000a:	9307      	str	r3, [sp, #28]
	intensityScale = 0;
 801000c:	4699      	mov	r9, r3
	preFlag = 0;
 801000e:	469e      	mov	lr, r3
			sfcIdx = 1;
 8010010:	2401      	movs	r4, #1
 8010012:	e7df      	b.n	800ffd4 <UnpackSFMPEG2+0x50>
			sfCompress -= 500;
 8010014:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
			slen[0] = sfCompress / 3;
 8010018:	4a7f      	ldr	r2, [pc, #508]	; (8010218 <UnpackSFMPEG2+0x294>)
 801001a:	fb82 0203 	smull	r0, r2, r2, r3
 801001e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010022:	9204      	str	r2, [sp, #16]
			slen[1] = sfCompress % 3;
 8010024:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8010028:	1a1b      	subs	r3, r3, r0
 801002a:	9305      	str	r3, [sp, #20]
			slen[2] = slen[3] = 0;
 801002c:	2000      	movs	r0, #0
 801002e:	9007      	str	r0, [sp, #28]
 8010030:	9006      	str	r0, [sp, #24]
			if (sis->mixedBlock) {
 8010032:	f8d1 9018 	ldr.w	r9, [r1, #24]
 8010036:	f1b9 0f00 	cmp.w	r9, #0
 801003a:	d049      	beq.n	80100d0 <UnpackSFMPEG2+0x14c>
				slen[2] = slen[1];  
 801003c:	9306      	str	r3, [sp, #24]
				slen[1] = slen[0];
 801003e:	9205      	str	r2, [sp, #20]
	intensityScale = 0;
 8010040:	4681      	mov	r9, r0
			preFlag = 1;
 8010042:	f04f 0e01 	mov.w	lr, #1
			sfcIdx = 2;
 8010046:	2402      	movs	r4, #2
 8010048:	e7c4      	b.n	800ffd4 <UnpackSFMPEG2+0x50>
		intensityScale = sfCompress & 0x01;
 801004a:	f003 0901 	and.w	r9, r3, #1
		sfCompress >>= 1;
 801004e:	105a      	asrs	r2, r3, #1
		if (sfCompress < 180) {
 8010050:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010054:	da1a      	bge.n	801008c <UnpackSFMPEG2+0x108>
			slen[0] = (sfCompress / 36);
 8010056:	4871      	ldr	r0, [pc, #452]	; (801021c <UnpackSFMPEG2+0x298>)
 8010058:	fb80 3002 	smull	r3, r0, r0, r2
 801005c:	17d3      	asrs	r3, r2, #31
 801005e:	ebc3 03e0 	rsb	r3, r3, r0, asr #3
 8010062:	9304      	str	r3, [sp, #16]
			slen[1] = (sfCompress % 36) / 6;
 8010064:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8010068:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
 801006c:	4b6c      	ldr	r3, [pc, #432]	; (8010220 <UnpackSFMPEG2+0x29c>)
 801006e:	fb83 0302 	smull	r0, r3, r3, r2
 8010072:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8010076:	9305      	str	r3, [sp, #20]
			slen[2] = (sfCompress % 36) % 6;
 8010078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801007c:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
 8010080:	9206      	str	r2, [sp, #24]
			slen[3] = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	9307      	str	r3, [sp, #28]
	preFlag = 0;
 8010086:	469e      	mov	lr, r3
			sfcIdx = 3;
 8010088:	2403      	movs	r4, #3
 801008a:	e7a3      	b.n	800ffd4 <UnpackSFMPEG2+0x50>
		} else if (sfCompress < 244) {
 801008c:	2af3      	cmp	r2, #243	; 0xf3
 801008e:	dc0e      	bgt.n	80100ae <UnpackSFMPEG2+0x12a>
			sfCompress -= 180;
 8010090:	3ab4      	subs	r2, #180	; 0xb4
			slen[0] = (sfCompress & 0x3f) >> 4;
 8010092:	f3c2 1301 	ubfx	r3, r2, #4, #2
 8010096:	9304      	str	r3, [sp, #16]
			slen[1] = (sfCompress & 0x0f) >> 2;
 8010098:	f3c2 0381 	ubfx	r3, r2, #2, #2
 801009c:	9305      	str	r3, [sp, #20]
			slen[2] = (sfCompress & 0x03);
 801009e:	f002 0203 	and.w	r2, r2, #3
 80100a2:	9206      	str	r2, [sp, #24]
			slen[3] = 0;
 80100a4:	2300      	movs	r3, #0
 80100a6:	9307      	str	r3, [sp, #28]
	preFlag = 0;
 80100a8:	469e      	mov	lr, r3
			sfcIdx = 4;
 80100aa:	2404      	movs	r4, #4
 80100ac:	e792      	b.n	800ffd4 <UnpackSFMPEG2+0x50>
			sfCompress -= 244;
 80100ae:	3af4      	subs	r2, #244	; 0xf4
			slen[0] = (sfCompress / 3);
 80100b0:	4b59      	ldr	r3, [pc, #356]	; (8010218 <UnpackSFMPEG2+0x294>)
 80100b2:	fb83 0302 	smull	r0, r3, r3, r2
 80100b6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80100ba:	9304      	str	r3, [sp, #16]
			slen[1] = (sfCompress % 3);
 80100bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80100c0:	1ad2      	subs	r2, r2, r3
 80100c2:	9205      	str	r2, [sp, #20]
			slen[2] = slen[3] = 0;
 80100c4:	2300      	movs	r3, #0
 80100c6:	9307      	str	r3, [sp, #28]
 80100c8:	9306      	str	r3, [sp, #24]
	preFlag = 0;
 80100ca:	469e      	mov	lr, r3
			sfcIdx = 5;
 80100cc:	2405      	movs	r4, #5
 80100ce:	e781      	b.n	800ffd4 <UnpackSFMPEG2+0x50>
			preFlag = 1;
 80100d0:	f04f 0e01 	mov.w	lr, #1
			sfcIdx = 2;
 80100d4:	2402      	movs	r4, #2
 80100d6:	e77d      	b.n	800ffd4 <UnpackSFMPEG2+0x50>
		btIdx = (sis->mixedBlock ? 2 : 1);
 80100d8:	698b      	ldr	r3, [r1, #24]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f47f af7e 	bne.w	800ffdc <UnpackSFMPEG2+0x58>
 80100e0:	2501      	movs	r5, #1
 80100e2:	e77b      	b.n	800ffdc <UnpackSFMPEG2+0x58>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 80100e4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80100e8:	1950      	adds	r0, r2, r5
 80100ea:	4a4e      	ldr	r2, [pc, #312]	; (8010224 <UnpackSFMPEG2+0x2a0>)
 80100ec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80100f0:	5cd0      	ldrb	r0, [r2, r3]
 80100f2:	aa08      	add	r2, sp, #32
 80100f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80100f8:	f842 0c20 	str.w	r0, [r2, #-32]
	for (i = 0; i < 4; i++)
 80100fc:	3301      	adds	r3, #1
 80100fe:	2b03      	cmp	r3, #3
 8010100:	ddf0      	ble.n	80100e4 <UnpackSFMPEG2+0x160>

	/* save intensity stereo scale factor info */
	if( (modeExt & 0x01) && (ch == 1) ) {
 8010102:	f1bc 0f00 	cmp.w	ip, #0
 8010106:	d002      	beq.n	801010e <UnpackSFMPEG2+0x18a>
 8010108:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801010a:	2b01      	cmp	r3, #1
 801010c:	d01c      	beq.n	8010148 <UnpackSFMPEG2+0x1c4>
			sfjs->slen[i] = slen[i];
			sfjs->nr[i] = nr[i];
		}
		sfjs->intensityScale = intensityScale;
	}
	sis->preFlag = preFlag;
 801010e:	f8c1 e03c 	str.w	lr, [r1, #60]	; 0x3c

	/* short blocks */
	if(sis->blockType == 2) {
 8010112:	694b      	ldr	r3, [r1, #20]
 8010114:	2b02      	cmp	r3, #2
 8010116:	d019      	beq.n	801014c <UnpackSFMPEG2+0x1c8>
		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
	} else {
		/* long blocks */
		sfb = 0;
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 8010118:	f04f 0800 	mov.w	r8, #0
		sfb = 0;
 801011c:	4645      	mov	r5, r8
 801011e:	e069      	b.n	80101f4 <UnpackSFMPEG2+0x270>
			sfjs->slen[i] = slen[i];
 8010120:	aa08      	add	r2, sp, #32
 8010122:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8010126:	f850 2c10 	ldr.w	r2, [r0, #-16]
 801012a:	eb08 0483 	add.w	r4, r8, r3, lsl #2
 801012e:	6062      	str	r2, [r4, #4]
			sfjs->nr[i] = nr[i];
 8010130:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8010134:	1d1a      	adds	r2, r3, #4
 8010136:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 801013a:	6050      	str	r0, [r2, #4]
		for (i = 0; i < 4; i++) {
 801013c:	3301      	adds	r3, #1
 801013e:	2b03      	cmp	r3, #3
 8010140:	ddee      	ble.n	8010120 <UnpackSFMPEG2+0x19c>
		sfjs->intensityScale = intensityScale;
 8010142:	f8c8 9000 	str.w	r9, [r8]
 8010146:	e7e2      	b.n	801010e <UnpackSFMPEG2+0x18a>
		for (i = 0; i < 4; i++) {
 8010148:	2300      	movs	r3, #0
 801014a:	e7f8      	b.n	801013e <UnpackSFMPEG2+0x1ba>
		if(sis->mixedBlock) {
 801014c:	698d      	ldr	r5, [r1, #24]
 801014e:	b3bd      	cbz	r5, 80101c0 <UnpackSFMPEG2+0x23c>
			iipTest = (1 << slen[0]) - 1;
 8010150:	9d04      	ldr	r5, [sp, #16]
			for (sfb=0; sfb < 6; sfb++) {
 8010152:	2400      	movs	r4, #0
 8010154:	e005      	b.n	8010162 <UnpackSFMPEG2+0x1de>
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 8010156:	4629      	mov	r1, r5
 8010158:	4630      	mov	r0, r6
 801015a:	f7fb fdb7 	bl	800bccc <xmp3fixpt_GetBits>
 801015e:	5538      	strb	r0, [r7, r4]
			for (sfb=0; sfb < 6; sfb++) {
 8010160:	3401      	adds	r4, #1
 8010162:	2c05      	cmp	r4, #5
 8010164:	ddf7      	ble.n	8010156 <UnpackSFMPEG2+0x1d2>
			nrIdx = 1;
 8010166:	f04f 0a01 	mov.w	sl, #1
			sfb = 3;  /* start sfb for short */
 801016a:	2503      	movs	r5, #3
 801016c:	e01d      	b.n	80101aa <UnpackSFMPEG2+0x226>
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 801016e:	4649      	mov	r1, r9
 8010170:	4630      	mov	r0, r6
 8010172:	f7fb fdab 	bl	800bccc <xmp3fixpt_GetBits>
 8010176:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 801017a:	443c      	add	r4, r7
 801017c:	75e0      	strb	r0, [r4, #23]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 801017e:	4649      	mov	r1, r9
 8010180:	4630      	mov	r0, r6
 8010182:	f7fb fda3 	bl	800bccc <xmp3fixpt_GetBits>
 8010186:	7620      	strb	r0, [r4, #24]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8010188:	4649      	mov	r1, r9
 801018a:	4630      	mov	r0, r6
 801018c:	f7fb fd9e 	bl	800bccc <xmp3fixpt_GetBits>
 8010190:	7660      	strb	r0, [r4, #25]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010192:	f108 0801 	add.w	r8, r8, #1
 8010196:	3501      	adds	r5, #1
 8010198:	ab08      	add	r3, sp, #32
 801019a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801019e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80101a2:	4543      	cmp	r3, r8
 80101a4:	dce3      	bgt.n	801016e <UnpackSFMPEG2+0x1ea>
		for (    ; nrIdx <= 3; nrIdx++) {
 80101a6:	f10a 0a01 	add.w	sl, sl, #1
 80101aa:	f1ba 0f03 	cmp.w	sl, #3
 80101ae:	dc09      	bgt.n	80101c4 <UnpackSFMPEG2+0x240>
			iipTest = (1 << slen[nrIdx]) - 1;
 80101b0:	ab08      	add	r3, sp, #32
 80101b2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80101b6:	f853 9c10 	ldr.w	r9, [r3, #-16]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 80101ba:	f04f 0800 	mov.w	r8, #0
 80101be:	e7eb      	b.n	8010198 <UnpackSFMPEG2+0x214>
			nrIdx = 0;
 80101c0:	46aa      	mov	sl, r5
 80101c2:	e7f2      	b.n	80101aa <UnpackSFMPEG2+0x226>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 80101c4:	2300      	movs	r3, #0
 80101c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80101ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80101ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80101d2:	e01c      	b.n	801020e <UnpackSFMPEG2+0x28a>
			iipTest = (1 << slen[nrIdx]) - 1;
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 80101d4:	4649      	mov	r1, r9
 80101d6:	4630      	mov	r0, r6
 80101d8:	f7fb fd78 	bl	800bccc <xmp3fixpt_GetBits>
 80101dc:	5578      	strb	r0, [r7, r5]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 80101de:	3401      	adds	r4, #1
 80101e0:	3501      	adds	r5, #1
 80101e2:	ab08      	add	r3, sp, #32
 80101e4:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80101e8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80101ec:	42a3      	cmp	r3, r4
 80101ee:	dcf1      	bgt.n	80101d4 <UnpackSFMPEG2+0x250>
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 80101f0:	f108 0801 	add.w	r8, r8, #1
 80101f4:	f1b8 0f03 	cmp.w	r8, #3
 80101f8:	dc06      	bgt.n	8010208 <UnpackSFMPEG2+0x284>
			iipTest = (1 << slen[nrIdx]) - 1;
 80101fa:	ab08      	add	r3, sp, #32
 80101fc:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8010200:	f853 9c10 	ldr.w	r9, [r3, #-16]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8010204:	2400      	movs	r4, #0
 8010206:	e7ec      	b.n	80101e2 <UnpackSFMPEG2+0x25e>
			}
		}
		/* last sf band not transmitted */
		sfis->l[21] = sfis->l[22] = 0;
 8010208:	2300      	movs	r3, #0
 801020a:	75bb      	strb	r3, [r7, #22]
 801020c:	757b      	strb	r3, [r7, #21]

	}
}
 801020e:	b008      	add	sp, #32
 8010210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010214:	66666667 	.word	0x66666667
 8010218:	55555556 	.word	0x55555556
 801021c:	38e38e39 	.word	0x38e38e39
 8010220:	2aaaaaab 	.word	0x2aaaaaab
 8010224:	0801ccd4 	.word	0x0801ccd4

08010228 <xmp3fixpt_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 8010228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022c:	b089      	sub	sp, #36	; 0x24
 801022e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8010230:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 8010232:	2800      	cmp	r0, #0
 8010234:	d07c      	beq.n	8010330 <xmp3fixpt_UnpackScaleFactors+0x108>
 8010236:	4688      	mov	r8, r1
 8010238:	4616      	mov	r6, r2
 801023a:	4681      	mov	r9, r0
 801023c:	f8d0 b000 	ldr.w	fp, [r0]
 8010240:	f1bb 0f00 	cmp.w	fp, #0
 8010244:	d077      	beq.n	8010336 <xmp3fixpt_UnpackScaleFactors+0x10e>
 8010246:	6847      	ldr	r7, [r0, #4]
 8010248:	2f00      	cmp	r7, #0
 801024a:	d077      	beq.n	801033c <xmp3fixpt_UnpackScaleFactors+0x114>
 801024c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8010250:	f1ba 0f00 	cmp.w	sl, #0
 8010254:	d075      	beq.n	8010342 <xmp3fixpt_UnpackScaleFactors+0x11a>
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));

	/* init GetBits reader */
	startBuf = buf;
	bsi = &bitStreamInfo;
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 8010256:	6811      	ldr	r1, [r2, #0]
 8010258:	4419      	add	r1, r3
 801025a:	3107      	adds	r1, #7
 801025c:	d445      	bmi.n	80102ea <xmp3fixpt_UnpackScaleFactors+0xc2>
 801025e:	4642      	mov	r2, r8
 8010260:	10c9      	asrs	r1, r1, #3
 8010262:	a804      	add	r0, sp, #16
 8010264:	f7fb fd2c 	bl	800bcc0 <xmp3fixpt_SetBitstreamPointer>
	if (*bitOffset)
 8010268:	6831      	ldr	r1, [r6, #0]
 801026a:	2900      	cmp	r1, #0
 801026c:	d13f      	bne.n	80102ee <xmp3fixpt_UnpackScaleFactors+0xc6>
		GetBits(bsi, *bitOffset);

	if (fh->ver == MPEG1) 
 801026e:	f89b 3000 	ldrb.w	r3, [fp]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d13f      	bne.n	80102f6 <xmp3fixpt_UnpackScaleFactors+0xce>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 8010276:	0123      	lsls	r3, r4, #4
 8010278:	3308      	adds	r3, #8
 801027a:	ebc4 1144 	rsb	r1, r4, r4, lsl #5
 801027e:	ebc5 1245 	rsb	r2, r5, r5, lsl #5
 8010282:	0092      	lsls	r2, r2, #2
 8010284:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8010288:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 801028c:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8010290:	0109      	lsls	r1, r1, #4
 8010292:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010296:	3128      	adds	r1, #40	; 0x28
 8010298:	ebc4 1044 	rsb	r0, r4, r4, lsl #5
 801029c:	eb0a 0040 	add.w	r0, sl, r0, lsl #1
 80102a0:	9001      	str	r0, [sp, #4]
 80102a2:	9500      	str	r5, [sp, #0]
 80102a4:	443b      	add	r3, r7
 80102a6:	4452      	add	r2, sl
 80102a8:	4439      	add	r1, r7
 80102aa:	a804      	add	r0, sp, #16
 80102ac:	f7ff fdb0 	bl	800fe10 <UnpackSFMPEG1>
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 80102b0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80102b4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80102b8:	011b      	lsls	r3, r3, #4
 80102ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102be:	441f      	add	r7, r3
 80102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80102c6:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80102ca:	f849 3024 	str.w	r3, [r9, r4, lsl #2]

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 80102ce:	6832      	ldr	r2, [r6, #0]
 80102d0:	4641      	mov	r1, r8
 80102d2:	a804      	add	r0, sp, #16
 80102d4:	f7fb fd55 	bl	800bd82 <xmp3fixpt_CalcBitsUsed>
	buf += (bitsUsed + *bitOffset) >> 3;
 80102d8:	6833      	ldr	r3, [r6, #0]
 80102da:	4403      	add	r3, r0
 80102dc:	10d8      	asrs	r0, r3, #3
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 80102de:	f003 0307 	and.w	r3, r3, #7
 80102e2:	6033      	str	r3, [r6, #0]

	return (buf - startBuf);
}
 80102e4:	b009      	add	sp, #36	; 0x24
 80102e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 80102ea:	3107      	adds	r1, #7
 80102ec:	e7b7      	b.n	801025e <xmp3fixpt_UnpackScaleFactors+0x36>
		GetBits(bsi, *bitOffset);
 80102ee:	a804      	add	r0, sp, #16
 80102f0:	f7fb fcec 	bl	800bccc <xmp3fixpt_GetBits>
 80102f4:	e7bb      	b.n	801026e <xmp3fixpt_UnpackScaleFactors+0x46>
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);
 80102f6:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 80102fa:	ebc5 1245 	rsb	r2, r5, r5, lsl #5
 80102fe:	0092      	lsls	r2, r2, #2
 8010300:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8010304:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8010308:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 801030c:	0109      	lsls	r1, r1, #4
 801030e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010312:	3128      	adds	r1, #40	; 0x28
 8010314:	f10a 03f8 	add.w	r3, sl, #248	; 0xf8
 8010318:	9302      	str	r3, [sp, #8]
 801031a:	f8db 3020 	ldr.w	r3, [fp, #32]
 801031e:	9301      	str	r3, [sp, #4]
 8010320:	9400      	str	r4, [sp, #0]
 8010322:	462b      	mov	r3, r5
 8010324:	4452      	add	r2, sl
 8010326:	4439      	add	r1, r7
 8010328:	a804      	add	r0, sp, #16
 801032a:	f7ff fe2b 	bl	800ff84 <UnpackSFMPEG2>
 801032e:	e7bf      	b.n	80102b0 <xmp3fixpt_UnpackScaleFactors+0x88>
		return -1;
 8010330:	f04f 30ff 	mov.w	r0, #4294967295
 8010334:	e7d6      	b.n	80102e4 <xmp3fixpt_UnpackScaleFactors+0xbc>
 8010336:	f04f 30ff 	mov.w	r0, #4294967295
 801033a:	e7d3      	b.n	80102e4 <xmp3fixpt_UnpackScaleFactors+0xbc>
 801033c:	f04f 30ff 	mov.w	r0, #4294967295
 8010340:	e7d0      	b.n	80102e4 <xmp3fixpt_UnpackScaleFactors+0xbc>
 8010342:	f04f 30ff 	mov.w	r0, #4294967295
 8010346:	e7cd      	b.n	80102e4 <xmp3fixpt_UnpackScaleFactors+0xbc>

08010348 <xmp3fixpt_MidSideProc>:
 * Return:      none
 *
 * Notes:       assume at least 1 GB in input
 **************************************************************************************/
void MidSideProc(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, int mOut[2])  
{
 8010348:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, xr, xl, mOutL, mOutR;
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
 801034a:	2600      	movs	r6, #0
 801034c:	4637      	mov	r7, r6
	for(i = 0; i < nSamps; i++) {
 801034e:	4633      	mov	r3, r6
 8010350:	e01e      	b.n	8010390 <xmp3fixpt_MidSideProc+0x48>
		xl = x[0][i];
 8010352:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		xr = x[1][i];
 8010356:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 801035a:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
		x[0][i] = xl + xr;
 801035e:	eb04 0e05 	add.w	lr, r4, r5
 8010362:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
		x[1][i] = xl - xr;
 8010366:	1b64      	subs	r4, r4, r5
 8010368:	f8cc 4900 	str.w	r4, [ip, #2304]	; 0x900
		mOutL |= FASTABS(x[0][i]);
 801036c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
	__asm__ volatile (
 8010370:	f04f 0c00 	mov.w	ip, #0
 8010374:	46e6      	mov	lr, ip
 8010376:	ea85 7ee5 	eor.w	lr, r5, r5, asr #31
 801037a:	ebae 7ee5 	sub.w	lr, lr, r5, asr #31
 801037e:	ea47 070e 	orr.w	r7, r7, lr
 8010382:	ea84 7ce4 	eor.w	ip, r4, r4, asr #31
 8010386:	ebac 7ce4 	sub.w	ip, ip, r4, asr #31
		mOutR |= FASTABS(x[1][i]);
 801038a:	ea46 060c 	orr.w	r6, r6, ip
	for(i = 0; i < nSamps; i++) {
 801038e:	3301      	adds	r3, #1
 8010390:	428b      	cmp	r3, r1
 8010392:	dbde      	blt.n	8010352 <xmp3fixpt_MidSideProc+0xa>
	}
	mOut[0] |= mOutL;
 8010394:	6813      	ldr	r3, [r2, #0]
 8010396:	433b      	orrs	r3, r7
 8010398:	6013      	str	r3, [r2, #0]
	mOut[1] |= mOutR;
 801039a:	6853      	ldr	r3, [r2, #4]
 801039c:	4333      	orrs	r3, r6
 801039e:	6053      	str	r3, [r2, #4]
}
 80103a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080103a4 <xmp3fixpt_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 80103a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a8:	b08d      	sub	sp, #52	; 0x34
 80103aa:	9201      	str	r2, [sp, #4]
 80103ac:	9302      	str	r3, [sp, #8]
 80103ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 80103b0:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80103b4:	f1b9 0f00 	cmp.w	r9, #0
 80103b8:	d116      	bne.n	80103e8 <xmp3fixpt_IntensityProcMPEG1+0x44>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
 80103ba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80103bc:	3401      	adds	r4, #1
		cbEndL =   cbi[0].cbEndL + 1;
 80103be:	695b      	ldr	r3, [r3, #20]
 80103c0:	3301      	adds	r3, #1
 80103c2:	9303      	str	r3, [sp, #12]
		cbStartS = cbEndS = 0;
		i = fh->sfBand->l[cbStartL];
 80103c4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80103c6:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
		cbStartS = cbEndS = 0;
 80103ca:	f8cd 9010 	str.w	r9, [sp, #16]
		cbEndS =   cbi[0].cbEndSMax + 1;
		cbStartL = cbEndL = 0;
		i = 3 * fh->sfBand->s[cbStartS];
	}

	sampsLeft = nSamps - i;		/* process to length of left */
 80103ce:	1acd      	subs	r5, r1, r3
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80103d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80103d2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80103d6:	49a2      	ldr	r1, [pc, #648]	; (8010660 <xmp3fixpt_IntensityProcMPEG1+0x2bc>)
 80103d8:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
	mOutL = mOutR = 0;
 80103dc:	2200      	movs	r2, #0
 80103de:	f8cd 9014 	str.w	r9, [sp, #20]
 80103e2:	4694      	mov	ip, r2
 80103e4:	4696      	mov	lr, r2

	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 80103e6:	e051      	b.n	801048c <xmp3fixpt_IntensityProcMPEG1+0xe8>
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 80103e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80103ec:	f1b9 0f01 	cmp.w	r9, #1
 80103f0:	d905      	bls.n	80103fe <xmp3fixpt_IntensityProcMPEG1+0x5a>
	int cbStartL=0, cbStartS=0, cbEndL=0, cbEndS=0;
 80103f2:	2300      	movs	r3, #0
 80103f4:	9304      	str	r3, [sp, #16]
 80103f6:	9303      	str	r3, [sp, #12]
 80103f8:	4699      	mov	r9, r3
 80103fa:	461c      	mov	r4, r3
 80103fc:	e7e7      	b.n	80103ce <xmp3fixpt_IntensityProcMPEG1+0x2a>
		cbStartS = cbi[1].cbEndSMax + 1;
 80103fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010400:	f102 0901 	add.w	r9, r2, #1
		cbEndS =   cbi[0].cbEndSMax + 1;
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	3301      	adds	r3, #1
 8010408:	9304      	str	r3, [sp, #16]
		i = 3 * fh->sfBand->s[cbStartS];
 801040a:	9b01      	ldr	r3, [sp, #4]
 801040c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801040e:	3215      	adds	r2, #21
 8010410:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010414:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010418:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		cbStartL = cbEndL = 0;
 801041c:	2200      	movs	r2, #0
 801041e:	9203      	str	r2, [sp, #12]
 8010420:	4614      	mov	r4, r2
 8010422:	e7d4      	b.n	80103ce <xmp3fixpt_IntensityProcMPEG1+0x2a>
		isf = sfis->l[cb];
		if (isf == 7) {
			fl = ISFIIP[midSideFlag][0];
 8010424:	4a8f      	ldr	r2, [pc, #572]	; (8010664 <xmp3fixpt_IntensityProcMPEG1+0x2c0>)
 8010426:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010428:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
			fr = ISFIIP[midSideFlag][1];
 801042c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801042e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8010432:	6852      	ldr	r2, [r2, #4]
 8010434:	e03c      	b.n	80104b0 <xmp3fixpt_IntensityProcMPEG1+0x10c>
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010436:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 801043a:	fb82 6404 	smull	r6, r4, r2, r4
			fr = isfTab[6] - isfTab[isf];
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 801043e:	00a4      	lsls	r4, r4, #2
 8010440:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8010444:	f8c6 4900 	str.w	r4, [r6, #2304]	; 0x900
	__asm__ volatile (
 8010448:	2600      	movs	r6, #0
 801044a:	46b2      	mov	sl, r6
 801044c:	ea84 7ae4 	eor.w	sl, r4, r4, asr #31
 8010450:	ebaa 7ae4 	sub.w	sl, sl, r4, asr #31
 8010454:	ea4e 0e0a 	orr.w	lr, lr, sl
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010458:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 801045c:	fb81 a404 	smull	sl, r4, r1, r4
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 8010460:	00a4      	lsls	r4, r4, #2
 8010462:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	__asm__ volatile (
 8010466:	ea84 76e4 	eor.w	r6, r4, r4, asr #31
 801046a:	eba6 76e4 	sub.w	r6, r6, r4, asr #31
 801046e:	ea4c 0c06 	orr.w	ip, ip, r6
			sampsLeft--;
 8010472:	3d01      	subs	r5, #1
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8010474:	3701      	adds	r7, #1
 8010476:	3301      	adds	r3, #1
 8010478:	4547      	cmp	r7, r8
 801047a:	bfac      	ite	ge
 801047c:	2400      	movge	r4, #0
 801047e:	2401      	movlt	r4, #1
 8010480:	2d00      	cmp	r5, #0
 8010482:	bfd8      	it	le
 8010484:	2400      	movle	r4, #0
 8010486:	2c00      	cmp	r4, #0
 8010488:	d1d5      	bne.n	8010436 <xmp3fixpt_IntensityProcMPEG1+0x92>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 801048a:	464c      	mov	r4, r9
 801048c:	9a03      	ldr	r2, [sp, #12]
 801048e:	4294      	cmp	r4, r2
 8010490:	bfac      	ite	ge
 8010492:	2200      	movge	r2, #0
 8010494:	2201      	movlt	r2, #1
 8010496:	2d00      	cmp	r5, #0
 8010498:	bfd8      	it	le
 801049a:	2200      	movle	r2, #0
 801049c:	b1a2      	cbz	r2, 80104c8 <xmp3fixpt_IntensityProcMPEG1+0x124>
		isf = sfis->l[cb];
 801049e:	9a02      	ldr	r2, [sp, #8]
 80104a0:	5d12      	ldrb	r2, [r2, r4]
		if (isf == 7) {
 80104a2:	2a07      	cmp	r2, #7
 80104a4:	d0be      	beq.n	8010424 <xmp3fixpt_IntensityProcMPEG1+0x80>
			fl = isfTab[isf];	
 80104a6:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
			fr = isfTab[6] - isfTab[isf];
 80104aa:	f8db 2018 	ldr.w	r2, [fp, #24]
 80104ae:	1a52      	subs	r2, r2, r1
		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 80104b0:	9e01      	ldr	r6, [sp, #4]
 80104b2:	6b76      	ldr	r6, [r6, #52]	; 0x34
 80104b4:	f104 0901 	add.w	r9, r4, #1
 80104b8:	f936 8019 	ldrsh.w	r8, [r6, r9, lsl #1]
 80104bc:	f936 4014 	ldrsh.w	r4, [r6, r4, lsl #1]
 80104c0:	eba8 0804 	sub.w	r8, r8, r4
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 80104c4:	2700      	movs	r7, #0
 80104c6:	e7d7      	b.n	8010478 <xmp3fixpt_IntensityProcMPEG1+0xd4>
 80104c8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80104cc:	4661      	mov	r1, ip
 80104ce:	4672      	mov	r2, lr
 80104d0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80104d4:	e0b0      	b.n	8010638 <xmp3fixpt_IntensityProcMPEG1+0x294>
	/* short blocks */
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
		for (w = 0; w < 3; w++) {
			isf = sfis->s[cb][w];
			if (isf == 7) {
				fls[w] = ISFIIP[midSideFlag][0];
 80104d6:	4c63      	ldr	r4, [pc, #396]	; (8010664 <xmp3fixpt_IntensityProcMPEG1+0x2c0>)
 80104d8:	ab0c      	add	r3, sp, #48	; 0x30
 80104da:	eb03 0886 	add.w	r8, r3, r6, lsl #2
 80104de:	f854 303e 	ldr.w	r3, [r4, lr, lsl #3]
 80104e2:	f848 3c0c 	str.w	r3, [r8, #-12]
				frs[w] = ISFIIP[midSideFlag][1];
 80104e6:	eb04 0cce 	add.w	ip, r4, lr, lsl #3
 80104ea:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80104ee:	f848 4c18 	str.w	r4, [r8, #-24]
		for (w = 0; w < 3; w++) {
 80104f2:	3601      	adds	r6, #1
 80104f4:	2e02      	cmp	r6, #2
 80104f6:	dc13      	bgt.n	8010520 <xmp3fixpt_IntensityProcMPEG1+0x17c>
			isf = sfis->s[cb][w];
 80104f8:	eb09 0449 	add.w	r4, r9, r9, lsl #1
 80104fc:	443c      	add	r4, r7
 80104fe:	4434      	add	r4, r6
 8010500:	7de4      	ldrb	r4, [r4, #23]
			if (isf == 7) {
 8010502:	2c07      	cmp	r4, #7
 8010504:	d0e7      	beq.n	80104d6 <xmp3fixpt_IntensityProcMPEG1+0x132>
			} else {
				fls[w] = isfTab[isf];
 8010506:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 801050a:	ab0c      	add	r3, sp, #48	; 0x30
 801050c:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 8010510:	f84c 4c0c 	str.w	r4, [ip, #-12]
				frs[w] = isfTab[6] - isfTab[isf];
 8010514:	f8db 3018 	ldr.w	r3, [fp, #24]
 8010518:	1b1c      	subs	r4, r3, r4
 801051a:	f84c 4c18 	str.w	r4, [ip, #-24]
 801051e:	e7e8      	b.n	80104f2 <xmp3fixpt_IntensityProcMPEG1+0x14e>
			}
		}

		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8010520:	4653      	mov	r3, sl
 8010522:	9c01      	ldr	r4, [sp, #4]
 8010524:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8010526:	f109 0601 	add.w	r6, r9, #1
 801052a:	9603      	str	r6, [sp, #12]
 801052c:	f109 0615 	add.w	r6, r9, #21
 8010530:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8010534:	f9b6 c006 	ldrsh.w	ip, [r6, #6]
 8010538:	f109 0914 	add.w	r9, r9, #20
 801053c:	eb04 0449 	add.w	r4, r4, r9, lsl #1
 8010540:	f9b4 4006 	ldrsh.w	r4, [r4, #6]
 8010544:	ebac 0c04 	sub.w	ip, ip, r4
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8010548:	2600      	movs	r6, #0
 801054a:	e06a      	b.n	8010622 <xmp3fixpt_IntensityProcMPEG1+0x27e>
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801054c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8010550:	9f06      	ldr	r7, [sp, #24]
 8010552:	fb87 8404 	smull	r8, r4, r7, r4
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 8010556:	00a7      	lsls	r7, r4, #2
 8010558:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 801055c:	f8c4 7900 	str.w	r7, [r4, #2304]	; 0x900
	__asm__ volatile (
 8010560:	2400      	movs	r4, #0
 8010562:	46a0      	mov	r8, r4
 8010564:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8010568:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 801056c:	ea42 0208 	orr.w	r2, r2, r8
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010570:	f850 8023 	ldr.w	r8, [r0, r3, lsl #2]
 8010574:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010576:	fb87 9808 	smull	r9, r8, r7, r8
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 801057a:	ea4f 0788 	mov.w	r7, r8, lsl #2
 801057e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
	__asm__ volatile (
 8010582:	46a0      	mov	r8, r4
 8010584:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8010588:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 801058c:	ea41 0108 	orr.w	r1, r1, r8
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 8010590:	f103 0901 	add.w	r9, r3, #1
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010594:	f850 8029 	ldr.w	r8, [r0, r9, lsl #2]
 8010598:	9f07      	ldr	r7, [sp, #28]
 801059a:	fb87 a808 	smull	sl, r8, r7, r8
 801059e:	ea4f 0788 	mov.w	r7, r8, lsl #2
 80105a2:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 80105a6:	f8c8 7900 	str.w	r7, [r8, #2304]	; 0x900
	__asm__ volatile (
 80105aa:	46a0      	mov	r8, r4
 80105ac:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 80105b0:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 80105b4:	ea42 0208 	orr.w	r2, r2, r8
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80105b8:	f850 8029 	ldr.w	r8, [r0, r9, lsl #2]
 80105bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80105be:	fb87 a808 	smull	sl, r8, r7, r8
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 80105c2:	ea4f 0788 	mov.w	r7, r8, lsl #2
 80105c6:	f840 7029 	str.w	r7, [r0, r9, lsl #2]
	__asm__ volatile (
 80105ca:	46a0      	mov	r8, r4
 80105cc:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 80105d0:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 80105d4:	ea41 0108 	orr.w	r1, r1, r8
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 80105d8:	f103 0902 	add.w	r9, r3, #2
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80105dc:	f850 8029 	ldr.w	r8, [r0, r9, lsl #2]
 80105e0:	9f08      	ldr	r7, [sp, #32]
 80105e2:	fb87 a808 	smull	sl, r8, r7, r8
 80105e6:	ea4f 0788 	mov.w	r7, r8, lsl #2
 80105ea:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 80105ee:	f8c8 7900 	str.w	r7, [r8, #2304]	; 0x900
	__asm__ volatile (
 80105f2:	46a0      	mov	r8, r4
 80105f4:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 80105f8:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 80105fc:	ea42 0208 	orr.w	r2, r2, r8
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010600:	f850 8029 	ldr.w	r8, [r0, r9, lsl #2]
 8010604:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8010606:	fb87 a808 	smull	sl, r8, r7, r8
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 801060a:	ea4f 0788 	mov.w	r7, r8, lsl #2
 801060e:	f840 7029 	str.w	r7, [r0, r9, lsl #2]
	__asm__ volatile (
 8010612:	ea87 74e7 	eor.w	r4, r7, r7, asr #31
 8010616:	eba4 74e7 	sub.w	r4, r4, r7, asr #31
 801061a:	4321      	orrs	r1, r4
			sampsLeft -= 3;
 801061c:	3d03      	subs	r5, #3
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 801061e:	3601      	adds	r6, #1
 8010620:	3303      	adds	r3, #3
 8010622:	4566      	cmp	r6, ip
 8010624:	bfac      	ite	ge
 8010626:	2400      	movge	r4, #0
 8010628:	2401      	movlt	r4, #1
 801062a:	2d02      	cmp	r5, #2
 801062c:	bfd8      	it	le
 801062e:	2400      	movle	r4, #0
 8010630:	2c00      	cmp	r4, #0
 8010632:	d18b      	bne.n	801054c <xmp3fixpt_IntensityProcMPEG1+0x1a8>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8010634:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010638:	9c04      	ldr	r4, [sp, #16]
 801063a:	45a1      	cmp	r9, r4
 801063c:	bfac      	ite	ge
 801063e:	2400      	movge	r4, #0
 8010640:	2401      	movlt	r4, #1
 8010642:	2d02      	cmp	r5, #2
 8010644:	bfd8      	it	le
 8010646:	2400      	movle	r4, #0
 8010648:	b11c      	cbz	r4, 8010652 <xmp3fixpt_IntensityProcMPEG1+0x2ae>
		for (w = 0; w < 3; w++) {
 801064a:	2600      	movs	r6, #0
 801064c:	469a      	mov	sl, r3
 801064e:	9f02      	ldr	r7, [sp, #8]
 8010650:	e750      	b.n	80104f4 <xmp3fixpt_IntensityProcMPEG1+0x150>
		}
	}
	mOut[0] = mOutL;
 8010652:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010654:	6019      	str	r1, [r3, #0]
	mOut[1] = mOutR;
 8010656:	605a      	str	r2, [r3, #4]
	
	return;
}
 8010658:	b00d      	add	sp, #52	; 0x34
 801065a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801065e:	bf00      	nop
 8010660:	0801cd4c 	.word	0x0801cd4c
 8010664:	0801cd3c 	.word	0x0801cd3c

08010668 <xmp3fixpt_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 8010668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	b09d      	sub	sp, #116	; 0x74
 801066e:	4690      	mov	r8, r2
 8010670:	9301      	str	r3, [sp, #4]
 8010672:	9e27      	ldr	r6, [sp, #156]	; 0x9c
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8010674:	6833      	ldr	r3, [r6, #0]
 8010676:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010678:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801067c:	4a89      	ldr	r2, [pc, #548]	; (80108a4 <xmp3fixpt_IntensityProcMPEG2+0x23c>)
 801067e:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 8010682:	9300      	str	r3, [sp, #0]
	mOutL = mOutR = 0;

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
 8010684:	2500      	movs	r5, #0
 8010686:	462c      	mov	r4, r5
 8010688:	e00d      	b.n	80106a6 <xmp3fixpt_IntensityProcMPEG2+0x3e>
		tmp = (1 << sfjs->slen[r]) - 1;
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
			il[k] = tmp;
 801068a:	ab1c      	add	r3, sp, #112	; 0x70
 801068c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010690:	f843 7c5c 	str.w	r7, [r3, #-92]
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8010694:	3201      	adds	r2, #1
 8010696:	3401      	adds	r4, #1
 8010698:	1d2b      	adds	r3, r5, #4
 801069a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	4293      	cmp	r3, r2
 80106a2:	dcf2      	bgt.n	801068a <xmp3fixpt_IntensityProcMPEG2+0x22>
	for (k = r = 0; r < 4; r++) {
 80106a4:	3501      	adds	r5, #1
 80106a6:	2d03      	cmp	r5, #3
 80106a8:	dc07      	bgt.n	80106ba <xmp3fixpt_IntensityProcMPEG2+0x52>
		tmp = (1 << sfjs->slen[r]) - 1;
 80106aa:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	2701      	movs	r7, #1
 80106b2:	409f      	lsls	r7, r3
 80106b4:	3f01      	subs	r7, #1
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80106b6:	2200      	movs	r2, #0
 80106b8:	e7ee      	b.n	8010698 <xmp3fixpt_IntensityProcMPEG2+0x30>
	}

	if (cbi[1].cbType == 0) {
 80106ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80106bc:	699c      	ldr	r4, [r3, #24]
 80106be:	9402      	str	r4, [sp, #8]
 80106c0:	2c00      	cmp	r4, #0
 80106c2:	d16a      	bne.n	801079a <xmp3fixpt_IntensityProcMPEG2+0x132>
		/* long blocks */
		il[21] = il[22] = 1;
 80106c4:	2301      	movs	r3, #1
 80106c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80106c8:	931a      	str	r3, [sp, #104]	; 0x68
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 80106ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80106cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ce:	3301      	adds	r3, #1
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 80106d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80106d2:	6952      	ldr	r2, [r2, #20]
 80106d4:	9203      	str	r2, [sp, #12]
		i = fh->sfBand->l[cbStartL];
 80106d6:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80106da:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
		sampsLeft = nSamps - i;
 80106de:	eba1 0b05 	sub.w	fp, r1, r5
	mOutL = mOutR = 0;
 80106e2:	46a6      	mov	lr, r4

		for(cb = cbStartL; cb < cbEndL; cb++) {
 80106e4:	e045      	b.n	8010772 <xmp3fixpt_IntensityProcMPEG2+0x10a>
			sfIdx = sfis->l[cb];
			if (sfIdx == il[cb]) {
				fl = ISFIIP[midSideFlag][0];
 80106e6:	4a70      	ldr	r2, [pc, #448]	; (80108a8 <xmp3fixpt_IntensityProcMPEG2+0x240>)
 80106e8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80106ea:	f852 6031 	ldr.w	r6, [r2, r1, lsl #3]
				fr = ISFIIP[midSideFlag][1];
 80106ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80106f2:	6857      	ldr	r7, [r2, #4]
 80106f4:	e008      	b.n	8010708 <xmp3fixpt_IntensityProcMPEG2+0xa0>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 80106f6:	2600      	movs	r6, #0
 80106f8:	9f00      	ldr	r7, [sp, #0]
 80106fa:	59be      	ldr	r6, [r7, r6]
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 80106fc:	b90a      	cbnz	r2, 8010702 <xmp3fixpt_IntensityProcMPEG2+0x9a>
 80106fe:	008a      	lsls	r2, r1, #2
 8010700:	e000      	b.n	8010704 <xmp3fixpt_IntensityProcMPEG2+0x9c>
 8010702:	2200      	movs	r2, #0
 8010704:	9900      	ldr	r1, [sp, #0]
 8010706:	588f      	ldr	r7, [r1, r2]
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 8010708:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801070c:	f103 0901 	add.w	r9, r3, #1
 8010710:	f932 c019 	ldrsh.w	ip, [r2, r9, lsl #1]
 8010714:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010718:	ebac 0c03 	sub.w	ip, ip, r3
 801071c:	45dc      	cmp	ip, fp
 801071e:	bfa8      	it	ge
 8010720:	46dc      	movge	ip, fp

			for(j = 0; j < n; j++, i++) {
 8010722:	9902      	ldr	r1, [sp, #8]
 8010724:	e01e      	b.n	8010764 <xmp3fixpt_IntensityProcMPEG2+0xfc>
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010726:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 801072a:	fb87 2303 	smull	r2, r3, r7, r3
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8010734:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
	__asm__ volatile (
 8010738:	2200      	movs	r2, #0
 801073a:	4692      	mov	sl, r2
 801073c:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 8010740:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
 8010744:	ea4e 0e0a 	orr.w	lr, lr, sl
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8010748:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 801074c:	fb86 a303 	smull	sl, r3, r6, r3
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
	__asm__ volatile (
 8010756:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801075a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801075e:	4314      	orrs	r4, r2
			for(j = 0; j < n; j++, i++) {
 8010760:	3101      	adds	r1, #1
 8010762:	3501      	adds	r5, #1
 8010764:	4561      	cmp	r1, ip
 8010766:	dbde      	blt.n	8010726 <xmp3fixpt_IntensityProcMPEG2+0xbe>
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
			if (sampsLeft == 0)		
 8010768:	ebbb 0b0c 	subs.w	fp, fp, ip
 801076c:	f000 8093 	beq.w	8010896 <xmp3fixpt_IntensityProcMPEG2+0x22e>
		for(cb = cbStartL; cb < cbEndL; cb++) {
 8010770:	464b      	mov	r3, r9
 8010772:	9a03      	ldr	r2, [sp, #12]
 8010774:	429a      	cmp	r2, r3
 8010776:	f2c0 808e 	blt.w	8010896 <xmp3fixpt_IntensityProcMPEG2+0x22e>
			sfIdx = sfis->l[cb];
 801077a:	9a01      	ldr	r2, [sp, #4]
 801077c:	5cd2      	ldrb	r2, [r2, r3]
			if (sfIdx == il[cb]) {
 801077e:	a91c      	add	r1, sp, #112	; 0x70
 8010780:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010784:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 8010788:	4291      	cmp	r1, r2
 801078a:	d0ac      	beq.n	80106e6 <xmp3fixpt_IntensityProcMPEG2+0x7e>
				isf = (sfis->l[cb] + 1) >> 1;
 801078c:	1c51      	adds	r1, r2, #1
 801078e:	1049      	asrs	r1, r1, #1
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8010790:	f012 0201 	ands.w	r2, r2, #1
 8010794:	d0af      	beq.n	80106f6 <xmp3fixpt_IntensityProcMPEG2+0x8e>
 8010796:	008e      	lsls	r6, r1, #2
 8010798:	e7ae      	b.n	80106f8 <xmp3fixpt_IntensityProcMPEG2+0x90>
				break;
		}
	} else {
		/* short or mixed blocks */
		il[12] = 1;
 801079a:	2301      	movs	r3, #1
 801079c:	9311      	str	r3, [sp, #68]	; 0x44
	mOutL = mOutR = 0;
 801079e:	f04f 0e00 	mov.w	lr, #0
 80107a2:	4674      	mov	r4, lr

		for(w = 0; w < 3; w++) {
 80107a4:	46f1      	mov	r9, lr
 80107a6:	f8dd a000 	ldr.w	sl, [sp]
 80107aa:	e05f      	b.n	801086c <xmp3fixpt_IntensityProcMPEG2+0x204>

			/* skip through sample array by 3, so early-exit logic would be more tricky */
			for(cb = cbStartS; cb < cbEndS; cb++) {
				sfIdx = sfis->s[cb][w];
				if (sfIdx == il[cb]) {
					fl = ISFIIP[midSideFlag][0];
 80107ac:	4b3e      	ldr	r3, [pc, #248]	; (80108a8 <xmp3fixpt_IntensityProcMPEG2+0x240>)
 80107ae:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80107b0:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
					fr = ISFIIP[midSideFlag][1];
 80107b4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80107b8:	685f      	ldr	r7, [r3, #4]
 80107ba:	e042      	b.n	8010842 <xmp3fixpt_IntensityProcMPEG2+0x1da>
				} else {
					isf = (sfis->s[cb][w] + 1) >> 1;
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 80107bc:	2600      	movs	r6, #0
 80107be:	e039      	b.n	8010834 <xmp3fixpt_IntensityProcMPEG2+0x1cc>
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 80107c0:	2300      	movs	r3, #0
 80107c2:	e03c      	b.n	801083e <xmp3fixpt_IntensityProcMPEG2+0x1d6>
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80107c4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80107c8:	fb87 2303 	smull	r2, r3, r7, r3
				}
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];

				for(j = 0; j < n; j++, i+=3) {
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80107d2:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
	__asm__ volatile (
 80107d6:	2200      	movs	r2, #0
 80107d8:	4693      	mov	fp, r2
 80107da:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 80107de:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
 80107e2:	ea4e 0e0b 	orr.w	lr, lr, fp
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80107e6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80107ea:	fb86 b303 	smull	fp, r3, r6, r3
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	__asm__ volatile (
 80107f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80107f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80107fc:	4314      	orrs	r4, r2
				for(j = 0; j < n; j++, i+=3) {
 80107fe:	3501      	adds	r5, #1
 8010800:	3103      	adds	r1, #3
 8010802:	4565      	cmp	r5, ip
 8010804:	dbde      	blt.n	80107c4 <xmp3fixpt_IntensityProcMPEG2+0x15c>
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8010806:	9a00      	ldr	r2, [sp, #0]
 8010808:	9b02      	ldr	r3, [sp, #8]
 801080a:	4293      	cmp	r3, r2
 801080c:	db2c      	blt.n	8010868 <xmp3fixpt_IntensityProcMPEG2+0x200>
				sfIdx = sfis->s[cb][w];
 801080e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8010812:	9d01      	ldr	r5, [sp, #4]
 8010814:	442b      	add	r3, r5
 8010816:	444b      	add	r3, r9
 8010818:	7ddb      	ldrb	r3, [r3, #23]
				if (sfIdx == il[cb]) {
 801081a:	ad1c      	add	r5, sp, #112	; 0x70
 801081c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8010820:	f855 5c5c 	ldr.w	r5, [r5, #-92]
 8010824:	429d      	cmp	r5, r3
 8010826:	d0c1      	beq.n	80107ac <xmp3fixpt_IntensityProcMPEG2+0x144>
					isf = (sfis->s[cb][w] + 1) >> 1;
 8010828:	1c5d      	adds	r5, r3, #1
 801082a:	106d      	asrs	r5, r5, #1
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 801082c:	f013 0301 	ands.w	r3, r3, #1
 8010830:	d0c4      	beq.n	80107bc <xmp3fixpt_IntensityProcMPEG2+0x154>
 8010832:	00ae      	lsls	r6, r5, #2
 8010834:	f85a 6006 	ldr.w	r6, [sl, r6]
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8010838:	2b00      	cmp	r3, #0
 801083a:	d1c1      	bne.n	80107c0 <xmp3fixpt_IntensityProcMPEG2+0x158>
 801083c:	00ab      	lsls	r3, r5, #2
 801083e:	f85a 7003 	ldr.w	r7, [sl, r3]
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8010842:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8010846:	1c55      	adds	r5, r2, #1
 8010848:	9500      	str	r5, [sp, #0]
 801084a:	f102 0515 	add.w	r5, r2, #21
 801084e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8010852:	f9b5 c006 	ldrsh.w	ip, [r5, #6]
 8010856:	3214      	adds	r2, #20
 8010858:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801085c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010860:	ebac 0c03 	sub.w	ip, ip, r3
				for(j = 0; j < n; j++, i+=3) {
 8010864:	2500      	movs	r5, #0
 8010866:	e7cc      	b.n	8010802 <xmp3fixpt_IntensityProcMPEG2+0x19a>
		for(w = 0; w < 3; w++) {
 8010868:	f109 0901 	add.w	r9, r9, #1
 801086c:	f1b9 0f02 	cmp.w	r9, #2
 8010870:	dc11      	bgt.n	8010896 <xmp3fixpt_IntensityProcMPEG2+0x22e>
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8010872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010874:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8010878:	69d9      	ldr	r1, [r3, #28]
 801087a:	1c4a      	adds	r2, r1, #1
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	9302      	str	r3, [sp, #8]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8010880:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8010884:	3115      	adds	r1, #21
 8010886:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 801088a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 801088e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010892:	4449      	add	r1, r9
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8010894:	e7b8      	b.n	8010808 <xmp3fixpt_IntensityProcMPEG2+0x1a0>
				}
			}
		}
	}
	mOut[0] = mOutL;
 8010896:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8010898:	601c      	str	r4, [r3, #0]
	mOut[1] = mOutR;
 801089a:	f8c3 e004 	str.w	lr, [r3, #4]

	return;
}
 801089e:	b01d      	add	sp, #116	; 0x74
 80108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	0801cd84 	.word	0x0801cd84
 80108a8:	0801cd3c 	.word	0x0801cd3c

080108ac <xmp3fixpt_Subband>:
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 80108ac:	2800      	cmp	r0, #0
 80108ae:	d07c      	beq.n	80109aa <xmp3fixpt_Subband+0xfe>
{
 80108b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108b4:	b082      	sub	sp, #8
 80108b6:	460f      	mov	r7, r1
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 80108b8:	68c2      	ldr	r2, [r0, #12]
 80108ba:	2a00      	cmp	r2, #0
 80108bc:	d078      	beq.n	80109b0 <xmp3fixpt_Subband+0x104>
 80108be:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80108c2:	f1b8 0f00 	cmp.w	r8, #0
 80108c6:	d076      	beq.n	80109b6 <xmp3fixpt_Subband+0x10a>
 80108c8:	6984      	ldr	r4, [r0, #24]
 80108ca:	2c00      	cmp	r4, #0
 80108cc:	d076      	beq.n	80109bc <xmp3fixpt_Subband+0x110>

	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);

	if (mp3DecInfo->nChans == 2) {
 80108ce:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	d03a      	beq.n	801094c <xmp3fixpt_Subband+0xa0>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += (2 * NBANDS);
		}
	} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
 80108d6:	2500      	movs	r5, #0
 80108d8:	e061      	b.n	801099e <xmp3fixpt_Subband+0xf2>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 80108da:	f005 0901 	and.w	r9, r5, #1
 80108de:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
 80108e2:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 80108e6:	f508 5a80 	add.w	sl, r8, #4096	; 0x1000
 80108ea:	f8da 3b18 	ldr.w	r3, [sl, #2840]	; 0xb18
 80108ee:	9300      	str	r3, [sp, #0]
 80108f0:	464b      	mov	r3, r9
 80108f2:	4621      	mov	r1, r4
 80108f4:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
 80108f8:	f7fb fd60 	bl	800c3bc <xmp3fixpt_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 80108fc:	f105 0012 	add.w	r0, r5, #18
 8010900:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 8010904:	f8da 3b1c 	ldr.w	r3, [sl, #2844]	; 0xb1c
 8010908:	9300      	str	r3, [sp, #0]
 801090a:	464b      	mov	r3, r9
 801090c:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8010910:	eb08 10c0 	add.w	r0, r8, r0, lsl #7
 8010914:	f7fb fd52 	bl	800c3bc <xmp3fixpt_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 8010918:	f8d6 1200 	ldr.w	r1, [r6, #512]	; 0x200
 801091c:	eb09 1309 	add.w	r3, r9, r9, lsl #4
 8010920:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 8010924:	4a27      	ldr	r2, [pc, #156]	; (80109c4 <xmp3fixpt_Subband+0x118>)
 8010926:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801092a:	4638      	mov	r0, r7
 801092c:	f7fe fb10 	bl	800ef50 <xmp3fixpt_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8010930:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 8010934:	eba2 0209 	sub.w	r2, r2, r9
 8010938:	f002 0207 	and.w	r2, r2, #7
 801093c:	f8c6 2200 	str.w	r2, [r6, #512]	; 0x200
			pcmBuf += (2 * NBANDS);
 8010940:	3780      	adds	r7, #128	; 0x80
		for (b = 0; b < BLOCK_SIZE; b++) {
 8010942:	3501      	adds	r5, #1
 8010944:	2d11      	cmp	r5, #17
 8010946:	ddc8      	ble.n	80108da <xmp3fixpt_Subband+0x2e>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
			pcmBuf += NBANDS;
		}
	}

	return 0;
 8010948:	2000      	movs	r0, #0
 801094a:	e02b      	b.n	80109a4 <xmp3fixpt_Subband+0xf8>
		for (b = 0; b < BLOCK_SIZE; b++) {
 801094c:	2500      	movs	r5, #0
 801094e:	e7f9      	b.n	8010944 <xmp3fixpt_Subband+0x98>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 8010950:	f005 0901 	and.w	r9, r5, #1
 8010954:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
 8010958:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 801095c:	f508 5380 	add.w	r3, r8, #4096	; 0x1000
 8010960:	f8d3 3b18 	ldr.w	r3, [r3, #2840]	; 0xb18
 8010964:	9300      	str	r3, [sp, #0]
 8010966:	464b      	mov	r3, r9
 8010968:	4621      	mov	r1, r4
 801096a:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
 801096e:	f7fb fd25 	bl	800c3bc <xmp3fixpt_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 8010972:	f8d6 1200 	ldr.w	r1, [r6, #512]	; 0x200
 8010976:	eb09 1309 	add.w	r3, r9, r9, lsl #4
 801097a:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 801097e:	4a11      	ldr	r2, [pc, #68]	; (80109c4 <xmp3fixpt_Subband+0x118>)
 8010980:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010984:	4638      	mov	r0, r7
 8010986:	f7fd ff27 	bl	800e7d8 <xmp3fixpt_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 801098a:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
 801098e:	eba2 0209 	sub.w	r2, r2, r9
 8010992:	f002 0207 	and.w	r2, r2, #7
 8010996:	f8c6 2200 	str.w	r2, [r6, #512]	; 0x200
			pcmBuf += NBANDS;
 801099a:	3740      	adds	r7, #64	; 0x40
		for (b = 0; b < BLOCK_SIZE; b++) {
 801099c:	3501      	adds	r5, #1
 801099e:	2d11      	cmp	r5, #17
 80109a0:	ddd6      	ble.n	8010950 <xmp3fixpt_Subband+0xa4>
	return 0;
 80109a2:	2000      	movs	r0, #0
}
 80109a4:	b002      	add	sp, #8
 80109a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
 80109aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80109ae:	4770      	bx	lr
		return -1;
 80109b0:	f04f 30ff 	mov.w	r0, #4294967295
 80109b4:	e7f6      	b.n	80109a4 <xmp3fixpt_Subband+0xf8>
 80109b6:	f04f 30ff 	mov.w	r0, #4294967295
 80109ba:	e7f3      	b.n	80109a4 <xmp3fixpt_Subband+0xf8>
 80109bc:	f04f 30ff 	mov.w	r0, #4294967295
 80109c0:	e7f0      	b.n	80109a4 <xmp3fixpt_Subband+0xf8>
 80109c2:	bf00      	nop
 80109c4:	0801d104 	.word	0x0801d104

080109c8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80109c8:	b500      	push	{lr}
 80109ca:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	4613      	mov	r3, r2
 80109d0:	460a      	mov	r2, r1
 80109d2:	4601      	mov	r1, r0
 80109d4:	4803      	ldr	r0, [pc, #12]	; (80109e4 <BSP_SD_ReadBlocks+0x1c>)
 80109d6:	f7f5 fa17 	bl	8005e08 <HAL_SD_ReadBlocks>
 80109da:	b100      	cbz	r0, 80109de <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 80109dc:	2001      	movs	r0, #1
  }

  return sd_state;
}
 80109de:	b003      	add	sp, #12
 80109e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80109e4:	200172a4 	.word	0x200172a4

080109e8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80109e8:	b500      	push	{lr}
 80109ea:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80109ec:	9300      	str	r3, [sp, #0]
 80109ee:	4613      	mov	r3, r2
 80109f0:	460a      	mov	r2, r1
 80109f2:	4601      	mov	r1, r0
 80109f4:	4803      	ldr	r0, [pc, #12]	; (8010a04 <BSP_SD_WriteBlocks+0x1c>)
 80109f6:	f7f5 fb14 	bl	8006022 <HAL_SD_WriteBlocks>
 80109fa:	b100      	cbz	r0, 80109fe <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 80109fc:	2001      	movs	r0, #1
  }

  return sd_state;
}
 80109fe:	b003      	add	sp, #12
 8010a00:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a04:	200172a4 	.word	0x200172a4

08010a08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010a08:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010a0a:	4803      	ldr	r0, [pc, #12]	; (8010a18 <BSP_SD_GetCardState+0x10>)
 8010a0c:	f7f5 fe8e 	bl	800672c <HAL_SD_GetCardState>
}
 8010a10:	3804      	subs	r0, #4
 8010a12:	bf18      	it	ne
 8010a14:	2001      	movne	r0, #1
 8010a16:	bd08      	pop	{r3, pc}
 8010a18:	200172a4 	.word	0x200172a4

08010a1c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010a1c:	b508      	push	{r3, lr}
 8010a1e:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010a20:	4801      	ldr	r0, [pc, #4]	; (8010a28 <BSP_SD_GetCardInfo+0xc>)
 8010a22:	f7f5 fe0f 	bl	8006644 <HAL_SD_GetCardInfo>
}
 8010a26:	bd08      	pop	{r3, pc}
 8010a28:	200172a4 	.word	0x200172a4

08010a2c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010a2c:	b500      	push	{lr}
 8010a2e:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8010a30:	2301      	movs	r3, #1
 8010a32:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010a36:	f002 fc0b 	bl	8013250 <BSP_PlatformIsDetected>
 8010a3a:	b910      	cbnz	r0, 8010a42 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8010a42:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8010a46:	b003      	add	sp, #12
 8010a48:	f85d fb04 	ldr.w	pc, [sp], #4

08010a4c <BSP_SD_Init>:
{
 8010a4c:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010a4e:	f7ff ffed 	bl	8010a2c <BSP_SD_IsDetected>
 8010a52:	2801      	cmp	r0, #1
 8010a54:	d002      	beq.n	8010a5c <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 8010a56:	2502      	movs	r5, #2
}
 8010a58:	4628      	mov	r0, r5
 8010a5a:	bd38      	pop	{r3, r4, r5, pc}
 8010a5c:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
 8010a5e:	4807      	ldr	r0, [pc, #28]	; (8010a7c <BSP_SD_Init+0x30>)
 8010a60:	f7f5 fd80 	bl	8006564 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8010a64:	4605      	mov	r5, r0
 8010a66:	2800      	cmp	r0, #0
 8010a68:	d1f6      	bne.n	8010a58 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010a6e:	4803      	ldr	r0, [pc, #12]	; (8010a7c <BSP_SD_Init+0x30>)
 8010a70:	f7f5 fdfa 	bl	8006668 <HAL_SD_ConfigWideBusOperation>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d0ef      	beq.n	8010a58 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8010a78:	4625      	mov	r5, r4
 8010a7a:	e7ed      	b.n	8010a58 <BSP_SD_Init+0xc>
 8010a7c:	200172a4 	.word	0x200172a4

08010a80 <Color_Convertion>:
extern uint8_t acue_sensitivity;

// converts ARGB8888 to RGB565
static uint16_t Color_Convertion(uint32_t in_color)
{
	uint16_t red = (in_color & 0x00FF0000) >> 16;
 8010a80:	f3c0 4107 	ubfx	r1, r0, #16, #8
	uint16_t green = (in_color & 0x0000FF00) >> 8;
 8010a84:	f3c0 2207 	ubfx	r2, r0, #8, #8
	uint16_t blue = (in_color & 0x000000FF);
	uint16_t out_color = ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
 8010a88:	4b06      	ldr	r3, [pc, #24]	; (8010aa4 <Color_Convertion+0x24>)
 8010a8a:	ea03 2301 	and.w	r3, r3, r1, lsl #8
 8010a8e:	b21b      	sxth	r3, r3
 8010a90:	00d2      	lsls	r2, r2, #3
 8010a92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8010a96:	4313      	orrs	r3, r2
 8010a98:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8010a9c:	4318      	orrs	r0, r3
	return out_color;
}
 8010a9e:	b280      	uxth	r0, r0
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop
 8010aa4:	fffff800 	.word	0xfffff800

08010aa8 <ClearLayer>:

// clears selected ActiveLayer
void ClearLayer()
{
 8010aa8:	b500      	push	{lr}
 8010aaa:	b083      	sub	sp, #12
	hdma2d.Init.OutputOffset = 0;
 8010aac:	480e      	ldr	r0, [pc, #56]	; (8010ae8 <ClearLayer+0x40>)
 8010aae:	2300      	movs	r3, #0
 8010ab0:	60c3      	str	r3, [r0, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8010ab2:	f7f1 f861 	bl	8001b78 <HAL_DMA2D_Init>
 8010ab6:	b110      	cbz	r0, 8010abe <ClearLayer+0x16>
				hltdc.LayerCfg[ActiveLayer].ImageWidth, hltdc.LayerCfg[ActiveLayer].ImageHeight) == HAL_OK) {
			/* Polling For DMA transfer */
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
		}
	}
}
 8010ab8:	b003      	add	sp, #12
 8010aba:	f85d fb04 	ldr.w	pc, [sp], #4
		if(HAL_DMA2D_Start(&hdma2d, 0, hltdc.LayerCfg[ActiveLayer].FBStartAdress,
 8010abe:	4b0b      	ldr	r3, [pc, #44]	; (8010aec <ClearLayer+0x44>)
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	4a0b      	ldr	r2, [pc, #44]	; (8010af0 <ClearLayer+0x48>)
 8010ac4:	2134      	movs	r1, #52	; 0x34
 8010ac6:	fb01 2203 	mla	r2, r1, r3, r2
 8010aca:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8010ad0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	4804      	ldr	r0, [pc, #16]	; (8010ae8 <ClearLayer+0x40>)
 8010ad6:	f7f1 f8ad 	bl	8001c34 <HAL_DMA2D_Start>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d1ec      	bne.n	8010ab8 <ClearLayer+0x10>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8010ade:	2164      	movs	r1, #100	; 0x64
 8010ae0:	4801      	ldr	r0, [pc, #4]	; (8010ae8 <ClearLayer+0x40>)
 8010ae2:	f7f1 f8df 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
}
 8010ae6:	e7e7      	b.n	8010ab8 <ClearLayer+0x10>
 8010ae8:	2000060c 	.word	0x2000060c
 8010aec:	2000079c 	.word	0x2000079c
 8010af0:	200006f4 	.word	0x200006f4

08010af4 <ChangeLayers>:

// changes ActiveLayers
void ChangeLayers(void)
{
 8010af4:	b538      	push	{r3, r4, r5, lr}
	if(ActiveLayer == 0) {
 8010af6:	4b11      	ldr	r3, [pc, #68]	; (8010b3c <ChangeLayers+0x48>)
 8010af8:	781a      	ldrb	r2, [r3, #0]
 8010afa:	b98a      	cbnz	r2, 8010b20 <ChangeLayers+0x2c>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer++);
 8010afc:	461d      	mov	r5, r3
 8010afe:	1c53      	adds	r3, r2, #1
 8010b00:	702b      	strb	r3, [r5, #0]
 8010b02:	4c0f      	ldr	r4, [pc, #60]	; (8010b40 <ChangeLayers+0x4c>)
 8010b04:	21ff      	movs	r1, #255	; 0xff
 8010b06:	4620      	mov	r0, r4
 8010b08:	f7f3 f94c 	bl	8003da4 <HAL_LTDC_SetAlpha_NoReload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
 8010b0c:	782a      	ldrb	r2, [r5, #0]
 8010b0e:	2100      	movs	r1, #0
 8010b10:	4620      	mov	r0, r4
 8010b12:	f7f3 f947 	bl	8003da4 <HAL_LTDC_SetAlpha_NoReload>
	}
	else {
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
	}
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8010b16:	2102      	movs	r1, #2
 8010b18:	4809      	ldr	r0, [pc, #36]	; (8010b40 <ChangeLayers+0x4c>)
 8010b1a:	f7f3 f91b 	bl	8003d54 <HAL_LTDC_Reload>
}
 8010b1e:	bd38      	pop	{r3, r4, r5, pc}
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 8010b20:	4d06      	ldr	r5, [pc, #24]	; (8010b3c <ChangeLayers+0x48>)
 8010b22:	1e53      	subs	r3, r2, #1
 8010b24:	702b      	strb	r3, [r5, #0]
 8010b26:	4c06      	ldr	r4, [pc, #24]	; (8010b40 <ChangeLayers+0x4c>)
 8010b28:	21ff      	movs	r1, #255	; 0xff
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	f7f3 f93a 	bl	8003da4 <HAL_LTDC_SetAlpha_NoReload>
		HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer);
 8010b30:	782a      	ldrb	r2, [r5, #0]
 8010b32:	2100      	movs	r1, #0
 8010b34:	4620      	mov	r0, r4
 8010b36:	f7f3 f935 	bl	8003da4 <HAL_LTDC_SetAlpha_NoReload>
 8010b3a:	e7ec      	b.n	8010b16 <ChangeLayers+0x22>
 8010b3c:	2000079c 	.word	0x2000079c
 8010b40:	200006f4 	.word	0x200006f4

08010b44 <SetBeatGrid>:
	VLine(41 + file_pos, 220, 40, 0x00FFFFFF);
}

void SetBeatGrid()
{
	if(position != file_pos_wide) {
 8010b44:	4b3e      	ldr	r3, [pc, #248]	; (8010c40 <SetBeatGrid+0xfc>)
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	4b3e      	ldr	r3, [pc, #248]	; (8010c44 <SetBeatGrid+0x100>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d022      	beq.n	8010b96 <SetBeatGrid+0x52>
		position = file_pos_wide;
 8010b50:	4a3b      	ldr	r2, [pc, #236]	; (8010c40 <SetBeatGrid+0xfc>)
 8010b52:	6013      	str	r3, [r2, #0]
		if(stretch > 1) {
 8010b54:	4b3c      	ldr	r3, [pc, #240]	; (8010c48 <SetBeatGrid+0x104>)
 8010b56:	edd3 7a00 	vldr	s15, [r3]
 8010b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b66:	dc04      	bgt.n	8010b72 <SetBeatGrid+0x2e>
 8010b68:	e015      	b.n	8010b96 <SetBeatGrid+0x52>
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
				position++;
 8010b6a:	4a35      	ldr	r2, [pc, #212]	; (8010c40 <SetBeatGrid+0xfc>)
 8010b6c:	6813      	ldr	r3, [r2, #0]
 8010b6e:	3301      	adds	r3, #1
 8010b70:	6013      	str	r3, [r2, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 8010b72:	4b33      	ldr	r3, [pc, #204]	; (8010c40 <SetBeatGrid+0xfc>)
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010b7a:	ee17 1a10 	vmov	r1, s14
 8010b7e:	fb92 f3f1 	sdiv	r3, r2, r1
 8010b82:	fb01 2213 	mls	r2, r1, r3, r2
 8010b86:	4b31      	ldr	r3, [pc, #196]	; (8010c4c <SetBeatGrid+0x108>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	fb93 f0f1 	sdiv	r0, r3, r1
 8010b8e:	fb01 3310 	mls	r3, r1, r0, r3
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d1e9      	bne.n	8010b6a <SetBeatGrid+0x26>
			}
		}
	}
	beat = 0;
 8010b96:	2300      	movs	r3, #0
 8010b98:	4a2d      	ldr	r2, [pc, #180]	; (8010c50 <SetBeatGrid+0x10c>)
 8010b9a:	6013      	str	r3, [r2, #0]
	first_beat = 0;
 8010b9c:	4a2d      	ldr	r2, [pc, #180]	; (8010c54 <SetBeatGrid+0x110>)
 8010b9e:	6013      	str	r3, [r2, #0]
	int32_t check = position + (-240)*stretch;
 8010ba0:	4b27      	ldr	r3, [pc, #156]	; (8010c40 <SetBeatGrid+0xfc>)
 8010ba2:	edd3 7a00 	vldr	s15, [r3]
 8010ba6:	4b28      	ldr	r3, [pc, #160]	; (8010c48 <SetBeatGrid+0x104>)
 8010ba8:	ed93 7a00 	vldr	s14, [r3]
 8010bac:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8010c58 <SetBeatGrid+0x114>
 8010bb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bc0:	ee17 1a90 	vmov	r1, s15
	if(check > 0) {
 8010bc4:	2900      	cmp	r1, #0
 8010bc6:	dc07      	bgt.n	8010bd8 <SetBeatGrid+0x94>
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
			first_beat++;
		}
	}
	if(position > 0) {
 8010bc8:	4b1d      	ldr	r3, [pc, #116]	; (8010c40 <SetBeatGrid+0xfc>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	dc1c      	bgt.n	8010c0a <SetBeatGrid+0xc6>
 8010bd0:	4770      	bx	lr
			first_beat++;
 8010bd2:	3201      	adds	r2, #1
 8010bd4:	4b1f      	ldr	r3, [pc, #124]	; (8010c54 <SetBeatGrid+0x110>)
 8010bd6:	601a      	str	r2, [r3, #0]
		while(((int32_t)(rekordbox.timeindex[first_beat]*150/1000 <= check)) && (first_beat <= rekordbox.timezones)) {
 8010bd8:	4b1e      	ldr	r3, [pc, #120]	; (8010c54 <SetBeatGrid+0x110>)
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	f202 40aa 	addw	r0, r2, #1194	; 0x4aa
 8010be0:	4b1e      	ldr	r3, [pc, #120]	; (8010c5c <SetBeatGrid+0x118>)
 8010be2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010be6:	2096      	movs	r0, #150	; 0x96
 8010be8:	fb00 f303 	mul.w	r3, r0, r3
 8010bec:	481c      	ldr	r0, [pc, #112]	; (8010c60 <SetBeatGrid+0x11c>)
 8010bee:	fba0 0303 	umull	r0, r3, r0, r3
 8010bf2:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 8010bf6:	d3e7      	bcc.n	8010bc8 <SetBeatGrid+0x84>
 8010bf8:	4b18      	ldr	r3, [pc, #96]	; (8010c5c <SetBeatGrid+0x118>)
 8010bfa:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d9e7      	bls.n	8010bd2 <SetBeatGrid+0x8e>
 8010c02:	e7e1      	b.n	8010bc8 <SetBeatGrid+0x84>
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
			beat++;
 8010c04:	3201      	adds	r2, #1
 8010c06:	4b12      	ldr	r3, [pc, #72]	; (8010c50 <SetBeatGrid+0x10c>)
 8010c08:	601a      	str	r2, [r3, #0]
		while((rekordbox.timeindex[beat]*150/1000 <= position) && (beat <= rekordbox.timezones)) {
 8010c0a:	4b11      	ldr	r3, [pc, #68]	; (8010c50 <SetBeatGrid+0x10c>)
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	f202 41aa 	addw	r1, r2, #1194	; 0x4aa
 8010c12:	4b12      	ldr	r3, [pc, #72]	; (8010c5c <SetBeatGrid+0x118>)
 8010c14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c18:	2196      	movs	r1, #150	; 0x96
 8010c1a:	fb01 f303 	mul.w	r3, r1, r3
 8010c1e:	4910      	ldr	r1, [pc, #64]	; (8010c60 <SetBeatGrid+0x11c>)
 8010c20:	fba1 1303 	umull	r1, r3, r1, r3
 8010c24:	4906      	ldr	r1, [pc, #24]	; (8010c40 <SetBeatGrid+0xfc>)
 8010c26:	6809      	ldr	r1, [r1, #0]
 8010c28:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 8010c2c:	d304      	bcc.n	8010c38 <SetBeatGrid+0xf4>
 8010c2e:	4b0b      	ldr	r3, [pc, #44]	; (8010c5c <SetBeatGrid+0x118>)
 8010c30:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d2e5      	bcs.n	8010c04 <SetBeatGrid+0xc0>
		}
		beat--;
 8010c38:	3a01      	subs	r2, #1
 8010c3a:	4b05      	ldr	r3, [pc, #20]	; (8010c50 <SetBeatGrid+0x10c>)
 8010c3c:	601a      	str	r2, [r3, #0]
	}
}
 8010c3e:	4770      	bx	lr
 8010c40:	20000608 	.word	0x20000608
 8010c44:	2000e3cc 	.word	0x2000e3cc
 8010c48:	20000028 	.word	0x20000028
 8010c4c:	200005e0 	.word	0x200005e0
 8010c50:	200005dc 	.word	0x200005dc
 8010c54:	200005fc 	.word	0x200005fc
 8010c58:	c3700000 	.word	0xc3700000
 8010c5c:	20014618 	.word	0x20014618
 8010c60:	10624dd3 	.word	0x10624dd3

08010c64 <DrawElement>:

// draws element
void DrawElement(uint16_t width, uint16_t height, uint16_t xpos, uint16_t ypos, uint32_t color, const uint16_t* element)
{
 8010c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c68:	b083      	sub	sp, #12
 8010c6a:	9001      	str	r0, [sp, #4]
 8010c6c:	460f      	mov	r7, r1
 8010c6e:	4691      	mov	r9, r2
 8010c70:	4698      	mov	r8, r3
 8010c72:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
	uint16_t i = 0;
 8010c76:	2600      	movs	r6, #0
	while(i < width) {
 8010c78:	e02f      	b.n	8010cda <DrawElement+0x76>
		while(k < height) {
			if(((element[i] >> k) & 1) == 1) {
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
			}
			else {
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = 0;
 8010c7a:	4b1c      	ldr	r3, [pc, #112]	; (8010cec <DrawElement+0x88>)
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	4a1c      	ldr	r2, [pc, #112]	; (8010cf0 <DrawElement+0x8c>)
 8010c80:	2134      	movs	r1, #52	; 0x34
 8010c82:	fb01 2203 	mla	r2, r1, r3, r2
 8010c86:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8010c88:	eba8 0304 	sub.w	r3, r8, r4
 8010c8c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8010c8e:	fb02 9303 	mla	r3, r2, r3, r9
 8010c92:	4433      	add	r3, r6
 8010c94:	2200      	movs	r2, #0
 8010c96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			k++;
 8010c9a:	3401      	adds	r4, #1
 8010c9c:	b2a4      	uxth	r4, r4
		while(k < height) {
 8010c9e:	42bc      	cmp	r4, r7
 8010ca0:	d219      	bcs.n	8010cd6 <DrawElement+0x72>
			if(((element[i] >> k) & 1) == 1) {
 8010ca2:	f83a 3016 	ldrh.w	r3, [sl, r6, lsl #1]
 8010ca6:	4123      	asrs	r3, r4
 8010ca8:	f013 0f01 	tst.w	r3, #1
 8010cac:	d0e5      	beq.n	8010c7a <DrawElement+0x16>
				*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((ypos - k) * hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(color);
 8010cae:	4b0f      	ldr	r3, [pc, #60]	; (8010cec <DrawElement+0x88>)
 8010cb0:	781a      	ldrb	r2, [r3, #0]
 8010cb2:	4b0f      	ldr	r3, [pc, #60]	; (8010cf0 <DrawElement+0x8c>)
 8010cb4:	2134      	movs	r1, #52	; 0x34
 8010cb6:	fb01 3302 	mla	r3, r1, r2, r3
 8010cba:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 8010cbe:	eba8 0504 	sub.w	r5, r8, r4
 8010cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010cc4:	fb03 9505 	mla	r5, r3, r5, r9
 8010cc8:	4435      	add	r5, r6
 8010cca:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010ccc:	f7ff fed8 	bl	8010a80 <Color_Convertion>
 8010cd0:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
 8010cd4:	e7e1      	b.n	8010c9a <DrawElement+0x36>
		}
		i++;
 8010cd6:	3601      	adds	r6, #1
 8010cd8:	b2b6      	uxth	r6, r6
	while(i < width) {
 8010cda:	9b01      	ldr	r3, [sp, #4]
 8010cdc:	429e      	cmp	r6, r3
 8010cde:	d201      	bcs.n	8010ce4 <DrawElement+0x80>
		uint16_t k = 0;
 8010ce0:	2400      	movs	r4, #0
 8010ce2:	e7dc      	b.n	8010c9e <DrawElement+0x3a>
	}
}
 8010ce4:	b003      	add	sp, #12
 8010ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cea:	bf00      	nop
 8010cec:	2000079c 	.word	0x2000079c
 8010cf0:	200006f4 	.word	0x200006f4

08010cf4 <VLine>:
	VLine(299, 54, 9, 0x000000FF);
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
}

void VLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
{
 8010cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	4616      	mov	r6, r2
 8010cfa:	461d      	mov	r5, r3
	uint32_t Xaddress = 0;
    /* Get the line address */
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8010cfc:	4b17      	ldr	r3, [pc, #92]	; (8010d5c <VLine+0x68>)
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	4c17      	ldr	r4, [pc, #92]	; (8010d60 <VLine+0x6c>)
 8010d02:	2234      	movs	r2, #52	; 0x34
 8010d04:	fb02 4403 	mla	r4, r2, r3, r4
 8010d08:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8010d0a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8010d0c:	fb04 0001 	mla	r0, r4, r1, r0
 8010d10:	eb07 0740 	add.w	r7, r7, r0, lsl #1
    /* Write line */
    hdma2d.Init.Mode = DMA2D_R2M;
 8010d14:	4813      	ldr	r0, [pc, #76]	; (8010d64 <VLine+0x70>)
 8010d16:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8010d1a:	6043      	str	r3, [r0, #4]
    /* RGB565 format */
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 8010d1c:	2302      	movs	r3, #2
 8010d1e:	6083      	str	r3, [r0, #8]
    hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - 1;
 8010d20:	3c01      	subs	r4, #1
 8010d22:	60c4      	str	r4, [r0, #12]
    hdma2d.Instance = DMA2D;
 8010d24:	4b10      	ldr	r3, [pc, #64]	; (8010d68 <VLine+0x74>)
 8010d26:	6003      	str	r3, [r0, #0]
    /* DMA2D Initialization */
    if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8010d28:	f7f0 ff26 	bl	8001b78 <HAL_DMA2D_Init>
 8010d2c:	b108      	cbz	r0, 8010d32 <VLine+0x3e>
    			/* Polling For DMA transfer */
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
    		}
    	}
    }
}
 8010d2e:	b003      	add	sp, #12
 8010d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 8010d32:	4b0a      	ldr	r3, [pc, #40]	; (8010d5c <VLine+0x68>)
 8010d34:	7819      	ldrb	r1, [r3, #0]
 8010d36:	480b      	ldr	r0, [pc, #44]	; (8010d64 <VLine+0x70>)
 8010d38:	f7f1 f854 	bl	8001de4 <HAL_DMA2D_ConfigLayer>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d1f6      	bne.n	8010d2e <VLine+0x3a>
    		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, 1, Length) == HAL_OK) {
 8010d40:	9600      	str	r6, [sp, #0]
 8010d42:	2301      	movs	r3, #1
 8010d44:	463a      	mov	r2, r7
 8010d46:	4629      	mov	r1, r5
 8010d48:	4806      	ldr	r0, [pc, #24]	; (8010d64 <VLine+0x70>)
 8010d4a:	f7f0 ff73 	bl	8001c34 <HAL_DMA2D_Start>
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d1ed      	bne.n	8010d2e <VLine+0x3a>
    			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8010d52:	210a      	movs	r1, #10
 8010d54:	4803      	ldr	r0, [pc, #12]	; (8010d64 <VLine+0x70>)
 8010d56:	f7f0 ffa5 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
}
 8010d5a:	e7e8      	b.n	8010d2e <VLine+0x3a>
 8010d5c:	2000079c 	.word	0x2000079c
 8010d60:	200006f4 	.word	0x200006f4
 8010d64:	2000060c 	.word	0x2000060c
 8010d68:	4002b000 	.word	0x4002b000

08010d6c <HLine>:

void HLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint32_t color)
{
 8010d6c:	b570      	push	{r4, r5, r6, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	4616      	mov	r6, r2
 8010d72:	461d      	mov	r5, r3
	uint32_t Xaddress = 0;
    Xaddress = (hltdc.LayerCfg[ActiveLayer].FBStartAdress) + 2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos + Xpos);
 8010d74:	4b19      	ldr	r3, [pc, #100]	; (8010ddc <HLine+0x70>)
 8010d76:	f893 c000 	ldrb.w	ip, [r3]
 8010d7a:	4c19      	ldr	r4, [pc, #100]	; (8010de0 <HLine+0x74>)
 8010d7c:	2334      	movs	r3, #52	; 0x34
 8010d7e:	fb03 4c0c 	mla	ip, r3, ip, r4
 8010d82:	f8dc 405c 	ldr.w	r4, [ip, #92]	; 0x5c
 8010d86:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8010d8a:	fb03 0001 	mla	r0, r3, r1, r0
 8010d8e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
	/* Write line */
	hdma2d.Init.Mode = DMA2D_R2M;
 8010d92:	4814      	ldr	r0, [pc, #80]	; (8010de4 <HLine+0x78>)
 8010d94:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8010d98:	6043      	str	r3, [r0, #4]
	/* RGB565 format */
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 8010d9a:	2302      	movs	r3, #2
 8010d9c:	6083      	str	r3, [r0, #8]
	hdma2d.Init.OutputOffset = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	60c3      	str	r3, [r0, #12]
	hdma2d.Instance = DMA2D;
 8010da2:	4b11      	ldr	r3, [pc, #68]	; (8010de8 <HLine+0x7c>)
 8010da4:	6003      	str	r3, [r0, #0]
	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8010da6:	f7f0 fee7 	bl	8001b78 <HAL_DMA2D_Init>
 8010daa:	b108      	cbz	r0, 8010db0 <HLine+0x44>
	   			/* Polling For DMA transfer */
	   			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
	   		}
	   	}
	}
}
 8010dac:	b002      	add	sp, #8
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
	 	if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK) {
 8010db0:	4b0a      	ldr	r3, [pc, #40]	; (8010ddc <HLine+0x70>)
 8010db2:	7819      	ldrb	r1, [r3, #0]
 8010db4:	480b      	ldr	r0, [pc, #44]	; (8010de4 <HLine+0x78>)
 8010db6:	f7f1 f815 	bl	8001de4 <HAL_DMA2D_ConfigLayer>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d1f6      	bne.n	8010dac <HLine+0x40>
	   		if (HAL_DMA2D_Start(&hdma2d, color, Xaddress, Length, 1) == HAL_OK) {
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	4633      	mov	r3, r6
 8010dc4:	4622      	mov	r2, r4
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	4806      	ldr	r0, [pc, #24]	; (8010de4 <HLine+0x78>)
 8010dca:	f7f0 ff33 	bl	8001c34 <HAL_DMA2D_Start>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d1ec      	bne.n	8010dac <HLine+0x40>
	   			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8010dd2:	210a      	movs	r1, #10
 8010dd4:	4803      	ldr	r0, [pc, #12]	; (8010de4 <HLine+0x78>)
 8010dd6:	f7f0 ff65 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
}
 8010dda:	e7e7      	b.n	8010dac <HLine+0x40>
 8010ddc:	2000079c 	.word	0x2000079c
 8010de0:	200006f4 	.word	0x200006f4
 8010de4:	2000060c 	.word	0x2000060c
 8010de8:	4002b000 	.word	0x4002b000

08010dec <Rectangle>:

void Rectangle(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint32_t color)
{
 8010dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dee:	b083      	sub	sp, #12
 8010df0:	4615      	mov	r5, r2
 8010df2:	461e      	mov	r6, r3
	uint32_t xpos = hltdc.LayerCfg[ActiveLayer].FBStartAdress+2*(hltdc.LayerCfg[ActiveLayer].ImageWidth*Ypos+Xpos);
 8010df4:	4b10      	ldr	r3, [pc, #64]	; (8010e38 <Rectangle+0x4c>)
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	4c10      	ldr	r4, [pc, #64]	; (8010e3c <Rectangle+0x50>)
 8010dfa:	2234      	movs	r2, #52	; 0x34
 8010dfc:	fb02 4403 	mla	r4, r2, r3, r4
 8010e00:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8010e02:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8010e04:	fb04 0001 	mla	r0, r4, r1, r0
 8010e08:	eb07 0740 	add.w	r7, r7, r0, lsl #1
	hdma2d.Init.OutputOffset = hltdc.LayerCfg[ActiveLayer].ImageWidth - Xsize;
 8010e0c:	1b64      	subs	r4, r4, r5
 8010e0e:	480c      	ldr	r0, [pc, #48]	; (8010e40 <Rectangle+0x54>)
 8010e10:	60c4      	str	r4, [r0, #12]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) {
 8010e12:	f7f0 feb1 	bl	8001b78 <HAL_DMA2D_Init>
 8010e16:	b108      	cbz	r0, 8010e1c <Rectangle+0x30>
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
		}
	}

}
 8010e18:	b003      	add	sp, #12
 8010e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (HAL_DMA2D_Start(&hdma2d, color, xpos, Xsize, Ysize) == HAL_OK) {
 8010e1c:	9600      	str	r6, [sp, #0]
 8010e1e:	462b      	mov	r3, r5
 8010e20:	463a      	mov	r2, r7
 8010e22:	9908      	ldr	r1, [sp, #32]
 8010e24:	4806      	ldr	r0, [pc, #24]	; (8010e40 <Rectangle+0x54>)
 8010e26:	f7f0 ff05 	bl	8001c34 <HAL_DMA2D_Start>
 8010e2a:	2800      	cmp	r0, #0
 8010e2c:	d1f4      	bne.n	8010e18 <Rectangle+0x2c>
			HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8010e2e:	2164      	movs	r1, #100	; 0x64
 8010e30:	4803      	ldr	r0, [pc, #12]	; (8010e40 <Rectangle+0x54>)
 8010e32:	f7f0 ff37 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
}
 8010e36:	e7ef      	b.n	8010e18 <Rectangle+0x2c>
 8010e38:	2000079c 	.word	0x2000079c
 8010e3c:	200006f4 	.word	0x200006f4
 8010e40:	2000060c 	.word	0x2000060c

08010e44 <Pixel>:

void Pixel(uint16_t Xpos, uint16_t Ypos, uint32_t color)
{
 8010e44:	b538      	push	{r3, r4, r5, lr}
 8010e46:	4604      	mov	r4, r0
	*(__IO uint16_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*hltdc.LayerCfg[ActiveLayer].ImageWidth + Xpos))) = Color_Convertion(color);
 8010e48:	4b07      	ldr	r3, [pc, #28]	; (8010e68 <Pixel+0x24>)
 8010e4a:	7818      	ldrb	r0, [r3, #0]
 8010e4c:	4b07      	ldr	r3, [pc, #28]	; (8010e6c <Pixel+0x28>)
 8010e4e:	2534      	movs	r5, #52	; 0x34
 8010e50:	fb05 3300 	mla	r3, r5, r0, r3
 8010e54:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8010e56:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010e58:	fb00 4401 	mla	r4, r0, r1, r4
 8010e5c:	4610      	mov	r0, r2
 8010e5e:	f7ff fe0f 	bl	8010a80 <Color_Convertion>
 8010e62:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
}
 8010e66:	bd38      	pop	{r3, r4, r5, pc}
 8010e68:	2000079c 	.word	0x2000079c
 8010e6c:	200006f4 	.word	0x200006f4

08010e70 <DrawDigit>:

void DrawDigit(uint8_t digit, uint16_t Xpos, uint16_t Ypos, uint8_t width, uint32_t color)
{
 8010e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e74:	b085      	sub	sp, #20
 8010e76:	468b      	mov	fp, r1
 8010e78:	4615      	mov	r5, r2
 8010e7a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	switch(digit) {
 8010e7c:	2809      	cmp	r0, #9
 8010e7e:	d87c      	bhi.n	8010f7a <DrawDigit+0x10a>
 8010e80:	e8df f010 	tbh	[pc, r0, lsl #1]
 8010e84:	007e000a 	.word	0x007e000a
 8010e88:	011300b0 	.word	0x011300b0
 8010e8c:	01cc017a 	.word	0x01cc017a
 8010e90:	02a1022f 	.word	0x02a1022f
 8010e94:	036802e4 	.word	0x036802e4
	case 0: {
		// a
		HLine(Xpos + 1, Ypos, width - 2, color);
 8010e98:	f101 0901 	add.w	r9, r1, #1
 8010e9c:	fa1f f989 	uxth.w	r9, r9
 8010ea0:	b29f      	uxth	r7, r3
 8010ea2:	1e9c      	subs	r4, r3, #2
 8010ea4:	b2a4      	uxth	r4, r4
 8010ea6:	4633      	mov	r3, r6
 8010ea8:	4622      	mov	r2, r4
 8010eaa:	4629      	mov	r1, r5
 8010eac:	4648      	mov	r0, r9
 8010eae:	f7ff ff5d 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8010eb2:	f10b 0302 	add.w	r3, fp, #2
 8010eb6:	b298      	uxth	r0, r3
 8010eb8:	1c6b      	adds	r3, r5, #1
 8010eba:	b299      	uxth	r1, r3
 8010ebc:	f1a7 0804 	sub.w	r8, r7, #4
 8010ec0:	fa1f f888 	uxth.w	r8, r8
 8010ec4:	4633      	mov	r3, r6
 8010ec6:	4642      	mov	r2, r8
 8010ec8:	468a      	mov	sl, r1
 8010eca:	9000      	str	r0, [sp, #0]
 8010ecc:	f7ff ff4e 	bl	8010d6c <HLine>
		// f
		VLine(Xpos, Ypos + 1, width - 2, color);
 8010ed0:	4633      	mov	r3, r6
 8010ed2:	4622      	mov	r2, r4
 8010ed4:	f8cd a004 	str.w	sl, [sp, #4]
 8010ed8:	4651      	mov	r1, sl
 8010eda:	4658      	mov	r0, fp
 8010edc:	f7ff ff0a 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8010ee0:	1cab      	adds	r3, r5, #2
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	4633      	mov	r3, r6
 8010ee8:	4642      	mov	r2, r8
 8010eea:	9102      	str	r1, [sp, #8]
 8010eec:	4648      	mov	r0, r9
 8010eee:	f7ff ff01 	bl	8010cf4 <VLine>
		// e
		VLine(Xpos, Ypos + width, width - 2, color);
 8010ef2:	eb07 0a05 	add.w	sl, r7, r5
 8010ef6:	fa1f fa8a 	uxth.w	sl, sl
 8010efa:	4633      	mov	r3, r6
 8010efc:	4622      	mov	r2, r4
 8010efe:	4651      	mov	r1, sl
 8010f00:	4658      	mov	r0, fp
 8010f02:	f7ff fef7 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8010f06:	f10a 0301 	add.w	r3, sl, #1
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	4610      	mov	r0, r2
 8010f0e:	4633      	mov	r3, r6
 8010f10:	4642      	mov	r2, r8
 8010f12:	9003      	str	r0, [sp, #12]
 8010f14:	4601      	mov	r1, r0
 8010f16:	4648      	mov	r0, r9
 8010f18:	f7ff feec 	bl	8010cf4 <VLine>
		// d
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8010f1c:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8010f20:	b2ad      	uxth	r5, r5
 8010f22:	1ea9      	subs	r1, r5, #2
 8010f24:	4633      	mov	r3, r6
 8010f26:	4622      	mov	r2, r4
 8010f28:	b289      	uxth	r1, r1
 8010f2a:	4648      	mov	r0, r9
 8010f2c:	f7ff ff1e 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8010f30:	3d03      	subs	r5, #3
 8010f32:	4633      	mov	r3, r6
 8010f34:	4642      	mov	r2, r8
 8010f36:	b2a9      	uxth	r1, r5
 8010f38:	9800      	ldr	r0, [sp, #0]
 8010f3a:	f7ff ff17 	bl	8010d6c <HLine>
		// c
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8010f3e:	445f      	add	r7, fp
 8010f40:	b2bf      	uxth	r7, r7
 8010f42:	1e7d      	subs	r5, r7, #1
 8010f44:	b2ad      	uxth	r5, r5
 8010f46:	4633      	mov	r3, r6
 8010f48:	4622      	mov	r2, r4
 8010f4a:	4651      	mov	r1, sl
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f7ff fed1 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8010f52:	3f02      	subs	r7, #2
 8010f54:	b2bf      	uxth	r7, r7
 8010f56:	4633      	mov	r3, r6
 8010f58:	4642      	mov	r2, r8
 8010f5a:	9903      	ldr	r1, [sp, #12]
 8010f5c:	4638      	mov	r0, r7
 8010f5e:	f7ff fec9 	bl	8010cf4 <VLine>
		// b
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8010f62:	4633      	mov	r3, r6
 8010f64:	4622      	mov	r2, r4
 8010f66:	9901      	ldr	r1, [sp, #4]
 8010f68:	4628      	mov	r0, r5
 8010f6a:	f7ff fec3 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8010f6e:	4633      	mov	r3, r6
 8010f70:	4642      	mov	r2, r8
 8010f72:	9902      	ldr	r1, [sp, #8]
 8010f74:	4638      	mov	r0, r7
 8010f76:	f7ff febd 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
		break;
	}
	}
}
 8010f7a:	b005      	add	sp, #20
 8010f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8010f80:	b29f      	uxth	r7, r3
 8010f82:	eb03 0a01 	add.w	sl, r3, r1
 8010f86:	fa1f fa8a 	uxth.w	sl, sl
 8010f8a:	f10a 39ff 	add.w	r9, sl, #4294967295
 8010f8e:	fa1f f989 	uxth.w	r9, r9
 8010f92:	eb03 0805 	add.w	r8, r3, r5
 8010f96:	fa1f f888 	uxth.w	r8, r8
 8010f9a:	1e9c      	subs	r4, r3, #2
 8010f9c:	b2a4      	uxth	r4, r4
 8010f9e:	4633      	mov	r3, r6
 8010fa0:	4622      	mov	r2, r4
 8010fa2:	4641      	mov	r1, r8
 8010fa4:	4648      	mov	r0, r9
 8010fa6:	f7ff fea5 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8010faa:	f1aa 0a02 	sub.w	sl, sl, #2
 8010fae:	fa1f fa8a 	uxth.w	sl, sl
 8010fb2:	3f04      	subs	r7, #4
 8010fb4:	b2bf      	uxth	r7, r7
 8010fb6:	f108 0101 	add.w	r1, r8, #1
 8010fba:	4633      	mov	r3, r6
 8010fbc:	463a      	mov	r2, r7
 8010fbe:	b289      	uxth	r1, r1
 8010fc0:	4650      	mov	r0, sl
 8010fc2:	f7ff fe97 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8010fc6:	1c69      	adds	r1, r5, #1
 8010fc8:	4633      	mov	r3, r6
 8010fca:	4622      	mov	r2, r4
 8010fcc:	b289      	uxth	r1, r1
 8010fce:	4648      	mov	r0, r9
 8010fd0:	f7ff fe90 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8010fd4:	1ca9      	adds	r1, r5, #2
 8010fd6:	4633      	mov	r3, r6
 8010fd8:	463a      	mov	r2, r7
 8010fda:	b289      	uxth	r1, r1
 8010fdc:	4650      	mov	r0, sl
 8010fde:	f7ff fe89 	bl	8010cf4 <VLine>
		break;
 8010fe2:	e7ca      	b.n	8010f7a <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8010fe4:	f101 0a01 	add.w	sl, r1, #1
 8010fe8:	fa1f fa8a 	uxth.w	sl, sl
 8010fec:	b29f      	uxth	r7, r3
 8010fee:	1e9c      	subs	r4, r3, #2
 8010ff0:	b2a4      	uxth	r4, r4
 8010ff2:	4633      	mov	r3, r6
 8010ff4:	4622      	mov	r2, r4
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	4650      	mov	r0, sl
 8010ffa:	f7ff feb7 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8010ffe:	f10b 0302 	add.w	r3, fp, #2
 8011002:	b298      	uxth	r0, r3
 8011004:	1c6b      	adds	r3, r5, #1
 8011006:	b299      	uxth	r1, r3
 8011008:	f1a7 0904 	sub.w	r9, r7, #4
 801100c:	fa1f f989 	uxth.w	r9, r9
 8011010:	4633      	mov	r3, r6
 8011012:	464a      	mov	r2, r9
 8011014:	9101      	str	r1, [sp, #4]
 8011016:	9000      	str	r0, [sp, #0]
 8011018:	f7ff fea8 	bl	8010d6c <HLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 801101c:	eb07 0805 	add.w	r8, r7, r5
 8011020:	fa1f f888 	uxth.w	r8, r8
 8011024:	4633      	mov	r3, r6
 8011026:	4622      	mov	r2, r4
 8011028:	4641      	mov	r1, r8
 801102a:	4658      	mov	r0, fp
 801102c:	f7ff fe62 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 8011030:	f108 0101 	add.w	r1, r8, #1
 8011034:	4633      	mov	r3, r6
 8011036:	464a      	mov	r2, r9
 8011038:	b289      	uxth	r1, r1
 801103a:	4650      	mov	r0, sl
 801103c:	f7ff fe5a 	bl	8010cf4 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8011040:	eb05 0347 	add.w	r3, r5, r7, lsl #1
 8011044:	b29b      	uxth	r3, r3
 8011046:	9302      	str	r3, [sp, #8]
 8011048:	1e99      	subs	r1, r3, #2
 801104a:	4633      	mov	r3, r6
 801104c:	4622      	mov	r2, r4
 801104e:	b289      	uxth	r1, r1
 8011050:	4650      	mov	r0, sl
 8011052:	f7ff fe8b 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8011056:	9b02      	ldr	r3, [sp, #8]
 8011058:	1ed9      	subs	r1, r3, #3
 801105a:	4633      	mov	r3, r6
 801105c:	464a      	mov	r2, r9
 801105e:	b289      	uxth	r1, r1
 8011060:	9800      	ldr	r0, [sp, #0]
 8011062:	f7ff fe83 	bl	8010d6c <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8011066:	f108 31ff 	add.w	r1, r8, #4294967295
 801106a:	4633      	mov	r3, r6
 801106c:	4622      	mov	r2, r4
 801106e:	b289      	uxth	r1, r1
 8011070:	4650      	mov	r0, sl
 8011072:	f7ff fe7b 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011076:	f1a8 0102 	sub.w	r1, r8, #2
 801107a:	4633      	mov	r3, r6
 801107c:	464a      	mov	r2, r9
 801107e:	b289      	uxth	r1, r1
 8011080:	9800      	ldr	r0, [sp, #0]
 8011082:	f7ff fe73 	bl	8010d6c <HLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011086:	445f      	add	r7, fp
 8011088:	b2bf      	uxth	r7, r7
 801108a:	1e78      	subs	r0, r7, #1
 801108c:	4633      	mov	r3, r6
 801108e:	4622      	mov	r2, r4
 8011090:	9901      	ldr	r1, [sp, #4]
 8011092:	b280      	uxth	r0, r0
 8011094:	f7ff fe2e 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011098:	1ca9      	adds	r1, r5, #2
 801109a:	3f02      	subs	r7, #2
 801109c:	4633      	mov	r3, r6
 801109e:	464a      	mov	r2, r9
 80110a0:	b289      	uxth	r1, r1
 80110a2:	b2b8      	uxth	r0, r7
 80110a4:	f7ff fe26 	bl	8010cf4 <VLine>
		break;
 80110a8:	e767      	b.n	8010f7a <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 80110aa:	1c4a      	adds	r2, r1, #1
 80110ac:	b290      	uxth	r0, r2
 80110ae:	b29f      	uxth	r7, r3
 80110b0:	1e9c      	subs	r4, r3, #2
 80110b2:	b2a4      	uxth	r4, r4
 80110b4:	4633      	mov	r3, r6
 80110b6:	4622      	mov	r2, r4
 80110b8:	4629      	mov	r1, r5
 80110ba:	9000      	str	r0, [sp, #0]
 80110bc:	f7ff fe56 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 80110c0:	f10b 0a02 	add.w	sl, fp, #2
 80110c4:	fa1f fa8a 	uxth.w	sl, sl
 80110c8:	1c6b      	adds	r3, r5, #1
 80110ca:	b299      	uxth	r1, r3
 80110cc:	f1a7 0904 	sub.w	r9, r7, #4
 80110d0:	fa1f f989 	uxth.w	r9, r9
 80110d4:	4633      	mov	r3, r6
 80110d6:	464a      	mov	r2, r9
 80110d8:	9101      	str	r1, [sp, #4]
 80110da:	4650      	mov	r0, sl
 80110dc:	f7ff fe46 	bl	8010d6c <HLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 80110e0:	eb05 0847 	add.w	r8, r5, r7, lsl #1
 80110e4:	fa1f f888 	uxth.w	r8, r8
 80110e8:	f1a8 0102 	sub.w	r1, r8, #2
 80110ec:	4633      	mov	r3, r6
 80110ee:	4622      	mov	r2, r4
 80110f0:	b289      	uxth	r1, r1
 80110f2:	9800      	ldr	r0, [sp, #0]
 80110f4:	f7ff fe3a 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 80110f8:	f1a8 0103 	sub.w	r1, r8, #3
 80110fc:	4633      	mov	r3, r6
 80110fe:	464a      	mov	r2, r9
 8011100:	b289      	uxth	r1, r1
 8011102:	4650      	mov	r0, sl
 8011104:	f7ff fe32 	bl	8010d6c <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8011108:	eb07 0805 	add.w	r8, r7, r5
 801110c:	fa1f f888 	uxth.w	r8, r8
 8011110:	f108 31ff 	add.w	r1, r8, #4294967295
 8011114:	4633      	mov	r3, r6
 8011116:	4622      	mov	r2, r4
 8011118:	b289      	uxth	r1, r1
 801111a:	9800      	ldr	r0, [sp, #0]
 801111c:	f7ff fe26 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011120:	f1a8 0102 	sub.w	r1, r8, #2
 8011124:	4633      	mov	r3, r6
 8011126:	464a      	mov	r2, r9
 8011128:	b289      	uxth	r1, r1
 801112a:	4650      	mov	r0, sl
 801112c:	f7ff fe1e 	bl	8010d6c <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8011130:	445f      	add	r7, fp
 8011132:	b2bf      	uxth	r7, r7
 8011134:	f107 3aff 	add.w	sl, r7, #4294967295
 8011138:	fa1f fa8a 	uxth.w	sl, sl
 801113c:	4633      	mov	r3, r6
 801113e:	4622      	mov	r2, r4
 8011140:	4641      	mov	r1, r8
 8011142:	4650      	mov	r0, sl
 8011144:	f7ff fdd6 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8011148:	3f02      	subs	r7, #2
 801114a:	b2bf      	uxth	r7, r7
 801114c:	f108 0101 	add.w	r1, r8, #1
 8011150:	4633      	mov	r3, r6
 8011152:	464a      	mov	r2, r9
 8011154:	b289      	uxth	r1, r1
 8011156:	4638      	mov	r0, r7
 8011158:	f7ff fdcc 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801115c:	4633      	mov	r3, r6
 801115e:	4622      	mov	r2, r4
 8011160:	9901      	ldr	r1, [sp, #4]
 8011162:	4650      	mov	r0, sl
 8011164:	f7ff fdc6 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011168:	1ca9      	adds	r1, r5, #2
 801116a:	4633      	mov	r3, r6
 801116c:	464a      	mov	r2, r9
 801116e:	b289      	uxth	r1, r1
 8011170:	4638      	mov	r0, r7
 8011172:	f7ff fdbf 	bl	8010cf4 <VLine>
		break;
 8011176:	e700      	b.n	8010f7a <DrawDigit+0x10a>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8011178:	f105 0a01 	add.w	sl, r5, #1
 801117c:	fa1f fa8a 	uxth.w	sl, sl
 8011180:	b29f      	uxth	r7, r3
 8011182:	1e9c      	subs	r4, r3, #2
 8011184:	b2a4      	uxth	r4, r4
 8011186:	4633      	mov	r3, r6
 8011188:	4622      	mov	r2, r4
 801118a:	4651      	mov	r1, sl
 801118c:	4658      	mov	r0, fp
 801118e:	f7ff fdb1 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8011192:	f10b 0301 	add.w	r3, fp, #1
 8011196:	b298      	uxth	r0, r3
 8011198:	f105 0902 	add.w	r9, r5, #2
 801119c:	fa1f f989 	uxth.w	r9, r9
 80111a0:	f1a7 0804 	sub.w	r8, r7, #4
 80111a4:	fa1f f888 	uxth.w	r8, r8
 80111a8:	4633      	mov	r3, r6
 80111aa:	4642      	mov	r2, r8
 80111ac:	4649      	mov	r1, r9
 80111ae:	9000      	str	r0, [sp, #0]
 80111b0:	f7ff fda0 	bl	8010cf4 <VLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 80111b4:	443d      	add	r5, r7
 80111b6:	b2ad      	uxth	r5, r5
 80111b8:	1e69      	subs	r1, r5, #1
 80111ba:	4633      	mov	r3, r6
 80111bc:	4622      	mov	r2, r4
 80111be:	b289      	uxth	r1, r1
 80111c0:	9800      	ldr	r0, [sp, #0]
 80111c2:	f7ff fdd3 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 80111c6:	1ea9      	subs	r1, r5, #2
 80111c8:	f10b 0002 	add.w	r0, fp, #2
 80111cc:	4633      	mov	r3, r6
 80111ce:	4642      	mov	r2, r8
 80111d0:	b289      	uxth	r1, r1
 80111d2:	b280      	uxth	r0, r0
 80111d4:	f7ff fdca 	bl	8010d6c <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 80111d8:	445f      	add	r7, fp
 80111da:	b2bf      	uxth	r7, r7
 80111dc:	f107 3bff 	add.w	fp, r7, #4294967295
 80111e0:	fa1f fb8b 	uxth.w	fp, fp
 80111e4:	4633      	mov	r3, r6
 80111e6:	4622      	mov	r2, r4
 80111e8:	4629      	mov	r1, r5
 80111ea:	4658      	mov	r0, fp
 80111ec:	f7ff fd82 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 80111f0:	3f02      	subs	r7, #2
 80111f2:	b2bf      	uxth	r7, r7
 80111f4:	3501      	adds	r5, #1
 80111f6:	4633      	mov	r3, r6
 80111f8:	4642      	mov	r2, r8
 80111fa:	b2a9      	uxth	r1, r5
 80111fc:	4638      	mov	r0, r7
 80111fe:	f7ff fd79 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011202:	4633      	mov	r3, r6
 8011204:	4622      	mov	r2, r4
 8011206:	4651      	mov	r1, sl
 8011208:	4658      	mov	r0, fp
 801120a:	f7ff fd73 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801120e:	4633      	mov	r3, r6
 8011210:	4642      	mov	r2, r8
 8011212:	4649      	mov	r1, r9
 8011214:	4638      	mov	r0, r7
 8011216:	f7ff fd6d 	bl	8010cf4 <VLine>
		break;
 801121a:	e6ae      	b.n	8010f7a <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 801121c:	f101 0901 	add.w	r9, r1, #1
 8011220:	fa1f f989 	uxth.w	r9, r9
 8011224:	b29f      	uxth	r7, r3
 8011226:	1e9c      	subs	r4, r3, #2
 8011228:	b2a4      	uxth	r4, r4
 801122a:	4633      	mov	r3, r6
 801122c:	4622      	mov	r2, r4
 801122e:	4629      	mov	r1, r5
 8011230:	4648      	mov	r0, r9
 8011232:	f7ff fd9b 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8011236:	f10b 0302 	add.w	r3, fp, #2
 801123a:	b298      	uxth	r0, r3
 801123c:	f105 0a01 	add.w	sl, r5, #1
 8011240:	fa1f fa8a 	uxth.w	sl, sl
 8011244:	f1a7 0804 	sub.w	r8, r7, #4
 8011248:	fa1f f888 	uxth.w	r8, r8
 801124c:	4633      	mov	r3, r6
 801124e:	4642      	mov	r2, r8
 8011250:	4651      	mov	r1, sl
 8011252:	9000      	str	r0, [sp, #0]
 8011254:	f7ff fd8a 	bl	8010d6c <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8011258:	4633      	mov	r3, r6
 801125a:	4622      	mov	r2, r4
 801125c:	4651      	mov	r1, sl
 801125e:	4658      	mov	r0, fp
 8011260:	f7ff fd48 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8011264:	1ca9      	adds	r1, r5, #2
 8011266:	4633      	mov	r3, r6
 8011268:	4642      	mov	r2, r8
 801126a:	b289      	uxth	r1, r1
 801126c:	4648      	mov	r0, r9
 801126e:	f7ff fd41 	bl	8010cf4 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8011272:	eb05 0a47 	add.w	sl, r5, r7, lsl #1
 8011276:	fa1f fa8a 	uxth.w	sl, sl
 801127a:	f1aa 0102 	sub.w	r1, sl, #2
 801127e:	4633      	mov	r3, r6
 8011280:	4622      	mov	r2, r4
 8011282:	b289      	uxth	r1, r1
 8011284:	4648      	mov	r0, r9
 8011286:	f7ff fd71 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 801128a:	f1aa 0103 	sub.w	r1, sl, #3
 801128e:	4633      	mov	r3, r6
 8011290:	4642      	mov	r2, r8
 8011292:	b289      	uxth	r1, r1
 8011294:	f8dd a000 	ldr.w	sl, [sp]
 8011298:	4650      	mov	r0, sl
 801129a:	f7ff fd67 	bl	8010d6c <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 801129e:	443d      	add	r5, r7
 80112a0:	b2ad      	uxth	r5, r5
 80112a2:	1e69      	subs	r1, r5, #1
 80112a4:	4633      	mov	r3, r6
 80112a6:	4622      	mov	r2, r4
 80112a8:	b289      	uxth	r1, r1
 80112aa:	4648      	mov	r0, r9
 80112ac:	f7ff fd5e 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 80112b0:	1ea9      	subs	r1, r5, #2
 80112b2:	4633      	mov	r3, r6
 80112b4:	4642      	mov	r2, r8
 80112b6:	b289      	uxth	r1, r1
 80112b8:	4650      	mov	r0, sl
 80112ba:	f7ff fd57 	bl	8010d6c <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 80112be:	445f      	add	r7, fp
 80112c0:	b2bf      	uxth	r7, r7
 80112c2:	1e78      	subs	r0, r7, #1
 80112c4:	4633      	mov	r3, r6
 80112c6:	4622      	mov	r2, r4
 80112c8:	4629      	mov	r1, r5
 80112ca:	b280      	uxth	r0, r0
 80112cc:	f7ff fd12 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 80112d0:	3501      	adds	r5, #1
 80112d2:	3f02      	subs	r7, #2
 80112d4:	4633      	mov	r3, r6
 80112d6:	4642      	mov	r2, r8
 80112d8:	b2a9      	uxth	r1, r5
 80112da:	b2b8      	uxth	r0, r7
 80112dc:	f7ff fd0a 	bl	8010cf4 <VLine>
		break;
 80112e0:	e64b      	b.n	8010f7a <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 80112e2:	f101 0a01 	add.w	sl, r1, #1
 80112e6:	fa1f fa8a 	uxth.w	sl, sl
 80112ea:	b29f      	uxth	r7, r3
 80112ec:	1e9c      	subs	r4, r3, #2
 80112ee:	b2a4      	uxth	r4, r4
 80112f0:	4633      	mov	r3, r6
 80112f2:	4622      	mov	r2, r4
 80112f4:	4629      	mov	r1, r5
 80112f6:	4650      	mov	r0, sl
 80112f8:	f7ff fd38 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 80112fc:	f10b 0302 	add.w	r3, fp, #2
 8011300:	b298      	uxth	r0, r3
 8011302:	f105 0901 	add.w	r9, r5, #1
 8011306:	fa1f f989 	uxth.w	r9, r9
 801130a:	f1a7 0804 	sub.w	r8, r7, #4
 801130e:	fa1f f888 	uxth.w	r8, r8
 8011312:	4633      	mov	r3, r6
 8011314:	4642      	mov	r2, r8
 8011316:	4649      	mov	r1, r9
 8011318:	9000      	str	r0, [sp, #0]
 801131a:	f7ff fd27 	bl	8010d6c <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 801131e:	4633      	mov	r3, r6
 8011320:	4622      	mov	r2, r4
 8011322:	4649      	mov	r1, r9
 8011324:	4658      	mov	r0, fp
 8011326:	f7ff fce5 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 801132a:	1ca9      	adds	r1, r5, #2
 801132c:	4633      	mov	r3, r6
 801132e:	4642      	mov	r2, r8
 8011330:	b289      	uxth	r1, r1
 8011332:	4650      	mov	r0, sl
 8011334:	f7ff fcde 	bl	8010cf4 <VLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 8011338:	eb07 0905 	add.w	r9, r7, r5
 801133c:	fa1f f989 	uxth.w	r9, r9
 8011340:	4633      	mov	r3, r6
 8011342:	4622      	mov	r2, r4
 8011344:	4649      	mov	r1, r9
 8011346:	4658      	mov	r0, fp
 8011348:	f7ff fcd4 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 801134c:	f109 0301 	add.w	r3, r9, #1
 8011350:	b29b      	uxth	r3, r3
 8011352:	4619      	mov	r1, r3
 8011354:	4633      	mov	r3, r6
 8011356:	4642      	mov	r2, r8
 8011358:	9101      	str	r1, [sp, #4]
 801135a:	4650      	mov	r0, sl
 801135c:	f7ff fcca 	bl	8010cf4 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 8011360:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8011364:	b2ad      	uxth	r5, r5
 8011366:	1ea9      	subs	r1, r5, #2
 8011368:	4633      	mov	r3, r6
 801136a:	4622      	mov	r2, r4
 801136c:	b289      	uxth	r1, r1
 801136e:	4650      	mov	r0, sl
 8011370:	f7ff fcfc 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 8011374:	3d03      	subs	r5, #3
 8011376:	4633      	mov	r3, r6
 8011378:	4642      	mov	r2, r8
 801137a:	b2a9      	uxth	r1, r5
 801137c:	9d00      	ldr	r5, [sp, #0]
 801137e:	4628      	mov	r0, r5
 8011380:	f7ff fcf4 	bl	8010d6c <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 8011384:	f109 31ff 	add.w	r1, r9, #4294967295
 8011388:	4633      	mov	r3, r6
 801138a:	4622      	mov	r2, r4
 801138c:	b289      	uxth	r1, r1
 801138e:	4650      	mov	r0, sl
 8011390:	f7ff fcec 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011394:	f1a9 0102 	sub.w	r1, r9, #2
 8011398:	4633      	mov	r3, r6
 801139a:	4642      	mov	r2, r8
 801139c:	b289      	uxth	r1, r1
 801139e:	4628      	mov	r0, r5
 80113a0:	f7ff fce4 	bl	8010d6c <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 80113a4:	445f      	add	r7, fp
 80113a6:	b2bf      	uxth	r7, r7
 80113a8:	1e78      	subs	r0, r7, #1
 80113aa:	4633      	mov	r3, r6
 80113ac:	4622      	mov	r2, r4
 80113ae:	4649      	mov	r1, r9
 80113b0:	b280      	uxth	r0, r0
 80113b2:	f7ff fc9f 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 80113b6:	3f02      	subs	r7, #2
 80113b8:	4633      	mov	r3, r6
 80113ba:	4642      	mov	r2, r8
 80113bc:	9901      	ldr	r1, [sp, #4]
 80113be:	b2b8      	uxth	r0, r7
 80113c0:	f7ff fc98 	bl	8010cf4 <VLine>
		break;
 80113c4:	e5d9      	b.n	8010f7a <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 80113c6:	b29f      	uxth	r7, r3
 80113c8:	1e9c      	subs	r4, r3, #2
 80113ca:	b2a4      	uxth	r4, r4
 80113cc:	1c48      	adds	r0, r1, #1
 80113ce:	4633      	mov	r3, r6
 80113d0:	4622      	mov	r2, r4
 80113d2:	4629      	mov	r1, r5
 80113d4:	b280      	uxth	r0, r0
 80113d6:	f7ff fcc9 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 80113da:	f105 0a01 	add.w	sl, r5, #1
 80113de:	fa1f fa8a 	uxth.w	sl, sl
 80113e2:	f1a7 0904 	sub.w	r9, r7, #4
 80113e6:	fa1f f989 	uxth.w	r9, r9
 80113ea:	f10b 0002 	add.w	r0, fp, #2
 80113ee:	4633      	mov	r3, r6
 80113f0:	464a      	mov	r2, r9
 80113f2:	4651      	mov	r1, sl
 80113f4:	b280      	uxth	r0, r0
 80113f6:	f7ff fcb9 	bl	8010d6c <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 80113fa:	eb07 080b 	add.w	r8, r7, fp
 80113fe:	fa1f f888 	uxth.w	r8, r8
 8011402:	f108 3bff 	add.w	fp, r8, #4294967295
 8011406:	fa1f fb8b 	uxth.w	fp, fp
 801140a:	442f      	add	r7, r5
 801140c:	b2bf      	uxth	r7, r7
 801140e:	4633      	mov	r3, r6
 8011410:	4622      	mov	r2, r4
 8011412:	4639      	mov	r1, r7
 8011414:	4658      	mov	r0, fp
 8011416:	f7ff fc6d 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801141a:	f1a8 0802 	sub.w	r8, r8, #2
 801141e:	fa1f f888 	uxth.w	r8, r8
 8011422:	3701      	adds	r7, #1
 8011424:	4633      	mov	r3, r6
 8011426:	464a      	mov	r2, r9
 8011428:	b2b9      	uxth	r1, r7
 801142a:	4640      	mov	r0, r8
 801142c:	f7ff fc62 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011430:	4633      	mov	r3, r6
 8011432:	4622      	mov	r2, r4
 8011434:	4651      	mov	r1, sl
 8011436:	4658      	mov	r0, fp
 8011438:	f7ff fc5c 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 801143c:	1ca9      	adds	r1, r5, #2
 801143e:	4633      	mov	r3, r6
 8011440:	464a      	mov	r2, r9
 8011442:	b289      	uxth	r1, r1
 8011444:	4640      	mov	r0, r8
 8011446:	f7ff fc55 	bl	8010cf4 <VLine>
		break;
 801144a:	e596      	b.n	8010f7a <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 801144c:	f101 0a01 	add.w	sl, r1, #1
 8011450:	fa1f fa8a 	uxth.w	sl, sl
 8011454:	b29f      	uxth	r7, r3
 8011456:	1e9c      	subs	r4, r3, #2
 8011458:	b2a4      	uxth	r4, r4
 801145a:	4633      	mov	r3, r6
 801145c:	4622      	mov	r2, r4
 801145e:	4629      	mov	r1, r5
 8011460:	4650      	mov	r0, sl
 8011462:	f7ff fc83 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 8011466:	f10b 0302 	add.w	r3, fp, #2
 801146a:	b298      	uxth	r0, r3
 801146c:	1c6b      	adds	r3, r5, #1
 801146e:	b299      	uxth	r1, r3
 8011470:	f1a7 0804 	sub.w	r8, r7, #4
 8011474:	fa1f f888 	uxth.w	r8, r8
 8011478:	4633      	mov	r3, r6
 801147a:	4642      	mov	r2, r8
 801147c:	4689      	mov	r9, r1
 801147e:	9000      	str	r0, [sp, #0]
 8011480:	f7ff fc74 	bl	8010d6c <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 8011484:	4633      	mov	r3, r6
 8011486:	4622      	mov	r2, r4
 8011488:	f8cd 9004 	str.w	r9, [sp, #4]
 801148c:	4649      	mov	r1, r9
 801148e:	4658      	mov	r0, fp
 8011490:	f7ff fc30 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 8011494:	1cab      	adds	r3, r5, #2
 8011496:	b29b      	uxth	r3, r3
 8011498:	4618      	mov	r0, r3
 801149a:	4633      	mov	r3, r6
 801149c:	4642      	mov	r2, r8
 801149e:	9002      	str	r0, [sp, #8]
 80114a0:	4601      	mov	r1, r0
 80114a2:	4650      	mov	r0, sl
 80114a4:	f7ff fc26 	bl	8010cf4 <VLine>
		VLine(Xpos, Ypos + width, width - 2, color);
 80114a8:	eb07 0905 	add.w	r9, r7, r5
 80114ac:	fa1f f989 	uxth.w	r9, r9
 80114b0:	4633      	mov	r3, r6
 80114b2:	4622      	mov	r2, r4
 80114b4:	4649      	mov	r1, r9
 80114b6:	4658      	mov	r0, fp
 80114b8:	f7ff fc1c 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + width + 1, width - 4, color);
 80114bc:	f109 0301 	add.w	r3, r9, #1
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	4618      	mov	r0, r3
 80114c4:	4633      	mov	r3, r6
 80114c6:	4642      	mov	r2, r8
 80114c8:	9003      	str	r0, [sp, #12]
 80114ca:	4601      	mov	r1, r0
 80114cc:	4650      	mov	r0, sl
 80114ce:	f7ff fc11 	bl	8010cf4 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 80114d2:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 80114d6:	b2ad      	uxth	r5, r5
 80114d8:	1ea9      	subs	r1, r5, #2
 80114da:	4633      	mov	r3, r6
 80114dc:	4622      	mov	r2, r4
 80114de:	b289      	uxth	r1, r1
 80114e0:	4650      	mov	r0, sl
 80114e2:	f7ff fc43 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 80114e6:	3d03      	subs	r5, #3
 80114e8:	4633      	mov	r3, r6
 80114ea:	4642      	mov	r2, r8
 80114ec:	b2a9      	uxth	r1, r5
 80114ee:	9d00      	ldr	r5, [sp, #0]
 80114f0:	4628      	mov	r0, r5
 80114f2:	f7ff fc3b 	bl	8010d6c <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 80114f6:	f109 31ff 	add.w	r1, r9, #4294967295
 80114fa:	4633      	mov	r3, r6
 80114fc:	4622      	mov	r2, r4
 80114fe:	b289      	uxth	r1, r1
 8011500:	4650      	mov	r0, sl
 8011502:	f7ff fc33 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 8011506:	f1a9 0102 	sub.w	r1, r9, #2
 801150a:	4633      	mov	r3, r6
 801150c:	4642      	mov	r2, r8
 801150e:	b289      	uxth	r1, r1
 8011510:	4628      	mov	r0, r5
 8011512:	f7ff fc2b 	bl	8010d6c <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 8011516:	445f      	add	r7, fp
 8011518:	b2bf      	uxth	r7, r7
 801151a:	1e7d      	subs	r5, r7, #1
 801151c:	b2ad      	uxth	r5, r5
 801151e:	4633      	mov	r3, r6
 8011520:	4622      	mov	r2, r4
 8011522:	4649      	mov	r1, r9
 8011524:	4628      	mov	r0, r5
 8011526:	f7ff fbe5 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 801152a:	3f02      	subs	r7, #2
 801152c:	b2bf      	uxth	r7, r7
 801152e:	4633      	mov	r3, r6
 8011530:	4642      	mov	r2, r8
 8011532:	9903      	ldr	r1, [sp, #12]
 8011534:	4638      	mov	r0, r7
 8011536:	f7ff fbdd 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 801153a:	4633      	mov	r3, r6
 801153c:	4622      	mov	r2, r4
 801153e:	9901      	ldr	r1, [sp, #4]
 8011540:	4628      	mov	r0, r5
 8011542:	f7ff fbd7 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011546:	4633      	mov	r3, r6
 8011548:	4642      	mov	r2, r8
 801154a:	9902      	ldr	r1, [sp, #8]
 801154c:	4638      	mov	r0, r7
 801154e:	f7ff fbd1 	bl	8010cf4 <VLine>
		break;
 8011552:	e512      	b.n	8010f7a <DrawDigit+0x10a>
		HLine(Xpos + 1, Ypos, width - 2, color);
 8011554:	f101 0901 	add.w	r9, r1, #1
 8011558:	fa1f f989 	uxth.w	r9, r9
 801155c:	b29f      	uxth	r7, r3
 801155e:	1e9c      	subs	r4, r3, #2
 8011560:	b2a4      	uxth	r4, r4
 8011562:	4633      	mov	r3, r6
 8011564:	4622      	mov	r2, r4
 8011566:	4629      	mov	r1, r5
 8011568:	4648      	mov	r0, r9
 801156a:	f7ff fbff 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + 1, width - 4, color);
 801156e:	f10b 0302 	add.w	r3, fp, #2
 8011572:	b298      	uxth	r0, r3
 8011574:	1c6b      	adds	r3, r5, #1
 8011576:	b299      	uxth	r1, r3
 8011578:	f1a7 0804 	sub.w	r8, r7, #4
 801157c:	fa1f f888 	uxth.w	r8, r8
 8011580:	4633      	mov	r3, r6
 8011582:	4642      	mov	r2, r8
 8011584:	468a      	mov	sl, r1
 8011586:	9000      	str	r0, [sp, #0]
 8011588:	f7ff fbf0 	bl	8010d6c <HLine>
		VLine(Xpos, Ypos + 1, width - 2, color);
 801158c:	4633      	mov	r3, r6
 801158e:	4622      	mov	r2, r4
 8011590:	f8cd a004 	str.w	sl, [sp, #4]
 8011594:	4651      	mov	r1, sl
 8011596:	4658      	mov	r0, fp
 8011598:	f7ff fbac 	bl	8010cf4 <VLine>
		VLine(Xpos + 1, Ypos + 2, width - 4, color);
 801159c:	1cab      	adds	r3, r5, #2
 801159e:	b29b      	uxth	r3, r3
 80115a0:	4618      	mov	r0, r3
 80115a2:	4633      	mov	r3, r6
 80115a4:	4642      	mov	r2, r8
 80115a6:	9002      	str	r0, [sp, #8]
 80115a8:	4601      	mov	r1, r0
 80115aa:	4648      	mov	r0, r9
 80115ac:	f7ff fba2 	bl	8010cf4 <VLine>
		HLine(Xpos + 1, Ypos + (width * 2) - 2, width - 2, color);
 80115b0:	eb05 0a47 	add.w	sl, r5, r7, lsl #1
 80115b4:	fa1f fa8a 	uxth.w	sl, sl
 80115b8:	f1aa 0102 	sub.w	r1, sl, #2
 80115bc:	4633      	mov	r3, r6
 80115be:	4622      	mov	r2, r4
 80115c0:	b289      	uxth	r1, r1
 80115c2:	4648      	mov	r0, r9
 80115c4:	f7ff fbd2 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + (width * 2) - 3, width - 4, color);
 80115c8:	f1aa 0103 	sub.w	r1, sl, #3
 80115cc:	4633      	mov	r3, r6
 80115ce:	4642      	mov	r2, r8
 80115d0:	b289      	uxth	r1, r1
 80115d2:	f8dd a000 	ldr.w	sl, [sp]
 80115d6:	4650      	mov	r0, sl
 80115d8:	f7ff fbc8 	bl	8010d6c <HLine>
		HLine(Xpos + 1, Ypos + width - 1, width - 2, color);
 80115dc:	443d      	add	r5, r7
 80115de:	b2ad      	uxth	r5, r5
 80115e0:	1e69      	subs	r1, r5, #1
 80115e2:	4633      	mov	r3, r6
 80115e4:	4622      	mov	r2, r4
 80115e6:	b289      	uxth	r1, r1
 80115e8:	4648      	mov	r0, r9
 80115ea:	f7ff fbbf 	bl	8010d6c <HLine>
		HLine(Xpos + 2, Ypos + width - 2, width - 4, color);
 80115ee:	1ea9      	subs	r1, r5, #2
 80115f0:	4633      	mov	r3, r6
 80115f2:	4642      	mov	r2, r8
 80115f4:	b289      	uxth	r1, r1
 80115f6:	4650      	mov	r0, sl
 80115f8:	f7ff fbb8 	bl	8010d6c <HLine>
		VLine(Xpos + width - 1, Ypos + width, width - 2, color);
 80115fc:	445f      	add	r7, fp
 80115fe:	b2bf      	uxth	r7, r7
 8011600:	f107 39ff 	add.w	r9, r7, #4294967295
 8011604:	fa1f f989 	uxth.w	r9, r9
 8011608:	4633      	mov	r3, r6
 801160a:	4622      	mov	r2, r4
 801160c:	4629      	mov	r1, r5
 801160e:	4648      	mov	r0, r9
 8011610:	f7ff fb70 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + width + 1, width - 4, color);
 8011614:	3f02      	subs	r7, #2
 8011616:	b2bf      	uxth	r7, r7
 8011618:	3501      	adds	r5, #1
 801161a:	4633      	mov	r3, r6
 801161c:	4642      	mov	r2, r8
 801161e:	b2a9      	uxth	r1, r5
 8011620:	4638      	mov	r0, r7
 8011622:	f7ff fb67 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 1, Ypos + 1, width - 2, color);
 8011626:	4633      	mov	r3, r6
 8011628:	4622      	mov	r2, r4
 801162a:	9901      	ldr	r1, [sp, #4]
 801162c:	4648      	mov	r0, r9
 801162e:	f7ff fb61 	bl	8010cf4 <VLine>
		VLine(Xpos + width - 2, Ypos + 2, width - 4, color);
 8011632:	4633      	mov	r3, r6
 8011634:	4642      	mov	r2, r8
 8011636:	9902      	ldr	r1, [sp, #8]
 8011638:	4638      	mov	r0, r7
 801163a:	f7ff fb5b 	bl	8010cf4 <VLine>
}
 801163e:	e49c      	b.n	8010f7a <DrawDigit+0x10a>

08011640 <DrawLowSpectrum>:
{
 8011640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011642:	b083      	sub	sp, #12
	for(i = 0; i < 400; i++)
 8011644:	2400      	movs	r4, #0
 8011646:	e013      	b.n	8011670 <DrawLowSpectrum+0x30>
		color = (uint32_t)(lowp_wavebuffer[i] & 0xE0); // read color data - first 3 bits
 8011648:	4b68      	ldr	r3, [pc, #416]	; (80117ec <DrawLowSpectrum+0x1ac>)
 801164a:	5d1a      	ldrb	r2, [r3, r4]
 801164c:	f002 03e0 	and.w	r3, r2, #224	; 0xe0
		color |= (uint32_t)(lowp_wavebuffer[i] & 0xE0);
 8011650:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
		color <<= 8;
 8011654:	021b      	lsls	r3, r3, #8
		VLine(i + 40, 250 - height, height, color);
 8011656:	f002 021f 	and.w	r2, r2, #31
 801165a:	f1c2 01fa 	rsb	r1, r2, #250	; 0xfa
 801165e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8011662:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8011666:	b289      	uxth	r1, r1
 8011668:	b280      	uxth	r0, r0
 801166a:	f7ff fb43 	bl	8010cf4 <VLine>
	for(i = 0; i < 400; i++)
 801166e:	3401      	adds	r4, #1
 8011670:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8011674:	d3e8      	bcc.n	8011648 <DrawLowSpectrum+0x8>
	VLine(397, 174, 32, 0x00FFFFFF);
 8011676:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801167a:	2220      	movs	r2, #32
 801167c:	21ae      	movs	r1, #174	; 0xae
 801167e:	f240 108d 	movw	r0, #397	; 0x18d
 8011682:	f7ff fb37 	bl	8010cf4 <VLine>
	VLine(453, 174, 32, 0x00FFFFFF);
 8011686:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801168a:	2220      	movs	r2, #32
 801168c:	21ae      	movs	r1, #174	; 0xae
 801168e:	f240 10c5 	movw	r0, #453	; 0x1c5
 8011692:	f7ff fb2f 	bl	8010cf4 <VLine>
	HLine(399, 172, 53, 0x00FFFFFF);
 8011696:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801169a:	2235      	movs	r2, #53	; 0x35
 801169c:	21ac      	movs	r1, #172	; 0xac
 801169e:	f240 108f 	movw	r0, #399	; 0x18f
 80116a2:	f7ff fb63 	bl	8010d6c <HLine>
	HLine(399, 207, 53, 0x00FFFFFF);
 80116a6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80116aa:	2235      	movs	r2, #53	; 0x35
 80116ac:	21cf      	movs	r1, #207	; 0xcf
 80116ae:	f240 108f 	movw	r0, #399	; 0x18f
 80116b2:	f7ff fb5b 	bl	8010d6c <HLine>
	Pixel(398, 173, 0xFFFF);
 80116b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116ba:	21ad      	movs	r1, #173	; 0xad
 80116bc:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 80116c0:	f7ff fbc0 	bl	8010e44 <Pixel>
	Pixel(452, 173, 0xFFFF);
 80116c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116c8:	21ad      	movs	r1, #173	; 0xad
 80116ca:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
 80116ce:	f7ff fbb9 	bl	8010e44 <Pixel>
	Pixel(398, 206, 0xFFFF);
 80116d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116d6:	21ce      	movs	r1, #206	; 0xce
 80116d8:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 80116dc:	f7ff fbb2 	bl	8010e44 <Pixel>
	Pixel(452, 206, 0xFFFF);
 80116e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116e4:	21ce      	movs	r1, #206	; 0xce
 80116e6:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
 80116ea:	f7ff fbab 	bl	8010e44 <Pixel>
	DrawElement(20, 5, 430, 205, 0x00FFFFFF, bpm);
 80116ee:	4b40      	ldr	r3, [pc, #256]	; (80117f0 <DrawLowSpectrum+0x1b0>)
 80116f0:	9301      	str	r3, [sp, #4]
 80116f2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 80116f6:	9400      	str	r4, [sp, #0]
 80116f8:	23cd      	movs	r3, #205	; 0xcd
 80116fa:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80116fe:	2105      	movs	r1, #5
 8011700:	2014      	movs	r0, #20
 8011702:	f7ff faaf 	bl	8010c64 <DrawElement>
	VLine(40, 252, 4, 0x00FFFFFF);
 8011706:	4623      	mov	r3, r4
 8011708:	2204      	movs	r2, #4
 801170a:	21fc      	movs	r1, #252	; 0xfc
 801170c:	2028      	movs	r0, #40	; 0x28
 801170e:	f7ff faf1 	bl	8010cf4 <VLine>
	VLine(440, 252, 4, 0x00FFFFFF);
 8011712:	4623      	mov	r3, r4
 8011714:	2204      	movs	r2, #4
 8011716:	21fc      	movs	r1, #252	; 0xfc
 8011718:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 801171c:	f7ff faea 	bl	8010cf4 <VLine>
	HLine(40, 252, 400, 0x00FFFFFF);
 8011720:	4623      	mov	r3, r4
 8011722:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011726:	21fc      	movs	r1, #252	; 0xfc
 8011728:	2028      	movs	r0, #40	; 0x28
 801172a:	f7ff fb1f 	bl	8010d6c <HLine>
	HLine(40, 256, 401, 0x00FFFFFF);
 801172e:	4623      	mov	r3, r4
 8011730:	f240 1291 	movw	r2, #401	; 0x191
 8011734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011738:	2028      	movs	r0, #40	; 0x28
 801173a:	f7ff fb17 	bl	8010d6c <HLine>
	if(display.timemode == 0) {
 801173e:	4b2d      	ldr	r3, [pc, #180]	; (80117f4 <DrawLowSpectrum+0x1b4>)
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	b19b      	cbz	r3, 801176c <DrawLowSpectrum+0x12c>
	if(display.trackbarmode == 0) {
 8011744:	4b2b      	ldr	r3, [pc, #172]	; (80117f4 <DrawLowSpectrum+0x1b4>)
 8011746:	791b      	ldrb	r3, [r3, #4]
 8011748:	b9d3      	cbnz	r3, 8011780 <DrawLowSpectrum+0x140>
		Rectangle(file_pos+40, 253, 400-file_pos, 3, 0x00FFFFFF);
 801174a:	4b2b      	ldr	r3, [pc, #172]	; (80117f8 <DrawLowSpectrum+0x1b8>)
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8011752:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8011756:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801175a:	9300      	str	r3, [sp, #0]
 801175c:	2303      	movs	r3, #3
 801175e:	b292      	uxth	r2, r2
 8011760:	21fd      	movs	r1, #253	; 0xfd
 8011762:	b280      	uxth	r0, r0
 8011764:	f7ff fb42 	bl	8010dec <Rectangle>
	for(i = 0; i < 400; i++)
 8011768:	2400      	movs	r4, #0
 801176a:	e025      	b.n	80117b8 <DrawLowSpectrum+0x178>
		DrawElement(37, 5, 84, 191, 0x00FFFFFF, remain);
 801176c:	4b23      	ldr	r3, [pc, #140]	; (80117fc <DrawLowSpectrum+0x1bc>)
 801176e:	9301      	str	r3, [sp, #4]
 8011770:	9400      	str	r4, [sp, #0]
 8011772:	23bf      	movs	r3, #191	; 0xbf
 8011774:	2254      	movs	r2, #84	; 0x54
 8011776:	2105      	movs	r1, #5
 8011778:	2025      	movs	r0, #37	; 0x25
 801177a:	f7ff fa73 	bl	8010c64 <DrawElement>
 801177e:	e7e1      	b.n	8011744 <DrawLowSpectrum+0x104>
		Rectangle(40, 253, file_pos, 3, 0x00FFFFFF);
 8011780:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011784:	9300      	str	r3, [sp, #0]
 8011786:	2303      	movs	r3, #3
 8011788:	4a1b      	ldr	r2, [pc, #108]	; (80117f8 <DrawLowSpectrum+0x1b8>)
 801178a:	8812      	ldrh	r2, [r2, #0]
 801178c:	21fd      	movs	r1, #253	; 0xfd
 801178e:	2028      	movs	r0, #40	; 0x28
 8011790:	f7ff fb2c 	bl	8010dec <Rectangle>
 8011794:	e7e8      	b.n	8011768 <DrawLowSpectrum+0x128>
			VLine(40 + rekordbox.elminticks[i], 260, 4, 0x00FFFFFF);
 8011796:	f241 1268 	movw	r2, #4456	; 0x1168
 801179a:	4422      	add	r2, r4
 801179c:	4b18      	ldr	r3, [pc, #96]	; (8011800 <DrawLowSpectrum+0x1c0>)
 801179e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80117a2:	8898      	ldrh	r0, [r3, #4]
 80117a4:	3028      	adds	r0, #40	; 0x28
 80117a6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80117aa:	2204      	movs	r2, #4
 80117ac:	f44f 7182 	mov.w	r1, #260	; 0x104
 80117b0:	b280      	uxth	r0, r0
 80117b2:	f7ff fa9f 	bl	8010cf4 <VLine>
		i++;
 80117b6:	3401      	adds	r4, #1
	while(i < rekordbox.minutes) {
 80117b8:	4b12      	ldr	r3, [pc, #72]	; (8011804 <DrawLowSpectrum+0x1c4>)
 80117ba:	f893 3354 	ldrb.w	r3, [r3, #852]	; 0x354
 80117be:	42a3      	cmp	r3, r4
 80117c0:	d922      	bls.n	8011808 <DrawLowSpectrum+0x1c8>
		if(display.timemode == 0) {
 80117c2:	4b0c      	ldr	r3, [pc, #48]	; (80117f4 <DrawLowSpectrum+0x1b4>)
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1e5      	bne.n	8011796 <DrawLowSpectrum+0x156>
			VLine(40 + rekordbox.remminticks[i], 260, 4, 0x00FFFFFF);
 80117ca:	f241 1228 	movw	r2, #4392	; 0x1128
 80117ce:	4422      	add	r2, r4
 80117d0:	4b0b      	ldr	r3, [pc, #44]	; (8011800 <DrawLowSpectrum+0x1c0>)
 80117d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80117d6:	8898      	ldrh	r0, [r3, #4]
 80117d8:	3028      	adds	r0, #40	; 0x28
 80117da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80117de:	2204      	movs	r2, #4
 80117e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80117e4:	b280      	uxth	r0, r0
 80117e6:	f7ff fa85 	bl	8010cf4 <VLine>
 80117ea:	e7e4      	b.n	80117b6 <DrawLowSpectrum+0x176>
 80117ec:	2000e600 	.word	0x2000e600
 80117f0:	0801d610 	.word	0x0801d610
 80117f4:	200005e8 	.word	0x200005e8
 80117f8:	2000e3c8 	.word	0x2000e3c8
 80117fc:	0801e1d0 	.word	0x0801e1d0
 8011800:	20014618 	.word	0x20014618
 8011804:	20016618 	.word	0x20016618
	DrawElement(7, 8, 375, 204, 0x00FFFFFF, percent);
 8011808:	4bcb      	ldr	r3, [pc, #812]	; (8011b38 <DrawLowSpectrum+0x4f8>)
 801180a:	9301      	str	r3, [sp, #4]
 801180c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011810:	9300      	str	r3, [sp, #0]
 8011812:	23cc      	movs	r3, #204	; 0xcc
 8011814:	f240 1277 	movw	r2, #375	; 0x177
 8011818:	2108      	movs	r1, #8
 801181a:	2007      	movs	r0, #7
 801181c:	f7ff fa22 	bl	8010c64 <DrawElement>
	if(trak.percent < 0) DrawElement(10, 2, 308, 195, 0x00FFFFFF, minus);
 8011820:	4bc6      	ldr	r3, [pc, #792]	; (8011b3c <DrawLowSpectrum+0x4fc>)
 8011822:	edd3 7a01 	vldr	s15, [r3, #4]
 8011826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182e:	f100 81b6 	bmi.w	8011b9e <DrawLowSpectrum+0x55e>
	else DrawElement(10, 10, 308, 199, 0x00FFFFFF, plus);
 8011832:	4bc3      	ldr	r3, [pc, #780]	; (8011b40 <DrawLowSpectrum+0x500>)
 8011834:	9301      	str	r3, [sp, #4]
 8011836:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	23c7      	movs	r3, #199	; 0xc7
 801183e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8011842:	210a      	movs	r1, #10
 8011844:	4608      	mov	r0, r1
 8011846:	f7ff fa0d 	bl	8010c64 <DrawElement>
	uint16_t percent = (abs)(trak.percent * 10000);
 801184a:	4bbc      	ldr	r3, [pc, #752]	; (8011b3c <DrawLowSpectrum+0x4fc>)
 801184c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011850:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8011b44 <DrawLowSpectrum+0x504>
 8011854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801185c:	ee17 4a90 	vmov	r4, s15
 8011860:	2c00      	cmp	r4, #0
 8011862:	bfb8      	it	lt
 8011864:	4264      	neglt	r4, r4
 8011866:	b2a5      	uxth	r5, r4
	if(display.pitchmode == 0) {
 8011868:	4bb7      	ldr	r3, [pc, #732]	; (8011b48 <DrawLowSpectrum+0x508>)
 801186a:	785b      	ldrb	r3, [r3, #1]
 801186c:	2b00      	cmp	r3, #0
 801186e:	f000 81a3 	beq.w	8011bb8 <DrawLowSpectrum+0x578>
	else if(display.pitchmode == 1) {
 8011872:	2b01      	cmp	r3, #1
 8011874:	f000 821b 	beq.w	8011cae <DrawLowSpectrum+0x66e>
	else if(display.pitchmode == 2) {
 8011878:	2b02      	cmp	r3, #2
 801187a:	f000 8286 	beq.w	8011d8a <DrawLowSpectrum+0x74a>
	else if(display.pitchmode == 3) {
 801187e:	2b03      	cmp	r3, #3
 8011880:	f000 8302 	beq.w	8011e88 <DrawLowSpectrum+0x848>
	DrawElement(34, 5, 40, 178, 0x00FFFFFF, track);
 8011884:	4bb1      	ldr	r3, [pc, #708]	; (8011b4c <DrawLowSpectrum+0x50c>)
 8011886:	9301      	str	r3, [sp, #4]
 8011888:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 801188c:	9400      	str	r4, [sp, #0]
 801188e:	23b2      	movs	r3, #178	; 0xb2
 8011890:	2228      	movs	r2, #40	; 0x28
 8011892:	2105      	movs	r1, #5
 8011894:	2022      	movs	r0, #34	; 0x22
 8011896:	f7ff f9e5 	bl	8010c64 <DrawElement>
	DrawElement(31, 5, 310, 178, 0x00FFFFFF, tempo);
 801189a:	4bad      	ldr	r3, [pc, #692]	; (8011b50 <DrawLowSpectrum+0x510>)
 801189c:	9301      	str	r3, [sp, #4]
 801189e:	9400      	str	r4, [sp, #0]
 80118a0:	23b2      	movs	r3, #178	; 0xb2
 80118a2:	f44f 729b 	mov.w	r2, #310	; 0x136
 80118a6:	2105      	movs	r1, #5
 80118a8:	201f      	movs	r0, #31
 80118aa:	f7ff f9db 	bl	8010c64 <DrawElement>
	if(display.cuemode == 1) {
 80118ae:	4ba6      	ldr	r3, [pc, #664]	; (8011b48 <DrawLowSpectrum+0x508>)
 80118b0:	789b      	ldrb	r3, [r3, #2]
 80118b2:	2b01      	cmp	r3, #1
 80118b4:	f000 833d 	beq.w	8011f32 <DrawLowSpectrum+0x8f2>
	if(display.quantize == 1) {
 80118b8:	4ba3      	ldr	r3, [pc, #652]	; (8011b48 <DrawLowSpectrum+0x508>)
 80118ba:	7c5b      	ldrb	r3, [r3, #17]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	f000 8344 	beq.w	8011f4a <DrawLowSpectrum+0x90a>
	if(display.mastertempomode == 1) {
 80118c2:	4ba1      	ldr	r3, [pc, #644]	; (8011b48 <DrawLowSpectrum+0x508>)
 80118c4:	795b      	ldrb	r3, [r3, #5]
 80118c6:	2b01      	cmp	r3, #1
 80118c8:	f000 834b 	beq.w	8011f62 <DrawLowSpectrum+0x922>
	DrawElement(15, 16, 165, 204, 0x00FFFFFF, minutes);
 80118cc:	4ba1      	ldr	r3, [pc, #644]	; (8011b54 <DrawLowSpectrum+0x514>)
 80118ce:	9301      	str	r3, [sp, #4]
 80118d0:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 80118d4:	9400      	str	r4, [sp, #0]
 80118d6:	23cc      	movs	r3, #204	; 0xcc
 80118d8:	22a5      	movs	r2, #165	; 0xa5
 80118da:	2110      	movs	r1, #16
 80118dc:	200f      	movs	r0, #15
 80118de:	f7ff f9c1 	bl	8010c64 <DrawElement>
	DrawElement(6, 7, 213, 204, 0x00FFFFFF, seconds);
 80118e2:	4b9d      	ldr	r3, [pc, #628]	; (8011b58 <DrawLowSpectrum+0x518>)
 80118e4:	9301      	str	r3, [sp, #4]
 80118e6:	9400      	str	r4, [sp, #0]
 80118e8:	23cc      	movs	r3, #204	; 0xcc
 80118ea:	22d5      	movs	r2, #213	; 0xd5
 80118ec:	2107      	movs	r1, #7
 80118ee:	2006      	movs	r0, #6
 80118f0:	f7ff f9b8 	bl	8010c64 <DrawElement>
	DrawElement(5, 6, 252, 204, 0x00FFFFFF, frames);
 80118f4:	4b99      	ldr	r3, [pc, #612]	; (8011b5c <DrawLowSpectrum+0x51c>)
 80118f6:	9301      	str	r3, [sp, #4]
 80118f8:	9400      	str	r4, [sp, #0]
 80118fa:	23cc      	movs	r3, #204	; 0xcc
 80118fc:	22fc      	movs	r2, #252	; 0xfc
 80118fe:	2106      	movs	r1, #6
 8011900:	2005      	movs	r0, #5
 8011902:	f7ff f9af 	bl	8010c64 <DrawElement>
	DrawElement(3, 4, 252, 204, 0x00FFFFFF, point);
 8011906:	4b96      	ldr	r3, [pc, #600]	; (8011b60 <DrawLowSpectrum+0x520>)
 8011908:	9301      	str	r3, [sp, #4]
 801190a:	9400      	str	r4, [sp, #0]
 801190c:	23cc      	movs	r3, #204	; 0xcc
 801190e:	22fc      	movs	r2, #252	; 0xfc
 8011910:	2104      	movs	r1, #4
 8011912:	2003      	movs	r0, #3
 8011914:	f7ff f9a6 	bl	8010c64 <DrawElement>
	DrawDigit((Track_number + 1) / 10, 40, 183, 13, 0x00FFFFFF);
 8011918:	4d92      	ldr	r5, [pc, #584]	; (8011b64 <DrawLowSpectrum+0x524>)
 801191a:	682b      	ldr	r3, [r5, #0]
 801191c:	3301      	adds	r3, #1
 801191e:	4e92      	ldr	r6, [pc, #584]	; (8011b68 <DrawLowSpectrum+0x528>)
 8011920:	fb86 2003 	smull	r2, r0, r6, r3
 8011924:	17db      	asrs	r3, r3, #31
 8011926:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 801192a:	9400      	str	r4, [sp, #0]
 801192c:	230d      	movs	r3, #13
 801192e:	22b7      	movs	r2, #183	; 0xb7
 8011930:	2128      	movs	r1, #40	; 0x28
 8011932:	b2c0      	uxtb	r0, r0
 8011934:	f7ff fa9c 	bl	8010e70 <DrawDigit>
	DrawDigit((Track_number + 1) % 10, 60, 183, 13, 0x00FFFFFF);
 8011938:	682b      	ldr	r3, [r5, #0]
 801193a:	3301      	adds	r3, #1
 801193c:	fb86 1203 	smull	r1, r2, r6, r3
 8011940:	17d8      	asrs	r0, r3, #31
 8011942:	ebc0 00a2 	rsb	r0, r0, r2, asr #2
 8011946:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801194a:	0042      	lsls	r2, r0, #1
 801194c:	1a98      	subs	r0, r3, r2
 801194e:	9400      	str	r4, [sp, #0]
 8011950:	230d      	movs	r3, #13
 8011952:	22b7      	movs	r2, #183	; 0xb7
 8011954:	213c      	movs	r1, #60	; 0x3c
 8011956:	b2c0      	uxtb	r0, r0
 8011958:	f7ff fa8a 	bl	8010e70 <DrawDigit>
	if(display.timemode == 0) {
 801195c:	4b7a      	ldr	r3, [pc, #488]	; (8011b48 <DrawLowSpectrum+0x508>)
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	f040 830d 	bne.w	8011f80 <DrawLowSpectrum+0x940>
		DrawDigit(rmin / 10, 134, 184, 11, 0x00FFFFFF);
 8011966:	4e81      	ldr	r6, [pc, #516]	; (8011b6c <DrawLowSpectrum+0x52c>)
 8011968:	f996 3000 	ldrsb.w	r3, [r6]
 801196c:	4d7e      	ldr	r5, [pc, #504]	; (8011b68 <DrawLowSpectrum+0x528>)
 801196e:	fb85 2003 	smull	r2, r0, r5, r3
 8011972:	17db      	asrs	r3, r3, #31
 8011974:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 8011978:	9400      	str	r4, [sp, #0]
 801197a:	230b      	movs	r3, #11
 801197c:	22b8      	movs	r2, #184	; 0xb8
 801197e:	2186      	movs	r1, #134	; 0x86
 8011980:	b2c0      	uxtb	r0, r0
 8011982:	f7ff fa75 	bl	8010e70 <DrawDigit>
		DrawDigit(rmin % 10, 148, 184, 11, 0x00FFFFFF);
 8011986:	f996 2000 	ldrsb.w	r2, [r6]
 801198a:	fb85 3102 	smull	r3, r1, r5, r2
 801198e:	17d3      	asrs	r3, r2, #31
 8011990:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8011994:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011998:	0058      	lsls	r0, r3, #1
 801199a:	1a10      	subs	r0, r2, r0
 801199c:	9400      	str	r4, [sp, #0]
 801199e:	230b      	movs	r3, #11
 80119a0:	22b8      	movs	r2, #184	; 0xb8
 80119a2:	2194      	movs	r1, #148	; 0x94
 80119a4:	b2c0      	uxtb	r0, r0
 80119a6:	f7ff fa63 	bl	8010e70 <DrawDigit>
		DrawDigit(rsec / 10, 185, 184, 11, 0x00FFFFFF);
 80119aa:	4e71      	ldr	r6, [pc, #452]	; (8011b70 <DrawLowSpectrum+0x530>)
 80119ac:	f996 3000 	ldrsb.w	r3, [r6]
 80119b0:	fb85 2003 	smull	r2, r0, r5, r3
 80119b4:	17db      	asrs	r3, r3, #31
 80119b6:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 80119ba:	9400      	str	r4, [sp, #0]
 80119bc:	230b      	movs	r3, #11
 80119be:	22b8      	movs	r2, #184	; 0xb8
 80119c0:	21b9      	movs	r1, #185	; 0xb9
 80119c2:	b2c0      	uxtb	r0, r0
 80119c4:	f7ff fa54 	bl	8010e70 <DrawDigit>
		DrawDigit(rsec % 10, 199, 184, 11, 0x00FFFFFF);
 80119c8:	f996 2000 	ldrsb.w	r2, [r6]
 80119cc:	fb85 3102 	smull	r3, r1, r5, r2
 80119d0:	17d3      	asrs	r3, r2, #31
 80119d2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80119d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80119da:	0058      	lsls	r0, r3, #1
 80119dc:	1a10      	subs	r0, r2, r0
 80119de:	9400      	str	r4, [sp, #0]
 80119e0:	230b      	movs	r3, #11
 80119e2:	22b8      	movs	r2, #184	; 0xb8
 80119e4:	21c7      	movs	r1, #199	; 0xc7
 80119e6:	b2c0      	uxtb	r0, r0
 80119e8:	f7ff fa42 	bl	8010e70 <DrawDigit>
		DrawDigit(rfr / 20, 224, 184, 11, 0x00FFFFFF);
 80119ec:	4e61      	ldr	r6, [pc, #388]	; (8011b74 <DrawLowSpectrum+0x534>)
 80119ee:	f9b6 2000 	ldrsh.w	r2, [r6]
 80119f2:	fb85 1302 	smull	r1, r3, r5, r2
 80119f6:	17d2      	asrs	r2, r2, #31
 80119f8:	ebc2 00e3 	rsb	r0, r2, r3, asr #3
 80119fc:	9400      	str	r4, [sp, #0]
 80119fe:	230b      	movs	r3, #11
 8011a00:	22b8      	movs	r2, #184	; 0xb8
 8011a02:	21e0      	movs	r1, #224	; 0xe0
 8011a04:	b2c0      	uxtb	r0, r0
 8011a06:	f7ff fa33 	bl	8010e70 <DrawDigit>
		DrawDigit((rfr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 8011a0a:	f9b6 3000 	ldrsh.w	r3, [r6]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f2c0 82b4 	blt.w	8011f7c <DrawLowSpectrum+0x93c>
 8011a14:	105b      	asrs	r3, r3, #1
 8011a16:	4954      	ldr	r1, [pc, #336]	; (8011b68 <DrawLowSpectrum+0x528>)
 8011a18:	fb81 2103 	smull	r2, r1, r1, r3
 8011a1c:	17da      	asrs	r2, r3, #31
 8011a1e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8011a22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011a26:	0050      	lsls	r0, r2, #1
 8011a28:	1a18      	subs	r0, r3, r0
 8011a2a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	230b      	movs	r3, #11
 8011a32:	22b8      	movs	r2, #184	; 0xb8
 8011a34:	21ee      	movs	r1, #238	; 0xee
 8011a36:	b2c0      	uxtb	r0, r0
 8011a38:	f7ff fa1a 	bl	8010e70 <DrawDigit>
	uint16_t bpm = rekordbox.bpm[beat] * (1 + trak.percent);
 8011a3c:	4b4e      	ldr	r3, [pc, #312]	; (8011b78 <DrawLowSpectrum+0x538>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8011a44:	4a4d      	ldr	r2, [pc, #308]	; (8011b7c <DrawLowSpectrum+0x53c>)
 8011a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a4a:	ee07 3a90 	vmov	s15, r3
 8011a4e:	4b3b      	ldr	r3, [pc, #236]	; (8011b3c <DrawLowSpectrum+0x4fc>)
 8011a50:	ed93 7a01 	vldr	s14, [r3, #4]
 8011a54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a58:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a68:	ee17 3a90 	vmov	r3, s15
 8011a6c:	b29d      	uxth	r5, r3
	if(bpm / 10000 > 0) {
 8011a6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a72:	429d      	cmp	r5, r3
 8011a74:	f200 82f3 	bhi.w	801205e <DrawLowSpectrum+0xa1e>
	if(bpm / 1000 > 0) {
 8011a78:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8011a7c:	f080 82fd 	bcs.w	801207a <DrawLowSpectrum+0xa3a>
	DrawDigit(((bpm / 100) % 100) % 10, 430, 176, 10, 0x00FFFFFF);
 8011a80:	4a3f      	ldr	r2, [pc, #252]	; (8011b80 <DrawLowSpectrum+0x540>)
 8011a82:	fba2 1305 	umull	r1, r3, r2, r5
 8011a86:	095b      	lsrs	r3, r3, #5
 8011a88:	fba2 1203 	umull	r1, r2, r2, r3
 8011a8c:	0952      	lsrs	r2, r2, #5
 8011a8e:	2164      	movs	r1, #100	; 0x64
 8011a90:	fb01 3312 	mls	r3, r1, r2, r3
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	4e3b      	ldr	r6, [pc, #236]	; (8011b84 <DrawLowSpectrum+0x544>)
 8011a98:	fba6 1203 	umull	r1, r2, r6, r3
 8011a9c:	08d2      	lsrs	r2, r2, #3
 8011a9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011aa2:	0050      	lsls	r0, r2, #1
 8011aa4:	1a18      	subs	r0, r3, r0
 8011aa6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 8011aaa:	9400      	str	r4, [sp, #0]
 8011aac:	230a      	movs	r3, #10
 8011aae:	22b0      	movs	r2, #176	; 0xb0
 8011ab0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011ab4:	b2c0      	uxtb	r0, r0
 8011ab6:	f7ff f9db 	bl	8010e70 <DrawDigit>
	DrawElement(2, 2, 442, 194, 0x00FFFFFF, small_point);
 8011aba:	4b33      	ldr	r3, [pc, #204]	; (8011b88 <DrawLowSpectrum+0x548>)
 8011abc:	9301      	str	r3, [sp, #4]
 8011abe:	9400      	str	r4, [sp, #0]
 8011ac0:	23c2      	movs	r3, #194	; 0xc2
 8011ac2:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 8011ac6:	2102      	movs	r1, #2
 8011ac8:	4608      	mov	r0, r1
 8011aca:	f7ff f8cb 	bl	8010c64 <DrawElement>
	DrawDigit((bpm / 10) % 10, 445, 182, 7, 0x00FFFFFF);
 8011ace:	fba6 2305 	umull	r2, r3, r6, r5
 8011ad2:	08db      	lsrs	r3, r3, #3
 8011ad4:	fba6 1203 	umull	r1, r2, r6, r3
 8011ad8:	08d2      	lsrs	r2, r2, #3
 8011ada:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011ade:	0050      	lsls	r0, r2, #1
 8011ae0:	1a18      	subs	r0, r3, r0
 8011ae2:	9400      	str	r4, [sp, #0]
 8011ae4:	2307      	movs	r3, #7
 8011ae6:	22b6      	movs	r2, #182	; 0xb6
 8011ae8:	f240 11bd 	movw	r1, #445	; 0x1bd
 8011aec:	b2c0      	uxtb	r0, r0
 8011aee:	f7ff f9bf 	bl	8010e70 <DrawDigit>
	if(rekordbox.state == 1) {
 8011af2:	4b26      	ldr	r3, [pc, #152]	; (8011b8c <DrawLowSpectrum+0x54c>)
 8011af4:	f893 3b98 	ldrb.w	r3, [r3, #2968]	; 0xb98
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	f000 82d8 	beq.w	80120ae <DrawLowSpectrum+0xa6e>
	if(rekordbox.cues > 1) {
 8011afe:	4b23      	ldr	r3, [pc, #140]	; (8011b8c <DrawLowSpectrum+0x54c>)
 8011b00:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	f300 82fe 	bgt.w	8012106 <DrawLowSpectrum+0xac6>
	if(display.loop == 1) {
 8011b0a:	4b0f      	ldr	r3, [pc, #60]	; (8011b48 <DrawLowSpectrum+0x508>)
 8011b0c:	7c1b      	ldrb	r3, [r3, #16]
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	f000 83b4 	beq.w	801227c <DrawLowSpectrum+0xc3c>
	VLine(40 + file_pos, 220, 40, 0x00FFFFFF);
 8011b14:	4c1e      	ldr	r4, [pc, #120]	; (8011b90 <DrawLowSpectrum+0x550>)
 8011b16:	6823      	ldr	r3, [r4, #0]
 8011b18:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8011b1c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011b20:	2228      	movs	r2, #40	; 0x28
 8011b22:	21dc      	movs	r1, #220	; 0xdc
 8011b24:	b280      	uxth	r0, r0
 8011b26:	f7ff f8e5 	bl	8010cf4 <VLine>
	VLine(41 + file_pos, 220, 40, 0x00FFFFFF);
 8011b2a:	6820      	ldr	r0, [r4, #0]
 8011b2c:	3029      	adds	r0, #41	; 0x29
 8011b2e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011b32:	2228      	movs	r2, #40	; 0x28
 8011b34:	21dc      	movs	r1, #220	; 0xdc
 8011b36:	e02d      	b.n	8011b94 <DrawLowSpectrum+0x554>
 8011b38:	0801e034 	.word	0x0801e034
 8011b3c:	2000eba4 	.word	0x2000eba4
 8011b40:	0801e154 	.word	0x0801e154
 8011b44:	461c4000 	.word	0x461c4000
 8011b48:	200005e8 	.word	0x200005e8
 8011b4c:	0801e870 	.word	0x0801e870
 8011b50:	0801e830 	.word	0x0801e830
 8011b54:	0801e014 	.word	0x0801e014
 8011b58:	0801e820 	.word	0x0801e820
 8011b5c:	0801df08 	.word	0x0801df08
 8011b60:	0801e168 	.word	0x0801e168
 8011b64:	2000e36c 	.word	0x2000e36c
 8011b68:	66666667 	.word	0x66666667
 8011b6c:	2000eb96 	.word	0x2000eb96
 8011b70:	2000eb97 	.word	0x2000eb97
 8011b74:	2000eb94 	.word	0x2000eb94
 8011b78:	200005dc 	.word	0x200005dc
 8011b7c:	20014618 	.word	0x20014618
 8011b80:	51eb851f 	.word	0x51eb851f
 8011b84:	cccccccd 	.word	0xcccccccd
 8011b88:	0801e82c 	.word	0x0801e82c
 8011b8c:	20016618 	.word	0x20016618
 8011b90:	2000e3c8 	.word	0x2000e3c8
 8011b94:	b280      	uxth	r0, r0
 8011b96:	f7ff f8ad 	bl	8010cf4 <VLine>
}
 8011b9a:	b003      	add	sp, #12
 8011b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(trak.percent < 0) DrawElement(10, 2, 308, 195, 0x00FFFFFF, minus);
 8011b9e:	4bb2      	ldr	r3, [pc, #712]	; (8011e68 <DrawLowSpectrum+0x828>)
 8011ba0:	9301      	str	r3, [sp, #4]
 8011ba2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011ba6:	9300      	str	r3, [sp, #0]
 8011ba8:	23c3      	movs	r3, #195	; 0xc3
 8011baa:	f44f 729a 	mov.w	r2, #308	; 0x134
 8011bae:	2102      	movs	r1, #2
 8011bb0:	200a      	movs	r0, #10
 8011bb2:	f7ff f857 	bl	8010c64 <DrawElement>
 8011bb6:	e648      	b.n	801184a <DrawLowSpectrum+0x20a>
		DrawElement(34, 7, 445, 230, 0x00FF0000, pitch_wide);
 8011bb8:	4bac      	ldr	r3, [pc, #688]	; (8011e6c <DrawLowSpectrum+0x82c>)
 8011bba:	9301      	str	r3, [sp, #4]
 8011bbc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	23e6      	movs	r3, #230	; 0xe6
 8011bc4:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011bc8:	2107      	movs	r1, #7
 8011bca:	2022      	movs	r0, #34	; 0x22
 8011bcc:	f7ff f84a 	bl	8010c64 <DrawElement>
		if(percent / 10000 > 0) {
 8011bd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8011bd4:	429d      	cmp	r5, r3
 8011bd6:	d837      	bhi.n	8011c48 <DrawLowSpectrum+0x608>
		if(percent / 1000 > 0) {
 8011bd8:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8011bdc:	d242      	bcs.n	8011c64 <DrawLowSpectrum+0x624>
		DrawDigit(((percent / 100) % 100) % 10, 345, 186, 10, 0x00FFFFFF);
 8011bde:	4aa4      	ldr	r2, [pc, #656]	; (8011e70 <DrawLowSpectrum+0x830>)
 8011be0:	fba2 1305 	umull	r1, r3, r2, r5
 8011be4:	095c      	lsrs	r4, r3, #5
 8011be6:	fba2 1204 	umull	r1, r2, r2, r4
 8011bea:	0952      	lsrs	r2, r2, #5
 8011bec:	2664      	movs	r6, #100	; 0x64
 8011bee:	fb06 4312 	mls	r3, r6, r2, r4
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	4a9f      	ldr	r2, [pc, #636]	; (8011e74 <DrawLowSpectrum+0x834>)
 8011bf6:	fba2 1203 	umull	r1, r2, r2, r3
 8011bfa:	08d2      	lsrs	r2, r2, #3
 8011bfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011c00:	0050      	lsls	r0, r2, #1
 8011c02:	1a18      	subs	r0, r3, r0
 8011c04:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8011c08:	9700      	str	r7, [sp, #0]
 8011c0a:	230a      	movs	r3, #10
 8011c0c:	22ba      	movs	r2, #186	; 0xba
 8011c0e:	f240 1159 	movw	r1, #345	; 0x159
 8011c12:	b2c0      	uxtb	r0, r0
 8011c14:	f7ff f92c 	bl	8010e70 <DrawDigit>
		DrawElement(2, 2, 356, 204, 0x00FFFFFF, small_point);
 8011c18:	4b97      	ldr	r3, [pc, #604]	; (8011e78 <DrawLowSpectrum+0x838>)
 8011c1a:	9301      	str	r3, [sp, #4]
 8011c1c:	9700      	str	r7, [sp, #0]
 8011c1e:	23cc      	movs	r3, #204	; 0xcc
 8011c20:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011c24:	2102      	movs	r1, #2
 8011c26:	4608      	mov	r0, r1
 8011c28:	f7ff f81c 	bl	8010c64 <DrawElement>
		if(percent % 100 >= 5) DrawDigit(5, 360, 186, 10, 0x00FFFFFF);
 8011c2c:	fb06 5314 	mls	r3, r6, r4, r5
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	2b04      	cmp	r3, #4
 8011c34:	d930      	bls.n	8011c98 <DrawLowSpectrum+0x658>
 8011c36:	9700      	str	r7, [sp, #0]
 8011c38:	230a      	movs	r3, #10
 8011c3a:	22ba      	movs	r2, #186	; 0xba
 8011c3c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8011c40:	2005      	movs	r0, #5
 8011c42:	f7ff f915 	bl	8010e70 <DrawDigit>
 8011c46:	e61d      	b.n	8011884 <DrawLowSpectrum+0x244>
			DrawDigit(percent / 10000, 315, 186, 10, 0x00FFFFFF);
 8011c48:	488c      	ldr	r0, [pc, #560]	; (8011e7c <DrawLowSpectrum+0x83c>)
 8011c4a:	fba0 3005 	umull	r3, r0, r0, r5
 8011c4e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	230a      	movs	r3, #10
 8011c56:	22ba      	movs	r2, #186	; 0xba
 8011c58:	f240 113b 	movw	r1, #315	; 0x13b
 8011c5c:	0b40      	lsrs	r0, r0, #13
 8011c5e:	f7ff f907 	bl	8010e70 <DrawDigit>
 8011c62:	e7b9      	b.n	8011bd8 <DrawLowSpectrum+0x598>
			DrawDigit(((percent / 100) % 100) / 10, 330, 186, 10, 0x00FFFFFF);
 8011c64:	4882      	ldr	r0, [pc, #520]	; (8011e70 <DrawLowSpectrum+0x830>)
 8011c66:	fba0 2305 	umull	r2, r3, r0, r5
 8011c6a:	095b      	lsrs	r3, r3, #5
 8011c6c:	fba0 2003 	umull	r2, r0, r0, r3
 8011c70:	0940      	lsrs	r0, r0, #5
 8011c72:	2264      	movs	r2, #100	; 0x64
 8011c74:	fb02 3010 	mls	r0, r2, r0, r3
 8011c78:	b280      	uxth	r0, r0
 8011c7a:	4b7e      	ldr	r3, [pc, #504]	; (8011e74 <DrawLowSpectrum+0x834>)
 8011c7c:	fba3 3000 	umull	r3, r0, r3, r0
 8011c80:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011c84:	9300      	str	r3, [sp, #0]
 8011c86:	230a      	movs	r3, #10
 8011c88:	22ba      	movs	r2, #186	; 0xba
 8011c8a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8011c8e:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8011c92:	f7ff f8ed 	bl	8010e70 <DrawDigit>
 8011c96:	e7a2      	b.n	8011bde <DrawLowSpectrum+0x59e>
		else DrawDigit(0, 360, 186, 10, 0x00FFFFFF);
 8011c98:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011c9c:	9300      	str	r3, [sp, #0]
 8011c9e:	230a      	movs	r3, #10
 8011ca0:	22ba      	movs	r2, #186	; 0xba
 8011ca2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	f7ff f8e2 	bl	8010e70 <DrawDigit>
 8011cac:	e5ea      	b.n	8011884 <DrawLowSpectrum+0x244>
		DrawElement(34, 9, 445, 241, 0x00FFFFFF, pitch16);
 8011cae:	4b74      	ldr	r3, [pc, #464]	; (8011e80 <DrawLowSpectrum+0x840>)
 8011cb0:	9301      	str	r3, [sp, #4]
 8011cb2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011cb6:	9300      	str	r3, [sp, #0]
 8011cb8:	23f1      	movs	r3, #241	; 0xf1
 8011cba:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011cbe:	2109      	movs	r1, #9
 8011cc0:	2022      	movs	r0, #34	; 0x22
 8011cc2:	f7fe ffcf 	bl	8010c64 <DrawElement>
		if(percent / 1000 > 0) {
 8011cc6:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8011cca:	d244      	bcs.n	8011d56 <DrawLowSpectrum+0x716>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 8011ccc:	4a68      	ldr	r2, [pc, #416]	; (8011e70 <DrawLowSpectrum+0x830>)
 8011cce:	fba2 1305 	umull	r1, r3, r2, r5
 8011cd2:	095b      	lsrs	r3, r3, #5
 8011cd4:	fba2 1203 	umull	r1, r2, r2, r3
 8011cd8:	0952      	lsrs	r2, r2, #5
 8011cda:	2164      	movs	r1, #100	; 0x64
 8011cdc:	fb01 3312 	mls	r3, r1, r2, r3
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	4e64      	ldr	r6, [pc, #400]	; (8011e74 <DrawLowSpectrum+0x834>)
 8011ce4:	fba6 1203 	umull	r1, r2, r6, r3
 8011ce8:	08d2      	lsrs	r2, r2, #3
 8011cea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011cee:	0050      	lsls	r0, r2, #1
 8011cf0:	1a18      	subs	r0, r3, r0
 8011cf2:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8011cf6:	9700      	str	r7, [sp, #0]
 8011cf8:	230a      	movs	r3, #10
 8011cfa:	22ba      	movs	r2, #186	; 0xba
 8011cfc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8011d00:	b2c0      	uxtb	r0, r0
 8011d02:	f7ff f8b5 	bl	8010e70 <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 8011d06:	4b5c      	ldr	r3, [pc, #368]	; (8011e78 <DrawLowSpectrum+0x838>)
 8011d08:	9301      	str	r3, [sp, #4]
 8011d0a:	9700      	str	r7, [sp, #0]
 8011d0c:	23cc      	movs	r3, #204	; 0xcc
 8011d0e:	f240 1255 	movw	r2, #341	; 0x155
 8011d12:	2102      	movs	r1, #2
 8011d14:	4608      	mov	r0, r1
 8011d16:	f7fe ffa5 	bl	8010c64 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8011d1a:	fba6 3205 	umull	r3, r2, r6, r5
 8011d1e:	08d2      	lsrs	r2, r2, #3
 8011d20:	fba6 1302 	umull	r1, r3, r6, r2
 8011d24:	08db      	lsrs	r3, r3, #3
 8011d26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011d2a:	0058      	lsls	r0, r3, #1
 8011d2c:	1a10      	subs	r0, r2, r0
 8011d2e:	9700      	str	r7, [sp, #0]
 8011d30:	230a      	movs	r3, #10
 8011d32:	22ba      	movs	r2, #186	; 0xba
 8011d34:	f240 1159 	movw	r1, #345	; 0x159
 8011d38:	b2c0      	uxtb	r0, r0
 8011d3a:	f7ff f899 	bl	8010e70 <DrawDigit>
		DrawDigit((percent % 2) * 5, 360, 186, 10, 0x00FFFFFF);
 8011d3e:	f004 0001 	and.w	r0, r4, #1
 8011d42:	9700      	str	r7, [sp, #0]
 8011d44:	230a      	movs	r3, #10
 8011d46:	22ba      	movs	r2, #186	; 0xba
 8011d48:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8011d4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011d50:	f7ff f88e 	bl	8010e70 <DrawDigit>
 8011d54:	e596      	b.n	8011884 <DrawLowSpectrum+0x244>
			DrawDigit(((percent / 100) % 100) / 10, 315, 186, 10, 0x00FFFFFF);
 8011d56:	4846      	ldr	r0, [pc, #280]	; (8011e70 <DrawLowSpectrum+0x830>)
 8011d58:	fba0 2305 	umull	r2, r3, r0, r5
 8011d5c:	095b      	lsrs	r3, r3, #5
 8011d5e:	fba0 2003 	umull	r2, r0, r0, r3
 8011d62:	0940      	lsrs	r0, r0, #5
 8011d64:	2264      	movs	r2, #100	; 0x64
 8011d66:	fb02 3010 	mls	r0, r2, r0, r3
 8011d6a:	b280      	uxth	r0, r0
 8011d6c:	4b41      	ldr	r3, [pc, #260]	; (8011e74 <DrawLowSpectrum+0x834>)
 8011d6e:	fba3 3000 	umull	r3, r0, r3, r0
 8011d72:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011d76:	9300      	str	r3, [sp, #0]
 8011d78:	230a      	movs	r3, #10
 8011d7a:	22ba      	movs	r2, #186	; 0xba
 8011d7c:	f240 113b 	movw	r1, #315	; 0x13b
 8011d80:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8011d84:	f7ff f874 	bl	8010e70 <DrawDigit>
 8011d88:	e7a0      	b.n	8011ccc <DrawLowSpectrum+0x68c>
		DrawElement(34, 9, 445, 252, 0x00FF0000, pitch10);
 8011d8a:	4b3e      	ldr	r3, [pc, #248]	; (8011e84 <DrawLowSpectrum+0x844>)
 8011d8c:	9301      	str	r3, [sp, #4]
 8011d8e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8011d92:	9300      	str	r3, [sp, #0]
 8011d94:	23fc      	movs	r3, #252	; 0xfc
 8011d96:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011d9a:	2109      	movs	r1, #9
 8011d9c:	2022      	movs	r0, #34	; 0x22
 8011d9e:	f7fe ff61 	bl	8010c64 <DrawElement>
		if(percent / 1000 > 0) {
 8011da2:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8011da6:	d244      	bcs.n	8011e32 <DrawLowSpectrum+0x7f2>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 8011da8:	4a31      	ldr	r2, [pc, #196]	; (8011e70 <DrawLowSpectrum+0x830>)
 8011daa:	fba2 1305 	umull	r1, r3, r2, r5
 8011dae:	095b      	lsrs	r3, r3, #5
 8011db0:	fba2 1203 	umull	r1, r2, r2, r3
 8011db4:	0952      	lsrs	r2, r2, #5
 8011db6:	2164      	movs	r1, #100	; 0x64
 8011db8:	fb01 3312 	mls	r3, r1, r2, r3
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	4e2d      	ldr	r6, [pc, #180]	; (8011e74 <DrawLowSpectrum+0x834>)
 8011dc0:	fba6 1203 	umull	r1, r2, r6, r3
 8011dc4:	08d2      	lsrs	r2, r2, #3
 8011dc6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011dca:	0050      	lsls	r0, r2, #1
 8011dcc:	1a18      	subs	r0, r3, r0
 8011dce:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 8011dd2:	9700      	str	r7, [sp, #0]
 8011dd4:	230a      	movs	r3, #10
 8011dd6:	22ba      	movs	r2, #186	; 0xba
 8011dd8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8011ddc:	b2c0      	uxtb	r0, r0
 8011dde:	f7ff f847 	bl	8010e70 <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 8011de2:	4b25      	ldr	r3, [pc, #148]	; (8011e78 <DrawLowSpectrum+0x838>)
 8011de4:	9301      	str	r3, [sp, #4]
 8011de6:	9700      	str	r7, [sp, #0]
 8011de8:	23cc      	movs	r3, #204	; 0xcc
 8011dea:	f240 1255 	movw	r2, #341	; 0x155
 8011dee:	2102      	movs	r1, #2
 8011df0:	4608      	mov	r0, r1
 8011df2:	f7fe ff37 	bl	8010c64 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8011df6:	fba6 3205 	umull	r3, r2, r6, r5
 8011dfa:	08d2      	lsrs	r2, r2, #3
 8011dfc:	fba6 1302 	umull	r1, r3, r6, r2
 8011e00:	08db      	lsrs	r3, r3, #3
 8011e02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011e06:	0058      	lsls	r0, r3, #1
 8011e08:	1a10      	subs	r0, r2, r0
 8011e0a:	9700      	str	r7, [sp, #0]
 8011e0c:	230a      	movs	r3, #10
 8011e0e:	22ba      	movs	r2, #186	; 0xba
 8011e10:	f240 1159 	movw	r1, #345	; 0x159
 8011e14:	b2c0      	uxtb	r0, r0
 8011e16:	f7ff f82b 	bl	8010e70 <DrawDigit>
		DrawDigit((percent % 2) * 5, 360, 186, 10, 0x00FFFFFF);
 8011e1a:	f004 0001 	and.w	r0, r4, #1
 8011e1e:	9700      	str	r7, [sp, #0]
 8011e20:	230a      	movs	r3, #10
 8011e22:	22ba      	movs	r2, #186	; 0xba
 8011e24:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8011e28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011e2c:	f7ff f820 	bl	8010e70 <DrawDigit>
 8011e30:	e528      	b.n	8011884 <DrawLowSpectrum+0x244>
			DrawDigit(((percent / 100) % 100) / 10, 315, 186, 10, 0x00FFFFFF);
 8011e32:	480f      	ldr	r0, [pc, #60]	; (8011e70 <DrawLowSpectrum+0x830>)
 8011e34:	fba0 2305 	umull	r2, r3, r0, r5
 8011e38:	095b      	lsrs	r3, r3, #5
 8011e3a:	fba0 2003 	umull	r2, r0, r0, r3
 8011e3e:	0940      	lsrs	r0, r0, #5
 8011e40:	2264      	movs	r2, #100	; 0x64
 8011e42:	fb02 3010 	mls	r0, r2, r0, r3
 8011e46:	b280      	uxth	r0, r0
 8011e48:	4b0a      	ldr	r3, [pc, #40]	; (8011e74 <DrawLowSpectrum+0x834>)
 8011e4a:	fba3 3000 	umull	r3, r0, r3, r0
 8011e4e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011e52:	9300      	str	r3, [sp, #0]
 8011e54:	230a      	movs	r3, #10
 8011e56:	22ba      	movs	r2, #186	; 0xba
 8011e58:	f240 113b 	movw	r1, #315	; 0x13b
 8011e5c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8011e60:	f7ff f806 	bl	8010e70 <DrawDigit>
 8011e64:	e7a0      	b.n	8011da8 <DrawLowSpectrum+0x768>
 8011e66:	bf00      	nop
 8011e68:	0801e000 	.word	0x0801e000
 8011e6c:	0801e110 	.word	0x0801e110
 8011e70:	51eb851f 	.word	0x51eb851f
 8011e74:	cccccccd 	.word	0xcccccccd
 8011e78:	0801e82c 	.word	0x0801e82c
 8011e7c:	d1b71759 	.word	0xd1b71759
 8011e80:	0801e088 	.word	0x0801e088
 8011e84:	0801e044 	.word	0x0801e044
		DrawElement(34, 9, 445, 263, 0x0000FF00, pitch6);
 8011e88:	4bac      	ldr	r3, [pc, #688]	; (801213c <DrawLowSpectrum+0xafc>)
 8011e8a:	9301      	str	r3, [sp, #4]
 8011e8c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8011e90:	9300      	str	r3, [sp, #0]
 8011e92:	f240 1307 	movw	r3, #263	; 0x107
 8011e96:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011e9a:	2109      	movs	r1, #9
 8011e9c:	2022      	movs	r0, #34	; 0x22
 8011e9e:	f7fe fee1 	bl	8010c64 <DrawElement>
		DrawDigit(((percent / 100) % 100) % 10, 330, 186, 10, 0x00FFFFFF);
 8011ea2:	4aa7      	ldr	r2, [pc, #668]	; (8012140 <DrawLowSpectrum+0xb00>)
 8011ea4:	fba2 1305 	umull	r1, r3, r2, r5
 8011ea8:	095b      	lsrs	r3, r3, #5
 8011eaa:	fba2 1203 	umull	r1, r2, r2, r3
 8011eae:	0952      	lsrs	r2, r2, #5
 8011eb0:	2164      	movs	r1, #100	; 0x64
 8011eb2:	fb01 3312 	mls	r3, r1, r2, r3
 8011eb6:	b29b      	uxth	r3, r3
 8011eb8:	4ca2      	ldr	r4, [pc, #648]	; (8012144 <DrawLowSpectrum+0xb04>)
 8011eba:	fba4 1203 	umull	r1, r2, r4, r3
 8011ebe:	08d2      	lsrs	r2, r2, #3
 8011ec0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011ec4:	0050      	lsls	r0, r2, #1
 8011ec6:	1a18      	subs	r0, r3, r0
 8011ec8:	f06f 467f 	mvn.w	r6, #4278190080	; 0xff000000
 8011ecc:	9600      	str	r6, [sp, #0]
 8011ece:	230a      	movs	r3, #10
 8011ed0:	22ba      	movs	r2, #186	; 0xba
 8011ed2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8011ed6:	b2c0      	uxtb	r0, r0
 8011ed8:	f7fe ffca 	bl	8010e70 <DrawDigit>
		DrawElement(2, 2, 341, 204, 0x00FFFFFF, small_point);
 8011edc:	4b9a      	ldr	r3, [pc, #616]	; (8012148 <DrawLowSpectrum+0xb08>)
 8011ede:	9301      	str	r3, [sp, #4]
 8011ee0:	9600      	str	r6, [sp, #0]
 8011ee2:	23cc      	movs	r3, #204	; 0xcc
 8011ee4:	f240 1255 	movw	r2, #341	; 0x155
 8011ee8:	2102      	movs	r1, #2
 8011eea:	4608      	mov	r0, r1
 8011eec:	f7fe feba 	bl	8010c64 <DrawElement>
		DrawDigit((percent / 10) % 10, 345, 186, 10, 0x00FFFFFF);
 8011ef0:	fba4 3705 	umull	r3, r7, r4, r5
 8011ef4:	08fa      	lsrs	r2, r7, #3
 8011ef6:	fba4 1302 	umull	r1, r3, r4, r2
 8011efa:	08db      	lsrs	r3, r3, #3
 8011efc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011f00:	0058      	lsls	r0, r3, #1
 8011f02:	1a10      	subs	r0, r2, r0
 8011f04:	9600      	str	r6, [sp, #0]
 8011f06:	230a      	movs	r3, #10
 8011f08:	22ba      	movs	r2, #186	; 0xba
 8011f0a:	f240 1159 	movw	r1, #345	; 0x159
 8011f0e:	b2c0      	uxtb	r0, r0
 8011f10:	f7fe ffae 	bl	8010e70 <DrawDigit>
		DrawDigit((percent % 5) * 2, 360, 186, 10, 0x00FFFFFF);
 8011f14:	08b8      	lsrs	r0, r7, #2
 8011f16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011f1a:	1a28      	subs	r0, r5, r0
 8011f1c:	0040      	lsls	r0, r0, #1
 8011f1e:	9600      	str	r6, [sp, #0]
 8011f20:	230a      	movs	r3, #10
 8011f22:	22ba      	movs	r2, #186	; 0xba
 8011f24:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8011f28:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8011f2c:	f7fe ffa0 	bl	8010e70 <DrawDigit>
 8011f30:	e4a8      	b.n	8011884 <DrawLowSpectrum+0x244>
		DrawElement(34, 11, 86, 207, 0x00FF0000, auto_cue);
 8011f32:	4b86      	ldr	r3, [pc, #536]	; (801214c <DrawLowSpectrum+0xb0c>)
 8011f34:	9301      	str	r3, [sp, #4]
 8011f36:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	23cf      	movs	r3, #207	; 0xcf
 8011f3e:	2256      	movs	r2, #86	; 0x56
 8011f40:	210b      	movs	r1, #11
 8011f42:	2022      	movs	r0, #34	; 0x22
 8011f44:	f7fe fe8e 	bl	8010c64 <DrawElement>
 8011f48:	e4b6      	b.n	80118b8 <DrawLowSpectrum+0x278>
		DrawElement(48, 5, 200, 178, 0x00FF0000, quantize);
 8011f4a:	4b81      	ldr	r3, [pc, #516]	; (8012150 <DrawLowSpectrum+0xb10>)
 8011f4c:	9301      	str	r3, [sp, #4]
 8011f4e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	23b2      	movs	r3, #178	; 0xb2
 8011f56:	22c8      	movs	r2, #200	; 0xc8
 8011f58:	2105      	movs	r1, #5
 8011f5a:	2030      	movs	r0, #48	; 0x30
 8011f5c:	f7fe fe82 	bl	8010c64 <DrawElement>
 8011f60:	e4af      	b.n	80118c2 <DrawLowSpectrum+0x282>
		DrawElement(34, 11, 355, 183, 0x00FF0000, master_tempo);
 8011f62:	4b7c      	ldr	r3, [pc, #496]	; (8012154 <DrawLowSpectrum+0xb14>)
 8011f64:	9301      	str	r3, [sp, #4]
 8011f66:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8011f6a:	9300      	str	r3, [sp, #0]
 8011f6c:	23b7      	movs	r3, #183	; 0xb7
 8011f6e:	f240 1263 	movw	r2, #355	; 0x163
 8011f72:	210b      	movs	r1, #11
 8011f74:	2022      	movs	r0, #34	; 0x22
 8011f76:	f7fe fe75 	bl	8010c64 <DrawElement>
 8011f7a:	e4a7      	b.n	80118cc <DrawLowSpectrum+0x28c>
		DrawDigit((rfr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	e549      	b.n	8011a14 <DrawLowSpectrum+0x3d4>
		DrawDigit(min / 10, 134, 184, 11, 0x00FFFFFF);
 8011f80:	4e75      	ldr	r6, [pc, #468]	; (8012158 <DrawLowSpectrum+0xb18>)
 8011f82:	f996 3000 	ldrsb.w	r3, [r6]
 8011f86:	4d75      	ldr	r5, [pc, #468]	; (801215c <DrawLowSpectrum+0xb1c>)
 8011f88:	fb85 2003 	smull	r2, r0, r5, r3
 8011f8c:	17db      	asrs	r3, r3, #31
 8011f8e:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 8011f92:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 8011f96:	9400      	str	r4, [sp, #0]
 8011f98:	230b      	movs	r3, #11
 8011f9a:	22b8      	movs	r2, #184	; 0xb8
 8011f9c:	2186      	movs	r1, #134	; 0x86
 8011f9e:	b2c0      	uxtb	r0, r0
 8011fa0:	f7fe ff66 	bl	8010e70 <DrawDigit>
		DrawDigit(min % 10, 148, 184, 11, 0x00FFFFFF);
 8011fa4:	f996 2000 	ldrsb.w	r2, [r6]
 8011fa8:	fb85 3102 	smull	r3, r1, r5, r2
 8011fac:	17d3      	asrs	r3, r2, #31
 8011fae:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8011fb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011fb6:	0058      	lsls	r0, r3, #1
 8011fb8:	1a10      	subs	r0, r2, r0
 8011fba:	9400      	str	r4, [sp, #0]
 8011fbc:	230b      	movs	r3, #11
 8011fbe:	22b8      	movs	r2, #184	; 0xb8
 8011fc0:	2194      	movs	r1, #148	; 0x94
 8011fc2:	b2c0      	uxtb	r0, r0
 8011fc4:	f7fe ff54 	bl	8010e70 <DrawDigit>
		DrawDigit(sec / 10, 185, 184, 11, 0x00FFFFFF);
 8011fc8:	4e65      	ldr	r6, [pc, #404]	; (8012160 <DrawLowSpectrum+0xb20>)
 8011fca:	f996 3000 	ldrsb.w	r3, [r6]
 8011fce:	fb85 2003 	smull	r2, r0, r5, r3
 8011fd2:	17db      	asrs	r3, r3, #31
 8011fd4:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 8011fd8:	9400      	str	r4, [sp, #0]
 8011fda:	230b      	movs	r3, #11
 8011fdc:	22b8      	movs	r2, #184	; 0xb8
 8011fde:	21b9      	movs	r1, #185	; 0xb9
 8011fe0:	b2c0      	uxtb	r0, r0
 8011fe2:	f7fe ff45 	bl	8010e70 <DrawDigit>
		DrawDigit(sec % 10, 199, 184, 11, 0x00FFFFFF);
 8011fe6:	f996 2000 	ldrsb.w	r2, [r6]
 8011fea:	fb85 3102 	smull	r3, r1, r5, r2
 8011fee:	17d3      	asrs	r3, r2, #31
 8011ff0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8011ff4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011ff8:	0058      	lsls	r0, r3, #1
 8011ffa:	1a10      	subs	r0, r2, r0
 8011ffc:	9400      	str	r4, [sp, #0]
 8011ffe:	230b      	movs	r3, #11
 8012000:	22b8      	movs	r2, #184	; 0xb8
 8012002:	21c7      	movs	r1, #199	; 0xc7
 8012004:	b2c0      	uxtb	r0, r0
 8012006:	f7fe ff33 	bl	8010e70 <DrawDigit>
		DrawDigit(fr / 20, 224, 184, 11, 0x00FFFFFF);
 801200a:	4e56      	ldr	r6, [pc, #344]	; (8012164 <DrawLowSpectrum+0xb24>)
 801200c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8012010:	fb85 1302 	smull	r1, r3, r5, r2
 8012014:	17d2      	asrs	r2, r2, #31
 8012016:	ebc2 00e3 	rsb	r0, r2, r3, asr #3
 801201a:	9400      	str	r4, [sp, #0]
 801201c:	230b      	movs	r3, #11
 801201e:	22b8      	movs	r2, #184	; 0xb8
 8012020:	21e0      	movs	r1, #224	; 0xe0
 8012022:	b2c0      	uxtb	r0, r0
 8012024:	f7fe ff24 	bl	8010e70 <DrawDigit>
		DrawDigit((fr / 2) % 10, 238, 184, 11, 0x00FFFFFF);
 8012028:	f9b6 3000 	ldrsh.w	r3, [r6]
 801202c:	2b00      	cmp	r3, #0
 801202e:	db14      	blt.n	801205a <DrawLowSpectrum+0xa1a>
 8012030:	105b      	asrs	r3, r3, #1
 8012032:	494a      	ldr	r1, [pc, #296]	; (801215c <DrawLowSpectrum+0xb1c>)
 8012034:	fb81 2103 	smull	r2, r1, r1, r3
 8012038:	17da      	asrs	r2, r3, #31
 801203a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 801203e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012042:	0050      	lsls	r0, r2, #1
 8012044:	1a18      	subs	r0, r3, r0
 8012046:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801204a:	9300      	str	r3, [sp, #0]
 801204c:	230b      	movs	r3, #11
 801204e:	22b8      	movs	r2, #184	; 0xb8
 8012050:	21ee      	movs	r1, #238	; 0xee
 8012052:	b2c0      	uxtb	r0, r0
 8012054:	f7fe ff0c 	bl	8010e70 <DrawDigit>
 8012058:	e4f0      	b.n	8011a3c <DrawLowSpectrum+0x3fc>
 801205a:	3301      	adds	r3, #1
 801205c:	e7e8      	b.n	8012030 <DrawLowSpectrum+0x9f0>
		DrawDigit(bpm / 10000, 400, 176, 10, 0x00FFFFFF);
 801205e:	4842      	ldr	r0, [pc, #264]	; (8012168 <DrawLowSpectrum+0xb28>)
 8012060:	fba0 3005 	umull	r3, r0, r0, r5
 8012064:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012068:	9300      	str	r3, [sp, #0]
 801206a:	230a      	movs	r3, #10
 801206c:	22b0      	movs	r2, #176	; 0xb0
 801206e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012072:	0b40      	lsrs	r0, r0, #13
 8012074:	f7fe fefc 	bl	8010e70 <DrawDigit>
 8012078:	e4fe      	b.n	8011a78 <DrawLowSpectrum+0x438>
		DrawDigit(((bpm / 100) % 100) / 10, 415, 176, 10, 0x00FFFFFF);
 801207a:	4831      	ldr	r0, [pc, #196]	; (8012140 <DrawLowSpectrum+0xb00>)
 801207c:	fba0 2305 	umull	r2, r3, r0, r5
 8012080:	095b      	lsrs	r3, r3, #5
 8012082:	fba0 2003 	umull	r2, r0, r0, r3
 8012086:	0940      	lsrs	r0, r0, #5
 8012088:	2264      	movs	r2, #100	; 0x64
 801208a:	fb02 3010 	mls	r0, r2, r0, r3
 801208e:	b280      	uxth	r0, r0
 8012090:	4b2c      	ldr	r3, [pc, #176]	; (8012144 <DrawLowSpectrum+0xb04>)
 8012092:	fba3 3000 	umull	r3, r0, r3, r0
 8012096:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	230a      	movs	r3, #10
 801209e:	22b0      	movs	r2, #176	; 0xb0
 80120a0:	f240 119f 	movw	r1, #415	; 0x19f
 80120a4:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 80120a8:	f7fe fee2 	bl	8010e70 <DrawDigit>
 80120ac:	e4e8      	b.n	8011a80 <DrawLowSpectrum+0x440>
		if(rekordbox.cue_start_position[0] != 0) {
 80120ae:	4b2f      	ldr	r3, [pc, #188]	; (801216c <DrawLowSpectrum+0xb2c>)
 80120b0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80120b4:	b993      	cbnz	r3, 80120dc <DrawLowSpectrum+0xa9c>
		if(rekordbox.cue_start_position[0] != 0) {
 80120b6:	4b2d      	ldr	r3, [pc, #180]	; (801216c <DrawLowSpectrum+0xb2c>)
 80120b8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80120bc:	2b00      	cmp	r3, #0
 80120be:	f43f ad1e 	beq.w	8011afe <DrawLowSpectrum+0x4be>
			DrawElement(36, 11, 1, 260, 0x00FF0000, cue_ind);
 80120c2:	4b2b      	ldr	r3, [pc, #172]	; (8012170 <DrawLowSpectrum+0xb30>)
 80120c4:	9301      	str	r3, [sp, #4]
 80120c6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80120ca:	9300      	str	r3, [sp, #0]
 80120cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80120d0:	2201      	movs	r2, #1
 80120d2:	210b      	movs	r1, #11
 80120d4:	2024      	movs	r0, #36	; 0x24
 80120d6:	f7fe fdc5 	bl	8010c64 <DrawElement>
 80120da:	e510      	b.n	8011afe <DrawLowSpectrum+0x4be>
				*400/rekordbox.spectrum_size), 219, 0x00FFFF00, hot_cue);
 80120dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80120e0:	fb03 f202 	mul.w	r2, r3, r2
 80120e4:	4b21      	ldr	r3, [pc, #132]	; (801216c <DrawLowSpectrum+0xb2c>)
 80120e6:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80120ea:	fbb2 f2f3 	udiv	r2, r2, r3
			DrawElement(9, 5, 36+(rekordbox.cue_start_position[0]
 80120ee:	3224      	adds	r2, #36	; 0x24
 80120f0:	4b20      	ldr	r3, [pc, #128]	; (8012174 <DrawLowSpectrum+0xb34>)
 80120f2:	9301      	str	r3, [sp, #4]
 80120f4:	4b20      	ldr	r3, [pc, #128]	; (8012178 <DrawLowSpectrum+0xb38>)
 80120f6:	9300      	str	r3, [sp, #0]
 80120f8:	23db      	movs	r3, #219	; 0xdb
 80120fa:	b292      	uxth	r2, r2
 80120fc:	2105      	movs	r1, #5
 80120fe:	2009      	movs	r0, #9
 8012100:	f7fe fdb0 	bl	8010c64 <DrawElement>
 8012104:	e7d7      	b.n	80120b6 <DrawLowSpectrum+0xa76>
		DrawElement(36, 11, 1, 230, 0x00FF0000, memory_ind);
 8012106:	4b1d      	ldr	r3, [pc, #116]	; (801217c <DrawLowSpectrum+0xb3c>)
 8012108:	9301      	str	r3, [sp, #4]
 801210a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801210e:	9300      	str	r3, [sp, #0]
 8012110:	23e6      	movs	r3, #230	; 0xe6
 8012112:	2201      	movs	r2, #1
 8012114:	210b      	movs	r1, #11
 8012116:	2024      	movs	r0, #36	; 0x24
 8012118:	f7fe fda4 	bl	8010c64 <DrawElement>
		for(i = 1; i < rekordbox.cues; i++) {
 801211c:	2501      	movs	r5, #1
 801211e:	e030      	b.n	8012182 <DrawLowSpectrum+0xb42>
				DrawElement(9, 5, 37+start_pos, 219, 0x00FF0000, hot_cue);
 8012120:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8012124:	4b13      	ldr	r3, [pc, #76]	; (8012174 <DrawLowSpectrum+0xb34>)
 8012126:	9301      	str	r3, [sp, #4]
 8012128:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801212c:	9300      	str	r3, [sp, #0]
 801212e:	23db      	movs	r3, #219	; 0xdb
 8012130:	b292      	uxth	r2, r2
 8012132:	2105      	movs	r1, #5
 8012134:	2009      	movs	r0, #9
 8012136:	f7fe fd95 	bl	8010c64 <DrawElement>
 801213a:	e04a      	b.n	80121d2 <DrawLowSpectrum+0xb92>
 801213c:	0801e0cc 	.word	0x0801e0cc
 8012140:	51eb851f 	.word	0x51eb851f
 8012144:	cccccccd 	.word	0xcccccccd
 8012148:	0801e82c 	.word	0x0801e82c
 801214c:	0801d5a4 	.word	0x0801d5a4
 8012150:	0801e170 	.word	0x0801e170
 8012154:	0801df74 	.word	0x0801df74
 8012158:	2000e790 	.word	0x2000e790
 801215c:	66666667 	.word	0x66666667
 8012160:	2000eb98 	.word	0x2000eb98
 8012164:	2000e5f8 	.word	0x2000e5f8
 8012168:	d1b71759 	.word	0xd1b71759
 801216c:	20016618 	.word	0x20016618
 8012170:	0801d638 	.word	0x0801d638
 8012174:	0801df14 	.word	0x0801df14
 8012178:	00ffff00 	.word	0x00ffff00
 801217c:	0801dfb8 	.word	0x0801dfb8
		for(i = 1; i < rekordbox.cues; i++) {
 8012180:	3501      	adds	r5, #1
 8012182:	4b6c      	ldr	r3, [pc, #432]	; (8012334 <DrawLowSpectrum+0xcf4>)
 8012184:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8012188:	42ab      	cmp	r3, r5
 801218a:	f67f acbe 	bls.w	8011b0a <DrawLowSpectrum+0x4ca>
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 801218e:	4b6a      	ldr	r3, [pc, #424]	; (8012338 <DrawLowSpectrum+0xcf8>)
 8012190:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 8012194:	f605 2202 	addw	r2, r5, #2562	; 0xa02
 8012198:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801219c:	ed92 7a01 	vldr	s14, [r2, #4]
 80121a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80121a4:	edd1 7a93 	vldr	s15, [r1, #588]	; 0x24c
 80121a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121ac:	ee67 7a87 	vmul.f32	s15, s15, s14
					(float)rekordbox.cue_start_position[i]/rekordbox.spectrum_size;
 80121b0:	edd1 6a94 	vldr	s13, [r1, #592]	; 0x250
 80121b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80121b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80121bc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80121c0:	ee17 2a90 	vmov	r2, s15
 80121c4:	b294      	uxth	r4, r2
			if(rekordbox.cue_singleloop[i] == 1) {
 80121c6:	442b      	add	r3, r5
 80121c8:	f642 322c 	movw	r2, #11052	; 0x2b2c
 80121cc:	5c9b      	ldrb	r3, [r3, r2]
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d0a6      	beq.n	8012120 <DrawLowSpectrum+0xae0>
			if(rekordbox.cue_singleloop[i] == 2) {
 80121d2:	4b59      	ldr	r3, [pc, #356]	; (8012338 <DrawLowSpectrum+0xcf8>)
 80121d4:	442b      	add	r3, r5
 80121d6:	f642 322c 	movw	r2, #11052	; 0x2b2c
 80121da:	5c9b      	ldrb	r3, [r3, r2]
 80121dc:	2b02      	cmp	r3, #2
 80121de:	d1cf      	bne.n	8012180 <DrawLowSpectrum+0xb40>
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 80121e0:	4b55      	ldr	r3, [pc, #340]	; (8012338 <DrawLowSpectrum+0xcf8>)
 80121e2:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 80121e6:	f605 2166 	addw	r1, r5, #2662	; 0xa66
 80121ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80121ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80121f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 80121f6:	ed92 7a93 	vldr	s14, [r2, #588]	; 0x24c
 80121fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80121fe:	ee27 7a27 	vmul.f32	s14, s14, s15
					(float)rekordbox.cue_end_position[i]/rekordbox.spectrum_size;
 8012202:	edd2 6a94 	vldr	s13, [r2, #592]	; 0x250
 8012206:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801220a:	eec7 7a26 	vdiv.f32	s15, s14, s13
				uint16_t end_pos = rekordbox.lowp_spectrum_size*
 801220e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012212:	ee17 3a90 	vmov	r3, s15
 8012216:	b29e      	uxth	r6, r3
				VLine(40+start_pos, 220, 40, 0x0000FF00);
 8012218:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801221c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8012220:	2228      	movs	r2, #40	; 0x28
 8012222:	21dc      	movs	r1, #220	; 0xdc
 8012224:	b280      	uxth	r0, r0
 8012226:	f7fe fd65 	bl	8010cf4 <VLine>
				Pixel(41+start_pos, 220, 0x0000FF00);
 801222a:	3429      	adds	r4, #41	; 0x29
 801222c:	b2a4      	uxth	r4, r4
 801222e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8012232:	21dc      	movs	r1, #220	; 0xdc
 8012234:	4620      	mov	r0, r4
 8012236:	f7fe fe05 	bl	8010e44 <Pixel>
				Pixel(41+start_pos, 259, 0x0000FF00);
 801223a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801223e:	f240 1103 	movw	r1, #259	; 0x103
 8012242:	4620      	mov	r0, r4
 8012244:	f7fe fdfe 	bl	8010e44 <Pixel>
				VLine(40+end_pos, 220, 40, 0x0000FF00);
 8012248:	f106 0028 	add.w	r0, r6, #40	; 0x28
 801224c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8012250:	2228      	movs	r2, #40	; 0x28
 8012252:	21dc      	movs	r1, #220	; 0xdc
 8012254:	b280      	uxth	r0, r0
 8012256:	f7fe fd4d 	bl	8010cf4 <VLine>
				Pixel(39+end_pos, 220, 0x0000FF00);
 801225a:	f106 0427 	add.w	r4, r6, #39	; 0x27
 801225e:	b2a4      	uxth	r4, r4
 8012260:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8012264:	21dc      	movs	r1, #220	; 0xdc
 8012266:	4620      	mov	r0, r4
 8012268:	f7fe fdec 	bl	8010e44 <Pixel>
				Pixel(39+end_pos, 259, 0x0000FF00);
 801226c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8012270:	f240 1103 	movw	r1, #259	; 0x103
 8012274:	4620      	mov	r0, r4
 8012276:	f7fe fde5 	bl	8010e44 <Pixel>
 801227a:	e781      	b.n	8012180 <DrawLowSpectrum+0xb40>
		DrawElement(22, 11, 270, 199, 0x0000FF00, loop_l);
 801227c:	4b2f      	ldr	r3, [pc, #188]	; (801233c <DrawLowSpectrum+0xcfc>)
 801227e:	9301      	str	r3, [sp, #4]
 8012280:	f44f 467f 	mov.w	r6, #65280	; 0xff00
 8012284:	9600      	str	r6, [sp, #0]
 8012286:	23c7      	movs	r3, #199	; 0xc7
 8012288:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801228c:	210b      	movs	r1, #11
 801228e:	2016      	movs	r0, #22
 8012290:	f7fe fce8 	bl	8010c64 <DrawElement>
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 8012294:	4a27      	ldr	r2, [pc, #156]	; (8012334 <DrawLowSpectrum+0xcf4>)
 8012296:	edd2 7a93 	vldr	s15, [r2, #588]	; 0x24c
 801229a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
				(float)display.loopstart/rekordbox.spectrum_size;
 801229e:	4b28      	ldr	r3, [pc, #160]	; (8012340 <DrawLowSpectrum+0xd00>)
 80122a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80122a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80122a8:	ee67 6a26 	vmul.f32	s13, s14, s13
				(float)display.loopstart/rekordbox.spectrum_size;
 80122ac:	ed92 6a94 	vldr	s12, [r2, #592]	; 0x250
 80122b0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80122b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
		uint16_t start_pos = rekordbox.lowp_spectrum_size*
 80122b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122bc:	ee17 2a90 	vmov	r2, s15
 80122c0:	b295      	uxth	r5, r2
				(float)display.loopend/rekordbox.spectrum_size;
 80122c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80122c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 80122ca:	ee27 7a27 	vmul.f32	s14, s14, s15
				(float)display.loopend/rekordbox.spectrum_size;
 80122ce:	eec7 7a06 	vdiv.f32	s15, s14, s12
		uint16_t end_pos = rekordbox.lowp_spectrum_size*
 80122d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122d6:	ee17 3a90 	vmov	r3, s15
 80122da:	b29c      	uxth	r4, r3
		VLine(40+start_pos, 220, 40, 0x0000FF00);
 80122dc:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80122e0:	4633      	mov	r3, r6
 80122e2:	2228      	movs	r2, #40	; 0x28
 80122e4:	21dc      	movs	r1, #220	; 0xdc
 80122e6:	b280      	uxth	r0, r0
 80122e8:	f7fe fd04 	bl	8010cf4 <VLine>
		Pixel(41+start_pos, 220, 0x0000FF00);
 80122ec:	3529      	adds	r5, #41	; 0x29
 80122ee:	b2ad      	uxth	r5, r5
 80122f0:	4632      	mov	r2, r6
 80122f2:	21dc      	movs	r1, #220	; 0xdc
 80122f4:	4628      	mov	r0, r5
 80122f6:	f7fe fda5 	bl	8010e44 <Pixel>
		Pixel(41+start_pos, 259, 0x0000FF00);
 80122fa:	4632      	mov	r2, r6
 80122fc:	f240 1103 	movw	r1, #259	; 0x103
 8012300:	4628      	mov	r0, r5
 8012302:	f7fe fd9f 	bl	8010e44 <Pixel>
		VLine(40+end_pos, 220, 40, 0x0000FF00);
 8012306:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801230a:	4633      	mov	r3, r6
 801230c:	2228      	movs	r2, #40	; 0x28
 801230e:	21dc      	movs	r1, #220	; 0xdc
 8012310:	b280      	uxth	r0, r0
 8012312:	f7fe fcef 	bl	8010cf4 <VLine>
		Pixel(39+end_pos, 220, 0x0000FF00);
 8012316:	3427      	adds	r4, #39	; 0x27
 8012318:	b2a4      	uxth	r4, r4
 801231a:	4632      	mov	r2, r6
 801231c:	21dc      	movs	r1, #220	; 0xdc
 801231e:	4620      	mov	r0, r4
 8012320:	f7fe fd90 	bl	8010e44 <Pixel>
		Pixel(39+end_pos, 259, 0x0000FF00);
 8012324:	4632      	mov	r2, r6
 8012326:	f240 1103 	movw	r1, #259	; 0x103
 801232a:	4620      	mov	r0, r4
 801232c:	f7fe fd8a 	bl	8010e44 <Pixel>
 8012330:	f7ff bbf0 	b.w	8011b14 <DrawLowSpectrum+0x4d4>
 8012334:	20016618 	.word	0x20016618
 8012338:	20014618 	.word	0x20014618
 801233c:	0801df48 	.word	0x0801df48
 8012340:	200005e8 	.word	0x200005e8

08012344 <DrawSpectrum>:
{
 8012344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012346:	b0fb      	sub	sp, #492	; 0x1ec
 8012348:	af02      	add	r7, sp, #8
	uint8_t spectrum_frame[480] = {0};
 801234a:	2100      	movs	r1, #0
 801234c:	6039      	str	r1, [r7, #0]
 801234e:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8012352:	1d38      	adds	r0, r7, #4
 8012354:	f006 fe3e 	bl	8018fd4 <memset>
	uint32_t new_cues[rekordbox.cues];
 8012358:	4b98      	ldr	r3, [pc, #608]	; (80125bc <DrawSpectrum+0x278>)
 801235a:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	3307      	adds	r3, #7
 8012362:	f023 0307 	bic.w	r3, r3, #7
 8012366:	ebad 0d03 	sub.w	sp, sp, r3
 801236a:	ad02      	add	r5, sp, #8
	if(position != file_pos_wide) {
 801236c:	4b94      	ldr	r3, [pc, #592]	; (80125c0 <DrawSpectrum+0x27c>)
 801236e:	681a      	ldr	r2, [r3, #0]
 8012370:	4b94      	ldr	r3, [pc, #592]	; (80125c4 <DrawSpectrum+0x280>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	429a      	cmp	r2, r3
 8012376:	d022      	beq.n	80123be <DrawSpectrum+0x7a>
		position = file_pos_wide;
 8012378:	4a91      	ldr	r2, [pc, #580]	; (80125c0 <DrawSpectrum+0x27c>)
 801237a:	6013      	str	r3, [r2, #0]
		if(stretch > 1) {
 801237c:	4b92      	ldr	r3, [pc, #584]	; (80125c8 <DrawSpectrum+0x284>)
 801237e:	edd3 7a00 	vldr	s15, [r3]
 8012382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012386:	eef4 7ac7 	vcmpe.f32	s15, s14
 801238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801238e:	dc04      	bgt.n	801239a <DrawSpectrum+0x56>
 8012390:	e015      	b.n	80123be <DrawSpectrum+0x7a>
				position++;
 8012392:	4a8b      	ldr	r2, [pc, #556]	; (80125c0 <DrawSpectrum+0x27c>)
 8012394:	6813      	ldr	r3, [r2, #0]
 8012396:	3301      	adds	r3, #1
 8012398:	6013      	str	r3, [r2, #0]
			while((position % (int32_t)(stretch)) != (check % (int32_t)(stretch))) {
 801239a:	4b89      	ldr	r3, [pc, #548]	; (80125c0 <DrawSpectrum+0x27c>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80123a2:	ee17 1a10 	vmov	r1, s14
 80123a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80123aa:	fb01 3212 	mls	r2, r1, r2, r3
 80123ae:	4b87      	ldr	r3, [pc, #540]	; (80125cc <DrawSpectrum+0x288>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	fb93 f0f1 	sdiv	r0, r3, r1
 80123b6:	fb01 3310 	mls	r3, r1, r0, r3
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d1e9      	bne.n	8012392 <DrawSpectrum+0x4e>
		i = 0;
 80123be:	2100      	movs	r1, #0
 80123c0:	e021      	b.n	8012406 <DrawSpectrum+0xc2>
				check = position + (int32_t)((i-240)*stretch);
 80123c2:	f1a2 03ef 	sub.w	r3, r2, #239	; 0xef
 80123c6:	ee07 3a90 	vmov	s15, r3
 80123ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123d6:	4b7a      	ldr	r3, [pc, #488]	; (80125c0 <DrawSpectrum+0x27c>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	ee17 4a90 	vmov	r4, s15
 80123de:	441c      	add	r4, r3
 80123e0:	4623      	mov	r3, r4
 80123e2:	4c7a      	ldr	r4, [pc, #488]	; (80125cc <DrawSpectrum+0x288>)
 80123e4:	6023      	str	r3, [r4, #0]
				i++;
 80123e6:	3201      	adds	r2, #1
			while(check < rekordbox.cue_start_position[k]) {
 80123e8:	4b78      	ldr	r3, [pc, #480]	; (80125cc <DrawSpectrum+0x288>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	4298      	cmp	r0, r3
 80123ee:	dce8      	bgt.n	80123c2 <DrawSpectrum+0x7e>
			if(new_cues[k] != check) new_cues[k] = check;
 80123f0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 80123f4:	4b75      	ldr	r3, [pc, #468]	; (80125cc <DrawSpectrum+0x288>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d003      	beq.n	8012404 <DrawSpectrum+0xc0>
 80123fc:	4b73      	ldr	r3, [pc, #460]	; (80125cc <DrawSpectrum+0x288>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	for(k = 0; k < rekordbox.cues; k++) {
 8012404:	3101      	adds	r1, #1
 8012406:	4b6d      	ldr	r3, [pc, #436]	; (80125bc <DrawSpectrum+0x278>)
 8012408:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 801240c:	4299      	cmp	r1, r3
 801240e:	da1d      	bge.n	801244c <DrawSpectrum+0x108>
		new_cues[k] = 0;
 8012410:	2300      	movs	r3, #0
 8012412:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
		check = position + (int32_t)((i-240)*stretch);
 8012416:	4b6c      	ldr	r3, [pc, #432]	; (80125c8 <DrawSpectrum+0x284>)
 8012418:	ed93 7a00 	vldr	s14, [r3]
 801241c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80125d0 <DrawSpectrum+0x28c>
 8012420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012428:	4b65      	ldr	r3, [pc, #404]	; (80125c0 <DrawSpectrum+0x27c>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	ee17 2a90 	vmov	r2, s15
 8012430:	441a      	add	r2, r3
 8012432:	4c66      	ldr	r4, [pc, #408]	; (80125cc <DrawSpectrum+0x288>)
 8012434:	6022      	str	r2, [r4, #0]
		if(check < rekordbox.cue_start_position[k]) {
 8012436:	f601 2302 	addw	r3, r1, #2562	; 0xa02
 801243a:	4a66      	ldr	r2, [pc, #408]	; (80125d4 <DrawSpectrum+0x290>)
 801243c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012440:	6858      	ldr	r0, [r3, #4]
 8012442:	6823      	ldr	r3, [r4, #0]
 8012444:	4298      	cmp	r0, r3
 8012446:	dddd      	ble.n	8012404 <DrawSpectrum+0xc0>
		i = 0;
 8012448:	2200      	movs	r2, #0
 801244a:	e7cd      	b.n	80123e8 <DrawSpectrum+0xa4>
	for(i = 0; i < 480; i++) {
 801244c:	2200      	movs	r2, #0
 801244e:	e000      	b.n	8012452 <DrawSpectrum+0x10e>
 8012450:	3201      	adds	r2, #1
 8012452:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8012456:	da1c      	bge.n	8012492 <DrawSpectrum+0x14e>
		check = position + (int32_t)((i-240)*stretch);
 8012458:	f1a2 03f0 	sub.w	r3, r2, #240	; 0xf0
 801245c:	ee07 3a90 	vmov	s15, r3
 8012460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012464:	4b58      	ldr	r3, [pc, #352]	; (80125c8 <DrawSpectrum+0x284>)
 8012466:	ed93 7a00 	vldr	s14, [r3]
 801246a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801246e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012472:	4b53      	ldr	r3, [pc, #332]	; (80125c0 <DrawSpectrum+0x27c>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	ee17 1a90 	vmov	r1, s15
 801247a:	4419      	add	r1, r3
 801247c:	460b      	mov	r3, r1
 801247e:	4953      	ldr	r1, [pc, #332]	; (80125cc <DrawSpectrum+0x288>)
 8012480:	600b      	str	r3, [r1, #0]
		if(check > 0) {
 8012482:	680b      	ldr	r3, [r1, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	dde3      	ble.n	8012450 <DrawSpectrum+0x10c>
			spectrum_frame[i] = *(__IO uint8_t*)(WAVE_BUFFER+check);
 8012488:	6809      	ldr	r1, [r1, #0]
 801248a:	4b53      	ldr	r3, [pc, #332]	; (80125d8 <DrawSpectrum+0x294>)
 801248c:	5ccb      	ldrb	r3, [r1, r3]
 801248e:	54bb      	strb	r3, [r7, r2]
 8012490:	e7de      	b.n	8012450 <DrawSpectrum+0x10c>
	for(i = 0; i < 480; i++)
 8012492:	2400      	movs	r4, #0
 8012494:	e017      	b.n	80124c6 <DrawSpectrum+0x182>
			color = spectrum_frame[i] & 0xE0; // read color data - first 3 bits
 8012496:	5d3a      	ldrb	r2, [r7, r4]
 8012498:	f002 00e0 	and.w	r0, r2, #224	; 0xe0
 801249c:	494f      	ldr	r1, [pc, #316]	; (80125dc <DrawSpectrum+0x298>)
 801249e:	6008      	str	r0, [r1, #0]
			color <<= 8;
 80124a0:	0203      	lsls	r3, r0, #8
 80124a2:	600b      	str	r3, [r1, #0]
			color = spectrum_frame[i] & 0xE0;
 80124a4:	6008      	str	r0, [r1, #0]
			color <<= 8;
 80124a6:	600b      	str	r3, [r1, #0]
			color |= 0x000000FF;
 80124a8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80124ac:	600b      	str	r3, [r1, #0]
			height = spectrum_frame[i] & 0x1F; //read height data - last 5 bits
 80124ae:	f002 021f 	and.w	r2, r2, #31
 80124b2:	494b      	ldr	r1, [pc, #300]	; (80125e0 <DrawSpectrum+0x29c>)
 80124b4:	600a      	str	r2, [r1, #0]
			VLine(i, 120-height, height*2, color);
 80124b6:	f1c2 0178 	rsb	r1, r2, #120	; 0x78
 80124ba:	0052      	lsls	r2, r2, #1
 80124bc:	b289      	uxth	r1, r1
 80124be:	b2a0      	uxth	r0, r4
 80124c0:	f7fe fc18 	bl	8010cf4 <VLine>
	for(i = 0; i < 480; i++)
 80124c4:	3401      	adds	r4, #1
 80124c6:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80124ca:	da2e      	bge.n	801252a <DrawSpectrum+0x1e6>
		check = position + (int32_t)((i-240)*stretch);
 80124cc:	f1a4 03f0 	sub.w	r3, r4, #240	; 0xf0
 80124d0:	ee07 3a90 	vmov	s15, r3
 80124d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124d8:	4b3b      	ldr	r3, [pc, #236]	; (80125c8 <DrawSpectrum+0x284>)
 80124da:	ed93 7a00 	vldr	s14, [r3]
 80124de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124e6:	4b36      	ldr	r3, [pc, #216]	; (80125c0 <DrawSpectrum+0x27c>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	ee17 2a90 	vmov	r2, s15
 80124ee:	441a      	add	r2, r3
 80124f0:	4613      	mov	r3, r2
 80124f2:	4a36      	ldr	r2, [pc, #216]	; (80125cc <DrawSpectrum+0x288>)
 80124f4:	6013      	str	r3, [r2, #0]
		if(check > 0) {
 80124f6:	6813      	ldr	r3, [r2, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	dde3      	ble.n	80124c4 <DrawSpectrum+0x180>
			if(display.loop == 1) {
 80124fc:	4b39      	ldr	r3, [pc, #228]	; (80125e4 <DrawSpectrum+0x2a0>)
 80124fe:	7c1b      	ldrb	r3, [r3, #16]
 8012500:	2b01      	cmp	r3, #1
 8012502:	d1c8      	bne.n	8012496 <DrawSpectrum+0x152>
				if((check >= display.loopstart) && (check <= display.loopend)) {
 8012504:	4b37      	ldr	r3, [pc, #220]	; (80125e4 <DrawSpectrum+0x2a0>)
 8012506:	689a      	ldr	r2, [r3, #8]
 8012508:	4b30      	ldr	r3, [pc, #192]	; (80125cc <DrawSpectrum+0x288>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	429a      	cmp	r2, r3
 801250e:	d8c2      	bhi.n	8012496 <DrawSpectrum+0x152>
 8012510:	4b34      	ldr	r3, [pc, #208]	; (80125e4 <DrawSpectrum+0x2a0>)
 8012512:	68da      	ldr	r2, [r3, #12]
 8012514:	4b2d      	ldr	r3, [pc, #180]	; (80125cc <DrawSpectrum+0x288>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	429a      	cmp	r2, r3
 801251a:	d3bc      	bcc.n	8012496 <DrawSpectrum+0x152>
					VLine(i, 75, 90, 0x008F8F8F);
 801251c:	4b32      	ldr	r3, [pc, #200]	; (80125e8 <DrawSpectrum+0x2a4>)
 801251e:	225a      	movs	r2, #90	; 0x5a
 8012520:	214b      	movs	r1, #75	; 0x4b
 8012522:	b2a0      	uxth	r0, r4
 8012524:	f7fe fbe6 	bl	8010cf4 <VLine>
 8012528:	e7b5      	b.n	8012496 <DrawSpectrum+0x152>
	for(i = 0; i < 480; i++)
 801252a:	2600      	movs	r6, #0
 801252c:	e063      	b.n	80125f6 <DrawSpectrum+0x2b2>
						VLine(i, 75, 4, 0x00FF0000);
 801252e:	b2b4      	uxth	r4, r6
 8012530:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012534:	2204      	movs	r2, #4
 8012536:	214b      	movs	r1, #75	; 0x4b
 8012538:	4620      	mov	r0, r4
 801253a:	f7fe fbdb 	bl	8010cf4 <VLine>
						VLine(i, 161, 4, 0x00FF0000);
 801253e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012542:	2204      	movs	r2, #4
 8012544:	21a1      	movs	r1, #161	; 0xa1
 8012546:	4620      	mov	r0, r4
 8012548:	f7fe fbd4 	bl	8010cf4 <VLine>
 801254c:	e09c      	b.n	8012688 <DrawSpectrum+0x344>
				if(check == new_cues[0]) {
 801254e:	682a      	ldr	r2, [r5, #0]
 8012550:	4b1e      	ldr	r3, [pc, #120]	; (80125cc <DrawSpectrum+0x288>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	429a      	cmp	r2, r3
 8012556:	f040 80a1 	bne.w	801269c <DrawSpectrum+0x358>
					if((i > 10) && (i < 472))
 801255a:	f1a6 030b 	sub.w	r3, r6, #11
 801255e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8012562:	f200 809b 	bhi.w	801269c <DrawSpectrum+0x358>
						DrawElement(15, 5, i - 11, 72, 0x00FFFF00, hot_cue_wide);
 8012566:	461a      	mov	r2, r3
 8012568:	4b20      	ldr	r3, [pc, #128]	; (80125ec <DrawSpectrum+0x2a8>)
 801256a:	9301      	str	r3, [sp, #4]
 801256c:	4b20      	ldr	r3, [pc, #128]	; (80125f0 <DrawSpectrum+0x2ac>)
 801256e:	9300      	str	r3, [sp, #0]
 8012570:	2348      	movs	r3, #72	; 0x48
 8012572:	b292      	uxth	r2, r2
 8012574:	2105      	movs	r1, #5
 8012576:	200f      	movs	r0, #15
 8012578:	f7fe fb74 	bl	8010c64 <DrawElement>
 801257c:	e08e      	b.n	801269c <DrawSpectrum+0x358>
			for(int k = 1; k < rekordbox.cues; k++) {
 801257e:	3401      	adds	r4, #1
 8012580:	4b0e      	ldr	r3, [pc, #56]	; (80125bc <DrawSpectrum+0x278>)
 8012582:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8012586:	42a3      	cmp	r3, r4
 8012588:	dd34      	ble.n	80125f4 <DrawSpectrum+0x2b0>
				if(check == new_cues[k]) {
 801258a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801258e:	4b0f      	ldr	r3, [pc, #60]	; (80125cc <DrawSpectrum+0x288>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	429a      	cmp	r2, r3
 8012594:	d1f3      	bne.n	801257e <DrawSpectrum+0x23a>
					if((i > 10) && (i < 472))
 8012596:	f1a6 030b 	sub.w	r3, r6, #11
 801259a:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 801259e:	d8ee      	bhi.n	801257e <DrawSpectrum+0x23a>
						DrawElement(15, 5, i - 11, 72, 0x00FF0000, hot_cue_wide);
 80125a0:	461a      	mov	r2, r3
 80125a2:	4b12      	ldr	r3, [pc, #72]	; (80125ec <DrawSpectrum+0x2a8>)
 80125a4:	9301      	str	r3, [sp, #4]
 80125a6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80125aa:	9300      	str	r3, [sp, #0]
 80125ac:	2348      	movs	r3, #72	; 0x48
 80125ae:	b292      	uxth	r2, r2
 80125b0:	2105      	movs	r1, #5
 80125b2:	200f      	movs	r0, #15
 80125b4:	f7fe fb56 	bl	8010c64 <DrawElement>
 80125b8:	e7e1      	b.n	801257e <DrawSpectrum+0x23a>
 80125ba:	bf00      	nop
 80125bc:	20016618 	.word	0x20016618
 80125c0:	20000608 	.word	0x20000608
 80125c4:	2000e3cc 	.word	0x2000e3cc
 80125c8:	20000028 	.word	0x20000028
 80125cc:	200005e0 	.word	0x200005e0
 80125d0:	c3700000 	.word	0xc3700000
 80125d4:	20014618 	.word	0x20014618
 80125d8:	c00ff000 	.word	0xc00ff000
 80125dc:	200005e4 	.word	0x200005e4
 80125e0:	20000600 	.word	0x20000600
 80125e4:	200005e8 	.word	0x200005e8
 80125e8:	008f8f8f 	.word	0x008f8f8f
 80125ec:	0801df28 	.word	0x0801df28
 80125f0:	00ffff00 	.word	0x00ffff00
	for(i = 0; i < 480; i++)
 80125f4:	3601      	adds	r6, #1
 80125f6:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 80125fa:	da51      	bge.n	80126a0 <DrawSpectrum+0x35c>
		check = position + (int32_t)((i-240)*stretch);
 80125fc:	f1a6 03f0 	sub.w	r3, r6, #240	; 0xf0
 8012600:	ee07 3a90 	vmov	s15, r3
 8012604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012608:	4bc8      	ldr	r3, [pc, #800]	; (801292c <DrawSpectrum+0x5e8>)
 801260a:	ed93 7a00 	vldr	s14, [r3]
 801260e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012616:	4bc6      	ldr	r3, [pc, #792]	; (8012930 <DrawSpectrum+0x5ec>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	ee17 2a90 	vmov	r2, s15
 801261e:	441a      	add	r2, r3
 8012620:	4613      	mov	r3, r2
 8012622:	4ac4      	ldr	r2, [pc, #784]	; (8012934 <DrawSpectrum+0x5f0>)
 8012624:	6013      	str	r3, [r2, #0]
		if(check > 0) {
 8012626:	6813      	ldr	r3, [r2, #0]
 8012628:	2b00      	cmp	r3, #0
 801262a:	dde3      	ble.n	80125f4 <DrawSpectrum+0x2b0>
			if(first_beat <= rekordbox.timezones) {
 801262c:	4bc2      	ldr	r3, [pc, #776]	; (8012938 <DrawSpectrum+0x5f4>)
 801262e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8012632:	4bc2      	ldr	r3, [pc, #776]	; (801293c <DrawSpectrum+0x5f8>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	429a      	cmp	r2, r3
 8012638:	d32a      	bcc.n	8012690 <DrawSpectrum+0x34c>
				if(check >= (int32_t)(rekordbox.timeindex[first_beat]*150/1000)) {
 801263a:	f203 42aa 	addw	r2, r3, #1194	; 0x4aa
 801263e:	49be      	ldr	r1, [pc, #760]	; (8012938 <DrawSpectrum+0x5f4>)
 8012640:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8012644:	2196      	movs	r1, #150	; 0x96
 8012646:	fb01 f202 	mul.w	r2, r1, r2
 801264a:	49bd      	ldr	r1, [pc, #756]	; (8012940 <DrawSpectrum+0x5fc>)
 801264c:	fba1 1202 	umull	r1, r2, r1, r2
 8012650:	49b8      	ldr	r1, [pc, #736]	; (8012934 <DrawSpectrum+0x5f0>)
 8012652:	6809      	ldr	r1, [r1, #0]
 8012654:	ebb1 1f92 	cmp.w	r1, r2, lsr #6
 8012658:	db1a      	blt.n	8012690 <DrawSpectrum+0x34c>
					if(rekordbox.phase[first_beat] == 1) {
 801265a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801265e:	4ab6      	ldr	r2, [pc, #728]	; (8012938 <DrawSpectrum+0x5f4>)
 8012660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012664:	2b01      	cmp	r3, #1
 8012666:	f43f af62 	beq.w	801252e <DrawSpectrum+0x1ea>
						VLine(i, 75, 4, 0x00FFFFFF);
 801266a:	b2b4      	uxth	r4, r6
 801266c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012670:	2204      	movs	r2, #4
 8012672:	214b      	movs	r1, #75	; 0x4b
 8012674:	4620      	mov	r0, r4
 8012676:	f7fe fb3d 	bl	8010cf4 <VLine>
						VLine(i, 161, 4, 0x00FFFFFF);
 801267a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801267e:	2204      	movs	r2, #4
 8012680:	21a1      	movs	r1, #161	; 0xa1
 8012682:	4620      	mov	r0, r4
 8012684:	f7fe fb36 	bl	8010cf4 <VLine>
					first_beat++;
 8012688:	4aac      	ldr	r2, [pc, #688]	; (801293c <DrawSpectrum+0x5f8>)
 801268a:	6813      	ldr	r3, [r2, #0]
 801268c:	3301      	adds	r3, #1
 801268e:	6013      	str	r3, [r2, #0]
			if(rekordbox.state == 1) {
 8012690:	4bac      	ldr	r3, [pc, #688]	; (8012944 <DrawSpectrum+0x600>)
 8012692:	f893 3b98 	ldrb.w	r3, [r3, #2968]	; 0xb98
 8012696:	2b01      	cmp	r3, #1
 8012698:	f43f af59 	beq.w	801254e <DrawSpectrum+0x20a>
	for(i = 0; i < 480; i++)
 801269c:	2401      	movs	r4, #1
 801269e:	e76f      	b.n	8012580 <DrawSpectrum+0x23c>
	VLine(239, 75, 90, 0x00FFFFFF);
 80126a0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80126a4:	225a      	movs	r2, #90	; 0x5a
 80126a6:	214b      	movs	r1, #75	; 0x4b
 80126a8:	20ef      	movs	r0, #239	; 0xef
 80126aa:	f7fe fb23 	bl	8010cf4 <VLine>
	VLine(240, 75, 90, 0x00FFFFFF);
 80126ae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80126b2:	225a      	movs	r2, #90	; 0x5a
 80126b4:	214b      	movs	r1, #75	; 0x4b
 80126b6:	20f0      	movs	r0, #240	; 0xf0
 80126b8:	f7fe fb1c 	bl	8010cf4 <VLine>
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 80126bc:	4ba1      	ldr	r3, [pc, #644]	; (8012944 <DrawSpectrum+0x600>)
 80126be:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 80126c2:	4aa1      	ldr	r2, [pc, #644]	; (8012948 <DrawSpectrum+0x604>)
 80126c4:	6812      	ldr	r2, [r2, #0]
 80126c6:	189b      	adds	r3, r3, r2
 80126c8:	f100 80e9 	bmi.w	801289e <DrawSpectrum+0x55a>
 80126cc:	109b      	asrs	r3, r3, #2
 80126ce:	4a9f      	ldr	r2, [pc, #636]	; (801294c <DrawSpectrum+0x608>)
 80126d0:	6013      	str	r3, [r2, #0]
	if(bar / 100 > 0) {
 80126d2:	2b63      	cmp	r3, #99	; 0x63
 80126d4:	f300 80e5 	bgt.w	80128a2 <DrawSpectrum+0x55e>
	else if(bar / 10 > 0) DrawDigit(bar / 10, 314, 51, 7, 0x000000FF);
 80126d8:	2b09      	cmp	r3, #9
 80126da:	f300 810a 	bgt.w	80128f2 <DrawSpectrum+0x5ae>
	DrawDigit(bar % 10, 323, 51, 7, 0x000000FF);
 80126de:	4b9b      	ldr	r3, [pc, #620]	; (801294c <DrawSpectrum+0x608>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	4a9b      	ldr	r2, [pc, #620]	; (8012950 <DrawSpectrum+0x60c>)
 80126e4:	fb82 1203 	smull	r1, r2, r2, r3
 80126e8:	17d8      	asrs	r0, r3, #31
 80126ea:	ebc0 00a2 	rsb	r0, r0, r2, asr #2
 80126ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80126f2:	0042      	lsls	r2, r0, #1
 80126f4:	1a98      	subs	r0, r3, r2
 80126f6:	24ff      	movs	r4, #255	; 0xff
 80126f8:	9400      	str	r4, [sp, #0]
 80126fa:	2307      	movs	r3, #7
 80126fc:	2233      	movs	r2, #51	; 0x33
 80126fe:	f240 1143 	movw	r1, #323	; 0x143
 8012702:	b2c0      	uxtb	r0, r0
 8012704:	f7fe fbb4 	bl	8010e70 <DrawDigit>
	DrawElement(2, 2, 332, 63, 0x000000FF, small_point);
 8012708:	4b92      	ldr	r3, [pc, #584]	; (8012954 <DrawSpectrum+0x610>)
 801270a:	9301      	str	r3, [sp, #4]
 801270c:	9400      	str	r4, [sp, #0]
 801270e:	233f      	movs	r3, #63	; 0x3f
 8012710:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8012714:	2102      	movs	r1, #2
 8012716:	4608      	mov	r0, r1
 8012718:	f7fe faa4 	bl	8010c64 <DrawElement>
	DrawDigit(rekordbox.phase[beat], 336, 51, 7, 0x000000FF);
 801271c:	4d86      	ldr	r5, [pc, #536]	; (8012938 <DrawSpectrum+0x5f4>)
 801271e:	4e8a      	ldr	r6, [pc, #552]	; (8012948 <DrawSpectrum+0x604>)
 8012720:	6833      	ldr	r3, [r6, #0]
 8012722:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 8012726:	9400      	str	r4, [sp, #0]
 8012728:	2307      	movs	r3, #7
 801272a:	2233      	movs	r2, #51	; 0x33
 801272c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8012730:	f815 0010 	ldrb.w	r0, [r5, r0, lsl #1]
 8012734:	f7fe fb9c 	bl	8010e70 <DrawDigit>
	DrawElement(19, 6, 348, 63, 0x000000FF, bars);
 8012738:	4b87      	ldr	r3, [pc, #540]	; (8012958 <DrawSpectrum+0x614>)
 801273a:	9301      	str	r3, [sp, #4]
 801273c:	9400      	str	r4, [sp, #0]
 801273e:	233f      	movs	r3, #63	; 0x3f
 8012740:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8012744:	2106      	movs	r1, #6
 8012746:	2013      	movs	r0, #19
 8012748:	f7fe fa8c 	bl	8010c64 <DrawElement>
	VLine(171, 54, 9, 0x000000FF);
 801274c:	4623      	mov	r3, r4
 801274e:	2209      	movs	r2, #9
 8012750:	2136      	movs	r1, #54	; 0x36
 8012752:	20ab      	movs	r0, #171	; 0xab
 8012754:	f7fe face 	bl	8010cf4 <VLine>
	HLine(172, 54, 28, 0x000000FF);
 8012758:	4623      	mov	r3, r4
 801275a:	221c      	movs	r2, #28
 801275c:	2136      	movs	r1, #54	; 0x36
 801275e:	20ac      	movs	r0, #172	; 0xac
 8012760:	f7fe fb04 	bl	8010d6c <HLine>
	HLine(172, 62, 28, 0x000000FF);
 8012764:	4623      	mov	r3, r4
 8012766:	221c      	movs	r2, #28
 8012768:	213e      	movs	r1, #62	; 0x3e
 801276a:	20ac      	movs	r0, #172	; 0xac
 801276c:	f7fe fafe 	bl	8010d6c <HLine>
	VLine(200, 54, 9, 0x000000FF);
 8012770:	4623      	mov	r3, r4
 8012772:	2209      	movs	r2, #9
 8012774:	2136      	movs	r1, #54	; 0x36
 8012776:	20c8      	movs	r0, #200	; 0xc8
 8012778:	f7fe fabc 	bl	8010cf4 <VLine>
	VLine(201, 57, 3, 0x000000FF);
 801277c:	4623      	mov	r3, r4
 801277e:	2203      	movs	r2, #3
 8012780:	2139      	movs	r1, #57	; 0x39
 8012782:	20c9      	movs	r0, #201	; 0xc9
 8012784:	f7fe fab6 	bl	8010cf4 <VLine>
	VLine(202, 57, 3, 0x000000FF);
 8012788:	4623      	mov	r3, r4
 801278a:	2203      	movs	r2, #3
 801278c:	2139      	movs	r1, #57	; 0x39
 801278e:	20ca      	movs	r0, #202	; 0xca
 8012790:	f7fe fab0 	bl	8010cf4 <VLine>
	VLine(203, 57, 3, 0x000000FF);
 8012794:	4623      	mov	r3, r4
 8012796:	2203      	movs	r2, #3
 8012798:	2139      	movs	r1, #57	; 0x39
 801279a:	20cb      	movs	r0, #203	; 0xcb
 801279c:	f7fe faaa 	bl	8010cf4 <VLine>
	VLine(204, 54, 9, 0x000000FF);
 80127a0:	4623      	mov	r3, r4
 80127a2:	2209      	movs	r2, #9
 80127a4:	2136      	movs	r1, #54	; 0x36
 80127a6:	20cc      	movs	r0, #204	; 0xcc
 80127a8:	f7fe faa4 	bl	8010cf4 <VLine>
	HLine(205, 54, 28, 0x000000FF);
 80127ac:	4623      	mov	r3, r4
 80127ae:	221c      	movs	r2, #28
 80127b0:	2136      	movs	r1, #54	; 0x36
 80127b2:	20cd      	movs	r0, #205	; 0xcd
 80127b4:	f7fe fada 	bl	8010d6c <HLine>
	HLine(205, 62, 28, 0x000000FF);
 80127b8:	4623      	mov	r3, r4
 80127ba:	221c      	movs	r2, #28
 80127bc:	213e      	movs	r1, #62	; 0x3e
 80127be:	20cd      	movs	r0, #205	; 0xcd
 80127c0:	f7fe fad4 	bl	8010d6c <HLine>
	VLine(233, 54, 9, 0x000000FF);
 80127c4:	4623      	mov	r3, r4
 80127c6:	2209      	movs	r2, #9
 80127c8:	2136      	movs	r1, #54	; 0x36
 80127ca:	20e9      	movs	r0, #233	; 0xe9
 80127cc:	f7fe fa92 	bl	8010cf4 <VLine>
	VLine(234, 57, 3, 0x000000FF);
 80127d0:	4623      	mov	r3, r4
 80127d2:	2203      	movs	r2, #3
 80127d4:	2139      	movs	r1, #57	; 0x39
 80127d6:	20ea      	movs	r0, #234	; 0xea
 80127d8:	f7fe fa8c 	bl	8010cf4 <VLine>
	VLine(235, 57, 3, 0x000000FF);
 80127dc:	4623      	mov	r3, r4
 80127de:	2203      	movs	r2, #3
 80127e0:	2139      	movs	r1, #57	; 0x39
 80127e2:	20eb      	movs	r0, #235	; 0xeb
 80127e4:	f7fe fa86 	bl	8010cf4 <VLine>
	VLine(236, 57, 3, 0x000000FF);
 80127e8:	4623      	mov	r3, r4
 80127ea:	2203      	movs	r2, #3
 80127ec:	2139      	movs	r1, #57	; 0x39
 80127ee:	20ec      	movs	r0, #236	; 0xec
 80127f0:	f7fe fa80 	bl	8010cf4 <VLine>
	VLine(237, 54, 9, 0x000000FF);
 80127f4:	4623      	mov	r3, r4
 80127f6:	2209      	movs	r2, #9
 80127f8:	2136      	movs	r1, #54	; 0x36
 80127fa:	20ed      	movs	r0, #237	; 0xed
 80127fc:	f7fe fa7a 	bl	8010cf4 <VLine>
	HLine(238, 54, 28, 0x000000FF);
 8012800:	4623      	mov	r3, r4
 8012802:	221c      	movs	r2, #28
 8012804:	2136      	movs	r1, #54	; 0x36
 8012806:	20ee      	movs	r0, #238	; 0xee
 8012808:	f7fe fab0 	bl	8010d6c <HLine>
	HLine(238, 62, 28, 0x000000FF);
 801280c:	4623      	mov	r3, r4
 801280e:	221c      	movs	r2, #28
 8012810:	213e      	movs	r1, #62	; 0x3e
 8012812:	20ee      	movs	r0, #238	; 0xee
 8012814:	f7fe faaa 	bl	8010d6c <HLine>
	VLine(266, 54, 9, 0x000000FF);
 8012818:	4623      	mov	r3, r4
 801281a:	2209      	movs	r2, #9
 801281c:	2136      	movs	r1, #54	; 0x36
 801281e:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8012822:	f7fe fa67 	bl	8010cf4 <VLine>
	VLine(267, 57, 3, 0x000000FF);
 8012826:	4623      	mov	r3, r4
 8012828:	2203      	movs	r2, #3
 801282a:	2139      	movs	r1, #57	; 0x39
 801282c:	f240 100b 	movw	r0, #267	; 0x10b
 8012830:	f7fe fa60 	bl	8010cf4 <VLine>
	VLine(268, 57, 3, 0x000000FF);
 8012834:	4623      	mov	r3, r4
 8012836:	2203      	movs	r2, #3
 8012838:	2139      	movs	r1, #57	; 0x39
 801283a:	f44f 7086 	mov.w	r0, #268	; 0x10c
 801283e:	f7fe fa59 	bl	8010cf4 <VLine>
	VLine(269, 57, 3, 0x000000FF);
 8012842:	4623      	mov	r3, r4
 8012844:	2203      	movs	r2, #3
 8012846:	2139      	movs	r1, #57	; 0x39
 8012848:	f240 100d 	movw	r0, #269	; 0x10d
 801284c:	f7fe fa52 	bl	8010cf4 <VLine>
	VLine(270, 54, 9, 0x000000FF);
 8012850:	4623      	mov	r3, r4
 8012852:	2209      	movs	r2, #9
 8012854:	2136      	movs	r1, #54	; 0x36
 8012856:	f44f 7087 	mov.w	r0, #270	; 0x10e
 801285a:	f7fe fa4b 	bl	8010cf4 <VLine>
	HLine(271, 54, 28, 0x000000FF);
 801285e:	4623      	mov	r3, r4
 8012860:	221c      	movs	r2, #28
 8012862:	2136      	movs	r1, #54	; 0x36
 8012864:	f240 100f 	movw	r0, #271	; 0x10f
 8012868:	f7fe fa80 	bl	8010d6c <HLine>
	HLine(271, 62, 28, 0x000000FF);
 801286c:	4623      	mov	r3, r4
 801286e:	221c      	movs	r2, #28
 8012870:	213e      	movs	r1, #62	; 0x3e
 8012872:	f240 100f 	movw	r0, #271	; 0x10f
 8012876:	f7fe fa79 	bl	8010d6c <HLine>
	VLine(299, 54, 9, 0x000000FF);
 801287a:	4623      	mov	r3, r4
 801287c:	2209      	movs	r2, #9
 801287e:	2136      	movs	r1, #54	; 0x36
 8012880:	f240 102b 	movw	r0, #299	; 0x12b
 8012884:	f7fe fa36 	bl	8010cf4 <VLine>
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 8012888:	6833      	ldr	r3, [r6, #0]
 801288a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801288e:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d13d      	bne.n	8012912 <DrawSpectrum+0x5ce>
}
 8012896:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 801289a:	46bd      	mov	sp, r7
 801289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bar = (beat + rekordbox.beat_grid_offset) / 4;
 801289e:	3303      	adds	r3, #3
 80128a0:	e714      	b.n	80126cc <DrawSpectrum+0x388>
		DrawDigit(bar / 100, 305, 51, 7, 0x000000FF);
 80128a2:	4c2e      	ldr	r4, [pc, #184]	; (801295c <DrawSpectrum+0x618>)
 80128a4:	fb84 2003 	smull	r2, r0, r4, r3
 80128a8:	17db      	asrs	r3, r3, #31
 80128aa:	ebc3 1060 	rsb	r0, r3, r0, asr #5
 80128ae:	25ff      	movs	r5, #255	; 0xff
 80128b0:	9500      	str	r5, [sp, #0]
 80128b2:	2307      	movs	r3, #7
 80128b4:	2233      	movs	r2, #51	; 0x33
 80128b6:	f240 1131 	movw	r1, #305	; 0x131
 80128ba:	b2c0      	uxtb	r0, r0
 80128bc:	f7fe fad8 	bl	8010e70 <DrawDigit>
		DrawDigit(bar % 100 / 10 , 314, 51, 7, 0x000000FF);
 80128c0:	4b22      	ldr	r3, [pc, #136]	; (801294c <DrawSpectrum+0x608>)
 80128c2:	681a      	ldr	r2, [r3, #0]
 80128c4:	fb84 3402 	smull	r3, r4, r4, r2
 80128c8:	17d3      	asrs	r3, r2, #31
 80128ca:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 80128ce:	2164      	movs	r1, #100	; 0x64
 80128d0:	fb01 2313 	mls	r3, r1, r3, r2
 80128d4:	481e      	ldr	r0, [pc, #120]	; (8012950 <DrawSpectrum+0x60c>)
 80128d6:	fb80 2003 	smull	r2, r0, r0, r3
 80128da:	17db      	asrs	r3, r3, #31
 80128dc:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 80128e0:	9500      	str	r5, [sp, #0]
 80128e2:	2307      	movs	r3, #7
 80128e4:	2233      	movs	r2, #51	; 0x33
 80128e6:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80128ea:	b2c0      	uxtb	r0, r0
 80128ec:	f7fe fac0 	bl	8010e70 <DrawDigit>
 80128f0:	e6f5      	b.n	80126de <DrawSpectrum+0x39a>
	else if(bar / 10 > 0) DrawDigit(bar / 10, 314, 51, 7, 0x000000FF);
 80128f2:	4817      	ldr	r0, [pc, #92]	; (8012950 <DrawSpectrum+0x60c>)
 80128f4:	fb80 2003 	smull	r2, r0, r0, r3
 80128f8:	17db      	asrs	r3, r3, #31
 80128fa:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
 80128fe:	23ff      	movs	r3, #255	; 0xff
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	2307      	movs	r3, #7
 8012904:	2233      	movs	r2, #51	; 0x33
 8012906:	f44f 719d 	mov.w	r1, #314	; 0x13a
 801290a:	b2c0      	uxtb	r0, r0
 801290c:	f7fe fab0 	bl	8010e70 <DrawDigit>
 8012910:	e6e5      	b.n	80126de <DrawSpectrum+0x39a>
	if(rekordbox.phase[beat] > 0) Rectangle(172 + (rekordbox.phase[beat] - 1) * 33, 55, 28, 7, 0x000000FF);
 8012912:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8012916:	f103 008b 	add.w	r0, r3, #139	; 0x8b
 801291a:	9400      	str	r4, [sp, #0]
 801291c:	2307      	movs	r3, #7
 801291e:	221c      	movs	r2, #28
 8012920:	2137      	movs	r1, #55	; 0x37
 8012922:	b280      	uxth	r0, r0
 8012924:	f7fe fa62 	bl	8010dec <Rectangle>
}
 8012928:	e7b5      	b.n	8012896 <DrawSpectrum+0x552>
 801292a:	bf00      	nop
 801292c:	20000028 	.word	0x20000028
 8012930:	20000608 	.word	0x20000608
 8012934:	200005e0 	.word	0x200005e0
 8012938:	20014618 	.word	0x20014618
 801293c:	200005fc 	.word	0x200005fc
 8012940:	10624dd3 	.word	0x10624dd3
 8012944:	20016618 	.word	0x20016618
 8012948:	200005dc 	.word	0x200005dc
 801294c:	200005d8 	.word	0x200005d8
 8012950:	66666667 	.word	0x66666667
 8012954:	0801e82c 	.word	0x0801e82c
 8012958:	0801d5e8 	.word	0x0801d5e8
 801295c:	51eb851f 	.word	0x51eb851f

08012960 <DrawString>:

void DrawString(char* str, uint16_t Xpos, uint16_t Ypos, uint32_t color, uint32_t fontcolor)
{
 8012960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012964:	b087      	sub	sp, #28
 8012966:	9005      	str	r0, [sp, #20]
 8012968:	460f      	mov	r7, r1
 801296a:	4614      	mov	r4, r2
 801296c:	9303      	str	r3, [sp, #12]
 801296e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	hdma2d.Init.Mode = DMA2D_R2M;
 8012972:	4883      	ldr	r0, [pc, #524]	; (8012b80 <DrawString+0x220>)
 8012974:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8012978:	6043      	str	r3, [r0, #4]
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 801297a:	2302      	movs	r3, #2
 801297c:	6083      	str	r3, [r0, #8]
	hdma2d.Init.OutputOffset = Xpos;
 801297e:	60c1      	str	r1, [r0, #12]
	hdma2d.Instance = DMA2D;
 8012980:	4b80      	ldr	r3, [pc, #512]	; (8012b84 <DrawString+0x224>)
 8012982:	6003      	str	r3, [r0, #0]
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8012984:	f7ef f8f8 	bl	8001b78 <HAL_DMA2D_Init>
 8012988:	b130      	cbz	r0, 8012998 <DrawString+0x38>
			{
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
			}
		}
	}
	int xpos = Xpos + 5;
 801298a:	3705      	adds	r7, #5
	Ypos -= 4;
 801298c:	3c04      	subs	r4, #4
 801298e:	fa1f f884 	uxth.w	r8, r4
	uint16_t k = 0;
	int i = 0;
	int l = 0;
 8012992:	2300      	movs	r3, #0
 8012994:	9304      	str	r3, [sp, #16]
	while(str[l] != 0) {
 8012996:	e0dd      	b.n	8012b54 <DrawString+0x1f4>
		if(HAL_DMA2D_ConfigLayer(&hdma2d, ActiveLayer) == HAL_OK)
 8012998:	4b7b      	ldr	r3, [pc, #492]	; (8012b88 <DrawString+0x228>)
 801299a:	7819      	ldrb	r1, [r3, #0]
 801299c:	4878      	ldr	r0, [pc, #480]	; (8012b80 <DrawString+0x220>)
 801299e:	f7ef fa21 	bl	8001de4 <HAL_DMA2D_ConfigLayer>
 80129a2:	2800      	cmp	r0, #0
 80129a4:	d1f1      	bne.n	801298a <DrawString+0x2a>
			if (HAL_DMA2D_Start(&hdma2d, fontcolor, hltdc.LayerCfg[ActiveLayer].FBStartAdress + 2*(480*(Ypos-20)+Xpos),
 80129a6:	4b78      	ldr	r3, [pc, #480]	; (8012b88 <DrawString+0x228>)
 80129a8:	781a      	ldrb	r2, [r3, #0]
 80129aa:	4b78      	ldr	r3, [pc, #480]	; (8012b8c <DrawString+0x22c>)
 80129ac:	2134      	movs	r1, #52	; 0x34
 80129ae:	fb01 3302 	mla	r3, r1, r2, r3
 80129b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80129b4:	f1a4 0314 	sub.w	r3, r4, #20
 80129b8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80129bc:	eb07 1243 	add.w	r2, r7, r3, lsl #5
 80129c0:	2314      	movs	r3, #20
 80129c2:	9300      	str	r3, [sp, #0]
 80129c4:	f5c7 73f0 	rsb	r3, r7, #480	; 0x1e0
 80129c8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80129cc:	4649      	mov	r1, r9
 80129ce:	486c      	ldr	r0, [pc, #432]	; (8012b80 <DrawString+0x220>)
 80129d0:	f7ef f930 	bl	8001c34 <HAL_DMA2D_Start>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d1d8      	bne.n	801298a <DrawString+0x2a>
				HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 80129d8:	210a      	movs	r1, #10
 80129da:	4869      	ldr	r0, [pc, #420]	; (8012b80 <DrawString+0x220>)
 80129dc:	f7ef f962 	bl	8001ca4 <HAL_DMA2D_PollForTransfer>
 80129e0:	e7d3      	b.n	801298a <DrawString+0x2a>
		if((str[l] > 32) && (str[l] < 128)) {
			i = 0;
 80129e2:	f04f 0a00 	mov.w	sl, #0
 80129e6:	e040      	b.n	8012a6a <DrawString+0x10a>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
						}
						else {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 80129e8:	4b67      	ldr	r3, [pc, #412]	; (8012b88 <DrawString+0x228>)
 80129ea:	781a      	ldrb	r2, [r3, #0]
 80129ec:	4b67      	ldr	r3, [pc, #412]	; (8012b8c <DrawString+0x22c>)
 80129ee:	2134      	movs	r1, #52	; 0x34
 80129f0:	fb01 3302 	mla	r3, r1, r2, r3
 80129f4:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 80129f8:	eba8 0504 	sub.w	r5, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 80129fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80129fe:	fb03 7505 	mla	r5, r3, r5, r7
 8012a02:	4455      	add	r5, sl
 8012a04:	4648      	mov	r0, r9
 8012a06:	f7fe f83b 	bl	8010a80 <Color_Convertion>
 8012a0a:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
						}
						k++;
 8012a0e:	3401      	adds	r4, #1
 8012a10:	b2a4      	uxth	r4, r4
					while(k < 13) {
 8012a12:	2c0c      	cmp	r4, #12
 8012a14:	d82c      	bhi.n	8012a70 <DrawString+0x110>
						if(((font[(str[l]-33)*12+i] >> k) & 1) == 1) {
 8012a16:	7833      	ldrb	r3, [r6, #0]
 8012a18:	3b21      	subs	r3, #33	; 0x21
 8012a1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a1e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8012a22:	4a5b      	ldr	r2, [pc, #364]	; (8012b90 <DrawString+0x230>)
 8012a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a28:	4123      	asrs	r3, r4
 8012a2a:	f013 0f01 	tst.w	r3, #1
 8012a2e:	d0db      	beq.n	80129e8 <DrawString+0x88>
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8012a30:	4b55      	ldr	r3, [pc, #340]	; (8012b88 <DrawString+0x228>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	4a55      	ldr	r2, [pc, #340]	; (8012b8c <DrawString+0x22c>)
 8012a36:	2134      	movs	r1, #52	; 0x34
 8012a38:	fb01 2203 	mla	r2, r1, r3, r2
 8012a3c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8012a3e:	eba8 0304 	sub.w	r3, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8012a42:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8012a44:	fb02 7303 	mla	r3, r2, r3, r7
 8012a48:	4453      	add	r3, sl
 8012a4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012a4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8012a52:	e7dc      	b.n	8012a0e <DrawString+0xae>
				k = 0;
 8012a54:	2400      	movs	r4, #0
 8012a56:	e7dc      	b.n	8012a12 <DrawString+0xb2>
					}
				}
				if(font[(str[l]-33)*12+i] == 0) {
					if(font[(str[l]-33)*12+i+1] == 0) {
						i++;
 8012a58:	f10a 0a01 	add.w	sl, sl, #1
				else {
					i++;
				}
			}
			while(i < 12);
			xpos += i;
 8012a5c:	4457      	add	r7, sl
 8012a5e:	e083      	b.n	8012b68 <DrawString+0x208>
					i++;
 8012a60:	f10a 0a01 	add.w	sl, sl, #1
			while(i < 12);
 8012a64:	f1ba 0f0b 	cmp.w	sl, #11
 8012a68:	dcf8      	bgt.n	8012a5c <DrawString+0xfc>
				if(xpos < 470) {
 8012a6a:	f5b7 7feb 	cmp.w	r7, #470	; 0x1d6
 8012a6e:	dbf1      	blt.n	8012a54 <DrawString+0xf4>
				if(font[(str[l]-33)*12+i] == 0) {
 8012a70:	7833      	ldrb	r3, [r6, #0]
 8012a72:	3b21      	subs	r3, #33	; 0x21
 8012a74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a78:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8012a7c:	4a44      	ldr	r2, [pc, #272]	; (8012b90 <DrawString+0x230>)
 8012a7e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8012a82:	2a00      	cmp	r2, #0
 8012a84:	d1ec      	bne.n	8012a60 <DrawString+0x100>
					if(font[(str[l]-33)*12+i+1] == 0) {
 8012a86:	3301      	adds	r3, #1
 8012a88:	4a41      	ldr	r2, [pc, #260]	; (8012b90 <DrawString+0x230>)
 8012a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d0e2      	beq.n	8012a58 <DrawString+0xf8>
					i++;
 8012a92:	f10a 0a01 	add.w	sl, sl, #1
 8012a96:	e7e5      	b.n	8012a64 <DrawString+0x104>
		}
		if(str[l] > 191) {
			i = 0;
 8012a98:	f04f 0a00 	mov.w	sl, #0
 8012a9c:	e040      	b.n	8012b20 <DrawString+0x1c0>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
						}
						else {
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8012a9e:	4b3a      	ldr	r3, [pc, #232]	; (8012b88 <DrawString+0x228>)
 8012aa0:	781a      	ldrb	r2, [r3, #0]
 8012aa2:	4b3a      	ldr	r3, [pc, #232]	; (8012b8c <DrawString+0x22c>)
 8012aa4:	2134      	movs	r1, #52	; 0x34
 8012aa6:	fb01 3302 	mla	r3, r1, r2, r3
 8012aaa:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
 8012aae:	eba8 0504 	sub.w	r5, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = Color_Convertion(fontcolor);
 8012ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012ab4:	fb03 7505 	mla	r5, r3, r5, r7
 8012ab8:	4455      	add	r5, sl
 8012aba:	4648      	mov	r0, r9
 8012abc:	f7fd ffe0 	bl	8010a80 <Color_Convertion>
 8012ac0:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
						}
						k++;
 8012ac4:	3401      	adds	r4, #1
 8012ac6:	b2a4      	uxth	r4, r4
					while(k < 13) {
 8012ac8:	2c0c      	cmp	r4, #12
 8012aca:	d82c      	bhi.n	8012b26 <DrawString+0x1c6>
						if(((ru_font[(str[l]-192)*12+i] >> k) & 1) == 1) {
 8012acc:	7833      	ldrb	r3, [r6, #0]
 8012ace:	3bc0      	subs	r3, #192	; 0xc0
 8012ad0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012ad4:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8012ad8:	4a2e      	ldr	r2, [pc, #184]	; (8012b94 <DrawString+0x234>)
 8012ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ade:	4123      	asrs	r3, r4
 8012ae0:	f013 0f01 	tst.w	r3, #1
 8012ae4:	d0db      	beq.n	8012a9e <DrawString+0x13e>
							*(__IO uint16_t*)(hltdc.LayerCfg[ActiveLayer].FBStartAdress + (2 * ((Ypos - k)
 8012ae6:	4b28      	ldr	r3, [pc, #160]	; (8012b88 <DrawString+0x228>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	4a28      	ldr	r2, [pc, #160]	; (8012b8c <DrawString+0x22c>)
 8012aec:	2134      	movs	r1, #52	; 0x34
 8012aee:	fb01 2203 	mla	r2, r1, r3, r2
 8012af2:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8012af4:	eba8 0304 	sub.w	r3, r8, r4
									* hltdc.LayerCfg[ActiveLayer].ImageWidth + xpos + i))) = color;
 8012af8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8012afa:	fb02 7303 	mla	r3, r2, r3, r7
 8012afe:	4453      	add	r3, sl
 8012b00:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012b04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8012b08:	e7dc      	b.n	8012ac4 <DrawString+0x164>
				k = 0;
 8012b0a:	2400      	movs	r4, #0
 8012b0c:	e7dc      	b.n	8012ac8 <DrawString+0x168>
					}
				}
				if(ru_font[(str[l]-192)*12+i] == 0) {
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
						i++;
 8012b0e:	f10a 0a01 	add.w	sl, sl, #1
				else {
					i++;
				}
			}
			while(i < 12);
			xpos += i;
 8012b12:	4457      	add	r7, sl
 8012b14:	e02b      	b.n	8012b6e <DrawString+0x20e>
					i++;
 8012b16:	f10a 0a01 	add.w	sl, sl, #1
			while(i < 12);
 8012b1a:	f1ba 0f0b 	cmp.w	sl, #11
 8012b1e:	dcf8      	bgt.n	8012b12 <DrawString+0x1b2>
				if(xpos < 470) {
 8012b20:	f5b7 7feb 	cmp.w	r7, #470	; 0x1d6
 8012b24:	dbf1      	blt.n	8012b0a <DrawString+0x1aa>
				if(ru_font[(str[l]-192)*12+i] == 0) {
 8012b26:	7833      	ldrb	r3, [r6, #0]
 8012b28:	3bc0      	subs	r3, #192	; 0xc0
 8012b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012b2e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8012b32:	4a18      	ldr	r2, [pc, #96]	; (8012b94 <DrawString+0x234>)
 8012b34:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8012b38:	2a00      	cmp	r2, #0
 8012b3a:	d1ec      	bne.n	8012b16 <DrawString+0x1b6>
					if(ru_font[(str[l]-192)*12+i+1] == 0) {
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	4a15      	ldr	r2, [pc, #84]	; (8012b94 <DrawString+0x234>)
 8012b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d0e2      	beq.n	8012b0e <DrawString+0x1ae>
					i++;
 8012b48:	f10a 0a01 	add.w	sl, sl, #1
 8012b4c:	e7e5      	b.n	8012b1a <DrawString+0x1ba>
		}
		if(str[l] == 32) {
			xpos += 5;
		}
		l++;
 8012b4e:	9b04      	ldr	r3, [sp, #16]
 8012b50:	3301      	adds	r3, #1
 8012b52:	9304      	str	r3, [sp, #16]
	while(str[l] != 0) {
 8012b54:	9b05      	ldr	r3, [sp, #20]
 8012b56:	9a04      	ldr	r2, [sp, #16]
 8012b58:	189e      	adds	r6, r3, r2
 8012b5a:	5c9b      	ldrb	r3, [r3, r2]
 8012b5c:	b163      	cbz	r3, 8012b78 <DrawString+0x218>
		if((str[l] > 32) && (str[l] < 128)) {
 8012b5e:	3b21      	subs	r3, #33	; 0x21
 8012b60:	b2db      	uxtb	r3, r3
 8012b62:	2b5e      	cmp	r3, #94	; 0x5e
 8012b64:	f67f af3d 	bls.w	80129e2 <DrawString+0x82>
		if(str[l] > 191) {
 8012b68:	7833      	ldrb	r3, [r6, #0]
 8012b6a:	2bbf      	cmp	r3, #191	; 0xbf
 8012b6c:	d894      	bhi.n	8012a98 <DrawString+0x138>
		if(str[l] == 32) {
 8012b6e:	7833      	ldrb	r3, [r6, #0]
 8012b70:	2b20      	cmp	r3, #32
 8012b72:	d1ec      	bne.n	8012b4e <DrawString+0x1ee>
			xpos += 5;
 8012b74:	3705      	adds	r7, #5
 8012b76:	e7ea      	b.n	8012b4e <DrawString+0x1ee>
	}
}
 8012b78:	b007      	add	sp, #28
 8012b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b7e:	bf00      	nop
 8012b80:	2000060c 	.word	0x2000060c
 8012b84:	4002b000 	.word	0x4002b000
 8012b88:	2000079c 	.word	0x2000079c
 8012b8c:	200006f4 	.word	0x200006f4
 8012b90:	0801d680 	.word	0x0801d680
 8012b94:	0801e21c 	.word	0x0801e21c

08012b98 <DrawMenu>:
{
 8012b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b9a:	ed2d 8b02 	vpush	{d8}
 8012b9e:	b0c3      	sub	sp, #268	; 0x10c
	if(menu_mode == 0) {
 8012ba0:	4bb9      	ldr	r3, [pc, #740]	; (8012e88 <DrawMenu+0x2f0>)
 8012ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8012ba6:	b18b      	cbz	r3, 8012bcc <DrawMenu+0x34>
	else if(menu_mode == 1) {
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d026      	beq.n	8012bfa <DrawMenu+0x62>
	else if(menu_mode == 2) {
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	f000 8187 	beq.w	8012ec0 <DrawMenu+0x328>
	else if(menu_mode == 3) {
 8012bb2:	2b03      	cmp	r3, #3
 8012bb4:	d11d      	bne.n	8012bf2 <DrawMenu+0x5a>
		DrawString("ERROR! INSERT SD CARD AND RESTART!", 0, 20, 0x00FFFFFF, 0x00FF0000);
 8012bb6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8012bba:	9300      	str	r3, [sp, #0]
 8012bbc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012bc0:	2214      	movs	r2, #20
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	48b1      	ldr	r0, [pc, #708]	; (8012e8c <DrawMenu+0x2f4>)
 8012bc6:	f7ff fecb 	bl	8012960 <DrawString>
}
 8012bca:	e012      	b.n	8012bf2 <DrawMenu+0x5a>
		char string[255] = " { ";
 8012bcc:	4bb0      	ldr	r3, [pc, #704]	; (8012e90 <DrawMenu+0x2f8>)
 8012bce:	9302      	str	r3, [sp, #8]
 8012bd0:	22fb      	movs	r2, #251	; 0xfb
 8012bd2:	2100      	movs	r1, #0
 8012bd4:	a803      	add	r0, sp, #12
 8012bd6:	f006 f9fd 	bl	8018fd4 <memset>
		DrawString(strcat(string, rekordbox.file), 0, 20, 0x00FFFFFF, 0x000000FF);
 8012bda:	49ae      	ldr	r1, [pc, #696]	; (8012e94 <DrawMenu+0x2fc>)
 8012bdc:	a802      	add	r0, sp, #8
 8012bde:	f006 fb11 	bl	8019204 <strcat>
 8012be2:	23ff      	movs	r3, #255	; 0xff
 8012be4:	9300      	str	r3, [sp, #0]
 8012be6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012bea:	2214      	movs	r2, #20
 8012bec:	2100      	movs	r1, #0
 8012bee:	f7ff feb7 	bl	8012960 <DrawString>
}
 8012bf2:	b043      	add	sp, #268	; 0x10c
 8012bf4:	ecbd 8b02 	vpop	{d8}
 8012bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(Total_tracks > 7) {
 8012bfa:	4ba7      	ldr	r3, [pc, #668]	; (8012e98 <DrawMenu+0x300>)
 8012bfc:	881b      	ldrh	r3, [r3, #0]
 8012bfe:	2b07      	cmp	r3, #7
 8012c00:	d957      	bls.n	8012cb2 <DrawMenu+0x11a>
			uint16_t scroll_lenght = (140/(float)Total_tracks)*7;
 8012c02:	ee07 3a90 	vmov	s15, r3
 8012c06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012c0a:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8012e9c <DrawMenu+0x304>
 8012c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012c12:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8012c16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012c1a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012c1e:	ee17 3a10 	vmov	r3, s14
 8012c22:	b29d      	uxth	r5, r3
			uint16_t step_scroll = (140/(float)Total_tracks)*(float)str_increment;
 8012c24:	4b9e      	ldr	r3, [pc, #632]	; (8012ea0 <DrawMenu+0x308>)
 8012c26:	ed93 7a00 	vldr	s14, [r3]
 8012c2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c36:	ee17 3a90 	vmov	r3, s15
 8012c3a:	b29c      	uxth	r4, r3
			if(scroll_lenght < 5) scroll_lenght = 5;
 8012c3c:	2d04      	cmp	r5, #4
 8012c3e:	d800      	bhi.n	8012c42 <DrawMenu+0xaa>
 8012c40:	2505      	movs	r5, #5
			VLine(1, 21, 140, 0x00FFFFFF);
 8012c42:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012c46:	228c      	movs	r2, #140	; 0x8c
 8012c48:	2115      	movs	r1, #21
 8012c4a:	2001      	movs	r0, #1
 8012c4c:	f7fe f852 	bl	8010cf4 <VLine>
			VLine(3, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 8012c50:	f104 0616 	add.w	r6, r4, #22
 8012c54:	b2b6      	uxth	r6, r6
 8012c56:	1eaf      	subs	r7, r5, #2
 8012c58:	b2bf      	uxth	r7, r7
 8012c5a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012c5e:	463a      	mov	r2, r7
 8012c60:	4631      	mov	r1, r6
 8012c62:	2003      	movs	r0, #3
 8012c64:	f7fe f846 	bl	8010cf4 <VLine>
			VLine(4, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 8012c68:	3415      	adds	r4, #21
 8012c6a:	b2a4      	uxth	r4, r4
 8012c6c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012c70:	462a      	mov	r2, r5
 8012c72:	4621      	mov	r1, r4
 8012c74:	2004      	movs	r0, #4
 8012c76:	f7fe f83d 	bl	8010cf4 <VLine>
			VLine(5, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 8012c7a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012c7e:	462a      	mov	r2, r5
 8012c80:	4621      	mov	r1, r4
 8012c82:	2005      	movs	r0, #5
 8012c84:	f7fe f836 	bl	8010cf4 <VLine>
			VLine(6, 21+step_scroll, scroll_lenght, 0x00FFFFFF);
 8012c88:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012c8c:	462a      	mov	r2, r5
 8012c8e:	4621      	mov	r1, r4
 8012c90:	2006      	movs	r0, #6
 8012c92:	f7fe f82f 	bl	8010cf4 <VLine>
			VLine(7, 22+step_scroll, scroll_lenght-2, 0x00FFFFFF);
 8012c96:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012c9a:	463a      	mov	r2, r7
 8012c9c:	4631      	mov	r1, r6
 8012c9e:	2007      	movs	r0, #7
 8012ca0:	f7fe f828 	bl	8010cf4 <VLine>
			VLine(9, 21, 140, 0x00FFFFFF);
 8012ca4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012ca8:	228c      	movs	r2, #140	; 0x8c
 8012caa:	2115      	movs	r1, #21
 8012cac:	2009      	movs	r0, #9
 8012cae:	f7fe f821 	bl	8010cf4 <VLine>
		DrawString(" [FILES]", 0, 20, 0x00FFFFFF, 0x000000FF);
 8012cb2:	23ff      	movs	r3, #255	; 0xff
 8012cb4:	9300      	str	r3, [sp, #0]
 8012cb6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012cba:	2214      	movs	r2, #20
 8012cbc:	2100      	movs	r1, #0
 8012cbe:	4879      	ldr	r0, [pc, #484]	; (8012ea4 <DrawMenu+0x30c>)
 8012cc0:	f7ff fe4e 	bl	8012960 <DrawString>
		int i = 0;
 8012cc4:	2600      	movs	r6, #0
	uint32_t backcolor = 0;
 8012cc6:	4635      	mov	r5, r6
		while(21+20*(i+1) < 165) {
 8012cc8:	e025      	b.n	8012d16 <DrawMenu+0x17e>
				if(i == Mark_number) {
 8012cca:	4b77      	ldr	r3, [pc, #476]	; (8012ea8 <DrawMenu+0x310>)
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	42b3      	cmp	r3, r6
 8012cd0:	d05c      	beq.n	8012d8c <DrawMenu+0x1f4>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, 0x000000FF);
 8012cd2:	4431      	add	r1, r6
 8012cd4:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8012cd8:	4b74      	ldr	r3, [pc, #464]	; (8012eac <DrawMenu+0x314>)
 8012cda:	4419      	add	r1, r3
 8012cdc:	a802      	add	r0, sp, #8
 8012cde:	f006 fa91 	bl	8019204 <strcat>
 8012ce2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012ce6:	009a      	lsls	r2, r3, #2
 8012ce8:	3215      	adds	r2, #21
 8012cea:	23ff      	movs	r3, #255	; 0xff
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012cf2:	b292      	uxth	r2, r2
 8012cf4:	210b      	movs	r1, #11
 8012cf6:	f7ff fe33 	bl	8012960 <DrawString>
				backcolor += 0x00202020;
 8012cfa:	f105 1520 	add.w	r5, r5, #2097184	; 0x200020
 8012cfe:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
				if(backcolor > 0x00404040) backcolor = 0;
 8012d02:	4b6b      	ldr	r3, [pc, #428]	; (8012eb0 <DrawMenu+0x318>)
 8012d04:	429d      	cmp	r5, r3
 8012d06:	f200 80bc 	bhi.w	8012e82 <DrawMenu+0x2ea>
			if(i >= Total_tracks) break;
 8012d0a:	4b63      	ldr	r3, [pc, #396]	; (8012e98 <DrawMenu+0x300>)
 8012d0c:	881b      	ldrh	r3, [r3, #0]
 8012d0e:	42a3      	cmp	r3, r4
 8012d10:	f77f af6f 	ble.w	8012bf2 <DrawMenu+0x5a>
			i++;
 8012d14:	4626      	mov	r6, r4
		while(21+20*(i+1) < 165) {
 8012d16:	1c74      	adds	r4, r6, #1
 8012d18:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8012d1c:	0093      	lsls	r3, r2, #2
 8012d1e:	2b8f      	cmp	r3, #143	; 0x8f
 8012d20:	f73f af67 	bgt.w	8012bf2 <DrawMenu+0x5a>
			char string[255] = "{ ";
 8012d24:	f242 037b 	movw	r3, #8315	; 0x207b
 8012d28:	9302      	str	r3, [sp, #8]
 8012d2a:	22fb      	movs	r2, #251	; 0xfb
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	a803      	add	r0, sp, #12
 8012d30:	f006 f950 	bl	8018fd4 <memset>
			if(i == Track_number - str_increment) {
 8012d34:	4b5a      	ldr	r3, [pc, #360]	; (8012ea0 <DrawMenu+0x308>)
 8012d36:	6819      	ldr	r1, [r3, #0]
 8012d38:	4b5e      	ldr	r3, [pc, #376]	; (8012eb4 <DrawMenu+0x31c>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	1a5b      	subs	r3, r3, r1
 8012d3e:	42b3      	cmp	r3, r6
 8012d40:	d0c3      	beq.n	8012cca <DrawMenu+0x132>
			else if(i == String_number) {
 8012d42:	4b5d      	ldr	r3, [pc, #372]	; (8012eb8 <DrawMenu+0x320>)
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	42b3      	cmp	r3, r6
 8012d48:	d035      	beq.n	8012db6 <DrawMenu+0x21e>
				if(i == Mark_number) {
 8012d4a:	4b57      	ldr	r3, [pc, #348]	; (8012ea8 <DrawMenu+0x310>)
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	42b3      	cmp	r3, r6
 8012d50:	f000 8082 	beq.w	8012e58 <DrawMenu+0x2c0>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, backcolor);
 8012d54:	4431      	add	r1, r6
 8012d56:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8012d5a:	4b54      	ldr	r3, [pc, #336]	; (8012eac <DrawMenu+0x314>)
 8012d5c:	4419      	add	r1, r3
 8012d5e:	a802      	add	r0, sp, #8
 8012d60:	f006 fa50 	bl	8019204 <strcat>
 8012d64:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012d68:	009a      	lsls	r2, r3, #2
 8012d6a:	3215      	adds	r2, #21
 8012d6c:	9500      	str	r5, [sp, #0]
 8012d6e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012d72:	b292      	uxth	r2, r2
 8012d74:	210b      	movs	r1, #11
 8012d76:	f7ff fdf3 	bl	8012960 <DrawString>
				backcolor += 0x00202020;
 8012d7a:	f105 1520 	add.w	r5, r5, #2097184	; 0x200020
 8012d7e:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
				if(backcolor > 0x00404040) backcolor = 0;
 8012d82:	4b4b      	ldr	r3, [pc, #300]	; (8012eb0 <DrawMenu+0x318>)
 8012d84:	429d      	cmp	r5, r3
 8012d86:	d9c0      	bls.n	8012d0a <DrawMenu+0x172>
 8012d88:	2500      	movs	r5, #0
 8012d8a:	e7be      	b.n	8012d0a <DrawMenu+0x172>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 8012d8c:	4431      	add	r1, r6
 8012d8e:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8012d92:	4b46      	ldr	r3, [pc, #280]	; (8012eac <DrawMenu+0x314>)
 8012d94:	4419      	add	r1, r3
 8012d96:	a802      	add	r0, sp, #8
 8012d98:	f006 fa34 	bl	8019204 <strcat>
 8012d9c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012da0:	009a      	lsls	r2, r3, #2
 8012da2:	3215      	adds	r2, #21
 8012da4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012da8:	9300      	str	r3, [sp, #0]
 8012daa:	2300      	movs	r3, #0
 8012dac:	b292      	uxth	r2, r2
 8012dae:	210b      	movs	r1, #11
 8012db0:	f7ff fdd6 	bl	8012960 <DrawString>
 8012db4:	e7a1      	b.n	8012cfa <DrawMenu+0x162>
				if(str_offset > 10) {
 8012db6:	4b41      	ldr	r3, [pc, #260]	; (8012ebc <DrawMenu+0x324>)
 8012db8:	681f      	ldr	r7, [r3, #0]
 8012dba:	2f0a      	cmp	r7, #10
 8012dbc:	dc1f      	bgt.n	8012dfe <DrawMenu+0x266>
					if(i == Mark_number) {
 8012dbe:	4b3a      	ldr	r3, [pc, #232]	; (8012ea8 <DrawMenu+0x310>)
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	42b3      	cmp	r3, r6
 8012dc4:	d033      	beq.n	8012e2e <DrawMenu+0x296>
						DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00FFFFFF, backcolor);
 8012dc6:	4431      	add	r1, r6
 8012dc8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8012dcc:	4b37      	ldr	r3, [pc, #220]	; (8012eac <DrawMenu+0x314>)
 8012dce:	4419      	add	r1, r3
 8012dd0:	a802      	add	r0, sp, #8
 8012dd2:	f006 fa17 	bl	8019204 <strcat>
 8012dd6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012dda:	009a      	lsls	r2, r3, #2
 8012ddc:	3215      	adds	r2, #21
 8012dde:	9500      	str	r5, [sp, #0]
 8012de0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012de4:	b292      	uxth	r2, r2
 8012de6:	210b      	movs	r1, #11
 8012de8:	f7ff fdba 	bl	8012960 <DrawString>
				backcolor += 0x00202020;
 8012dec:	f105 1520 	add.w	r5, r5, #2097184	; 0x200020
 8012df0:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
				if(backcolor > 0x00404040) backcolor = 0;
 8012df4:	4b2e      	ldr	r3, [pc, #184]	; (8012eb0 <DrawMenu+0x318>)
 8012df6:	429d      	cmp	r5, r3
 8012df8:	d987      	bls.n	8012d0a <DrawMenu+0x172>
 8012dfa:	2500      	movs	r5, #0
 8012dfc:	e785      	b.n	8012d0a <DrawMenu+0x172>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11 + str_offset, 21+20*(i+1), 0x00FFFFFF, 0x00008F00);
 8012dfe:	4431      	add	r1, r6
 8012e00:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8012e04:	4b29      	ldr	r3, [pc, #164]	; (8012eac <DrawMenu+0x314>)
 8012e06:	4419      	add	r1, r3
 8012e08:	a802      	add	r0, sp, #8
 8012e0a:	f006 f9fb 	bl	8019204 <strcat>
 8012e0e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012e12:	009a      	lsls	r2, r3, #2
 8012e14:	3215      	adds	r2, #21
 8012e16:	f107 010b 	add.w	r1, r7, #11
 8012e1a:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 8012e1e:	9300      	str	r3, [sp, #0]
 8012e20:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012e24:	b292      	uxth	r2, r2
 8012e26:	b289      	uxth	r1, r1
 8012e28:	f7ff fd9a 	bl	8012960 <DrawString>
 8012e2c:	e7de      	b.n	8012dec <DrawMenu+0x254>
						DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 8012e2e:	4431      	add	r1, r6
 8012e30:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8012e34:	4b1d      	ldr	r3, [pc, #116]	; (8012eac <DrawMenu+0x314>)
 8012e36:	4419      	add	r1, r3
 8012e38:	a802      	add	r0, sp, #8
 8012e3a:	f006 f9e3 	bl	8019204 <strcat>
 8012e3e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012e42:	009a      	lsls	r2, r3, #2
 8012e44:	3215      	adds	r2, #21
 8012e46:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012e4a:	9300      	str	r3, [sp, #0]
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	b292      	uxth	r2, r2
 8012e50:	210b      	movs	r1, #11
 8012e52:	f7ff fd85 	bl	8012960 <DrawString>
 8012e56:	e7c9      	b.n	8012dec <DrawMenu+0x254>
					DrawString(strcat(string, (char*)TrackTable[i+str_increment]), 11, 21+20*(i+1), 0x00000000, 0x00FFFFFF);
 8012e58:	4431      	add	r1, r6
 8012e5a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8012e5e:	4b13      	ldr	r3, [pc, #76]	; (8012eac <DrawMenu+0x314>)
 8012e60:	4419      	add	r1, r3
 8012e62:	a802      	add	r0, sp, #8
 8012e64:	f006 f9ce 	bl	8019204 <strcat>
 8012e68:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012e6c:	009a      	lsls	r2, r3, #2
 8012e6e:	3215      	adds	r2, #21
 8012e70:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012e74:	9300      	str	r3, [sp, #0]
 8012e76:	2300      	movs	r3, #0
 8012e78:	b292      	uxth	r2, r2
 8012e7a:	210b      	movs	r1, #11
 8012e7c:	f7ff fd70 	bl	8012960 <DrawString>
 8012e80:	e77b      	b.n	8012d7a <DrawMenu+0x1e2>
				if(backcolor > 0x00404040) backcolor = 0;
 8012e82:	2500      	movs	r5, #0
 8012e84:	e741      	b.n	8012d0a <DrawMenu+0x172>
 8012e86:	bf00      	nop
 8012e88:	20000604 	.word	0x20000604
 8012e8c:	0801d580 	.word	0x0801d580
 8012e90:	00207b20 	.word	0x00207b20
 8012e94:	20014816 	.word	0x20014816
 8012e98:	20001c30 	.word	0x20001c30
 8012e9c:	430c0000 	.word	0x430c0000
 8012ea0:	2001745c 	.word	0x2001745c
 8012ea4:	0801d524 	.word	0x0801d524
 8012ea8:	20000094 	.word	0x20000094
 8012eac:	20007fd0 	.word	0x20007fd0
 8012eb0:	00404040 	.word	0x00404040
 8012eb4:	2000e36c 	.word	0x2000e36c
 8012eb8:	2000009c 	.word	0x2000009c
 8012ebc:	20017460 	.word	0x20017460
		DrawString(" [SETTINGS]", 0, 20, 0x00FFFFFF, 0x000000FF);
 8012ec0:	23ff      	movs	r3, #255	; 0xff
 8012ec2:	9300      	str	r3, [sp, #0]
 8012ec4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012ec8:	2214      	movs	r2, #20
 8012eca:	2100      	movs	r1, #0
 8012ecc:	487e      	ldr	r0, [pc, #504]	; (80130c8 <DrawMenu+0x530>)
 8012ece:	f7ff fd47 	bl	8012960 <DrawString>
		char stri[50] = {0};
 8012ed2:	2400      	movs	r4, #0
 8012ed4:	9402      	str	r4, [sp, #8]
 8012ed6:	222e      	movs	r2, #46	; 0x2e
 8012ed8:	4621      	mov	r1, r4
 8012eda:	a803      	add	r0, sp, #12
 8012edc:	f006 f87a 	bl	8018fd4 <memset>
		sprintf(stri, "%s %d %s", " Volume", volume, "%");
 8012ee0:	4d7a      	ldr	r5, [pc, #488]	; (80130cc <DrawMenu+0x534>)
 8012ee2:	4b7b      	ldr	r3, [pc, #492]	; (80130d0 <DrawMenu+0x538>)
 8012ee4:	9300      	str	r3, [sp, #0]
 8012ee6:	782b      	ldrb	r3, [r5, #0]
 8012ee8:	4a7a      	ldr	r2, [pc, #488]	; (80130d4 <DrawMenu+0x53c>)
 8012eea:	497b      	ldr	r1, [pc, #492]	; (80130d8 <DrawMenu+0x540>)
 8012eec:	a802      	add	r0, sp, #8
 8012eee:	f006 f969 	bl	80191c4 <siprintf>
		DrawString(stri, 0, 40, 0x00FFFFFF, backcolor);
 8012ef2:	4b7a      	ldr	r3, [pc, #488]	; (80130dc <DrawMenu+0x544>)
 8012ef4:	9300      	str	r3, [sp, #0]
 8012ef6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012efa:	2228      	movs	r2, #40	; 0x28
 8012efc:	4621      	mov	r1, r4
 8012efe:	a802      	add	r0, sp, #8
 8012f00:	f7ff fd2e 	bl	8012960 <DrawString>
		VLine(40, 41, 18, 0x00FFFFFF);
 8012f04:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012f08:	2212      	movs	r2, #18
 8012f0a:	2129      	movs	r1, #41	; 0x29
 8012f0c:	2028      	movs	r0, #40	; 0x28
 8012f0e:	f7fd fef1 	bl	8010cf4 <VLine>
		VLine(440, 41, 18, 0x00FFFFFF);
 8012f12:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012f16:	2212      	movs	r2, #18
 8012f18:	2129      	movs	r1, #41	; 0x29
 8012f1a:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8012f1e:	f7fd fee9 	bl	8010cf4 <VLine>
		HLine(40, 41, 400, 0x00FFFFFF);
 8012f22:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012f26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012f2a:	2129      	movs	r1, #41	; 0x29
 8012f2c:	2028      	movs	r0, #40	; 0x28
 8012f2e:	f7fd ff1d 	bl	8010d6c <HLine>
		HLine(40, 59, 401, 0x00FFFFFF);
 8012f32:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012f36:	f240 1291 	movw	r2, #401	; 0x191
 8012f3a:	213b      	movs	r1, #59	; 0x3b
 8012f3c:	2028      	movs	r0, #40	; 0x28
 8012f3e:	f7fd ff15 	bl	8010d6c <HLine>
		uint32_t vol_pos = (float)volume/100*400;
 8012f42:	782b      	ldrb	r3, [r5, #0]
 8012f44:	ee07 3a10 	vmov	s14, r3
 8012f48:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012f4c:	eddf 6a64 	vldr	s13, [pc, #400]	; 80130e0 <DrawMenu+0x548>
 8012f50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012f54:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80130e4 <DrawMenu+0x54c>
 8012f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012f60:	ee17 2a90 	vmov	r2, s15
		if(vol_pos != 0) Rectangle(40, 42, vol_pos, 17, 0x00FFFFFF);
 8012f64:	2a00      	cmp	r2, #0
 8012f66:	f040 809b 	bne.w	80130a0 <DrawMenu+0x508>
		uint32_t jogsens_pos = jog_sensitivity * 10000;
 8012f6a:	4b5f      	ldr	r3, [pc, #380]	; (80130e8 <DrawMenu+0x550>)
 8012f6c:	edd3 7a00 	vldr	s15, [r3]
 8012f70:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80130ec <DrawMenu+0x554>
 8012f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012f7c:	ee17 4a90 	vmov	r4, s15
		sprintf(stri, "%s %d %s", " Jog sensitivity", (int)jogsens_pos, "%");
 8012f80:	4b53      	ldr	r3, [pc, #332]	; (80130d0 <DrawMenu+0x538>)
 8012f82:	9300      	str	r3, [sp, #0]
 8012f84:	ee17 3a90 	vmov	r3, s15
 8012f88:	4a59      	ldr	r2, [pc, #356]	; (80130f0 <DrawMenu+0x558>)
 8012f8a:	4953      	ldr	r1, [pc, #332]	; (80130d8 <DrawMenu+0x540>)
 8012f8c:	a802      	add	r0, sp, #8
 8012f8e:	f006 f919 	bl	80191c4 <siprintf>
		DrawString(stri, 0, 80, 0x00FFFFFF, backcolor);
 8012f92:	4b58      	ldr	r3, [pc, #352]	; (80130f4 <DrawMenu+0x55c>)
 8012f94:	9300      	str	r3, [sp, #0]
 8012f96:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012f9a:	2250      	movs	r2, #80	; 0x50
 8012f9c:	2100      	movs	r1, #0
 8012f9e:	a802      	add	r0, sp, #8
 8012fa0:	f7ff fcde 	bl	8012960 <DrawString>
		VLine(40, 81, 18, 0x00FFFFFF);
 8012fa4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012fa8:	2212      	movs	r2, #18
 8012faa:	2151      	movs	r1, #81	; 0x51
 8012fac:	2028      	movs	r0, #40	; 0x28
 8012fae:	f7fd fea1 	bl	8010cf4 <VLine>
		VLine(440, 81, 18, 0x00FFFFFF);
 8012fb2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012fb6:	2212      	movs	r2, #18
 8012fb8:	2151      	movs	r1, #81	; 0x51
 8012fba:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8012fbe:	f7fd fe99 	bl	8010cf4 <VLine>
		HLine(40, 81, 400, 0x00FFFFFF);
 8012fc2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012fc6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012fca:	2151      	movs	r1, #81	; 0x51
 8012fcc:	2028      	movs	r0, #40	; 0x28
 8012fce:	f7fd fecd 	bl	8010d6c <HLine>
		HLine(40, 99, 401, 0x00FFFFFF);
 8012fd2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012fd6:	f240 1291 	movw	r2, #401	; 0x191
 8012fda:	2163      	movs	r1, #99	; 0x63
 8012fdc:	2028      	movs	r0, #40	; 0x28
 8012fde:	f7fd fec5 	bl	8010d6c <HLine>
		if(jogsens_pos != 0) Rectangle(40, 82, jogsens_pos, 17, 0x00FFFFFF);
 8012fe2:	00a4      	lsls	r4, r4, #2
 8012fe4:	d166      	bne.n	80130b4 <DrawMenu+0x51c>
		sprintf(stri, "%s %d %s", " Auto cue sensitivity", (int)((float)acue_sensitivity/250*100), "%");
 8012fe6:	4c44      	ldr	r4, [pc, #272]	; (80130f8 <DrawMenu+0x560>)
 8012fe8:	7823      	ldrb	r3, [r4, #0]
 8012fea:	ee07 3a10 	vmov	s14, r3
 8012fee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012ff2:	ed9f 8a42 	vldr	s16, [pc, #264]	; 80130fc <DrawMenu+0x564>
 8012ff6:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8012ffa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80130e0 <DrawMenu+0x548>
 8012ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013002:	4b33      	ldr	r3, [pc, #204]	; (80130d0 <DrawMenu+0x538>)
 8013004:	9300      	str	r3, [sp, #0]
 8013006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801300a:	ee17 3a90 	vmov	r3, s15
 801300e:	4a3c      	ldr	r2, [pc, #240]	; (8013100 <DrawMenu+0x568>)
 8013010:	4931      	ldr	r1, [pc, #196]	; (80130d8 <DrawMenu+0x540>)
 8013012:	a802      	add	r0, sp, #8
 8013014:	f006 f8d6 	bl	80191c4 <siprintf>
		DrawString(stri, 0, 120, 0x00FFFFFF, backcolor);
 8013018:	4b3a      	ldr	r3, [pc, #232]	; (8013104 <DrawMenu+0x56c>)
 801301a:	9300      	str	r3, [sp, #0]
 801301c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013020:	2278      	movs	r2, #120	; 0x78
 8013022:	2100      	movs	r1, #0
 8013024:	a802      	add	r0, sp, #8
 8013026:	f7ff fc9b 	bl	8012960 <DrawString>
		VLine(40, 121, 18, 0x00FFFFFF);
 801302a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801302e:	2212      	movs	r2, #18
 8013030:	2179      	movs	r1, #121	; 0x79
 8013032:	2028      	movs	r0, #40	; 0x28
 8013034:	f7fd fe5e 	bl	8010cf4 <VLine>
		VLine(440, 121, 18, 0x00FFFFFF);
 8013038:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801303c:	2212      	movs	r2, #18
 801303e:	2179      	movs	r1, #121	; 0x79
 8013040:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8013044:	f7fd fe56 	bl	8010cf4 <VLine>
		HLine(40, 121, 400, 0x00FFFFFF);
 8013048:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801304c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013050:	2179      	movs	r1, #121	; 0x79
 8013052:	2028      	movs	r0, #40	; 0x28
 8013054:	f7fd fe8a 	bl	8010d6c <HLine>
		HLine(40, 139, 401, 0x00FFFFFF);
 8013058:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801305c:	f240 1291 	movw	r2, #401	; 0x191
 8013060:	218b      	movs	r1, #139	; 0x8b
 8013062:	2028      	movs	r0, #40	; 0x28
 8013064:	f7fd fe82 	bl	8010d6c <HLine>
		uint32_t acu_pos = (float)acue_sensitivity/250*400;
 8013068:	7823      	ldrb	r3, [r4, #0]
 801306a:	ee07 3a10 	vmov	s14, r3
 801306e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013072:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8013076:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80130e4 <DrawMenu+0x54c>
 801307a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801307e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013082:	ee17 2a90 	vmov	r2, s15
		if(acu_pos != 0) Rectangle(40, 122, acu_pos, 17, 0x00FFFFFF);
 8013086:	2a00      	cmp	r2, #0
 8013088:	f43f adb3 	beq.w	8012bf2 <DrawMenu+0x5a>
 801308c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013090:	9300      	str	r3, [sp, #0]
 8013092:	2311      	movs	r3, #17
 8013094:	b292      	uxth	r2, r2
 8013096:	217a      	movs	r1, #122	; 0x7a
 8013098:	2028      	movs	r0, #40	; 0x28
 801309a:	f7fd fea7 	bl	8010dec <Rectangle>
 801309e:	e5a8      	b.n	8012bf2 <DrawMenu+0x5a>
		if(vol_pos != 0) Rectangle(40, 42, vol_pos, 17, 0x00FFFFFF);
 80130a0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80130a4:	9300      	str	r3, [sp, #0]
 80130a6:	2311      	movs	r3, #17
 80130a8:	b292      	uxth	r2, r2
 80130aa:	212a      	movs	r1, #42	; 0x2a
 80130ac:	2028      	movs	r0, #40	; 0x28
 80130ae:	f7fd fe9d 	bl	8010dec <Rectangle>
 80130b2:	e75a      	b.n	8012f6a <DrawMenu+0x3d2>
		if(jogsens_pos != 0) Rectangle(40, 82, jogsens_pos, 17, 0x00FFFFFF);
 80130b4:	b2a2      	uxth	r2, r4
 80130b6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80130ba:	9300      	str	r3, [sp, #0]
 80130bc:	2311      	movs	r3, #17
 80130be:	2152      	movs	r1, #82	; 0x52
 80130c0:	2028      	movs	r0, #40	; 0x28
 80130c2:	f7fd fe93 	bl	8010dec <Rectangle>
 80130c6:	e78e      	b.n	8012fe6 <DrawMenu+0x44e>
 80130c8:	0801d530 	.word	0x0801d530
 80130cc:	2000005c 	.word	0x2000005c
 80130d0:	0801d550 	.word	0x0801d550
 80130d4:	0801d53c 	.word	0x0801d53c
 80130d8:	0801d544 	.word	0x0801d544
 80130dc:	00202020 	.word	0x00202020
 80130e0:	42c80000 	.word	0x42c80000
 80130e4:	43c80000 	.word	0x43c80000
 80130e8:	200000a0 	.word	0x200000a0
 80130ec:	461c4000 	.word	0x461c4000
 80130f0:	0801d554 	.word	0x0801d554
 80130f4:	00404040 	.word	0x00404040
 80130f8:	20000054 	.word	0x20000054
 80130fc:	437a0000 	.word	0x437a0000
 8013100:	0801d568 	.word	0x0801d568
 8013104:	00606060 	.word	0x00606060

08013108 <QuantizePosition>:

// snaps file position on the spectra to the nearest beat
uint32_t QuantizePosition(int beat_offset) {
 8013108:	b530      	push	{r4, r5, lr}
	uint32_t quantized_pos = file_pos_wide;
 801310a:	4b1d      	ldr	r3, [pc, #116]	; (8013180 <QuantizePosition+0x78>)
 801310c:	681c      	ldr	r4, [r3, #0]
	int32_t time1 = file_pos_wide - rekordbox.timeindex[beat]*150/1000;
 801310e:	4b1d      	ldr	r3, [pc, #116]	; (8013184 <QuantizePosition+0x7c>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	491d      	ldr	r1, [pc, #116]	; (8013188 <QuantizePosition+0x80>)
 8013114:	f203 42aa 	addw	r2, r3, #1194	; 0x4aa
 8013118:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801311c:	f04f 0c96 	mov.w	ip, #150	; 0x96
 8013120:	fb0c f202 	mul.w	r2, ip, r2
 8013124:	4d19      	ldr	r5, [pc, #100]	; (801318c <QuantizePosition+0x84>)
 8013126:	fba5 e202 	umull	lr, r2, r5, r2
 801312a:	eba4 1292 	sub.w	r2, r4, r2, lsr #6
	int32_t time2 = rekordbox.timeindex[beat+1]*150/1000 - file_pos_wide;
 801312e:	f203 4eab 	addw	lr, r3, #1195	; 0x4ab
 8013132:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 8013136:	fb0c f101 	mul.w	r1, ip, r1
 801313a:	fba5 5101 	umull	r5, r1, r5, r1
 801313e:	ebc4 1191 	rsb	r1, r4, r1, lsr #6
	if(time1 > time2) {
 8013142:	428a      	cmp	r2, r1
 8013144:	dd0d      	ble.n	8013162 <QuantizePosition+0x5a>
		quantized_pos = rekordbox.timeindex[beat+beat_offset+1]*150/1000;							;
 8013146:	4403      	add	r3, r0
 8013148:	f203 43ab 	addw	r3, r3, #1195	; 0x4ab
 801314c:	4a0e      	ldr	r2, [pc, #56]	; (8013188 <QuantizePosition+0x80>)
 801314e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013152:	4663      	mov	r3, ip
 8013154:	fb03 f000 	mul.w	r0, r3, r0
 8013158:	4b0c      	ldr	r3, [pc, #48]	; (801318c <QuantizePosition+0x84>)
 801315a:	fba3 3000 	umull	r3, r0, r3, r0
 801315e:	0980      	lsrs	r0, r0, #6
	}
	else {
		quantized_pos = rekordbox.timeindex[beat+beat_offset]*150/1000;
	}
	return quantized_pos;
}
 8013160:	bd30      	pop	{r4, r5, pc}
		quantized_pos = rekordbox.timeindex[beat+beat_offset]*150/1000;
 8013162:	4403      	add	r3, r0
 8013164:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8013168:	4a07      	ldr	r2, [pc, #28]	; (8013188 <QuantizePosition+0x80>)
 801316a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801316e:	2396      	movs	r3, #150	; 0x96
 8013170:	fb03 f000 	mul.w	r0, r3, r0
 8013174:	4b05      	ldr	r3, [pc, #20]	; (801318c <QuantizePosition+0x84>)
 8013176:	fba3 3000 	umull	r3, r0, r3, r0
 801317a:	0980      	lsrs	r0, r0, #6
	return quantized_pos;
 801317c:	e7f0      	b.n	8013160 <QuantizePosition+0x58>
 801317e:	bf00      	nop
 8013180:	2000e3cc 	.word	0x2000e3cc
 8013184:	200005dc 	.word	0x200005dc
 8013188:	20014618 	.word	0x20014618
 801318c:	10624dd3 	.word	0x10624dd3

08013190 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8013190:	b500      	push	{lr}
 8013192:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8013194:	4b0a      	ldr	r3, [pc, #40]	; (80131c0 <MX_DMA_Init+0x30>)
 8013196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013198:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801319c:	631a      	str	r2, [r3, #48]	; 0x30
 801319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80131a4:	9301      	str	r3, [sp, #4]
 80131a6:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80131a8:	2200      	movs	r2, #0
 80131aa:	4611      	mov	r1, r2
 80131ac:	203c      	movs	r0, #60	; 0x3c
 80131ae:	f7ee f881 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80131b2:	203c      	movs	r0, #60	; 0x3c
 80131b4:	f7ee f8c2 	bl	800133c <HAL_NVIC_EnableIRQ>

}
 80131b8:	b003      	add	sp, #12
 80131ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80131be:	bf00      	nop
 80131c0:	40023800 	.word	0x40023800

080131c4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80131c4:	b508      	push	{r3, lr}
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80131c6:	4808      	ldr	r0, [pc, #32]	; (80131e8 <MX_DMA2D_Init+0x24>)
 80131c8:	4b08      	ldr	r3, [pc, #32]	; (80131ec <MX_DMA2D_Init+0x28>)
 80131ca:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80131cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80131d0:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80131d2:	2302      	movs	r3, #2
 80131d4:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 80131d6:	2300      	movs	r3, #0
 80131d8:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80131da:	f7ee fccd 	bl	8001b78 <HAL_DMA2D_Init>
 80131de:	b900      	cbnz	r0, 80131e2 <MX_DMA2D_Init+0x1e>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80131e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80131e2:	f000 ff53 	bl	801408c <Error_Handler>
}
 80131e6:	e7fb      	b.n	80131e0 <MX_DMA2D_Init+0x1c>
 80131e8:	2000060c 	.word	0x2000060c
 80131ec:	4002b000 	.word	0x4002b000

080131f0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 80131f0:	6802      	ldr	r2, [r0, #0]
 80131f2:	4b0d      	ldr	r3, [pc, #52]	; (8013228 <HAL_DMA2D_MspInit+0x38>)
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d000      	beq.n	80131fa <HAL_DMA2D_MspInit+0xa>
 80131f8:	4770      	bx	lr
{
 80131fa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */
	__HAL_DMA2D_ENABLE_IT(&hdma2d, DMA2D_IT_TC);
 80131fc:	4a0b      	ldr	r2, [pc, #44]	; (801322c <HAL_DMA2D_MspInit+0x3c>)
 80131fe:	6811      	ldr	r1, [r2, #0]
 8013200:	680b      	ldr	r3, [r1, #0]
 8013202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013206:	600b      	str	r3, [r1, #0]
	__HAL_DMA2D_CLEAR_FLAG(&hdma2d, DMA2D_IT_TC);
 8013208:	6813      	ldr	r3, [r2, #0]
 801320a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801320e:	609a      	str	r2, [r3, #8]
  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8013210:	4b07      	ldr	r3, [pc, #28]	; (8013230 <HAL_DMA2D_MspInit+0x40>)
 8013212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013214:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8013218:	631a      	str	r2, [r3, #48]	; 0x30
 801321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801321c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013220:	9301      	str	r3, [sp, #4]
 8013222:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8013224:	b002      	add	sp, #8
 8013226:	4770      	bx	lr
 8013228:	4002b000 	.word	0x4002b000
 801322c:	2000060c 	.word	0x2000060c
 8013230:	40023800 	.word	0x40023800

08013234 <MX_FATFS_Init>:
#include "ff.h"

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013234:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013236:	4903      	ldr	r1, [pc, #12]	; (8013244 <MX_FATFS_Init+0x10>)
 8013238:	4803      	ldr	r0, [pc, #12]	; (8013248 <MX_FATFS_Init+0x14>)
 801323a:	f7f8 fadd 	bl	800b7f8 <FATFS_LinkDriver>
 801323e:	4b03      	ldr	r3, [pc, #12]	; (801324c <MX_FATFS_Init+0x18>)
 8013240:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8013242:	bd08      	pop	{r3, pc}
 8013244:	2000064c 	.word	0x2000064c
 8013248:	0801ea54 	.word	0x0801ea54
 801324c:	20000650 	.word	0x20000650

08013250 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013250:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013256:	4804      	ldr	r0, [pc, #16]	; (8013268 <BSP_PlatformIsDetected+0x18>)
 8013258:	f7ee ffda 	bl	8002210 <HAL_GPIO_ReadPin>
 801325c:	b908      	cbnz	r0, 8013262 <BSP_PlatformIsDetected+0x12>
    uint8_t status = SD_PRESENT;
 801325e:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8013260:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 8013262:	2000      	movs	r0, #0
 8013264:	e7fc      	b.n	8013260 <BSP_PlatformIsDetected+0x10>
 8013266:	bf00      	nop
 8013268:	40020800 	.word	0x40020800

0801326c <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 801326c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801326e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013270:	2300      	movs	r3, #0
 8013272:	9301      	str	r3, [sp, #4]
 8013274:	9302      	str	r3, [sp, #8]
 8013276:	9303      	str	r3, [sp, #12]
 8013278:	9304      	str	r3, [sp, #16]
 801327a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 801327c:	4b2a      	ldr	r3, [pc, #168]	; (8013328 <HAL_FMC_MspInit+0xbc>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	b10b      	cbz	r3, 8013286 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8013282:	b007      	add	sp, #28
 8013284:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8013286:	4b28      	ldr	r3, [pc, #160]	; (8013328 <HAL_FMC_MspInit+0xbc>)
 8013288:	2201      	movs	r2, #1
 801328a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 801328c:	4b27      	ldr	r3, [pc, #156]	; (801332c <HAL_FMC_MspInit+0xc0>)
 801328e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013290:	f042 0201 	orr.w	r2, r2, #1
 8013294:	639a      	str	r2, [r3, #56]	; 0x38
 8013296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013298:	f003 0301 	and.w	r3, r3, #1
 801329c:	9300      	str	r3, [sp, #0]
 801329e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80132a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80132a4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132a6:	2602      	movs	r6, #2
 80132a8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132aa:	2503      	movs	r5, #3
 80132ac:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80132ae:	240c      	movs	r4, #12
 80132b0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80132b2:	a901      	add	r1, sp, #4
 80132b4:	481e      	ldr	r0, [pc, #120]	; (8013330 <HAL_FMC_MspInit+0xc4>)
 80132b6:	f7ee fe2b 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80132ba:	f248 1313 	movw	r3, #33043	; 0x8113
 80132be:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132c0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132c2:	2700      	movs	r7, #0
 80132c4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132c6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80132c8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80132ca:	a901      	add	r1, sp, #4
 80132cc:	4819      	ldr	r0, [pc, #100]	; (8013334 <HAL_FMC_MspInit+0xc8>)
 80132ce:	f7ee fe1f 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80132d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80132d6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132d8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132da:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132dc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80132de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80132e0:	a901      	add	r1, sp, #4
 80132e2:	4815      	ldr	r0, [pc, #84]	; (8013338 <HAL_FMC_MspInit+0xcc>)
 80132e4:	f7ee fe14 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80132e8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80132ec:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132ee:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132f0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132f2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80132f4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80132f6:	a901      	add	r1, sp, #4
 80132f8:	4810      	ldr	r0, [pc, #64]	; (801333c <HAL_FMC_MspInit+0xd0>)
 80132fa:	f7ee fe09 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80132fe:	2328      	movs	r3, #40	; 0x28
 8013300:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013302:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013304:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013306:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013308:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801330a:	a901      	add	r1, sp, #4
 801330c:	480c      	ldr	r0, [pc, #48]	; (8013340 <HAL_FMC_MspInit+0xd4>)
 801330e:	f7ee fdff 	bl	8001f10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8013312:	2308      	movs	r3, #8
 8013314:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013316:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013318:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801331a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801331c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801331e:	a901      	add	r1, sp, #4
 8013320:	4808      	ldr	r0, [pc, #32]	; (8013344 <HAL_FMC_MspInit+0xd8>)
 8013322:	f7ee fdf5 	bl	8001f10 <HAL_GPIO_Init>
 8013326:	e7ac      	b.n	8013282 <HAL_FMC_MspInit+0x16>
 8013328:	20000654 	.word	0x20000654
 801332c:	40023800 	.word	0x40023800
 8013330:	40021000 	.word	0x40021000
 8013334:	40021800 	.word	0x40021800
 8013338:	40020c00 	.word	0x40020c00
 801333c:	40021400 	.word	0x40021400
 8013340:	40021c00 	.word	0x40021c00
 8013344:	40020800 	.word	0x40020800

08013348 <SDRAM_Init>:
{
 8013348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801334c:	b083      	sub	sp, #12
	__IO uint32_t tmpmrd = 0;
 801334e:	f04f 0900 	mov.w	r9, #0
 8013352:	f8cd 9004 	str.w	r9, [sp, #4]
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8013356:	4c29      	ldr	r4, [pc, #164]	; (80133fc <SDRAM_Init+0xb4>)
 8013358:	2501      	movs	r5, #1
 801335a:	6025      	str	r5, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801335c:	f04f 0810 	mov.w	r8, #16
 8013360:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 8013364:	60a5      	str	r5, [r4, #8]
	command.ModeRegisterDefinition = 0;
 8013366:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 801336a:	4e25      	ldr	r6, [pc, #148]	; (8013400 <SDRAM_Init+0xb8>)
 801336c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013370:	4621      	mov	r1, r4
 8013372:	4630      	mov	r0, r6
 8013374:	f7f3 fa0b 	bl	800678e <HAL_SDRAM_SendCommand>
 8013378:	4f22      	ldr	r7, [pc, #136]	; (8013404 <SDRAM_Init+0xbc>)
 801337a:	7038      	strb	r0, [r7, #0]
	HAL_Delay(1);
 801337c:	4628      	mov	r0, r5
 801337e:	f7ed ff67 	bl	8001250 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8013382:	2302      	movs	r3, #2
 8013384:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013386:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 801338a:	60a5      	str	r5, [r4, #8]
	command.ModeRegisterDefinition = 0;
 801338c:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 8013390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013394:	4621      	mov	r1, r4
 8013396:	4630      	mov	r0, r6
 8013398:	f7f3 f9f9 	bl	800678e <HAL_SDRAM_SendCommand>
 801339c:	7038      	strb	r0, [r7, #0]
	HAL_Delay(1);
 801339e:	4628      	mov	r0, r5
 80133a0:	f7ed ff56 	bl	8001250 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80133a4:	2303      	movs	r3, #3
 80133a6:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80133a8:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 8;
 80133ac:	2308      	movs	r3, #8
 80133ae:	60a3      	str	r3, [r4, #8]
	command.ModeRegisterDefinition = 0;
 80133b0:	f8c4 900c 	str.w	r9, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 80133b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133b8:	4621      	mov	r1, r4
 80133ba:	4630      	mov	r0, r6
 80133bc:	f7f3 f9e7 	bl	800678e <HAL_SDRAM_SendCommand>
 80133c0:	7038      	strb	r0, [r7, #0]
	HAL_Delay(1);
 80133c2:	4628      	mov	r0, r5
 80133c4:	f7ed ff44 	bl	8001250 <HAL_Delay>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 |
 80133c8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80133cc:	9301      	str	r3, [sp, #4]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80133ce:	2304      	movs	r3, #4
 80133d0:	6023      	str	r3, [r4, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80133d2:	f8c4 8004 	str.w	r8, [r4, #4]
	command.AutoRefreshNumber = 1;
 80133d6:	60a5      	str	r5, [r4, #8]
	command.ModeRegisterDefinition = tmpmrd;
 80133d8:	9b01      	ldr	r3, [sp, #4]
 80133da:	60e3      	str	r3, [r4, #12]
	hal_stat = HAL_SDRAM_SendCommand(&hsdram1, &command, SDRAM_TIMEOUT);
 80133dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133e0:	4621      	mov	r1, r4
 80133e2:	4630      	mov	r0, r6
 80133e4:	f7f3 f9d3 	bl	800678e <HAL_SDRAM_SendCommand>
 80133e8:	7038      	strb	r0, [r7, #0]
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80133ea:	f240 6103 	movw	r1, #1539	; 0x603
 80133ee:	4630      	mov	r0, r6
 80133f0:	f7f3 f9e8 	bl	80067c4 <HAL_SDRAM_ProgramRefreshRate>
}
 80133f4:	b003      	add	sp, #12
 80133f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133fa:	bf00      	nop
 80133fc:	20000658 	.word	0x20000658
 8013400:	2000066c 	.word	0x2000066c
 8013404:	20000668 	.word	0x20000668

08013408 <MX_FMC_Init>:
{
 8013408:	b500      	push	{lr}
 801340a:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 801340c:	2300      	movs	r3, #0
 801340e:	9301      	str	r3, [sp, #4]
 8013410:	9302      	str	r3, [sp, #8]
 8013412:	9303      	str	r3, [sp, #12]
 8013414:	9304      	str	r3, [sp, #16]
 8013416:	9305      	str	r3, [sp, #20]
 8013418:	9306      	str	r3, [sp, #24]
 801341a:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 801341c:	4813      	ldr	r0, [pc, #76]	; (801346c <MX_FMC_Init+0x64>)
 801341e:	4a14      	ldr	r2, [pc, #80]	; (8013470 <MX_FMC_Init+0x68>)
 8013420:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8013422:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8013424:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8013426:	2104      	movs	r1, #4
 8013428:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 801342a:	2210      	movs	r2, #16
 801342c:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 801342e:	6143      	str	r3, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8013430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013434:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8013436:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8013438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801343c:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801343e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013442:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8013444:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8013446:	2302      	movs	r3, #2
 8013448:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 801344a:	2206      	movs	r2, #6
 801344c:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 801344e:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8013450:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8013452:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8013454:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8013456:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8013458:	4469      	add	r1, sp
 801345a:	f7f3 f978 	bl	800674e <HAL_SDRAM_Init>
 801345e:	b910      	cbnz	r0, 8013466 <MX_FMC_Init+0x5e>
}
 8013460:	b009      	add	sp, #36	; 0x24
 8013462:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8013466:	f000 fe11 	bl	801408c <Error_Handler>
}
 801346a:	e7f9      	b.n	8013460 <MX_FMC_Init+0x58>
 801346c:	2000066c 	.word	0x2000066c
 8013470:	a0000140 	.word	0xa0000140

08013474 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8013474:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8013476:	f7ff fef9 	bl	801326c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801347a:	bd08      	pop	{r3, pc}

0801347c <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 801347c:	4770      	bx	lr

0801347e <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 801347e:	2000      	movs	r0, #0
 8013480:	4770      	bx	lr

08013482 <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 8013482:	4770      	bx	lr

08013484 <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 8013484:	4b01      	ldr	r3, [pc, #4]	; (801348c <ft5336_Get_I2C_InitializedStatus+0x8>)
 8013486:	7818      	ldrb	r0, [r3, #0]
 8013488:	4770      	bx	lr
 801348a:	bf00      	nop
 801348c:	200006a4 	.word	0x200006a4

08013490 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8013490:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8013492:	f7ff fff7 	bl	8013484 <ft5336_Get_I2C_InitializedStatus>
 8013496:	b100      	cbz	r0, 801349a <ft5336_I2C_InitializeIfRequired+0xa>
    TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
  }
}
 8013498:	bd08      	pop	{r3, pc}
    TS_IO_Init();
 801349a:	f003 f809 	bl	80164b0 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 801349e:	4b02      	ldr	r3, [pc, #8]	; (80134a8 <ft5336_I2C_InitializeIfRequired+0x18>)
 80134a0:	2201      	movs	r2, #1
 80134a2:	701a      	strb	r2, [r3, #0]
}
 80134a4:	e7f8      	b.n	8013498 <ft5336_I2C_InitializeIfRequired+0x8>
 80134a6:	bf00      	nop
 80134a8:	200006a4 	.word	0x200006a4

080134ac <ft5336_Init>:
{
 80134ac:	b508      	push	{r3, lr}
  TS_IO_Delay(200);
 80134ae:	20c8      	movs	r0, #200	; 0xc8
 80134b0:	f003 f836 	bl	8016520 <TS_IO_Delay>
  ft5336_I2C_InitializeIfRequired();
 80134b4:	f7ff ffec 	bl	8013490 <ft5336_I2C_InitializeIfRequired>
}
 80134b8:	bd08      	pop	{r3, pc}

080134ba <ft5336_ReadID>:
{
 80134ba:	b570      	push	{r4, r5, r6, lr}
 80134bc:	b082      	sub	sp, #8
 80134be:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 80134c0:	2400      	movs	r4, #0
 80134c2:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 80134c6:	f7ff ffe3 	bl	8013490 <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80134ca:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80134cc:	e001      	b.n	80134d2 <ft5336_ReadID+0x18>
 80134ce:	3401      	adds	r4, #1
 80134d0:	b2e4      	uxtb	r4, r4
 80134d2:	f085 0301 	eor.w	r3, r5, #1
 80134d6:	2c02      	cmp	r4, #2
 80134d8:	bf8c      	ite	hi
 80134da:	2300      	movhi	r3, #0
 80134dc:	f003 0301 	andls.w	r3, r3, #1
 80134e0:	b163      	cbz	r3, 80134fc <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80134e2:	21a8      	movs	r1, #168	; 0xa8
 80134e4:	b2f0      	uxtb	r0, r6
 80134e6:	f003 f801 	bl	80164ec <TS_IO_Read>
 80134ea:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80134ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80134f2:	b2db      	uxtb	r3, r3
 80134f4:	2b51      	cmp	r3, #81	; 0x51
 80134f6:	d1ea      	bne.n	80134ce <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 80134f8:	2501      	movs	r5, #1
 80134fa:	e7e8      	b.n	80134ce <ft5336_ReadID+0x14>
  return (ucReadId);
 80134fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8013500:	b002      	add	sp, #8
 8013502:	bd70      	pop	{r4, r5, r6, pc}

08013504 <ft5336_TS_DetectTouch>:
{
 8013504:	b500      	push	{lr}
 8013506:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 8013508:	2300      	movs	r3, #0
 801350a:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 801350e:	2102      	movs	r1, #2
 8013510:	b2c0      	uxtb	r0, r0
 8013512:	f002 ffeb 	bl	80164ec <TS_IO_Read>
 8013516:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 801351a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801351e:	f003 030f 	and.w	r3, r3, #15
 8013522:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8013526:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801352a:	b2db      	uxtb	r3, r3
 801352c:	2b05      	cmp	r3, #5
 801352e:	d902      	bls.n	8013536 <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 8013530:	2300      	movs	r3, #0
 8013532:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8013536:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801353a:	4b04      	ldr	r3, [pc, #16]	; (801354c <ft5336_TS_DetectTouch+0x48>)
 801353c:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 801353e:	2200      	movs	r2, #0
 8013540:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 8013542:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8013546:	b003      	add	sp, #12
 8013548:	f85d fb04 	ldr.w	pc, [sp], #4
 801354c:	200006a4 	.word	0x200006a4

08013550 <ft5336_TS_GetXY>:
{
 8013550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013554:	b082      	sub	sp, #8
 8013556:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 8013558:	2300      	movs	r3, #0
 801355a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 801355e:	4a4f      	ldr	r2, [pc, #316]	; (801369c <ft5336_TS_GetXY+0x14c>)
 8013560:	7893      	ldrb	r3, [r2, #2]
 8013562:	7852      	ldrb	r2, [r2, #1]
 8013564:	4293      	cmp	r3, r2
 8013566:	f080 8096 	bcs.w	8013696 <ft5336_TS_GetXY+0x146>
 801356a:	460f      	mov	r7, r1
    switch(ft5336_handle.currActiveTouchIdx)
 801356c:	2b09      	cmp	r3, #9
 801356e:	d806      	bhi.n	801357e <ft5336_TS_GetXY+0x2e>
 8013570:	e8df f003 	tbb	[pc, r3]
 8013574:	1b130b53 	.word	0x1b130b53
 8013578:	3b332b23 	.word	0x3b332b23
 801357c:	4b43      	.short	0x4b43
 801357e:	f04f 0800 	mov.w	r8, #0
 8013582:	46c1      	mov	r9, r8
 8013584:	46c2      	mov	sl, r8
 8013586:	4641      	mov	r1, r8
 8013588:	e04e      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P2_YH_REG;
 801358a:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 801358e:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 8013592:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 8013596:	210a      	movs	r1, #10
      break;
 8013598:	e046      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P3_YH_REG;
 801359a:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 801359e:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 80135a2:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 80135a6:	2110      	movs	r1, #16
      break;
 80135a8:	e03e      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P4_YH_REG;
 80135aa:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 80135ae:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 80135b2:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 80135b6:	2116      	movs	r1, #22
      break;
 80135b8:	e036      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P5_YH_REG;
 80135ba:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 80135be:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 80135c2:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 80135c6:	211c      	movs	r1, #28
      break;
 80135c8:	e02e      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P6_YH_REG;
 80135ca:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 80135ce:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 80135d2:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 80135d6:	2122      	movs	r1, #34	; 0x22
      break;
 80135d8:	e026      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P7_YH_REG;
 80135da:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 80135de:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 80135e2:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 80135e6:	2128      	movs	r1, #40	; 0x28
      break;
 80135e8:	e01e      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P8_YH_REG;
 80135ea:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 80135ee:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 80135f2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 80135f6:	212e      	movs	r1, #46	; 0x2e
      break;
 80135f8:	e016      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P9_YH_REG;
 80135fa:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 80135fe:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 8013602:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 8013606:	2134      	movs	r1, #52	; 0x34
      break;
 8013608:	e00e      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P10_YH_REG;
 801360a:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 801360e:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 8013612:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 8013616:	213a      	movs	r1, #58	; 0x3a
      break;
 8013618:	e006      	b.n	8013628 <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P1_YH_REG;
 801361a:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 801361e:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 8013622:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 8013626:	2104      	movs	r1, #4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8013628:	b2c4      	uxtb	r4, r0
 801362a:	4620      	mov	r0, r4
 801362c:	f002 ff5e 	bl	80164ec <TS_IO_Read>
 8013630:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8013634:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013638:	4e19      	ldr	r6, [pc, #100]	; (80136a0 <ft5336_TS_GetXY+0x150>)
 801363a:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801363c:	4651      	mov	r1, sl
 801363e:	4620      	mov	r0, r4
 8013640:	f002 ff54 	bl	80164ec <TS_IO_Read>
 8013644:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8013648:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801364c:	021b      	lsls	r3, r3, #8
 801364e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013652:	8832      	ldrh	r2, [r6, #0]
 8013654:	4313      	orrs	r3, r2
 8013656:	b29b      	uxth	r3, r3
 8013658:	8033      	strh	r3, [r6, #0]
    *X = coord;
 801365a:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 801365c:	4649      	mov	r1, r9
 801365e:	4620      	mov	r0, r4
 8013660:	f002 ff44 	bl	80164ec <TS_IO_Read>
 8013664:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8013668:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801366c:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 801366e:	4641      	mov	r1, r8
 8013670:	4620      	mov	r0, r4
 8013672:	f002 ff3b 	bl	80164ec <TS_IO_Read>
 8013676:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801367a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801367e:	021b      	lsls	r3, r3, #8
 8013680:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013684:	8832      	ldrh	r2, [r6, #0]
 8013686:	4313      	orrs	r3, r2
 8013688:	b29b      	uxth	r3, r3
 801368a:	8033      	strh	r3, [r6, #0]
    *Y = coord;
 801368c:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 801368e:	4a03      	ldr	r2, [pc, #12]	; (801369c <ft5336_TS_GetXY+0x14c>)
 8013690:	7893      	ldrb	r3, [r2, #2]
 8013692:	3301      	adds	r3, #1
 8013694:	7093      	strb	r3, [r2, #2]
}
 8013696:	b002      	add	sp, #8
 8013698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801369c:	200006a4 	.word	0x200006a4
 80136a0:	200006a0 	.word	0x200006a0

080136a4 <ft5336_TS_EnableIT>:
{
 80136a4:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80136a6:	2201      	movs	r2, #1
 80136a8:	21a4      	movs	r1, #164	; 0xa4
 80136aa:	b2c0      	uxtb	r0, r0
 80136ac:	f002 ff08 	bl	80164c0 <TS_IO_Write>
}
 80136b0:	bd08      	pop	{r3, pc}

080136b2 <ft5336_TS_DisableIT>:
{
 80136b2:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80136b4:	2200      	movs	r2, #0
 80136b6:	21a4      	movs	r1, #164	; 0xa4
 80136b8:	b2c0      	uxtb	r0, r0
 80136ba:	f002 ff01 	bl	80164c0 <TS_IO_Write>
}
 80136be:	bd08      	pop	{r3, pc}

080136c0 <ft5336_TS_Start>:
{
 80136c0:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 80136c2:	f7ff fff6 	bl	80136b2 <ft5336_TS_DisableIT>
}
 80136c6:	bd08      	pop	{r3, pc}

080136c8 <ft5336_TS_GetGestureID>:
{
 80136c8:	b510      	push	{r4, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	460c      	mov	r4, r1
  volatile uint8_t ucReadData = 0;
 80136ce:	2300      	movs	r3, #0
 80136d0:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80136d4:	2101      	movs	r1, #1
 80136d6:	b2c0      	uxtb	r0, r0
 80136d8:	f002 ff08 	bl	80164ec <TS_IO_Read>
 80136dc:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 80136e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80136e4:	6023      	str	r3, [r4, #0]
}
 80136e6:	b002      	add	sp, #8
 80136e8:	bd10      	pop	{r4, pc}
	...

080136ec <ft5336_TS_GetTouchInfo>:
{
 80136ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136f0:	b082      	sub	sp, #8
 80136f2:	461d      	mov	r5, r3
  volatile uint8_t ucReadData = 0;
 80136f4:	2300      	movs	r3, #0
 80136f6:	f88d 3007 	strb.w	r3, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80136fa:	4b33      	ldr	r3, [pc, #204]	; (80137c8 <ft5336_TS_GetTouchInfo+0xdc>)
 80136fc:	785b      	ldrb	r3, [r3, #1]
 80136fe:	428b      	cmp	r3, r1
 8013700:	d95e      	bls.n	80137c0 <ft5336_TS_GetTouchInfo+0xd4>
 8013702:	4616      	mov	r6, r2
    switch(touchIdx)
 8013704:	2909      	cmp	r1, #9
 8013706:	d806      	bhi.n	8013716 <ft5336_TS_GetTouchInfo+0x2a>
 8013708:	e8df f001 	tbb	[pc, r1]
 801370c:	130e0936 	.word	0x130e0936
 8013710:	27221d18 	.word	0x27221d18
 8013714:	312c      	.short	0x312c
 8013716:	2700      	movs	r7, #0
 8013718:	46b8      	mov	r8, r7
 801371a:	4639      	mov	r1, r7
 801371c:	e030      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P2_MISC_REG;
 801371e:	270e      	movs	r7, #14
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8013720:	f04f 080d 	mov.w	r8, #13
      regAddressXHigh   = FT5336_P2_XH_REG;
 8013724:	2109      	movs	r1, #9
      break;
 8013726:	e02b      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8013728:	2714      	movs	r7, #20
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 801372a:	f04f 0813 	mov.w	r8, #19
      regAddressXHigh   = FT5336_P3_XH_REG;
 801372e:	210f      	movs	r1, #15
      break;
 8013730:	e026      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8013732:	271a      	movs	r7, #26
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8013734:	f04f 0819 	mov.w	r8, #25
      regAddressXHigh   = FT5336_P4_XH_REG;
 8013738:	2115      	movs	r1, #21
      break;
 801373a:	e021      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P5_MISC_REG;
 801373c:	2720      	movs	r7, #32
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 801373e:	f04f 081f 	mov.w	r8, #31
      regAddressXHigh   = FT5336_P5_XH_REG;
 8013742:	211b      	movs	r1, #27
      break;
 8013744:	e01c      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8013746:	2726      	movs	r7, #38	; 0x26
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8013748:	f04f 0825 	mov.w	r8, #37	; 0x25
      regAddressXHigh   = FT5336_P6_XH_REG;
 801374c:	2121      	movs	r1, #33	; 0x21
      break;
 801374e:	e017      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8013750:	272c      	movs	r7, #44	; 0x2c
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8013752:	f04f 082b 	mov.w	r8, #43	; 0x2b
      regAddressXHigh   = FT5336_P7_XH_REG;
 8013756:	2127      	movs	r1, #39	; 0x27
      break;
 8013758:	e012      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P8_MISC_REG;
 801375a:	2732      	movs	r7, #50	; 0x32
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 801375c:	f04f 0831 	mov.w	r8, #49	; 0x31
      regAddressXHigh   = FT5336_P8_XH_REG;
 8013760:	212d      	movs	r1, #45	; 0x2d
      break;
 8013762:	e00d      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8013764:	2738      	movs	r7, #56	; 0x38
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8013766:	f04f 0837 	mov.w	r8, #55	; 0x37
      regAddressXHigh   = FT5336_P9_XH_REG;
 801376a:	2133      	movs	r1, #51	; 0x33
      break;
 801376c:	e008      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P10_MISC_REG;
 801376e:	273e      	movs	r7, #62	; 0x3e
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8013770:	f04f 083d 	mov.w	r8, #61	; 0x3d
      regAddressXHigh   = FT5336_P10_XH_REG;
 8013774:	2139      	movs	r1, #57	; 0x39
      break;
 8013776:	e003      	b.n	8013780 <ft5336_TS_GetTouchInfo+0x94>
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8013778:	2708      	movs	r7, #8
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 801377a:	f04f 0807 	mov.w	r8, #7
      regAddressXHigh   = FT5336_P1_XH_REG;
 801377e:	2103      	movs	r1, #3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8013780:	b2c4      	uxtb	r4, r0
 8013782:	4620      	mov	r0, r4
 8013784:	f002 feb2 	bl	80164ec <TS_IO_Read>
 8013788:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 801378c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013790:	099b      	lsrs	r3, r3, #6
 8013792:	9a08      	ldr	r2, [sp, #32]
 8013794:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8013796:	4641      	mov	r1, r8
 8013798:	4620      	mov	r0, r4
 801379a:	f002 fea7 	bl	80164ec <TS_IO_Read>
 801379e:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80137a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80137a6:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80137a8:	4639      	mov	r1, r7
 80137aa:	4620      	mov	r0, r4
 80137ac:	f002 fe9e 	bl	80164ec <TS_IO_Read>
 80137b0:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80137b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80137b8:	091b      	lsrs	r3, r3, #4
 80137ba:	f003 0304 	and.w	r3, r3, #4
 80137be:	602b      	str	r3, [r5, #0]
}
 80137c0:	b002      	add	sp, #8
 80137c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137c6:	bf00      	nop
 80137c8:	200006a4 	.word	0x200006a4

080137cc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80137cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d0:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80137d2:	2400      	movs	r4, #0
 80137d4:	940b      	str	r4, [sp, #44]	; 0x2c
 80137d6:	940c      	str	r4, [sp, #48]	; 0x30
 80137d8:	940d      	str	r4, [sp, #52]	; 0x34
 80137da:	940e      	str	r4, [sp, #56]	; 0x38
 80137dc:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80137de:	4b96      	ldr	r3, [pc, #600]	; (8013a38 <MX_GPIO_Init+0x26c>)
 80137e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137e2:	f042 0210 	orr.w	r2, r2, #16
 80137e6:	631a      	str	r2, [r3, #48]	; 0x30
 80137e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137ea:	f002 0210 	and.w	r2, r2, #16
 80137ee:	9200      	str	r2, [sp, #0]
 80137f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80137f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80137f8:	631a      	str	r2, [r3, #48]	; 0x30
 80137fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137fc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8013800:	9201      	str	r2, [sp, #4]
 8013802:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013806:	f042 0202 	orr.w	r2, r2, #2
 801380a:	631a      	str	r2, [r3, #48]	; 0x30
 801380c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801380e:	f002 0202 	and.w	r2, r2, #2
 8013812:	9202      	str	r2, [sp, #8]
 8013814:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013818:	f042 0208 	orr.w	r2, r2, #8
 801381c:	631a      	str	r2, [r3, #48]	; 0x30
 801381e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013820:	f002 0208 	and.w	r2, r2, #8
 8013824:	9203      	str	r2, [sp, #12]
 8013826:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801382a:	f042 0204 	orr.w	r2, r2, #4
 801382e:	631a      	str	r2, [r3, #48]	; 0x30
 8013830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013832:	f002 0204 	and.w	r2, r2, #4
 8013836:	9204      	str	r2, [sp, #16]
 8013838:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801383a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801383c:	f042 0201 	orr.w	r2, r2, #1
 8013840:	631a      	str	r2, [r3, #48]	; 0x30
 8013842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013844:	f002 0201 	and.w	r2, r2, #1
 8013848:	9205      	str	r2, [sp, #20]
 801384a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801384c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801384e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013852:	631a      	str	r2, [r3, #48]	; 0x30
 8013854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013856:	f402 7200 	and.w	r2, r2, #512	; 0x200
 801385a:	9206      	str	r2, [sp, #24]
 801385c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801385e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013864:	631a      	str	r2, [r3, #48]	; 0x30
 8013866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013868:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801386c:	9207      	str	r2, [sp, #28]
 801386e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8013870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013872:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013876:	631a      	str	r2, [r3, #48]	; 0x30
 8013878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801387a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 801387e:	9208      	str	r2, [sp, #32]
 8013880:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8013882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013884:	f042 0220 	orr.w	r2, r2, #32
 8013888:	631a      	str	r2, [r3, #48]	; 0x30
 801388a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801388c:	f002 0220 	and.w	r2, r2, #32
 8013890:	9209      	str	r2, [sp, #36]	; 0x24
 8013892:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801389a:	631a      	str	r2, [r3, #48]	; 0x30
 801389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138a2:	930a      	str	r3, [sp, #40]	; 0x28
 80138a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FS_PowerSwitchOn_GPIO_Port, FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80138a6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013a68 <MX_GPIO_Init+0x29c>
 80138aa:	4622      	mov	r2, r4
 80138ac:	2120      	movs	r1, #32
 80138ae:	4640      	mov	r0, r8
 80138b0:	f7ee fcc2 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80138b4:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8013a6c <MX_GPIO_Init+0x2a0>
 80138b8:	2201      	movs	r2, #1
 80138ba:	2108      	movs	r1, #8
 80138bc:	4658      	mov	r0, fp
 80138be:	f7ee fcbb 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80138c2:	4f5e      	ldr	r7, [pc, #376]	; (8013a3c <MX_GPIO_Init+0x270>)
 80138c4:	2201      	movs	r2, #1
 80138c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80138ca:	4638      	mov	r0, r7
 80138cc:	f7ee fcb4 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80138d0:	236c      	movs	r3, #108	; 0x6c
 80138d2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80138d4:	2503      	movs	r5, #3
 80138d6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138d8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80138da:	a90b      	add	r1, sp, #44	; 0x2c
 80138dc:	4858      	ldr	r0, [pc, #352]	; (8013a40 <MX_GPIO_Init+0x274>)
 80138de:	f7ee fb17 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 PG10
                           PG9 PG7 PG6 PG3
                           PG2 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10
 80138e2:	f646 63ec 	movw	r3, #28396	; 0x6eec
 80138e6:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80138e8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138ea:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80138ec:	a90b      	add	r1, sp, #44	; 0x2c
 80138ee:	4855      	ldr	r0, [pc, #340]	; (8013a44 <MX_GPIO_Init+0x278>)
 80138f0:	f7ee fb0e 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB7 PB6 PB13
                           PB12 PB2 PB10 PB1
                           PB0 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80138f4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80138f8:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1
                          |GPIO_PIN_0|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80138fa:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138fc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80138fe:	a90b      	add	r1, sp, #44	; 0x2c
 8013900:	4851      	ldr	r0, [pc, #324]	; (8013a48 <MX_GPIO_Init+0x27c>)
 8013902:	f7ee fb05 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD3 PD4
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8013906:	f643 03d8 	movw	r3, #14552	; 0x38d8
 801390a:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801390c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801390e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013910:	a90b      	add	r1, sp, #44	; 0x2c
 8013912:	4640      	mov	r0, r8
 8013914:	f7ee fafc 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA8
                           PA1 PA0 PA4 PA2
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
 8013918:	f248 73ff 	movw	r3, #34815	; 0x87ff
 801391c:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801391e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013920:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013922:	a90b      	add	r1, sp, #44	; 0x2c
 8013924:	4849      	ldr	r0, [pc, #292]	; (8013a4c <MX_GPIO_Init+0x280>)
 8013926:	f7ee faf3 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 801392a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 801392e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013932:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013934:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8013936:	a90b      	add	r1, sp, #44	; 0x2c
 8013938:	4845      	ldr	r0, [pc, #276]	; (8013a50 <MX_GPIO_Init+0x284>)
 801393a:	f7ee fae9 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_11;
 801393e:	f640 1308 	movw	r3, #2312	; 0x908
 8013942:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013944:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013946:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013948:	a90b      	add	r1, sp, #44	; 0x2c
 801394a:	4638      	mov	r0, r7
 801394c:	f7ee fae0 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FS_PowerSwitchOn_Pin;
 8013950:	2320      	movs	r3, #32
 8013952:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013954:	2601      	movs	r6, #1
 8013956:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013958:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801395a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 801395c:	a90b      	add	r1, sp, #44	; 0x2c
 801395e:	4640      	mov	r0, r8
 8013960:	f7ee fad6 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = KBD_INT_Pin|LCD_INT_Pin;
 8013964:	f242 0304 	movw	r3, #8196	; 0x2004
 8013968:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801396a:	4b3a      	ldr	r3, [pc, #232]	; (8013a54 <MX_GPIO_Init+0x288>)
 801396c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801396e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013970:	a90b      	add	r1, sp, #44	; 0x2c
 8013972:	4638      	mov	r0, r7
 8013974:	f7ee facc 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8013978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801397c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801397e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013980:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8013982:	a90b      	add	r1, sp, #44	; 0x2c
 8013984:	4834      	ldr	r0, [pc, #208]	; (8013a58 <MX_GPIO_Init+0x28c>)
 8013986:	f7ee fac3 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 801398a:	f04f 0908 	mov.w	r9, #8
 801398e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013992:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013994:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8013996:	f04f 0802 	mov.w	r8, #2
 801399a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 801399e:	a90b      	add	r1, sp, #44	; 0x2c
 80139a0:	4658      	mov	r0, fp
 80139a2:	f7ee fab5 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH2 PH12 PH9 PH11
                           PH6 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80139a6:	f64f 6354 	movw	r3, #65108	; 0xfe54
 80139aa:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11
                          |GPIO_PIN_6|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80139ac:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139ae:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80139b0:	a90b      	add	r1, sp, #44	; 0x2c
 80139b2:	482a      	ldr	r0, [pc, #168]	; (8013a5c <MX_GPIO_Init+0x290>)
 80139b4:	f7ee faac 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 80139b8:	f24c 03f7 	movw	r3, #49399	; 0xc0f7
 80139bc:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80139be:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139c0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80139c2:	a90b      	add	r1, sp, #44	; 0x2c
 80139c4:	4824      	ldr	r0, [pc, #144]	; (8013a58 <MX_GPIO_Init+0x28c>)
 80139c6:	f7ee faa3 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80139ca:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80139ce:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80139d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80139d6:	a90b      	add	r1, sp, #44	; 0x2c
 80139d8:	4638      	mov	r0, r7
 80139da:	f7ee fa99 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80139de:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80139e0:	4b1f      	ldr	r3, [pc, #124]	; (8013a60 <MX_GPIO_Init+0x294>)
 80139e2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80139e4:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80139e6:	a90b      	add	r1, sp, #44	; 0x2c
 80139e8:	4638      	mov	r0, r7
 80139ea:	f7ee fa91 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80139ee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80139f2:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80139f4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139f6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80139f8:	a90b      	add	r1, sp, #44	; 0x2c
 80139fa:	481a      	ldr	r0, [pc, #104]	; (8013a64 <MX_GPIO_Init+0x298>)
 80139fc:	f7ee fa88 	bl	8001f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8013a00:	4622      	mov	r2, r4
 8013a02:	4641      	mov	r1, r8
 8013a04:	2006      	movs	r0, #6
 8013a06:	f7ed fc55 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8013a0a:	2006      	movs	r0, #6
 8013a0c:	f7ed fc96 	bl	800133c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8013a10:	4622      	mov	r2, r4
 8013a12:	4641      	mov	r1, r8
 8013a14:	4648      	mov	r0, r9
 8013a16:	f7ed fc4d 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8013a1a:	4648      	mov	r0, r9
 8013a1c:	f7ed fc8e 	bl	800133c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8013a20:	4622      	mov	r2, r4
 8013a22:	4629      	mov	r1, r5
 8013a24:	2028      	movs	r0, #40	; 0x28
 8013a26:	f7ed fc45 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8013a2a:	2028      	movs	r0, #40	; 0x28
 8013a2c:	f7ed fc86 	bl	800133c <HAL_NVIC_EnableIRQ>

}
 8013a30:	b011      	add	sp, #68	; 0x44
 8013a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a36:	bf00      	nop
 8013a38:	40023800 	.word	0x40023800
 8013a3c:	40022000 	.word	0x40022000
 8013a40:	40021000 	.word	0x40021000
 8013a44:	40021800 	.word	0x40021800
 8013a48:	40020400 	.word	0x40020400
 8013a4c:	40020000 	.word	0x40020000
 8013a50:	40022400 	.word	0x40022400
 8013a54:	10110000 	.word	0x10110000
 8013a58:	40020800 	.word	0x40020800
 8013a5c:	40021c00 	.word	0x40021c00
 8013a60:	10210000 	.word	0x10210000
 8013a64:	40021400 	.word	0x40021400
 8013a68:	40020c00 	.word	0x40020c00
 8013a6c:	40022800 	.word	0x40022800

08013a70 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8013a70:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8013a72:	4812      	ldr	r0, [pc, #72]	; (8013abc <MX_I2C3_Init+0x4c>)
 8013a74:	4b12      	ldr	r3, [pc, #72]	; (8013ac0 <MX_I2C3_Init+0x50>)
 8013a76:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8013a78:	4b12      	ldr	r3, [pc, #72]	; (8013ac4 <MX_I2C3_Init+0x54>)
 8013a7a:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013a80:	2201      	movs	r2, #1
 8013a82:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013a84:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8013a86:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8013a88:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013a8a:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013a8c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8013a8e:	f7ef fb75 	bl	800317c <HAL_I2C_Init>
 8013a92:	b950      	cbnz	r0, 8013aaa <MX_I2C3_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8013a94:	2100      	movs	r1, #0
 8013a96:	4809      	ldr	r0, [pc, #36]	; (8013abc <MX_I2C3_Init+0x4c>)
 8013a98:	f7ef fdfa 	bl	8003690 <HAL_I2CEx_ConfigAnalogFilter>
 8013a9c:	b940      	cbnz	r0, 8013ab0 <MX_I2C3_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8013a9e:	2100      	movs	r1, #0
 8013aa0:	4806      	ldr	r0, [pc, #24]	; (8013abc <MX_I2C3_Init+0x4c>)
 8013aa2:	f7ef fe49 	bl	8003738 <HAL_I2CEx_ConfigDigitalFilter>
 8013aa6:	b930      	cbnz	r0, 8013ab6 <MX_I2C3_Init+0x46>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8013aa8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8013aaa:	f000 faef 	bl	801408c <Error_Handler>
 8013aae:	e7f1      	b.n	8013a94 <MX_I2C3_Init+0x24>
    Error_Handler();
 8013ab0:	f000 faec 	bl	801408c <Error_Handler>
 8013ab4:	e7f3      	b.n	8013a9e <MX_I2C3_Init+0x2e>
    Error_Handler();
 8013ab6:	f000 fae9 	bl	801408c <Error_Handler>
}
 8013aba:	e7f5      	b.n	8013aa8 <MX_I2C3_Init+0x38>
 8013abc:	200006a8 	.word	0x200006a8
 8013ac0:	40005c00 	.word	0x40005c00
 8013ac4:	20303e5d 	.word	0x20303e5d

08013ac8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013ac8:	b510      	push	{r4, lr}
 8013aca:	b0a8      	sub	sp, #160	; 0xa0
 8013acc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ace:	2100      	movs	r1, #0
 8013ad0:	9123      	str	r1, [sp, #140]	; 0x8c
 8013ad2:	9124      	str	r1, [sp, #144]	; 0x90
 8013ad4:	9125      	str	r1, [sp, #148]	; 0x94
 8013ad6:	9126      	str	r1, [sp, #152]	; 0x98
 8013ad8:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013ada:	2284      	movs	r2, #132	; 0x84
 8013adc:	a802      	add	r0, sp, #8
 8013ade:	f005 fa79 	bl	8018fd4 <memset>
  if(i2cHandle->Instance==I2C3)
 8013ae2:	6822      	ldr	r2, [r4, #0]
 8013ae4:	4b18      	ldr	r3, [pc, #96]	; (8013b48 <HAL_I2C_MspInit+0x80>)
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d001      	beq.n	8013aee <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8013aea:	b028      	add	sp, #160	; 0xa0
 8013aec:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8013aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013af2:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013af4:	a802      	add	r0, sp, #8
 8013af6:	f7f0 fda3 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 8013afa:	bb10      	cbnz	r0, 8013b42 <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8013afc:	4c13      	ldr	r4, [pc, #76]	; (8013b4c <HAL_I2C_MspInit+0x84>)
 8013afe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b04:	6323      	str	r3, [r4, #48]	; 0x30
 8013b06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b0c:	9300      	str	r3, [sp, #0]
 8013b0e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8013b10:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8013b14:	9323      	str	r3, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013b16:	2312      	movs	r3, #18
 8013b18:	9324      	str	r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b1e:	2303      	movs	r3, #3
 8013b20:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8013b22:	2304      	movs	r3, #4
 8013b24:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013b26:	a923      	add	r1, sp, #140	; 0x8c
 8013b28:	4809      	ldr	r0, [pc, #36]	; (8013b50 <HAL_I2C_MspInit+0x88>)
 8013b2a:	f7ee f9f1 	bl	8001f10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8013b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013b34:	6423      	str	r3, [r4, #64]	; 0x40
 8013b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013b3c:	9301      	str	r3, [sp, #4]
 8013b3e:	9b01      	ldr	r3, [sp, #4]
}
 8013b40:	e7d3      	b.n	8013aea <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8013b42:	f000 faa3 	bl	801408c <Error_Handler>
 8013b46:	e7d9      	b.n	8013afc <HAL_I2C_MspInit+0x34>
 8013b48:	40005c00 	.word	0x40005c00
 8013b4c:	40023800 	.word	0x40023800
 8013b50:	40021c00 	.word	0x40021c00

08013b54 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8013b54:	b510      	push	{r4, lr}
 8013b56:	b09a      	sub	sp, #104	; 0x68

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8013b58:	2434      	movs	r4, #52	; 0x34
 8013b5a:	4622      	mov	r2, r4
 8013b5c:	2100      	movs	r1, #0
 8013b5e:	eb0d 0004 	add.w	r0, sp, r4
 8013b62:	f005 fa37 	bl	8018fd4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8013b66:	4622      	mov	r2, r4
 8013b68:	2100      	movs	r1, #0
 8013b6a:	4668      	mov	r0, sp
 8013b6c:	f005 fa32 	bl	8018fd4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8013b70:	4838      	ldr	r0, [pc, #224]	; (8013c54 <MX_LTDC_Init+0x100>)
 8013b72:	4b39      	ldr	r3, [pc, #228]	; (8013c58 <MX_LTDC_Init+0x104>)
 8013b74:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8013b76:	2300      	movs	r3, #0
 8013b78:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8013b7a:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8013b7c:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8013b7e:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 0;
 8013b80:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 9;
 8013b82:	2209      	movs	r2, #9
 8013b84:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8013b86:	222b      	movs	r2, #43	; 0x2b
 8013b88:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 29;
 8013b8a:	221d      	movs	r2, #29
 8013b8c:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8013b8e:	f240 220b 	movw	r2, #523	; 0x20b
 8013b92:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 301;
 8013b94:	f240 122d 	movw	r2, #301	; 0x12d
 8013b98:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8013b9a:	f240 2213 	movw	r2, #531	; 0x213
 8013b9e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 305;
 8013ba0:	f240 1231 	movw	r2, #305	; 0x131
 8013ba4:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8013ba6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8013baa:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8013bae:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8013bb2:	f7ef feeb 	bl	800398c <HAL_LTDC_Init>
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	d142      	bne.n	8013c40 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 8013bba:	2200      	movs	r2, #0
 8013bbc:	920d      	str	r2, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8013bbe:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8013bc2:	910e      	str	r1, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8013bc4:	920f      	str	r2, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8013bc6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013bca:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8013bcc:	2002      	movs	r0, #2
 8013bce:	9011      	str	r0, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8013bd0:	9212      	str	r2, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8013bd2:	9213      	str	r2, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8013bd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013bd8:	9014      	str	r0, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8013bda:	2005      	movs	r0, #5
 8013bdc:	9015      	str	r0, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8013bde:	9216      	str	r2, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8013be0:	9117      	str	r1, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8013be2:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8013be4:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8013be8:	f88d 2065 	strb.w	r2, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8013bec:	f88d 2066 	strb.w	r2, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8013bf0:	a90d      	add	r1, sp, #52	; 0x34
 8013bf2:	4818      	ldr	r0, [pc, #96]	; (8013c54 <MX_LTDC_Init+0x100>)
 8013bf4:	f7ef ffd2 	bl	8003b9c <HAL_LTDC_ConfigLayer>
 8013bf8:	bb28      	cbnz	r0, 8013c46 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
  }
  pLayerCfg1.WindowX0 = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	9300      	str	r3, [sp, #0]
  pLayerCfg1.WindowX1 = 480;
 8013bfe:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8013c02:	9101      	str	r1, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 8013c04:	9302      	str	r3, [sp, #8]
  pLayerCfg1.WindowY1 = 272;
 8013c06:	f44f 7288 	mov.w	r2, #272	; 0x110
 8013c0a:	9203      	str	r2, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8013c0c:	2002      	movs	r0, #2
 8013c0e:	9004      	str	r0, [sp, #16]
  pLayerCfg1.Alpha = 0;
 8013c10:	9305      	str	r3, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 8013c12:	9306      	str	r3, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8013c14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013c18:	9007      	str	r0, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8013c1a:	2005      	movs	r0, #5
 8013c1c:	9008      	str	r0, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 8013c1e:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 8013c20:	910a      	str	r1, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 8013c22:	920b      	str	r2, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8013c24:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8013c28:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8013c2c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8013c30:	2201      	movs	r2, #1
 8013c32:	4669      	mov	r1, sp
 8013c34:	4807      	ldr	r0, [pc, #28]	; (8013c54 <MX_LTDC_Init+0x100>)
 8013c36:	f7ef ffb1 	bl	8003b9c <HAL_LTDC_ConfigLayer>
 8013c3a:	b938      	cbnz	r0, 8013c4c <MX_LTDC_Init+0xf8>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8013c3c:	b01a      	add	sp, #104	; 0x68
 8013c3e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8013c40:	f000 fa24 	bl	801408c <Error_Handler>
 8013c44:	e7b9      	b.n	8013bba <MX_LTDC_Init+0x66>
    Error_Handler();
 8013c46:	f000 fa21 	bl	801408c <Error_Handler>
 8013c4a:	e7d6      	b.n	8013bfa <MX_LTDC_Init+0xa6>
    Error_Handler();
 8013c4c:	f000 fa1e 	bl	801408c <Error_Handler>
}
 8013c50:	e7f4      	b.n	8013c3c <MX_LTDC_Init+0xe8>
 8013c52:	bf00      	nop
 8013c54:	200006f4 	.word	0x200006f4
 8013c58:	40016800 	.word	0x40016800

08013c5c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8013c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c5e:	b0ad      	sub	sp, #180	; 0xb4
 8013c60:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013c62:	2100      	movs	r1, #0
 8013c64:	9127      	str	r1, [sp, #156]	; 0x9c
 8013c66:	9128      	str	r1, [sp, #160]	; 0xa0
 8013c68:	9129      	str	r1, [sp, #164]	; 0xa4
 8013c6a:	912a      	str	r1, [sp, #168]	; 0xa8
 8013c6c:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013c6e:	2284      	movs	r2, #132	; 0x84
 8013c70:	a806      	add	r0, sp, #24
 8013c72:	f005 f9af 	bl	8018fd4 <memset>
  if(ltdcHandle->Instance==LTDC)
 8013c76:	6822      	ldr	r2, [r4, #0]
 8013c78:	4b46      	ldr	r3, [pc, #280]	; (8013d94 <HAL_LTDC_MspInit+0x138>)
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d001      	beq.n	8013c82 <HAL_LTDC_MspInit+0x26>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8013c7e:	b02d      	add	sp, #180	; 0xb4
 8013c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8013c82:	2308      	movs	r3, #8
 8013c84:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 240;
 8013c86:	23f0      	movs	r3, #240	; 0xf0
 8013c88:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 6;
 8013c8a:	2306      	movs	r3, #6
 8013c8c:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8013c8e:	2302      	movs	r3, #2
 8013c90:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8013c92:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8013c94:	2301      	movs	r3, #1
 8013c96:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8013c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013c9c:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013c9e:	a806      	add	r0, sp, #24
 8013ca0:	f7f0 fcce 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	d171      	bne.n	8013d8c <HAL_LTDC_MspInit+0x130>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8013ca8:	4b3b      	ldr	r3, [pc, #236]	; (8013d98 <HAL_LTDC_MspInit+0x13c>)
 8013caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013cb0:	645a      	str	r2, [r3, #68]	; 0x44
 8013cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cb4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8013cb8:	9200      	str	r2, [sp, #0]
 8013cba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8013cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cbe:	f042 0210 	orr.w	r2, r2, #16
 8013cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8013cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cc6:	f002 0210 	and.w	r2, r2, #16
 8013cca:	9201      	str	r2, [sp, #4]
 8013ccc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8013cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8013cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cd8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8013cdc:	9202      	str	r2, [sp, #8]
 8013cde:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8013ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8013ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cea:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8013cee:	9203      	str	r2, [sp, #12]
 8013cf0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8013cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cfc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8013d00:	9204      	str	r2, [sp, #16]
 8013d02:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8013d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8013d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d12:	9305      	str	r3, [sp, #20]
 8013d14:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8013d16:	2310      	movs	r3, #16
 8013d18:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d1a:	2602      	movs	r6, #2
 8013d1c:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d1e:	2500      	movs	r5, #0
 8013d20:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d22:	2403      	movs	r4, #3
 8013d24:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8013d26:	270e      	movs	r7, #14
 8013d28:	972b      	str	r7, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013d2a:	a927      	add	r1, sp, #156	; 0x9c
 8013d2c:	481b      	ldr	r0, [pc, #108]	; (8013d9c <HAL_LTDC_MspInit+0x140>)
 8013d2e:	f7ee f8ef 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8013d32:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8013d36:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d38:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d3a:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d3c:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8013d3e:	972b      	str	r7, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8013d40:	a927      	add	r1, sp, #156	; 0x9c
 8013d42:	4817      	ldr	r0, [pc, #92]	; (8013da0 <HAL_LTDC_MspInit+0x144>)
 8013d44:	f7ee f8e4 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8013d48:	23f7      	movs	r3, #247	; 0xf7
 8013d4a:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d4c:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d4e:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d50:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8013d52:	972b      	str	r7, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8013d54:	a927      	add	r1, sp, #156	; 0x9c
 8013d56:	4813      	ldr	r0, [pc, #76]	; (8013da4 <HAL_LTDC_MspInit+0x148>)
 8013d58:	f7ee f8da 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8013d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d60:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d62:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d64:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d66:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8013d68:	2309      	movs	r3, #9
 8013d6a:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013d6c:	a927      	add	r1, sp, #156	; 0x9c
 8013d6e:	480e      	ldr	r0, [pc, #56]	; (8013da8 <HAL_LTDC_MspInit+0x14c>)
 8013d70:	f7ee f8ce 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8013d74:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8013d78:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d7a:	9628      	str	r6, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d7c:	9529      	str	r5, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d7e:	942a      	str	r4, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8013d80:	972b      	str	r7, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013d82:	a927      	add	r1, sp, #156	; 0x9c
 8013d84:	4809      	ldr	r0, [pc, #36]	; (8013dac <HAL_LTDC_MspInit+0x150>)
 8013d86:	f7ee f8c3 	bl	8001f10 <HAL_GPIO_Init>
}
 8013d8a:	e778      	b.n	8013c7e <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 8013d8c:	f000 f97e 	bl	801408c <Error_Handler>
 8013d90:	e78a      	b.n	8013ca8 <HAL_LTDC_MspInit+0x4c>
 8013d92:	bf00      	nop
 8013d94:	40016800 	.word	0x40016800
 8013d98:	40023800 	.word	0x40023800
 8013d9c:	40021000 	.word	0x40021000
 8013da0:	40022400 	.word	0x40022400
 8013da4:	40022800 	.word	0x40022800
 8013da8:	40021800 	.word	0x40021800
 8013dac:	40022000 	.word	0x40022000

08013db0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8013db0:	b508      	push	{r3, lr}
  /* Display On */
  __HAL_LTDC_ENABLE(&hltdc);
 8013db2:	4b09      	ldr	r3, [pc, #36]	; (8013dd8 <BSP_LCD_DisplayOn+0x28>)
 8013db4:	681a      	ldr	r2, [r3, #0]
 8013db6:	6993      	ldr	r3, [r2, #24]
 8013db8:	f043 0301 	orr.w	r3, r3, #1
 8013dbc:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013dc4:	4805      	ldr	r0, [pc, #20]	; (8013ddc <BSP_LCD_DisplayOn+0x2c>)
 8013dc6:	f7ee fa37 	bl	8002238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8013dca:	2201      	movs	r2, #1
 8013dcc:	2108      	movs	r1, #8
 8013dce:	4804      	ldr	r0, [pc, #16]	; (8013de0 <BSP_LCD_DisplayOn+0x30>)
 8013dd0:	f7ee fa32 	bl	8002238 <HAL_GPIO_WritePin>
}
 8013dd4:	bd08      	pop	{r3, pc}
 8013dd6:	bf00      	nop
 8013dd8:	200006f4 	.word	0x200006f4
 8013ddc:	40022000 	.word	0x40022000
 8013de0:	40022800 	.word	0x40022800

08013de4 <BSP_LCD_DisplayOff>:
/**
  * @brief  Disables the display.
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 8013de4:	b508      	push	{r3, lr}
  /* Display Off */
  __HAL_LTDC_DISABLE(&hltdc);
 8013de6:	4b09      	ldr	r3, [pc, #36]	; (8013e0c <BSP_LCD_DisplayOff+0x28>)
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	6993      	ldr	r3, [r2, #24]
 8013dec:	f023 0301 	bic.w	r3, r3, #1
 8013df0:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
 8013df2:	2200      	movs	r2, #0
 8013df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013df8:	4805      	ldr	r0, [pc, #20]	; (8013e10 <BSP_LCD_DisplayOff+0x2c>)
 8013dfa:	f7ee fa1d 	bl	8002238 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
 8013dfe:	2200      	movs	r2, #0
 8013e00:	2108      	movs	r1, #8
 8013e02:	4804      	ldr	r0, [pc, #16]	; (8013e14 <BSP_LCD_DisplayOff+0x30>)
 8013e04:	f7ee fa18 	bl	8002238 <HAL_GPIO_WritePin>
}
 8013e08:	bd08      	pop	{r3, pc}
 8013e0a:	bf00      	nop
 8013e0c:	200006f4 	.word	0x200006f4
 8013e10:	40022000 	.word	0x40022000
 8013e14:	40022800 	.word	0x40022800

08013e18 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8013e18:	b508      	push	{r3, lr}

  /* Disables the MPU */
  HAL_MPU_Disable();
 8013e1a:	f7ed fad7 	bl	80013cc <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8013e1e:	2004      	movs	r0, #4
 8013e20:	f7ed fae2 	bl	80013e8 <HAL_MPU_Enable>

}
 8013e24:	bd08      	pop	{r3, pc}
	...

08013e28 <scan_files>:
{
 8013e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e2c:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    TCHAR relative_path[255] = {0};
 8013e30:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8013e34:	2100      	movs	r1, #0
 8013e36:	4668      	mov	r0, sp
 8013e38:	f005 f8cc 	bl	8018fd4 <memset>
    UINT folders = 0;
 8013e3c:	2400      	movs	r4, #0
    	res = f_opendir(&folder, L"/PIONEER/USBANLZ");	/* Open the directory */
 8013e3e:	4969      	ldr	r1, [pc, #420]	; (8013fe4 <scan_files+0x1bc>)
 8013e40:	a880      	add	r0, sp, #512	; 0x200
 8013e42:	f7f7 fc25 	bl	800b690 <f_opendir>
 8013e46:	4b68      	ldr	r3, [pc, #416]	; (8013fe8 <scan_files+0x1c0>)
 8013e48:	7018      	strb	r0, [r3, #0]
    	i = 0;
 8013e4a:	2500      	movs	r5, #0
    		res = f_readdir(&folder, &fno);	/* Read a directory item */
 8013e4c:	4967      	ldr	r1, [pc, #412]	; (8013fec <scan_files+0x1c4>)
 8013e4e:	a880      	add	r0, sp, #512	; 0x200
 8013e50:	f7f7 fc80 	bl	800b754 <f_readdir>
 8013e54:	4b64      	ldr	r3, [pc, #400]	; (8013fe8 <scan_files+0x1c0>)
 8013e56:	7018      	strb	r0, [r3, #0]
    	while(i++ < folders);
 8013e58:	42a5      	cmp	r5, r4
 8013e5a:	f105 0501 	add.w	r5, r5, #1
 8013e5e:	d3f5      	bcc.n	8013e4c <scan_files+0x24>
    	if (res != FR_OK || fno.fname[0] == 0) {
 8013e60:	2800      	cmp	r0, #0
 8013e62:	f040 80b6 	bne.w	8013fd2 <scan_files+0x1aa>
 8013e66:	4b61      	ldr	r3, [pc, #388]	; (8013fec <scan_files+0x1c4>)
 8013e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	f000 80b1 	beq.w	8013fd2 <scan_files+0x1aa>
    	if (fno.fattrib & AM_DIR) {	/* It is a directory */
 8013e70:	4b5e      	ldr	r3, [pc, #376]	; (8013fec <scan_files+0x1c4>)
 8013e72:	7b1b      	ldrb	r3, [r3, #12]
 8013e74:	f013 0f10 	tst.w	r3, #16
 8013e78:	d0e1      	beq.n	8013e3e <scan_files+0x16>
    		folders++;
 8013e7a:	3401      	adds	r4, #1
    		wcscpy(new_path, L"/PIONEER/USBANLZ/");
 8013e7c:	4d5c      	ldr	r5, [pc, #368]	; (8013ff0 <scan_files+0x1c8>)
 8013e7e:	495d      	ldr	r1, [pc, #372]	; (8013ff4 <scan_files+0x1cc>)
 8013e80:	4628      	mov	r0, r5
 8013e82:	f005 f9f2 	bl	801926a <wcscpy>
    		wcscat(new_path, fno.fname);
 8013e86:	495c      	ldr	r1, [pc, #368]	; (8013ff8 <scan_files+0x1d0>)
 8013e88:	4628      	mov	r0, r5
 8013e8a:	f005 f9de 	bl	801924a <wcscat>
    	  	for(i = 0; i < 255; i++) relative_path[i] = 0;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	e003      	b.n	8013e9a <scan_files+0x72>
 8013e92:	2200      	movs	r2, #0
 8013e94:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
 8013e98:	3301      	adds	r3, #1
 8013e9a:	2bfe      	cmp	r3, #254	; 0xfe
 8013e9c:	d9f9      	bls.n	8013e92 <scan_files+0x6a>
    		wcscpy(relative_path, fno.fname);
 8013e9e:	4956      	ldr	r1, [pc, #344]	; (8013ff8 <scan_files+0x1d0>)
 8013ea0:	4668      	mov	r0, sp
 8013ea2:	f005 f9e2 	bl	801926a <wcscpy>
    		wcscpy(old_path, new_path);
 8013ea6:	4952      	ldr	r1, [pc, #328]	; (8013ff0 <scan_files+0x1c8>)
 8013ea8:	4854      	ldr	r0, [pc, #336]	; (8013ffc <scan_files+0x1d4>)
 8013eaa:	f005 f9de 	bl	801926a <wcscpy>
    		f_closedir(&folder);
 8013eae:	a880      	add	r0, sp, #512	; 0x200
 8013eb0:	f7f7 fc46 	bl	800b740 <f_closedir>
    		subfolders = 0;
 8013eb4:	2500      	movs	r5, #0
 8013eb6:	e01e      	b.n	8013ef6 <scan_files+0xce>
    			for(i = 0; i < 255; i++) new_path[i] = 0;
 8013eb8:	4a4d      	ldr	r2, [pc, #308]	; (8013ff0 <scan_files+0x1c8>)
 8013eba:	2100      	movs	r1, #0
 8013ebc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	2bfe      	cmp	r3, #254	; 0xfe
 8013ec4:	d9f8      	bls.n	8013eb8 <scan_files+0x90>
    			wcscpy(new_path, old_path);
 8013ec6:	494d      	ldr	r1, [pc, #308]	; (8013ffc <scan_files+0x1d4>)
 8013ec8:	4849      	ldr	r0, [pc, #292]	; (8013ff0 <scan_files+0x1c8>)
 8013eca:	f005 f9ce 	bl	801926a <wcscpy>
    			i = 0;
 8013ece:	2600      	movs	r6, #0
    				res = f_readdir(&folder, &fno);	/* Read a directory item */
 8013ed0:	4946      	ldr	r1, [pc, #280]	; (8013fec <scan_files+0x1c4>)
 8013ed2:	a880      	add	r0, sp, #512	; 0x200
 8013ed4:	f7f7 fc3e 	bl	800b754 <f_readdir>
 8013ed8:	4b43      	ldr	r3, [pc, #268]	; (8013fe8 <scan_files+0x1c0>)
 8013eda:	7018      	strb	r0, [r3, #0]
    			while(i++ < subfolders);
 8013edc:	42ae      	cmp	r6, r5
 8013ede:	f106 0601 	add.w	r6, r6, #1
 8013ee2:	d3f5      	bcc.n	8013ed0 <scan_files+0xa8>
    			if (res != FR_OK || fno.fname[0] == 0) {
 8013ee4:	b978      	cbnz	r0, 8013f06 <scan_files+0xde>
 8013ee6:	4b41      	ldr	r3, [pc, #260]	; (8013fec <scan_files+0x1c4>)
 8013ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013eea:	b163      	cbz	r3, 8013f06 <scan_files+0xde>
    			if (fno.fattrib & AM_DIR) {	/* It is a directory */
 8013eec:	4b3f      	ldr	r3, [pc, #252]	; (8013fec <scan_files+0x1c4>)
 8013eee:	7b1b      	ldrb	r3, [r3, #12]
 8013ef0:	f013 0f10 	tst.w	r3, #16
 8013ef4:	d10b      	bne.n	8013f0e <scan_files+0xe6>
    			res = f_opendir(&folder, old_path);
 8013ef6:	4941      	ldr	r1, [pc, #260]	; (8013ffc <scan_files+0x1d4>)
 8013ef8:	a880      	add	r0, sp, #512	; 0x200
 8013efa:	f7f7 fbc9 	bl	800b690 <f_opendir>
 8013efe:	4b3a      	ldr	r3, [pc, #232]	; (8013fe8 <scan_files+0x1c0>)
 8013f00:	7018      	strb	r0, [r3, #0]
    			for(i = 0; i < 255; i++) new_path[i] = 0;
 8013f02:	2300      	movs	r3, #0
 8013f04:	e7dd      	b.n	8013ec2 <scan_files+0x9a>
    				f_closedir(&folder);
 8013f06:	a880      	add	r0, sp, #512	; 0x200
 8013f08:	f7f7 fc1a 	bl	800b740 <f_closedir>
    				break;  /* Break on error or end of dir */
 8013f0c:	e797      	b.n	8013e3e <scan_files+0x16>
    				subfolders++;
 8013f0e:	3501      	adds	r5, #1
    				wcscat(new_path, L"/");
 8013f10:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8014008 <scan_files+0x1e0>
 8013f14:	4e36      	ldr	r6, [pc, #216]	; (8013ff0 <scan_files+0x1c8>)
 8013f16:	4641      	mov	r1, r8
 8013f18:	4630      	mov	r0, r6
 8013f1a:	f005 f996 	bl	801924a <wcscat>
    				wcscat(new_path, fno.fname);
 8013f1e:	4f36      	ldr	r7, [pc, #216]	; (8013ff8 <scan_files+0x1d0>)
 8013f20:	4639      	mov	r1, r7
 8013f22:	4630      	mov	r0, r6
 8013f24:	f005 f991 	bl	801924a <wcscat>
    				wcscat(relative_path, L"/");
 8013f28:	4641      	mov	r1, r8
 8013f2a:	4668      	mov	r0, sp
 8013f2c:	f005 f98d 	bl	801924a <wcscat>
    				wcscat(relative_path, fno.fname);
 8013f30:	4639      	mov	r1, r7
 8013f32:	4668      	mov	r0, sp
 8013f34:	f005 f989 	bl	801924a <wcscat>
    				f_closedir(&folder);
 8013f38:	a880      	add	r0, sp, #512	; 0x200
 8013f3a:	f7f7 fc01 	bl	800b740 <f_closedir>
    				res = f_opendir(&folder, new_path);
 8013f3e:	4631      	mov	r1, r6
 8013f40:	a880      	add	r0, sp, #512	; 0x200
 8013f42:	f7f7 fba5 	bl	800b690 <f_opendir>
 8013f46:	4a28      	ldr	r2, [pc, #160]	; (8013fe8 <scan_files+0x1c0>)
 8013f48:	7010      	strb	r0, [r2, #0]
    				if(res == FR_OK) {
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d1d3      	bne.n	8013ef6 <scan_files+0xce>
    					res = f_readdir(&folder, &fno);
 8013f4e:	f1a7 0628 	sub.w	r6, r7, #40	; 0x28
 8013f52:	4631      	mov	r1, r6
 8013f54:	a880      	add	r0, sp, #512	; 0x200
 8013f56:	f7f7 fbfd 	bl	800b754 <f_readdir>
 8013f5a:	4b23      	ldr	r3, [pc, #140]	; (8013fe8 <scan_files+0x1c0>)
 8013f5c:	7018      	strb	r0, [r3, #0]
    					if (!(fno.fattrib & AM_DIR)) {
 8013f5e:	7b33      	ldrb	r3, [r6, #12]
 8013f60:	f013 0f10 	tst.w	r3, #16
 8013f64:	d1c7      	bne.n	8013ef6 <scan_files+0xce>
    						for(i=0; i<255; i++) TrackPaths[Total_tracks][i] = ff_convert(new_path[i], 0);
 8013f66:	2600      	movs	r6, #0
 8013f68:	e00d      	b.n	8013f86 <scan_files+0x15e>
 8013f6a:	2100      	movs	r1, #0
 8013f6c:	4b20      	ldr	r3, [pc, #128]	; (8013ff0 <scan_files+0x1c8>)
 8013f6e:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 8013f72:	f7f7 fc47 	bl	800b804 <ff_convert>
 8013f76:	4b22      	ldr	r3, [pc, #136]	; (8014000 <scan_files+0x1d8>)
 8013f78:	881b      	ldrh	r3, [r3, #0]
 8013f7a:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8013f7e:	4a21      	ldr	r2, [pc, #132]	; (8014004 <scan_files+0x1dc>)
 8013f80:	4413      	add	r3, r2
 8013f82:	5598      	strb	r0, [r3, r6]
 8013f84:	3601      	adds	r6, #1
 8013f86:	2efe      	cmp	r6, #254	; 0xfe
 8013f88:	d9ef      	bls.n	8013f6a <scan_files+0x142>
    						wcscat(new_path, L"/");
 8013f8a:	4e19      	ldr	r6, [pc, #100]	; (8013ff0 <scan_files+0x1c8>)
 8013f8c:	491e      	ldr	r1, [pc, #120]	; (8014008 <scan_files+0x1e0>)
 8013f8e:	4630      	mov	r0, r6
 8013f90:	f005 f95b 	bl	801924a <wcscat>
    						wcscat(new_path, fno.fname);
 8013f94:	4918      	ldr	r1, [pc, #96]	; (8013ff8 <scan_files+0x1d0>)
 8013f96:	4630      	mov	r0, r6
 8013f98:	f005 f957 	bl	801924a <wcscat>
    						GetFileName(new_path);
 8013f9c:	4630      	mov	r0, r6
 8013f9e:	f001 fc2f 	bl	8015800 <GetFileName>
    						for(i = 0; i < 255; i++) TrackTable[Total_tracks][i] = rekordbox.file[i];
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	e00b      	b.n	8013fbe <scan_files+0x196>
 8013fa6:	4a16      	ldr	r2, [pc, #88]	; (8014000 <scan_files+0x1d8>)
 8013fa8:	8812      	ldrh	r2, [r2, #0]
 8013faa:	4918      	ldr	r1, [pc, #96]	; (801400c <scan_files+0x1e4>)
 8013fac:	4419      	add	r1, r3
 8013fae:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
 8013fb2:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8013fb6:	4916      	ldr	r1, [pc, #88]	; (8014010 <scan_files+0x1e8>)
 8013fb8:	440a      	add	r2, r1
 8013fba:	54d0      	strb	r0, [r2, r3]
 8013fbc:	3301      	adds	r3, #1
 8013fbe:	2bfe      	cmp	r3, #254	; 0xfe
 8013fc0:	d9f1      	bls.n	8013fa6 <scan_files+0x17e>
    						Total_tracks++;
 8013fc2:	4a0f      	ldr	r2, [pc, #60]	; (8014000 <scan_files+0x1d8>)
 8013fc4:	8813      	ldrh	r3, [r2, #0]
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	8013      	strh	r3, [r2, #0]
    						f_closedir(&folder);
 8013fca:	a880      	add	r0, sp, #512	; 0x200
 8013fcc:	f7f7 fbb8 	bl	800b740 <f_closedir>
 8013fd0:	e791      	b.n	8013ef6 <scan_files+0xce>
    		f_closedir(&folder);
 8013fd2:	a880      	add	r0, sp, #512	; 0x200
 8013fd4:	f7f7 fbb4 	bl	800b740 <f_closedir>
    return res;
 8013fd8:	4b03      	ldr	r3, [pc, #12]	; (8013fe8 <scan_files+0x1c0>)
 8013fda:	7818      	ldrb	r0, [r3, #0]
}
 8013fdc:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
 8013fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fe4:	0801e8b4 	.word	0x0801e8b4
 8013fe8:	2000eb92 	.word	0x2000eb92
 8013fec:	2000e3d0 	.word	0x2000e3d0
 8013ff0:	2000e794 	.word	0x2000e794
 8013ff4:	0801e8f8 	.word	0x0801e8f8
 8013ff8:	2000e3f8 	.word	0x2000e3f8
 8013ffc:	2000e994 	.word	0x2000e994
 8014000:	20001c30 	.word	0x20001c30
 8014004:	20001c34 	.word	0x20001c34
 8014008:	0801e938 	.word	0x0801e938
 801400c:	20014618 	.word	0x20014618
 8014010:	20007fd0 	.word	0x20007fd0

08014014 <find_file>:
{
 8014014:	b510      	push	{r4, lr}
 8014016:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    TCHAR path[255] = {0};
 801401a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 801401e:	2100      	movs	r1, #0
 8014020:	4668      	mov	r0, sp
 8014022:	f004 ffd7 	bl	8018fd4 <memset>
    for(int i=0; i<255; i++) path[i] = ff_convert(TrackPaths[Track_number][i], 1);
 8014026:	2400      	movs	r4, #0
 8014028:	e00c      	b.n	8014044 <find_file+0x30>
 801402a:	4b13      	ldr	r3, [pc, #76]	; (8014078 <find_file+0x64>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8014032:	4a12      	ldr	r2, [pc, #72]	; (801407c <find_file+0x68>)
 8014034:	4413      	add	r3, r2
 8014036:	2101      	movs	r1, #1
 8014038:	5d18      	ldrb	r0, [r3, r4]
 801403a:	f7f7 fbe3 	bl	800b804 <ff_convert>
 801403e:	f82d 0014 	strh.w	r0, [sp, r4, lsl #1]
 8014042:	3401      	adds	r4, #1
 8014044:	2cfe      	cmp	r4, #254	; 0xfe
 8014046:	ddf0      	ble.n	801402a <find_file+0x16>
    wcscpy(new_path, path);
 8014048:	4c0d      	ldr	r4, [pc, #52]	; (8014080 <find_file+0x6c>)
 801404a:	4669      	mov	r1, sp
 801404c:	4620      	mov	r0, r4
 801404e:	f005 f90c 	bl	801926a <wcscpy>
	res = f_opendir(&folder, new_path);
 8014052:	4621      	mov	r1, r4
 8014054:	a880      	add	r0, sp, #512	; 0x200
 8014056:	f7f7 fb1b 	bl	800b690 <f_opendir>
 801405a:	4b0a      	ldr	r3, [pc, #40]	; (8014084 <find_file+0x70>)
 801405c:	7018      	strb	r0, [r3, #0]
	if(res == FR_OK) {
 801405e:	b120      	cbz	r0, 801406a <find_file+0x56>
}
 8014060:	4b08      	ldr	r3, [pc, #32]	; (8014084 <find_file+0x70>)
 8014062:	7818      	ldrb	r0, [r3, #0]
 8014064:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
 8014068:	bd10      	pop	{r4, pc}
		res = f_readdir(&folder, &fno);
 801406a:	4907      	ldr	r1, [pc, #28]	; (8014088 <find_file+0x74>)
 801406c:	a880      	add	r0, sp, #512	; 0x200
 801406e:	f7f7 fb71 	bl	800b754 <f_readdir>
 8014072:	4b04      	ldr	r3, [pc, #16]	; (8014084 <find_file+0x70>)
 8014074:	7018      	strb	r0, [r3, #0]
		if (!(fno.fattrib & AM_DIR)) {
 8014076:	e7f3      	b.n	8014060 <find_file+0x4c>
 8014078:	2000e36c 	.word	0x2000e36c
 801407c:	20001c34 	.word	0x20001c34
 8014080:	2000e794 	.word	0x2000e794
 8014084:	2000eb92 	.word	0x2000eb92
 8014088:	2000e3d0 	.word	0x2000e3d0

0801408c <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 801408c:	e7fe      	b.n	801408c <Error_Handler>
	...

08014090 <SystemClock_Config>:
{
 8014090:	b500      	push	{lr}
 8014092:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014094:	2230      	movs	r2, #48	; 0x30
 8014096:	2100      	movs	r1, #0
 8014098:	a808      	add	r0, sp, #32
 801409a:	f004 ff9b 	bl	8018fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801409e:	2300      	movs	r3, #0
 80140a0:	9303      	str	r3, [sp, #12]
 80140a2:	9304      	str	r3, [sp, #16]
 80140a4:	9305      	str	r3, [sp, #20]
 80140a6:	9306      	str	r3, [sp, #24]
 80140a8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80140aa:	4b23      	ldr	r3, [pc, #140]	; (8014138 <SystemClock_Config+0xa8>)
 80140ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80140ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80140b2:	641a      	str	r2, [r3, #64]	; 0x40
 80140b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80140ba:	9301      	str	r3, [sp, #4]
 80140bc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80140be:	4b1f      	ldr	r3, [pc, #124]	; (801413c <SystemClock_Config+0xac>)
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80140c6:	601a      	str	r2, [r3, #0]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80140ce:	9302      	str	r3, [sp, #8]
 80140d0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80140d2:	2301      	movs	r3, #1
 80140d4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80140d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80140da:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80140dc:	2302      	movs	r3, #2
 80140de:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80140e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80140e4:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80140e6:	2219      	movs	r2, #25
 80140e8:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 80140ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80140ee:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80140f0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80140f2:	2308      	movs	r3, #8
 80140f4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80140f6:	a808      	add	r0, sp, #32
 80140f8:	f7ef fec6 	bl	8003e88 <HAL_RCC_OscConfig>
 80140fc:	b9b0      	cbnz	r0, 801412c <SystemClock_Config+0x9c>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80140fe:	f7ef fe85 	bl	8003e0c <HAL_PWREx_EnableOverDrive>
 8014102:	b9a8      	cbnz	r0, 8014130 <SystemClock_Config+0xa0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014104:	230f      	movs	r3, #15
 8014106:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014108:	2302      	movs	r3, #2
 801410a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801410c:	2300      	movs	r3, #0
 801410e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8014110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8014114:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8014116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801411a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 801411c:	2106      	movs	r1, #6
 801411e:	a803      	add	r0, sp, #12
 8014120:	f7f0 f97a 	bl	8004418 <HAL_RCC_ClockConfig>
 8014124:	b930      	cbnz	r0, 8014134 <SystemClock_Config+0xa4>
}
 8014126:	b015      	add	sp, #84	; 0x54
 8014128:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801412c:	f7ff ffae 	bl	801408c <Error_Handler>
    Error_Handler();
 8014130:	f7ff ffac 	bl	801408c <Error_Handler>
    Error_Handler();
 8014134:	f7ff ffaa 	bl	801408c <Error_Handler>
 8014138:	40023800 	.word	0x40023800
 801413c:	40007000 	.word	0x40007000

08014140 <main>:
{
 8014140:	b508      	push	{r3, lr}
  MPU_Config();
 8014142:	f7ff fe69 	bl	8013e18 <MPU_Config>
  __ASM volatile ("dsb 0xF":::"memory");
 8014146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801414a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 801414e:	4bb7      	ldr	r3, [pc, #732]	; (801442c <main+0x2ec>)
 8014150:	2100      	movs	r1, #0
 8014152:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8014156:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801415a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 801415e:	695a      	ldr	r2, [r3, #20]
 8014160:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8014164:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8014166:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801416a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801416e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8014172:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8014176:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801417a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 801417e:	e000      	b.n	8014182 <main+0x42>
    } while(sets-- != 0U);
 8014180:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8014182:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8014186:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801418a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 801418e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8014192:	49a6      	ldr	r1, [pc, #664]	; (801442c <main+0x2ec>)
 8014194:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8014198:	4613      	mov	r3, r2
 801419a:	3a01      	subs	r2, #1
 801419c:	2b00      	cmp	r3, #0
 801419e:	d1f2      	bne.n	8014186 <main+0x46>
    } while(sets-- != 0U);
 80141a0:	1e43      	subs	r3, r0, #1
 80141a2:	2800      	cmp	r0, #0
 80141a4:	d1ec      	bne.n	8014180 <main+0x40>
 80141a6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80141aa:	694b      	ldr	r3, [r1, #20]
 80141ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80141b0:	614b      	str	r3, [r1, #20]
 80141b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80141b6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80141ba:	f7ed f825 	bl	8001208 <HAL_Init>
  SystemClock_Config();
 80141be:	f7ff ff67 	bl	8014090 <SystemClock_Config>
  MX_GPIO_Init();
 80141c2:	f7ff fb03 	bl	80137cc <MX_GPIO_Init>
  MX_DMA_Init();
 80141c6:	f7fe ffe3 	bl	8013190 <MX_DMA_Init>
  MX_LTDC_Init();
 80141ca:	f7ff fcc3 	bl	8013b54 <MX_LTDC_Init>
  MX_FMC_Init();
 80141ce:	f7ff f91b 	bl	8013408 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80141d2:	f001 fcdd 	bl	8015b90 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80141d6:	f7ff f82d 	bl	8013234 <MX_FATFS_Init>
  MX_DMA2D_Init();
 80141da:	f7fe fff3 	bl	80131c4 <MX_DMA2D_Init>
  MX_SAI2_Init();
 80141de:	f001 fbb7 	bl	8015950 <MX_SAI2_Init>
  MX_I2C3_Init();
 80141e2:	f7ff fc45 	bl	8013a70 <MX_I2C3_Init>
  MX_TIM4_Init();
 80141e6:	f003 fa9b 	bl	8017720 <MX_TIM4_Init>
  MX_TIM6_Init();
 80141ea:	f003 fb0d 	bl	8017808 <MX_TIM6_Init>
  MX_TIM7_Init();
 80141ee:	f003 fb35 	bl	801785c <MX_TIM7_Init>
  MX_TIM8_Init();
 80141f2:	f003 fb5d 	bl	80178b0 <MX_TIM8_Init>
  MX_SPI2_Init();
 80141f6:	f001 fd3b 	bl	8015c70 <MX_SPI2_Init>
  MX_TIM5_Init();
 80141fa:	f003 facb 	bl	8017794 <MX_TIM5_Init>
  MX_TIM9_Init();
 80141fe:	f003 fb93 	bl	8017928 <MX_TIM9_Init>
  MX_USB_HOST_Init();
 8014202:	f003 fc99 	bl	8017b38 <MX_USB_HOST_Init>
  SDRAM_Init(); // MT48LC4M32B2B5-6A SDRAM initialization
 8014206:	f7ff f89f 	bl	8013348 <SDRAM_Init>
  BSP_LCD_DisplayOff();
 801420a:	f7ff fdeb 	bl	8013de4 <BSP_LCD_DisplayOff>
  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_0, 0); // set layer 0 framebuffer address
 801420e:	4c88      	ldr	r4, [pc, #544]	; (8014430 <main+0x2f0>)
 8014210:	2200      	movs	r2, #0
 8014212:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014216:	4620      	mov	r0, r4
 8014218:	f7ef fd6e 	bl	8003cf8 <HAL_LTDC_SetAddress>
  HAL_LTDC_SetAddress(&hltdc, LCD_FB_START_ADDRESS_1, 1); // set layer 1 framebuffer address
 801421c:	2201      	movs	r2, #1
 801421e:	4985      	ldr	r1, [pc, #532]	; (8014434 <main+0x2f4>)
 8014220:	4620      	mov	r0, r4
 8014222:	f7ef fd69 	bl	8003cf8 <HAL_LTDC_SetAddress>
  ClearLayer(); // clear framebuffer 0
 8014226:	f7fc fc3f 	bl	8010aa8 <ClearLayer>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 0, ActiveLayer++);
 801422a:	4d83      	ldr	r5, [pc, #524]	; (8014438 <main+0x2f8>)
 801422c:	782a      	ldrb	r2, [r5, #0]
 801422e:	1c53      	adds	r3, r2, #1
 8014230:	702b      	strb	r3, [r5, #0]
 8014232:	2100      	movs	r1, #0
 8014234:	4620      	mov	r0, r4
 8014236:	f7ef fdb5 	bl	8003da4 <HAL_LTDC_SetAlpha_NoReload>
  HAL_LTDC_SetAlpha_NoReload(&hltdc, 255, ActiveLayer--);
 801423a:	782a      	ldrb	r2, [r5, #0]
 801423c:	1e53      	subs	r3, r2, #1
 801423e:	702b      	strb	r3, [r5, #0]
 8014240:	21ff      	movs	r1, #255	; 0xff
 8014242:	4620      	mov	r0, r4
 8014244:	f7ef fdae 	bl	8003da4 <HAL_LTDC_SetAlpha_NoReload>
  ChangeLayers();
 8014248:	f7fc fc54 	bl	8010af4 <ChangeLayers>
  ClearLayer(); // clear framebuffer 1
 801424c:	f7fc fc2c 	bl	8010aa8 <ClearLayer>
  HAL_TIM_Base_Start_IT(&htim4); // starft display refresh timer
 8014250:	487a      	ldr	r0, [pc, #488]	; (801443c <main+0x2fc>)
 8014252:	f7f2 fef7 	bl	8007044 <HAL_TIM_Base_Start_IT>
  if(BSP_SD_IsDetected() != SD_PRESENT) {
 8014256:	f7fc fbe9 	bl	8010a2c <BSP_SD_IsDetected>
 801425a:	2801      	cmp	r0, #1
 801425c:	d005      	beq.n	801426a <main+0x12a>
	  menu_mode = 3;
 801425e:	4b78      	ldr	r3, [pc, #480]	; (8014440 <main+0x300>)
 8014260:	2203      	movs	r2, #3
 8014262:	701a      	strb	r2, [r3, #0]
	  BSP_LCD_DisplayOn();
 8014264:	f7ff fda4 	bl	8013db0 <BSP_LCD_DisplayOn>
	  while(1);
 8014268:	e7fe      	b.n	8014268 <main+0x128>
  BSP_TS_Init(480, 272); // touchscreen initialization
 801426a:	f44f 7188 	mov.w	r1, #272	; 0x110
 801426e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8014272:	f001 ff79 	bl	8016168 <BSP_TS_Init>
  BSP_TS_ITClear();
 8014276:	f002 f8f3 	bl	8016460 <BSP_TS_ITClear>
  BSP_TS_ITConfig();
 801427a:	f001 ff9d 	bl	80161b8 <BSP_TS_ITConfig>
  f_mount(&SDFatFs, (TCHAR const*)SDPath, 0); // SD card disk mount
 801427e:	2200      	movs	r2, #0
 8014280:	4970      	ldr	r1, [pc, #448]	; (8014444 <main+0x304>)
 8014282:	4871      	ldr	r0, [pc, #452]	; (8014448 <main+0x308>)
 8014284:	f7f6 ff42 	bl	800b10c <f_mount>
  hMP3Decoder = MP3InitDecoder(); // mp3 decoder initialization
 8014288:	f7f7 fb3d 	bl	800b906 <MP3InitDecoder>
 801428c:	4b6f      	ldr	r3, [pc, #444]	; (801444c <main+0x30c>)
 801428e:	6018      	str	r0, [r3, #0]
  scan_files(); // get total track number
 8014290:	f7ff fdca 	bl	8013e28 <scan_files>
  HAL_TIM_Base_Start_IT(&htim5); // start jog speed counting timer
 8014294:	486e      	ldr	r0, [pc, #440]	; (8014450 <main+0x310>)
 8014296:	f7f2 fed5 	bl	8007044 <HAL_TIM_Base_Start_IT>
  HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 801429a:	2304      	movs	r3, #4
 801429c:	4a6d      	ldr	r2, [pc, #436]	; (8014454 <main+0x314>)
 801429e:	496e      	ldr	r1, [pc, #440]	; (8014458 <main+0x318>)
 80142a0:	486e      	ldr	r0, [pc, #440]	; (801445c <main+0x31c>)
 80142a2:	f7f2 fca9 	bl	8006bf8 <HAL_SPI_TransmitReceive_IT>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, volume, (uint32_t)(AUDIO_FREQUENCY_22K)*(1 + trak.percent));
 80142a6:	4b6e      	ldr	r3, [pc, #440]	; (8014460 <main+0x320>)
 80142a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80142ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80142b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142b4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8014464 <main+0x324>
 80142b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80142bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142c0:	ee17 2a90 	vmov	r2, s15
 80142c4:	4b68      	ldr	r3, [pc, #416]	; (8014468 <main+0x328>)
 80142c6:	7819      	ldrb	r1, [r3, #0]
 80142c8:	2002      	movs	r0, #2
 80142ca:	f001 fead 	bl	8016028 <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetVolume(0);
 80142ce:	2000      	movs	r0, #0
 80142d0:	f001 fdc0 	bl	8015e54 <BSP_AUDIO_OUT_SetVolume>
  BSP_LCD_DisplayOn();
 80142d4:	f7ff fd6c 	bl	8013db0 <BSP_LCD_DisplayOn>
 80142d8:	e03a      	b.n	8014350 <main+0x210>
	  if(display.cuemode == 1) rekordbox.autocue = 1;
 80142da:	4b64      	ldr	r3, [pc, #400]	; (801446c <main+0x32c>)
 80142dc:	2201      	movs	r2, #1
 80142de:	f883 2b90 	strb.w	r2, [r3, #2960]	; 0xb90
 80142e2:	e056      	b.n	8014392 <main+0x252>
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 80142e4:	f023 0302 	bic.w	r3, r3, #2
 80142e8:	4a5b      	ldr	r2, [pc, #364]	; (8014458 <main+0x318>)
 80142ea:	7093      	strb	r3, [r2, #2]
 80142ec:	e07a      	b.n	80143e4 <main+0x2a4>
			  PlayMp3File();
 80142ee:	f000 fa4d 	bl	801478c <PlayMp3File>
		  spi_tx[2] |= (1 << 3);
 80142f2:	4a59      	ldr	r2, [pc, #356]	; (8014458 <main+0x318>)
 80142f4:	7893      	ldrb	r3, [r2, #2]
 80142f6:	f043 0308 	orr.w	r3, r3, #8
 80142fa:	7093      	strb	r3, [r2, #2]
		  trak.state = STOPPED;
 80142fc:	4b58      	ldr	r3, [pc, #352]	; (8014460 <main+0x320>)
 80142fe:	2201      	movs	r2, #1
 8014300:	701a      	strb	r2, [r3, #0]
		  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8014302:	2002      	movs	r0, #2
 8014304:	f001 fd8c 	bl	8015e20 <BSP_AUDIO_OUT_Stop>
	  if(file_pos_wide >= rekordbox.spectrum_size) {
 8014308:	4b58      	ldr	r3, [pc, #352]	; (801446c <main+0x32c>)
 801430a:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 801430e:	4b58      	ldr	r3, [pc, #352]	; (8014470 <main+0x330>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	429a      	cmp	r2, r3
 8014314:	d803      	bhi.n	801431e <main+0x1de>
		  Track_number++;
 8014316:	4a57      	ldr	r2, [pc, #348]	; (8014474 <main+0x334>)
 8014318:	6813      	ldr	r3, [r2, #0]
 801431a:	3301      	adds	r3, #1
 801431c:	6013      	str	r3, [r2, #0]
	  file_pos_wide = 0;
 801431e:	4b54      	ldr	r3, [pc, #336]	; (8014470 <main+0x330>)
 8014320:	2200      	movs	r2, #0
 8014322:	601a      	str	r2, [r3, #0]
	  menu_mode = 4;
 8014324:	4b46      	ldr	r3, [pc, #280]	; (8014440 <main+0x300>)
 8014326:	2204      	movs	r2, #4
 8014328:	701a      	strb	r2, [r3, #0]
	  f_close(&MyFile);
 801432a:	4853      	ldr	r0, [pc, #332]	; (8014478 <main+0x338>)
 801432c:	f7f7 f852 	bl	800b3d4 <f_close>
	  f_closedir(&dir);
 8014330:	4852      	ldr	r0, [pc, #328]	; (801447c <main+0x33c>)
 8014332:	f7f7 fa05 	bl	800b740 <f_closedir>
	  if(Track_number >= Total_tracks) Track_number = 0;
 8014336:	4b52      	ldr	r3, [pc, #328]	; (8014480 <main+0x340>)
 8014338:	881b      	ldrh	r3, [r3, #0]
 801433a:	4a4e      	ldr	r2, [pc, #312]	; (8014474 <main+0x334>)
 801433c:	6812      	ldr	r2, [r2, #0]
 801433e:	4293      	cmp	r3, r2
 8014340:	dc02      	bgt.n	8014348 <main+0x208>
 8014342:	4a4c      	ldr	r2, [pc, #304]	; (8014474 <main+0x334>)
 8014344:	2100      	movs	r1, #0
 8014346:	6011      	str	r1, [r2, #0]
	  if(Track_number < 0) Track_number = Total_tracks - 1;
 8014348:	4a4a      	ldr	r2, [pc, #296]	; (8014474 <main+0x334>)
 801434a:	6812      	ldr	r2, [r2, #0]
 801434c:	2a00      	cmp	r2, #0
 801434e:	db69      	blt.n	8014424 <main+0x2e4>
	  find_file(Track_number);
 8014350:	4b48      	ldr	r3, [pc, #288]	; (8014474 <main+0x334>)
 8014352:	8818      	ldrh	r0, [r3, #0]
 8014354:	f7ff fe5e 	bl	8014014 <find_file>
	  fr = 0;
 8014358:	2300      	movs	r3, #0
 801435a:	4a4a      	ldr	r2, [pc, #296]	; (8014484 <main+0x344>)
 801435c:	8013      	strh	r3, [r2, #0]
	  sec = 0;
 801435e:	4a4a      	ldr	r2, [pc, #296]	; (8014488 <main+0x348>)
 8014360:	7013      	strb	r3, [r2, #0]
	  min = 0;
 8014362:	4a4a      	ldr	r2, [pc, #296]	; (801448c <main+0x34c>)
 8014364:	7013      	strb	r3, [r2, #0]
	  rfr = 0;
 8014366:	4a4a      	ldr	r2, [pc, #296]	; (8014490 <main+0x350>)
 8014368:	8013      	strh	r3, [r2, #0]
	  rsec = 0;
 801436a:	4a4a      	ldr	r2, [pc, #296]	; (8014494 <main+0x354>)
 801436c:	7013      	strb	r3, [r2, #0]
	  rmin = 0;
 801436e:	4a4a      	ldr	r2, [pc, #296]	; (8014498 <main+0x358>)
 8014370:	7013      	strb	r3, [r2, #0]
	  file_pos_wide = 0;
 8014372:	4a3f      	ldr	r2, [pc, #252]	; (8014470 <main+0x330>)
 8014374:	6013      	str	r3, [r2, #0]
	  position = 0;
 8014376:	4a49      	ldr	r2, [pc, #292]	; (801449c <main+0x35c>)
 8014378:	6013      	str	r3, [r2, #0]
	  rekordbox.state = 0;
 801437a:	4a3c      	ldr	r2, [pc, #240]	; (801446c <main+0x32c>)
 801437c:	f882 3b98 	strb.w	r3, [r2, #2968]	; 0xb98
	  display.loop = 0;
 8014380:	4a47      	ldr	r2, [pc, #284]	; (80144a0 <main+0x360>)
 8014382:	7413      	strb	r3, [r2, #16]
	  if(display.cuemode == 1) rekordbox.autocue = 1;
 8014384:	7893      	ldrb	r3, [r2, #2]
 8014386:	2b01      	cmp	r3, #1
 8014388:	d0a7      	beq.n	80142da <main+0x19a>
	  else rekordbox.autocue = 0;
 801438a:	4b38      	ldr	r3, [pc, #224]	; (801446c <main+0x32c>)
 801438c:	2200      	movs	r2, #0
 801438e:	f883 2b90 	strb.w	r2, [r3, #2960]	; 0xb90
	  rekordbox.currentcue = 0;
 8014392:	4d44      	ldr	r5, [pc, #272]	; (80144a4 <main+0x364>)
 8014394:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
 8014398:	2400      	movs	r4, #0
 801439a:	f8c3 4b94 	str.w	r4, [r3, #2964]	; 0xb94
	  DecodeRekordboxFiles(new_path);
 801439e:	4842      	ldr	r0, [pc, #264]	; (80144a8 <main+0x368>)
 80143a0:	f000 fba2 	bl	8014ae8 <DecodeRekordboxFiles>
	  menu_mode = 0;
 80143a4:	4b26      	ldr	r3, [pc, #152]	; (8014440 <main+0x300>)
 80143a6:	701c      	strb	r4, [r3, #0]
	  bar = 0;
 80143a8:	4b40      	ldr	r3, [pc, #256]	; (80144ac <main+0x36c>)
 80143aa:	601c      	str	r4, [r3, #0]
	  beat = 0;
 80143ac:	4b40      	ldr	r3, [pc, #256]	; (80144b0 <main+0x370>)
 80143ae:	601c      	str	r4, [r3, #0]
	  res = f_open(&MyFile, rekordbox.filename, FA_READ);
 80143b0:	2201      	movs	r2, #1
 80143b2:	4629      	mov	r1, r5
 80143b4:	4830      	ldr	r0, [pc, #192]	; (8014478 <main+0x338>)
 80143b6:	f7f6 fed7 	bl	800b168 <f_open>
 80143ba:	4b3e      	ldr	r3, [pc, #248]	; (80144b4 <main+0x374>)
 80143bc:	7018      	strb	r0, [r3, #0]
	  if(res == FR_OK)
 80143be:	2800      	cmp	r0, #0
 80143c0:	d1a2      	bne.n	8014308 <main+0x1c8>
		  trak.state = PLAYING;
 80143c2:	4b27      	ldr	r3, [pc, #156]	; (8014460 <main+0x320>)
 80143c4:	701c      	strb	r4, [r3, #0]
		  spi_tx[2] &= ~(1 << 0);
 80143c6:	4a24      	ldr	r2, [pc, #144]	; (8014458 <main+0x318>)
 80143c8:	7893      	ldrb	r3, [r2, #2]
 80143ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80143ce:	7093      	strb	r3, [r2, #2]
		  if(rekordbox.autocue == 2) spi_tx[2] &= ~(1 << 1);
 80143d0:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 80143d4:	f892 2b90 	ldrb.w	r2, [r2, #2960]	; 0xb90
 80143d8:	2a02      	cmp	r2, #2
 80143da:	d083      	beq.n	80142e4 <main+0x1a4>
		  else spi_tx[2] |= (1 << 1);
 80143dc:	f043 0302 	orr.w	r3, r3, #2
 80143e0:	4a1d      	ldr	r2, [pc, #116]	; (8014458 <main+0x318>)
 80143e2:	7093      	strb	r3, [r2, #2]
		  spi_tx[2] &= ~(1 << 3);
 80143e4:	4a1c      	ldr	r2, [pc, #112]	; (8014458 <main+0x318>)
 80143e6:	7893      	ldrb	r3, [r2, #2]
 80143e8:	f023 0308 	bic.w	r3, r3, #8
 80143ec:	7093      	strb	r3, [r2, #2]
		  if((strcmp(rekordbox.filetype, ".wav") == 0) || (strcmp(rekordbox.filetype, ".WAV") == 0)) {
 80143ee:	4932      	ldr	r1, [pc, #200]	; (80144b8 <main+0x378>)
 80143f0:	4832      	ldr	r0, [pc, #200]	; (80144bc <main+0x37c>)
 80143f2:	f7eb ff0d 	bl	8000210 <strcmp>
 80143f6:	b120      	cbz	r0, 8014402 <main+0x2c2>
 80143f8:	4931      	ldr	r1, [pc, #196]	; (80144c0 <main+0x380>)
 80143fa:	4830      	ldr	r0, [pc, #192]	; (80144bc <main+0x37c>)
 80143fc:	f7eb ff08 	bl	8000210 <strcmp>
 8014400:	b908      	cbnz	r0, 8014406 <main+0x2c6>
			  PlayWavFile();
 8014402:	f003 fe69 	bl	80180d8 <PlayWavFile>
		  if((strcmp(rekordbox.filetype, ".mp3") == 0) || (strcmp(rekordbox.filetype, ".MP3") == 0)) {
 8014406:	492f      	ldr	r1, [pc, #188]	; (80144c4 <main+0x384>)
 8014408:	482c      	ldr	r0, [pc, #176]	; (80144bc <main+0x37c>)
 801440a:	f7eb ff01 	bl	8000210 <strcmp>
 801440e:	2800      	cmp	r0, #0
 8014410:	f43f af6d 	beq.w	80142ee <main+0x1ae>
 8014414:	492c      	ldr	r1, [pc, #176]	; (80144c8 <main+0x388>)
 8014416:	4829      	ldr	r0, [pc, #164]	; (80144bc <main+0x37c>)
 8014418:	f7eb fefa 	bl	8000210 <strcmp>
 801441c:	2800      	cmp	r0, #0
 801441e:	f47f af68 	bne.w	80142f2 <main+0x1b2>
 8014422:	e764      	b.n	80142ee <main+0x1ae>
	  if(Track_number < 0) Track_number = Total_tracks - 1;
 8014424:	3b01      	subs	r3, #1
 8014426:	4a13      	ldr	r2, [pc, #76]	; (8014474 <main+0x334>)
 8014428:	6013      	str	r3, [r2, #0]
 801442a:	e791      	b.n	8014350 <main+0x210>
 801442c:	e000ed00 	.word	0xe000ed00
 8014430:	200006f4 	.word	0x200006f4
 8014434:	c007f800 	.word	0xc007f800
 8014438:	2000079c 	.word	0x2000079c
 801443c:	2001746c 	.word	0x2001746c
 8014440:	20000604 	.word	0x20000604
 8014444:	2000064c 	.word	0x2000064c
 8014448:	20001a00 	.word	0x20001a00
 801444c:	2000e5fc 	.word	0x2000e5fc
 8014450:	200174ac 	.word	0x200174ac
 8014454:	2000eb9c 	.word	0x2000eb9c
 8014458:	20000058 	.word	0x20000058
 801445c:	20017328 	.word	0x20017328
 8014460:	2000eba4 	.word	0x2000eba4
 8014464:	46ac4400 	.word	0x46ac4400
 8014468:	2000005c 	.word	0x2000005c
 801446c:	20016618 	.word	0x20016618
 8014470:	2000e3cc 	.word	0x2000e3cc
 8014474:	2000e36c 	.word	0x2000e36c
 8014478:	200017b0 	.word	0x200017b0
 801447c:	2000e378 	.word	0x2000e378
 8014480:	20001c30 	.word	0x20001c30
 8014484:	2000e5f8 	.word	0x2000e5f8
 8014488:	2000eb98 	.word	0x2000eb98
 801448c:	2000e790 	.word	0x2000e790
 8014490:	2000eb94 	.word	0x2000eb94
 8014494:	2000eb97 	.word	0x2000eb97
 8014498:	2000eb96 	.word	0x2000eb96
 801449c:	20000608 	.word	0x20000608
 80144a0:	200005e8 	.word	0x200005e8
 80144a4:	20014618 	.word	0x20014618
 80144a8:	2000e794 	.word	0x2000e794
 80144ac:	200005d8 	.word	0x200005d8
 80144b0:	200005dc 	.word	0x200005dc
 80144b4:	2000eb92 	.word	0x2000eb92
 80144b8:	0801e940 	.word	0x0801e940
 80144bc:	20014915 	.word	0x20014915
 80144c0:	0801e948 	.word	0x0801e948
 80144c4:	0801e950 	.word	0x0801e950
 80144c8:	0801e958 	.word	0x0801e958

080144cc <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80144cc:	4770      	bx	lr

080144ce <Mp3ReadId3V2Text>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Text(FIL* pInFile, uint32_t unDataLen, char* pszBuffer, uint32_t unBufferSize)
{
 80144ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	4607      	mov	r7, r0
 80144d6:	460e      	mov	r6, r1
 80144d8:	4690      	mov	r8, r2
 80144da:	461c      	mov	r4, r3
	UINT unRead = 0;
 80144dc:	2300      	movs	r3, #0
 80144de:	9301      	str	r3, [sp, #4]
	BYTE byEncoding = 0;
 80144e0:	f88d 3003 	strb.w	r3, [sp, #3]
	if((f_read(pInFile, &byEncoding, 1, &unRead) == FR_OK) && (unRead == 1))
 80144e4:	ab01      	add	r3, sp, #4
 80144e6:	2201      	movs	r2, #1
 80144e8:	f10d 0103 	add.w	r1, sp, #3
 80144ec:	f7f6 feab 	bl	800b246 <f_read>
 80144f0:	2800      	cmp	r0, #0
 80144f2:	d145      	bne.n	8014580 <Mp3ReadId3V2Text+0xb2>
 80144f4:	9d01      	ldr	r5, [sp, #4]
 80144f6:	2d01      	cmp	r5, #1
 80144f8:	d147      	bne.n	801458a <Mp3ReadId3V2Text+0xbc>
	{
		unDataLen--;
 80144fa:	3e01      	subs	r6, #1
		if(unDataLen <= (unBufferSize - 1))
 80144fc:	1e63      	subs	r3, r4, #1
 80144fe:	42b3      	cmp	r3, r6
 8014500:	d333      	bcc.n	801456a <Mp3ReadId3V2Text+0x9c>
		{
			if((f_read(pInFile, pszBuffer, unDataLen, &unRead) == FR_OK) ||
 8014502:	ab01      	add	r3, sp, #4
 8014504:	4632      	mov	r2, r6
 8014506:	4641      	mov	r1, r8
 8014508:	4638      	mov	r0, r7
 801450a:	f7f6 fe9c 	bl	800b246 <f_read>
 801450e:	b110      	cbz	r0, 8014516 <Mp3ReadId3V2Text+0x48>
					(unRead == unDataLen))
 8014510:	9b01      	ldr	r3, [sp, #4]
			if((f_read(pInFile, pszBuffer, unDataLen, &unRead) == FR_OK) ||
 8014512:	42b3      	cmp	r3, r6
 8014514:	d135      	bne.n	8014582 <Mp3ReadId3V2Text+0xb4>
			{
				if(byEncoding == 0)
 8014516:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801451a:	b91b      	cbnz	r3, 8014524 <Mp3ReadId3V2Text+0x56>
				{
					// ISO-8859-1 multibyte
					// just add a terminating zero
					pszBuffer[unDataLen] = 0;
 801451c:	2500      	movs	r5, #0
 801451e:	f808 5006 	strb.w	r5, [r8, r6]
 8014522:	e02e      	b.n	8014582 <Mp3ReadId3V2Text+0xb4>
				}
				else if(byEncoding == 1)
 8014524:	2b01      	cmp	r3, #1
 8014526:	d001      	beq.n	801452c <Mp3ReadId3V2Text+0x5e>
	}
	else
	{
		return 1;
	}
	return 0;
 8014528:	2500      	movs	r5, #0
 801452a:	e02a      	b.n	8014582 <Mp3ReadId3V2Text+0xb4>
					if((unDataLen > 2) && (pszBuffer[0] == 0xFF) && (pszBuffer[1] == 0xFE))
 801452c:	2e02      	cmp	r6, #2
 801452e:	d90b      	bls.n	8014548 <Mp3ReadId3V2Text+0x7a>
 8014530:	f898 3000 	ldrb.w	r3, [r8]
 8014534:	2bff      	cmp	r3, #255	; 0xff
 8014536:	d001      	beq.n	801453c <Mp3ReadId3V2Text+0x6e>
					uint32_t r = 0;
 8014538:	2300      	movs	r3, #0
 801453a:	e006      	b.n	801454a <Mp3ReadId3V2Text+0x7c>
					if((unDataLen > 2) && (pszBuffer[0] == 0xFF) && (pszBuffer[1] == 0xFE))
 801453c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014540:	2bfe      	cmp	r3, #254	; 0xfe
 8014542:	d004      	beq.n	801454e <Mp3ReadId3V2Text+0x80>
					uint32_t r = 0;
 8014544:	2300      	movs	r3, #0
 8014546:	e000      	b.n	801454a <Mp3ReadId3V2Text+0x7c>
 8014548:	2300      	movs	r3, #0
 801454a:	2200      	movs	r2, #0
 801454c:	e007      	b.n	801455e <Mp3ReadId3V2Text+0x90>
						r = 2;
 801454e:	2302      	movs	r3, #2
 8014550:	e7fb      	b.n	801454a <Mp3ReadId3V2Text+0x7c>
						pszBuffer[w] = pszBuffer[r];
 8014552:	f818 1003 	ldrb.w	r1, [r8, r3]
 8014556:	f808 1002 	strb.w	r1, [r8, r2]
					for(; r < unDataLen; r += 2, w += 1)
 801455a:	3302      	adds	r3, #2
 801455c:	3201      	adds	r2, #1
 801455e:	42b3      	cmp	r3, r6
 8014560:	d3f7      	bcc.n	8014552 <Mp3ReadId3V2Text+0x84>
					pszBuffer[w] = 0;
 8014562:	2500      	movs	r5, #0
 8014564:	f808 5002 	strb.w	r5, [r8, r2]
 8014568:	e00b      	b.n	8014582 <Mp3ReadId3V2Text+0xb4>
			if(f_lseek(pInFile, f_tell(pInFile) + unDataLen) != FR_OK)
 801456a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801456e:	18b2      	adds	r2, r6, r2
 8014570:	f143 0300 	adc.w	r3, r3, #0
 8014574:	4638      	mov	r0, r7
 8014576:	f7f6 ff37 	bl	800b3e8 <f_lseek>
 801457a:	b910      	cbnz	r0, 8014582 <Mp3ReadId3V2Text+0xb4>
	return 0;
 801457c:	2500      	movs	r5, #0
 801457e:	e000      	b.n	8014582 <Mp3ReadId3V2Text+0xb4>
		return 1;
 8014580:	2501      	movs	r5, #1
}
 8014582:	4628      	mov	r0, r5
 8014584:	b002      	add	sp, #8
 8014586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
 801458a:	2501      	movs	r5, #1
 801458c:	e7f9      	b.n	8014582 <Mp3ReadId3V2Text+0xb4>
	...

08014590 <Mp3ReadId3V2Tag>:
/*
 * Taken from
 * http://www.mikrocontroller.net/topic/252319
 */
uint32_t Mp3ReadId3V2Tag(FIL* pInFile, char* pszArtist, uint32_t unArtistSize, char* pszTitle, uint32_t unTitleSize)
{
 8014590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014594:	b08b      	sub	sp, #44	; 0x2c
 8014596:	4606      	mov	r6, r0
 8014598:	460c      	mov	r4, r1
 801459a:	4617      	mov	r7, r2
 801459c:	461d      	mov	r5, r3
	pszArtist[0] = 0;
 801459e:	2100      	movs	r1, #0
 80145a0:	7021      	strb	r1, [r4, #0]
	pszTitle[0] = 0;
 80145a2:	7019      	strb	r1, [r3, #0]

	BYTE id3hd[10];
	UINT unRead = 0;
 80145a4:	9106      	str	r1, [sp, #24]
	// read ID3 tag header (10 bytes)
	if((f_read(pInFile, id3hd, 10, &unRead) != FR_OK) || (unRead != 10))
 80145a6:	ab06      	add	r3, sp, #24
 80145a8:	220a      	movs	r2, #10
 80145aa:	a907      	add	r1, sp, #28
 80145ac:	f7f6 fe4b 	bl	800b246 <f_read>
 80145b0:	2800      	cmp	r0, #0
 80145b2:	f040 80db 	bne.w	801476c <Mp3ReadId3V2Tag+0x1dc>
 80145b6:	9b06      	ldr	r3, [sp, #24]
 80145b8:	2b0a      	cmp	r3, #10
 80145ba:	f040 80db 	bne.w	8014774 <Mp3ReadId3V2Tag+0x1e4>
		return 1;
	}
	else
	{
		uint32_t unSkip = 0;
		id3tagsize = 0;
 80145be:	4b6e      	ldr	r3, [pc, #440]	; (8014778 <Mp3ReadId3V2Tag+0x1e8>)
 80145c0:	2200      	movs	r2, #0
 80145c2:	601a      	str	r2, [r3, #0]
		if((unRead == 10) &&
				(id3hd[0] == 'I') &&
 80145c4:	f89d 301c 	ldrb.w	r3, [sp, #28]
		if((unRead == 10) &&
 80145c8:	2b49      	cmp	r3, #73	; 0x49
 80145ca:	f040 80c5 	bne.w	8014758 <Mp3ReadId3V2Tag+0x1c8>
				(id3hd[1] == 'D') &&
 80145ce:	f89d 301d 	ldrb.w	r3, [sp, #29]
				(id3hd[0] == 'I') &&
 80145d2:	2b44      	cmp	r3, #68	; 0x44
 80145d4:	d002      	beq.n	80145dc <Mp3ReadId3V2Tag+0x4c>
		uint32_t unSkip = 0;
 80145d6:	f04f 0a00 	mov.w	sl, #0
 80145da:	e0bf      	b.n	801475c <Mp3ReadId3V2Tag+0x1cc>
				(id3hd[2] == '3'))
 80145dc:	f89d 301e 	ldrb.w	r3, [sp, #30]
				(id3hd[1] == 'D') &&
 80145e0:	2b33      	cmp	r3, #51	; 0x33
 80145e2:	d002      	beq.n	80145ea <Mp3ReadId3V2Tag+0x5a>
		uint32_t unSkip = 0;
 80145e4:	f04f 0a00 	mov.w	sl, #0
 80145e8:	e0b8      	b.n	801475c <Mp3ReadId3V2Tag+0x1cc>
		{
			// include ID3 header size (10 bytes)
			unSkip += 10;
			// ID3 tag full size
			unSkip = ((id3hd[6] & 0x7f) << 21) | ((id3hd[7] & 0x7f) << 14) | ((id3hd[8] & 0x7f) << 7) | (id3hd[9] & 0x7f);
 80145ea:	f89d a022 	ldrb.w	sl, [sp, #34]	; 0x22
 80145ee:	ea4f 5a4a 	mov.w	sl, sl, lsl #21
 80145f2:	f00a 6a7e 	and.w	sl, sl, #266338304	; 0xfe00000
 80145f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80145fa:	039b      	lsls	r3, r3, #14
 80145fc:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
 8014600:	ea4a 0a03 	orr.w	sl, sl, r3
 8014604:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014608:	01db      	lsls	r3, r3, #7
 801460a:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 801460e:	ea4a 0a03 	orr.w	sl, sl, r3
 8014612:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8014616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801461a:	ea4a 0a03 	orr.w	sl, sl, r3
			id3tagsize = unSkip;
 801461e:	4b56      	ldr	r3, [pc, #344]	; (8014778 <Mp3ReadId3V2Tag+0x1e8>)
 8014620:	f8c3 a000 	str.w	sl, [r3]
			// try to get some information from the tag
			// skip the extended header, if present
			uint8_t unVersion = id3hd[3];
 8014624:	f89d 901f 	ldrb.w	r9, [sp, #31]
			if(id3hd[5] & 0x40)
 8014628:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801462c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014630:	d102      	bne.n	8014638 <Mp3ReadId3V2Tag+0xa8>
				{
					break;
				}
				char szFrameId[5] = {0, 0, 0, 0, 0};
				memcpy(szFrameId, frhd, 4);
				uint32_t unFrameSize = 0;
 8014632:	f04f 0b02 	mov.w	fp, #2
 8014636:	e06c      	b.n	8014712 <Mp3ReadId3V2Tag+0x182>
				f_read(pInFile, exhd, 4, &unRead);
 8014638:	ab06      	add	r3, sp, #24
 801463a:	2204      	movs	r2, #4
 801463c:	a903      	add	r1, sp, #12
 801463e:	4630      	mov	r0, r6
 8014640:	f7f6 fe01 	bl	800b246 <f_read>
				size_t unExHdrSkip = ((exhd[0] & 0x7f) << 21) | ((exhd[1] & 0x7f) << 14) | ((exhd[2] & 0x7f) << 7) | (exhd[3] & 0x7f);
 8014644:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014648:	0552      	lsls	r2, r2, #21
 801464a:	f002 627e 	and.w	r2, r2, #266338304	; 0xfe00000
 801464e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8014652:	039b      	lsls	r3, r3, #14
 8014654:	f403 13fe 	and.w	r3, r3, #2080768	; 0x1fc000
 8014658:	431a      	orrs	r2, r3
 801465a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 801465e:	01db      	lsls	r3, r3, #7
 8014660:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8014664:	431a      	orrs	r2, r3
 8014666:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801466a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801466e:	431a      	orrs	r2, r3
				unExHdrSkip -= 4;
 8014670:	3a04      	subs	r2, #4
				if(f_lseek(pInFile, f_tell(pInFile) + unExHdrSkip) != FR_OK)
 8014672:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8014674:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8014676:	1852      	adds	r2, r2, r1
 8014678:	f143 0300 	adc.w	r3, r3, #0
 801467c:	4630      	mov	r0, r6
 801467e:	f7f6 feb3 	bl	800b3e8 <f_lseek>
 8014682:	2800      	cmp	r0, #0
 8014684:	d0d5      	beq.n	8014632 <Mp3ReadId3V2Tag+0xa2>
					return 1;
 8014686:	2001      	movs	r0, #1
 8014688:	e071      	b.n	801476e <Mp3ReadId3V2Tag+0x1de>
				{
					if(unVersion == 3)
					{
						// ID3v2.3
						unFrameSize <<= 8;
						unFrameSize += frhd[i + 4];
 801468a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801468e:	446a      	add	r2, sp
 8014690:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8014694:	eb02 2808 	add.w	r8, r2, r8, lsl #8
 8014698:	e005      	b.n	80146a6 <Mp3ReadId3V2Tag+0x116>
				for(; i < 4; i++)
 801469a:	3301      	adds	r3, #1
 801469c:	2b03      	cmp	r3, #3
 801469e:	d80f      	bhi.n	80146c0 <Mp3ReadId3V2Tag+0x130>
					if(unVersion == 3)
 80146a0:	f1b9 0f03 	cmp.w	r9, #3
 80146a4:	d0f1      	beq.n	801468a <Mp3ReadId3V2Tag+0xfa>
					}
					if(unVersion == 4)
 80146a6:	f1b9 0f04 	cmp.w	r9, #4
 80146aa:	d1f6      	bne.n	801469a <Mp3ReadId3V2Tag+0x10a>
					{
						// ID3v2.4
						unFrameSize <<= 7;
						unFrameSize += frhd[i + 4] & 0x7F;
 80146ac:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80146b0:	446a      	add	r2, sp
 80146b2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80146b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80146ba:	eb02 18c8 	add.w	r8, r2, r8, lsl #7
 80146be:	e7ec      	b.n	801469a <Mp3ReadId3V2Tag+0x10a>
					}
				}

				if(strcmp(szFrameId, "TPE1") == 0)
 80146c0:	492e      	ldr	r1, [pc, #184]	; (801477c <Mp3ReadId3V2Tag+0x1ec>)
 80146c2:	a801      	add	r0, sp, #4
 80146c4:	f7eb fda4 	bl	8000210 <strcmp>
 80146c8:	b178      	cbz	r0, 80146ea <Mp3ReadId3V2Tag+0x15a>
					{
						break;
					}
					nFramesToRead--;
				}
				else if(strcmp(szFrameId, "TIT2") == 0)
 80146ca:	492d      	ldr	r1, [pc, #180]	; (8014780 <Mp3ReadId3V2Tag+0x1f0>)
 80146cc:	a801      	add	r0, sp, #4
 80146ce:	f7eb fd9f 	bl	8000210 <strcmp>
 80146d2:	b9a0      	cbnz	r0, 80146fe <Mp3ReadId3V2Tag+0x16e>
				{
					// title
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszTitle, unTitleSize) != 0)
 80146d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80146d6:	462a      	mov	r2, r5
 80146d8:	4641      	mov	r1, r8
 80146da:	4630      	mov	r0, r6
 80146dc:	f7ff fef7 	bl	80144ce <Mp3ReadId3V2Text>
 80146e0:	2800      	cmp	r0, #0
 80146e2:	d13b      	bne.n	801475c <Mp3ReadId3V2Tag+0x1cc>
					{
						break;
					}
					nFramesToRead--;
 80146e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80146e8:	e013      	b.n	8014712 <Mp3ReadId3V2Tag+0x182>
					if(Mp3ReadId3V2Text(pInFile, unFrameSize, pszArtist, unArtistSize) != 0)
 80146ea:	463b      	mov	r3, r7
 80146ec:	4622      	mov	r2, r4
 80146ee:	4641      	mov	r1, r8
 80146f0:	4630      	mov	r0, r6
 80146f2:	f7ff feec 	bl	80144ce <Mp3ReadId3V2Text>
 80146f6:	bb88      	cbnz	r0, 801475c <Mp3ReadId3V2Tag+0x1cc>
					nFramesToRead--;
 80146f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80146fc:	e009      	b.n	8014712 <Mp3ReadId3V2Tag+0x182>
				}
				else
				{
					if(f_lseek(pInFile, f_tell(pInFile) + unFrameSize) != FR_OK)
 80146fe:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8014700:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8014702:	eb18 0202 	adds.w	r2, r8, r2
 8014706:	f143 0300 	adc.w	r3, r3, #0
 801470a:	4630      	mov	r0, r6
 801470c:	f7f6 fe6c 	bl	800b3e8 <f_lseek>
 8014710:	bb00      	cbnz	r0, 8014754 <Mp3ReadId3V2Tag+0x1c4>
			while(nFramesToRead > 0)
 8014712:	f1bb 0f00 	cmp.w	fp, #0
 8014716:	d021      	beq.n	801475c <Mp3ReadId3V2Tag+0x1cc>
				if((f_read(pInFile, frhd, 10, &unRead) != FR_OK) || (unRead != 10))
 8014718:	ab06      	add	r3, sp, #24
 801471a:	220a      	movs	r2, #10
 801471c:	a903      	add	r1, sp, #12
 801471e:	4630      	mov	r0, r6
 8014720:	f7f6 fd91 	bl	800b246 <f_read>
 8014724:	b9b0      	cbnz	r0, 8014754 <Mp3ReadId3V2Tag+0x1c4>
 8014726:	9b06      	ldr	r3, [sp, #24]
 8014728:	2b0a      	cmp	r3, #10
 801472a:	d113      	bne.n	8014754 <Mp3ReadId3V2Tag+0x1c4>
				if((frhd[0] == 0) || (strncmp(frhd, "3DI", 3) == 0))
 801472c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014730:	b1a3      	cbz	r3, 801475c <Mp3ReadId3V2Tag+0x1cc>
 8014732:	2203      	movs	r2, #3
 8014734:	4913      	ldr	r1, [pc, #76]	; (8014784 <Mp3ReadId3V2Tag+0x1f4>)
 8014736:	a803      	add	r0, sp, #12
 8014738:	f004 fd73 	bl	8019222 <strncmp>
 801473c:	b170      	cbz	r0, 801475c <Mp3ReadId3V2Tag+0x1cc>
				char szFrameId[5] = {0, 0, 0, 0, 0};
 801473e:	4b12      	ldr	r3, [pc, #72]	; (8014788 <Mp3ReadId3V2Tag+0x1f8>)
 8014740:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014744:	9001      	str	r0, [sp, #4]
 8014746:	f88d 1008 	strb.w	r1, [sp, #8]
				memcpy(szFrameId, frhd, 4);
 801474a:	9b03      	ldr	r3, [sp, #12]
 801474c:	9301      	str	r3, [sp, #4]
				uint32_t i = 0;
 801474e:	2300      	movs	r3, #0
				uint32_t unFrameSize = 0;
 8014750:	4698      	mov	r8, r3
				for(; i < 4; i++)
 8014752:	e7a3      	b.n	801469c <Mp3ReadId3V2Tag+0x10c>
					return 1;
 8014754:	2001      	movs	r0, #1
 8014756:	e00a      	b.n	801476e <Mp3ReadId3V2Tag+0x1de>
		uint32_t unSkip = 0;
 8014758:	f04f 0a00 	mov.w	sl, #0
						return 1;
					}
				}
			}
		}
		if(f_lseek(pInFile, unSkip) != FR_OK)
 801475c:	4652      	mov	r2, sl
 801475e:	2300      	movs	r3, #0
 8014760:	4630      	mov	r0, r6
 8014762:	f7f6 fe41 	bl	800b3e8 <f_lseek>
 8014766:	b110      	cbz	r0, 801476e <Mp3ReadId3V2Tag+0x1de>
		{
			return 1;
 8014768:	2001      	movs	r0, #1
 801476a:	e000      	b.n	801476e <Mp3ReadId3V2Tag+0x1de>
		return 1;
 801476c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
 801476e:	b00b      	add	sp, #44	; 0x2c
 8014770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 1;
 8014774:	2001      	movs	r0, #1
 8014776:	e7fa      	b.n	801476e <Mp3ReadId3V2Tag+0x1de>
 8014778:	200145e8 	.word	0x200145e8
 801477c:	0801e964 	.word	0x0801e964
 8014780:	0801e96c 	.word	0x0801e96c
 8014784:	0801e960 	.word	0x0801e960
 8014788:	08019908 	.word	0x08019908

0801478c <PlayMp3File>:
		}
	}
	return res;
}

void PlayMp3File() {
 801478c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014790:	b0bf      	sub	sp, #252	; 0xfc
	BufferCtl.filetype = 1;
 8014792:	4d89      	ldr	r5, [pc, #548]	; (80149b8 <PlayMp3File+0x22c>)
 8014794:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8014798:	2201      	movs	r2, #1
 801479a:	721a      	strb	r2, [r3, #8]
	char szArtist[120];
	char szTitle[120];
	id3tagsize = 0;
 801479c:	2400      	movs	r4, #0
 801479e:	4b87      	ldr	r3, [pc, #540]	; (80149bc <PlayMp3File+0x230>)
 80147a0:	601c      	str	r4, [r3, #0]
	Mp3ReadId3V2Tag(&MyFile, szArtist, sizeof(szArtist), szTitle, sizeof(szTitle));
 80147a2:	2278      	movs	r2, #120	; 0x78
 80147a4:	9200      	str	r2, [sp, #0]
 80147a6:	ab02      	add	r3, sp, #8
 80147a8:	a920      	add	r1, sp, #128	; 0x80
 80147aa:	4885      	ldr	r0, [pc, #532]	; (80149c0 <PlayMp3File+0x234>)
 80147ac:	f7ff fef0 	bl	8014590 <Mp3ReadId3V2Tag>
	bOutOfData = 0;
 80147b0:	4b84      	ldr	r3, [pc, #528]	; (80149c4 <PlayMp3File+0x238>)
 80147b2:	601c      	str	r4, [r3, #0]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 80147b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80147b8:	4621      	mov	r1, r4
 80147ba:	4628      	mov	r0, r5
 80147bc:	f004 fc0a 	bl	8018fd4 <memset>
	//memset(g_pMp3DmaBuffer, 0, MP3_DMA_BUFFER_SIZE);
	g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 80147c0:	4b81      	ldr	r3, [pc, #516]	; (80149c8 <PlayMp3File+0x23c>)
 80147c2:	4a82      	ldr	r2, [pc, #520]	; (80149cc <PlayMp3File+0x240>)
 80147c4:	601a      	str	r2, [r3, #0]
	unInDataLeft = 0;
 80147c6:	4b82      	ldr	r3, [pc, #520]	; (80149d0 <PlayMp3File+0x244>)
 80147c8:	601c      	str	r4, [r3, #0]
	unDmaBufferSpace = 0;
 80147ca:	4b82      	ldr	r3, [pc, #520]	; (80149d4 <PlayMp3File+0x248>)
 80147cc:	601c      	str	r4, [r3, #0]
	unFramesDecoded = 0;
 80147ce:	4b82      	ldr	r3, [pc, #520]	; (80149d8 <PlayMp3File+0x24c>)
 80147d0:	601c      	str	r4, [r3, #0]
	nDecodeRes = ERR_MP3_INDATA_UNDERFLOW;
 80147d2:	4b82      	ldr	r3, [pc, #520]	; (80149dc <PlayMp3File+0x250>)
 80147d4:	f04f 32ff 	mov.w	r2, #4294967295
 80147d8:	601a      	str	r2, [r3, #0]
	unDmaBufMode = 0;
 80147da:	4b81      	ldr	r3, [pc, #516]	; (80149e0 <PlayMp3File+0x254>)
 80147dc:	601c      	str	r4, [r3, #0]
 80147de:	e034      	b.n	801484a <PlayMp3File+0xbe>
	do {
		// fill the whole buffer for the first time
		if(unInDataLeft < (2 * MAINBUF_SIZE)) {
			UINT unRead = Mp3FillReadBuffer(pInData, unInDataLeft, &MyFile);
 80147e0:	4c80      	ldr	r4, [pc, #512]	; (80149e4 <PlayMp3File+0x258>)
 80147e2:	4a77      	ldr	r2, [pc, #476]	; (80149c0 <PlayMp3File+0x234>)
 80147e4:	6820      	ldr	r0, [r4, #0]
 80147e6:	f001 fc97 	bl	8016118 <Mp3FillReadBuffer>
			unInDataLeft += unRead;
 80147ea:	4a79      	ldr	r2, [pc, #484]	; (80149d0 <PlayMp3File+0x244>)
 80147ec:	6813      	ldr	r3, [r2, #0]
 80147ee:	4403      	add	r3, r0
 80147f0:	6013      	str	r3, [r2, #0]
			pInData = BufferCtl.buff;
 80147f2:	4b71      	ldr	r3, [pc, #452]	; (80149b8 <PlayMp3File+0x22c>)
 80147f4:	6023      	str	r3, [r4, #0]
 80147f6:	e02e      	b.n	8014856 <PlayMp3File+0xca>
			unInDataLeft = 0;
			//bOutOfData = 1;
			//break;
		}
		else {
			pInData += nOffset;
 80147f8:	497a      	ldr	r1, [pc, #488]	; (80149e4 <PlayMp3File+0x258>)
 80147fa:	680b      	ldr	r3, [r1, #0]
 80147fc:	4423      	add	r3, r4
 80147fe:	600b      	str	r3, [r1, #0]
			unInDataLeft -= nOffset;
 8014800:	4a73      	ldr	r2, [pc, #460]	; (80149d0 <PlayMp3File+0x244>)
 8014802:	6813      	ldr	r3, [r2, #0]
 8014804:	1b1b      	subs	r3, r3, r4
 8014806:	6013      	str	r3, [r2, #0]
			// decode one MP3 frame - if offset < 0 then bytesLeft was less than a full frame
			nDecodeRes = MP3Decode(hMP3Decoder, &pInData, (int*)&unInDataLeft, (short*)g_pMp3OutBuffer, 0);
 8014808:	2300      	movs	r3, #0
 801480a:	9300      	str	r3, [sp, #0]
 801480c:	4b76      	ldr	r3, [pc, #472]	; (80149e8 <PlayMp3File+0x25c>)
 801480e:	4877      	ldr	r0, [pc, #476]	; (80149ec <PlayMp3File+0x260>)
 8014810:	6800      	ldr	r0, [r0, #0]
 8014812:	f7f7 f8ef 	bl	800b9f4 <MP3Decode>
 8014816:	4b71      	ldr	r3, [pc, #452]	; (80149dc <PlayMp3File+0x250>)
 8014818:	6018      	str	r0, [r3, #0]
			switch(nDecodeRes) {
 801481a:	f1b0 3fff 	cmp.w	r0, #4294967295
 801481e:	f000 80b8 	beq.w	8014992 <PlayMp3File+0x206>
 8014822:	b320      	cbz	r0, 801486e <PlayMp3File+0xe2>
 8014824:	f110 0f02 	cmn.w	r0, #2
 8014828:	d00a      	beq.n	8014840 <PlayMp3File+0xb4>
				break;
			}
			default:
			{
				// just try to skip the offending frame...
				if(unInDataLeft > 0) {
 801482a:	4b69      	ldr	r3, [pc, #420]	; (80149d0 <PlayMp3File+0x244>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	dd06      	ble.n	8014840 <PlayMp3File+0xb4>
					unInDataLeft-=MP3_BYTES_SKIP;
 8014832:	3b01      	subs	r3, #1
 8014834:	4a66      	ldr	r2, [pc, #408]	; (80149d0 <PlayMp3File+0x244>)
 8014836:	6013      	str	r3, [r2, #0]
					pInData+=MP3_BYTES_SKIP;
 8014838:	4a6a      	ldr	r2, [pc, #424]	; (80149e4 <PlayMp3File+0x258>)
 801483a:	6813      	ldr	r3, [r2, #0]
 801483c:	3301      	adds	r3, #1
 801483e:	6013      	str	r3, [r2, #0]
				break;
			}
			}
		}
	}
	while(!bOutOfData);
 8014840:	4b60      	ldr	r3, [pc, #384]	; (80149c4 <PlayMp3File+0x238>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	2b00      	cmp	r3, #0
 8014846:	f040 80ad 	bne.w	80149a4 <PlayMp3File+0x218>
		if(unInDataLeft < (2 * MAINBUF_SIZE)) {
 801484a:	4b61      	ldr	r3, [pc, #388]	; (80149d0 <PlayMp3File+0x244>)
 801484c:	6819      	ldr	r1, [r3, #0]
 801484e:	f640 7327 	movw	r3, #3879	; 0xf27
 8014852:	4299      	cmp	r1, r3
 8014854:	ddc4      	ble.n	80147e0 <PlayMp3File+0x54>
		int nOffset = MP3FindSyncWord(pInData, unInDataLeft);
 8014856:	4b5e      	ldr	r3, [pc, #376]	; (80149d0 <PlayMp3File+0x244>)
 8014858:	6819      	ldr	r1, [r3, #0]
 801485a:	4b62      	ldr	r3, [pc, #392]	; (80149e4 <PlayMp3File+0x258>)
 801485c:	6818      	ldr	r0, [r3, #0]
 801485e:	f7f7 f856 	bl	800b90e <MP3FindSyncWord>
		if(nOffset < 0) {
 8014862:	1e04      	subs	r4, r0, #0
 8014864:	dac8      	bge.n	80147f8 <PlayMp3File+0x6c>
			unInDataLeft = 0;
 8014866:	4b5a      	ldr	r3, [pc, #360]	; (80149d0 <PlayMp3File+0x244>)
 8014868:	2200      	movs	r2, #0
 801486a:	601a      	str	r2, [r3, #0]
 801486c:	e7e8      	b.n	8014840 <PlayMp3File+0xb4>
				MP3GetLastFrameInfo(hMP3Decoder, &mp3FrameInfo);
 801486e:	4c60      	ldr	r4, [pc, #384]	; (80149f0 <PlayMp3File+0x264>)
 8014870:	4621      	mov	r1, r4
 8014872:	4b5e      	ldr	r3, [pc, #376]	; (80149ec <PlayMp3File+0x260>)
 8014874:	6818      	ldr	r0, [r3, #0]
 8014876:	f7f7 f885 	bl	800b984 <MP3GetLastFrameInfo>
				unFramesDecoded++;
 801487a:	4a57      	ldr	r2, [pc, #348]	; (80149d8 <PlayMp3File+0x24c>)
 801487c:	6813      	ldr	r3, [r2, #0]
 801487e:	3301      	adds	r3, #1
 8014880:	6013      	str	r3, [r2, #0]
				g_pMp3OutBufferPtr = g_pMp3OutBuffer;
 8014882:	4b5c      	ldr	r3, [pc, #368]	; (80149f4 <PlayMp3File+0x268>)
 8014884:	4a58      	ldr	r2, [pc, #352]	; (80149e8 <PlayMp3File+0x25c>)
 8014886:	601a      	str	r2, [r3, #0]
				uint32_t unOutBufferAvail = mp3FrameInfo.outputSamps;
 8014888:	6926      	ldr	r6, [r4, #16]
				while(unOutBufferAvail > 0) {
 801488a:	e00e      	b.n	80148aa <PlayMp3File+0x11e>
					else if(unDmaBufMode == 1) {
 801488c:	4b54      	ldr	r3, [pc, #336]	; (80149e0 <PlayMp3File+0x254>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	2b01      	cmp	r3, #1
 8014892:	d016      	beq.n	80148c2 <PlayMp3File+0x136>
						unDmaBufferSpace = g_pMp3DmaBuffer + MP3_DMA_BUFFER_SIZE - g_pMp3DmaBufferPtr;
 8014894:	4b4c      	ldr	r3, [pc, #304]	; (80149c8 <PlayMp3File+0x23c>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	4c57      	ldr	r4, [pc, #348]	; (80149f8 <PlayMp3File+0x26c>)
 801489a:	1ae4      	subs	r4, r4, r3
 801489c:	1064      	asrs	r4, r4, #1
					uint32_t unCopy = unDmaBufferSpace > unOutBufferAvail ? unOutBufferAvail : unDmaBufferSpace;
 801489e:	4635      	mov	r5, r6
 80148a0:	42a6      	cmp	r6, r4
 80148a2:	bf28      	it	cs
 80148a4:	4625      	movcs	r5, r4
					if(unCopy > 0) {
 80148a6:	b995      	cbnz	r5, 80148ce <PlayMp3File+0x142>
					if(unDmaBufferSpace == 0) {
 80148a8:	b33c      	cbz	r4, 80148fa <PlayMp3File+0x16e>
				while(unOutBufferAvail > 0) {
 80148aa:	2e00      	cmp	r6, #0
 80148ac:	d0c8      	beq.n	8014840 <PlayMp3File+0xb4>
					if(unDmaBufMode == 0) {
 80148ae:	4b4c      	ldr	r3, [pc, #304]	; (80149e0 <PlayMp3File+0x254>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d1ea      	bne.n	801488c <PlayMp3File+0x100>
						unDmaBufferSpace = g_pMp3DmaBuffer + MP3_DMA_BUFFER_SIZE - g_pMp3DmaBufferPtr;
 80148b6:	4b44      	ldr	r3, [pc, #272]	; (80149c8 <PlayMp3File+0x23c>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	4c4f      	ldr	r4, [pc, #316]	; (80149f8 <PlayMp3File+0x26c>)
 80148bc:	1ae4      	subs	r4, r4, r3
 80148be:	1064      	asrs	r4, r4, #1
 80148c0:	e7ed      	b.n	801489e <PlayMp3File+0x112>
						unDmaBufferSpace = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2) - g_pMp3DmaBufferPtr;
 80148c2:	4b41      	ldr	r3, [pc, #260]	; (80149c8 <PlayMp3File+0x23c>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	4c4d      	ldr	r4, [pc, #308]	; (80149fc <PlayMp3File+0x270>)
 80148c8:	1ae4      	subs	r4, r4, r3
 80148ca:	1064      	asrs	r4, r4, #1
 80148cc:	e7e7      	b.n	801489e <PlayMp3File+0x112>
						memcpy(g_pMp3DmaBufferPtr, g_pMp3OutBufferPtr, unCopy * sizeof(uint16_t));
 80148ce:	ea4f 0845 	mov.w	r8, r5, lsl #1
 80148d2:	4f3d      	ldr	r7, [pc, #244]	; (80149c8 <PlayMp3File+0x23c>)
 80148d4:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80149f4 <PlayMp3File+0x268>
 80148d8:	4642      	mov	r2, r8
 80148da:	f8d9 1000 	ldr.w	r1, [r9]
 80148de:	6838      	ldr	r0, [r7, #0]
 80148e0:	f004 fb50 	bl	8018f84 <memcpy>
						unOutBufferAvail -= unCopy;
 80148e4:	1b76      	subs	r6, r6, r5
						g_pMp3OutBufferPtr += unCopy;
 80148e6:	f8d9 3000 	ldr.w	r3, [r9]
 80148ea:	4443      	add	r3, r8
 80148ec:	f8c9 3000 	str.w	r3, [r9]
						unDmaBufferSpace -= unCopy;
 80148f0:	1b64      	subs	r4, r4, r5
						g_pMp3DmaBufferPtr += unCopy;
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	4443      	add	r3, r8
 80148f6:	603b      	str	r3, [r7, #0]
 80148f8:	e7d6      	b.n	80148a8 <PlayMp3File+0x11c>
						if(unDmaBufMode == 0) {
 80148fa:	4b39      	ldr	r3, [pc, #228]	; (80149e0 <PlayMp3File+0x254>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	bb53      	cbnz	r3, 8014956 <PlayMp3File+0x1ca>
							if(mp3FrameInfo.samprate > 0) trak.bitrate = mp3FrameInfo.samprate;
 8014900:	4b3b      	ldr	r3, [pc, #236]	; (80149f0 <PlayMp3File+0x264>)
 8014902:	689b      	ldr	r3, [r3, #8]
 8014904:	2b00      	cmp	r3, #0
 8014906:	dd2b      	ble.n	8014960 <PlayMp3File+0x1d4>
 8014908:	4a3d      	ldr	r2, [pc, #244]	; (8014a00 <PlayMp3File+0x274>)
 801490a:	8113      	strh	r3, [r2, #8]
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 801490c:	4a3c      	ldr	r2, [pc, #240]	; (8014a00 <PlayMp3File+0x274>)
 801490e:	8913      	ldrh	r3, [r2, #8]
									*(1 + trak.percent), NULL);
 8014910:	edd2 7a01 	vldr	s15, [r2, #4]
 8014914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014918:	ee37 7a87 	vadd.f32	s14, s15, s14
 801491c:	085b      	lsrs	r3, r3, #1
 801491e:	ee07 3a90 	vmov	s15, r3
 8014922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014926:	ee67 7a87 	vmul.f32	s15, s15, s14
							BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)
 801492a:	2200      	movs	r2, #0
 801492c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014930:	ee17 1a90 	vmov	r1, s15
 8014934:	4833      	ldr	r0, [pc, #204]	; (8014a04 <PlayMp3File+0x278>)
 8014936:	f001 fb31 	bl	8015f9c <BSP_AUDIO_OUT_ClockConfig>
							BSP_AUDIO_OUT_Play(g_pMp3DmaBuffer, MP3_DMA_BUFFER_SIZE * sizeof(uint16_t));
 801493a:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 801493e:	4823      	ldr	r0, [pc, #140]	; (80149cc <PlayMp3File+0x240>)
 8014940:	f001 fa3e 	bl	8015dc0 <BSP_AUDIO_OUT_Play>
							BSP_AUDIO_OUT_SetVolume(volume);
 8014944:	4b30      	ldr	r3, [pc, #192]	; (8014a08 <PlayMp3File+0x27c>)
 8014946:	7818      	ldrb	r0, [r3, #0]
 8014948:	f001 fa84 	bl	8015e54 <BSP_AUDIO_OUT_SetVolume>
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801494c:	4b2f      	ldr	r3, [pc, #188]	; (8014a0c <PlayMp3File+0x280>)
 801494e:	f893 3b90 	ldrb.w	r3, [r3, #2960]	; 0xb90
 8014952:	2b02      	cmp	r3, #2
 8014954:	d009      	beq.n	801496a <PlayMp3File+0x1de>
						while(unDmaBufMode == 0);
 8014956:	4b22      	ldr	r3, [pc, #136]	; (80149e0 <PlayMp3File+0x254>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d0fb      	beq.n	8014956 <PlayMp3File+0x1ca>
 801495e:	e7a4      	b.n	80148aa <PlayMp3File+0x11e>
							else trak.bitrate = AUDIO_FREQUENCY_44K;
 8014960:	4b27      	ldr	r3, [pc, #156]	; (8014a00 <PlayMp3File+0x274>)
 8014962:	f64a 4244 	movw	r2, #44100	; 0xac44
 8014966:	811a      	strh	r2, [r3, #8]
 8014968:	e7d0      	b.n	801490c <PlayMp3File+0x180>
							if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801496a:	4b25      	ldr	r3, [pc, #148]	; (8014a00 <PlayMp3File+0x274>)
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d1f1      	bne.n	8014956 <PlayMp3File+0x1ca>
								BSP_AUDIO_OUT_Pause();
 8014972:	f001 fa45 	bl	8015e00 <BSP_AUDIO_OUT_Pause>
								trak.state = STOPPED;
 8014976:	4b22      	ldr	r3, [pc, #136]	; (8014a00 <PlayMp3File+0x274>)
 8014978:	2201      	movs	r2, #1
 801497a:	701a      	strb	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim8);
 801497c:	4824      	ldr	r0, [pc, #144]	; (8014a10 <PlayMp3File+0x284>)
 801497e:	f7f2 fb61 	bl	8007044 <HAL_TIM_Base_Start_IT>
								GoToPosition(rekordbox.cue_start_position[0]);
 8014982:	4b22      	ldr	r3, [pc, #136]	; (8014a0c <PlayMp3File+0x280>)
 8014984:	f8d3 080c 	ldr.w	r0, [r3, #2060]	; 0x80c
 8014988:	f003 fa9a 	bl	8017ec0 <GoToPosition>
								TrackTime();
 801498c:	f003 fa42 	bl	8017e14 <TrackTime>
 8014990:	e7e1      	b.n	8014956 <PlayMp3File+0x1ca>
				if(nOffset == 0)
 8014992:	b91c      	cbnz	r4, 801499c <PlayMp3File+0x210>
					bOutOfData = 1;
 8014994:	4b0b      	ldr	r3, [pc, #44]	; (80149c4 <PlayMp3File+0x238>)
 8014996:	2201      	movs	r2, #1
 8014998:	601a      	str	r2, [r3, #0]
 801499a:	e751      	b.n	8014840 <PlayMp3File+0xb4>
					unInDataLeft = 0;
 801499c:	4b0c      	ldr	r3, [pc, #48]	; (80149d0 <PlayMp3File+0x244>)
 801499e:	2200      	movs	r2, #0
 80149a0:	601a      	str	r2, [r3, #0]
 80149a2:	e74d      	b.n	8014840 <PlayMp3File+0xb4>
	BSP_AUDIO_OUT_SetVolume(0);
 80149a4:	2000      	movs	r0, #0
 80149a6:	f001 fa55 	bl	8015e54 <BSP_AUDIO_OUT_SetVolume>
	while(unDmaBufMode < 3);
 80149aa:	4b0d      	ldr	r3, [pc, #52]	; (80149e0 <PlayMp3File+0x254>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	2b02      	cmp	r3, #2
 80149b0:	d9fb      	bls.n	80149aa <PlayMp3File+0x21e>
}
 80149b2:	b03f      	add	sp, #252	; 0xfc
 80149b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149b8:	200007a0 	.word	0x200007a0
 80149bc:	200145e8 	.word	0x200145e8
 80149c0:	200017b0 	.word	0x200017b0
 80149c4:	2000e370 	.word	0x2000e370
 80149c8:	200133e0 	.word	0x200133e0
 80149cc:	2000ebe0 	.word	0x2000ebe0
 80149d0:	20014614 	.word	0x20014614
 80149d4:	2001460c 	.word	0x2001460c
 80149d8:	20014610 	.word	0x20014610
 80149dc:	20014608 	.word	0x20014608
 80149e0:	2000ebdc 	.word	0x2000ebdc
 80149e4:	20000060 	.word	0x20000060
 80149e8:	200133e4 	.word	0x200133e4
 80149ec:	2000e5fc 	.word	0x2000e5fc
 80149f0:	200145ec 	.word	0x200145ec
 80149f4:	200145e4 	.word	0x200145e4
 80149f8:	200133e0 	.word	0x200133e0
 80149fc:	20010fe0 	.word	0x20010fe0
 8014a00:	2000eba4 	.word	0x2000eba4
 8014a04:	20017220 	.word	0x20017220
 8014a08:	2000005c 	.word	0x2000005c
 8014a0c:	20016618 	.word	0x20016618
 8014a10:	2001756c 	.word	0x2001756c

08014a14 <GetLongNumber>:
		if(strcmp(tag, token) == 0) return 0;
	}
	return 1;
}

static int32_t GetLongNumber () {
 8014a14:	b508      	push	{r3, lr}
	uint8_t i = 0;
	int32_t out_data = 0;
	for(int i = 0; i < 5; i++) tag[i] = 0;
 8014a16:	2300      	movs	r3, #0
 8014a18:	e003      	b.n	8014a22 <GetLongNumber+0xe>
 8014a1a:	4a0d      	ldr	r2, [pc, #52]	; (8014a50 <GetLongNumber+0x3c>)
 8014a1c:	2100      	movs	r1, #0
 8014a1e:	54d1      	strb	r1, [r2, r3]
 8014a20:	3301      	adds	r3, #1
 8014a22:	2b04      	cmp	r3, #4
 8014a24:	ddf9      	ble.n	8014a1a <GetLongNumber+0x6>
	while(f_read(&MyFile, &tag[0], 4, (void *)&bytesread) != FR_OK);
 8014a26:	4b0b      	ldr	r3, [pc, #44]	; (8014a54 <GetLongNumber+0x40>)
 8014a28:	2204      	movs	r2, #4
 8014a2a:	4909      	ldr	r1, [pc, #36]	; (8014a50 <GetLongNumber+0x3c>)
 8014a2c:	480a      	ldr	r0, [pc, #40]	; (8014a58 <GetLongNumber+0x44>)
 8014a2e:	f7f6 fc0a 	bl	800b246 <f_read>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2800      	cmp	r0, #0
 8014a36:	d1f6      	bne.n	8014a26 <GetLongNumber+0x12>
	for(i = 0; i < 4; i++) {
 8014a38:	2b03      	cmp	r3, #3
 8014a3a:	d806      	bhi.n	8014a4a <GetLongNumber+0x36>
		out_data |= tag[i];
 8014a3c:	4a04      	ldr	r2, [pc, #16]	; (8014a50 <GetLongNumber+0x3c>)
 8014a3e:	5cd2      	ldrb	r2, [r2, r3]
 8014a40:	4310      	orrs	r0, r2
		out_data <<= 8;
 8014a42:	0200      	lsls	r0, r0, #8
	for(i = 0; i < 4; i++) {
 8014a44:	3301      	adds	r3, #1
 8014a46:	b2db      	uxtb	r3, r3
 8014a48:	e7f6      	b.n	8014a38 <GetLongNumber+0x24>
	}
	out_data >>= 8;
	return out_data;
}
 8014a4a:	1200      	asrs	r0, r0, #8
 8014a4c:	bd08      	pop	{r3, pc}
 8014a4e:	bf00      	nop
 8014a50:	200171b4 	.word	0x200171b4
 8014a54:	2000e374 	.word	0x2000e374
 8014a58:	200017b0 	.word	0x200017b0

08014a5c <FindToken>:
static uint8_t FindToken (char *token) {
 8014a5c:	b538      	push	{r3, r4, r5, lr}
 8014a5e:	4604      	mov	r4, r0
	for(int i = 0; i < 5; i++) tag[i] = 0;
 8014a60:	2300      	movs	r3, #0
 8014a62:	e003      	b.n	8014a6c <FindToken+0x10>
 8014a64:	4a1c      	ldr	r2, [pc, #112]	; (8014ad8 <FindToken+0x7c>)
 8014a66:	2100      	movs	r1, #0
 8014a68:	54d1      	strb	r1, [r2, r3]
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	2b04      	cmp	r3, #4
 8014a6e:	ddf9      	ble.n	8014a64 <FindToken+0x8>
 8014a70:	e00f      	b.n	8014a92 <FindToken+0x36>
		while(f_read(&MyFile, &tag[1], 3, (void *)&bytesread) != FR_OK);
 8014a72:	4b1a      	ldr	r3, [pc, #104]	; (8014adc <FindToken+0x80>)
 8014a74:	2203      	movs	r2, #3
 8014a76:	491a      	ldr	r1, [pc, #104]	; (8014ae0 <FindToken+0x84>)
 8014a78:	481a      	ldr	r0, [pc, #104]	; (8014ae4 <FindToken+0x88>)
 8014a7a:	f7f6 fbe4 	bl	800b246 <f_read>
 8014a7e:	4605      	mov	r5, r0
 8014a80:	2800      	cmp	r0, #0
 8014a82:	d1f6      	bne.n	8014a72 <FindToken+0x16>
		tag[4] = '\0';
 8014a84:	4814      	ldr	r0, [pc, #80]	; (8014ad8 <FindToken+0x7c>)
 8014a86:	2300      	movs	r3, #0
 8014a88:	7103      	strb	r3, [r0, #4]
		if(strcmp(tag, token) == 0) return 0;
 8014a8a:	4621      	mov	r1, r4
 8014a8c:	f7eb fbc0 	bl	8000210 <strcmp>
 8014a90:	b1f8      	cbz	r0, 8014ad2 <FindToken+0x76>
	while(f_tell(&MyFile) < f_size(&MyFile)) {
 8014a92:	4b14      	ldr	r3, [pc, #80]	; (8014ae4 <FindToken+0x88>)
 8014a94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8014a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014a98:	6919      	ldr	r1, [r3, #16]
 8014a9a:	695b      	ldr	r3, [r3, #20]
 8014a9c:	4288      	cmp	r0, r1
 8014a9e:	eb72 0303 	sbcs.w	r3, r2, r3
 8014aa2:	d215      	bcs.n	8014ad0 <FindToken+0x74>
		while(f_tell(&MyFile) < f_size(&MyFile)) {
 8014aa4:	4b0f      	ldr	r3, [pc, #60]	; (8014ae4 <FindToken+0x88>)
 8014aa6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8014aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014aaa:	6919      	ldr	r1, [r3, #16]
 8014aac:	695b      	ldr	r3, [r3, #20]
 8014aae:	4288      	cmp	r0, r1
 8014ab0:	eb72 0303 	sbcs.w	r3, r2, r3
 8014ab4:	d2dd      	bcs.n	8014a72 <FindToken+0x16>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 8014ab6:	4b09      	ldr	r3, [pc, #36]	; (8014adc <FindToken+0x80>)
 8014ab8:	2201      	movs	r2, #1
 8014aba:	4907      	ldr	r1, [pc, #28]	; (8014ad8 <FindToken+0x7c>)
 8014abc:	4809      	ldr	r0, [pc, #36]	; (8014ae4 <FindToken+0x88>)
 8014abe:	f7f6 fbc2 	bl	800b246 <f_read>
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	d1f7      	bne.n	8014ab6 <FindToken+0x5a>
			if(tag[0] == 'P') break;
 8014ac6:	4b04      	ldr	r3, [pc, #16]	; (8014ad8 <FindToken+0x7c>)
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	2b50      	cmp	r3, #80	; 0x50
 8014acc:	d1ea      	bne.n	8014aa4 <FindToken+0x48>
 8014ace:	e7d0      	b.n	8014a72 <FindToken+0x16>
	return 1;
 8014ad0:	2501      	movs	r5, #1
}
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	bd38      	pop	{r3, r4, r5, pc}
 8014ad6:	bf00      	nop
 8014ad8:	200171b4 	.word	0x200171b4
 8014adc:	2000e374 	.word	0x2000e374
 8014ae0:	200171b5 	.word	0x200171b5
 8014ae4:	200017b0 	.word	0x200017b0

08014ae8 <DecodeRekordboxFiles>:
	}
	out_data >>= 8;
	return out_data;
}

uint8_t DecodeRekordboxFiles(TCHAR *path) {
 8014ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014aec:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 8014af0:	4604      	mov	r4, r0
	uint32_t data_size = 0;
	uint8_t k;
	uint32_t i;
	uint8_t res = FR_OK;
	for(i = 0; i < 1000; i++) {
 8014af2:	2300      	movs	r3, #0
 8014af4:	e00e      	b.n	8014b14 <DecodeRekordboxFiles+0x2c>
		rekordbox.bpm[i] = 0;
 8014af6:	4a95      	ldr	r2, [pc, #596]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014af8:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 8014afc:	2100      	movs	r1, #0
 8014afe:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
		rekordbox.phase[i] = 0;
 8014b02:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 8014b06:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
		rekordbox.timeindex[i] = 0;
 8014b0a:	f203 40aa 	addw	r0, r3, #1194	; 0x4aa
 8014b0e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
	for(i = 0; i < 1000; i++) {
 8014b12:	3301      	adds	r3, #1
 8014b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014b18:	d3ed      	bcc.n	8014af6 <DecodeRekordboxFiles+0xe>
	}
	rekordbox.cues = 0;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	4a8c      	ldr	r2, [pc, #560]	; (8014d50 <DecodeRekordboxFiles+0x268>)
 8014b1e:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
	// Clear SDRAM or fill with some pattern/color
	for(i = 0; i < 1000000; i++) *(__IO uint8_t*)(WAVE_BUFFER+i) = 0;
 8014b22:	e003      	b.n	8014b2c <DecodeRekordboxFiles+0x44>
 8014b24:	4a8b      	ldr	r2, [pc, #556]	; (8014d54 <DecodeRekordboxFiles+0x26c>)
 8014b26:	2100      	movs	r1, #0
 8014b28:	5499      	strb	r1, [r3, r2]
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	4a8a      	ldr	r2, [pc, #552]	; (8014d58 <DecodeRekordboxFiles+0x270>)
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	d9f8      	bls.n	8014b24 <DecodeRekordboxFiles+0x3c>
	for(i = 0; i < 255; i++) rekordbox.filename[i] = 0;
 8014b32:	2300      	movs	r3, #0
 8014b34:	e004      	b.n	8014b40 <DecodeRekordboxFiles+0x58>
 8014b36:	4a85      	ldr	r2, [pc, #532]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014b38:	2100      	movs	r1, #0
 8014b3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8014b3e:	3301      	adds	r3, #1
 8014b40:	2bfe      	cmp	r3, #254	; 0xfe
 8014b42:	d9f8      	bls.n	8014b36 <DecodeRekordboxFiles+0x4e>
	char filename[255] = {0};
 8014b44:	2500      	movs	r5, #0
 8014b46:	9580      	str	r5, [sp, #512]	; 0x200
 8014b48:	22fb      	movs	r2, #251	; 0xfb
 8014b4a:	4629      	mov	r1, r5
 8014b4c:	a881      	add	r0, sp, #516	; 0x204
 8014b4e:	f004 fa41 	bl	8018fd4 <memset>
	TCHAR my_path[255] = {0};
 8014b52:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8014b56:	4629      	mov	r1, r5
 8014b58:	4668      	mov	r0, sp
 8014b5a:	f004 fa3b 	bl	8018fd4 <memset>
	wcscpy(my_path, path);
 8014b5e:	4621      	mov	r1, r4
 8014b60:	4668      	mov	r0, sp
 8014b62:	f004 fb82 	bl	801926a <wcscpy>
	wcscat(my_path, L"/ANLZ0000.DAT");
 8014b66:	497d      	ldr	r1, [pc, #500]	; (8014d5c <DecodeRekordboxFiles+0x274>)
 8014b68:	4668      	mov	r0, sp
 8014b6a:	f004 fb6e 	bl	801924a <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8014b6e:	2201      	movs	r2, #1
 8014b70:	4669      	mov	r1, sp
 8014b72:	487b      	ldr	r0, [pc, #492]	; (8014d60 <DecodeRekordboxFiles+0x278>)
 8014b74:	f7f6 faf8 	bl	800b168 <f_open>
	if(res == FR_OK)
 8014b78:	b108      	cbz	r0, 8014b7e <DecodeRekordboxFiles+0x96>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);

		if(FindToken(cob_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
		rekordbox.cues = GetLongNumber() + 1;
		for(i = 1; i < rekordbox.cues; i++) {
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	e261      	b.n	8015042 <DecodeRekordboxFiles+0x55a>
		if(FindToken(path_token) != 0) return 1;
 8014b7e:	4879      	ldr	r0, [pc, #484]	; (8014d64 <DecodeRekordboxFiles+0x27c>)
 8014b80:	f7ff ff6c 	bl	8014a5c <FindToken>
 8014b84:	2800      	cmp	r0, #0
 8014b86:	f040 8604 	bne.w	8015792 <DecodeRekordboxFiles+0xcaa>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8014b8a:	4b77      	ldr	r3, [pc, #476]	; (8014d68 <DecodeRekordboxFiles+0x280>)
 8014b8c:	2208      	movs	r2, #8
 8014b8e:	4977      	ldr	r1, [pc, #476]	; (8014d6c <DecodeRekordboxFiles+0x284>)
 8014b90:	4873      	ldr	r0, [pc, #460]	; (8014d60 <DecodeRekordboxFiles+0x278>)
 8014b92:	f7f6 fb58 	bl	800b246 <f_read>
 8014b96:	2800      	cmp	r0, #0
 8014b98:	d1f7      	bne.n	8014b8a <DecodeRekordboxFiles+0xa2>
		data_size = GetLongNumber();
 8014b9a:	f7ff ff3b 	bl	8014a14 <GetLongNumber>
 8014b9e:	4605      	mov	r5, r0
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 8014ba0:	4b71      	ldr	r3, [pc, #452]	; (8014d68 <DecodeRekordboxFiles+0x280>)
 8014ba2:	462a      	mov	r2, r5
 8014ba4:	a980      	add	r1, sp, #512	; 0x200
 8014ba6:	486e      	ldr	r0, [pc, #440]	; (8014d60 <DecodeRekordboxFiles+0x278>)
 8014ba8:	f7f6 fb4d 	bl	800b246 <f_read>
 8014bac:	4606      	mov	r6, r0
 8014bae:	2800      	cmp	r0, #0
 8014bb0:	d1f6      	bne.n	8014ba0 <DecodeRekordboxFiles+0xb8>
		k = 0;
 8014bb2:	4607      	mov	r7, r0
		i = 0;
 8014bb4:	f04f 0800 	mov.w	r8, #0
		while(i < data_size) {
 8014bb8:	45a8      	cmp	r8, r5
 8014bba:	d216      	bcs.n	8014bea <DecodeRekordboxFiles+0x102>
			WCHAR c = filename[i];
 8014bbc:	f50d 7900 	add.w	r9, sp, #512	; 0x200
 8014bc0:	f819 3008 	ldrb.w	r3, [r9, r8]
			i++;
 8014bc4:	f108 0201 	add.w	r2, r8, #1
			c |= filename[i];
 8014bc8:	f819 0002 	ldrb.w	r0, [r9, r2]
 8014bcc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			i++;
 8014bd0:	f108 0802 	add.w	r8, r8, #2
			rekordbox.filename[k] = c;
 8014bd4:	4b5d      	ldr	r3, [pc, #372]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014bd6:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
			filename[k] = ff_convert(c, 0);
 8014bda:	2100      	movs	r1, #0
 8014bdc:	f7f6 fe12 	bl	800b804 <ff_convert>
 8014be0:	f809 0007 	strb.w	r0, [r9, r7]
			k++;
 8014be4:	3701      	adds	r7, #1
 8014be6:	b2ff      	uxtb	r7, r7
 8014be8:	e7e6      	b.n	8014bb8 <DecodeRekordboxFiles+0xd0>
		for(i = k; i < data_size; i++) filename[i] = 0;
 8014bea:	42af      	cmp	r7, r5
 8014bec:	d204      	bcs.n	8014bf8 <DecodeRekordboxFiles+0x110>
 8014bee:	ab80      	add	r3, sp, #512	; 0x200
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	55da      	strb	r2, [r3, r7]
 8014bf4:	3701      	adds	r7, #1
 8014bf6:	e7f8      	b.n	8014bea <DecodeRekordboxFiles+0x102>
		i = data_size;
 8014bf8:	462b      	mov	r3, r5
		while((i > 0) && (filename[i] != '.')) i--;
 8014bfa:	b1ab      	cbz	r3, 8014c28 <DecodeRekordboxFiles+0x140>
 8014bfc:	aa80      	add	r2, sp, #512	; 0x200
 8014bfe:	5cd2      	ldrb	r2, [r2, r3]
 8014c00:	2a2e      	cmp	r2, #46	; 0x2e
 8014c02:	d001      	beq.n	8014c08 <DecodeRekordboxFiles+0x120>
 8014c04:	3b01      	subs	r3, #1
 8014c06:	e7f8      	b.n	8014bfa <DecodeRekordboxFiles+0x112>
 8014c08:	4632      	mov	r2, r6
 8014c0a:	e000      	b.n	8014c0e <DecodeRekordboxFiles+0x126>
			i++;
 8014c0c:	3301      	adds	r3, #1
		while(k < 5)
 8014c0e:	2a04      	cmp	r2, #4
 8014c10:	d80c      	bhi.n	8014c2c <DecodeRekordboxFiles+0x144>
			if(filename[i] >= 32) {
 8014c12:	a980      	add	r1, sp, #512	; 0x200
 8014c14:	5cc9      	ldrb	r1, [r1, r3]
 8014c16:	291f      	cmp	r1, #31
 8014c18:	d9f8      	bls.n	8014c0c <DecodeRekordboxFiles+0x124>
				rekordbox.filetype[k] = filename[i];
 8014c1a:	484c      	ldr	r0, [pc, #304]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014c1c:	4410      	add	r0, r2
 8014c1e:	f880 12fd 	strb.w	r1, [r0, #765]	; 0x2fd
				k++;
 8014c22:	3201      	adds	r2, #1
 8014c24:	b2d2      	uxtb	r2, r2
 8014c26:	e7f1      	b.n	8014c0c <DecodeRekordboxFiles+0x124>
 8014c28:	4632      	mov	r2, r6
 8014c2a:	e7f0      	b.n	8014c0e <DecodeRekordboxFiles+0x126>
		rekordbox.filetype[4] = 0;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	4a47      	ldr	r2, [pc, #284]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014c30:	f882 3301 	strb.w	r3, [r2, #769]	; 0x301
		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 8014c34:	e005      	b.n	8014c42 <DecodeRekordboxFiles+0x15a>
 8014c36:	4a45      	ldr	r2, [pc, #276]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014c38:	441a      	add	r2, r3
 8014c3a:	2100      	movs	r1, #0
 8014c3c:	f882 11fe 	strb.w	r1, [r2, #510]	; 0x1fe
 8014c40:	3301      	adds	r3, #1
 8014c42:	2bfe      	cmp	r3, #254	; 0xfe
 8014c44:	d9f7      	bls.n	8014c36 <DecodeRekordboxFiles+0x14e>
		i = data_size;
 8014c46:	462b      	mov	r3, r5
 8014c48:	e000      	b.n	8014c4c <DecodeRekordboxFiles+0x164>
		while((i > 0) && (filename[i] != '/')) i--;
 8014c4a:	3b01      	subs	r3, #1
 8014c4c:	b11b      	cbz	r3, 8014c56 <DecodeRekordboxFiles+0x16e>
 8014c4e:	aa80      	add	r2, sp, #512	; 0x200
 8014c50:	5cd2      	ldrb	r2, [r2, r3]
 8014c52:	2a2f      	cmp	r2, #47	; 0x2f
 8014c54:	d1f9      	bne.n	8014c4a <DecodeRekordboxFiles+0x162>
		i++;
 8014c56:	3301      	adds	r3, #1
		while(i < data_size)
 8014c58:	e000      	b.n	8014c5c <DecodeRekordboxFiles+0x174>
			i++;
 8014c5a:	3301      	adds	r3, #1
		while(i < data_size)
 8014c5c:	42ab      	cmp	r3, r5
 8014c5e:	d20a      	bcs.n	8014c76 <DecodeRekordboxFiles+0x18e>
			if(filename[i] >= 32) {
 8014c60:	aa80      	add	r2, sp, #512	; 0x200
 8014c62:	5cd2      	ldrb	r2, [r2, r3]
 8014c64:	2a1f      	cmp	r2, #31
 8014c66:	d9f8      	bls.n	8014c5a <DecodeRekordboxFiles+0x172>
				rekordbox.file[k] = filename[i];
 8014c68:	4938      	ldr	r1, [pc, #224]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014c6a:	4431      	add	r1, r6
 8014c6c:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
				k++;
 8014c70:	3601      	adds	r6, #1
 8014c72:	b2f6      	uxtb	r6, r6
 8014c74:	e7f1      	b.n	8014c5a <DecodeRekordboxFiles+0x172>
		rekordbox.file[i] = 0;
 8014c76:	4a35      	ldr	r2, [pc, #212]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014c78:	4413      	add	r3, r2
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		if(FindToken(qtz_token) != 0) return 1;
 8014c80:	483b      	ldr	r0, [pc, #236]	; (8014d70 <DecodeRekordboxFiles+0x288>)
 8014c82:	f7ff feeb 	bl	8014a5c <FindToken>
 8014c86:	2800      	cmp	r0, #0
 8014c88:	f040 8585 	bne.w	8015796 <DecodeRekordboxFiles+0xcae>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 16 bytes
 8014c8c:	4b36      	ldr	r3, [pc, #216]	; (8014d68 <DecodeRekordboxFiles+0x280>)
 8014c8e:	2210      	movs	r2, #16
 8014c90:	4936      	ldr	r1, [pc, #216]	; (8014d6c <DecodeRekordboxFiles+0x284>)
 8014c92:	4833      	ldr	r0, [pc, #204]	; (8014d60 <DecodeRekordboxFiles+0x278>)
 8014c94:	f7f6 fad7 	bl	800b246 <f_read>
 8014c98:	4607      	mov	r7, r0
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	d1f6      	bne.n	8014c8c <DecodeRekordboxFiles+0x1a4>
		data_size = GetLongNumber();
 8014c9e:	f7ff feb9 	bl	8014a14 <GetLongNumber>
		rekordbox.timezones = data_size;
 8014ca2:	4b2a      	ldr	r3, [pc, #168]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014ca4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
		for(i=0; i<rekordbox.timezones; i++) {
 8014ca8:	2600      	movs	r6, #0
 8014caa:	e048      	b.n	8014d3e <DecodeRekordboxFiles+0x256>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 8014cac:	4b2e      	ldr	r3, [pc, #184]	; (8014d68 <DecodeRekordboxFiles+0x280>)
 8014cae:	2201      	movs	r2, #1
 8014cb0:	4930      	ldr	r1, [pc, #192]	; (8014d74 <DecodeRekordboxFiles+0x28c>)
 8014cb2:	4429      	add	r1, r5
 8014cb4:	482a      	ldr	r0, [pc, #168]	; (8014d60 <DecodeRekordboxFiles+0x278>)
 8014cb6:	f7f6 fac6 	bl	800b246 <f_read>
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d1f6      	bne.n	8014cac <DecodeRekordboxFiles+0x1c4>
			for(k=0; k<2; k++) {
 8014cbe:	3501      	adds	r5, #1
 8014cc0:	b2ed      	uxtb	r5, r5
 8014cc2:	2d01      	cmp	r5, #1
 8014cc4:	d9f2      	bls.n	8014cac <DecodeRekordboxFiles+0x1c4>
			rekordbox.phase[i] |= tag[0];
 8014cc6:	482b      	ldr	r0, [pc, #172]	; (8014d74 <DecodeRekordboxFiles+0x28c>)
 8014cc8:	7803      	ldrb	r3, [r0, #0]
 8014cca:	4a20      	ldr	r2, [pc, #128]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014ccc:	f206 516c 	addw	r1, r6, #1388	; 0x56c
 8014cd0:	f832 5011 	ldrh.w	r5, [r2, r1, lsl #1]
 8014cd4:	432b      	orrs	r3, r5
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			rekordbox.phase[i] <<= 8;
 8014cdc:	021b      	lsls	r3, r3, #8
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			rekordbox.phase[i] |= tag[1];
 8014ce4:	7840      	ldrb	r0, [r0, #1]
 8014ce6:	4303      	orrs	r3, r0
 8014ce8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			for(k=0; k<2; k++) {
 8014cec:	463d      	mov	r5, r7
 8014cee:	e00a      	b.n	8014d06 <DecodeRekordboxFiles+0x21e>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 8014cf0:	4b1d      	ldr	r3, [pc, #116]	; (8014d68 <DecodeRekordboxFiles+0x280>)
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	491f      	ldr	r1, [pc, #124]	; (8014d74 <DecodeRekordboxFiles+0x28c>)
 8014cf6:	4429      	add	r1, r5
 8014cf8:	4819      	ldr	r0, [pc, #100]	; (8014d60 <DecodeRekordboxFiles+0x278>)
 8014cfa:	f7f6 faa4 	bl	800b246 <f_read>
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	d1f6      	bne.n	8014cf0 <DecodeRekordboxFiles+0x208>
			for(k=0; k<2; k++) {
 8014d02:	3501      	adds	r5, #1
 8014d04:	b2ed      	uxtb	r5, r5
 8014d06:	2d01      	cmp	r5, #1
 8014d08:	d9f2      	bls.n	8014cf0 <DecodeRekordboxFiles+0x208>
			rekordbox.bpm[i] |= tag[0];
 8014d0a:	491a      	ldr	r1, [pc, #104]	; (8014d74 <DecodeRekordboxFiles+0x28c>)
 8014d0c:	780b      	ldrb	r3, [r1, #0]
 8014d0e:	4d0f      	ldr	r5, [pc, #60]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014d10:	f506 72c2 	add.w	r2, r6, #388	; 0x184
 8014d14:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 8014d18:	4303      	orrs	r3, r0
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.bpm[i] <<= 8;
 8014d20:	021b      	lsls	r3, r3, #8
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.bpm[i] |= tag[1];
 8014d28:	7849      	ldrb	r1, [r1, #1]
 8014d2a:	430b      	orrs	r3, r1
 8014d2c:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.timeindex[i] = GetLongNumber();
 8014d30:	f7ff fe70 	bl	8014a14 <GetLongNumber>
 8014d34:	f206 43aa 	addw	r3, r6, #1194	; 0x4aa
 8014d38:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
		for(i=0; i<rekordbox.timezones; i++) {
 8014d3c:	3601      	adds	r6, #1
 8014d3e:	4b03      	ldr	r3, [pc, #12]	; (8014d4c <DecodeRekordboxFiles+0x264>)
 8014d40:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8014d44:	42b3      	cmp	r3, r6
 8014d46:	d917      	bls.n	8014d78 <DecodeRekordboxFiles+0x290>
			for(k=0; k<2; k++) {
 8014d48:	463d      	mov	r5, r7
 8014d4a:	e7ba      	b.n	8014cc2 <DecodeRekordboxFiles+0x1da>
 8014d4c:	20014618 	.word	0x20014618
 8014d50:	20016618 	.word	0x20016618
 8014d54:	c00ff000 	.word	0xc00ff000
 8014d58:	000f423f 	.word	0x000f423f
 8014d5c:	0801e974 	.word	0x0801e974
 8014d60:	200017b0 	.word	0x200017b0
 8014d64:	20000074 	.word	0x20000074
 8014d68:	2000e374 	.word	0x2000e374
 8014d6c:	200007a0 	.word	0x200007a0
 8014d70:	2000007c 	.word	0x2000007c
 8014d74:	200171b4 	.word	0x200171b4
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 8014d78:	4bbb      	ldr	r3, [pc, #748]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014d7a:	f8b3 3ad8 	ldrh.w	r3, [r3, #2776]	; 0xad8
 8014d7e:	2b01      	cmp	r3, #1
 8014d80:	d03e      	beq.n	8014e00 <DecodeRekordboxFiles+0x318>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 8014d82:	3b01      	subs	r3, #1
 8014d84:	4ab9      	ldr	r2, [pc, #740]	; (801506c <DecodeRekordboxFiles+0x584>)
 8014d86:	f882 3248 	strb.w	r3, [r2, #584]	; 0x248
		if(FindToken(wave_token) != 0) return 1;
 8014d8a:	48b9      	ldr	r0, [pc, #740]	; (8015070 <DecodeRekordboxFiles+0x588>)
 8014d8c:	f7ff fe66 	bl	8014a5c <FindToken>
 8014d90:	2800      	cmp	r0, #0
 8014d92:	f040 8502 	bne.w	801579a <DecodeRekordboxFiles+0xcb2>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8014d96:	4bb7      	ldr	r3, [pc, #732]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014d98:	2208      	movs	r2, #8
 8014d9a:	49b7      	ldr	r1, [pc, #732]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014d9c:	48b7      	ldr	r0, [pc, #732]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014d9e:	f7f6 fa52 	bl	800b246 <f_read>
 8014da2:	2800      	cmp	r0, #0
 8014da4:	d1f7      	bne.n	8014d96 <DecodeRekordboxFiles+0x2ae>
		rekordbox.lowp_spectrum_size = GetLongNumber();
 8014da6:	f7ff fe35 	bl	8014a14 <GetLongNumber>
 8014daa:	4bb0      	ldr	r3, [pc, #704]	; (801506c <DecodeRekordboxFiles+0x584>)
 8014dac:	f8c3 024c 	str.w	r0, [r3, #588]	; 0x24c
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8014db0:	4bb0      	ldr	r3, [pc, #704]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014db2:	2204      	movs	r2, #4
 8014db4:	49b0      	ldr	r1, [pc, #704]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014db6:	48b1      	ldr	r0, [pc, #708]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014db8:	f7f6 fa45 	bl	800b246 <f_read>
 8014dbc:	2800      	cmp	r0, #0
 8014dbe:	d1f7      	bne.n	8014db0 <DecodeRekordboxFiles+0x2c8>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 8014dc0:	4bac      	ldr	r3, [pc, #688]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014dc2:	4aaa      	ldr	r2, [pc, #680]	; (801506c <DecodeRekordboxFiles+0x584>)
 8014dc4:	f8d2 224c 	ldr.w	r2, [r2, #588]	; 0x24c
 8014dc8:	49ad      	ldr	r1, [pc, #692]	; (8015080 <DecodeRekordboxFiles+0x598>)
 8014dca:	48ac      	ldr	r0, [pc, #688]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014dcc:	f7f6 fa3b 	bl	800b246 <f_read>
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	d1f5      	bne.n	8014dc0 <DecodeRekordboxFiles+0x2d8>
		if(FindToken(cob_token) != 0) return 1;
 8014dd4:	48ab      	ldr	r0, [pc, #684]	; (8015084 <DecodeRekordboxFiles+0x59c>)
 8014dd6:	f7ff fe41 	bl	8014a5c <FindToken>
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	f040 84df 	bne.w	801579e <DecodeRekordboxFiles+0xcb6>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 8014de0:	4ba4      	ldr	r3, [pc, #656]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014de2:	220c      	movs	r2, #12
 8014de4:	49a4      	ldr	r1, [pc, #656]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014de6:	48a5      	ldr	r0, [pc, #660]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014de8:	f7f6 fa2d 	bl	800b246 <f_read>
 8014dec:	2800      	cmp	r0, #0
 8014dee:	d1f7      	bne.n	8014de0 <DecodeRekordboxFiles+0x2f8>
		rekordbox.cues = GetLongNumber() + 1;
 8014df0:	f7ff fe10 	bl	8014a14 <GetLongNumber>
 8014df4:	3001      	adds	r0, #1
 8014df6:	4a9d      	ldr	r2, [pc, #628]	; (801506c <DecodeRekordboxFiles+0x584>)
 8014df8:	f8c2 0358 	str.w	r0, [r2, #856]	; 0x358
		for(i = 1; i < rekordbox.cues; i++) {
 8014dfc:	2501      	movs	r5, #1
 8014dfe:	e005      	b.n	8014e0c <DecodeRekordboxFiles+0x324>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 8014e00:	4b9a      	ldr	r3, [pc, #616]	; (801506c <DecodeRekordboxFiles+0x584>)
 8014e02:	2204      	movs	r2, #4
 8014e04:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8014e08:	e7bf      	b.n	8014d8a <DecodeRekordboxFiles+0x2a2>
		for(i = 1; i < rekordbox.cues; i++) {
 8014e0a:	3501      	adds	r5, #1
 8014e0c:	4b97      	ldr	r3, [pc, #604]	; (801506c <DecodeRekordboxFiles+0x584>)
 8014e0e:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8014e12:	42ab      	cmp	r3, r5
 8014e14:	d976      	bls.n	8014f04 <DecodeRekordboxFiles+0x41c>
			if(FindToken(cue_token) != 0) return 1;
 8014e16:	489c      	ldr	r0, [pc, #624]	; (8015088 <DecodeRekordboxFiles+0x5a0>)
 8014e18:	f7ff fe20 	bl	8014a5c <FindToken>
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	f040 84c0 	bne.w	80157a2 <DecodeRekordboxFiles+0xcba>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8014e22:	4b94      	ldr	r3, [pc, #592]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014e24:	2208      	movs	r2, #8
 8014e26:	4994      	ldr	r1, [pc, #592]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014e28:	4894      	ldr	r0, [pc, #592]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014e2a:	f7f6 fa0c 	bl	800b246 <f_read>
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	d1f7      	bne.n	8014e22 <DecodeRekordboxFiles+0x33a>
			rekordbox.cue_number[i] = GetLongNumber();
 8014e32:	f7ff fdef 	bl	8014a14 <GetLongNumber>
 8014e36:	4e8c      	ldr	r6, [pc, #560]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014e38:	f605 03d6 	addw	r3, r5, #2262	; 0x8d6
 8014e3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014e40:	6058      	str	r0, [r3, #4]
			rekordbox.cue_active[i] = GetLongNumber();
 8014e42:	f7ff fde7 	bl	8014a14 <GetLongNumber>
 8014e46:	f605 133a 	addw	r3, r5, #2362	; 0x93a
 8014e4a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8014e4e:	6070      	str	r0, [r6, #4]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8014e50:	4b88      	ldr	r3, [pc, #544]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014e52:	2204      	movs	r2, #4
 8014e54:	4988      	ldr	r1, [pc, #544]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014e56:	4889      	ldr	r0, [pc, #548]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014e58:	f7f6 f9f5 	bl	800b246 <f_read>
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	d1f7      	bne.n	8014e50 <DecodeRekordboxFiles+0x368>
			rekordbox.cue_type[i] = GetLongNumber();
 8014e60:	f7ff fdd8 	bl	8014a14 <GetLongNumber>
 8014e64:	f605 129e 	addw	r2, r5, #2462	; 0x99e
 8014e68:	4b7f      	ldr	r3, [pc, #508]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014e6a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014e6e:	6058      	str	r0, [r3, #4]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 8014e70:	f642 3128 	movw	r1, #11048	; 0x2b28
 8014e74:	4429      	add	r1, r5
 8014e76:	4b7c      	ldr	r3, [pc, #496]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014e78:	4419      	add	r1, r3
 8014e7a:	4b7e      	ldr	r3, [pc, #504]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	3104      	adds	r1, #4
 8014e80:	487e      	ldr	r0, [pc, #504]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014e82:	f7f6 f9e0 	bl	800b246 <f_read>
 8014e86:	2800      	cmp	r0, #0
 8014e88:	d1f2      	bne.n	8014e70 <DecodeRekordboxFiles+0x388>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 8014e8a:	4b7a      	ldr	r3, [pc, #488]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014e8c:	2203      	movs	r2, #3
 8014e8e:	497a      	ldr	r1, [pc, #488]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014e90:	487a      	ldr	r0, [pc, #488]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014e92:	f7f6 f9d8 	bl	800b246 <f_read>
 8014e96:	2800      	cmp	r0, #0
 8014e98:	d1f7      	bne.n	8014e8a <DecodeRekordboxFiles+0x3a2>
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8014e9a:	f7ff fdbb 	bl	8014a14 <GetLongNumber>
 8014e9e:	ee07 0a90 	vmov	s15, r0
 8014ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ea6:	ed9f 7a79 	vldr	s14, [pc, #484]	; 801508c <DecodeRekordboxFiles+0x5a4>
 8014eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014eae:	eddf 6a78 	vldr	s13, [pc, #480]	; 8015090 <DecodeRekordboxFiles+0x5a8>
 8014eb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014eb6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014eba:	4b6b      	ldr	r3, [pc, #428]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014ebc:	f605 2202 	addw	r2, r5, #2562	; 0xa02
 8014ec0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8014ec4:	ed82 7a01 	vstr	s14, [r2, #4]
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8014ec8:	442b      	add	r3, r5
 8014eca:	f642 322c 	movw	r2, #11052	; 0x2b2c
 8014ece:	5c9b      	ldrb	r3, [r3, r2]
 8014ed0:	2b02      	cmp	r3, #2
 8014ed2:	d19a      	bne.n	8014e0a <DecodeRekordboxFiles+0x322>
 8014ed4:	f7ff fd9e 	bl	8014a14 <GetLongNumber>
 8014ed8:	ee07 0a90 	vmov	s15, r0
 8014edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ee0:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 801508c <DecodeRekordboxFiles+0x5a4>
 8014ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ee8:	eddf 6a69 	vldr	s13, [pc, #420]	; 8015090 <DecodeRekordboxFiles+0x5a8>
 8014eec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014ef0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014ef4:	f605 2266 	addw	r2, r5, #2662	; 0xa66
 8014ef8:	4b5b      	ldr	r3, [pc, #364]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014efa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014efe:	ed83 7a01 	vstr	s14, [r3, #4]
 8014f02:	e782      	b.n	8014e0a <DecodeRekordboxFiles+0x322>
		}
		if(FindToken(cob_token) != 0) return 1;
 8014f04:	485f      	ldr	r0, [pc, #380]	; (8015084 <DecodeRekordboxFiles+0x59c>)
 8014f06:	f7ff fda9 	bl	8014a5c <FindToken>
 8014f0a:	2800      	cmp	r0, #0
 8014f0c:	f040 844b 	bne.w	80157a6 <DecodeRekordboxFiles+0xcbe>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 8014f10:	4b58      	ldr	r3, [pc, #352]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014f12:	220c      	movs	r2, #12
 8014f14:	4958      	ldr	r1, [pc, #352]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014f16:	4859      	ldr	r0, [pc, #356]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014f18:	f7f6 f995 	bl	800b246 <f_read>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d1f7      	bne.n	8014f10 <DecodeRekordboxFiles+0x428>
		rekordbox.cues += GetLongNumber();
 8014f20:	f7ff fd78 	bl	8014a14 <GetLongNumber>
 8014f24:	4a51      	ldr	r2, [pc, #324]	; (801506c <DecodeRekordboxFiles+0x584>)
 8014f26:	f8d2 3358 	ldr.w	r3, [r2, #856]	; 0x358
 8014f2a:	4403      	add	r3, r0
 8014f2c:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
		k = i;
 8014f30:	b2ed      	uxtb	r5, r5
		for(k = i; k < rekordbox.cues; k++) {
 8014f32:	e001      	b.n	8014f38 <DecodeRekordboxFiles+0x450>
 8014f34:	3501      	adds	r5, #1
 8014f36:	b2ed      	uxtb	r5, r5
 8014f38:	462e      	mov	r6, r5
 8014f3a:	4b4c      	ldr	r3, [pc, #304]	; (801506c <DecodeRekordboxFiles+0x584>)
 8014f3c:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8014f40:	429d      	cmp	r5, r3
 8014f42:	da76      	bge.n	8015032 <DecodeRekordboxFiles+0x54a>
			if(FindToken(cue_token) != 0) return 1;
 8014f44:	4850      	ldr	r0, [pc, #320]	; (8015088 <DecodeRekordboxFiles+0x5a0>)
 8014f46:	f7ff fd89 	bl	8014a5c <FindToken>
 8014f4a:	2800      	cmp	r0, #0
 8014f4c:	f040 842d 	bne.w	80157aa <DecodeRekordboxFiles+0xcc2>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8014f50:	4b48      	ldr	r3, [pc, #288]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014f52:	2208      	movs	r2, #8
 8014f54:	4948      	ldr	r1, [pc, #288]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014f56:	4849      	ldr	r0, [pc, #292]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014f58:	f7f6 f975 	bl	800b246 <f_read>
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d1f7      	bne.n	8014f50 <DecodeRekordboxFiles+0x468>
			rekordbox.cue_number[k] = GetLongNumber();
 8014f60:	f7ff fd58 	bl	8014a14 <GetLongNumber>
 8014f64:	4f40      	ldr	r7, [pc, #256]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014f66:	f606 03d6 	addw	r3, r6, #2262	; 0x8d6
 8014f6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014f6e:	6058      	str	r0, [r3, #4]
			rekordbox.cue_active[k] = GetLongNumber();
 8014f70:	f7ff fd50 	bl	8014a14 <GetLongNumber>
 8014f74:	f606 133a 	addw	r3, r6, #2362	; 0x93a
 8014f78:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8014f7c:	6078      	str	r0, [r7, #4]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 8014f7e:	4b3d      	ldr	r3, [pc, #244]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014f80:	2204      	movs	r2, #4
 8014f82:	493d      	ldr	r1, [pc, #244]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014f84:	483d      	ldr	r0, [pc, #244]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014f86:	f7f6 f95e 	bl	800b246 <f_read>
 8014f8a:	2800      	cmp	r0, #0
 8014f8c:	d1f7      	bne.n	8014f7e <DecodeRekordboxFiles+0x496>
			rekordbox.cue_type[k] = GetLongNumber();
 8014f8e:	f7ff fd41 	bl	8014a14 <GetLongNumber>
 8014f92:	f606 129e 	addw	r2, r6, #2462	; 0x99e
 8014f96:	4b34      	ldr	r3, [pc, #208]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014f98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014f9c:	6058      	str	r0, [r3, #4]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 8014f9e:	f642 3128 	movw	r1, #11048	; 0x2b28
 8014fa2:	4431      	add	r1, r6
 8014fa4:	4b30      	ldr	r3, [pc, #192]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014fa6:	4419      	add	r1, r3
 8014fa8:	4b32      	ldr	r3, [pc, #200]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014faa:	2201      	movs	r2, #1
 8014fac:	3104      	adds	r1, #4
 8014fae:	4833      	ldr	r0, [pc, #204]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014fb0:	f7f6 f949 	bl	800b246 <f_read>
 8014fb4:	2800      	cmp	r0, #0
 8014fb6:	d1f2      	bne.n	8014f9e <DecodeRekordboxFiles+0x4b6>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 8014fb8:	4b2e      	ldr	r3, [pc, #184]	; (8015074 <DecodeRekordboxFiles+0x58c>)
 8014fba:	2203      	movs	r2, #3
 8014fbc:	492e      	ldr	r1, [pc, #184]	; (8015078 <DecodeRekordboxFiles+0x590>)
 8014fbe:	482f      	ldr	r0, [pc, #188]	; (801507c <DecodeRekordboxFiles+0x594>)
 8014fc0:	f7f6 f941 	bl	800b246 <f_read>
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	d1f7      	bne.n	8014fb8 <DecodeRekordboxFiles+0x4d0>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 8014fc8:	f7ff fd24 	bl	8014a14 <GetLongNumber>
 8014fcc:	ee07 0a90 	vmov	s15, r0
 8014fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fd4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 801508c <DecodeRekordboxFiles+0x5a4>
 8014fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fdc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8015090 <DecodeRekordboxFiles+0x5a8>
 8014fe0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014fe4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014fe8:	4b1f      	ldr	r3, [pc, #124]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8014fea:	f606 2202 	addw	r2, r6, #2562	; 0xa02
 8014fee:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8014ff2:	ed82 7a01 	vstr	s14, [r2, #4]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 8014ff6:	4433      	add	r3, r6
 8014ff8:	f642 322c 	movw	r2, #11052	; 0x2b2c
 8014ffc:	5c9b      	ldrb	r3, [r3, r2]
 8014ffe:	2b02      	cmp	r3, #2
 8015000:	d198      	bne.n	8014f34 <DecodeRekordboxFiles+0x44c>
 8015002:	f7ff fd07 	bl	8014a14 <GetLongNumber>
 8015006:	ee07 0a90 	vmov	s15, r0
 801500a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801500e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801508c <DecodeRekordboxFiles+0x5a4>
 8015012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015016:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8015090 <DecodeRekordboxFiles+0x5a8>
 801501a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801501e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015022:	f606 2666 	addw	r6, r6, #2662	; 0xa66
 8015026:	4b10      	ldr	r3, [pc, #64]	; (8015068 <DecodeRekordboxFiles+0x580>)
 8015028:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801502c:	ed83 7a01 	vstr	s14, [r3, #4]
 8015030:	e780      	b.n	8014f34 <DecodeRekordboxFiles+0x44c>
		}
		f_close(&MyFile);
 8015032:	4812      	ldr	r0, [pc, #72]	; (801507c <DecodeRekordboxFiles+0x594>)
 8015034:	f7f6 f9ce 	bl	800b3d4 <f_close>
 8015038:	e59f      	b.n	8014b7a <DecodeRekordboxFiles+0x92>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 801503a:	2200      	movs	r2, #0
 801503c:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
 8015040:	3301      	adds	r3, #1
 8015042:	2bfe      	cmp	r3, #254	; 0xfe
 8015044:	d9f9      	bls.n	801503a <DecodeRekordboxFiles+0x552>
	wcscpy(my_path, path);
 8015046:	4621      	mov	r1, r4
 8015048:	4668      	mov	r0, sp
 801504a:	f004 f90e 	bl	801926a <wcscpy>
	wcscat(my_path, L"/ANLZ0000.EXT");
 801504e:	4911      	ldr	r1, [pc, #68]	; (8015094 <DecodeRekordboxFiles+0x5ac>)
 8015050:	4668      	mov	r0, sp
 8015052:	f004 f8fa 	bl	801924a <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8015056:	2201      	movs	r2, #1
 8015058:	4669      	mov	r1, sp
 801505a:	4808      	ldr	r0, [pc, #32]	; (801507c <DecodeRekordboxFiles+0x594>)
 801505c:	f7f6 f884 	bl	800b168 <f_open>
	if(res == FR_OK) {
 8015060:	b1d0      	cbz	r0, 8015098 <DecodeRekordboxFiles+0x5b0>
		if(FindToken(wv3_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
		rekordbox.spectrum_size = GetLongNumber();
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
		rekordbox.cue_start_position[0] = 0;
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 8015062:	2300      	movs	r3, #0
 8015064:	e06a      	b.n	801513c <DecodeRekordboxFiles+0x654>
 8015066:	bf00      	nop
 8015068:	20014618 	.word	0x20014618
 801506c:	20016618 	.word	0x20016618
 8015070:	20000084 	.word	0x20000084
 8015074:	2000e374 	.word	0x2000e374
 8015078:	200007a0 	.word	0x200007a0
 801507c:	200017b0 	.word	0x200017b0
 8015080:	2000e600 	.word	0x2000e600
 8015084:	20000064 	.word	0x20000064
 8015088:	2000006c 	.word	0x2000006c
 801508c:	43160000 	.word	0x43160000
 8015090:	447a0000 	.word	0x447a0000
 8015094:	0801e9ac 	.word	0x0801e9ac
		if(FindToken(wv3_token) != 0) return 1;
 8015098:	48a5      	ldr	r0, [pc, #660]	; (8015330 <DecodeRekordboxFiles+0x848>)
 801509a:	f7ff fcdf 	bl	8014a5c <FindToken>
 801509e:	2800      	cmp	r0, #0
 80150a0:	f040 8385 	bne.w	80157ae <DecodeRekordboxFiles+0xcc6>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 80150a4:	4ba3      	ldr	r3, [pc, #652]	; (8015334 <DecodeRekordboxFiles+0x84c>)
 80150a6:	220c      	movs	r2, #12
 80150a8:	49a3      	ldr	r1, [pc, #652]	; (8015338 <DecodeRekordboxFiles+0x850>)
 80150aa:	48a4      	ldr	r0, [pc, #656]	; (801533c <DecodeRekordboxFiles+0x854>)
 80150ac:	f7f6 f8cb 	bl	800b246 <f_read>
 80150b0:	2800      	cmp	r0, #0
 80150b2:	d1f7      	bne.n	80150a4 <DecodeRekordboxFiles+0x5bc>
		rekordbox.spectrum_size = GetLongNumber();
 80150b4:	f7ff fcae 	bl	8014a14 <GetLongNumber>
 80150b8:	4ba1      	ldr	r3, [pc, #644]	; (8015340 <DecodeRekordboxFiles+0x858>)
 80150ba:	f8c3 0250 	str.w	r0, [r3, #592]	; 0x250
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 80150be:	4b9d      	ldr	r3, [pc, #628]	; (8015334 <DecodeRekordboxFiles+0x84c>)
 80150c0:	2204      	movs	r2, #4
 80150c2:	499d      	ldr	r1, [pc, #628]	; (8015338 <DecodeRekordboxFiles+0x850>)
 80150c4:	489d      	ldr	r0, [pc, #628]	; (801533c <DecodeRekordboxFiles+0x854>)
 80150c6:	f7f6 f8be 	bl	800b246 <f_read>
 80150ca:	2800      	cmp	r0, #0
 80150cc:	d1f7      	bne.n	80150be <DecodeRekordboxFiles+0x5d6>
		rekordbox.cue_start_position[0] = 0;
 80150ce:	2500      	movs	r5, #0
 80150d0:	4b9b      	ldr	r3, [pc, #620]	; (8015340 <DecodeRekordboxFiles+0x858>)
 80150d2:	f8c3 580c 	str.w	r5, [r3, #2060]	; 0x80c
		for(i = 0; i < rekordbox.spectrum_size; i++) {
 80150d6:	e000      	b.n	80150da <DecodeRekordboxFiles+0x5f2>
 80150d8:	3501      	adds	r5, #1
 80150da:	4b99      	ldr	r3, [pc, #612]	; (8015340 <DecodeRekordboxFiles+0x858>)
 80150dc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80150e0:	42ab      	cmp	r3, r5
 80150e2:	d923      	bls.n	801512c <DecodeRekordboxFiles+0x644>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 80150e4:	4b93      	ldr	r3, [pc, #588]	; (8015334 <DecodeRekordboxFiles+0x84c>)
 80150e6:	2201      	movs	r2, #1
 80150e8:	4996      	ldr	r1, [pc, #600]	; (8015344 <DecodeRekordboxFiles+0x85c>)
 80150ea:	4894      	ldr	r0, [pc, #592]	; (801533c <DecodeRekordboxFiles+0x854>)
 80150ec:	f7f6 f8ab 	bl	800b246 <f_read>
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d1f7      	bne.n	80150e4 <DecodeRekordboxFiles+0x5fc>
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 80150f4:	4b93      	ldr	r3, [pc, #588]	; (8015344 <DecodeRekordboxFiles+0x85c>)
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	4a93      	ldr	r2, [pc, #588]	; (8015348 <DecodeRekordboxFiles+0x860>)
 80150fa:	54ab      	strb	r3, [r5, r2]
			if(rekordbox.autocue == 1) {
 80150fc:	4a90      	ldr	r2, [pc, #576]	; (8015340 <DecodeRekordboxFiles+0x858>)
 80150fe:	f892 2b90 	ldrb.w	r2, [r2, #2960]	; 0xb90
 8015102:	2a01      	cmp	r2, #1
 8015104:	d1e8      	bne.n	80150d8 <DecodeRekordboxFiles+0x5f0>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 8015106:	4a91      	ldr	r2, [pc, #580]	; (801534c <DecodeRekordboxFiles+0x864>)
 8015108:	7812      	ldrb	r2, [r2, #0]
 801510a:	4991      	ldr	r1, [pc, #580]	; (8015350 <DecodeRekordboxFiles+0x868>)
 801510c:	fba1 1202 	umull	r1, r2, r1, r2
 8015110:	f003 011f 	and.w	r1, r3, #31
 8015114:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 8015118:	d9de      	bls.n	80150d8 <DecodeRekordboxFiles+0x5f0>
 801511a:	09db      	lsrs	r3, r3, #7
 801511c:	d1dc      	bne.n	80150d8 <DecodeRekordboxFiles+0x5f0>
					rekordbox.autocue = 2;
 801511e:	4b88      	ldr	r3, [pc, #544]	; (8015340 <DecodeRekordboxFiles+0x858>)
 8015120:	2202      	movs	r2, #2
 8015122:	f883 2b90 	strb.w	r2, [r3, #2960]	; 0xb90
					rekordbox.cue_start_position[0] = i;
 8015126:	f8c3 580c 	str.w	r5, [r3, #2060]	; 0x80c
 801512a:	e7d5      	b.n	80150d8 <DecodeRekordboxFiles+0x5f0>
				}
			}
		}
		f_close(&MyFile);
 801512c:	4883      	ldr	r0, [pc, #524]	; (801533c <DecodeRekordboxFiles+0x854>)
 801512e:	f7f6 f951 	bl	800b3d4 <f_close>
 8015132:	e796      	b.n	8015062 <DecodeRekordboxFiles+0x57a>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 8015134:	2200      	movs	r2, #0
 8015136:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
 801513a:	3301      	adds	r3, #1
 801513c:	2bfe      	cmp	r3, #254	; 0xfe
 801513e:	d9f9      	bls.n	8015134 <DecodeRekordboxFiles+0x64c>
	wcscpy(my_path, path);
 8015140:	4621      	mov	r1, r4
 8015142:	4668      	mov	r0, sp
 8015144:	f004 f891 	bl	801926a <wcscpy>
	wcscat(my_path, L"/ANLZ0001.DAT");
 8015148:	4982      	ldr	r1, [pc, #520]	; (8015354 <DecodeRekordboxFiles+0x86c>)
 801514a:	4668      	mov	r0, sp
 801514c:	f004 f87d 	bl	801924a <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8015150:	2201      	movs	r2, #1
 8015152:	4669      	mov	r1, sp
 8015154:	4879      	ldr	r0, [pc, #484]	; (801533c <DecodeRekordboxFiles+0x854>)
 8015156:	f7f6 f807 	bl	800b168 <f_open>
	if(res == FR_OK)
 801515a:	b108      	cbz	r0, 8015160 <DecodeRekordboxFiles+0x678>
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
		if(FindToken(cob_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
		rekordbox.cues = GetLongNumber() + 1;
		for(i = 1; i < rekordbox.cues; i++) {
 801515c:	2300      	movs	r3, #0
 801515e:	e266      	b.n	801562e <DecodeRekordboxFiles+0xb46>
		if(FindToken(path_token) != 0) return 1;
 8015160:	487d      	ldr	r0, [pc, #500]	; (8015358 <DecodeRekordboxFiles+0x870>)
 8015162:	f7ff fc7b 	bl	8014a5c <FindToken>
 8015166:	2800      	cmp	r0, #0
 8015168:	f040 8323 	bne.w	80157b2 <DecodeRekordboxFiles+0xcca>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801516c:	4b71      	ldr	r3, [pc, #452]	; (8015334 <DecodeRekordboxFiles+0x84c>)
 801516e:	2208      	movs	r2, #8
 8015170:	4971      	ldr	r1, [pc, #452]	; (8015338 <DecodeRekordboxFiles+0x850>)
 8015172:	4872      	ldr	r0, [pc, #456]	; (801533c <DecodeRekordboxFiles+0x854>)
 8015174:	f7f6 f867 	bl	800b246 <f_read>
 8015178:	2800      	cmp	r0, #0
 801517a:	d1f7      	bne.n	801516c <DecodeRekordboxFiles+0x684>
		data_size = GetLongNumber();
 801517c:	f7ff fc4a 	bl	8014a14 <GetLongNumber>
 8015180:	4605      	mov	r5, r0
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 8015182:	4b6c      	ldr	r3, [pc, #432]	; (8015334 <DecodeRekordboxFiles+0x84c>)
 8015184:	462a      	mov	r2, r5
 8015186:	a980      	add	r1, sp, #512	; 0x200
 8015188:	486c      	ldr	r0, [pc, #432]	; (801533c <DecodeRekordboxFiles+0x854>)
 801518a:	f7f6 f85c 	bl	800b246 <f_read>
 801518e:	4606      	mov	r6, r0
 8015190:	2800      	cmp	r0, #0
 8015192:	d1f6      	bne.n	8015182 <DecodeRekordboxFiles+0x69a>
		k = 0;
 8015194:	4607      	mov	r7, r0
		i = 0;
 8015196:	f04f 0800 	mov.w	r8, #0
 801519a:	e015      	b.n	80151c8 <DecodeRekordboxFiles+0x6e0>
			WCHAR c = filename[i];
 801519c:	f50d 7900 	add.w	r9, sp, #512	; 0x200
 80151a0:	f819 3008 	ldrb.w	r3, [r9, r8]
			i++;
 80151a4:	f108 0201 	add.w	r2, r8, #1
			c |= filename[i];
 80151a8:	f819 0002 	ldrb.w	r0, [r9, r2]
 80151ac:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			i++;
 80151b0:	f108 0802 	add.w	r8, r8, #2
			rekordbox.filename[k] = c;
 80151b4:	4b69      	ldr	r3, [pc, #420]	; (801535c <DecodeRekordboxFiles+0x874>)
 80151b6:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
			filename[k] = ff_convert(c, 0);
 80151ba:	2100      	movs	r1, #0
 80151bc:	f7f6 fb22 	bl	800b804 <ff_convert>
 80151c0:	f809 0007 	strb.w	r0, [r9, r7]
			k++;
 80151c4:	1c7b      	adds	r3, r7, #1
 80151c6:	b2df      	uxtb	r7, r3
		while(i < data_size) {
 80151c8:	45a8      	cmp	r8, r5
 80151ca:	d3e7      	bcc.n	801519c <DecodeRekordboxFiles+0x6b4>
		for(i = k; i < data_size; i++) filename[i] = 0;
 80151cc:	463b      	mov	r3, r7
 80151ce:	e003      	b.n	80151d8 <DecodeRekordboxFiles+0x6f0>
 80151d0:	aa80      	add	r2, sp, #512	; 0x200
 80151d2:	2100      	movs	r1, #0
 80151d4:	54d1      	strb	r1, [r2, r3]
 80151d6:	3301      	adds	r3, #1
 80151d8:	42ab      	cmp	r3, r5
 80151da:	d3f9      	bcc.n	80151d0 <DecodeRekordboxFiles+0x6e8>
		i = data_size;
 80151dc:	462b      	mov	r3, r5
 80151de:	e000      	b.n	80151e2 <DecodeRekordboxFiles+0x6fa>
		while((i > 0) && (filename[i] != '.')) i--;
 80151e0:	3b01      	subs	r3, #1
 80151e2:	b19b      	cbz	r3, 801520c <DecodeRekordboxFiles+0x724>
 80151e4:	aa80      	add	r2, sp, #512	; 0x200
 80151e6:	5cd2      	ldrb	r2, [r2, r3]
 80151e8:	2a2e      	cmp	r2, #46	; 0x2e
 80151ea:	d1f9      	bne.n	80151e0 <DecodeRekordboxFiles+0x6f8>
 80151ec:	4632      	mov	r2, r6
 80151ee:	e000      	b.n	80151f2 <DecodeRekordboxFiles+0x70a>
			i++;
 80151f0:	3301      	adds	r3, #1
		while(k < 5)
 80151f2:	2a04      	cmp	r2, #4
 80151f4:	d80c      	bhi.n	8015210 <DecodeRekordboxFiles+0x728>
			if(filename[i] >= 32) {
 80151f6:	a980      	add	r1, sp, #512	; 0x200
 80151f8:	5cc9      	ldrb	r1, [r1, r3]
 80151fa:	291f      	cmp	r1, #31
 80151fc:	d9f8      	bls.n	80151f0 <DecodeRekordboxFiles+0x708>
				rekordbox.filetype[k] = filename[i];
 80151fe:	4857      	ldr	r0, [pc, #348]	; (801535c <DecodeRekordboxFiles+0x874>)
 8015200:	4410      	add	r0, r2
 8015202:	f880 12fd 	strb.w	r1, [r0, #765]	; 0x2fd
				k++;
 8015206:	3201      	adds	r2, #1
 8015208:	b2d2      	uxtb	r2, r2
 801520a:	e7f1      	b.n	80151f0 <DecodeRekordboxFiles+0x708>
 801520c:	4632      	mov	r2, r6
 801520e:	e7f0      	b.n	80151f2 <DecodeRekordboxFiles+0x70a>
		rekordbox.filetype[4] = 0;
 8015210:	2300      	movs	r3, #0
 8015212:	4a52      	ldr	r2, [pc, #328]	; (801535c <DecodeRekordboxFiles+0x874>)
 8015214:	f882 3301 	strb.w	r3, [r2, #769]	; 0x301
		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 8015218:	e005      	b.n	8015226 <DecodeRekordboxFiles+0x73e>
 801521a:	4a50      	ldr	r2, [pc, #320]	; (801535c <DecodeRekordboxFiles+0x874>)
 801521c:	441a      	add	r2, r3
 801521e:	2100      	movs	r1, #0
 8015220:	f882 11fe 	strb.w	r1, [r2, #510]	; 0x1fe
 8015224:	3301      	adds	r3, #1
 8015226:	2bfe      	cmp	r3, #254	; 0xfe
 8015228:	d9f7      	bls.n	801521a <DecodeRekordboxFiles+0x732>
		i = data_size;
 801522a:	462b      	mov	r3, r5
 801522c:	e000      	b.n	8015230 <DecodeRekordboxFiles+0x748>
		while((i > 0) && (filename[i] != '/')) i--;
 801522e:	3b01      	subs	r3, #1
 8015230:	b11b      	cbz	r3, 801523a <DecodeRekordboxFiles+0x752>
 8015232:	aa80      	add	r2, sp, #512	; 0x200
 8015234:	5cd2      	ldrb	r2, [r2, r3]
 8015236:	2a2f      	cmp	r2, #47	; 0x2f
 8015238:	d1f9      	bne.n	801522e <DecodeRekordboxFiles+0x746>
		i++;
 801523a:	3301      	adds	r3, #1
		while(i < data_size)
 801523c:	e000      	b.n	8015240 <DecodeRekordboxFiles+0x758>
			i++;
 801523e:	3301      	adds	r3, #1
		while(i < data_size)
 8015240:	42ab      	cmp	r3, r5
 8015242:	d20a      	bcs.n	801525a <DecodeRekordboxFiles+0x772>
			if(filename[i] >= 32) {
 8015244:	aa80      	add	r2, sp, #512	; 0x200
 8015246:	5cd2      	ldrb	r2, [r2, r3]
 8015248:	2a1f      	cmp	r2, #31
 801524a:	d9f8      	bls.n	801523e <DecodeRekordboxFiles+0x756>
				rekordbox.file[k] = filename[i];
 801524c:	4943      	ldr	r1, [pc, #268]	; (801535c <DecodeRekordboxFiles+0x874>)
 801524e:	4431      	add	r1, r6
 8015250:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
				k++;
 8015254:	3601      	adds	r6, #1
 8015256:	b2f6      	uxtb	r6, r6
 8015258:	e7f1      	b.n	801523e <DecodeRekordboxFiles+0x756>
		rekordbox.file[i] = 0;
 801525a:	4a40      	ldr	r2, [pc, #256]	; (801535c <DecodeRekordboxFiles+0x874>)
 801525c:	4413      	add	r3, r2
 801525e:	2200      	movs	r2, #0
 8015260:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		if(FindToken(qtz_token) != 0) return 1;
 8015264:	483e      	ldr	r0, [pc, #248]	; (8015360 <DecodeRekordboxFiles+0x878>)
 8015266:	f7ff fbf9 	bl	8014a5c <FindToken>
 801526a:	2800      	cmp	r0, #0
 801526c:	f040 82a3 	bne.w	80157b6 <DecodeRekordboxFiles+0xcce>
		while(f_read(&MyFile, BufferCtl.buff, 16, (void *)&bytesread) != FR_OK); // dummy read 22 bytes
 8015270:	4b30      	ldr	r3, [pc, #192]	; (8015334 <DecodeRekordboxFiles+0x84c>)
 8015272:	2210      	movs	r2, #16
 8015274:	4930      	ldr	r1, [pc, #192]	; (8015338 <DecodeRekordboxFiles+0x850>)
 8015276:	4831      	ldr	r0, [pc, #196]	; (801533c <DecodeRekordboxFiles+0x854>)
 8015278:	f7f5 ffe5 	bl	800b246 <f_read>
 801527c:	4607      	mov	r7, r0
 801527e:	2800      	cmp	r0, #0
 8015280:	d1f6      	bne.n	8015270 <DecodeRekordboxFiles+0x788>
		data_size = GetLongNumber();
 8015282:	f7ff fbc7 	bl	8014a14 <GetLongNumber>
		rekordbox.timezones = data_size;
 8015286:	4b35      	ldr	r3, [pc, #212]	; (801535c <DecodeRekordboxFiles+0x874>)
 8015288:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
		for(i=0; i<rekordbox.timezones; i++) {
 801528c:	2600      	movs	r6, #0
 801528e:	e048      	b.n	8015322 <DecodeRekordboxFiles+0x83a>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 8015290:	4b28      	ldr	r3, [pc, #160]	; (8015334 <DecodeRekordboxFiles+0x84c>)
 8015292:	2201      	movs	r2, #1
 8015294:	492b      	ldr	r1, [pc, #172]	; (8015344 <DecodeRekordboxFiles+0x85c>)
 8015296:	4429      	add	r1, r5
 8015298:	4828      	ldr	r0, [pc, #160]	; (801533c <DecodeRekordboxFiles+0x854>)
 801529a:	f7f5 ffd4 	bl	800b246 <f_read>
 801529e:	2800      	cmp	r0, #0
 80152a0:	d1f6      	bne.n	8015290 <DecodeRekordboxFiles+0x7a8>
			for(k=0; k<2; k++) {
 80152a2:	3501      	adds	r5, #1
 80152a4:	b2ed      	uxtb	r5, r5
 80152a6:	2d01      	cmp	r5, #1
 80152a8:	d9f2      	bls.n	8015290 <DecodeRekordboxFiles+0x7a8>
			rekordbox.phase[i] |= tag[0];
 80152aa:	4826      	ldr	r0, [pc, #152]	; (8015344 <DecodeRekordboxFiles+0x85c>)
 80152ac:	7803      	ldrb	r3, [r0, #0]
 80152ae:	4a2b      	ldr	r2, [pc, #172]	; (801535c <DecodeRekordboxFiles+0x874>)
 80152b0:	f206 516c 	addw	r1, r6, #1388	; 0x56c
 80152b4:	f832 5011 	ldrh.w	r5, [r2, r1, lsl #1]
 80152b8:	432b      	orrs	r3, r5
 80152ba:	b29b      	uxth	r3, r3
 80152bc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			rekordbox.phase[i] <<= 8;
 80152c0:	021b      	lsls	r3, r3, #8
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			rekordbox.phase[i] |= tag[1];
 80152c8:	7840      	ldrb	r0, [r0, #1]
 80152ca:	4303      	orrs	r3, r0
 80152cc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			for(k=0; k<2; k++) {
 80152d0:	463d      	mov	r5, r7
 80152d2:	e00a      	b.n	80152ea <DecodeRekordboxFiles+0x802>
				while(f_read(&MyFile, &tag[k], 1, (void *)&bytesread) != FR_OK);
 80152d4:	4b17      	ldr	r3, [pc, #92]	; (8015334 <DecodeRekordboxFiles+0x84c>)
 80152d6:	2201      	movs	r2, #1
 80152d8:	491a      	ldr	r1, [pc, #104]	; (8015344 <DecodeRekordboxFiles+0x85c>)
 80152da:	4429      	add	r1, r5
 80152dc:	4817      	ldr	r0, [pc, #92]	; (801533c <DecodeRekordboxFiles+0x854>)
 80152de:	f7f5 ffb2 	bl	800b246 <f_read>
 80152e2:	2800      	cmp	r0, #0
 80152e4:	d1f6      	bne.n	80152d4 <DecodeRekordboxFiles+0x7ec>
			for(k=0; k<2; k++) {
 80152e6:	3501      	adds	r5, #1
 80152e8:	b2ed      	uxtb	r5, r5
 80152ea:	2d01      	cmp	r5, #1
 80152ec:	d9f2      	bls.n	80152d4 <DecodeRekordboxFiles+0x7ec>
			rekordbox.bpm[i] |= tag[0];
 80152ee:	4915      	ldr	r1, [pc, #84]	; (8015344 <DecodeRekordboxFiles+0x85c>)
 80152f0:	780b      	ldrb	r3, [r1, #0]
 80152f2:	4d1a      	ldr	r5, [pc, #104]	; (801535c <DecodeRekordboxFiles+0x874>)
 80152f4:	f506 72c2 	add.w	r2, r6, #388	; 0x184
 80152f8:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 80152fc:	4303      	orrs	r3, r0
 80152fe:	b29b      	uxth	r3, r3
 8015300:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.bpm[i] <<= 8;
 8015304:	021b      	lsls	r3, r3, #8
 8015306:	b29b      	uxth	r3, r3
 8015308:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.bpm[i] |= tag[1];
 801530c:	7849      	ldrb	r1, [r1, #1]
 801530e:	430b      	orrs	r3, r1
 8015310:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
			rekordbox.timeindex[i] = GetLongNumber();
 8015314:	f7ff fb7e 	bl	8014a14 <GetLongNumber>
 8015318:	f206 43aa 	addw	r3, r6, #1194	; 0x4aa
 801531c:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
		for(i=0; i<rekordbox.timezones; i++) {
 8015320:	3601      	adds	r6, #1
 8015322:	4b0e      	ldr	r3, [pc, #56]	; (801535c <DecodeRekordboxFiles+0x874>)
 8015324:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8015328:	42b3      	cmp	r3, r6
 801532a:	d91b      	bls.n	8015364 <DecodeRekordboxFiles+0x87c>
			for(k=0; k<2; k++) {
 801532c:	463d      	mov	r5, r7
 801532e:	e7ba      	b.n	80152a6 <DecodeRekordboxFiles+0x7be>
 8015330:	2000008c 	.word	0x2000008c
 8015334:	2000e374 	.word	0x2000e374
 8015338:	200007a0 	.word	0x200007a0
 801533c:	200017b0 	.word	0x200017b0
 8015340:	20016618 	.word	0x20016618
 8015344:	200171b4 	.word	0x200171b4
 8015348:	c00ff000 	.word	0xc00ff000
 801534c:	20000054 	.word	0x20000054
 8015350:	cccccccd 	.word	0xcccccccd
 8015354:	0801e9e4 	.word	0x0801e9e4
 8015358:	20000074 	.word	0x20000074
 801535c:	20014618 	.word	0x20014618
 8015360:	2000007c 	.word	0x2000007c
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 8015364:	4bbb      	ldr	r3, [pc, #748]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 8015366:	f8b3 3ad8 	ldrh.w	r3, [r3, #2776]	; 0xad8
 801536a:	2b01      	cmp	r3, #1
 801536c:	d03e      	beq.n	80153ec <DecodeRekordboxFiles+0x904>
		else rekordbox.beat_grid_offset = rekordbox.phase[0] - 1;
 801536e:	3b01      	subs	r3, #1
 8015370:	4ab9      	ldr	r2, [pc, #740]	; (8015658 <DecodeRekordboxFiles+0xb70>)
 8015372:	f882 3248 	strb.w	r3, [r2, #584]	; 0x248
		if(FindToken(wave_token) != 0) return 1;
 8015376:	48b9      	ldr	r0, [pc, #740]	; (801565c <DecodeRekordboxFiles+0xb74>)
 8015378:	f7ff fb70 	bl	8014a5c <FindToken>
 801537c:	2800      	cmp	r0, #0
 801537e:	f040 821c 	bne.w	80157ba <DecodeRekordboxFiles+0xcd2>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 8015382:	4bb7      	ldr	r3, [pc, #732]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 8015384:	2208      	movs	r2, #8
 8015386:	49b7      	ldr	r1, [pc, #732]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 8015388:	48b7      	ldr	r0, [pc, #732]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 801538a:	f7f5 ff5c 	bl	800b246 <f_read>
 801538e:	2800      	cmp	r0, #0
 8015390:	d1f7      	bne.n	8015382 <DecodeRekordboxFiles+0x89a>
		rekordbox.lowp_spectrum_size = GetLongNumber();
 8015392:	f7ff fb3f 	bl	8014a14 <GetLongNumber>
 8015396:	4bb0      	ldr	r3, [pc, #704]	; (8015658 <DecodeRekordboxFiles+0xb70>)
 8015398:	f8c3 024c 	str.w	r0, [r3, #588]	; 0x24c
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801539c:	4bb0      	ldr	r3, [pc, #704]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 801539e:	2204      	movs	r2, #4
 80153a0:	49b0      	ldr	r1, [pc, #704]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 80153a2:	48b1      	ldr	r0, [pc, #708]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 80153a4:	f7f5 ff4f 	bl	800b246 <f_read>
 80153a8:	2800      	cmp	r0, #0
 80153aa:	d1f7      	bne.n	801539c <DecodeRekordboxFiles+0x8b4>
		while(f_read(&MyFile, &lowp_wavebuffer[0], rekordbox.lowp_spectrum_size, (void *)&bytesread) != FR_OK);
 80153ac:	4bac      	ldr	r3, [pc, #688]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 80153ae:	4aaa      	ldr	r2, [pc, #680]	; (8015658 <DecodeRekordboxFiles+0xb70>)
 80153b0:	f8d2 224c 	ldr.w	r2, [r2, #588]	; 0x24c
 80153b4:	49ad      	ldr	r1, [pc, #692]	; (801566c <DecodeRekordboxFiles+0xb84>)
 80153b6:	48ac      	ldr	r0, [pc, #688]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 80153b8:	f7f5 ff45 	bl	800b246 <f_read>
 80153bc:	2800      	cmp	r0, #0
 80153be:	d1f5      	bne.n	80153ac <DecodeRekordboxFiles+0x8c4>
		if(FindToken(cob_token) != 0) return 1;
 80153c0:	48ab      	ldr	r0, [pc, #684]	; (8015670 <DecodeRekordboxFiles+0xb88>)
 80153c2:	f7ff fb4b 	bl	8014a5c <FindToken>
 80153c6:	2800      	cmp	r0, #0
 80153c8:	f040 81f9 	bne.w	80157be <DecodeRekordboxFiles+0xcd6>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 80153cc:	4ba4      	ldr	r3, [pc, #656]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 80153ce:	220c      	movs	r2, #12
 80153d0:	49a4      	ldr	r1, [pc, #656]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 80153d2:	48a5      	ldr	r0, [pc, #660]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 80153d4:	f7f5 ff37 	bl	800b246 <f_read>
 80153d8:	2800      	cmp	r0, #0
 80153da:	d1f7      	bne.n	80153cc <DecodeRekordboxFiles+0x8e4>
		rekordbox.cues = GetLongNumber() + 1;
 80153dc:	f7ff fb1a 	bl	8014a14 <GetLongNumber>
 80153e0:	3001      	adds	r0, #1
 80153e2:	4a9d      	ldr	r2, [pc, #628]	; (8015658 <DecodeRekordboxFiles+0xb70>)
 80153e4:	f8c2 0358 	str.w	r0, [r2, #856]	; 0x358
		for(i = 1; i < rekordbox.cues; i++) {
 80153e8:	2501      	movs	r5, #1
 80153ea:	e005      	b.n	80153f8 <DecodeRekordboxFiles+0x910>
		if(rekordbox.phase[0] == 1) rekordbox.beat_grid_offset = 4;
 80153ec:	4b9a      	ldr	r3, [pc, #616]	; (8015658 <DecodeRekordboxFiles+0xb70>)
 80153ee:	2204      	movs	r2, #4
 80153f0:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80153f4:	e7bf      	b.n	8015376 <DecodeRekordboxFiles+0x88e>
		for(i = 1; i < rekordbox.cues; i++) {
 80153f6:	3501      	adds	r5, #1
 80153f8:	4b97      	ldr	r3, [pc, #604]	; (8015658 <DecodeRekordboxFiles+0xb70>)
 80153fa:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80153fe:	42ab      	cmp	r3, r5
 8015400:	d976      	bls.n	80154f0 <DecodeRekordboxFiles+0xa08>
			if(FindToken(cue_token) != 0) return 1;
 8015402:	489c      	ldr	r0, [pc, #624]	; (8015674 <DecodeRekordboxFiles+0xb8c>)
 8015404:	f7ff fb2a 	bl	8014a5c <FindToken>
 8015408:	2800      	cmp	r0, #0
 801540a:	f040 81da 	bne.w	80157c2 <DecodeRekordboxFiles+0xcda>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801540e:	4b94      	ldr	r3, [pc, #592]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 8015410:	2208      	movs	r2, #8
 8015412:	4994      	ldr	r1, [pc, #592]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 8015414:	4894      	ldr	r0, [pc, #592]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 8015416:	f7f5 ff16 	bl	800b246 <f_read>
 801541a:	2800      	cmp	r0, #0
 801541c:	d1f7      	bne.n	801540e <DecodeRekordboxFiles+0x926>
			rekordbox.cue_number[i] = GetLongNumber();
 801541e:	f7ff faf9 	bl	8014a14 <GetLongNumber>
 8015422:	4e8c      	ldr	r6, [pc, #560]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 8015424:	f605 03d6 	addw	r3, r5, #2262	; 0x8d6
 8015428:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801542c:	6058      	str	r0, [r3, #4]
			rekordbox.cue_active[i] = GetLongNumber();
 801542e:	f7ff faf1 	bl	8014a14 <GetLongNumber>
 8015432:	f605 133a 	addw	r3, r5, #2362	; 0x93a
 8015436:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801543a:	6070      	str	r0, [r6, #4]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801543c:	4b88      	ldr	r3, [pc, #544]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 801543e:	2204      	movs	r2, #4
 8015440:	4988      	ldr	r1, [pc, #544]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 8015442:	4889      	ldr	r0, [pc, #548]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 8015444:	f7f5 feff 	bl	800b246 <f_read>
 8015448:	2800      	cmp	r0, #0
 801544a:	d1f7      	bne.n	801543c <DecodeRekordboxFiles+0x954>
			rekordbox.cue_type[i] = GetLongNumber();
 801544c:	f7ff fae2 	bl	8014a14 <GetLongNumber>
 8015450:	f605 129e 	addw	r2, r5, #2462	; 0x99e
 8015454:	4b7f      	ldr	r3, [pc, #508]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 8015456:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801545a:	6058      	str	r0, [r3, #4]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[i], 1, (void *)&bytesread) != FR_OK);
 801545c:	f642 3128 	movw	r1, #11048	; 0x2b28
 8015460:	4429      	add	r1, r5
 8015462:	4b7c      	ldr	r3, [pc, #496]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 8015464:	4419      	add	r1, r3
 8015466:	4b7e      	ldr	r3, [pc, #504]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 8015468:	2201      	movs	r2, #1
 801546a:	3104      	adds	r1, #4
 801546c:	487e      	ldr	r0, [pc, #504]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 801546e:	f7f5 feea 	bl	800b246 <f_read>
 8015472:	2800      	cmp	r0, #0
 8015474:	d1f2      	bne.n	801545c <DecodeRekordboxFiles+0x974>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 8015476:	4b7a      	ldr	r3, [pc, #488]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 8015478:	2203      	movs	r2, #3
 801547a:	497a      	ldr	r1, [pc, #488]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 801547c:	487a      	ldr	r0, [pc, #488]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 801547e:	f7f5 fee2 	bl	800b246 <f_read>
 8015482:	2800      	cmp	r0, #0
 8015484:	d1f7      	bne.n	8015476 <DecodeRekordboxFiles+0x98e>
			rekordbox.cue_start_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 8015486:	f7ff fac5 	bl	8014a14 <GetLongNumber>
 801548a:	ee07 0a90 	vmov	s15, r0
 801548e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015492:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8015678 <DecodeRekordboxFiles+0xb90>
 8015496:	ee67 7a87 	vmul.f32	s15, s15, s14
 801549a:	eddf 6a78 	vldr	s13, [pc, #480]	; 801567c <DecodeRekordboxFiles+0xb94>
 801549e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80154a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80154a6:	4b6b      	ldr	r3, [pc, #428]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 80154a8:	f605 2202 	addw	r2, r5, #2562	; 0xa02
 80154ac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80154b0:	ed82 7a01 	vstr	s14, [r2, #4]
			if(rekordbox.cue_singleloop[i] == 2) rekordbox.cue_end_position[i] = (int32_t)((float)GetLongNumber()*150/1000);
 80154b4:	442b      	add	r3, r5
 80154b6:	f642 322c 	movw	r2, #11052	; 0x2b2c
 80154ba:	5c9b      	ldrb	r3, [r3, r2]
 80154bc:	2b02      	cmp	r3, #2
 80154be:	d19a      	bne.n	80153f6 <DecodeRekordboxFiles+0x90e>
 80154c0:	f7ff faa8 	bl	8014a14 <GetLongNumber>
 80154c4:	ee07 0a90 	vmov	s15, r0
 80154c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154cc:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8015678 <DecodeRekordboxFiles+0xb90>
 80154d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154d4:	eddf 6a69 	vldr	s13, [pc, #420]	; 801567c <DecodeRekordboxFiles+0xb94>
 80154d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80154dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80154e0:	f605 2266 	addw	r2, r5, #2662	; 0xa66
 80154e4:	4b5b      	ldr	r3, [pc, #364]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 80154e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80154ea:	ed83 7a01 	vstr	s14, [r3, #4]
 80154ee:	e782      	b.n	80153f6 <DecodeRekordboxFiles+0x90e>
		}
		if(FindToken(cob_token) != 0) return 1;
 80154f0:	485f      	ldr	r0, [pc, #380]	; (8015670 <DecodeRekordboxFiles+0xb88>)
 80154f2:	f7ff fab3 	bl	8014a5c <FindToken>
 80154f6:	2800      	cmp	r0, #0
 80154f8:	f040 8165 	bne.w	80157c6 <DecodeRekordboxFiles+0xcde>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK); // dummy read 12 bytes
 80154fc:	4b58      	ldr	r3, [pc, #352]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 80154fe:	220c      	movs	r2, #12
 8015500:	4958      	ldr	r1, [pc, #352]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 8015502:	4859      	ldr	r0, [pc, #356]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 8015504:	f7f5 fe9f 	bl	800b246 <f_read>
 8015508:	2800      	cmp	r0, #0
 801550a:	d1f7      	bne.n	80154fc <DecodeRekordboxFiles+0xa14>
		rekordbox.cues += GetLongNumber();
 801550c:	f7ff fa82 	bl	8014a14 <GetLongNumber>
 8015510:	4a51      	ldr	r2, [pc, #324]	; (8015658 <DecodeRekordboxFiles+0xb70>)
 8015512:	f8d2 3358 	ldr.w	r3, [r2, #856]	; 0x358
 8015516:	4403      	add	r3, r0
 8015518:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
		k = i;
 801551c:	b2ed      	uxtb	r5, r5
		for(k = i; k < rekordbox.cues; k++) {
 801551e:	e001      	b.n	8015524 <DecodeRekordboxFiles+0xa3c>
 8015520:	3501      	adds	r5, #1
 8015522:	b2ed      	uxtb	r5, r5
 8015524:	462e      	mov	r6, r5
 8015526:	4b4c      	ldr	r3, [pc, #304]	; (8015658 <DecodeRekordboxFiles+0xb70>)
 8015528:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 801552c:	429d      	cmp	r5, r3
 801552e:	da76      	bge.n	801561e <DecodeRekordboxFiles+0xb36>
			if(FindToken(cue_token) != 0) return 1;
 8015530:	4850      	ldr	r0, [pc, #320]	; (8015674 <DecodeRekordboxFiles+0xb8c>)
 8015532:	f7ff fa93 	bl	8014a5c <FindToken>
 8015536:	2800      	cmp	r0, #0
 8015538:	f040 8147 	bne.w	80157ca <DecodeRekordboxFiles+0xce2>
			while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801553c:	4b48      	ldr	r3, [pc, #288]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 801553e:	2208      	movs	r2, #8
 8015540:	4948      	ldr	r1, [pc, #288]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 8015542:	4849      	ldr	r0, [pc, #292]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 8015544:	f7f5 fe7f 	bl	800b246 <f_read>
 8015548:	2800      	cmp	r0, #0
 801554a:	d1f7      	bne.n	801553c <DecodeRekordboxFiles+0xa54>
			rekordbox.cue_number[k] = GetLongNumber();
 801554c:	f7ff fa62 	bl	8014a14 <GetLongNumber>
 8015550:	4f40      	ldr	r7, [pc, #256]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 8015552:	f606 03d6 	addw	r3, r6, #2262	; 0x8d6
 8015556:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801555a:	6058      	str	r0, [r3, #4]
			rekordbox.cue_active[k] = GetLongNumber();
 801555c:	f7ff fa5a 	bl	8014a14 <GetLongNumber>
 8015560:	f606 133a 	addw	r3, r6, #2362	; 0x93a
 8015564:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8015568:	6078      	str	r0, [r7, #4]
			while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 801556a:	4b3d      	ldr	r3, [pc, #244]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 801556c:	2204      	movs	r2, #4
 801556e:	493d      	ldr	r1, [pc, #244]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 8015570:	483d      	ldr	r0, [pc, #244]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 8015572:	f7f5 fe68 	bl	800b246 <f_read>
 8015576:	2800      	cmp	r0, #0
 8015578:	d1f7      	bne.n	801556a <DecodeRekordboxFiles+0xa82>
			rekordbox.cue_type[k] = GetLongNumber();
 801557a:	f7ff fa4b 	bl	8014a14 <GetLongNumber>
 801557e:	f606 129e 	addw	r2, r6, #2462	; 0x99e
 8015582:	4b34      	ldr	r3, [pc, #208]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 8015584:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015588:	6058      	str	r0, [r3, #4]
			while(f_read(&MyFile, &rekordbox.cue_singleloop[k], 1, (void *)&bytesread) != FR_OK);
 801558a:	f642 3328 	movw	r3, #11048	; 0x2b28
 801558e:	4433      	add	r3, r6
 8015590:	4930      	ldr	r1, [pc, #192]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 8015592:	4419      	add	r1, r3
 8015594:	4b32      	ldr	r3, [pc, #200]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 8015596:	2201      	movs	r2, #1
 8015598:	3104      	adds	r1, #4
 801559a:	4833      	ldr	r0, [pc, #204]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 801559c:	f7f5 fe53 	bl	800b246 <f_read>
 80155a0:	2800      	cmp	r0, #0
 80155a2:	d1f2      	bne.n	801558a <DecodeRekordboxFiles+0xaa2>
			while(f_read(&MyFile, BufferCtl.buff, 3, (void *)&bytesread) != FR_OK); // dummy read 3 bytes
 80155a4:	4b2e      	ldr	r3, [pc, #184]	; (8015660 <DecodeRekordboxFiles+0xb78>)
 80155a6:	2203      	movs	r2, #3
 80155a8:	492e      	ldr	r1, [pc, #184]	; (8015664 <DecodeRekordboxFiles+0xb7c>)
 80155aa:	482f      	ldr	r0, [pc, #188]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 80155ac:	f7f5 fe4b 	bl	800b246 <f_read>
 80155b0:	2800      	cmp	r0, #0
 80155b2:	d1f7      	bne.n	80155a4 <DecodeRekordboxFiles+0xabc>
			rekordbox.cue_start_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 80155b4:	f7ff fa2e 	bl	8014a14 <GetLongNumber>
 80155b8:	ee07 0a90 	vmov	s15, r0
 80155bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155c0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8015678 <DecodeRekordboxFiles+0xb90>
 80155c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155c8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801567c <DecodeRekordboxFiles+0xb94>
 80155cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80155d0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80155d4:	4b1f      	ldr	r3, [pc, #124]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 80155d6:	f606 2202 	addw	r2, r6, #2562	; 0xa02
 80155da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80155de:	ed82 7a01 	vstr	s14, [r2, #4]
			if(rekordbox.cue_singleloop[k] == 2) rekordbox.cue_end_position[k] = (int32_t)((float)GetLongNumber()*150/1000);
 80155e2:	4433      	add	r3, r6
 80155e4:	f642 322c 	movw	r2, #11052	; 0x2b2c
 80155e8:	5c9b      	ldrb	r3, [r3, r2]
 80155ea:	2b02      	cmp	r3, #2
 80155ec:	d198      	bne.n	8015520 <DecodeRekordboxFiles+0xa38>
 80155ee:	f7ff fa11 	bl	8014a14 <GetLongNumber>
 80155f2:	ee07 0a90 	vmov	s15, r0
 80155f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155fa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8015678 <DecodeRekordboxFiles+0xb90>
 80155fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015602:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801567c <DecodeRekordboxFiles+0xb94>
 8015606:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801560a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801560e:	f606 2666 	addw	r6, r6, #2662	; 0xa66
 8015612:	4b10      	ldr	r3, [pc, #64]	; (8015654 <DecodeRekordboxFiles+0xb6c>)
 8015614:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8015618:	ed83 7a01 	vstr	s14, [r3, #4]
 801561c:	e780      	b.n	8015520 <DecodeRekordboxFiles+0xa38>
		}
		f_close(&MyFile);
 801561e:	4812      	ldr	r0, [pc, #72]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 8015620:	f7f5 fed8 	bl	800b3d4 <f_close>
 8015624:	e59a      	b.n	801515c <DecodeRekordboxFiles+0x674>
	}
	for(i = 0; i < 255; i++) my_path[i] = 0;
 8015626:	2200      	movs	r2, #0
 8015628:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
 801562c:	3301      	adds	r3, #1
 801562e:	2bfe      	cmp	r3, #254	; 0xfe
 8015630:	d9f9      	bls.n	8015626 <DecodeRekordboxFiles+0xb3e>
	wcscpy(my_path, path);
 8015632:	4621      	mov	r1, r4
 8015634:	4668      	mov	r0, sp
 8015636:	f003 fe18 	bl	801926a <wcscpy>
	wcscat(my_path, L"/ANLZ0001.EXT");
 801563a:	4911      	ldr	r1, [pc, #68]	; (8015680 <DecodeRekordboxFiles+0xb98>)
 801563c:	4668      	mov	r0, sp
 801563e:	f003 fe04 	bl	801924a <wcscat>
	res = f_open(&MyFile, my_path, FA_READ);
 8015642:	2201      	movs	r2, #1
 8015644:	4669      	mov	r1, sp
 8015646:	4808      	ldr	r0, [pc, #32]	; (8015668 <DecodeRekordboxFiles+0xb80>)
 8015648:	f7f5 fd8e 	bl	800b168 <f_open>
	if(res == FR_OK) {
 801564c:	b1d0      	cbz	r0, 8015684 <DecodeRekordboxFiles+0xb9c>
		if(FindToken(wv3_token) != 0) return 1;
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
		rekordbox.spectrum_size = GetLongNumber();
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
		rekordbox.cue_start_position[0] = 0;
		for(i=0; i<rekordbox.spectrum_size; i++) {
 801564e:	2000      	movs	r0, #0
 8015650:	4603      	mov	r3, r0
 8015652:	e066      	b.n	8015722 <DecodeRekordboxFiles+0xc3a>
 8015654:	20014618 	.word	0x20014618
 8015658:	20016618 	.word	0x20016618
 801565c:	20000084 	.word	0x20000084
 8015660:	2000e374 	.word	0x2000e374
 8015664:	200007a0 	.word	0x200007a0
 8015668:	200017b0 	.word	0x200017b0
 801566c:	2000e600 	.word	0x2000e600
 8015670:	20000064 	.word	0x20000064
 8015674:	2000006c 	.word	0x2000006c
 8015678:	43160000 	.word	0x43160000
 801567c:	447a0000 	.word	0x447a0000
 8015680:	0801ea1c 	.word	0x0801ea1c
		if(FindToken(wv3_token) != 0) return 1;
 8015684:	4853      	ldr	r0, [pc, #332]	; (80157d4 <DecodeRekordboxFiles+0xcec>)
 8015686:	f7ff f9e9 	bl	8014a5c <FindToken>
 801568a:	2800      	cmp	r0, #0
 801568c:	f040 809f 	bne.w	80157ce <DecodeRekordboxFiles+0xce6>
		while(f_read(&MyFile, BufferCtl.buff, 12, (void *)&bytesread) != FR_OK);
 8015690:	4b51      	ldr	r3, [pc, #324]	; (80157d8 <DecodeRekordboxFiles+0xcf0>)
 8015692:	220c      	movs	r2, #12
 8015694:	4951      	ldr	r1, [pc, #324]	; (80157dc <DecodeRekordboxFiles+0xcf4>)
 8015696:	4852      	ldr	r0, [pc, #328]	; (80157e0 <DecodeRekordboxFiles+0xcf8>)
 8015698:	f7f5 fdd5 	bl	800b246 <f_read>
 801569c:	2800      	cmp	r0, #0
 801569e:	d1f7      	bne.n	8015690 <DecodeRekordboxFiles+0xba8>
		rekordbox.spectrum_size = GetLongNumber();
 80156a0:	f7ff f9b8 	bl	8014a14 <GetLongNumber>
 80156a4:	4b4f      	ldr	r3, [pc, #316]	; (80157e4 <DecodeRekordboxFiles+0xcfc>)
 80156a6:	f8c3 0250 	str.w	r0, [r3, #592]	; 0x250
		while(f_read(&MyFile, BufferCtl.buff, 4, (void *)&bytesread) != FR_OK); // dummy read 4 bytes
 80156aa:	4b4b      	ldr	r3, [pc, #300]	; (80157d8 <DecodeRekordboxFiles+0xcf0>)
 80156ac:	2204      	movs	r2, #4
 80156ae:	494b      	ldr	r1, [pc, #300]	; (80157dc <DecodeRekordboxFiles+0xcf4>)
 80156b0:	484b      	ldr	r0, [pc, #300]	; (80157e0 <DecodeRekordboxFiles+0xcf8>)
 80156b2:	f7f5 fdc8 	bl	800b246 <f_read>
 80156b6:	2800      	cmp	r0, #0
 80156b8:	d1f7      	bne.n	80156aa <DecodeRekordboxFiles+0xbc2>
		rekordbox.cue_start_position[0] = 0;
 80156ba:	2400      	movs	r4, #0
 80156bc:	4b49      	ldr	r3, [pc, #292]	; (80157e4 <DecodeRekordboxFiles+0xcfc>)
 80156be:	f8c3 480c 	str.w	r4, [r3, #2060]	; 0x80c
		for(i=0; i<rekordbox.spectrum_size; i++) {
 80156c2:	e000      	b.n	80156c6 <DecodeRekordboxFiles+0xbde>
 80156c4:	3401      	adds	r4, #1
 80156c6:	4b47      	ldr	r3, [pc, #284]	; (80157e4 <DecodeRekordboxFiles+0xcfc>)
 80156c8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80156cc:	42a3      	cmp	r3, r4
 80156ce:	d923      	bls.n	8015718 <DecodeRekordboxFiles+0xc30>
			while(f_read(&MyFile, &tag[0], 1, (void *)&bytesread) != FR_OK);
 80156d0:	4b41      	ldr	r3, [pc, #260]	; (80157d8 <DecodeRekordboxFiles+0xcf0>)
 80156d2:	2201      	movs	r2, #1
 80156d4:	4944      	ldr	r1, [pc, #272]	; (80157e8 <DecodeRekordboxFiles+0xd00>)
 80156d6:	4842      	ldr	r0, [pc, #264]	; (80157e0 <DecodeRekordboxFiles+0xcf8>)
 80156d8:	f7f5 fdb5 	bl	800b246 <f_read>
 80156dc:	2800      	cmp	r0, #0
 80156de:	d1f7      	bne.n	80156d0 <DecodeRekordboxFiles+0xbe8>
			*(__IO uint8_t*)(WAVE_BUFFER+i) = tag[0];
 80156e0:	4b41      	ldr	r3, [pc, #260]	; (80157e8 <DecodeRekordboxFiles+0xd00>)
 80156e2:	781b      	ldrb	r3, [r3, #0]
 80156e4:	4a41      	ldr	r2, [pc, #260]	; (80157ec <DecodeRekordboxFiles+0xd04>)
 80156e6:	54a3      	strb	r3, [r4, r2]
			if(rekordbox.autocue == 1) {
 80156e8:	4a3e      	ldr	r2, [pc, #248]	; (80157e4 <DecodeRekordboxFiles+0xcfc>)
 80156ea:	f892 2b90 	ldrb.w	r2, [r2, #2960]	; 0xb90
 80156ee:	2a01      	cmp	r2, #1
 80156f0:	d1e8      	bne.n	80156c4 <DecodeRekordboxFiles+0xbdc>
				if(((tag[0] & 0x1F) > acue_sensitivity/10) && ((tag[0] & 0xE0) < 128)) {
 80156f2:	4a3f      	ldr	r2, [pc, #252]	; (80157f0 <DecodeRekordboxFiles+0xd08>)
 80156f4:	7812      	ldrb	r2, [r2, #0]
 80156f6:	493f      	ldr	r1, [pc, #252]	; (80157f4 <DecodeRekordboxFiles+0xd0c>)
 80156f8:	fba1 1202 	umull	r1, r2, r1, r2
 80156fc:	f003 011f 	and.w	r1, r3, #31
 8015700:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 8015704:	d9de      	bls.n	80156c4 <DecodeRekordboxFiles+0xbdc>
 8015706:	09db      	lsrs	r3, r3, #7
 8015708:	d1dc      	bne.n	80156c4 <DecodeRekordboxFiles+0xbdc>
					rekordbox.autocue = 2;
 801570a:	4b36      	ldr	r3, [pc, #216]	; (80157e4 <DecodeRekordboxFiles+0xcfc>)
 801570c:	2202      	movs	r2, #2
 801570e:	f883 2b90 	strb.w	r2, [r3, #2960]	; 0xb90
					rekordbox.cue_start_position[0] = i;
 8015712:	f8c3 480c 	str.w	r4, [r3, #2060]	; 0x80c
 8015716:	e7d5      	b.n	80156c4 <DecodeRekordboxFiles+0xbdc>
				}
			}
		}
		f_close(&MyFile);
 8015718:	4831      	ldr	r0, [pc, #196]	; (80157e0 <DecodeRekordboxFiles+0xcf8>)
 801571a:	f7f5 fe5b 	bl	800b3d4 <f_close>
 801571e:	e796      	b.n	801564e <DecodeRekordboxFiles+0xb66>
		for(i=0; i<rekordbox.spectrum_size; i++) {
 8015720:	4613      	mov	r3, r2
	}
	i = 0;
	uint8_t l = 0;
	while(i++  < rekordbox.spectrum_size) {
 8015722:	1c5a      	adds	r2, r3, #1
 8015724:	492f      	ldr	r1, [pc, #188]	; (80157e4 <DecodeRekordboxFiles+0xcfc>)
 8015726:	f8d1 1250 	ldr.w	r1, [r1, #592]	; 0x250
 801572a:	4299      	cmp	r1, r3
 801572c:	d926      	bls.n	801577c <DecodeRekordboxFiles+0xc94>
		if((i % 9000) == 0) {
 801572e:	4b32      	ldr	r3, [pc, #200]	; (80157f8 <DecodeRekordboxFiles+0xd10>)
 8015730:	fba3 4302 	umull	r4, r3, r3, r2
 8015734:	0b5b      	lsrs	r3, r3, #13
 8015736:	f242 3428 	movw	r4, #9000	; 0x2328
 801573a:	fb04 2313 	mls	r3, r4, r3, r2
 801573e:	2b00      	cmp	r3, #0
 8015740:	d1ee      	bne.n	8015720 <DecodeRekordboxFiles+0xc38>
			rekordbox.remminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * (rekordbox.spectrum_size - i) / rekordbox.spectrum_size);
 8015742:	4c2e      	ldr	r4, [pc, #184]	; (80157fc <DecodeRekordboxFiles+0xd14>)
 8015744:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8015748:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 801574c:	1a8e      	subs	r6, r1, r2
 801574e:	fb03 f606 	mul.w	r6, r3, r6
 8015752:	fbb6 f6f1 	udiv	r6, r6, r1
 8015756:	f241 1528 	movw	r5, #4392	; 0x1128
 801575a:	4405      	add	r5, r0
 801575c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8015760:	80ae      	strh	r6, [r5, #4]
			rekordbox.elminticks[l] = (uint16_t)(rekordbox.lowp_spectrum_size * i / rekordbox.spectrum_size);
 8015762:	fb02 f303 	mul.w	r3, r2, r3
 8015766:	fbb3 f1f1 	udiv	r1, r3, r1
 801576a:	f241 1368 	movw	r3, #4456	; 0x1168
 801576e:	4403      	add	r3, r0
 8015770:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015774:	80a1      	strh	r1, [r4, #4]
			l++;
 8015776:	3001      	adds	r0, #1
 8015778:	b2c0      	uxtb	r0, r0
 801577a:	e7d1      	b.n	8015720 <DecodeRekordboxFiles+0xc38>
		}
	}
	rekordbox.minutes = l;
 801577c:	4b19      	ldr	r3, [pc, #100]	; (80157e4 <DecodeRekordboxFiles+0xcfc>)
 801577e:	f883 0354 	strb.w	r0, [r3, #852]	; 0x354
	rekordbox.state = 1;
 8015782:	2201      	movs	r2, #1
 8015784:	f883 2b98 	strb.w	r2, [r3, #2968]	; 0xb98
	return 0;
 8015788:	2000      	movs	r0, #0
}
 801578a:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
 801578e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(FindToken(path_token) != 0) return 1;
 8015792:	2001      	movs	r0, #1
 8015794:	e7f9      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(qtz_token) != 0) return 1;
 8015796:	2001      	movs	r0, #1
 8015798:	e7f7      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(wave_token) != 0) return 1;
 801579a:	2001      	movs	r0, #1
 801579c:	e7f5      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(cob_token) != 0) return 1;
 801579e:	2001      	movs	r0, #1
 80157a0:	e7f3      	b.n	801578a <DecodeRekordboxFiles+0xca2>
			if(FindToken(cue_token) != 0) return 1;
 80157a2:	2001      	movs	r0, #1
 80157a4:	e7f1      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(cob_token) != 0) return 1;
 80157a6:	2001      	movs	r0, #1
 80157a8:	e7ef      	b.n	801578a <DecodeRekordboxFiles+0xca2>
			if(FindToken(cue_token) != 0) return 1;
 80157aa:	2001      	movs	r0, #1
 80157ac:	e7ed      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(wv3_token) != 0) return 1;
 80157ae:	2001      	movs	r0, #1
 80157b0:	e7eb      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(path_token) != 0) return 1;
 80157b2:	2001      	movs	r0, #1
 80157b4:	e7e9      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(qtz_token) != 0) return 1;
 80157b6:	2001      	movs	r0, #1
 80157b8:	e7e7      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(wave_token) != 0) return 1;
 80157ba:	2001      	movs	r0, #1
 80157bc:	e7e5      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(cob_token) != 0) return 1;
 80157be:	2001      	movs	r0, #1
 80157c0:	e7e3      	b.n	801578a <DecodeRekordboxFiles+0xca2>
			if(FindToken(cue_token) != 0) return 1;
 80157c2:	2001      	movs	r0, #1
 80157c4:	e7e1      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(cob_token) != 0) return 1;
 80157c6:	2001      	movs	r0, #1
 80157c8:	e7df      	b.n	801578a <DecodeRekordboxFiles+0xca2>
			if(FindToken(cue_token) != 0) return 1;
 80157ca:	2001      	movs	r0, #1
 80157cc:	e7dd      	b.n	801578a <DecodeRekordboxFiles+0xca2>
		if(FindToken(wv3_token) != 0) return 1;
 80157ce:	2001      	movs	r0, #1
 80157d0:	e7db      	b.n	801578a <DecodeRekordboxFiles+0xca2>
 80157d2:	bf00      	nop
 80157d4:	2000008c 	.word	0x2000008c
 80157d8:	2000e374 	.word	0x2000e374
 80157dc:	200007a0 	.word	0x200007a0
 80157e0:	200017b0 	.word	0x200017b0
 80157e4:	20016618 	.word	0x20016618
 80157e8:	200171b4 	.word	0x200171b4
 80157ec:	c00ff000 	.word	0xc00ff000
 80157f0:	20000054 	.word	0x20000054
 80157f4:	cccccccd 	.word	0xcccccccd
 80157f8:	e90452d5 	.word	0xe90452d5
 80157fc:	20014618 	.word	0x20014618

08015800 <GetFileName>:

uint8_t GetFileName(TCHAR *path)
{
 8015800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015802:	b0c1      	sub	sp, #260	; 0x104
 8015804:	4604      	mov	r4, r0
	uint32_t data_size = 0;
	uint8_t k;
	uint32_t i;
	uint8_t res = FR_OK;
	for(i = 0; i < 255; i++) rekordbox.filename[i] = 0;
 8015806:	2300      	movs	r3, #0
 8015808:	e005      	b.n	8015816 <GetFileName+0x16>
 801580a:	4a4c      	ldr	r2, [pc, #304]	; (801593c <GetFileName+0x13c>)
 801580c:	f04f 0c00 	mov.w	ip, #0
 8015810:	f822 c013 	strh.w	ip, [r2, r3, lsl #1]
 8015814:	3301      	adds	r3, #1
 8015816:	2bfe      	cmp	r3, #254	; 0xfe
 8015818:	d9f7      	bls.n	801580a <GetFileName+0xa>
	char filename[255] = {0};
 801581a:	2100      	movs	r1, #0
 801581c:	9100      	str	r1, [sp, #0]
 801581e:	22fb      	movs	r2, #251	; 0xfb
 8015820:	a801      	add	r0, sp, #4
 8015822:	f003 fbd7 	bl	8018fd4 <memset>

	res = f_open(&MyFile, path, FA_READ);
 8015826:	2201      	movs	r2, #1
 8015828:	4621      	mov	r1, r4
 801582a:	4845      	ldr	r0, [pc, #276]	; (8015940 <GetFileName+0x140>)
 801582c:	f7f5 fc9c 	bl	800b168 <f_open>
	if(res == FR_OK)
 8015830:	2800      	cmp	r0, #0
 8015832:	d17b      	bne.n	801592c <GetFileName+0x12c>
	{
		if(FindToken(path_token) != 0) return 1;
 8015834:	4843      	ldr	r0, [pc, #268]	; (8015944 <GetFileName+0x144>)
 8015836:	f7ff f911 	bl	8014a5c <FindToken>
 801583a:	2800      	cmp	r0, #0
 801583c:	d17c      	bne.n	8015938 <GetFileName+0x138>
		while(f_read(&MyFile, BufferCtl.buff, 8, (void *)&bytesread) != FR_OK); // dummy read 8 bytes
 801583e:	4b42      	ldr	r3, [pc, #264]	; (8015948 <GetFileName+0x148>)
 8015840:	2208      	movs	r2, #8
 8015842:	4942      	ldr	r1, [pc, #264]	; (801594c <GetFileName+0x14c>)
 8015844:	483e      	ldr	r0, [pc, #248]	; (8015940 <GetFileName+0x140>)
 8015846:	f7f5 fcfe 	bl	800b246 <f_read>
 801584a:	2800      	cmp	r0, #0
 801584c:	d1f7      	bne.n	801583e <GetFileName+0x3e>
		data_size = GetLongNumber();
 801584e:	f7ff f8e1 	bl	8014a14 <GetLongNumber>
 8015852:	4604      	mov	r4, r0
		while(f_read(&MyFile, filename, data_size, (void *)&bytesread) != FR_OK);
 8015854:	4b3c      	ldr	r3, [pc, #240]	; (8015948 <GetFileName+0x148>)
 8015856:	4622      	mov	r2, r4
 8015858:	4669      	mov	r1, sp
 801585a:	4839      	ldr	r0, [pc, #228]	; (8015940 <GetFileName+0x140>)
 801585c:	f7f5 fcf3 	bl	800b246 <f_read>
 8015860:	4605      	mov	r5, r0
 8015862:	2800      	cmp	r0, #0
 8015864:	d1f6      	bne.n	8015854 <GetFileName+0x54>
		i = 0;
		k = 0;
 8015866:	4606      	mov	r6, r0
		i = 0;
 8015868:	2700      	movs	r7, #0
 801586a:	e011      	b.n	8015890 <GetFileName+0x90>
		while(i < data_size) {
			WCHAR c = filename[i];
 801586c:	f81d 3007 	ldrb.w	r3, [sp, r7]
			c <<= 8;
			i++;
 8015870:	1c7a      	adds	r2, r7, #1
			c |= filename[i];
 8015872:	f81d 0002 	ldrb.w	r0, [sp, r2]
 8015876:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			i++;
 801587a:	3702      	adds	r7, #2
			rekordbox.filename[k] = c;
 801587c:	4b2f      	ldr	r3, [pc, #188]	; (801593c <GetFileName+0x13c>)
 801587e:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
			filename[k] = ff_convert(c, 0);
 8015882:	2100      	movs	r1, #0
 8015884:	f7f5 ffbe 	bl	800b804 <ff_convert>
 8015888:	f80d 0006 	strb.w	r0, [sp, r6]
			k++;
 801588c:	1c73      	adds	r3, r6, #1
 801588e:	b2de      	uxtb	r6, r3
		while(i < data_size) {
 8015890:	42a7      	cmp	r7, r4
 8015892:	d3eb      	bcc.n	801586c <GetFileName+0x6c>
		}
		for(i = k; i < data_size; i++) filename[i] = 0;
 8015894:	4633      	mov	r3, r6
 8015896:	e003      	b.n	80158a0 <GetFileName+0xa0>
 8015898:	2200      	movs	r2, #0
 801589a:	f80d 2003 	strb.w	r2, [sp, r3]
 801589e:	3301      	adds	r3, #1
 80158a0:	42a3      	cmp	r3, r4
 80158a2:	d3f9      	bcc.n	8015898 <GetFileName+0x98>
		i = data_size;
 80158a4:	4623      	mov	r3, r4
 80158a6:	e000      	b.n	80158aa <GetFileName+0xaa>
		while((i > 0) && (filename[i] != '.')) i--;
 80158a8:	3b01      	subs	r3, #1
 80158aa:	b19b      	cbz	r3, 80158d4 <GetFileName+0xd4>
 80158ac:	f81d 2003 	ldrb.w	r2, [sp, r3]
 80158b0:	2a2e      	cmp	r2, #46	; 0x2e
 80158b2:	d1f9      	bne.n	80158a8 <GetFileName+0xa8>
 80158b4:	462a      	mov	r2, r5
 80158b6:	e000      	b.n	80158ba <GetFileName+0xba>
		{
			if(filename[i] >= 32) {
				rekordbox.filetype[k] = filename[i];
				k++;
			}
			i++;
 80158b8:	3301      	adds	r3, #1
		while(k < 5)
 80158ba:	2a04      	cmp	r2, #4
 80158bc:	d80c      	bhi.n	80158d8 <GetFileName+0xd8>
			if(filename[i] >= 32) {
 80158be:	f81d 1003 	ldrb.w	r1, [sp, r3]
 80158c2:	291f      	cmp	r1, #31
 80158c4:	d9f8      	bls.n	80158b8 <GetFileName+0xb8>
				rekordbox.filetype[k] = filename[i];
 80158c6:	481d      	ldr	r0, [pc, #116]	; (801593c <GetFileName+0x13c>)
 80158c8:	4410      	add	r0, r2
 80158ca:	f880 12fd 	strb.w	r1, [r0, #765]	; 0x2fd
				k++;
 80158ce:	3201      	adds	r2, #1
 80158d0:	b2d2      	uxtb	r2, r2
 80158d2:	e7f1      	b.n	80158b8 <GetFileName+0xb8>
 80158d4:	462a      	mov	r2, r5
 80158d6:	e7f0      	b.n	80158ba <GetFileName+0xba>
		}
		rekordbox.filetype[4] = 0;
 80158d8:	2300      	movs	r3, #0
 80158da:	4a18      	ldr	r2, [pc, #96]	; (801593c <GetFileName+0x13c>)
 80158dc:	f882 3301 	strb.w	r3, [r2, #769]	; 0x301

		for(i = 0; i < 255; i++) rekordbox.file[i] = 0;
 80158e0:	e005      	b.n	80158ee <GetFileName+0xee>
 80158e2:	4a16      	ldr	r2, [pc, #88]	; (801593c <GetFileName+0x13c>)
 80158e4:	441a      	add	r2, r3
 80158e6:	2100      	movs	r1, #0
 80158e8:	f882 11fe 	strb.w	r1, [r2, #510]	; 0x1fe
 80158ec:	3301      	adds	r3, #1
 80158ee:	2bfe      	cmp	r3, #254	; 0xfe
 80158f0:	d9f7      	bls.n	80158e2 <GetFileName+0xe2>
		i = data_size;
 80158f2:	4623      	mov	r3, r4
 80158f4:	e000      	b.n	80158f8 <GetFileName+0xf8>
		while((i > 0) && (filename[i] != '/')) i--;
 80158f6:	3b01      	subs	r3, #1
 80158f8:	b11b      	cbz	r3, 8015902 <GetFileName+0x102>
 80158fa:	f81d 2003 	ldrb.w	r2, [sp, r3]
 80158fe:	2a2f      	cmp	r2, #47	; 0x2f
 8015900:	d1f9      	bne.n	80158f6 <GetFileName+0xf6>
		k = 0;
		i++;
 8015902:	3301      	adds	r3, #1
		while(i < data_size)
 8015904:	e000      	b.n	8015908 <GetFileName+0x108>
		{
			if(filename[i] >= 32) {
				rekordbox.file[k] = filename[i];
				k++;
			}
			i++;
 8015906:	3301      	adds	r3, #1
		while(i < data_size)
 8015908:	42a3      	cmp	r3, r4
 801590a:	d20a      	bcs.n	8015922 <GetFileName+0x122>
			if(filename[i] >= 32) {
 801590c:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8015910:	2a1f      	cmp	r2, #31
 8015912:	d9f8      	bls.n	8015906 <GetFileName+0x106>
				rekordbox.file[k] = filename[i];
 8015914:	4909      	ldr	r1, [pc, #36]	; (801593c <GetFileName+0x13c>)
 8015916:	4429      	add	r1, r5
 8015918:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
				k++;
 801591c:	3501      	adds	r5, #1
 801591e:	b2ed      	uxtb	r5, r5
 8015920:	e7f1      	b.n	8015906 <GetFileName+0x106>
		}
		rekordbox.file[i] = 0;
 8015922:	4a06      	ldr	r2, [pc, #24]	; (801593c <GetFileName+0x13c>)
 8015924:	4413      	add	r3, r2
 8015926:	2200      	movs	r2, #0
 8015928:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
	}
	f_close(&MyFile);
 801592c:	4804      	ldr	r0, [pc, #16]	; (8015940 <GetFileName+0x140>)
 801592e:	f7f5 fd51 	bl	800b3d4 <f_close>
	return 0;
 8015932:	2000      	movs	r0, #0
}
 8015934:	b041      	add	sp, #260	; 0x104
 8015936:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(FindToken(path_token) != 0) return 1;
 8015938:	2001      	movs	r0, #1
 801593a:	e7fb      	b.n	8015934 <GetFileName+0x134>
 801593c:	20014618 	.word	0x20014618
 8015940:	200017b0 	.word	0x200017b0
 8015944:	20000074 	.word	0x20000074
 8015948:	2000e374 	.word	0x2000e374
 801594c:	200007a0 	.word	0x200007a0

08015950 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
DMA_HandleTypeDef hdma_sai2_a;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8015950:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8015952:	4818      	ldr	r0, [pc, #96]	; (80159b4 <MX_SAI2_Init+0x64>)
 8015954:	4b18      	ldr	r3, [pc, #96]	; (80159b8 <MX_SAI2_Init+0x68>)
 8015956:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8015958:	2300      	movs	r3, #0
 801595a:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 801595c:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 801595e:	2280      	movs	r2, #128	; 0x80
 8015960:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8015962:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8015964:	2201      	movs	r2, #1
 8015966:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8015968:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 801596a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801596e:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8015970:	6143      	str	r3, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8015972:	6182      	str	r2, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8015974:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8015978:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 801597a:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 801597c:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 801597e:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8015980:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 8015982:	2240      	movs	r2, #64	; 0x40
 8015984:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8015986:	2220      	movs	r2, #32
 8015988:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 801598a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801598e:	6482      	str	r2, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8015990:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8015992:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8015996:	6502      	str	r2, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8015998:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 801599a:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 801599c:	2304      	movs	r3, #4
 801599e:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x0000000F;
 80159a0:	230f      	movs	r3, #15
 80159a2:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80159a4:	f7ef fd58 	bl	8005458 <HAL_SAI_Init>
 80159a8:	b900      	cbnz	r0, 80159ac <MX_SAI2_Init+0x5c>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80159aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80159ac:	f7fe fb6e 	bl	801408c <Error_Handler>
}
 80159b0:	e7fb      	b.n	80159aa <MX_SAI2_Init+0x5a>
 80159b2:	bf00      	nop
 80159b4:	20017220 	.word	0x20017220
 80159b8:	40015c04 	.word	0x40015c04

080159bc <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80159bc:	b530      	push	{r4, r5, lr}
 80159be:	b0a9      	sub	sp, #164	; 0xa4
 80159c0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80159c2:	2284      	movs	r2, #132	; 0x84
 80159c4:	2100      	movs	r1, #0
 80159c6:	a802      	add	r0, sp, #8
 80159c8:	f003 fb04 	bl	8018fd4 <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80159cc:	6822      	ldr	r2, [r4, #0]
 80159ce:	4b2d      	ldr	r3, [pc, #180]	; (8015a84 <HAL_SAI_MspInit+0xc8>)
 80159d0:	429a      	cmp	r2, r3
 80159d2:	d001      	beq.n	80159d8 <HAL_SAI_MspInit+0x1c>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
    }
}
 80159d4:	b029      	add	sp, #164	; 0xa4
 80159d6:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80159d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80159dc:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80159de:	2364      	movs	r3, #100	; 0x64
 80159e0:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80159e2:	2302      	movs	r3, #2
 80159e4:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80159e6:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80159e8:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80159ea:	2301      	movs	r3, #1
 80159ec:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80159ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80159f2:	9312      	str	r3, [sp, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80159f4:	a802      	add	r0, sp, #8
 80159f6:	f7ee fe23 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 80159fa:	2800      	cmp	r0, #0
 80159fc:	d13b      	bne.n	8015a76 <HAL_SAI_MspInit+0xba>
    if (SAI2_client == 0)
 80159fe:	4b22      	ldr	r3, [pc, #136]	; (8015a88 <HAL_SAI_MspInit+0xcc>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	b94b      	cbnz	r3, 8015a18 <HAL_SAI_MspInit+0x5c>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8015a04:	4a21      	ldr	r2, [pc, #132]	; (8015a8c <HAL_SAI_MspInit+0xd0>)
 8015a06:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8015a08:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8015a0c:	6451      	str	r1, [r2, #68]	; 0x44
 8015a0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8015a10:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8015a14:	9201      	str	r2, [sp, #4]
 8015a16:	9a01      	ldr	r2, [sp, #4]
    SAI2_client ++;
 8015a18:	3301      	adds	r3, #1
 8015a1a:	4a1b      	ldr	r2, [pc, #108]	; (8015a88 <HAL_SAI_MspInit+0xcc>)
 8015a1c:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8015a1e:	23f0      	movs	r3, #240	; 0xf0
 8015a20:	9323      	str	r3, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a22:	2302      	movs	r3, #2
 8015a24:	9324      	str	r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a26:	2500      	movs	r5, #0
 8015a28:	9525      	str	r5, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8015a2a:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8015a2c:	230a      	movs	r3, #10
 8015a2e:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015a30:	a923      	add	r1, sp, #140	; 0x8c
 8015a32:	4817      	ldr	r0, [pc, #92]	; (8015a90 <HAL_SAI_MspInit+0xd4>)
 8015a34:	f7ec fa6c 	bl	8001f10 <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA2_Stream4;
 8015a38:	4816      	ldr	r0, [pc, #88]	; (8015a94 <HAL_SAI_MspInit+0xd8>)
 8015a3a:	4b17      	ldr	r3, [pc, #92]	; (8015a98 <HAL_SAI_MspInit+0xdc>)
 8015a3c:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8015a3e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8015a42:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015a44:	2340      	movs	r3, #64	; 0x40
 8015a46:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8015a48:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8015a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a4e:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8015a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a54:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8015a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015a5a:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8015a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015a60:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8015a62:	6205      	str	r5, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015a64:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8015a66:	f7eb fd4d 	bl	8001504 <HAL_DMA_Init>
 8015a6a:	b938      	cbnz	r0, 8015a7c <HAL_SAI_MspInit+0xc0>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8015a6c:	4b09      	ldr	r3, [pc, #36]	; (8015a94 <HAL_SAI_MspInit+0xd8>)
 8015a6e:	6723      	str	r3, [r4, #112]	; 0x70
 8015a70:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8015a72:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8015a74:	e7ae      	b.n	80159d4 <HAL_SAI_MspInit+0x18>
      Error_Handler();
 8015a76:	f7fe fb09 	bl	801408c <Error_Handler>
 8015a7a:	e7c0      	b.n	80159fe <HAL_SAI_MspInit+0x42>
      Error_Handler();
 8015a7c:	f7fe fb06 	bl	801408c <Error_Handler>
 8015a80:	e7f4      	b.n	8015a6c <HAL_SAI_MspInit+0xb0>
 8015a82:	bf00      	nop
 8015a84:	40015c04 	.word	0x40015c04
 8015a88:	200171bc 	.word	0x200171bc
 8015a8c:	40023800 	.word	0x40023800
 8015a90:	40022000 	.word	0x40022000
 8015a94:	200171c0 	.word	0x200171c0
 8015a98:	40026470 	.word	0x40026470

08015a9c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015a9c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8015a9e:	4b07      	ldr	r3, [pc, #28]	; (8015abc <SD_CheckStatus+0x20>)
 8015aa0:	2201      	movs	r2, #1
 8015aa2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015aa4:	f7fa ffb0 	bl	8010a08 <BSP_SD_GetCardState>
 8015aa8:	b920      	cbnz	r0, 8015ab4 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8015aaa:	4a04      	ldr	r2, [pc, #16]	; (8015abc <SD_CheckStatus+0x20>)
 8015aac:	7813      	ldrb	r3, [r2, #0]
 8015aae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8015ab2:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8015ab4:	4b01      	ldr	r3, [pc, #4]	; (8015abc <SD_CheckStatus+0x20>)
 8015ab6:	7818      	ldrb	r0, [r3, #0]
}
 8015ab8:	bd08      	pop	{r3, pc}
 8015aba:	bf00      	nop
 8015abc:	20000091 	.word	0x20000091

08015ac0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015ac0:	b510      	push	{r4, lr}
 8015ac2:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8015ac4:	4b07      	ldr	r3, [pc, #28]	; (8015ae4 <SD_initialize+0x24>)
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015aca:	f7fa ffbf 	bl	8010a4c <BSP_SD_Init>
 8015ace:	b110      	cbz	r0, 8015ad6 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8015ad0:	4b04      	ldr	r3, [pc, #16]	; (8015ae4 <SD_initialize+0x24>)
 8015ad2:	7818      	ldrb	r0, [r3, #0]
}
 8015ad4:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	f7ff ffe0 	bl	8015a9c <SD_CheckStatus>
 8015adc:	4b01      	ldr	r3, [pc, #4]	; (8015ae4 <SD_initialize+0x24>)
 8015ade:	7018      	strb	r0, [r3, #0]
 8015ae0:	e7f6      	b.n	8015ad0 <SD_initialize+0x10>
 8015ae2:	bf00      	nop
 8015ae4:	20000091 	.word	0x20000091

08015ae8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015ae8:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8015aea:	f7ff ffd7 	bl	8015a9c <SD_CheckStatus>
}
 8015aee:	bd08      	pop	{r3, pc}

08015af0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015af0:	b508      	push	{r3, lr}
 8015af2:	4608      	mov	r0, r1
 8015af4:	4611      	mov	r1, r2
 8015af6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8015af8:	f04f 33ff 	mov.w	r3, #4294967295
 8015afc:	f7fa ff64 	bl	80109c8 <BSP_SD_ReadBlocks>
 8015b00:	b930      	cbnz	r0, 8015b10 <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8015b02:	f7fa ff81 	bl	8010a08 <BSP_SD_GetCardState>
 8015b06:	4603      	mov	r3, r0
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	d1fa      	bne.n	8015b02 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8015b10:	2301      	movs	r3, #1
 8015b12:	e7fb      	b.n	8015b0c <SD_read+0x1c>

08015b14 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015b14:	b508      	push	{r3, lr}
 8015b16:	4608      	mov	r0, r1
 8015b18:	4611      	mov	r1, r2
 8015b1a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8015b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8015b20:	f7fa ff62 	bl	80109e8 <BSP_SD_WriteBlocks>
 8015b24:	b930      	cbnz	r0, 8015b34 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8015b26:	f7fa ff6f 	bl	8010a08 <BSP_SD_GetCardState>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	d1fa      	bne.n	8015b26 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8015b34:	2301      	movs	r3, #1
 8015b36:	e7fb      	b.n	8015b30 <SD_write+0x1c>

08015b38 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015b38:	b530      	push	{r4, r5, lr}
 8015b3a:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015b3c:	4b13      	ldr	r3, [pc, #76]	; (8015b8c <SD_ioctl+0x54>)
 8015b3e:	7818      	ldrb	r0, [r3, #0]
 8015b40:	f010 0401 	ands.w	r4, r0, #1
 8015b44:	d11b      	bne.n	8015b7e <SD_ioctl+0x46>
 8015b46:	4615      	mov	r5, r2

  switch (cmd)
 8015b48:	2903      	cmp	r1, #3
 8015b4a:	d81c      	bhi.n	8015b86 <SD_ioctl+0x4e>
 8015b4c:	e8df f001 	tbb	[pc, r1]
 8015b50:	100a0402 	.word	0x100a0402
 8015b54:	460c      	mov	r4, r1
 8015b56:	e013      	b.n	8015b80 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015b58:	4668      	mov	r0, sp
 8015b5a:	f7fa ff5f 	bl	8010a1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015b5e:	9b06      	ldr	r3, [sp, #24]
 8015b60:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8015b62:	e00d      	b.n	8015b80 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015b64:	4668      	mov	r0, sp
 8015b66:	f7fa ff59 	bl	8010a1c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015b6a:	9b07      	ldr	r3, [sp, #28]
 8015b6c:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8015b6e:	e007      	b.n	8015b80 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015b70:	4668      	mov	r0, sp
 8015b72:	f7fa ff53 	bl	8010a1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015b76:	9b07      	ldr	r3, [sp, #28]
 8015b78:	0a5b      	lsrs	r3, r3, #9
 8015b7a:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8015b7c:	e000      	b.n	8015b80 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015b7e:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8015b80:	4620      	mov	r0, r4
 8015b82:	b009      	add	sp, #36	; 0x24
 8015b84:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8015b86:	2404      	movs	r4, #4
 8015b88:	e7fa      	b.n	8015b80 <SD_ioctl+0x48>
 8015b8a:	bf00      	nop
 8015b8c:	20000091 	.word	0x20000091

08015b90 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8015b90:	4b07      	ldr	r3, [pc, #28]	; (8015bb0 <MX_SDMMC1_SD_Init+0x20>)
 8015b92:	4a08      	ldr	r2, [pc, #32]	; (8015bb4 <MX_SDMMC1_SD_Init+0x24>)
 8015b94:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8015b96:	2200      	movs	r2, #0
 8015b98:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8015b9a:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8015b9c:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8015b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ba2:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8015ba4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015ba8:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 2;
 8015baa:	2202      	movs	r2, #2
 8015bac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8015bae:	4770      	bx	lr
 8015bb0:	200172a4 	.word	0x200172a4
 8015bb4:	40012c00 	.word	0x40012c00

08015bb8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8015bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bba:	b0ab      	sub	sp, #172	; 0xac
 8015bbc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015bbe:	2100      	movs	r1, #0
 8015bc0:	9125      	str	r1, [sp, #148]	; 0x94
 8015bc2:	9126      	str	r1, [sp, #152]	; 0x98
 8015bc4:	9127      	str	r1, [sp, #156]	; 0x9c
 8015bc6:	9128      	str	r1, [sp, #160]	; 0xa0
 8015bc8:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015bca:	2284      	movs	r2, #132	; 0x84
 8015bcc:	a804      	add	r0, sp, #16
 8015bce:	f003 fa01 	bl	8018fd4 <memset>
  if(sdHandle->Instance==SDMMC1)
 8015bd2:	6822      	ldr	r2, [r4, #0]
 8015bd4:	4b22      	ldr	r3, [pc, #136]	; (8015c60 <HAL_SD_MspInit+0xa8>)
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	d001      	beq.n	8015bde <HAL_SD_MspInit+0x26>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8015bda:	b02b      	add	sp, #172	; 0xac
 8015bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8015bde:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8015be2:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015be4:	a804      	add	r0, sp, #16
 8015be6:	f7ee fd2b 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 8015bea:	2800      	cmp	r0, #0
 8015bec:	d135      	bne.n	8015c5a <HAL_SD_MspInit+0xa2>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8015bee:	4b1d      	ldr	r3, [pc, #116]	; (8015c64 <HAL_SD_MspInit+0xac>)
 8015bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015bf6:	645a      	str	r2, [r3, #68]	; 0x44
 8015bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015bfa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8015bfe:	9201      	str	r2, [sp, #4]
 8015c00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c04:	f042 0204 	orr.w	r2, r2, #4
 8015c08:	631a      	str	r2, [r3, #48]	; 0x30
 8015c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c0c:	f002 0204 	and.w	r2, r2, #4
 8015c10:	9202      	str	r2, [sp, #8]
 8015c12:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c16:	f042 0208 	orr.w	r2, r2, #8
 8015c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8015c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c1e:	f003 0308 	and.w	r3, r3, #8
 8015c22:	9303      	str	r3, [sp, #12]
 8015c24:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8015c26:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8015c2a:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c2c:	2702      	movs	r7, #2
 8015c2e:	9726      	str	r7, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c30:	2600      	movs	r6, #0
 8015c32:	9627      	str	r6, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c34:	2503      	movs	r5, #3
 8015c36:	9528      	str	r5, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8015c38:	240c      	movs	r4, #12
 8015c3a:	9429      	str	r4, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015c3c:	a925      	add	r1, sp, #148	; 0x94
 8015c3e:	480a      	ldr	r0, [pc, #40]	; (8015c68 <HAL_SD_MspInit+0xb0>)
 8015c40:	f7ec f966 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015c44:	2304      	movs	r3, #4
 8015c46:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c48:	9726      	str	r7, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c4a:	9627      	str	r6, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c4c:	9528      	str	r5, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8015c4e:	9429      	str	r4, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015c50:	a925      	add	r1, sp, #148	; 0x94
 8015c52:	4806      	ldr	r0, [pc, #24]	; (8015c6c <HAL_SD_MspInit+0xb4>)
 8015c54:	f7ec f95c 	bl	8001f10 <HAL_GPIO_Init>
}
 8015c58:	e7bf      	b.n	8015bda <HAL_SD_MspInit+0x22>
      Error_Handler();
 8015c5a:	f7fe fa17 	bl	801408c <Error_Handler>
 8015c5e:	e7c6      	b.n	8015bee <HAL_SD_MspInit+0x36>
 8015c60:	40012c00 	.word	0x40012c00
 8015c64:	40023800 	.word	0x40023800
 8015c68:	40020800 	.word	0x40020800
 8015c6c:	40020c00 	.word	0x40020c00

08015c70 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8015c70:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8015c72:	480f      	ldr	r0, [pc, #60]	; (8015cb0 <MX_SPI2_Init+0x40>)
 8015c74:	4b0f      	ldr	r3, [pc, #60]	; (8015cb4 <MX_SPI2_Init+0x44>)
 8015c76:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8015c7c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8015c7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8015c82:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8015c84:	2202      	movs	r2, #2
 8015c86:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8015c88:	2201      	movs	r2, #1
 8015c8a:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8015c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015c90:	6182      	str	r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8015c92:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8015c94:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015c96:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8015c98:	2207      	movs	r2, #7
 8015c9a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8015c9c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8015c9e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8015ca0:	f7f0 fe78 	bl	8006994 <HAL_SPI_Init>
 8015ca4:	b900      	cbnz	r0, 8015ca8 <MX_SPI2_Init+0x38>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8015ca6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8015ca8:	f7fe f9f0 	bl	801408c <Error_Handler>
}
 8015cac:	e7fb      	b.n	8015ca6 <MX_SPI2_Init+0x36>
 8015cae:	bf00      	nop
 8015cb0:	20017328 	.word	0x20017328
 8015cb4:	40003800 	.word	0x40003800

08015cb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8015cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cba:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	9303      	str	r3, [sp, #12]
 8015cc0:	9304      	str	r3, [sp, #16]
 8015cc2:	9305      	str	r3, [sp, #20]
 8015cc4:	9306      	str	r3, [sp, #24]
 8015cc6:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8015cc8:	6802      	ldr	r2, [r0, #0]
 8015cca:	4b21      	ldr	r3, [pc, #132]	; (8015d50 <HAL_SPI_MspInit+0x98>)
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d001      	beq.n	8015cd4 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8015cd0:	b009      	add	sp, #36	; 0x24
 8015cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8015cd4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8015cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015cde:	641a      	str	r2, [r3, #64]	; 0x40
 8015ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015ce2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8015ce6:	9200      	str	r2, [sp, #0]
 8015ce8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8015cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8015cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015cf4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015cf8:	9201      	str	r2, [sp, #4]
 8015cfa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015cfe:	f042 0202 	orr.w	r2, r2, #2
 8015d02:	631a      	str	r2, [r3, #48]	; 0x30
 8015d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d06:	f003 0302 	and.w	r3, r3, #2
 8015d0a:	9302      	str	r3, [sp, #8]
 8015d0c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8015d0e:	2402      	movs	r4, #2
 8015d10:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d12:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d14:	2703      	movs	r7, #3
 8015d16:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8015d18:	2605      	movs	r6, #5
 8015d1a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015d1c:	a903      	add	r1, sp, #12
 8015d1e:	480d      	ldr	r0, [pc, #52]	; (8015d54 <HAL_SPI_MspInit+0x9c>)
 8015d20:	f7ec f8f6 	bl	8001f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8015d24:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8015d28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d2a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d2c:	2500      	movs	r5, #0
 8015d2e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d30:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8015d32:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015d34:	a903      	add	r1, sp, #12
 8015d36:	4808      	ldr	r0, [pc, #32]	; (8015d58 <HAL_SPI_MspInit+0xa0>)
 8015d38:	f7ec f8ea 	bl	8001f10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8015d3c:	462a      	mov	r2, r5
 8015d3e:	4621      	mov	r1, r4
 8015d40:	2024      	movs	r0, #36	; 0x24
 8015d42:	f7eb fab7 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8015d46:	2024      	movs	r0, #36	; 0x24
 8015d48:	f7eb faf8 	bl	800133c <HAL_NVIC_EnableIRQ>
}
 8015d4c:	e7c0      	b.n	8015cd0 <HAL_SPI_MspInit+0x18>
 8015d4e:	bf00      	nop
 8015d50:	40003800 	.word	0x40003800
 8015d54:	40022000 	.word	0x40022000
 8015d58:	40020400 	.word	0x40020400

08015d5c <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8015d5c:	b510      	push	{r4, lr}
  /* Initialize the hsai_BlockA2 Instance parameter */
  hsai_BlockA2.Instance = AUDIO_OUT_SAIx;
 8015d5e:	4c16      	ldr	r4, [pc, #88]	; (8015db8 <SAIx_Out_Init+0x5c>)
 8015d60:	4b16      	ldr	r3, [pc, #88]	; (8015dbc <SAIx_Out_Init+0x60>)
 8015d62:	6023      	str	r3, [r4, #0]
  //__HAL_SAI_DISABLE(&hsai_BlockA2);
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  hsai_BlockA2.Init.AudioFrequency = AudioFreq;
 8015d64:	61e0      	str	r0, [r4, #28]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8015d66:	2300      	movs	r3, #0
 8015d68:	6063      	str	r3, [r4, #4]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8015d6a:	6163      	str	r3, [r4, #20]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8015d6c:	6323      	str	r3, [r4, #48]	; 0x30
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8015d6e:	2280      	movs	r2, #128	; 0x80
 8015d70:	6362      	str	r2, [r4, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8015d72:	63a3      	str	r3, [r4, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8015d74:	2201      	movs	r2, #1
 8015d76:	63e2      	str	r2, [r4, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8015d78:	60a3      	str	r3, [r4, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8015d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015d7e:	6121      	str	r1, [r4, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8015d80:	61a2      	str	r2, [r4, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  hsai_BlockA2.FrameInit.FrameLength = 64;
 8015d82:	2240      	movs	r2, #64	; 0x40
 8015d84:	6422      	str	r2, [r4, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8015d86:	2220      	movs	r2, #32
 8015d88:	6462      	str	r2, [r4, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8015d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8015d8e:	64a2      	str	r2, [r4, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8015d90:	64e3      	str	r3, [r4, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8015d92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8015d96:	6522      	str	r2, [r4, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8015d98:	6563      	str	r3, [r4, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8015d9a:	65a3      	str	r3, [r4, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 8015d9c:	2304      	movs	r3, #4
 8015d9e:	65e3      	str	r3, [r4, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8015da0:	230f      	movs	r3, #15
 8015da2:	6623      	str	r3, [r4, #96]	; 0x60

  HAL_SAI_Init(&hsai_BlockA2);
 8015da4:	4620      	mov	r0, r4
 8015da6:	f7ef fb57 	bl	8005458 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 8015daa:	6822      	ldr	r2, [r4, #0]
 8015dac:	6813      	ldr	r3, [r2, #0]
 8015dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015db2:	6013      	str	r3, [r2, #0]
}
 8015db4:	bd10      	pop	{r4, pc}
 8015db6:	bf00      	nop
 8015db8:	20017220 	.word	0x20017220
 8015dbc:	40015c04 	.word	0x40015c04

08015dc0 <BSP_AUDIO_OUT_Play>:
{
 8015dc0:	b538      	push	{r3, r4, r5, lr}
 8015dc2:	4605      	mov	r5, r0
 8015dc4:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8015dc6:	4b0c      	ldr	r3, [pc, #48]	; (8015df8 <BSP_AUDIO_OUT_Play+0x38>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	68db      	ldr	r3, [r3, #12]
 8015dcc:	b28a      	uxth	r2, r1
 8015dce:	4601      	mov	r1, r0
 8015dd0:	2034      	movs	r0, #52	; 0x34
 8015dd2:	4798      	blx	r3
 8015dd4:	b968      	cbnz	r0, 8015df2 <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8015dd6:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8015dda:	d202      	bcs.n	8015de2 <BSP_AUDIO_OUT_Play+0x22>
 8015ddc:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8015de0:	e001      	b.n	8015de6 <BSP_AUDIO_OUT_Play+0x26>
 8015de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015de6:	4629      	mov	r1, r5
 8015de8:	4804      	ldr	r0, [pc, #16]	; (8015dfc <BSP_AUDIO_OUT_Play+0x3c>)
 8015dea:	f7ef fe19 	bl	8005a20 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 8015dee:	2000      	movs	r0, #0
}
 8015df0:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8015df2:	2001      	movs	r0, #1
 8015df4:	e7fc      	b.n	8015df0 <BSP_AUDIO_OUT_Play+0x30>
 8015df6:	bf00      	nop
 8015df8:	2001738c 	.word	0x2001738c
 8015dfc:	20017220 	.word	0x20017220

08015e00 <BSP_AUDIO_OUT_Pause>:
{    
 8015e00:	b508      	push	{r3, lr}
    HAL_SAI_DMAPause(&hsai_BlockA2);
 8015e02:	4802      	ldr	r0, [pc, #8]	; (8015e0c <BSP_AUDIO_OUT_Pause+0xc>)
 8015e04:	f7ef fd88 	bl	8005918 <HAL_SAI_DMAPause>
}
 8015e08:	2000      	movs	r0, #0
 8015e0a:	bd08      	pop	{r3, pc}
 8015e0c:	20017220 	.word	0x20017220

08015e10 <BSP_AUDIO_OUT_Resume>:
{    
 8015e10:	b508      	push	{r3, lr}
    HAL_SAI_DMAResume(&hsai_BlockA2);
 8015e12:	4802      	ldr	r0, [pc, #8]	; (8015e1c <BSP_AUDIO_OUT_Resume+0xc>)
 8015e14:	f7ef fd93 	bl	800593e <HAL_SAI_DMAResume>
}
 8015e18:	2000      	movs	r0, #0
 8015e1a:	bd08      	pop	{r3, pc}
 8015e1c:	20017220 	.word	0x20017220

08015e20 <BSP_AUDIO_OUT_Stop>:
{
 8015e20:	b510      	push	{r4, lr}
 8015e22:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&hsai_BlockA2);
 8015e24:	4809      	ldr	r0, [pc, #36]	; (8015e4c <BSP_AUDIO_OUT_Stop+0x2c>)
 8015e26:	f7ef fda6 	bl	8005976 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8015e2a:	4b09      	ldr	r3, [pc, #36]	; (8015e50 <BSP_AUDIO_OUT_Stop+0x30>)
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	699b      	ldr	r3, [r3, #24]
 8015e30:	4621      	mov	r1, r4
 8015e32:	2034      	movs	r0, #52	; 0x34
 8015e34:	4798      	blx	r3
 8015e36:	b938      	cbnz	r0, 8015e48 <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 8015e38:	2c01      	cmp	r4, #1
 8015e3a:	d001      	beq.n	8015e40 <BSP_AUDIO_OUT_Stop+0x20>
    return AUDIO_OK;
 8015e3c:	2000      	movs	r0, #0
}
 8015e3e:	bd10      	pop	{r4, pc}
      HAL_Delay(1);
 8015e40:	2001      	movs	r0, #1
 8015e42:	f7eb fa05 	bl	8001250 <HAL_Delay>
 8015e46:	e7f9      	b.n	8015e3c <BSP_AUDIO_OUT_Stop+0x1c>
    return AUDIO_ERROR;
 8015e48:	2001      	movs	r0, #1
 8015e4a:	e7f8      	b.n	8015e3e <BSP_AUDIO_OUT_Stop+0x1e>
 8015e4c:	20017220 	.word	0x20017220
 8015e50:	2001738c 	.word	0x2001738c

08015e54 <BSP_AUDIO_OUT_SetVolume>:
{
 8015e54:	b508      	push	{r3, lr}
 8015e56:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8015e58:	4b04      	ldr	r3, [pc, #16]	; (8015e6c <BSP_AUDIO_OUT_SetVolume+0x18>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	6a1b      	ldr	r3, [r3, #32]
 8015e5e:	2034      	movs	r0, #52	; 0x34
 8015e60:	4798      	blx	r3
 8015e62:	b108      	cbz	r0, 8015e68 <BSP_AUDIO_OUT_SetVolume+0x14>
    return AUDIO_ERROR;
 8015e64:	2001      	movs	r0, #1
}
 8015e66:	bd08      	pop	{r3, pc}
    return AUDIO_OK;
 8015e68:	2000      	movs	r0, #0
 8015e6a:	e7fc      	b.n	8015e66 <BSP_AUDIO_OUT_SetVolume+0x12>
 8015e6c:	2001738c 	.word	0x2001738c

08015e70 <HAL_SAI_TxCpltCallback>:
{
 8015e70:	b508      	push	{r3, lr}
	if(BufferCtl.filetype == 0) {
 8015e72:	4b17      	ldr	r3, [pc, #92]	; (8015ed0 <HAL_SAI_TxCpltCallback+0x60>)
 8015e74:	7a1b      	ldrb	r3, [r3, #8]
 8015e76:	b96b      	cbnz	r3, 8015e94 <HAL_SAI_TxCpltCallback+0x24>
		while(f_read(&MyFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE / 2],
 8015e78:	4b16      	ldr	r3, [pc, #88]	; (8015ed4 <HAL_SAI_TxCpltCallback+0x64>)
 8015e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015e7e:	4916      	ldr	r1, [pc, #88]	; (8015ed8 <HAL_SAI_TxCpltCallback+0x68>)
 8015e80:	4816      	ldr	r0, [pc, #88]	; (8015edc <HAL_SAI_TxCpltCallback+0x6c>)
 8015e82:	f7f5 f9e0 	bl	800b246 <f_read>
 8015e86:	2800      	cmp	r0, #0
 8015e88:	d1f6      	bne.n	8015e78 <HAL_SAI_TxCpltCallback+0x8>
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 8015e8a:	4a11      	ldr	r2, [pc, #68]	; (8015ed0 <HAL_SAI_TxCpltCallback+0x60>)
 8015e8c:	6853      	ldr	r3, [r2, #4]
 8015e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e92:	6053      	str	r3, [r2, #4]
	if(BufferCtl.filetype == 1) {
 8015e94:	4b0e      	ldr	r3, [pc, #56]	; (8015ed0 <HAL_SAI_TxCpltCallback+0x60>)
 8015e96:	7a1b      	ldrb	r3, [r3, #8]
 8015e98:	2b01      	cmp	r3, #1
 8015e9a:	d00b      	beq.n	8015eb4 <HAL_SAI_TxCpltCallback+0x44>
	GetTrackTime();
 8015e9c:	f002 f8b2 	bl	8018004 <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 8015ea0:	4b0e      	ldr	r3, [pc, #56]	; (8015edc <HAL_SAI_TxCpltCallback+0x6c>)
 8015ea2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015ea6:	6919      	ldr	r1, [r3, #16]
 8015ea8:	695b      	ldr	r3, [r3, #20]
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	bf08      	it	eq
 8015eae:	4288      	cmpeq	r0, r1
 8015eb0:	d007      	beq.n	8015ec2 <HAL_SAI_TxCpltCallback+0x52>
}
 8015eb2:	bd08      	pop	{r3, pc}
        unDmaBufMode = 2;
 8015eb4:	4b0a      	ldr	r3, [pc, #40]	; (8015ee0 <HAL_SAI_TxCpltCallback+0x70>)
 8015eb6:	2202      	movs	r2, #2
 8015eb8:	601a      	str	r2, [r3, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer + (MP3_DMA_BUFFER_SIZE / 2);
 8015eba:	4b0a      	ldr	r3, [pc, #40]	; (8015ee4 <HAL_SAI_TxCpltCallback+0x74>)
 8015ebc:	4a0a      	ldr	r2, [pc, #40]	; (8015ee8 <HAL_SAI_TxCpltCallback+0x78>)
 8015ebe:	601a      	str	r2, [r3, #0]
 8015ec0:	e7ec      	b.n	8015e9c <HAL_SAI_TxCpltCallback+0x2c>
		bOutOfData = 1;
 8015ec2:	4b0a      	ldr	r3, [pc, #40]	; (8015eec <HAL_SAI_TxCpltCallback+0x7c>)
 8015ec4:	2201      	movs	r2, #1
 8015ec6:	601a      	str	r2, [r3, #0]
		unDmaBufMode = 3;
 8015ec8:	4b05      	ldr	r3, [pc, #20]	; (8015ee0 <HAL_SAI_TxCpltCallback+0x70>)
 8015eca:	2203      	movs	r2, #3
 8015ecc:	601a      	str	r2, [r3, #0]
}
 8015ece:	e7f0      	b.n	8015eb2 <HAL_SAI_TxCpltCallback+0x42>
 8015ed0:	200017a0 	.word	0x200017a0
 8015ed4:	2000e374 	.word	0x2000e374
 8015ed8:	20000fa0 	.word	0x20000fa0
 8015edc:	200017b0 	.word	0x200017b0
 8015ee0:	2000ebdc 	.word	0x2000ebdc
 8015ee4:	200133e0 	.word	0x200133e0
 8015ee8:	20010fe0 	.word	0x20010fe0
 8015eec:	2000e370 	.word	0x2000e370

08015ef0 <HAL_SAI_TxHalfCpltCallback>:
{
 8015ef0:	b508      	push	{r3, lr}
	if(BufferCtl.filetype == 0) {
 8015ef2:	4b17      	ldr	r3, [pc, #92]	; (8015f50 <HAL_SAI_TxHalfCpltCallback+0x60>)
 8015ef4:	7a1b      	ldrb	r3, [r3, #8]
 8015ef6:	b96b      	cbnz	r3, 8015f14 <HAL_SAI_TxHalfCpltCallback+0x24>
		while(f_read(&MyFile, &BufferCtl.buff[0],
 8015ef8:	4b16      	ldr	r3, [pc, #88]	; (8015f54 <HAL_SAI_TxHalfCpltCallback+0x64>)
 8015efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015efe:	4916      	ldr	r1, [pc, #88]	; (8015f58 <HAL_SAI_TxHalfCpltCallback+0x68>)
 8015f00:	4816      	ldr	r0, [pc, #88]	; (8015f5c <HAL_SAI_TxHalfCpltCallback+0x6c>)
 8015f02:	f7f5 f9a0 	bl	800b246 <f_read>
 8015f06:	2800      	cmp	r0, #0
 8015f08:	d1f6      	bne.n	8015ef8 <HAL_SAI_TxHalfCpltCallback+0x8>
		BufferCtl.fptr += AUDIO_OUT_BUFFER_SIZE / 2;
 8015f0a:	4a11      	ldr	r2, [pc, #68]	; (8015f50 <HAL_SAI_TxHalfCpltCallback+0x60>)
 8015f0c:	6853      	ldr	r3, [r2, #4]
 8015f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f12:	6053      	str	r3, [r2, #4]
	if(BufferCtl.filetype == 1) {
 8015f14:	4b0e      	ldr	r3, [pc, #56]	; (8015f50 <HAL_SAI_TxHalfCpltCallback+0x60>)
 8015f16:	7a1b      	ldrb	r3, [r3, #8]
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d00b      	beq.n	8015f34 <HAL_SAI_TxHalfCpltCallback+0x44>
	GetTrackTime();
 8015f1c:	f002 f872 	bl	8018004 <GetTrackTime>
	if(f_eof(&MyFile) == 1) {
 8015f20:	4b0e      	ldr	r3, [pc, #56]	; (8015f5c <HAL_SAI_TxHalfCpltCallback+0x6c>)
 8015f22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015f26:	6919      	ldr	r1, [r3, #16]
 8015f28:	695b      	ldr	r3, [r3, #20]
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	bf08      	it	eq
 8015f2e:	4288      	cmpeq	r0, r1
 8015f30:	d007      	beq.n	8015f42 <HAL_SAI_TxHalfCpltCallback+0x52>
}
 8015f32:	bd08      	pop	{r3, pc}
        unDmaBufMode = 1;
 8015f34:	4b0a      	ldr	r3, [pc, #40]	; (8015f60 <HAL_SAI_TxHalfCpltCallback+0x70>)
 8015f36:	2201      	movs	r2, #1
 8015f38:	601a      	str	r2, [r3, #0]
        g_pMp3DmaBufferPtr = g_pMp3DmaBuffer;
 8015f3a:	4b0a      	ldr	r3, [pc, #40]	; (8015f64 <HAL_SAI_TxHalfCpltCallback+0x74>)
 8015f3c:	4a0a      	ldr	r2, [pc, #40]	; (8015f68 <HAL_SAI_TxHalfCpltCallback+0x78>)
 8015f3e:	601a      	str	r2, [r3, #0]
 8015f40:	e7ec      	b.n	8015f1c <HAL_SAI_TxHalfCpltCallback+0x2c>
		bOutOfData = 1;
 8015f42:	4b0a      	ldr	r3, [pc, #40]	; (8015f6c <HAL_SAI_TxHalfCpltCallback+0x7c>)
 8015f44:	2201      	movs	r2, #1
 8015f46:	601a      	str	r2, [r3, #0]
		unDmaBufMode = 3;
 8015f48:	4b05      	ldr	r3, [pc, #20]	; (8015f60 <HAL_SAI_TxHalfCpltCallback+0x70>)
 8015f4a:	2203      	movs	r2, #3
 8015f4c:	601a      	str	r2, [r3, #0]
}
 8015f4e:	e7f0      	b.n	8015f32 <HAL_SAI_TxHalfCpltCallback+0x42>
 8015f50:	200017a0 	.word	0x200017a0
 8015f54:	2000e374 	.word	0x2000e374
 8015f58:	200007a0 	.word	0x200007a0
 8015f5c:	200017b0 	.word	0x200017b0
 8015f60:	2000ebdc 	.word	0x2000ebdc
 8015f64:	200133e0 	.word	0x200133e0
 8015f68:	2000ebe0 	.word	0x2000ebe0
 8015f6c:	2000e370 	.word	0x2000e370

08015f70 <BSP_AUDIO_OUT_Error_CallBack>:
}
 8015f70:	4770      	bx	lr
	...

08015f74 <HAL_SAI_ErrorCallback>:
{
 8015f74:	b510      	push	{r4, lr}
  audio_out_state = HAL_SAI_GetState(&hsai_BlockA2);
 8015f76:	4807      	ldr	r0, [pc, #28]	; (8015f94 <HAL_SAI_ErrorCallback+0x20>)
 8015f78:	f7ef fdf8 	bl	8005b6c <HAL_SAI_GetState>
 8015f7c:	4604      	mov	r4, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8015f7e:	4806      	ldr	r0, [pc, #24]	; (8015f98 <HAL_SAI_ErrorCallback+0x24>)
 8015f80:	f7ef fdf4 	bl	8005b6c <HAL_SAI_GetState>
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8015f84:	2c12      	cmp	r4, #18
 8015f86:	bf18      	it	ne
 8015f88:	2c02      	cmpne	r4, #2
 8015f8a:	d000      	beq.n	8015f8e <HAL_SAI_ErrorCallback+0x1a>
}
 8015f8c:	bd10      	pop	{r4, pc}
    BSP_AUDIO_OUT_Error_CallBack();
 8015f8e:	f7ff ffef 	bl	8015f70 <BSP_AUDIO_OUT_Error_CallBack>
}
 8015f92:	e7fb      	b.n	8015f8c <HAL_SAI_ErrorCallback+0x18>
 8015f94:	20017220 	.word	0x20017220
 8015f98:	20017390 	.word	0x20017390

08015f9c <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8015f9c:	b500      	push	{lr}
 8015f9e:	ed2d 8b02 	vpush	{d8}
 8015fa2:	b0a3      	sub	sp, #140	; 0x8c
 8015fa4:	ee08 1a10 	vmov	s16, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8015fa8:	a801      	add	r0, sp, #4
 8015faa:	f7ef f893 	bl	80050d4 <HAL_RCCEx_GetPeriphCLKConfig>
  uint32_t new_frequency_Hz = (203000000 / 9 * (float)AudioFreq /
 8015fae:	eeb8 7a48 	vcvt.f32.u32	s14, s16
 8015fb2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801601c <BSP_AUDIO_OUT_ClockConfig+0x80>
 8015fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015fba:	eddf 6a19 	vldr	s13, [pc, #100]	; 8016020 <BSP_AUDIO_OUT_ClockConfig+0x84>
 8015fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015fc6:	ee17 0a90 	vmov	r0, s15
  uint32_t set_frequency_Hz = 0;
 8015fca:	2300      	movs	r3, #0
  uint32_t I2SN = 49;
 8015fcc:	2231      	movs	r2, #49	; 0x31
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 8015fce:	2120      	movs	r1, #32
 8015fd0:	e002      	b.n	8015fd8 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	  if(set_frequency_Hz >= new_frequency_Hz) break;
 8015fd2:	4283      	cmp	r3, r0
 8015fd4:	d20f      	bcs.n	8015ff6 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  for(I2SDivQ = 32; I2SDivQ > 1; I2SDivQ--) {
 8015fd6:	3901      	subs	r1, #1
 8015fd8:	2901      	cmp	r1, #1
 8015fda:	d90c      	bls.n	8015ff6 <BSP_AUDIO_OUT_ClockConfig+0x5a>
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 8015fdc:	2232      	movs	r2, #50	; 0x32
 8015fde:	f5b2 7fd8 	cmp.w	r2, #432	; 0x1b0
 8015fe2:	d2f6      	bcs.n	8015fd2 <BSP_AUDIO_OUT_ClockConfig+0x36>
		  set_frequency_Hz = I2SN * 1000000 / I2SDivQ;
 8015fe4:	4b0f      	ldr	r3, [pc, #60]	; (8016024 <BSP_AUDIO_OUT_ClockConfig+0x88>)
 8015fe6:	fb02 f303 	mul.w	r3, r2, r3
 8015fea:	fbb3 f3f1 	udiv	r3, r3, r1
		  if(set_frequency_Hz >= new_frequency_Hz) break;
 8015fee:	4298      	cmp	r0, r3
 8015ff0:	d9ef      	bls.n	8015fd2 <BSP_AUDIO_OUT_ClockConfig+0x36>
	  for(I2SN = 50; I2SN < 432; I2SN++) {
 8015ff2:	3201      	adds	r2, #1
 8015ff4:	e7f3      	b.n	8015fde <BSP_AUDIO_OUT_ClockConfig+0x42>
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8015ff6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8015ffa:	9301      	str	r3, [sp, #4]
  rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8015ffc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016000:	9311      	str	r3, [sp, #68]	; 0x44
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = I2SN;
 8016002:	9202      	str	r2, [sp, #8]
  rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8016004:	2302      	movs	r3, #2
 8016006:	9304      	str	r3, [sp, #16]
  rcc_ex_clk_init_struct.PLLI2SDivQ = I2SDivQ;
 8016008:	910a      	str	r1, [sp, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 801600a:	a801      	add	r0, sp, #4
 801600c:	f7ee fb18 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
}
 8016010:	b023      	add	sp, #140	; 0x8c
 8016012:	ecbd 8b02 	vpop	{d8}
 8016016:	f85d fb04 	ldr.w	pc, [sp], #4
 801601a:	bf00      	nop
 801601c:	4bac15d2 	.word	0x4bac15d2
 8016020:	46ac4400 	.word	0x46ac4400
 8016024:	000f4240 	.word	0x000f4240

08016028 <BSP_AUDIO_OUT_Init>:
{ 
 8016028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801602a:	4605      	mov	r5, r0
 801602c:	460e      	mov	r6, r1
 801602e:	4614      	mov	r4, r2
    BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, AudioFreq, NULL);
 8016030:	2200      	movs	r2, #0
 8016032:	4621      	mov	r1, r4
 8016034:	480e      	ldr	r0, [pc, #56]	; (8016070 <BSP_AUDIO_OUT_Init+0x48>)
 8016036:	f7ff ffb1 	bl	8015f9c <BSP_AUDIO_OUT_ClockConfig>
    SAIx_Out_Init(AudioFreq);
 801603a:	4620      	mov	r0, r4
 801603c:	f7ff fe8e 	bl	8015d5c <SAIx_Out_Init>
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8016040:	4b0c      	ldr	r3, [pc, #48]	; (8016074 <BSP_AUDIO_OUT_Init+0x4c>)
 8016042:	689b      	ldr	r3, [r3, #8]
 8016044:	2034      	movs	r0, #52	; 0x34
 8016046:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 8016048:	f648 1394 	movw	r3, #35220	; 0x8994
 801604c:	4298      	cmp	r0, r3
 801604e:	d001      	beq.n	8016054 <BSP_AUDIO_OUT_Init+0x2c>
    ret = AUDIO_ERROR;
 8016050:	2001      	movs	r0, #1
}
 8016052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8016054:	4f07      	ldr	r7, [pc, #28]	; (8016074 <BSP_AUDIO_OUT_Init+0x4c>)
 8016056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016058:	2034      	movs	r0, #52	; 0x34
 801605a:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 801605c:	4b06      	ldr	r3, [pc, #24]	; (8016078 <BSP_AUDIO_OUT_Init+0x50>)
 801605e:	601f      	str	r7, [r3, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8016060:	683f      	ldr	r7, [r7, #0]
 8016062:	4623      	mov	r3, r4
 8016064:	4632      	mov	r2, r6
 8016066:	4629      	mov	r1, r5
 8016068:	2034      	movs	r0, #52	; 0x34
 801606a:	47b8      	blx	r7
    ret = AUDIO_OK;
 801606c:	2000      	movs	r0, #0
 801606e:	e7f0      	b.n	8016052 <BSP_AUDIO_OUT_Init+0x2a>
 8016070:	20017220 	.word	0x20017220
 8016074:	200000ac 	.word	0x200000ac
 8016078:	2001738c 	.word	0x2001738c

0801607c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void)
{
 801607c:	b508      	push	{r3, lr}
	HAL_I2C_Init(&hi2c3);
 801607e:	4802      	ldr	r0, [pc, #8]	; (8016088 <AUDIO_IO_Init+0xc>)
 8016080:	f7ed f87c 	bl	800317c <HAL_I2C_Init>
}
 8016084:	bd08      	pop	{r3, pc}
 8016086:	bf00      	nop
 8016088:	200006a8 	.word	0x200006a8

0801608c <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 801608c:	4770      	bx	lr
	...

08016090 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8016090:	b500      	push	{lr}
 8016092:	b087      	sub	sp, #28
 8016094:	f8ad 2016 	strh.w	r2, [sp, #22]
  uint16_t tmp = Value;
 8016098:	b293      	uxth	r3, r2

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 801609a:	0a1a      	lsrs	r2, r3, #8
 801609c:	f8ad 2016 	strh.w	r2, [sp, #22]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80160a0:	021b      	lsls	r3, r3, #8
 80160a2:	b21b      	sxth	r3, r3
 80160a4:	4313      	orrs	r3, r2
 80160a6:	f8ad 3016 	strh.w	r3, [sp, #22]

  HAL_I2C_Mem_Write(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2, 1000);
 80160aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80160ae:	9302      	str	r3, [sp, #8]
 80160b0:	2302      	movs	r3, #2
 80160b2:	9301      	str	r3, [sp, #4]
 80160b4:	f10d 0216 	add.w	r2, sp, #22
 80160b8:	9200      	str	r2, [sp, #0]
 80160ba:	460a      	mov	r2, r1
 80160bc:	4601      	mov	r1, r0
 80160be:	4803      	ldr	r0, [pc, #12]	; (80160cc <AUDIO_IO_Write+0x3c>)
 80160c0:	f7ed f920 	bl	8003304 <HAL_I2C_Mem_Write>
}
 80160c4:	b007      	add	sp, #28
 80160c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80160ca:	bf00      	nop
 80160cc:	200006a8 	.word	0x200006a8

080160d0 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80160d0:	b500      	push	{lr}
 80160d2:	b087      	sub	sp, #28
 80160d4:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;
 80160d6:	2300      	movs	r3, #0
 80160d8:	f8ad 3016 	strh.w	r3, [sp, #22]

  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2, 1000);
 80160dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80160e0:	9302      	str	r3, [sp, #8]
 80160e2:	2302      	movs	r3, #2
 80160e4:	9301      	str	r3, [sp, #4]
 80160e6:	f10d 0116 	add.w	r1, sp, #22
 80160ea:	9100      	str	r1, [sp, #0]
 80160ec:	4601      	mov	r1, r0
 80160ee:	4807      	ldr	r0, [pc, #28]	; (801610c <AUDIO_IO_Read+0x3c>)
 80160f0:	f7ed f9ea 	bl	80034c8 <HAL_I2C_Mem_Read>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80160f4:	f8bd 3016 	ldrh.w	r3, [sp, #22]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80160f8:	0218      	lsls	r0, r3, #8
 80160fa:	b200      	sxth	r0, r0
 80160fc:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
 8016100:	b280      	uxth	r0, r0

  read_value = tmp;
 8016102:	f8ad 0016 	strh.w	r0, [sp, #22]

  return read_value;
}
 8016106:	b007      	add	sp, #28
 8016108:	f85d fb04 	ldr.w	pc, [sp], #4
 801610c:	200006a8 	.word	0x200006a8

08016110 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8016110:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8016112:	f7eb f89d 	bl	8001250 <HAL_Delay>
}
 8016116:	bd08      	pop	{r3, pc}

08016118 <Mp3FillReadBuffer>:

UINT Mp3FillReadBuffer(BYTE* pInData, UINT unInDataLeft, FIL* pInFile)
{
 8016118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801611a:	b083      	sub	sp, #12
 801611c:	460c      	mov	r4, r1
 801611e:	4615      	mov	r5, r2
	// move last, small chunk from end of buffer to start, then fill with new data
	memmove(BufferCtl.buff, pInData, unInDataLeft);
 8016120:	4f10      	ldr	r7, [pc, #64]	; (8016164 <Mp3FillReadBuffer+0x4c>)
 8016122:	460a      	mov	r2, r1
 8016124:	4601      	mov	r1, r0
 8016126:	4638      	mov	r0, r7
 8016128:	f002 ff3a 	bl	8018fa0 <memmove>

	UINT unSpaceLeft = MP3_INBUF_SIZE - unInDataLeft;
 801612c:	f5c4 5680 	rsb	r6, r4, #4096	; 0x1000
	UINT unRead = 0;
 8016130:	2300      	movs	r3, #0
 8016132:	9301      	str	r3, [sp, #4]
	FRESULT fr = f_read(pInFile, BufferCtl.buff + unInDataLeft, unSpaceLeft, &unRead);
 8016134:	ab01      	add	r3, sp, #4
 8016136:	4632      	mov	r2, r6
 8016138:	1939      	adds	r1, r7, r4
 801613a:	4628      	mov	r0, r5
 801613c:	f7f5 f883 	bl	800b246 <f_read>
	if(fr != FR_OK)
 8016140:	b108      	cbz	r0, 8016146 <Mp3FillReadBuffer+0x2e>
	{
		unRead = 0;
 8016142:	2300      	movs	r3, #0
 8016144:	9301      	str	r3, [sp, #4]
	}
	if(unRead < unSpaceLeft)
 8016146:	9a01      	ldr	r2, [sp, #4]
 8016148:	42b2      	cmp	r2, r6
 801614a:	d302      	bcc.n	8016152 <Mp3FillReadBuffer+0x3a>
	{
	    // zero-pad to avoid finding false sync word after last frame (from old data in readBuf)
	    memset(BufferCtl.buff + unInDataLeft + unRead, 0, unSpaceLeft - unRead);
	}
	return unRead;
}
 801614c:	9801      	ldr	r0, [sp, #4]
 801614e:	b003      	add	sp, #12
 8016150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    memset(BufferCtl.buff + unInDataLeft + unRead, 0, unSpaceLeft - unRead);
 8016152:	4414      	add	r4, r2
 8016154:	1ab2      	subs	r2, r6, r2
 8016156:	2100      	movs	r1, #0
 8016158:	4802      	ldr	r0, [pc, #8]	; (8016164 <Mp3FillReadBuffer+0x4c>)
 801615a:	4420      	add	r0, r4
 801615c:	f002 ff3a 	bl	8018fd4 <memset>
 8016160:	e7f4      	b.n	801614c <Mp3FillReadBuffer+0x34>
 8016162:	bf00      	nop
 8016164:	200007a0 	.word	0x200007a0

08016168 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8016168:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 801616a:	4b0d      	ldr	r3, [pc, #52]	; (80161a0 <BSP_TS_Init+0x38>)
 801616c:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
 801616e:	4b0d      	ldr	r3, [pc, #52]	; (80161a4 <BSP_TS_Init+0x3c>)
 8016170:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8016172:	4c0d      	ldr	r4, [pc, #52]	; (80161a8 <BSP_TS_Init+0x40>)
 8016174:	6823      	ldr	r3, [r4, #0]
 8016176:	2070      	movs	r0, #112	; 0x70
 8016178:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 801617a:	6863      	ldr	r3, [r4, #4]
 801617c:	2070      	movs	r0, #112	; 0x70
 801617e:	4798      	blx	r3
 8016180:	2851      	cmp	r0, #81	; 0x51
 8016182:	d001      	beq.n	8016188 <BSP_TS_Init+0x20>
    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8016184:	2003      	movs	r0, #3
  }

  return status;
}
 8016186:	bd10      	pop	{r4, pc}
    tsDriver = &ft5336_ts_drv;
 8016188:	4a08      	ldr	r2, [pc, #32]	; (80161ac <BSP_TS_Init+0x44>)
 801618a:	6014      	str	r4, [r2, #0]
    I2cAddress = TS_I2C_ADDRESS;
 801618c:	2070      	movs	r0, #112	; 0x70
 801618e:	4a08      	ldr	r2, [pc, #32]	; (80161b0 <BSP_TS_Init+0x48>)
 8016190:	7010      	strb	r0, [r2, #0]
    tsOrientation = TS_SWAP_XY;
 8016192:	4a08      	ldr	r2, [pc, #32]	; (80161b4 <BSP_TS_Init+0x4c>)
 8016194:	2108      	movs	r1, #8
 8016196:	7011      	strb	r1, [r2, #0]
    tsDriver->Start(I2cAddress);
 8016198:	68e3      	ldr	r3, [r4, #12]
 801619a:	4798      	blx	r3
  uint8_t status = TS_OK;
 801619c:	2000      	movs	r0, #0
 801619e:	e7f2      	b.n	8016186 <BSP_TS_Init+0x1e>
 80161a0:	20017446 	.word	0x20017446
 80161a4:	20017448 	.word	0x20017448
 80161a8:	2000002c 	.word	0x2000002c
 80161ac:	20017440 	.word	0x20017440
 80161b0:	20017414 	.word	0x20017414
 80161b4:	20017444 	.word	0x20017444

080161b8 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 80161b8:	b510      	push	{r4, lr}
 80161ba:	b086      	sub	sp, #24
	GPIO_InitTypeDef gpio_init_structure;

	/* Configure Interrupt mode for SD detection pin */
	gpio_init_structure.Pin = TS_INT_PIN;
 80161bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80161c0:	9301      	str	r3, [sp, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80161c2:	2400      	movs	r4, #0
 80161c4:	9403      	str	r4, [sp, #12]
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80161c6:	2302      	movs	r3, #2
 80161c8:	9304      	str	r3, [sp, #16]
	gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80161ca:	4b0a      	ldr	r3, [pc, #40]	; (80161f4 <BSP_TS_ITConfig+0x3c>)
 80161cc:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80161ce:	a901      	add	r1, sp, #4
 80161d0:	4809      	ldr	r0, [pc, #36]	; (80161f8 <BSP_TS_ITConfig+0x40>)
 80161d2:	f7eb fe9d 	bl	8001f10 <HAL_GPIO_Init>

	/* Enable and set Touch screen EXTI Interrupt to the lowest priority */
	HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 80161d6:	4622      	mov	r2, r4
 80161d8:	210f      	movs	r1, #15
 80161da:	2028      	movs	r0, #40	; 0x28
 80161dc:	f7eb f86a 	bl	80012b4 <HAL_NVIC_SetPriority>
	/* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 80161e0:	4b06      	ldr	r3, [pc, #24]	; (80161fc <BSP_TS_ITConfig+0x44>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	699b      	ldr	r3, [r3, #24]
 80161e6:	4a06      	ldr	r2, [pc, #24]	; (8016200 <BSP_TS_ITConfig+0x48>)
 80161e8:	7810      	ldrb	r0, [r2, #0]
 80161ea:	4798      	blx	r3

  return TS_OK;  
}
 80161ec:	4620      	mov	r0, r4
 80161ee:	b006      	add	sp, #24
 80161f0:	bd10      	pop	{r4, pc}
 80161f2:	bf00      	nop
 80161f4:	10110000 	.word	0x10110000
 80161f8:	40022000 	.word	0x40022000
 80161fc:	20017440 	.word	0x20017440
 8016200:	20017414 	.word	0x20017414

08016204 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8016204:	b510      	push	{r4, lr}
 8016206:	b082      	sub	sp, #8
 8016208:	4604      	mov	r4, r0
  uint32_t gestureId = 0;
 801620a:	2300      	movs	r3, #0
 801620c:	9301      	str	r3, [sp, #4]
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 801620e:	a901      	add	r1, sp, #4
 8016210:	4b1e      	ldr	r3, [pc, #120]	; (801628c <BSP_TS_Get_GestureId+0x88>)
 8016212:	7818      	ldrb	r0, [r3, #0]
 8016214:	f7fd fa58 	bl	80136c8 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8016218:	9b01      	ldr	r3, [sp, #4]
 801621a:	2b1c      	cmp	r3, #28
 801621c:	d812      	bhi.n	8016244 <BSP_TS_Get_GestureId+0x40>
 801621e:	2b1c      	cmp	r3, #28
 8016220:	d831      	bhi.n	8016286 <BSP_TS_Get_GestureId+0x82>
 8016222:	e8df f003 	tbb	[pc, r3]
 8016226:	3019      	.short	0x3019
 8016228:	30303030 	.word	0x30303030
 801622c:	30303030 	.word	0x30303030
 8016230:	30303030 	.word	0x30303030
 8016234:	301c3030 	.word	0x301c3030
 8016238:	30203030 	.word	0x30203030
 801623c:	30243030 	.word	0x30243030
 8016240:	3030      	.short	0x3030
 8016242:	28          	.byte	0x28
 8016243:	00          	.byte	0x00
 8016244:	2b40      	cmp	r3, #64	; 0x40
 8016246:	d01a      	beq.n	801627e <BSP_TS_Get_GestureId+0x7a>
 8016248:	2b49      	cmp	r3, #73	; 0x49
 801624a:	d103      	bne.n	8016254 <BSP_TS_Get_GestureId+0x50>
      break;
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 801624c:	2306      	movs	r3, #6
 801624e:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016250:	2000      	movs	r0, #0
      break;
 8016252:	e019      	b.n	8016288 <BSP_TS_Get_GestureId+0x84>
  switch(gestureId)
 8016254:	2001      	movs	r0, #1
 8016256:	e017      	b.n	8016288 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8016258:	2000      	movs	r0, #0
 801625a:	62a0      	str	r0, [r4, #40]	; 0x28
      break;
 801625c:	e014      	b.n	8016288 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 801625e:	2301      	movs	r3, #1
 8016260:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016262:	2000      	movs	r0, #0
      break;
 8016264:	e010      	b.n	8016288 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8016266:	2302      	movs	r3, #2
 8016268:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 801626a:	2000      	movs	r0, #0
      break;
 801626c:	e00c      	b.n	8016288 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 801626e:	2303      	movs	r3, #3
 8016270:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016272:	2000      	movs	r0, #0
      break;
 8016274:	e008      	b.n	8016288 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8016276:	2304      	movs	r3, #4
 8016278:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 801627a:	2000      	movs	r0, #0
      break;
 801627c:	e004      	b.n	8016288 <BSP_TS_Get_GestureId+0x84>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 801627e:	2305      	movs	r3, #5
 8016280:	62a3      	str	r3, [r4, #40]	; 0x28
  uint8_t  ts_status = TS_OK;
 8016282:	2000      	movs	r0, #0
      break;
 8016284:	e000      	b.n	8016288 <BSP_TS_Get_GestureId+0x84>
  switch(gestureId)
 8016286:	2001      	movs	r0, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8016288:	b002      	add	sp, #8
 801628a:	bd10      	pop	{r4, pc}
 801628c:	20017414 	.word	0x20017414

08016290 <BSP_TS_GetState>:
{
 8016290:	b570      	push	{r4, r5, r6, lr}
 8016292:	b092      	sub	sp, #72	; 0x48
 8016294:	4605      	mov	r5, r0
  uint32_t weight = 0;
 8016296:	2300      	movs	r3, #0
 8016298:	9305      	str	r3, [sp, #20]
  uint32_t area = 0;
 801629a:	9304      	str	r3, [sp, #16]
  uint32_t event = 0;
 801629c:	9303      	str	r3, [sp, #12]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 801629e:	4b69      	ldr	r3, [pc, #420]	; (8016444 <BSP_TS_GetState+0x1b4>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	691b      	ldr	r3, [r3, #16]
 80162a4:	4a68      	ldr	r2, [pc, #416]	; (8016448 <BSP_TS_GetState+0x1b8>)
 80162a6:	7810      	ldrb	r0, [r2, #0]
 80162a8:	4798      	blx	r3
 80162aa:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 80162ac:	2800      	cmp	r0, #0
 80162ae:	f000 80c6 	beq.w	801643e <BSP_TS_GetState+0x1ae>
    for(index=0; index < TS_State->touchDetected; index++)
 80162b2:	2400      	movs	r4, #0
 80162b4:	e01f      	b.n	80162f6 <BSP_TS_GetState+0x66>
        x[index] = brute_x[index];
 80162b6:	aa12      	add	r2, sp, #72	; 0x48
 80162b8:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80162bc:	f832 1c24 	ldrh.w	r1, [r2, #-36]
 80162c0:	f822 1c0c 	strh.w	r1, [r2, #-12]
        y[index] = brute_y[index];
 80162c4:	f832 1c30 	ldrh.w	r1, [r2, #-48]
 80162c8:	f822 1c18 	strh.w	r1, [r2, #-24]
 80162cc:	e027      	b.n	801631e <BSP_TS_GetState+0x8e>
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	1a5b      	subs	r3, r3, r1
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	e056      	b.n	8016384 <BSP_TS_GetState+0xf4>
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80162d6:	b292      	uxth	r2, r2
 80162d8:	1b92      	subs	r2, r2, r6
 80162da:	b292      	uxth	r2, r2
 80162dc:	e05f      	b.n	801639e <BSP_TS_GetState+0x10e>
        TS_State->touchX[index] = x[index];
 80162de:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 80162e2:	8059      	strh	r1, [r3, #2]
        TS_State->touchY[index] = y[index];
 80162e4:	1d23      	adds	r3, r4, #4
 80162e6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80162ea:	809e      	strh	r6, [r3, #4]
 80162ec:	e07b      	b.n	80163e6 <BSP_TS_GetState+0x156>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80162ee:	192b      	adds	r3, r5, r4
 80162f0:	2201      	movs	r2, #1
 80162f2:	76da      	strb	r2, [r3, #27]
    for(index=0; index < TS_State->touchDetected; index++)
 80162f4:	3401      	adds	r4, #1
 80162f6:	782b      	ldrb	r3, [r5, #0]
 80162f8:	42a3      	cmp	r3, r4
 80162fa:	f240 809d 	bls.w	8016438 <BSP_TS_GetState+0x1a8>
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80162fe:	4b51      	ldr	r3, [pc, #324]	; (8016444 <BSP_TS_GetState+0x1b4>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	695b      	ldr	r3, [r3, #20]
 8016304:	aa06      	add	r2, sp, #24
 8016306:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801630a:	a909      	add	r1, sp, #36	; 0x24
 801630c:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8016310:	484d      	ldr	r0, [pc, #308]	; (8016448 <BSP_TS_GetState+0x1b8>)
 8016312:	7800      	ldrb	r0, [r0, #0]
 8016314:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8016316:	4b4d      	ldr	r3, [pc, #308]	; (801644c <BSP_TS_GetState+0x1bc>)
 8016318:	781b      	ldrb	r3, [r3, #0]
 801631a:	2b01      	cmp	r3, #1
 801631c:	d0cb      	beq.n	80162b6 <BSP_TS_GetState+0x26>
      if(tsOrientation & TS_SWAP_X)
 801631e:	f013 0f02 	tst.w	r3, #2
 8016322:	d008      	beq.n	8016336 <BSP_TS_GetState+0xa6>
        x[index] = 4096 - brute_x[index];
 8016324:	aa12      	add	r2, sp, #72	; 0x48
 8016326:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 801632a:	f831 2c24 	ldrh.w	r2, [r1, #-36]
 801632e:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8016332:	f821 2c0c 	strh.w	r2, [r1, #-12]
      if(tsOrientation & TS_SWAP_Y)
 8016336:	f013 0f04 	tst.w	r3, #4
 801633a:	d008      	beq.n	801634e <BSP_TS_GetState+0xbe>
        y[index] = 4096 - brute_y[index];
 801633c:	aa12      	add	r2, sp, #72	; 0x48
 801633e:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 8016342:	f831 2c30 	ldrh.w	r2, [r1, #-48]
 8016346:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 801634a:	f821 2c18 	strh.w	r2, [r1, #-24]
      if(tsOrientation & TS_SWAP_XY)
 801634e:	f013 0f08 	tst.w	r3, #8
 8016352:	d00a      	beq.n	801636a <BSP_TS_GetState+0xda>
        y[index] = brute_x[index];
 8016354:	ab12      	add	r3, sp, #72	; 0x48
 8016356:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801635a:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 801635e:	f823 2c18 	strh.w	r2, [r3, #-24]
        x[index] = brute_y[index];
 8016362:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8016366:	f823 2c0c 	strh.w	r2, [r3, #-12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 801636a:	ab12      	add	r3, sp, #72	; 0x48
 801636c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8016370:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8016374:	4b36      	ldr	r3, [pc, #216]	; (8016450 <BSP_TS_GetState+0x1c0>)
 8016376:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801637a:	4299      	cmp	r1, r3
 801637c:	d9a7      	bls.n	80162ce <BSP_TS_GetState+0x3e>
 801637e:	b29b      	uxth	r3, r3
 8016380:	1acb      	subs	r3, r1, r3
 8016382:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8016384:	aa12      	add	r2, sp, #72	; 0x48
 8016386:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801638a:	f832 6c18 	ldrh.w	r6, [r2, #-24]
 801638e:	4a31      	ldr	r2, [pc, #196]	; (8016454 <BSP_TS_GetState+0x1c4>)
 8016390:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8016394:	4296      	cmp	r6, r2
 8016396:	d99e      	bls.n	80162d6 <BSP_TS_GetState+0x46>
 8016398:	b292      	uxth	r2, r2
 801639a:	1ab2      	subs	r2, r6, r2
 801639c:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 801639e:	4413      	add	r3, r2
 80163a0:	2b05      	cmp	r3, #5
 80163a2:	dd05      	ble.n	80163b0 <BSP_TS_GetState+0x120>
        _x[index] = x[index];
 80163a4:	4b2a      	ldr	r3, [pc, #168]	; (8016450 <BSP_TS_GetState+0x1c0>)
 80163a6:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        _y[index] = y[index];
 80163aa:	4b2a      	ldr	r3, [pc, #168]	; (8016454 <BSP_TS_GetState+0x1c4>)
 80163ac:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80163b0:	4b25      	ldr	r3, [pc, #148]	; (8016448 <BSP_TS_GetState+0x1b8>)
 80163b2:	7818      	ldrb	r0, [r3, #0]
 80163b4:	2870      	cmp	r0, #112	; 0x70
 80163b6:	d092      	beq.n	80162de <BSP_TS_GetState+0x4e>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80163b8:	4b25      	ldr	r3, [pc, #148]	; (8016450 <BSP_TS_GetState+0x1c0>)
 80163ba:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80163be:	4b26      	ldr	r3, [pc, #152]	; (8016458 <BSP_TS_GetState+0x1c8>)
 80163c0:	881b      	ldrh	r3, [r3, #0]
 80163c2:	fb02 f303 	mul.w	r3, r2, r3
 80163c6:	0b1b      	lsrs	r3, r3, #12
 80163c8:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 80163cc:	8053      	strh	r3, [r2, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80163ce:	4b21      	ldr	r3, [pc, #132]	; (8016454 <BSP_TS_GetState+0x1c4>)
 80163d0:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80163d4:	4b21      	ldr	r3, [pc, #132]	; (801645c <BSP_TS_GetState+0x1cc>)
 80163d6:	881b      	ldrh	r3, [r3, #0]
 80163d8:	fb02 f303 	mul.w	r3, r2, r3
 80163dc:	0b1b      	lsrs	r3, r3, #12
 80163de:	1d22      	adds	r2, r4, #4
 80163e0:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80163e4:	8093      	strh	r3, [r2, #4]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80163e6:	ab03      	add	r3, sp, #12
 80163e8:	9300      	str	r3, [sp, #0]
 80163ea:	ab04      	add	r3, sp, #16
 80163ec:	aa05      	add	r2, sp, #20
 80163ee:	4621      	mov	r1, r4
 80163f0:	f7fd f97c 	bl	80136ec <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 80163f4:	192b      	adds	r3, r5, r4
 80163f6:	9a05      	ldr	r2, [sp, #20]
 80163f8:	759a      	strb	r2, [r3, #22]
      TS_State->touchArea[index]   = area;
 80163fa:	9a04      	ldr	r2, [sp, #16]
 80163fc:	f883 2020 	strb.w	r2, [r3, #32]
      switch(event)
 8016400:	9b03      	ldr	r3, [sp, #12]
 8016402:	2b03      	cmp	r3, #3
 8016404:	f63f af76 	bhi.w	80162f4 <BSP_TS_GetState+0x64>
 8016408:	a201      	add	r2, pc, #4	; (adr r2, 8016410 <BSP_TS_GetState+0x180>)
 801640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801640e:	bf00      	nop
 8016410:	080162ef 	.word	0x080162ef
 8016414:	08016421 	.word	0x08016421
 8016418:	08016429 	.word	0x08016429
 801641c:	08016431 	.word	0x08016431
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8016420:	192b      	adds	r3, r5, r4
 8016422:	2202      	movs	r2, #2
 8016424:	76da      	strb	r2, [r3, #27]
          break;
 8016426:	e765      	b.n	80162f4 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8016428:	192b      	adds	r3, r5, r4
 801642a:	2203      	movs	r2, #3
 801642c:	76da      	strb	r2, [r3, #27]
          break;
 801642e:	e761      	b.n	80162f4 <BSP_TS_GetState+0x64>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8016430:	192b      	adds	r3, r5, r4
 8016432:	2200      	movs	r2, #0
 8016434:	76da      	strb	r2, [r3, #27]
          break;
 8016436:	e75d      	b.n	80162f4 <BSP_TS_GetState+0x64>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8016438:	4628      	mov	r0, r5
 801643a:	f7ff fee3 	bl	8016204 <BSP_TS_Get_GestureId>
}
 801643e:	b012      	add	sp, #72	; 0x48
 8016440:	bd70      	pop	{r4, r5, r6, pc}
 8016442:	bf00      	nop
 8016444:	20017440 	.word	0x20017440
 8016448:	20017414 	.word	0x20017414
 801644c:	20017444 	.word	0x20017444
 8016450:	20017418 	.word	0x20017418
 8016454:	2001742c 	.word	0x2001742c
 8016458:	20017446 	.word	0x20017446
 801645c:	20017448 	.word	0x20017448

08016460 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */
void BSP_TS_ITClear(void)
{
 8016460:	b508      	push	{r3, lr}
  /* Clear TS IT pending bits */
  tsDriver->ClearIT(I2cAddress); 
 8016462:	4b03      	ldr	r3, [pc, #12]	; (8016470 <BSP_TS_ITClear+0x10>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	69db      	ldr	r3, [r3, #28]
 8016468:	4a02      	ldr	r2, [pc, #8]	; (8016474 <BSP_TS_ITClear+0x14>)
 801646a:	7810      	ldrb	r0, [r2, #0]
 801646c:	4798      	blx	r3
}
 801646e:	bd08      	pop	{r3, pc}
 8016470:	20017440 	.word	0x20017440
 8016474:	20017414 	.word	0x20017414

08016478 <BSP_TS_ResetTouchData>:
uint8_t BSP_TS_ResetTouchData(TS_StateTypeDef *TS_State)
{
  uint8_t ts_status = TS_ERROR;
  uint32_t index;

  if (TS_State != (TS_StateTypeDef *)NULL)
 8016478:	4684      	mov	ip, r0
 801647a:	b1b0      	cbz	r0, 80164aa <BSP_TS_ResetTouchData+0x32>
  {
    TS_State->gestureId = GEST_ID_NO_GESTURE;
 801647c:	2300      	movs	r3, #0
 801647e:	6283      	str	r3, [r0, #40]	; 0x28
    TS_State->touchDetected = 0;
 8016480:	7003      	strb	r3, [r0, #0]

    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 8016482:	e00e      	b.n	80164a2 <BSP_TS_ResetTouchData+0x2a>
    {
      TS_State->touchX[index]       = 0;
 8016484:	eb0c 0143 	add.w	r1, ip, r3, lsl #1
 8016488:	2200      	movs	r2, #0
 801648a:	804a      	strh	r2, [r1, #2]
      TS_State->touchY[index]       = 0;
 801648c:	1d19      	adds	r1, r3, #4
 801648e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8016492:	808a      	strh	r2, [r1, #4]
      TS_State->touchArea[index]    = 0;
 8016494:	eb0c 0103 	add.w	r1, ip, r3
 8016498:	f881 2020 	strb.w	r2, [r1, #32]
      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 801649c:	76ca      	strb	r2, [r1, #27]
      TS_State->touchWeight[index]  = 0;
 801649e:	758a      	strb	r2, [r1, #22]
    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 80164a0:	3301      	adds	r3, #1
 80164a2:	2b04      	cmp	r3, #4
 80164a4:	d9ee      	bls.n	8016484 <BSP_TS_ResetTouchData+0xc>
    }

    ts_status = TS_OK;
 80164a6:	2000      	movs	r0, #0
 80164a8:	4770      	bx	lr
  uint8_t ts_status = TS_ERROR;
 80164aa:	2001      	movs	r0, #1

  } /* of if (TS_State != (TS_StateTypeDef *)NULL) */

  return (ts_status);
}
 80164ac:	4770      	bx	lr
	...

080164b0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80164b0:	b508      	push	{r3, lr}
	HAL_I2C_Init(&hi2c3);
 80164b2:	4802      	ldr	r0, [pc, #8]	; (80164bc <TS_IO_Init+0xc>)
 80164b4:	f7ec fe62 	bl	800317c <HAL_I2C_Init>
}
 80164b8:	bd08      	pop	{r3, pc}
 80164ba:	bf00      	nop
 80164bc:	200006a8 	.word	0x200006a8

080164c0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80164c0:	b500      	push	{lr}
 80164c2:	b087      	sub	sp, #28
 80164c4:	f88d 2017 	strb.w	r2, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1, 1000);
 80164c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80164cc:	9302      	str	r3, [sp, #8]
 80164ce:	2301      	movs	r3, #1
 80164d0:	9301      	str	r3, [sp, #4]
 80164d2:	f10d 0217 	add.w	r2, sp, #23
 80164d6:	9200      	str	r2, [sp, #0]
 80164d8:	460a      	mov	r2, r1
 80164da:	4601      	mov	r1, r0
 80164dc:	4802      	ldr	r0, [pc, #8]	; (80164e8 <TS_IO_Write+0x28>)
 80164de:	f7ec ff11 	bl	8003304 <HAL_I2C_Mem_Write>
}
 80164e2:	b007      	add	sp, #28
 80164e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80164e8:	200006a8 	.word	0x200006a8

080164ec <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80164ec:	b500      	push	{lr}
 80164ee:	b087      	sub	sp, #28
 80164f0:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80164f2:	2300      	movs	r3, #0
 80164f4:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1, 1000);
 80164f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80164fc:	9302      	str	r3, [sp, #8]
 80164fe:	2301      	movs	r3, #1
 8016500:	9301      	str	r3, [sp, #4]
 8016502:	f10d 0117 	add.w	r1, sp, #23
 8016506:	9100      	str	r1, [sp, #0]
 8016508:	4601      	mov	r1, r0
 801650a:	4804      	ldr	r0, [pc, #16]	; (801651c <TS_IO_Read+0x30>)
 801650c:	f7ec ffdc 	bl	80034c8 <HAL_I2C_Mem_Read>
  return read_value;
}
 8016510:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8016514:	b007      	add	sp, #28
 8016516:	f85d fb04 	ldr.w	pc, [sp], #4
 801651a:	bf00      	nop
 801651c:	200006a8 	.word	0x200006a8

08016520 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8016520:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8016522:	f7ea fe95 	bl	8001250 <HAL_Delay>
}
 8016526:	bd08      	pop	{r3, pc}

08016528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016528:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801652a:	4b0a      	ldr	r3, [pc, #40]	; (8016554 <HAL_MspInit+0x2c>)
 801652c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801652e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8016532:	641a      	str	r2, [r3, #64]	; 0x40
 8016534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016536:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801653a:	9200      	str	r2, [sp, #0]
 801653c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801653e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016544:	645a      	str	r2, [r3, #68]	; 0x44
 8016546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801654c:	9301      	str	r3, [sp, #4]
 801654e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8016550:	b002      	add	sp, #8
 8016552:	4770      	bx	lr
 8016554:	40023800 	.word	0x40023800

08016558 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8016558:	4770      	bx	lr

0801655a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801655a:	e7fe      	b.n	801655a <HardFault_Handler>

0801655c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801655c:	e7fe      	b.n	801655c <MemManage_Handler>

0801655e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801655e:	e7fe      	b.n	801655e <BusFault_Handler>

08016560 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016560:	e7fe      	b.n	8016560 <UsageFault_Handler>

08016562 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016562:	4770      	bx	lr

08016564 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016564:	4770      	bx	lr

08016566 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016566:	4770      	bx	lr

08016568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016568:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801656a:	f7ea fe5f 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801656e:	bd08      	pop	{r3, pc}

08016570 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8016570:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 8016572:	2304      	movs	r3, #4
 8016574:	4a04      	ldr	r2, [pc, #16]	; (8016588 <EXTI0_IRQHandler+0x18>)
 8016576:	4905      	ldr	r1, [pc, #20]	; (801658c <EXTI0_IRQHandler+0x1c>)
 8016578:	4805      	ldr	r0, [pc, #20]	; (8016590 <EXTI0_IRQHandler+0x20>)
 801657a:	f7f0 fb3d 	bl	8006bf8 <HAL_SPI_TransmitReceive_IT>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_NSS_Pin);
 801657e:	2001      	movs	r0, #1
 8016580:	f7eb fe78 	bl	8002274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8016584:	bd08      	pop	{r3, pc}
 8016586:	bf00      	nop
 8016588:	2000eb9c 	.word	0x2000eb9c
 801658c:	20000058 	.word	0x20000058
 8016590:	20017328 	.word	0x20017328

08016594 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8016594:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KBD_INT_Pin);
 8016596:	2004      	movs	r0, #4
 8016598:	f7eb fe6c 	bl	8002274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 801659c:	bd08      	pop	{r3, pc}
	...

080165a0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80165a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if(button_flag & (1 << 0)) {
 80165a2:	4b1a      	ldr	r3, [pc, #104]	; (801660c <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 80165a4:	881b      	ldrh	r3, [r3, #0]
 80165a6:	f013 0f01 	tst.w	r3, #1
 80165aa:	d015      	beq.n	80165d8 <TIM1_BRK_TIM9_IRQHandler+0x38>
		if(display.cuemode == 0) display.cuemode = 1;
 80165ac:	4a18      	ldr	r2, [pc, #96]	; (8016610 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 80165ae:	7892      	ldrb	r2, [r2, #2]
 80165b0:	b972      	cbnz	r2, 80165d0 <TIM1_BRK_TIM9_IRQHandler+0x30>
 80165b2:	4a17      	ldr	r2, [pc, #92]	; (8016610 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 80165b4:	2101      	movs	r1, #1
 80165b6:	7091      	strb	r1, [r2, #2]
		else display.cuemode = 0;
		button_flag ^= (1 << 0);
 80165b8:	f083 0301 	eor.w	r3, r3, #1
 80165bc:	4a13      	ldr	r2, [pc, #76]	; (801660c <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 80165be:	8013      	strh	r3, [r2, #0]
	else if(button_flag & (1 << 3)) {
		if(display.quantize == 0) display.quantize = 1;
		else display.quantize = 0;
		button_flag ^= (1 << 3);
	}
	HAL_TIM_Base_Stop_IT(&htim9);
 80165c0:	4c14      	ldr	r4, [pc, #80]	; (8016614 <TIM1_BRK_TIM9_IRQHandler+0x74>)
 80165c2:	4620      	mov	r0, r4
 80165c4:	f7f0 fd96 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80165c8:	4620      	mov	r0, r4
 80165ca:	f7f0 fdf0 	bl	80071ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80165ce:	bd10      	pop	{r4, pc}
		else display.cuemode = 0;
 80165d0:	4a0f      	ldr	r2, [pc, #60]	; (8016610 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 80165d2:	2100      	movs	r1, #0
 80165d4:	7091      	strb	r1, [r2, #2]
 80165d6:	e7ef      	b.n	80165b8 <TIM1_BRK_TIM9_IRQHandler+0x18>
	else if(button_flag & (1 << 1)) {
 80165d8:	f013 0f02 	tst.w	r3, #2
 80165dc:	d004      	beq.n	80165e8 <TIM1_BRK_TIM9_IRQHandler+0x48>
		button_flag ^= (1 << 1);
 80165de:	f083 0302 	eor.w	r3, r3, #2
 80165e2:	4a0a      	ldr	r2, [pc, #40]	; (801660c <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 80165e4:	8013      	strh	r3, [r2, #0]
 80165e6:	e7eb      	b.n	80165c0 <TIM1_BRK_TIM9_IRQHandler+0x20>
	else if(button_flag & (1 << 3)) {
 80165e8:	f013 0f08 	tst.w	r3, #8
 80165ec:	d0e8      	beq.n	80165c0 <TIM1_BRK_TIM9_IRQHandler+0x20>
		if(display.quantize == 0) display.quantize = 1;
 80165ee:	4a08      	ldr	r2, [pc, #32]	; (8016610 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 80165f0:	7c52      	ldrb	r2, [r2, #17]
 80165f2:	b93a      	cbnz	r2, 8016604 <TIM1_BRK_TIM9_IRQHandler+0x64>
 80165f4:	4a06      	ldr	r2, [pc, #24]	; (8016610 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 80165f6:	2101      	movs	r1, #1
 80165f8:	7451      	strb	r1, [r2, #17]
		button_flag ^= (1 << 3);
 80165fa:	f083 0308 	eor.w	r3, r3, #8
 80165fe:	4a03      	ldr	r2, [pc, #12]	; (801660c <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8016600:	8013      	strh	r3, [r2, #0]
 8016602:	e7dd      	b.n	80165c0 <TIM1_BRK_TIM9_IRQHandler+0x20>
		else display.quantize = 0;
 8016604:	4a02      	ldr	r2, [pc, #8]	; (8016610 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8016606:	2100      	movs	r1, #0
 8016608:	7451      	strb	r1, [r2, #17]
 801660a:	e7f6      	b.n	80165fa <TIM1_BRK_TIM9_IRQHandler+0x5a>
 801660c:	2001744a 	.word	0x2001744a
 8016610:	200005e8 	.word	0x200005e8
 8016614:	200175ac 	.word	0x200175ac

08016618 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8016618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
	ClearLayer();
 801661a:	f7fa fa45 	bl	8010aa8 <ClearLayer>
	SetBeatGrid();
 801661e:	f7fa fa91 	bl	8010b44 <SetBeatGrid>
	if(menu_mode == 0) DrawSpectrum();
 8016622:	4b0b      	ldr	r3, [pc, #44]	; (8016650 <TIM4_IRQHandler+0x38>)
 8016624:	f993 3000 	ldrsb.w	r3, [r3]
 8016628:	b163      	cbz	r3, 8016644 <TIM4_IRQHandler+0x2c>
	if(menu_mode != 3) 	DrawLowSpectrum();
 801662a:	4b09      	ldr	r3, [pc, #36]	; (8016650 <TIM4_IRQHandler+0x38>)
 801662c:	f993 3000 	ldrsb.w	r3, [r3]
 8016630:	2b03      	cmp	r3, #3
 8016632:	d10a      	bne.n	801664a <TIM4_IRQHandler+0x32>
	DrawMenu();
 8016634:	f7fc fab0 	bl	8012b98 <DrawMenu>
	//DrawFrequencySpectrum();
	ChangeLayers();
 8016638:	f7fa fa5c 	bl	8010af4 <ChangeLayers>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 801663c:	4805      	ldr	r0, [pc, #20]	; (8016654 <TIM4_IRQHandler+0x3c>)
 801663e:	f7f0 fdb6 	bl	80071ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8016642:	bd08      	pop	{r3, pc}
	if(menu_mode == 0) DrawSpectrum();
 8016644:	f7fb fe7e 	bl	8012344 <DrawSpectrum>
 8016648:	e7ef      	b.n	801662a <TIM4_IRQHandler+0x12>
	if(menu_mode != 3) 	DrawLowSpectrum();
 801664a:	f7fa fff9 	bl	8011640 <DrawLowSpectrum>
 801664e:	e7f1      	b.n	8016634 <TIM4_IRQHandler+0x1c>
 8016650:	20000604 	.word	0x20000604
 8016654:	2001746c 	.word	0x2001746c

08016658 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8016658:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 801665a:	4802      	ldr	r0, [pc, #8]	; (8016664 <SPI2_IRQHandler+0xc>)
 801665c:	f7f0 fc28 	bl	8006eb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8016660:	bd08      	pop	{r3, pc}
 8016662:	bf00      	nop
 8016664:	20017328 	.word	0x20017328

08016668 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8016668:	b510      	push	{r4, lr}
 801666a:	b082      	sub	sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	BSP_TS_GetState(&ts_State);
 801666c:	4cae      	ldr	r4, [pc, #696]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 801666e:	4620      	mov	r0, r4
 8016670:	f7ff fe0e 	bl	8016290 <BSP_TS_GetState>
	if(ts_State.touchDetected == 1) {
 8016674:	7823      	ldrb	r3, [r4, #0]
 8016676:	2b01      	cmp	r3, #1
 8016678:	d00a      	beq.n	8016690 <EXTI15_10_IRQHandler+0x28>
				if(stretch > 4) stretch = 4;
			}
			touch_count++;
		}
	}*/
	BSP_TS_ResetTouchData(&ts_State);
 801667a:	48ab      	ldr	r0, [pc, #684]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 801667c:	f7ff fefc 	bl	8016478 <BSP_TS_ResetTouchData>
	BSP_TS_ITClear();
 8016680:	f7ff feee 	bl	8016460 <BSP_TS_ITClear>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8016684:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8016688:	f7eb fdf4 	bl	8002274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801668c:	b002      	add	sp, #8
 801668e:	bd10      	pop	{r4, pc}
		if((ts_State.touchX[0] > 40) && (ts_State.touchX[0] < 440) && (ts_State.touchY[0] > 220) && (ts_State.touchY[0] < 260)) {
 8016690:	8863      	ldrh	r3, [r4, #2]
 8016692:	f1a3 0229 	sub.w	r2, r3, #41	; 0x29
 8016696:	b292      	uxth	r2, r2
 8016698:	f5b2 7fc7 	cmp.w	r2, #398	; 0x18e
 801669c:	d805      	bhi.n	80166aa <EXTI15_10_IRQHandler+0x42>
 801669e:	89a2      	ldrh	r2, [r4, #12]
 80166a0:	2adc      	cmp	r2, #220	; 0xdc
 80166a2:	d902      	bls.n	80166aa <EXTI15_10_IRQHandler+0x42>
 80166a4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80166a8:	d367      	bcc.n	801677a <EXTI15_10_IRQHandler+0x112>
		else if((ts_State.touchY[0] > 20) && (ts_State.touchY[0] < 165)) {
 80166aa:	4a9f      	ldr	r2, [pc, #636]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 80166ac:	8992      	ldrh	r2, [r2, #12]
 80166ae:	f1a2 0115 	sub.w	r1, r2, #21
 80166b2:	b289      	uxth	r1, r1
 80166b4:	298f      	cmp	r1, #143	; 0x8f
 80166b6:	f200 81cc 	bhi.w	8016a52 <EXTI15_10_IRQHandler+0x3ea>
			if(menu_mode == 0) {
 80166ba:	4b9c      	ldr	r3, [pc, #624]	; (801692c <EXTI15_10_IRQHandler+0x2c4>)
 80166bc:	f993 3000 	ldrsb.w	r3, [r3]
 80166c0:	b923      	cbnz	r3, 80166cc <EXTI15_10_IRQHandler+0x64>
				if((ts_State.touchY[0] > 75) && (ts_State.touchY[0] < 165)) {
 80166c2:	3a4c      	subs	r2, #76	; 0x4c
 80166c4:	b292      	uxth	r2, r2
 80166c6:	2a58      	cmp	r2, #88	; 0x58
 80166c8:	f240 808f 	bls.w	80167ea <EXTI15_10_IRQHandler+0x182>
			if(menu_mode == 1) {
 80166cc:	4b97      	ldr	r3, [pc, #604]	; (801692c <EXTI15_10_IRQHandler+0x2c4>)
 80166ce:	f993 3000 	ldrsb.w	r3, [r3]
 80166d2:	2b01      	cmp	r3, #1
 80166d4:	f000 80ec 	beq.w	80168b0 <EXTI15_10_IRQHandler+0x248>
			if(menu_mode == 2) {
 80166d8:	4b94      	ldr	r3, [pc, #592]	; (801692c <EXTI15_10_IRQHandler+0x2c4>)
 80166da:	f993 3000 	ldrsb.w	r3, [r3]
 80166de:	2b02      	cmp	r3, #2
 80166e0:	d1cb      	bne.n	801667a <EXTI15_10_IRQHandler+0x12>
				touch_count = 0;
 80166e2:	4b93      	ldr	r3, [pc, #588]	; (8016930 <EXTI15_10_IRQHandler+0x2c8>)
 80166e4:	2200      	movs	r2, #0
 80166e6:	701a      	strb	r2, [r3, #0]
				if((ts_State.touchX[0] >= 40) && (ts_State.touchX[0] <= 440)) {
 80166e8:	4b8f      	ldr	r3, [pc, #572]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 80166ea:	885a      	ldrh	r2, [r3, #2]
 80166ec:	f1a2 0328 	sub.w	r3, r2, #40	; 0x28
 80166f0:	b29b      	uxth	r3, r3
 80166f2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80166f6:	d8c0      	bhi.n	801667a <EXTI15_10_IRQHandler+0x12>
					if((ts_State.touchY[0] > 40) && (ts_State.touchY[0] < 60))	{
 80166f8:	4b8b      	ldr	r3, [pc, #556]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 80166fa:	899b      	ldrh	r3, [r3, #12]
 80166fc:	3b29      	subs	r3, #41	; 0x29
 80166fe:	b29b      	uxth	r3, r3
 8016700:	2b12      	cmp	r3, #18
 8016702:	f240 818d 	bls.w	8016a20 <EXTI15_10_IRQHandler+0x3b8>
					if((ts_State.touchY[0] > 80) && (ts_State.touchY[0] < 100)) {
 8016706:	4b88      	ldr	r3, [pc, #544]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 8016708:	899c      	ldrh	r4, [r3, #12]
 801670a:	f1a4 0351 	sub.w	r3, r4, #81	; 0x51
 801670e:	b29b      	uxth	r3, r3
 8016710:	2b12      	cmp	r3, #18
 8016712:	d818      	bhi.n	8016746 <EXTI15_10_IRQHandler+0xde>
						jog_sensitivity = 0.01 * (float)(ts_State.touchX[0]-40) / 400;
 8016714:	4b84      	ldr	r3, [pc, #528]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 8016716:	885b      	ldrh	r3, [r3, #2]
 8016718:	f1a3 0028 	sub.w	r0, r3, #40	; 0x28
 801671c:	ee07 0a90 	vmov	s15, r0
 8016720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016724:	ee17 0a90 	vmov	r0, s15
 8016728:	f7e9 ff36 	bl	8000598 <__aeabi_f2d>
 801672c:	a37a      	add	r3, pc, #488	; (adr r3, 8016918 <EXTI15_10_IRQHandler+0x2b0>)
 801672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016732:	f7e9 ff89 	bl	8000648 <__aeabi_dmul>
 8016736:	2200      	movs	r2, #0
 8016738:	4b7e      	ldr	r3, [pc, #504]	; (8016934 <EXTI15_10_IRQHandler+0x2cc>)
 801673a:	f7ea f8af 	bl	800089c <__aeabi_ddiv>
 801673e:	f7ea fa3d 	bl	8000bbc <__aeabi_d2f>
 8016742:	4b7d      	ldr	r3, [pc, #500]	; (8016938 <EXTI15_10_IRQHandler+0x2d0>)
 8016744:	6018      	str	r0, [r3, #0]
					if((ts_State.touchY[0] > 120) && (ts_State.touchY[0] < 140)) {
 8016746:	3c79      	subs	r4, #121	; 0x79
 8016748:	b2a4      	uxth	r4, r4
 801674a:	2c12      	cmp	r4, #18
 801674c:	d895      	bhi.n	801667a <EXTI15_10_IRQHandler+0x12>
						acue_sensitivity = 250 * (float)(ts_State.touchX[0]-40) / 400;
 801674e:	4b76      	ldr	r3, [pc, #472]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 8016750:	885b      	ldrh	r3, [r3, #2]
 8016752:	3b28      	subs	r3, #40	; 0x28
 8016754:	ee07 3a90 	vmov	s15, r3
 8016758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801675c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 801693c <EXTI15_10_IRQHandler+0x2d4>
 8016760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016764:	eddf 6a76 	vldr	s13, [pc, #472]	; 8016940 <EXTI15_10_IRQHandler+0x2d8>
 8016768:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801676c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8016770:	ee17 3a90 	vmov	r3, s15
 8016774:	4a73      	ldr	r2, [pc, #460]	; (8016944 <EXTI15_10_IRQHandler+0x2dc>)
 8016776:	7013      	strb	r3, [r2, #0]
 8016778:	e77f      	b.n	801667a <EXTI15_10_IRQHandler+0x12>
			touch_count = 0;
 801677a:	4a6d      	ldr	r2, [pc, #436]	; (8016930 <EXTI15_10_IRQHandler+0x2c8>)
 801677c:	2100      	movs	r1, #0
 801677e:	7011      	strb	r1, [r2, #0]
			GoToPosition(((float)ts_State.touchX[0] - 40) * (float)rekordbox.spectrum_size / rekordbox.lowp_spectrum_size);
 8016780:	ee07 3a90 	vmov	s15, r3
 8016784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016788:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8016948 <EXTI15_10_IRQHandler+0x2e0>
 801678c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016790:	4b6e      	ldr	r3, [pc, #440]	; (801694c <EXTI15_10_IRQHandler+0x2e4>)
 8016792:	ed93 7a94 	vldr	s14, [r3, #592]	; 0x250
 8016796:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801679a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801679e:	ed93 7a93 	vldr	s14, [r3, #588]	; 0x24c
 80167a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80167a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80167aa:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80167ae:	ee17 0a90 	vmov	r0, s15
 80167b2:	f001 fb85 	bl	8017ec0 <GoToPosition>
			if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 80167b6:	4b66      	ldr	r3, [pc, #408]	; (8016950 <EXTI15_10_IRQHandler+0x2e8>)
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	b913      	cbnz	r3, 80167c2 <EXTI15_10_IRQHandler+0x15a>
 80167bc:	f7ff fb28 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
 80167c0:	e75b      	b.n	801667a <EXTI15_10_IRQHandler+0x12>
				GetTrackTime();
 80167c2:	f001 fc1f 	bl	8018004 <GetTrackTime>
				if(spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 80167c6:	4b63      	ldr	r3, [pc, #396]	; (8016954 <EXTI15_10_IRQHandler+0x2ec>)
 80167c8:	789b      	ldrb	r3, [r3, #2]
 80167ca:	f013 0f01 	tst.w	r3, #1
 80167ce:	d007      	beq.n	80167e0 <EXTI15_10_IRQHandler+0x178>
 80167d0:	f043 0302 	orr.w	r3, r3, #2
 80167d4:	4a5f      	ldr	r2, [pc, #380]	; (8016954 <EXTI15_10_IRQHandler+0x2ec>)
 80167d6:	7093      	strb	r3, [r2, #2]
				trak.state = SETCUE;
 80167d8:	4b5d      	ldr	r3, [pc, #372]	; (8016950 <EXTI15_10_IRQHandler+0x2e8>)
 80167da:	2202      	movs	r2, #2
 80167dc:	701a      	strb	r2, [r3, #0]
 80167de:	e74c      	b.n	801667a <EXTI15_10_IRQHandler+0x12>
				else spi_tx[2] &= ~(1 << 1);
 80167e0:	f023 0302 	bic.w	r3, r3, #2
 80167e4:	4a5b      	ldr	r2, [pc, #364]	; (8016954 <EXTI15_10_IRQHandler+0x2ec>)
 80167e6:	7093      	strb	r3, [r2, #2]
 80167e8:	e7f6      	b.n	80167d8 <EXTI15_10_IRQHandler+0x170>
					HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80167ea:	2028      	movs	r0, #40	; 0x28
 80167ec:	f7ea fdbe 	bl	800136c <HAL_NVIC_DisableIRQ>
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80167f0:	4859      	ldr	r0, [pc, #356]	; (8016958 <EXTI15_10_IRQHandler+0x2f0>)
 80167f2:	6803      	ldr	r3, [r0, #0]
 80167f4:	f06f 0201 	mvn.w	r2, #1
 80167f8:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 80167fa:	2400      	movs	r4, #0
 80167fc:	625c      	str	r4, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 80167fe:	f7f0 fc21 	bl	8007044 <HAL_TIM_Base_Start_IT>
					touch_count = 0;
 8016802:	4b4b      	ldr	r3, [pc, #300]	; (8016930 <EXTI15_10_IRQHandler+0x2c8>)
 8016804:	701c      	strb	r4, [r3, #0]
					if(ts_State.touchX[0] > 280) {
 8016806:	4b48      	ldr	r3, [pc, #288]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 8016808:	885b      	ldrh	r3, [r3, #2]
 801680a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801680e:	d926      	bls.n	801685e <EXTI15_10_IRQHandler+0x1f6>
						if(stretch > 1) stretch--;
 8016810:	4b52      	ldr	r3, [pc, #328]	; (801695c <EXTI15_10_IRQHandler+0x2f4>)
 8016812:	edd3 7a00 	vldr	s15, [r3]
 8016816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801681a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801681e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016822:	dd14      	ble.n	801684e <EXTI15_10_IRQHandler+0x1e6>
 8016824:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016828:	edc3 7a00 	vstr	s15, [r3]
						if(stretch < 0.1) stretch = 0.125;
 801682c:	4b4b      	ldr	r3, [pc, #300]	; (801695c <EXTI15_10_IRQHandler+0x2f4>)
 801682e:	6818      	ldr	r0, [r3, #0]
 8016830:	f7e9 feb2 	bl	8000598 <__aeabi_f2d>
 8016834:	a33a      	add	r3, pc, #232	; (adr r3, 8016920 <EXTI15_10_IRQHandler+0x2b8>)
 8016836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801683a:	f7ea f977 	bl	8000b2c <__aeabi_dcmplt>
 801683e:	2800      	cmp	r0, #0
 8016840:	f43f af44 	beq.w	80166cc <EXTI15_10_IRQHandler+0x64>
 8016844:	4b45      	ldr	r3, [pc, #276]	; (801695c <EXTI15_10_IRQHandler+0x2f4>)
 8016846:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 801684a:	601a      	str	r2, [r3, #0]
 801684c:	e73e      	b.n	80166cc <EXTI15_10_IRQHandler+0x64>
						else stretch /= 2;
 801684e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016856:	4b41      	ldr	r3, [pc, #260]	; (801695c <EXTI15_10_IRQHandler+0x2f4>)
 8016858:	edc3 7a00 	vstr	s15, [r3]
 801685c:	e7e6      	b.n	801682c <EXTI15_10_IRQHandler+0x1c4>
					else if(ts_State.touchX[0] < 200) {
 801685e:	2bc7      	cmp	r3, #199	; 0xc7
 8016860:	d821      	bhi.n	80168a6 <EXTI15_10_IRQHandler+0x23e>
						if(stretch >= 1) stretch++;
 8016862:	4b3e      	ldr	r3, [pc, #248]	; (801695c <EXTI15_10_IRQHandler+0x2f4>)
 8016864:	edd3 7a00 	vldr	s15, [r3]
 8016868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801686c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016874:	db11      	blt.n	801689a <EXTI15_10_IRQHandler+0x232>
 8016876:	ee77 7a87 	vadd.f32	s15, s15, s14
 801687a:	edc3 7a00 	vstr	s15, [r3]
						if(stretch > 4) stretch = 4;
 801687e:	4b37      	ldr	r3, [pc, #220]	; (801695c <EXTI15_10_IRQHandler+0x2f4>)
 8016880:	ed93 7a00 	vldr	s14, [r3]
 8016884:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8016888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801688c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016890:	f77f af1c 	ble.w	80166cc <EXTI15_10_IRQHandler+0x64>
 8016894:	edc3 7a00 	vstr	s15, [r3]
 8016898:	e718      	b.n	80166cc <EXTI15_10_IRQHandler+0x64>
						else stretch *= 2;
 801689a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801689e:	4b2f      	ldr	r3, [pc, #188]	; (801695c <EXTI15_10_IRQHandler+0x2f4>)
 80168a0:	edc3 7a00 	vstr	s15, [r3]
 80168a4:	e7eb      	b.n	801687e <EXTI15_10_IRQHandler+0x216>
					else stretch = 1;
 80168a6:	4b2d      	ldr	r3, [pc, #180]	; (801695c <EXTI15_10_IRQHandler+0x2f4>)
 80168a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80168ac:	601a      	str	r2, [r3, #0]
 80168ae:	e70d      	b.n	80166cc <EXTI15_10_IRQHandler+0x64>
				if(touch_count == 0) {
 80168b0:	4b1f      	ldr	r3, [pc, #124]	; (8016930 <EXTI15_10_IRQHandler+0x2c8>)
 80168b2:	781b      	ldrb	r3, [r3, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d05f      	beq.n	8016978 <EXTI15_10_IRQHandler+0x310>
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 80168b8:	4b27      	ldr	r3, [pc, #156]	; (8016958 <EXTI15_10_IRQHandler+0x2f0>)
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	2200      	movs	r2, #0
 80168be:	625a      	str	r2, [r3, #36]	; 0x24
					str_offset = ts_State.touchX[0] - prev_x;
 80168c0:	4b19      	ldr	r3, [pc, #100]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 80168c2:	885b      	ldrh	r3, [r3, #2]
 80168c4:	4a26      	ldr	r2, [pc, #152]	; (8016960 <EXTI15_10_IRQHandler+0x2f8>)
 80168c6:	8812      	ldrh	r2, [r2, #0]
 80168c8:	1a9b      	subs	r3, r3, r2
 80168ca:	4a26      	ldr	r2, [pc, #152]	; (8016964 <EXTI15_10_IRQHandler+0x2fc>)
 80168cc:	6013      	str	r3, [r2, #0]
				touch_count++;
 80168ce:	4a18      	ldr	r2, [pc, #96]	; (8016930 <EXTI15_10_IRQHandler+0x2c8>)
 80168d0:	7813      	ldrb	r3, [r2, #0]
 80168d2:	3301      	adds	r3, #1
 80168d4:	7013      	strb	r3, [r2, #0]
				if((String_number != ts_State.touchY[0] / 20 - 1)) {
 80168d6:	4b14      	ldr	r3, [pc, #80]	; (8016928 <EXTI15_10_IRQHandler+0x2c0>)
 80168d8:	899b      	ldrh	r3, [r3, #12]
 80168da:	4a23      	ldr	r2, [pc, #140]	; (8016968 <EXTI15_10_IRQHandler+0x300>)
 80168dc:	fba2 2303 	umull	r2, r3, r2, r3
 80168e0:	091b      	lsrs	r3, r3, #4
 80168e2:	1e5a      	subs	r2, r3, #1
 80168e4:	4921      	ldr	r1, [pc, #132]	; (801696c <EXTI15_10_IRQHandler+0x304>)
 80168e6:	6809      	ldr	r1, [r1, #0]
 80168e8:	428a      	cmp	r2, r1
 80168ea:	d072      	beq.n	80169d2 <EXTI15_10_IRQHandler+0x36a>
					if(Total_tracks > 7) {
 80168ec:	4820      	ldr	r0, [pc, #128]	; (8016970 <EXTI15_10_IRQHandler+0x308>)
 80168ee:	8800      	ldrh	r0, [r0, #0]
 80168f0:	2807      	cmp	r0, #7
 80168f2:	d965      	bls.n	80169c0 <EXTI15_10_IRQHandler+0x358>
						if(String_number > (ts_State.touchY[0] / 20 - 1)) {
 80168f4:	428b      	cmp	r3, r1
 80168f6:	dc59      	bgt.n	80169ac <EXTI15_10_IRQHandler+0x344>
							str_increment += abs((ts_State.touchY[0] / 20 - 1) - String_number);
 80168f8:	1a53      	subs	r3, r2, r1
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	bfb8      	it	lt
 80168fe:	425b      	neglt	r3, r3
 8016900:	4a1c      	ldr	r2, [pc, #112]	; (8016974 <EXTI15_10_IRQHandler+0x30c>)
 8016902:	6811      	ldr	r1, [r2, #0]
 8016904:	440b      	add	r3, r1
 8016906:	6013      	str	r3, [r2, #0]
							if(str_increment > Total_tracks - 7) str_increment = Total_tracks - 7;
 8016908:	1f82      	subs	r2, r0, #6
 801690a:	4293      	cmp	r3, r2
 801690c:	db58      	blt.n	80169c0 <EXTI15_10_IRQHandler+0x358>
 801690e:	3807      	subs	r0, #7
 8016910:	4b18      	ldr	r3, [pc, #96]	; (8016974 <EXTI15_10_IRQHandler+0x30c>)
 8016912:	6018      	str	r0, [r3, #0]
 8016914:	e054      	b.n	80169c0 <EXTI15_10_IRQHandler+0x358>
 8016916:	bf00      	nop
 8016918:	47ae147b 	.word	0x47ae147b
 801691c:	3f847ae1 	.word	0x3f847ae1
 8016920:	9999999a 	.word	0x9999999a
 8016924:	3fb99999 	.word	0x3fb99999
 8016928:	2000ebb0 	.word	0x2000ebb0
 801692c:	20000604 	.word	0x20000604
 8016930:	20017464 	.word	0x20017464
 8016934:	40790000 	.word	0x40790000
 8016938:	200000a0 	.word	0x200000a0
 801693c:	437a0000 	.word	0x437a0000
 8016940:	43c80000 	.word	0x43c80000
 8016944:	20000054 	.word	0x20000054
 8016948:	42200000 	.word	0x42200000
 801694c:	20016618 	.word	0x20016618
 8016950:	2000eba4 	.word	0x2000eba4
 8016954:	20000058 	.word	0x20000058
 8016958:	200174ec 	.word	0x200174ec
 801695c:	20000028 	.word	0x20000028
 8016960:	20017454 	.word	0x20017454
 8016964:	20017460 	.word	0x20017460
 8016968:	cccccccd 	.word	0xcccccccd
 801696c:	2000009c 	.word	0x2000009c
 8016970:	20001c30 	.word	0x20001c30
 8016974:	2001745c 	.word	0x2001745c
					str_offset = 0;
 8016978:	2200      	movs	r2, #0
 801697a:	4b62      	ldr	r3, [pc, #392]	; (8016b04 <EXTI15_10_IRQHandler+0x49c>)
 801697c:	601a      	str	r2, [r3, #0]
					prev_x = ts_State.touchX[0];
 801697e:	4b62      	ldr	r3, [pc, #392]	; (8016b08 <EXTI15_10_IRQHandler+0x4a0>)
 8016980:	8858      	ldrh	r0, [r3, #2]
 8016982:	4962      	ldr	r1, [pc, #392]	; (8016b0c <EXTI15_10_IRQHandler+0x4a4>)
 8016984:	8008      	strh	r0, [r1, #0]
					String_number = ts_State.touchY[0] / 20 - 1;
 8016986:	899b      	ldrh	r3, [r3, #12]
 8016988:	4961      	ldr	r1, [pc, #388]	; (8016b10 <EXTI15_10_IRQHandler+0x4a8>)
 801698a:	fba1 1303 	umull	r1, r3, r1, r3
 801698e:	091b      	lsrs	r3, r3, #4
 8016990:	3b01      	subs	r3, #1
 8016992:	4960      	ldr	r1, [pc, #384]	; (8016b14 <EXTI15_10_IRQHandler+0x4ac>)
 8016994:	600b      	str	r3, [r1, #0]
					Mark_number = String_number;
 8016996:	4960      	ldr	r1, [pc, #384]	; (8016b18 <EXTI15_10_IRQHandler+0x4b0>)
 8016998:	600b      	str	r3, [r1, #0]
					__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 801699a:	4860      	ldr	r0, [pc, #384]	; (8016b1c <EXTI15_10_IRQHandler+0x4b4>)
 801699c:	6803      	ldr	r3, [r0, #0]
 801699e:	f06f 0101 	mvn.w	r1, #1
 80169a2:	6119      	str	r1, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 80169a4:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim6);
 80169a6:	f7f0 fb4d 	bl	8007044 <HAL_TIM_Base_Start_IT>
 80169aa:	e790      	b.n	80168ce <EXTI15_10_IRQHandler+0x266>
							str_increment -= abs((ts_State.touchY[0] / 20 - 1) - String_number);
 80169ac:	1a53      	subs	r3, r2, r1
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	bfb8      	it	lt
 80169b2:	425b      	neglt	r3, r3
 80169b4:	495a      	ldr	r1, [pc, #360]	; (8016b20 <EXTI15_10_IRQHandler+0x4b8>)
 80169b6:	680a      	ldr	r2, [r1, #0]
 80169b8:	1ad3      	subs	r3, r2, r3
 80169ba:	600b      	str	r3, [r1, #0]
							if(str_increment < 0) str_increment = 0;
 80169bc:	2b00      	cmp	r3, #0
 80169be:	db2c      	blt.n	8016a1a <EXTI15_10_IRQHandler+0x3b2>
					str_offset = 0;
 80169c0:	2300      	movs	r3, #0
 80169c2:	4a50      	ldr	r2, [pc, #320]	; (8016b04 <EXTI15_10_IRQHandler+0x49c>)
 80169c4:	6013      	str	r3, [r2, #0]
					touch_count = 0;
 80169c6:	4a57      	ldr	r2, [pc, #348]	; (8016b24 <EXTI15_10_IRQHandler+0x4bc>)
 80169c8:	7013      	strb	r3, [r2, #0]
					String_number = -1;
 80169ca:	4b52      	ldr	r3, [pc, #328]	; (8016b14 <EXTI15_10_IRQHandler+0x4ac>)
 80169cc:	f04f 32ff 	mov.w	r2, #4294967295
 80169d0:	601a      	str	r2, [r3, #0]
				if(ts_State.touchX[0] > 380) {
 80169d2:	4b4d      	ldr	r3, [pc, #308]	; (8016b08 <EXTI15_10_IRQHandler+0x4a0>)
 80169d4:	885b      	ldrh	r3, [r3, #2]
 80169d6:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 80169da:	f67f ae7d 	bls.w	80166d8 <EXTI15_10_IRQHandler+0x70>
					str_offset = 0;
 80169de:	2300      	movs	r3, #0
 80169e0:	4a48      	ldr	r2, [pc, #288]	; (8016b04 <EXTI15_10_IRQHandler+0x49c>)
 80169e2:	6013      	str	r3, [r2, #0]
					touch_count = 0;
 80169e4:	4a4f      	ldr	r2, [pc, #316]	; (8016b24 <EXTI15_10_IRQHandler+0x4bc>)
 80169e6:	7013      	strb	r3, [r2, #0]
					bOutOfData = 1;
 80169e8:	4b4f      	ldr	r3, [pc, #316]	; (8016b28 <EXTI15_10_IRQHandler+0x4c0>)
 80169ea:	2201      	movs	r2, #1
 80169ec:	601a      	str	r2, [r3, #0]
					unDmaBufMode = 3;
 80169ee:	4b4f      	ldr	r3, [pc, #316]	; (8016b2c <EXTI15_10_IRQHandler+0x4c4>)
 80169f0:	2203      	movs	r2, #3
 80169f2:	601a      	str	r2, [r3, #0]
					Track_number = String_number + str_increment;
 80169f4:	4b47      	ldr	r3, [pc, #284]	; (8016b14 <EXTI15_10_IRQHandler+0x4ac>)
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	4a49      	ldr	r2, [pc, #292]	; (8016b20 <EXTI15_10_IRQHandler+0x4b8>)
 80169fa:	6812      	ldr	r2, [r2, #0]
 80169fc:	4413      	add	r3, r2
 80169fe:	4a4c      	ldr	r2, [pc, #304]	; (8016b30 <EXTI15_10_IRQHandler+0x4c8>)
 8016a00:	6013      	str	r3, [r2, #0]
					if(Track_number >= Total_tracks) Track_number = 0;
 8016a02:	4a4c      	ldr	r2, [pc, #304]	; (8016b34 <EXTI15_10_IRQHandler+0x4cc>)
 8016a04:	8812      	ldrh	r2, [r2, #0]
 8016a06:	4293      	cmp	r3, r2
 8016a08:	db02      	blt.n	8016a10 <EXTI15_10_IRQHandler+0x3a8>
 8016a0a:	4b49      	ldr	r3, [pc, #292]	; (8016b30 <EXTI15_10_IRQHandler+0x4c8>)
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	601a      	str	r2, [r3, #0]
					String_number = -1;
 8016a10:	4b40      	ldr	r3, [pc, #256]	; (8016b14 <EXTI15_10_IRQHandler+0x4ac>)
 8016a12:	f04f 32ff 	mov.w	r2, #4294967295
 8016a16:	601a      	str	r2, [r3, #0]
 8016a18:	e65e      	b.n	80166d8 <EXTI15_10_IRQHandler+0x70>
							if(str_increment < 0) str_increment = 0;
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	600a      	str	r2, [r1, #0]
 8016a1e:	e7cf      	b.n	80169c0 <EXTI15_10_IRQHandler+0x358>
						volume = 100 * (float)(ts_State.touchX[0]-40) / 400;
 8016a20:	f1a2 0328 	sub.w	r3, r2, #40	; 0x28
 8016a24:	ee07 3a90 	vmov	s15, r3
 8016a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a2c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8016b38 <EXTI15_10_IRQHandler+0x4d0>
 8016a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016a34:	eddf 6a41 	vldr	s13, [pc, #260]	; 8016b3c <EXTI15_10_IRQHandler+0x4d4>
 8016a38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016a3c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8016a40:	edcd 7a01 	vstr	s15, [sp, #4]
 8016a44:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8016a48:	4b3d      	ldr	r3, [pc, #244]	; (8016b40 <EXTI15_10_IRQHandler+0x4d8>)
 8016a4a:	7018      	strb	r0, [r3, #0]
						BSP_AUDIO_OUT_SetVolume(volume);
 8016a4c:	f7ff fa02 	bl	8015e54 <BSP_AUDIO_OUT_SetVolume>
 8016a50:	e659      	b.n	8016706 <EXTI15_10_IRQHandler+0x9e>
		else if((ts_State.touchY[0] > 0) && (ts_State.touchY[0] < 20)) {
 8016a52:	1e51      	subs	r1, r2, #1
 8016a54:	b289      	uxth	r1, r1
 8016a56:	2912      	cmp	r1, #18
 8016a58:	d90b      	bls.n	8016a72 <EXTI15_10_IRQHandler+0x40a>
		else if((ts_State.touchX[0] > 80) && (ts_State.touchX[0] < 280) && (ts_State.touchY[0] > 180) && (ts_State.touchY[0] < 210)) {
 8016a5a:	3b51      	subs	r3, #81	; 0x51
 8016a5c:	b29b      	uxth	r3, r3
 8016a5e:	2bc6      	cmp	r3, #198	; 0xc6
 8016a60:	d803      	bhi.n	8016a6a <EXTI15_10_IRQHandler+0x402>
 8016a62:	2ab4      	cmp	r2, #180	; 0xb4
 8016a64:	d901      	bls.n	8016a6a <EXTI15_10_IRQHandler+0x402>
 8016a66:	2ad1      	cmp	r2, #209	; 0xd1
 8016a68:	d931      	bls.n	8016ace <EXTI15_10_IRQHandler+0x466>
			touch_count = 0;
 8016a6a:	4b2e      	ldr	r3, [pc, #184]	; (8016b24 <EXTI15_10_IRQHandler+0x4bc>)
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	701a      	strb	r2, [r3, #0]
 8016a70:	e603      	b.n	801667a <EXTI15_10_IRQHandler+0x12>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8016a72:	2028      	movs	r0, #40	; 0x28
 8016a74:	f7ea fc7a 	bl	800136c <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8016a78:	4828      	ldr	r0, [pc, #160]	; (8016b1c <EXTI15_10_IRQHandler+0x4b4>)
 8016a7a:	6803      	ldr	r3, [r0, #0]
 8016a7c:	f06f 0201 	mvn.w	r2, #1
 8016a80:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8016a82:	2400      	movs	r4, #0
 8016a84:	625c      	str	r4, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8016a86:	f7f0 fadd 	bl	8007044 <HAL_TIM_Base_Start_IT>
			touch_count = 0;
 8016a8a:	4b26      	ldr	r3, [pc, #152]	; (8016b24 <EXTI15_10_IRQHandler+0x4bc>)
 8016a8c:	701c      	strb	r4, [r3, #0]
			if(ts_State.touchX[0] < 200) {
 8016a8e:	4b1e      	ldr	r3, [pc, #120]	; (8016b08 <EXTI15_10_IRQHandler+0x4a0>)
 8016a90:	885b      	ldrh	r3, [r3, #2]
 8016a92:	2bc7      	cmp	r3, #199	; 0xc7
 8016a94:	d80b      	bhi.n	8016aae <EXTI15_10_IRQHandler+0x446>
				menu_mode--;
 8016a96:	4a2b      	ldr	r2, [pc, #172]	; (8016b44 <EXTI15_10_IRQHandler+0x4dc>)
 8016a98:	7813      	ldrb	r3, [r2, #0]
 8016a9a:	3b01      	subs	r3, #1
 8016a9c:	b25b      	sxtb	r3, r3
 8016a9e:	7013      	strb	r3, [r2, #0]
				if(menu_mode < 0) menu_mode = 2;
 8016aa0:	42a3      	cmp	r3, r4
 8016aa2:	f6bf adea 	bge.w	801667a <EXTI15_10_IRQHandler+0x12>
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	2202      	movs	r2, #2
 8016aaa:	701a      	strb	r2, [r3, #0]
 8016aac:	e5e5      	b.n	801667a <EXTI15_10_IRQHandler+0x12>
			else if(ts_State.touchX[0] > 280) {
 8016aae:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8016ab2:	f67f ade2 	bls.w	801667a <EXTI15_10_IRQHandler+0x12>
				menu_mode++;
 8016ab6:	4a23      	ldr	r2, [pc, #140]	; (8016b44 <EXTI15_10_IRQHandler+0x4dc>)
 8016ab8:	7813      	ldrb	r3, [r2, #0]
 8016aba:	3301      	adds	r3, #1
 8016abc:	b25b      	sxtb	r3, r3
 8016abe:	7013      	strb	r3, [r2, #0]
				if(menu_mode > 2) menu_mode = 0;
 8016ac0:	2b02      	cmp	r3, #2
 8016ac2:	f77f adda 	ble.w	801667a <EXTI15_10_IRQHandler+0x12>
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	2200      	movs	r2, #0
 8016aca:	701a      	strb	r2, [r3, #0]
 8016acc:	e5d5      	b.n	801667a <EXTI15_10_IRQHandler+0x12>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8016ace:	2028      	movs	r0, #40	; 0x28
 8016ad0:	f7ea fc4c 	bl	800136c <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8016ad4:	4811      	ldr	r0, [pc, #68]	; (8016b1c <EXTI15_10_IRQHandler+0x4b4>)
 8016ad6:	6803      	ldr	r3, [r0, #0]
 8016ad8:	f06f 0201 	mvn.w	r2, #1
 8016adc:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8016ade:	2400      	movs	r4, #0
 8016ae0:	625c      	str	r4, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8016ae2:	f7f0 faaf 	bl	8007044 <HAL_TIM_Base_Start_IT>
			touch_count = 0;
 8016ae6:	4b0f      	ldr	r3, [pc, #60]	; (8016b24 <EXTI15_10_IRQHandler+0x4bc>)
 8016ae8:	701c      	strb	r4, [r3, #0]
			if(display.timemode == 0) {
 8016aea:	4b17      	ldr	r3, [pc, #92]	; (8016b48 <EXTI15_10_IRQHandler+0x4e0>)
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	b923      	cbnz	r3, 8016afa <EXTI15_10_IRQHandler+0x492>
				display.timemode = 1;
 8016af0:	4b15      	ldr	r3, [pc, #84]	; (8016b48 <EXTI15_10_IRQHandler+0x4e0>)
 8016af2:	2201      	movs	r2, #1
 8016af4:	701a      	strb	r2, [r3, #0]
				display.trackbarmode = 1;
 8016af6:	711a      	strb	r2, [r3, #4]
 8016af8:	e5bf      	b.n	801667a <EXTI15_10_IRQHandler+0x12>
				display.timemode = 0;
 8016afa:	4b13      	ldr	r3, [pc, #76]	; (8016b48 <EXTI15_10_IRQHandler+0x4e0>)
 8016afc:	2200      	movs	r2, #0
 8016afe:	701a      	strb	r2, [r3, #0]
				display.trackbarmode = 0;
 8016b00:	711a      	strb	r2, [r3, #4]
 8016b02:	e5ba      	b.n	801667a <EXTI15_10_IRQHandler+0x12>
 8016b04:	20017460 	.word	0x20017460
 8016b08:	2000ebb0 	.word	0x2000ebb0
 8016b0c:	20017454 	.word	0x20017454
 8016b10:	cccccccd 	.word	0xcccccccd
 8016b14:	2000009c 	.word	0x2000009c
 8016b18:	20000094 	.word	0x20000094
 8016b1c:	200174ec 	.word	0x200174ec
 8016b20:	2001745c 	.word	0x2001745c
 8016b24:	20017464 	.word	0x20017464
 8016b28:	2000e370 	.word	0x2000e370
 8016b2c:	2000ebdc 	.word	0x2000ebdc
 8016b30:	2000e36c 	.word	0x2000e36c
 8016b34:	20001c30 	.word	0x20001c30
 8016b38:	42c80000 	.word	0x42c80000
 8016b3c:	43c80000 	.word	0x43c80000
 8016b40:	2000005c 	.word	0x2000005c
 8016b44:	20000604 	.word	0x20000604
 8016b48:	200005e8 	.word	0x200005e8

08016b4c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8016b4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(trak.state == STOPPED) {
 8016b4e:	4b0c      	ldr	r3, [pc, #48]	; (8016b80 <TIM8_UP_TIM13_IRQHandler+0x34>)
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	2b01      	cmp	r3, #1
 8016b54:	d005      	beq.n	8016b62 <TIM8_UP_TIM13_IRQHandler+0x16>
		spi_tx[2] ^= (1 << 0);
	}
	if(trak.state == SETCUE) {
 8016b56:	2b02      	cmp	r3, #2
 8016b58:	d009      	beq.n	8016b6e <TIM8_UP_TIM13_IRQHandler+0x22>
		spi_tx[2] ^= (1 << 0);
		spi_tx[2] ^= (1 << 1);
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8016b5a:	480a      	ldr	r0, [pc, #40]	; (8016b84 <TIM8_UP_TIM13_IRQHandler+0x38>)
 8016b5c:	f7f0 fb27 	bl	80071ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8016b60:	bd08      	pop	{r3, pc}
		spi_tx[2] ^= (1 << 0);
 8016b62:	4909      	ldr	r1, [pc, #36]	; (8016b88 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 8016b64:	788a      	ldrb	r2, [r1, #2]
 8016b66:	f082 0201 	eor.w	r2, r2, #1
 8016b6a:	708a      	strb	r2, [r1, #2]
 8016b6c:	e7f3      	b.n	8016b56 <TIM8_UP_TIM13_IRQHandler+0xa>
		spi_tx[2] ^= (1 << 0);
 8016b6e:	4a06      	ldr	r2, [pc, #24]	; (8016b88 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 8016b70:	7893      	ldrb	r3, [r2, #2]
 8016b72:	f083 0301 	eor.w	r3, r3, #1
 8016b76:	7093      	strb	r3, [r2, #2]
		spi_tx[2] ^= (1 << 1);
 8016b78:	f083 0302 	eor.w	r3, r3, #2
 8016b7c:	7093      	strb	r3, [r2, #2]
 8016b7e:	e7ec      	b.n	8016b5a <TIM8_UP_TIM13_IRQHandler+0xe>
 8016b80:	2000eba4 	.word	0x2000eba4
 8016b84:	2001756c 	.word	0x2001756c
 8016b88:	20000058 	.word	0x20000058

08016b8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8016b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if(pulses != old_pulses) {
 8016b8e:	4b26      	ldr	r3, [pc, #152]	; (8016c28 <TIM5_IRQHandler+0x9c>)
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	4a26      	ldr	r2, [pc, #152]	; (8016c2c <TIM5_IRQHandler+0xa0>)
 8016b94:	6812      	ldr	r2, [r2, #0]
 8016b96:	4293      	cmp	r3, r2
 8016b98:	d029      	beq.n	8016bee <TIM5_IRQHandler+0x62>
		if(pulses != 0) {
 8016b9a:	b37b      	cbz	r3, 8016bfc <TIM5_IRQHandler+0x70>
			New_frequency = (uint32_t)((trak.bitrate / 2)
 8016b9c:	4924      	ldr	r1, [pc, #144]	; (8016c30 <TIM5_IRQHandler+0xa4>)
 8016b9e:	890a      	ldrh	r2, [r1, #8]
 8016ba0:	0852      	lsrs	r2, r2, #1
					*(1 + trak.percent + jog_sensitivity*pulses));
 8016ba2:	ed91 7a01 	vldr	s14, [r1, #4]
 8016ba6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016bae:	ee07 3a90 	vmov	s15, r3
 8016bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016bb6:	4b1f      	ldr	r3, [pc, #124]	; (8016c34 <TIM5_IRQHandler+0xa8>)
 8016bb8:	edd3 6a00 	vldr	s13, [r3]
 8016bbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016bc4:	ee07 2a90 	vmov	s15, r2
 8016bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
			New_frequency = (uint32_t)((trak.bitrate / 2)
 8016bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016bd4:	4b18      	ldr	r3, [pc, #96]	; (8016c38 <TIM5_IRQHandler+0xac>)
 8016bd6:	edc3 7a00 	vstr	s15, [r3]
		}
		else {
			New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
		}
		BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 8016bda:	4b17      	ldr	r3, [pc, #92]	; (8016c38 <TIM5_IRQHandler+0xac>)
 8016bdc:	6819      	ldr	r1, [r3, #0]
 8016bde:	2200      	movs	r2, #0
 8016be0:	4816      	ldr	r0, [pc, #88]	; (8016c3c <TIM5_IRQHandler+0xb0>)
 8016be2:	f7ff f9db 	bl	8015f9c <BSP_AUDIO_OUT_ClockConfig>
		old_pulses = pulses;
 8016be6:	4b10      	ldr	r3, [pc, #64]	; (8016c28 <TIM5_IRQHandler+0x9c>)
 8016be8:	681a      	ldr	r2, [r3, #0]
 8016bea:	4b10      	ldr	r3, [pc, #64]	; (8016c2c <TIM5_IRQHandler+0xa0>)
 8016bec:	601a      	str	r2, [r3, #0]
	}
	pulses = 0;
 8016bee:	4b0e      	ldr	r3, [pc, #56]	; (8016c28 <TIM5_IRQHandler+0x9c>)
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8016bf4:	4812      	ldr	r0, [pc, #72]	; (8016c40 <TIM5_IRQHandler+0xb4>)
 8016bf6:	f7f0 fada 	bl	80071ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8016bfa:	bd08      	pop	{r3, pc}
			New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 8016bfc:	4a0c      	ldr	r2, [pc, #48]	; (8016c30 <TIM5_IRQHandler+0xa4>)
 8016bfe:	8913      	ldrh	r3, [r2, #8]
 8016c00:	085b      	lsrs	r3, r3, #1
 8016c02:	ee07 3a90 	vmov	s15, r3
 8016c06:	ed92 7a01 	vldr	s14, [r2, #4]
 8016c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c0e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8016c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c1e:	4b06      	ldr	r3, [pc, #24]	; (8016c38 <TIM5_IRQHandler+0xac>)
 8016c20:	edc3 7a00 	vstr	s15, [r3]
 8016c24:	e7d9      	b.n	8016bda <TIM5_IRQHandler+0x4e>
 8016c26:	bf00      	nop
 8016c28:	20017458 	.word	0x20017458
 8016c2c:	20017450 	.word	0x20017450
 8016c30:	2000eba4 	.word	0x2000eba4
 8016c34:	200000a0 	.word	0x200000a0
 8016c38:	20000098 	.word	0x20000098
 8016c3c:	20017220 	.word	0x20017220
 8016c40:	200174ac 	.word	0x200174ac

08016c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8016c44:	b510      	push	{r4, lr}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016c46:	4b07      	ldr	r3, [pc, #28]	; (8016c64 <TIM6_DAC_IRQHandler+0x20>)
 8016c48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016c4c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	NVIC_EnableIRQ(EXTI15_10_IRQn);
	HAL_TIM_Base_Stop_IT(&htim6);
 8016c4e:	4c06      	ldr	r4, [pc, #24]	; (8016c68 <TIM6_DAC_IRQHandler+0x24>)
 8016c50:	4620      	mov	r0, r4
 8016c52:	f7f0 fa4f 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
	touch_count = 0;
 8016c56:	4b05      	ldr	r3, [pc, #20]	; (8016c6c <TIM6_DAC_IRQHandler+0x28>)
 8016c58:	2200      	movs	r2, #0
 8016c5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	f7f0 faa6 	bl	80071ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8016c62:	bd10      	pop	{r4, pc}
 8016c64:	e000e100 	.word	0xe000e100
 8016c68:	200174ec 	.word	0x200174ec
 8016c6c:	20017464 	.word	0x20017464

08016c70 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8016c70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(display.trackbarmode == 0) display.trackbarmode = 1;
 8016c72:	4b07      	ldr	r3, [pc, #28]	; (8016c90 <TIM7_IRQHandler+0x20>)
 8016c74:	791b      	ldrb	r3, [r3, #4]
 8016c76:	b933      	cbnz	r3, 8016c86 <TIM7_IRQHandler+0x16>
 8016c78:	4b05      	ldr	r3, [pc, #20]	; (8016c90 <TIM7_IRQHandler+0x20>)
 8016c7a:	2201      	movs	r2, #1
 8016c7c:	711a      	strb	r2, [r3, #4]
	else display.trackbarmode = 0;
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8016c7e:	4805      	ldr	r0, [pc, #20]	; (8016c94 <TIM7_IRQHandler+0x24>)
 8016c80:	f7f0 fa95 	bl	80071ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8016c84:	bd08      	pop	{r3, pc}
	else display.trackbarmode = 0;
 8016c86:	4b02      	ldr	r3, [pc, #8]	; (8016c90 <TIM7_IRQHandler+0x20>)
 8016c88:	2200      	movs	r2, #0
 8016c8a:	711a      	strb	r2, [r3, #4]
 8016c8c:	e7f7      	b.n	8016c7e <TIM7_IRQHandler+0xe>
 8016c8e:	bf00      	nop
 8016c90:	200005e8 	.word	0x200005e8
 8016c94:	2001752c 	.word	0x2001752c

08016c98 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8016c98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8016c9a:	4802      	ldr	r0, [pc, #8]	; (8016ca4 <DMA2_Stream4_IRQHandler+0xc>)
 8016c9c:	f7ea fe34 	bl	8001908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8016ca0:	bd08      	pop	{r3, pc}
 8016ca2:	bf00      	nop
 8016ca4:	200171c0 	.word	0x200171c0

08016ca8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8016ca8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8016caa:	4802      	ldr	r0, [pc, #8]	; (8016cb4 <OTG_FS_IRQHandler+0xc>)
 8016cac:	f7eb ffd3 	bl	8002c56 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8016cb0:	bd08      	pop	{r3, pc}
 8016cb2:	bf00      	nop
 8016cb4:	200179bc 	.word	0x200179bc

08016cb8 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8016cb8:	b538      	push	{r3, r4, r5, lr}
 8016cba:	ed2d 8b02 	vpush	{d8}
	switch(spi_rx[1] & 0xF0) {
 8016cbe:	4b8d      	ldr	r3, [pc, #564]	; (8016ef4 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8016cc0:	785b      	ldrb	r3, [r3, #1]
 8016cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016cc6:	2bb0      	cmp	r3, #176	; 0xb0
 8016cc8:	f000 83ba 	beq.w	8017440 <HAL_SPI_TxRxCpltCallback+0x788>
 8016ccc:	d819      	bhi.n	8016d02 <HAL_SPI_TxRxCpltCallback+0x4a>
 8016cce:	2b80      	cmp	r3, #128	; 0x80
 8016cd0:	f000 82e8 	beq.w	80172a4 <HAL_SPI_TxRxCpltCallback+0x5ec>
 8016cd4:	2b90      	cmp	r3, #144	; 0x90
 8016cd6:	d132      	bne.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
	case 0x90: {
		switch(spi_rx[2]) {
 8016cd8:	4b86      	ldr	r3, [pc, #536]	; (8016ef4 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8016cda:	789b      	ldrb	r3, [r3, #2]
 8016cdc:	3b40      	subs	r3, #64	; 0x40
 8016cde:	2b0d      	cmp	r3, #13
 8016ce0:	d82d      	bhi.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
 8016ce2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016ce6:	0092      	.short	0x0092
 8016ce8:	002c00a1 	.word	0x002c00a1
 8016cec:	00bf00b0 	.word	0x00bf00b0
 8016cf0:	002f00e6 	.word	0x002f00e6
 8016cf4:	00830068 	.word	0x00830068
 8016cf8:	02ad024f 	.word	0x02ad024f
 8016cfc:	01bc0129 	.word	0x01bc0129
 8016d00:	003e      	.short	0x003e
	switch(spi_rx[1] & 0xF0) {
 8016d02:	2be0      	cmp	r3, #224	; 0xe0
 8016d04:	d11b      	bne.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				}
			}
			break;
		}
		case 0xE0: {
			uint16_t pitch_rx = spi_rx[3];
 8016d06:	4b7b      	ldr	r3, [pc, #492]	; (8016ef4 <HAL_SPI_TxRxCpltCallback+0x23c>)
 8016d08:	78da      	ldrb	r2, [r3, #3]
			pitch_rx <<= 8;
			pitch_rx |= spi_rx[2];
 8016d0a:	789c      	ldrb	r4, [r3, #2]
 8016d0c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
			if(flag == 0) {
 8016d10:	4b79      	ldr	r3, [pc, #484]	; (8016ef8 <HAL_SPI_TxRxCpltCallback+0x240>)
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	b93b      	cbnz	r3, 8016d26 <HAL_SPI_TxRxCpltCallback+0x6e>
				if(trak.pitch == 0) trak.pitch = pitch_rx;
 8016d16:	4b79      	ldr	r3, [pc, #484]	; (8016efc <HAL_SPI_TxRxCpltCallback+0x244>)
 8016d18:	885b      	ldrh	r3, [r3, #2]
 8016d1a:	b90b      	cbnz	r3, 8016d20 <HAL_SPI_TxRxCpltCallback+0x68>
 8016d1c:	4b77      	ldr	r3, [pc, #476]	; (8016efc <HAL_SPI_TxRxCpltCallback+0x244>)
 8016d1e:	805c      	strh	r4, [r3, #2]
				flag = 1;
 8016d20:	4b75      	ldr	r3, [pc, #468]	; (8016ef8 <HAL_SPI_TxRxCpltCallback+0x240>)
 8016d22:	2201      	movs	r2, #1
 8016d24:	701a      	strb	r2, [r3, #0]
			}
			int delta = trak.pitch - pitch_rx;
 8016d26:	4b75      	ldr	r3, [pc, #468]	; (8016efc <HAL_SPI_TxRxCpltCallback+0x244>)
 8016d28:	885b      	ldrh	r3, [r3, #2]
			if(delta < 0) delta = pitch_rx - trak.pitch;
 8016d2a:	1b1a      	subs	r2, r3, r4
 8016d2c:	f100 8457 	bmi.w	80175de <HAL_SPI_TxRxCpltCallback+0x926>
			if(pitch_rx < 64) pitch_rx = 64;
 8016d30:	2c3f      	cmp	r4, #63	; 0x3f
 8016d32:	d800      	bhi.n	8016d36 <HAL_SPI_TxRxCpltCallback+0x7e>
 8016d34:	2440      	movs	r4, #64	; 0x40
			if(delta < 16384) {
 8016d36:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8016d3a:	f2c0 8453 	blt.w	80175e4 <HAL_SPI_TxRxCpltCallback+0x92c>
			if(pitch_rx < 64) pitch_rx = 64;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	f000 bc81 	b.w	8017646 <HAL_SPI_TxRxCpltCallback+0x98e>
			if(display.quantize == 1) {
 8016d44:	4b6e      	ldr	r3, [pc, #440]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016d46:	7c5b      	ldrb	r3, [r3, #17]
 8016d48:	2b01      	cmp	r3, #1
 8016d4a:	d004      	beq.n	8016d56 <HAL_SPI_TxRxCpltCallback+0x9e>
				display.loopstart = file_pos_wide;
 8016d4c:	4b6d      	ldr	r3, [pc, #436]	; (8016f04 <HAL_SPI_TxRxCpltCallback+0x24c>)
 8016d4e:	681a      	ldr	r2, [r3, #0]
 8016d50:	4b6b      	ldr	r3, [pc, #428]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016d52:	609a      	str	r2, [r3, #8]
 8016d54:	e7f3      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				display.loopstart = QuantizePosition(0);
 8016d56:	2000      	movs	r0, #0
 8016d58:	f7fc f9d6 	bl	8013108 <QuantizePosition>
 8016d5c:	4b68      	ldr	r3, [pc, #416]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016d5e:	6098      	str	r0, [r3, #8]
 8016d60:	e7ed      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			if(menu_mode == 1) {
 8016d62:	4b69      	ldr	r3, [pc, #420]	; (8016f08 <HAL_SPI_TxRxCpltCallback+0x250>)
 8016d64:	f993 3000 	ldrsb.w	r3, [r3]
 8016d68:	2b01      	cmp	r3, #1
 8016d6a:	d1e8      	bne.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				bOutOfData = 1;
 8016d6c:	4b67      	ldr	r3, [pc, #412]	; (8016f0c <HAL_SPI_TxRxCpltCallback+0x254>)
 8016d6e:	2201      	movs	r2, #1
 8016d70:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 8016d72:	4b67      	ldr	r3, [pc, #412]	; (8016f10 <HAL_SPI_TxRxCpltCallback+0x258>)
 8016d74:	2203      	movs	r2, #3
 8016d76:	601a      	str	r2, [r3, #0]
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8016d78:	2028      	movs	r0, #40	; 0x28
 8016d7a:	f7ea faf7 	bl	800136c <HAL_NVIC_DisableIRQ>
				__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8016d7e:	4865      	ldr	r0, [pc, #404]	; (8016f14 <HAL_SPI_TxRxCpltCallback+0x25c>)
 8016d80:	6803      	ldr	r3, [r0, #0]
 8016d82:	f06f 0201 	mvn.w	r2, #1
 8016d86:	611a      	str	r2, [r3, #16]
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 8016d88:	2200      	movs	r2, #0
 8016d8a:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim6);
 8016d8c:	f7f0 f95a 	bl	8007044 <HAL_TIM_Base_Start_IT>
				Track_number = Mark_number + str_increment;
 8016d90:	4b61      	ldr	r3, [pc, #388]	; (8016f18 <HAL_SPI_TxRxCpltCallback+0x260>)
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	4a61      	ldr	r2, [pc, #388]	; (8016f1c <HAL_SPI_TxRxCpltCallback+0x264>)
 8016d96:	6812      	ldr	r2, [r2, #0]
 8016d98:	4413      	add	r3, r2
 8016d9a:	4a61      	ldr	r2, [pc, #388]	; (8016f20 <HAL_SPI_TxRxCpltCallback+0x268>)
 8016d9c:	6013      	str	r3, [r2, #0]
				if(Track_number >= Total_tracks) Track_number = 0;
 8016d9e:	4a61      	ldr	r2, [pc, #388]	; (8016f24 <HAL_SPI_TxRxCpltCallback+0x26c>)
 8016da0:	8812      	ldrh	r2, [r2, #0]
 8016da2:	4293      	cmp	r3, r2
 8016da4:	db02      	blt.n	8016dac <HAL_SPI_TxRxCpltCallback+0xf4>
 8016da6:	4b5e      	ldr	r3, [pc, #376]	; (8016f20 <HAL_SPI_TxRxCpltCallback+0x268>)
 8016da8:	2200      	movs	r2, #0
 8016daa:	601a      	str	r2, [r3, #0]
				String_number = -1;
 8016dac:	4b5e      	ldr	r3, [pc, #376]	; (8016f28 <HAL_SPI_TxRxCpltCallback+0x270>)
 8016dae:	f04f 32ff 	mov.w	r2, #4294967295
 8016db2:	601a      	str	r2, [r3, #0]
 8016db4:	e7c3      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			if(display.quantize == 1) {
 8016db6:	4b52      	ldr	r3, [pc, #328]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016db8:	7c5b      	ldrb	r3, [r3, #17]
 8016dba:	2b01      	cmp	r3, #1
 8016dbc:	d010      	beq.n	8016de0 <HAL_SPI_TxRxCpltCallback+0x128>
				display.loopend = file_pos_wide;
 8016dbe:	4b51      	ldr	r3, [pc, #324]	; (8016f04 <HAL_SPI_TxRxCpltCallback+0x24c>)
 8016dc0:	681a      	ldr	r2, [r3, #0]
 8016dc2:	4b4f      	ldr	r3, [pc, #316]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016dc4:	60da      	str	r2, [r3, #12]
			if(display.loop == 0) display.loop = 1;
 8016dc6:	4b4e      	ldr	r3, [pc, #312]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016dc8:	7c1b      	ldrb	r3, [r3, #16]
 8016dca:	b913      	cbnz	r3, 8016dd2 <HAL_SPI_TxRxCpltCallback+0x11a>
 8016dcc:	4b4c      	ldr	r3, [pc, #304]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016dce:	2201      	movs	r2, #1
 8016dd0:	741a      	strb	r2, [r3, #16]
			GoToPosition(display.loopstart);
 8016dd2:	4b4b      	ldr	r3, [pc, #300]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016dd4:	6898      	ldr	r0, [r3, #8]
 8016dd6:	f001 f873 	bl	8017ec0 <GoToPosition>
			BSP_AUDIO_OUT_Resume();
 8016dda:	f7ff f819 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
			break;
 8016dde:	e7ae      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				display.loopend = QuantizePosition(0);
 8016de0:	2000      	movs	r0, #0
 8016de2:	f7fc f991 	bl	8013108 <QuantizePosition>
 8016de6:	4b46      	ldr	r3, [pc, #280]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016de8:	60d8      	str	r0, [r3, #12]
 8016dea:	e7ec      	b.n	8016dc6 <HAL_SPI_TxRxCpltCallback+0x10e>
			button_flag ^= (1 << 2);
 8016dec:	4a4f      	ldr	r2, [pc, #316]	; (8016f2c <HAL_SPI_TxRxCpltCallback+0x274>)
 8016dee:	8813      	ldrh	r3, [r2, #0]
 8016df0:	f083 0304 	eor.w	r3, r3, #4
 8016df4:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 8016df6:	484e      	ldr	r0, [pc, #312]	; (8016f30 <HAL_SPI_TxRxCpltCallback+0x278>)
 8016df8:	6803      	ldr	r3, [r0, #0]
 8016dfa:	f06f 0201 	mvn.w	r2, #1
 8016dfe:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 8016e00:	2200      	movs	r2, #0
 8016e02:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 8016e04:	f7f0 f91e 	bl	8007044 <HAL_TIM_Base_Start_IT>
			break;
 8016e08:	e799      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			button_flag ^= (1 << 3);
 8016e0a:	4a48      	ldr	r2, [pc, #288]	; (8016f2c <HAL_SPI_TxRxCpltCallback+0x274>)
 8016e0c:	8813      	ldrh	r3, [r2, #0]
 8016e0e:	f083 0308 	eor.w	r3, r3, #8
 8016e12:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 8016e14:	4846      	ldr	r0, [pc, #280]	; (8016f30 <HAL_SPI_TxRxCpltCallback+0x278>)
 8016e16:	6803      	ldr	r3, [r0, #0]
 8016e18:	f06f 0201 	mvn.w	r2, #1
 8016e1c:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 8016e1e:	2200      	movs	r2, #0
 8016e20:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 8016e22:	f7f0 f90f 	bl	8007044 <HAL_TIM_Base_Start_IT>
			break;
 8016e26:	e78a      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			button_flag ^= (1 << 0);
 8016e28:	4a40      	ldr	r2, [pc, #256]	; (8016f2c <HAL_SPI_TxRxCpltCallback+0x274>)
 8016e2a:	8813      	ldrh	r3, [r2, #0]
 8016e2c:	f083 0301 	eor.w	r3, r3, #1
 8016e30:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 8016e32:	483f      	ldr	r0, [pc, #252]	; (8016f30 <HAL_SPI_TxRxCpltCallback+0x278>)
 8016e34:	6803      	ldr	r3, [r0, #0]
 8016e36:	f06f 0201 	mvn.w	r2, #1
 8016e3a:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 8016e40:	f7f0 f900 	bl	8007044 <HAL_TIM_Base_Start_IT>
			break;
 8016e44:	e77b      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			button_flag ^= (1 << 1);
 8016e46:	4a39      	ldr	r2, [pc, #228]	; (8016f2c <HAL_SPI_TxRxCpltCallback+0x274>)
 8016e48:	8813      	ldrh	r3, [r2, #0]
 8016e4a:	f083 0302 	eor.w	r3, r3, #2
 8016e4e:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_CLEAR_IT(&htim9, TIM_IT_UPDATE);
 8016e50:	4837      	ldr	r0, [pc, #220]	; (8016f30 <HAL_SPI_TxRxCpltCallback+0x278>)
 8016e52:	6803      	ldr	r3, [r0, #0]
 8016e54:	f06f 0201 	mvn.w	r2, #1
 8016e58:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim9, 0);
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim9);
 8016e5e:	f7f0 f8f1 	bl	8007044 <HAL_TIM_Base_Start_IT>
			break;
 8016e62:	e76c      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			if(!(button_flag & (1 << 2))) {
 8016e64:	4b31      	ldr	r3, [pc, #196]	; (8016f2c <HAL_SPI_TxRxCpltCallback+0x274>)
 8016e66:	881b      	ldrh	r3, [r3, #0]
 8016e68:	f013 0f04 	tst.w	r3, #4
 8016e6c:	d10a      	bne.n	8016e84 <HAL_SPI_TxRxCpltCallback+0x1cc>
				bOutOfData = 1;
 8016e6e:	4b27      	ldr	r3, [pc, #156]	; (8016f0c <HAL_SPI_TxRxCpltCallback+0x254>)
 8016e70:	2201      	movs	r2, #1
 8016e72:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 8016e74:	4b26      	ldr	r3, [pc, #152]	; (8016f10 <HAL_SPI_TxRxCpltCallback+0x258>)
 8016e76:	2203      	movs	r2, #3
 8016e78:	601a      	str	r2, [r3, #0]
				Track_number--;
 8016e7a:	4a29      	ldr	r2, [pc, #164]	; (8016f20 <HAL_SPI_TxRxCpltCallback+0x268>)
 8016e7c:	6813      	ldr	r3, [r2, #0]
 8016e7e:	3b01      	subs	r3, #1
 8016e80:	6013      	str	r3, [r2, #0]
 8016e82:	e75c      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				display.loopend = (display.loopend+display.loopstart)/2;
 8016e84:	4a1e      	ldr	r2, [pc, #120]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016e86:	68d3      	ldr	r3, [r2, #12]
 8016e88:	6890      	ldr	r0, [r2, #8]
 8016e8a:	4403      	add	r3, r0
 8016e8c:	085b      	lsrs	r3, r3, #1
 8016e8e:	60d3      	str	r3, [r2, #12]
				if(display.loopend - display.loopstart < 1)
 8016e90:	4298      	cmp	r0, r3
 8016e92:	d00b      	beq.n	8016eac <HAL_SPI_TxRxCpltCallback+0x1f4>
				if(file_pos_wide >= display.loopend) {
 8016e94:	4b1a      	ldr	r3, [pc, #104]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016e96:	68da      	ldr	r2, [r3, #12]
 8016e98:	4b1a      	ldr	r3, [pc, #104]	; (8016f04 <HAL_SPI_TxRxCpltCallback+0x24c>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	429a      	cmp	r2, r3
 8016e9e:	f63f af4e 	bhi.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					GoToPosition(display.loopstart);
 8016ea2:	f001 f80d 	bl	8017ec0 <GoToPosition>
					BSP_AUDIO_OUT_Resume();
 8016ea6:	f7fe ffb3 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
 8016eaa:	e748      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					display.loopend = display.loopstart + 1;
 8016eac:	1c43      	adds	r3, r0, #1
 8016eae:	60d3      	str	r3, [r2, #12]
 8016eb0:	e7f0      	b.n	8016e94 <HAL_SPI_TxRxCpltCallback+0x1dc>
			if(!(button_flag & (1 << 2))) {
 8016eb2:	4b1e      	ldr	r3, [pc, #120]	; (8016f2c <HAL_SPI_TxRxCpltCallback+0x274>)
 8016eb4:	881b      	ldrh	r3, [r3, #0]
 8016eb6:	f013 0f04 	tst.w	r3, #4
 8016eba:	d10a      	bne.n	8016ed2 <HAL_SPI_TxRxCpltCallback+0x21a>
				bOutOfData = 1;
 8016ebc:	4b13      	ldr	r3, [pc, #76]	; (8016f0c <HAL_SPI_TxRxCpltCallback+0x254>)
 8016ebe:	2201      	movs	r2, #1
 8016ec0:	601a      	str	r2, [r3, #0]
				unDmaBufMode = 3;
 8016ec2:	4b13      	ldr	r3, [pc, #76]	; (8016f10 <HAL_SPI_TxRxCpltCallback+0x258>)
 8016ec4:	2203      	movs	r2, #3
 8016ec6:	601a      	str	r2, [r3, #0]
				Track_number++;
 8016ec8:	4a15      	ldr	r2, [pc, #84]	; (8016f20 <HAL_SPI_TxRxCpltCallback+0x268>)
 8016eca:	6813      	ldr	r3, [r2, #0]
 8016ecc:	3301      	adds	r3, #1
 8016ece:	6013      	str	r3, [r2, #0]
 8016ed0:	e735      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				display.loopend = display.loopend*2-display.loopstart;
 8016ed2:	4b0b      	ldr	r3, [pc, #44]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016ed4:	68d9      	ldr	r1, [r3, #12]
 8016ed6:	689a      	ldr	r2, [r3, #8]
 8016ed8:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8016edc:	60da      	str	r2, [r3, #12]
				if(display.loopend >= rekordbox.spectrum_size)
 8016ede:	4b15      	ldr	r3, [pc, #84]	; (8016f34 <HAL_SPI_TxRxCpltCallback+0x27c>)
 8016ee0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	f4ff af2a 	bcc.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					display.loopend = rekordbox.spectrum_size - 1;
 8016eea:	3b01      	subs	r3, #1
 8016eec:	4a04      	ldr	r2, [pc, #16]	; (8016f00 <HAL_SPI_TxRxCpltCallback+0x248>)
 8016eee:	60d3      	str	r3, [r2, #12]
 8016ef0:	e725      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
 8016ef2:	bf00      	nop
 8016ef4:	2000eb9c 	.word	0x2000eb9c
 8016ef8:	2001744c 	.word	0x2001744c
 8016efc:	2000eba4 	.word	0x2000eba4
 8016f00:	200005e8 	.word	0x200005e8
 8016f04:	2000e3cc 	.word	0x2000e3cc
 8016f08:	20000604 	.word	0x20000604
 8016f0c:	2000e370 	.word	0x2000e370
 8016f10:	2000ebdc 	.word	0x2000ebdc
 8016f14:	200174ec 	.word	0x200174ec
 8016f18:	20000094 	.word	0x20000094
 8016f1c:	2001745c 	.word	0x2001745c
 8016f20:	2000e36c 	.word	0x2000e36c
 8016f24:	20001c30 	.word	0x20001c30
 8016f28:	2000009c 	.word	0x2000009c
 8016f2c:	2001744a 	.word	0x2001744a
 8016f30:	200175ac 	.word	0x200175ac
 8016f34:	20016618 	.word	0x20016618
			if(!(button_flag & (1 << 2))) {
 8016f38:	4ba4      	ldr	r3, [pc, #656]	; (80171cc <HAL_SPI_TxRxCpltCallback+0x514>)
 8016f3a:	881b      	ldrh	r3, [r3, #0]
 8016f3c:	f013 0f04 	tst.w	r3, #4
 8016f40:	d14c      	bne.n	8016fdc <HAL_SPI_TxRxCpltCallback+0x324>
				if(display.quantize == 1) {
 8016f42:	4ba3      	ldr	r3, [pc, #652]	; (80171d0 <HAL_SPI_TxRxCpltCallback+0x518>)
 8016f44:	7c5b      	ldrb	r3, [r3, #17]
 8016f46:	2b01      	cmp	r3, #1
 8016f48:	d02f      	beq.n	8016faa <HAL_SPI_TxRxCpltCallback+0x2f2>
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 8016f4a:	4ca2      	ldr	r4, [pc, #648]	; (80171d4 <HAL_SPI_TxRxCpltCallback+0x51c>)
 8016f4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016f4e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016f50:	48a1      	ldr	r0, [pc, #644]	; (80171d8 <HAL_SPI_TxRxCpltCallback+0x520>)
 8016f52:	1818      	adds	r0, r3, r0
 8016f54:	f161 0100 	sbc.w	r1, r1, #0
 8016f58:	f7e9 ff48 	bl	8000dec <__aeabi_ul2f>
 8016f5c:	ee08 0a10 	vmov	s16, r0
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8016f60:	6923      	ldr	r3, [r4, #16]
 8016f62:	6961      	ldr	r1, [r4, #20]
 8016f64:	4a9d      	ldr	r2, [pc, #628]	; (80171dc <HAL_SPI_TxRxCpltCallback+0x524>)
 8016f66:	6812      	ldr	r2, [r2, #0]
 8016f68:	1a9b      	subs	r3, r3, r2
 8016f6a:	f161 0100 	sbc.w	r1, r1, #0
 8016f6e:	4a9c      	ldr	r2, [pc, #624]	; (80171e0 <HAL_SPI_TxRxCpltCallback+0x528>)
 8016f70:	6810      	ldr	r0, [r2, #0]
 8016f72:	1a18      	subs	r0, r3, r0
 8016f74:	f161 0100 	sbc.w	r1, r1, #0
 8016f78:	f7e9 ff38 	bl	8000dec <__aeabi_ul2f>
 8016f7c:	ee07 0a90 	vmov	s15, r0
 8016f80:	ee88 7a27 	vdiv.f32	s14, s16, s15
							*rekordbox.spectrum_size);
 8016f84:	4b97      	ldr	r3, [pc, #604]	; (80171e4 <HAL_SPI_TxRxCpltCallback+0x52c>)
 8016f86:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8016f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
					GoToPosition((float)(f_tell(&MyFile) - 120000)
 8016f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f96:	ee17 0a90 	vmov	r0, s15
 8016f9a:	f000 ff91 	bl	8017ec0 <GoToPosition>
				if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 8016f9e:	4b92      	ldr	r3, [pc, #584]	; (80171e8 <HAL_SPI_TxRxCpltCallback+0x530>)
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	b94b      	cbnz	r3, 8016fb8 <HAL_SPI_TxRxCpltCallback+0x300>
 8016fa4:	f7fe ff34 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
 8016fa8:	e6c9      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					GoToPosition(QuantizePosition(-1));
 8016faa:	f04f 30ff 	mov.w	r0, #4294967295
 8016fae:	f7fc f8ab 	bl	8013108 <QuantizePosition>
 8016fb2:	f000 ff85 	bl	8017ec0 <GoToPosition>
 8016fb6:	e7f2      	b.n	8016f9e <HAL_SPI_TxRxCpltCallback+0x2e6>
					GetTrackTime();
 8016fb8:	f001 f824 	bl	8018004 <GetTrackTime>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 8016fbc:	4b8b      	ldr	r3, [pc, #556]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 8016fbe:	789b      	ldrb	r3, [r3, #2]
 8016fc0:	b93b      	cbnz	r3, 8016fd2 <HAL_SPI_TxRxCpltCallback+0x31a>
 8016fc2:	f043 0302 	orr.w	r3, r3, #2
 8016fc6:	4a89      	ldr	r2, [pc, #548]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 8016fc8:	7093      	strb	r3, [r2, #2]
					trak.state = SETCUE;
 8016fca:	4b87      	ldr	r3, [pc, #540]	; (80171e8 <HAL_SPI_TxRxCpltCallback+0x530>)
 8016fcc:	2202      	movs	r2, #2
 8016fce:	701a      	strb	r2, [r3, #0]
 8016fd0:	e6b5      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					else spi_tx[2] &= ~(1 << 1);
 8016fd2:	f023 0302 	bic.w	r3, r3, #2
 8016fd6:	4a85      	ldr	r2, [pc, #532]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 8016fd8:	7093      	strb	r3, [r2, #2]
 8016fda:	e7f6      	b.n	8016fca <HAL_SPI_TxRxCpltCallback+0x312>
				rekordbox.currentcue++;
 8016fdc:	4a81      	ldr	r2, [pc, #516]	; (80171e4 <HAL_SPI_TxRxCpltCallback+0x52c>)
 8016fde:	f8d2 3b94 	ldr.w	r3, [r2, #2964]	; 0xb94
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	f8c2 3b94 	str.w	r3, [r2, #2964]	; 0xb94
				if(rekordbox.currentcue >= rekordbox.cues)
 8016fe8:	f8d2 2358 	ldr.w	r2, [r2, #856]	; 0x358
 8016fec:	4293      	cmp	r3, r2
 8016fee:	db03      	blt.n	8016ff8 <HAL_SPI_TxRxCpltCallback+0x340>
					rekordbox.currentcue = 0;
 8016ff0:	4b7c      	ldr	r3, [pc, #496]	; (80171e4 <HAL_SPI_TxRxCpltCallback+0x52c>)
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 8016ff8:	4b7d      	ldr	r3, [pc, #500]	; (80171f0 <HAL_SPI_TxRxCpltCallback+0x538>)
 8016ffa:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8016ffe:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 8017002:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 8017006:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801700a:	6858      	ldr	r0, [r3, #4]
 801700c:	f000 ff58 	bl	8017ec0 <GoToPosition>
				if(trak.state == PLAYING) {
 8017010:	4b75      	ldr	r3, [pc, #468]	; (80171e8 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017012:	781b      	ldrb	r3, [r3, #0]
 8017014:	b9d3      	cbnz	r3, 801704c <HAL_SPI_TxRxCpltCallback+0x394>
					BSP_AUDIO_OUT_Resume();
 8017016:	f7fe fefb 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
					HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 801701a:	4876      	ldr	r0, [pc, #472]	; (80171f4 <HAL_SPI_TxRxCpltCallback+0x53c>)
 801701c:	f7f0 f86a 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
					spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 8017020:	4a72      	ldr	r2, [pc, #456]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 8017022:	7893      	ldrb	r3, [r2, #2]
 8017024:	f023 0301 	bic.w	r3, r3, #1
 8017028:	7093      	strb	r3, [r2, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 801702a:	4b71      	ldr	r3, [pc, #452]	; (80171f0 <HAL_SPI_TxRxCpltCallback+0x538>)
 801702c:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8017030:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 8017034:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 8017038:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801703c:	685b      	ldr	r3, [r3, #4]
 801703e:	b143      	cbz	r3, 8017052 <HAL_SPI_TxRxCpltCallback+0x39a>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8017040:	4a6a      	ldr	r2, [pc, #424]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 8017042:	7893      	ldrb	r3, [r2, #2]
 8017044:	f023 0302 	bic.w	r3, r3, #2
 8017048:	7093      	strb	r3, [r2, #2]
 801704a:	e678      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					GetTrackTime();
 801704c:	f000 ffda 	bl	8018004 <GetTrackTime>
 8017050:	e7eb      	b.n	801702a <HAL_SPI_TxRxCpltCallback+0x372>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8017052:	4a66      	ldr	r2, [pc, #408]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 8017054:	7893      	ldrb	r3, [r2, #2]
 8017056:	f043 0302 	orr.w	r3, r3, #2
 801705a:	7093      	strb	r3, [r2, #2]
 801705c:	e66f      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			if(!(button_flag & (1 << 2))) {
 801705e:	4b5b      	ldr	r3, [pc, #364]	; (80171cc <HAL_SPI_TxRxCpltCallback+0x514>)
 8017060:	881b      	ldrh	r3, [r3, #0]
 8017062:	f013 0f04 	tst.w	r3, #4
 8017066:	d14c      	bne.n	8017102 <HAL_SPI_TxRxCpltCallback+0x44a>
				if(display.quantize == 1) {
 8017068:	4b59      	ldr	r3, [pc, #356]	; (80171d0 <HAL_SPI_TxRxCpltCallback+0x518>)
 801706a:	7c5b      	ldrb	r3, [r3, #17]
 801706c:	2b01      	cmp	r3, #1
 801706e:	d030      	beq.n	80170d2 <HAL_SPI_TxRxCpltCallback+0x41a>
					GoToPosition((float)(f_tell(&MyFile) + 60000)
 8017070:	4c58      	ldr	r4, [pc, #352]	; (80171d4 <HAL_SPI_TxRxCpltCallback+0x51c>)
 8017072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017074:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017076:	f64e 2060 	movw	r0, #60000	; 0xea60
 801707a:	1818      	adds	r0, r3, r0
 801707c:	f141 0100 	adc.w	r1, r1, #0
 8017080:	f7e9 feb4 	bl	8000dec <__aeabi_ul2f>
 8017084:	ee08 0a10 	vmov	s16, r0
							/(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8017088:	6923      	ldr	r3, [r4, #16]
 801708a:	6961      	ldr	r1, [r4, #20]
 801708c:	4a53      	ldr	r2, [pc, #332]	; (80171dc <HAL_SPI_TxRxCpltCallback+0x524>)
 801708e:	6812      	ldr	r2, [r2, #0]
 8017090:	1a9b      	subs	r3, r3, r2
 8017092:	f161 0100 	sbc.w	r1, r1, #0
 8017096:	4a52      	ldr	r2, [pc, #328]	; (80171e0 <HAL_SPI_TxRxCpltCallback+0x528>)
 8017098:	6810      	ldr	r0, [r2, #0]
 801709a:	1a18      	subs	r0, r3, r0
 801709c:	f161 0100 	sbc.w	r1, r1, #0
 80170a0:	f7e9 fea4 	bl	8000dec <__aeabi_ul2f>
 80170a4:	ee07 0a90 	vmov	s15, r0
 80170a8:	ee88 7a27 	vdiv.f32	s14, s16, s15
							*rekordbox.spectrum_size);
 80170ac:	4b4d      	ldr	r3, [pc, #308]	; (80171e4 <HAL_SPI_TxRxCpltCallback+0x52c>)
 80170ae:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 80170b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80170b6:	ee67 7a87 	vmul.f32	s15, s15, s14
					GoToPosition((float)(f_tell(&MyFile) + 60000)
 80170ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80170be:	ee17 0a90 	vmov	r0, s15
 80170c2:	f000 fefd 	bl	8017ec0 <GoToPosition>
				if(trak.state == PLAYING) BSP_AUDIO_OUT_Resume();
 80170c6:	4b48      	ldr	r3, [pc, #288]	; (80171e8 <HAL_SPI_TxRxCpltCallback+0x530>)
 80170c8:	781b      	ldrb	r3, [r3, #0]
 80170ca:	b943      	cbnz	r3, 80170de <HAL_SPI_TxRxCpltCallback+0x426>
 80170cc:	f7fe fea0 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
 80170d0:	e635      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					GoToPosition(QuantizePosition(1));
 80170d2:	2001      	movs	r0, #1
 80170d4:	f7fc f818 	bl	8013108 <QuantizePosition>
 80170d8:	f000 fef2 	bl	8017ec0 <GoToPosition>
 80170dc:	e7f3      	b.n	80170c6 <HAL_SPI_TxRxCpltCallback+0x40e>
					GetTrackTime();
 80170de:	f000 ff91 	bl	8018004 <GetTrackTime>
					if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 80170e2:	4b42      	ldr	r3, [pc, #264]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 80170e4:	789b      	ldrb	r3, [r3, #2]
 80170e6:	b93b      	cbnz	r3, 80170f8 <HAL_SPI_TxRxCpltCallback+0x440>
 80170e8:	f043 0302 	orr.w	r3, r3, #2
 80170ec:	4a3f      	ldr	r2, [pc, #252]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 80170ee:	7093      	strb	r3, [r2, #2]
					trak.state = SETCUE;
 80170f0:	4b3d      	ldr	r3, [pc, #244]	; (80171e8 <HAL_SPI_TxRxCpltCallback+0x530>)
 80170f2:	2202      	movs	r2, #2
 80170f4:	701a      	strb	r2, [r3, #0]
 80170f6:	e622      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					else spi_tx[2] &= ~(1 << 1);
 80170f8:	f023 0302 	bic.w	r3, r3, #2
 80170fc:	4a3b      	ldr	r2, [pc, #236]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 80170fe:	7093      	strb	r3, [r2, #2]
 8017100:	e7f6      	b.n	80170f0 <HAL_SPI_TxRxCpltCallback+0x438>
				rekordbox.currentcue--;
 8017102:	4a38      	ldr	r2, [pc, #224]	; (80171e4 <HAL_SPI_TxRxCpltCallback+0x52c>)
 8017104:	f8d2 3b94 	ldr.w	r3, [r2, #2964]	; 0xb94
 8017108:	3b01      	subs	r3, #1
 801710a:	f8c2 3b94 	str.w	r3, [r2, #2964]	; 0xb94
				if(rekordbox.currentcue < 0)
 801710e:	2b00      	cmp	r3, #0
 8017110:	db29      	blt.n	8017166 <HAL_SPI_TxRxCpltCallback+0x4ae>
				GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 8017112:	4b37      	ldr	r3, [pc, #220]	; (80171f0 <HAL_SPI_TxRxCpltCallback+0x538>)
 8017114:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8017118:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 801711c:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 8017120:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017124:	6858      	ldr	r0, [r3, #4]
 8017126:	f000 fecb 	bl	8017ec0 <GoToPosition>
				if(trak.state == PLAYING) {
 801712a:	4b2f      	ldr	r3, [pc, #188]	; (80171e8 <HAL_SPI_TxRxCpltCallback+0x530>)
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	bb03      	cbnz	r3, 8017172 <HAL_SPI_TxRxCpltCallback+0x4ba>
					BSP_AUDIO_OUT_Resume();
 8017130:	f7fe fe6e 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
					HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8017134:	482f      	ldr	r0, [pc, #188]	; (80171f4 <HAL_SPI_TxRxCpltCallback+0x53c>)
 8017136:	f7ef ffdd 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
					spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 801713a:	4a2c      	ldr	r2, [pc, #176]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 801713c:	7893      	ldrb	r3, [r2, #2]
 801713e:	f023 0301 	bic.w	r3, r3, #1
 8017142:	7093      	strb	r3, [r2, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 8017144:	4b2a      	ldr	r3, [pc, #168]	; (80171f0 <HAL_SPI_TxRxCpltCallback+0x538>)
 8017146:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 801714a:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 801714e:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 8017152:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	b173      	cbz	r3, 8017178 <HAL_SPI_TxRxCpltCallback+0x4c0>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 801715a:	4a24      	ldr	r2, [pc, #144]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 801715c:	7893      	ldrb	r3, [r2, #2]
 801715e:	f023 0302 	bic.w	r3, r3, #2
 8017162:	7093      	strb	r3, [r2, #2]
 8017164:	e5eb      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					rekordbox.currentcue = rekordbox.cues - 1;
 8017166:	f8d2 3358 	ldr.w	r3, [r2, #856]	; 0x358
 801716a:	3b01      	subs	r3, #1
 801716c:	f8c2 3b94 	str.w	r3, [r2, #2964]	; 0xb94
 8017170:	e7cf      	b.n	8017112 <HAL_SPI_TxRxCpltCallback+0x45a>
					GetTrackTime();
 8017172:	f000 ff47 	bl	8018004 <GetTrackTime>
 8017176:	e7e5      	b.n	8017144 <HAL_SPI_TxRxCpltCallback+0x48c>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8017178:	4a1c      	ldr	r2, [pc, #112]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 801717a:	7893      	ldrb	r3, [r2, #2]
 801717c:	f043 0302 	orr.w	r3, r3, #2
 8017180:	7093      	strb	r3, [r2, #2]
 8017182:	e5dc      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			if(trak.state == PLAYING) {
 8017184:	4b18      	ldr	r3, [pc, #96]	; (80171e8 <HAL_SPI_TxRxCpltCallback+0x530>)
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d137      	bne.n	80171fc <HAL_SPI_TxRxCpltCallback+0x544>
				BSP_AUDIO_OUT_Pause();
 801718c:	f7fe fe38 	bl	8015e00 <BSP_AUDIO_OUT_Pause>
				if(!spi_tx[2] & (1 << 0)) spi_tx[2] |= (1 << 1);
 8017190:	4b16      	ldr	r3, [pc, #88]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 8017192:	789b      	ldrb	r3, [r3, #2]
 8017194:	b98b      	cbnz	r3, 80171ba <HAL_SPI_TxRxCpltCallback+0x502>
 8017196:	f043 0302 	orr.w	r3, r3, #2
 801719a:	4a14      	ldr	r2, [pc, #80]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 801719c:	7093      	strb	r3, [r2, #2]
				HAL_TIM_Base_Start_IT(&htim8); //start blinking
 801719e:	4815      	ldr	r0, [pc, #84]	; (80171f4 <HAL_SPI_TxRxCpltCallback+0x53c>)
 80171a0:	f7ef ff50 	bl	8007044 <HAL_TIM_Base_Start_IT>
				if(file_pos_wide != rekordbox.cue_start_position[0]) {
 80171a4:	4b0f      	ldr	r3, [pc, #60]	; (80171e4 <HAL_SPI_TxRxCpltCallback+0x52c>)
 80171a6:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80171aa:	4b13      	ldr	r3, [pc, #76]	; (80171f8 <HAL_SPI_TxRxCpltCallback+0x540>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d008      	beq.n	80171c4 <HAL_SPI_TxRxCpltCallback+0x50c>
					trak.state = SETCUE;
 80171b2:	4b0d      	ldr	r3, [pc, #52]	; (80171e8 <HAL_SPI_TxRxCpltCallback+0x530>)
 80171b4:	2202      	movs	r2, #2
 80171b6:	701a      	strb	r2, [r3, #0]
 80171b8:	e5c1      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				else spi_tx[2] &= ~(1 << 1);
 80171ba:	f023 0302 	bic.w	r3, r3, #2
 80171be:	4a0b      	ldr	r2, [pc, #44]	; (80171ec <HAL_SPI_TxRxCpltCallback+0x534>)
 80171c0:	7093      	strb	r3, [r2, #2]
 80171c2:	e7ec      	b.n	801719e <HAL_SPI_TxRxCpltCallback+0x4e6>
					trak.state = STOPPED;
 80171c4:	4b08      	ldr	r3, [pc, #32]	; (80171e8 <HAL_SPI_TxRxCpltCallback+0x530>)
 80171c6:	2201      	movs	r2, #1
 80171c8:	701a      	strb	r2, [r3, #0]
 80171ca:	e5b8      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
 80171cc:	2001744a 	.word	0x2001744a
 80171d0:	200005e8 	.word	0x200005e8
 80171d4:	200017b0 	.word	0x200017b0
 80171d8:	fffe2b40 	.word	0xfffe2b40
 80171dc:	200145e8 	.word	0x200145e8
 80171e0:	20017cac 	.word	0x20017cac
 80171e4:	20016618 	.word	0x20016618
 80171e8:	2000eba4 	.word	0x2000eba4
 80171ec:	20000058 	.word	0x20000058
 80171f0:	20014618 	.word	0x20014618
 80171f4:	2001756c 	.word	0x2001756c
 80171f8:	2000e3cc 	.word	0x2000e3cc
				BSP_AUDIO_OUT_Resume();
 80171fc:	f7fe fe08 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 8017200:	4baa      	ldr	r3, [pc, #680]	; (80174ac <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017202:	2200      	movs	r2, #0
 8017204:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8017206:	48aa      	ldr	r0, [pc, #680]	; (80174b0 <HAL_SPI_TxRxCpltCallback+0x7f8>)
 8017208:	f7ef ff74 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 801720c:	4aa9      	ldr	r2, [pc, #676]	; (80174b4 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 801720e:	7893      	ldrb	r3, [r2, #2]
 8017210:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8017214:	7093      	strb	r3, [r2, #2]
				if(rekordbox.cue_start_position[rekordbox.currentcue] != 0) {
 8017216:	4aa8      	ldr	r2, [pc, #672]	; (80174b8 <HAL_SPI_TxRxCpltCallback+0x800>)
 8017218:	f502 5100 	add.w	r1, r2, #8192	; 0x2000
 801721c:	f8d1 1b94 	ldr.w	r1, [r1, #2964]	; 0xb94
 8017220:	f601 2102 	addw	r1, r1, #2562	; 0xa02
 8017224:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8017228:	6852      	ldr	r2, [r2, #4]
 801722a:	b122      	cbz	r2, 8017236 <HAL_SPI_TxRxCpltCallback+0x57e>
					spi_tx[2] &= ~(1 << 1); //turn on CUE led
 801722c:	f023 0302 	bic.w	r3, r3, #2
 8017230:	4aa0      	ldr	r2, [pc, #640]	; (80174b4 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 8017232:	7093      	strb	r3, [r2, #2]
 8017234:	e583      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					spi_tx[2] |= (1 << 1); //turn off CUE led
 8017236:	f043 0302 	orr.w	r3, r3, #2
 801723a:	4a9e      	ldr	r2, [pc, #632]	; (80174b4 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 801723c:	7093      	strb	r3, [r2, #2]
 801723e:	e57e      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			if(trak.state == STOPPED) {
 8017240:	4b9a      	ldr	r3, [pc, #616]	; (80174ac <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017242:	781b      	ldrb	r3, [r3, #0]
 8017244:	2b01      	cmp	r3, #1
 8017246:	d018      	beq.n	801727a <HAL_SPI_TxRxCpltCallback+0x5c2>
			else if(trak.state == SETCUE) {
 8017248:	2b02      	cmp	r3, #2
 801724a:	f47f ad78 	bne.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				if(display.quantize == 1) {
 801724e:	4b9b      	ldr	r3, [pc, #620]	; (80174bc <HAL_SPI_TxRxCpltCallback+0x804>)
 8017250:	7c5b      	ldrb	r3, [r3, #17]
 8017252:	2b01      	cmp	r3, #1
 8017254:	d01f      	beq.n	8017296 <HAL_SPI_TxRxCpltCallback+0x5de>
					rekordbox.cue_start_position[0] = file_pos_wide;
 8017256:	4b9a      	ldr	r3, [pc, #616]	; (80174c0 <HAL_SPI_TxRxCpltCallback+0x808>)
 8017258:	681a      	ldr	r2, [r3, #0]
 801725a:	4b9a      	ldr	r3, [pc, #616]	; (80174c4 <HAL_SPI_TxRxCpltCallback+0x80c>)
 801725c:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
				rekordbox.currentcue = 0;
 8017260:	4b98      	ldr	r3, [pc, #608]	; (80174c4 <HAL_SPI_TxRxCpltCallback+0x80c>)
 8017262:	2200      	movs	r2, #0
 8017264:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
				spi_tx[2] &= ~(1 << 1); //turn on CUE led
 8017268:	4a92      	ldr	r2, [pc, #584]	; (80174b4 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 801726a:	7893      	ldrb	r3, [r2, #2]
 801726c:	f023 0302 	bic.w	r3, r3, #2
 8017270:	7093      	strb	r3, [r2, #2]
				trak.state = STOPPED;
 8017272:	4b8e      	ldr	r3, [pc, #568]	; (80174ac <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017274:	2201      	movs	r2, #1
 8017276:	701a      	strb	r2, [r3, #0]
 8017278:	e561      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				BSP_AUDIO_OUT_Resume();
 801727a:	f7fe fdc9 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
				trak.state = PLAYING;
 801727e:	4b8b      	ldr	r3, [pc, #556]	; (80174ac <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017280:	2200      	movs	r2, #0
 8017282:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim8); //stop blinking
 8017284:	488a      	ldr	r0, [pc, #552]	; (80174b0 <HAL_SPI_TxRxCpltCallback+0x7f8>)
 8017286:	f7ef ff35 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
				spi_tx[2] &= ~(1 << 0); //turn on PLAY led
 801728a:	4a8a      	ldr	r2, [pc, #552]	; (80174b4 <HAL_SPI_TxRxCpltCallback+0x7fc>)
 801728c:	7893      	ldrb	r3, [r2, #2]
 801728e:	f023 0301 	bic.w	r3, r3, #1
 8017292:	7093      	strb	r3, [r2, #2]
 8017294:	e553      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					rekordbox.cue_start_position[0] = QuantizePosition(0);
 8017296:	2000      	movs	r0, #0
 8017298:	f7fb ff36 	bl	8013108 <QuantizePosition>
 801729c:	4b89      	ldr	r3, [pc, #548]	; (80174c4 <HAL_SPI_TxRxCpltCallback+0x80c>)
 801729e:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 80172a2:	e7dd      	b.n	8017260 <HAL_SPI_TxRxCpltCallback+0x5a8>
			switch(spi_rx[2]) {
 80172a4:	4b88      	ldr	r3, [pc, #544]	; (80174c8 <HAL_SPI_TxRxCpltCallback+0x810>)
 80172a6:	789b      	ldrb	r3, [r3, #2]
 80172a8:	3b40      	subs	r3, #64	; 0x40
 80172aa:	2b0a      	cmp	r3, #10
 80172ac:	f63f ad47 	bhi.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
 80172b0:	a201      	add	r2, pc, #4	; (adr r2, 80172b8 <HAL_SPI_TxRxCpltCallback+0x600>)
 80172b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172b6:	bf00      	nop
 80172b8:	08017411 	.word	0x08017411
 80172bc:	0801731d 	.word	0x0801731d
 80172c0:	08016d3f 	.word	0x08016d3f
 80172c4:	08017355 	.word	0x08017355
 80172c8:	08016d3f 	.word	0x08016d3f
 80172cc:	08016d3f 	.word	0x08016d3f
 80172d0:	08016d3f 	.word	0x08016d3f
 80172d4:	08016d3f 	.word	0x08016d3f
 80172d8:	08017423 	.word	0x08017423
 80172dc:	08016d3f 	.word	0x08016d3f
 80172e0:	080172e5 	.word	0x080172e5
				if(trak.state == PLAYING) {
 80172e4:	4b71      	ldr	r3, [pc, #452]	; (80174ac <HAL_SPI_TxRxCpltCallback+0x7f4>)
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	f47f ad28 	bne.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					BSP_AUDIO_OUT_Pause();
 80172ee:	f7fe fd87 	bl	8015e00 <BSP_AUDIO_OUT_Pause>
					trak.state = STOPPED;
 80172f2:	4b6e      	ldr	r3, [pc, #440]	; (80174ac <HAL_SPI_TxRxCpltCallback+0x7f4>)
 80172f4:	2201      	movs	r2, #1
 80172f6:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim8); //start blinking
 80172f8:	486d      	ldr	r0, [pc, #436]	; (80174b0 <HAL_SPI_TxRxCpltCallback+0x7f8>)
 80172fa:	f7ef fea3 	bl	8007044 <HAL_TIM_Base_Start_IT>
					GoToPosition(rekordbox.cue_start_position[rekordbox.currentcue]);
 80172fe:	4b6e      	ldr	r3, [pc, #440]	; (80174b8 <HAL_SPI_TxRxCpltCallback+0x800>)
 8017300:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8017304:	f8d2 2b94 	ldr.w	r2, [r2, #2964]	; 0xb94
 8017308:	f602 2202 	addw	r2, r2, #2562	; 0xa02
 801730c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017310:	6858      	ldr	r0, [r3, #4]
 8017312:	f000 fdd5 	bl	8017ec0 <GoToPosition>
					TrackTime();
 8017316:	f000 fd7d 	bl	8017e14 <TrackTime>
 801731a:	e510      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 801731c:	4b6b      	ldr	r3, [pc, #428]	; (80174cc <HAL_SPI_TxRxCpltCallback+0x814>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017322:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017326:	4291      	cmp	r1, r2
 8017328:	f63f ad09 	bhi.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 801732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801732e:	2b00      	cmp	r3, #0
 8017330:	f43f ad05 	beq.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					HAL_TIM_Base_Stop_IT(&htim9);
 8017334:	4865      	ldr	r0, [pc, #404]	; (80174cc <HAL_SPI_TxRxCpltCallback+0x814>)
 8017336:	f7ef fedd 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
					if(display.timemode == 0) {
 801733a:	4b60      	ldr	r3, [pc, #384]	; (80174bc <HAL_SPI_TxRxCpltCallback+0x804>)
 801733c:	781b      	ldrb	r3, [r3, #0]
 801733e:	b923      	cbnz	r3, 801734a <HAL_SPI_TxRxCpltCallback+0x692>
						display.timemode = 1;
 8017340:	4b5e      	ldr	r3, [pc, #376]	; (80174bc <HAL_SPI_TxRxCpltCallback+0x804>)
 8017342:	2201      	movs	r2, #1
 8017344:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 1;
 8017346:	711a      	strb	r2, [r3, #4]
 8017348:	e4f9      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
						display.timemode = 0;
 801734a:	4b5c      	ldr	r3, [pc, #368]	; (80174bc <HAL_SPI_TxRxCpltCallback+0x804>)
 801734c:	2200      	movs	r2, #0
 801734e:	701a      	strb	r2, [r3, #0]
						display.trackbarmode = 0;
 8017350:	711a      	strb	r2, [r3, #4]
 8017352:	e4f4      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 8017354:	4b5d      	ldr	r3, [pc, #372]	; (80174cc <HAL_SPI_TxRxCpltCallback+0x814>)
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801735a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801735e:	4291      	cmp	r1, r2
 8017360:	f63f aced 	bhi.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 8017364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017366:	2b00      	cmp	r3, #0
 8017368:	f43f ace9 	beq.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					HAL_TIM_Base_Stop_IT(&htim9);
 801736c:	4857      	ldr	r0, [pc, #348]	; (80174cc <HAL_SPI_TxRxCpltCallback+0x814>)
 801736e:	f7ef fec1 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
					display.pitchmode++;
 8017372:	4a52      	ldr	r2, [pc, #328]	; (80174bc <HAL_SPI_TxRxCpltCallback+0x804>)
 8017374:	7853      	ldrb	r3, [r2, #1]
 8017376:	3301      	adds	r3, #1
 8017378:	b2db      	uxtb	r3, r3
 801737a:	7053      	strb	r3, [r2, #1]
					if(display.pitchmode > 3) display.pitchmode = 0;
 801737c:	2b03      	cmp	r3, #3
 801737e:	d902      	bls.n	8017386 <HAL_SPI_TxRxCpltCallback+0x6ce>
 8017380:	4613      	mov	r3, r2
 8017382:	2200      	movs	r2, #0
 8017384:	705a      	strb	r2, [r3, #1]
					if(display.pitchmode == 0) scale_pitch = 1; //wide
 8017386:	4b4d      	ldr	r3, [pc, #308]	; (80174bc <HAL_SPI_TxRxCpltCallback+0x804>)
 8017388:	785b      	ldrb	r3, [r3, #1]
 801738a:	bb7b      	cbnz	r3, 80173ec <HAL_SPI_TxRxCpltCallback+0x734>
 801738c:	4b50      	ldr	r3, [pc, #320]	; (80174d0 <HAL_SPI_TxRxCpltCallback+0x818>)
 801738e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017392:	601a      	str	r2, [r3, #0]
					trak.percent = ((float)trak.pitch - 16384) / 16384 * scale_pitch;
 8017394:	4b45      	ldr	r3, [pc, #276]	; (80174ac <HAL_SPI_TxRxCpltCallback+0x7f4>)
 8017396:	885a      	ldrh	r2, [r3, #2]
 8017398:	ee07 2a90 	vmov	s15, r2
 801739c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80173a0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80174d4 <HAL_SPI_TxRxCpltCallback+0x81c>
 80173a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173a8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80174d8 <HAL_SPI_TxRxCpltCallback+0x820>
 80173ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80173b0:	4a47      	ldr	r2, [pc, #284]	; (80174d0 <HAL_SPI_TxRxCpltCallback+0x818>)
 80173b2:	ed92 7a00 	vldr	s14, [r2]
 80173b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80173ba:	edc3 7a01 	vstr	s15, [r3, #4]
					New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 80173be:	891b      	ldrh	r3, [r3, #8]
 80173c0:	085b      	lsrs	r3, r3, #1
 80173c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80173c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80173ca:	ee07 3a10 	vmov	s14, r3
 80173ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80173d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80173da:	4b40      	ldr	r3, [pc, #256]	; (80174dc <HAL_SPI_TxRxCpltCallback+0x824>)
 80173dc:	edc3 7a00 	vstr	s15, [r3]
					BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 80173e0:	6819      	ldr	r1, [r3, #0]
 80173e2:	2200      	movs	r2, #0
 80173e4:	483e      	ldr	r0, [pc, #248]	; (80174e0 <HAL_SPI_TxRxCpltCallback+0x828>)
 80173e6:	f7fe fdd9 	bl	8015f9c <BSP_AUDIO_OUT_ClockConfig>
 80173ea:	e4a8      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					else if(display.pitchmode == 1) scale_pitch = 0.16; //16%
 80173ec:	2b01      	cmp	r3, #1
 80173ee:	d007      	beq.n	8017400 <HAL_SPI_TxRxCpltCallback+0x748>
					else if(display.pitchmode == 2) scale_pitch = 0.1; //10%
 80173f0:	2b02      	cmp	r3, #2
 80173f2:	d009      	beq.n	8017408 <HAL_SPI_TxRxCpltCallback+0x750>
					else if(display.pitchmode == 3) scale_pitch = 0.06; //6%
 80173f4:	2b03      	cmp	r3, #3
 80173f6:	d1cd      	bne.n	8017394 <HAL_SPI_TxRxCpltCallback+0x6dc>
 80173f8:	4b35      	ldr	r3, [pc, #212]	; (80174d0 <HAL_SPI_TxRxCpltCallback+0x818>)
 80173fa:	4a3a      	ldr	r2, [pc, #232]	; (80174e4 <HAL_SPI_TxRxCpltCallback+0x82c>)
 80173fc:	601a      	str	r2, [r3, #0]
 80173fe:	e7c9      	b.n	8017394 <HAL_SPI_TxRxCpltCallback+0x6dc>
					else if(display.pitchmode == 1) scale_pitch = 0.16; //16%
 8017400:	4b33      	ldr	r3, [pc, #204]	; (80174d0 <HAL_SPI_TxRxCpltCallback+0x818>)
 8017402:	4a39      	ldr	r2, [pc, #228]	; (80174e8 <HAL_SPI_TxRxCpltCallback+0x830>)
 8017404:	601a      	str	r2, [r3, #0]
 8017406:	e7c5      	b.n	8017394 <HAL_SPI_TxRxCpltCallback+0x6dc>
					else if(display.pitchmode == 2) scale_pitch = 0.1; //10%
 8017408:	4b31      	ldr	r3, [pc, #196]	; (80174d0 <HAL_SPI_TxRxCpltCallback+0x818>)
 801740a:	4a38      	ldr	r2, [pc, #224]	; (80174ec <HAL_SPI_TxRxCpltCallback+0x834>)
 801740c:	601a      	str	r2, [r3, #0]
 801740e:	e7c1      	b.n	8017394 <HAL_SPI_TxRxCpltCallback+0x6dc>
				if((__HAL_TIM_GET_COUNTER(&htim9) < 65535)
 8017410:	4b2e      	ldr	r3, [pc, #184]	; (80174cc <HAL_SPI_TxRxCpltCallback+0x814>)
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017416:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801741a:	4291      	cmp	r1, r2
 801741c:	d801      	bhi.n	8017422 <HAL_SPI_TxRxCpltCallback+0x76a>
						&& (__HAL_TIM_GET_COUNTER(&htim9) > 0)) {
 801741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017420:	b91b      	cbnz	r3, 801742a <HAL_SPI_TxRxCpltCallback+0x772>
				button_flag &= (0 << 2);
 8017422:	4b33      	ldr	r3, [pc, #204]	; (80174f0 <HAL_SPI_TxRxCpltCallback+0x838>)
 8017424:	2200      	movs	r2, #0
 8017426:	801a      	strh	r2, [r3, #0]
				break;
 8017428:	e489      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					HAL_TIM_Base_Stop_IT(&htim9);
 801742a:	4828      	ldr	r0, [pc, #160]	; (80174cc <HAL_SPI_TxRxCpltCallback+0x814>)
 801742c:	f7ef fe62 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
					if(display.loop == 1) display.loop = 0;
 8017430:	4b22      	ldr	r3, [pc, #136]	; (80174bc <HAL_SPI_TxRxCpltCallback+0x804>)
 8017432:	7c1b      	ldrb	r3, [r3, #16]
 8017434:	2b01      	cmp	r3, #1
 8017436:	d1f4      	bne.n	8017422 <HAL_SPI_TxRxCpltCallback+0x76a>
 8017438:	4b20      	ldr	r3, [pc, #128]	; (80174bc <HAL_SPI_TxRxCpltCallback+0x804>)
 801743a:	2200      	movs	r2, #0
 801743c:	741a      	strb	r2, [r3, #16]
 801743e:	e7f0      	b.n	8017422 <HAL_SPI_TxRxCpltCallback+0x76a>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8017440:	2028      	movs	r0, #40	; 0x28
 8017442:	f7e9 ff93 	bl	800136c <HAL_NVIC_DisableIRQ>
			__HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8017446:	482b      	ldr	r0, [pc, #172]	; (80174f4 <HAL_SPI_TxRxCpltCallback+0x83c>)
 8017448:	6803      	ldr	r3, [r0, #0]
 801744a:	f06f 0201 	mvn.w	r2, #1
 801744e:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8017450:	2200      	movs	r2, #0
 8017452:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim6);
 8017454:	f7ef fdf6 	bl	8007044 <HAL_TIM_Base_Start_IT>
			if(spi_rx[2] == 0x24) {
 8017458:	4b1b      	ldr	r3, [pc, #108]	; (80174c8 <HAL_SPI_TxRxCpltCallback+0x810>)
 801745a:	789b      	ldrb	r3, [r3, #2]
 801745c:	2b24      	cmp	r3, #36	; 0x24
 801745e:	f47f ac6e 	bne.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
				if(spi_rx[3] == 0x01) {
 8017462:	4b19      	ldr	r3, [pc, #100]	; (80174c8 <HAL_SPI_TxRxCpltCallback+0x810>)
 8017464:	78db      	ldrb	r3, [r3, #3]
 8017466:	2b01      	cmp	r3, #1
 8017468:	d011      	beq.n	801748e <HAL_SPI_TxRxCpltCallback+0x7d6>
				else if(spi_rx[3] == 0x7F) {
 801746a:	2b7f      	cmp	r3, #127	; 0x7f
 801746c:	f47f ac67 	bne.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					if(menu_mode == 1) {
 8017470:	4b21      	ldr	r3, [pc, #132]	; (80174f8 <HAL_SPI_TxRxCpltCallback+0x840>)
 8017472:	f993 3000 	ldrsb.w	r3, [r3]
 8017476:	2b01      	cmp	r3, #1
 8017478:	d074      	beq.n	8017564 <HAL_SPI_TxRxCpltCallback+0x8ac>
						if(trak.state == PLAYING) {
 801747a:	4b0c      	ldr	r3, [pc, #48]	; (80174ac <HAL_SPI_TxRxCpltCallback+0x7f4>)
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	f040 80a1 	bne.w	80175c6 <HAL_SPI_TxRxCpltCallback+0x90e>
							pulses--;
 8017484:	4a1d      	ldr	r2, [pc, #116]	; (80174fc <HAL_SPI_TxRxCpltCallback+0x844>)
 8017486:	6813      	ldr	r3, [r2, #0]
 8017488:	3b01      	subs	r3, #1
 801748a:	6013      	str	r3, [r2, #0]
 801748c:	e457      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
					if(menu_mode == 1) {
 801748e:	4b1a      	ldr	r3, [pc, #104]	; (80174f8 <HAL_SPI_TxRxCpltCallback+0x840>)
 8017490:	f993 3000 	ldrsb.w	r3, [r3]
 8017494:	2b01      	cmp	r3, #1
 8017496:	d033      	beq.n	8017500 <HAL_SPI_TxRxCpltCallback+0x848>
						if(trak.state == PLAYING) {
 8017498:	4b04      	ldr	r3, [pc, #16]	; (80174ac <HAL_SPI_TxRxCpltCallback+0x7f4>)
 801749a:	781b      	ldrb	r3, [r3, #0]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d155      	bne.n	801754c <HAL_SPI_TxRxCpltCallback+0x894>
							pulses++;
 80174a0:	4a16      	ldr	r2, [pc, #88]	; (80174fc <HAL_SPI_TxRxCpltCallback+0x844>)
 80174a2:	6813      	ldr	r3, [r2, #0]
 80174a4:	3301      	adds	r3, #1
 80174a6:	6013      	str	r3, [r2, #0]
 80174a8:	e449      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
 80174aa:	bf00      	nop
 80174ac:	2000eba4 	.word	0x2000eba4
 80174b0:	2001756c 	.word	0x2001756c
 80174b4:	20000058 	.word	0x20000058
 80174b8:	20014618 	.word	0x20014618
 80174bc:	200005e8 	.word	0x200005e8
 80174c0:	2000e3cc 	.word	0x2000e3cc
 80174c4:	20016618 	.word	0x20016618
 80174c8:	2000eb9c 	.word	0x2000eb9c
 80174cc:	200175ac 	.word	0x200175ac
 80174d0:	200000a4 	.word	0x200000a4
 80174d4:	46800000 	.word	0x46800000
 80174d8:	38800000 	.word	0x38800000
 80174dc:	20000098 	.word	0x20000098
 80174e0:	20017220 	.word	0x20017220
 80174e4:	3d75c28f 	.word	0x3d75c28f
 80174e8:	3e23d70a 	.word	0x3e23d70a
 80174ec:	3dcccccd 	.word	0x3dcccccd
 80174f0:	2001744a 	.word	0x2001744a
 80174f4:	200174ec 	.word	0x200174ec
 80174f8:	20000604 	.word	0x20000604
 80174fc:	20017458 	.word	0x20017458
						String_number++;
 8017500:	4b56      	ldr	r3, [pc, #344]	; (801765c <HAL_SPI_TxRxCpltCallback+0x9a4>)
 8017502:	681a      	ldr	r2, [r3, #0]
 8017504:	3201      	adds	r2, #1
 8017506:	601a      	str	r2, [r3, #0]
						Mark_number = String_number;
 8017508:	4b55      	ldr	r3, [pc, #340]	; (8017660 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 801750a:	601a      	str	r2, [r3, #0]
						if(Total_tracks < 7) {
 801750c:	4b55      	ldr	r3, [pc, #340]	; (8017664 <HAL_SPI_TxRxCpltCallback+0x9ac>)
 801750e:	881b      	ldrh	r3, [r3, #0]
 8017510:	2b06      	cmp	r3, #6
 8017512:	d808      	bhi.n	8017526 <HAL_SPI_TxRxCpltCallback+0x86e>
							if(String_number + 1 > Total_tracks) {
 8017514:	429a      	cmp	r2, r3
 8017516:	f6ff ac12 	blt.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
								String_number = 0;
 801751a:	2300      	movs	r3, #0
 801751c:	4a4f      	ldr	r2, [pc, #316]	; (801765c <HAL_SPI_TxRxCpltCallback+0x9a4>)
 801751e:	6013      	str	r3, [r2, #0]
								Mark_number = 0;
 8017520:	4a4f      	ldr	r2, [pc, #316]	; (8017660 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 8017522:	6013      	str	r3, [r2, #0]
 8017524:	e40b      	b.n	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
							if(String_number > 6) {
 8017526:	2a06      	cmp	r2, #6
 8017528:	f77f ac09 	ble.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
								String_number = 0;
 801752c:	2200      	movs	r2, #0
 801752e:	494b      	ldr	r1, [pc, #300]	; (801765c <HAL_SPI_TxRxCpltCallback+0x9a4>)
 8017530:	600a      	str	r2, [r1, #0]
								Mark_number = 0;
 8017532:	494b      	ldr	r1, [pc, #300]	; (8017660 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 8017534:	600a      	str	r2, [r1, #0]
								str_increment += 7;
 8017536:	494c      	ldr	r1, [pc, #304]	; (8017668 <HAL_SPI_TxRxCpltCallback+0x9b0>)
 8017538:	680a      	ldr	r2, [r1, #0]
 801753a:	3207      	adds	r2, #7
 801753c:	600a      	str	r2, [r1, #0]
								if(str_increment >= Total_tracks - 7)
 801753e:	3b07      	subs	r3, #7
 8017540:	429a      	cmp	r2, r3
 8017542:	f6ff abfc 	blt.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
									str_increment = Total_tracks - 7;
 8017546:	600b      	str	r3, [r1, #0]
 8017548:	f7ff bbf9 	b.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
						else if(trak.state == SETCUE) {
 801754c:	2b02      	cmp	r3, #2
 801754e:	f47f abf6 	bne.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
							GoToPosition(file_pos_wide + 2);
 8017552:	4b46      	ldr	r3, [pc, #280]	; (801766c <HAL_SPI_TxRxCpltCallback+0x9b4>)
 8017554:	6818      	ldr	r0, [r3, #0]
 8017556:	3002      	adds	r0, #2
 8017558:	f000 fcb2 	bl	8017ec0 <GoToPosition>
							GetTrackTime();
 801755c:	f000 fd52 	bl	8018004 <GetTrackTime>
 8017560:	f7ff bbed 	b.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
						String_number--;
 8017564:	4a3d      	ldr	r2, [pc, #244]	; (801765c <HAL_SPI_TxRxCpltCallback+0x9a4>)
 8017566:	6813      	ldr	r3, [r2, #0]
 8017568:	3b01      	subs	r3, #1
 801756a:	6013      	str	r3, [r2, #0]
						Mark_number = String_number;
 801756c:	4a3c      	ldr	r2, [pc, #240]	; (8017660 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 801756e:	6013      	str	r3, [r2, #0]
						if(String_number < 0) {
 8017570:	2b00      	cmp	r3, #0
 8017572:	f6bf abe4 	bge.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
							if(Total_tracks > 7) {
 8017576:	4b3b      	ldr	r3, [pc, #236]	; (8017664 <HAL_SPI_TxRxCpltCallback+0x9ac>)
 8017578:	881a      	ldrh	r2, [r3, #0]
 801757a:	2a07      	cmp	r2, #7
 801757c:	d91c      	bls.n	80175b8 <HAL_SPI_TxRxCpltCallback+0x900>
								String_number = 6;
 801757e:	2306      	movs	r3, #6
 8017580:	4936      	ldr	r1, [pc, #216]	; (801765c <HAL_SPI_TxRxCpltCallback+0x9a4>)
 8017582:	600b      	str	r3, [r1, #0]
								Mark_number = 6;
 8017584:	4936      	ldr	r1, [pc, #216]	; (8017660 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 8017586:	600b      	str	r3, [r1, #0]
								str_increment -= 7;
 8017588:	4937      	ldr	r1, [pc, #220]	; (8017668 <HAL_SPI_TxRxCpltCallback+0x9b0>)
 801758a:	680b      	ldr	r3, [r1, #0]
 801758c:	3b07      	subs	r3, #7
 801758e:	600b      	str	r3, [r1, #0]
								if(str_increment == Total_tracks - 7)
 8017590:	3a07      	subs	r2, #7
 8017592:	4293      	cmp	r3, r2
 8017594:	d009      	beq.n	80175aa <HAL_SPI_TxRxCpltCallback+0x8f2>
								if(str_increment <= 0)
 8017596:	4b34      	ldr	r3, [pc, #208]	; (8017668 <HAL_SPI_TxRxCpltCallback+0x9b0>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	2b00      	cmp	r3, #0
 801759c:	f73f abcf 	bgt.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
									str_increment = 0;
 80175a0:	4b31      	ldr	r3, [pc, #196]	; (8017668 <HAL_SPI_TxRxCpltCallback+0x9b0>)
 80175a2:	2200      	movs	r2, #0
 80175a4:	601a      	str	r2, [r3, #0]
 80175a6:	f7ff bbca 	b.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
									str_increment = (str_increment / 7) * 7;
 80175aa:	2207      	movs	r2, #7
 80175ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80175b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80175b4:	600b      	str	r3, [r1, #0]
 80175b6:	e7ee      	b.n	8017596 <HAL_SPI_TxRxCpltCallback+0x8de>
								String_number = Total_tracks - 1;
 80175b8:	3a01      	subs	r2, #1
 80175ba:	4b28      	ldr	r3, [pc, #160]	; (801765c <HAL_SPI_TxRxCpltCallback+0x9a4>)
 80175bc:	601a      	str	r2, [r3, #0]
								Mark_number = Total_tracks - 1;;
 80175be:	4b28      	ldr	r3, [pc, #160]	; (8017660 <HAL_SPI_TxRxCpltCallback+0x9a8>)
 80175c0:	601a      	str	r2, [r3, #0]
 80175c2:	f7ff bbbc 	b.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
						else if(trak.state == SETCUE) {
 80175c6:	2b02      	cmp	r3, #2
 80175c8:	f47f abb9 	bne.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
							GoToPosition(file_pos_wide - 2);
 80175cc:	4b27      	ldr	r3, [pc, #156]	; (801766c <HAL_SPI_TxRxCpltCallback+0x9b4>)
 80175ce:	6818      	ldr	r0, [r3, #0]
 80175d0:	3802      	subs	r0, #2
 80175d2:	f000 fc75 	bl	8017ec0 <GoToPosition>
							GetTrackTime();
 80175d6:	f000 fd15 	bl	8018004 <GetTrackTime>
 80175da:	f7ff bbb0 	b.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			if(delta < 0) delta = pitch_rx - trak.pitch;
 80175de:	1ae2      	subs	r2, r4, r3
 80175e0:	f7ff bba6 	b.w	8016d30 <HAL_SPI_TxRxCpltCallback+0x78>
				trak.percent = ((float)pitch_rx - 16383) / 16384 * scale_pitch;
 80175e4:	ee07 4a90 	vmov	s15, r4
 80175e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80175ec:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8017670 <HAL_SPI_TxRxCpltCallback+0x9b8>
 80175f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80175f4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8017674 <HAL_SPI_TxRxCpltCallback+0x9bc>
 80175f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80175fc:	4b1e      	ldr	r3, [pc, #120]	; (8017678 <HAL_SPI_TxRxCpltCallback+0x9c0>)
 80175fe:	ed93 7a00 	vldr	s14, [r3]
 8017602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017606:	4d1d      	ldr	r5, [pc, #116]	; (801767c <HAL_SPI_TxRxCpltCallback+0x9c4>)
 8017608:	edc5 7a01 	vstr	s15, [r5, #4]
				New_frequency = (uint32_t)((trak.bitrate / 2)*(1 + trak.percent));
 801760c:	892b      	ldrh	r3, [r5, #8]
 801760e:	085b      	lsrs	r3, r3, #1
 8017610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017618:	ee07 3a10 	vmov	s14, r3
 801761c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017628:	4b15      	ldr	r3, [pc, #84]	; (8017680 <HAL_SPI_TxRxCpltCallback+0x9c8>)
 801762a:	edc3 7a00 	vstr	s15, [r3]
				BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, New_frequency, NULL);
 801762e:	6819      	ldr	r1, [r3, #0]
 8017630:	2200      	movs	r2, #0
 8017632:	4814      	ldr	r0, [pc, #80]	; (8017684 <HAL_SPI_TxRxCpltCallback+0x9cc>)
 8017634:	f7fe fcb2 	bl	8015f9c <BSP_AUDIO_OUT_ClockConfig>
				trak.pitch = pitch_rx;
 8017638:	806c      	strh	r4, [r5, #2]
 801763a:	f7ff bb80 	b.w	8016d3e <HAL_SPI_TxRxCpltCallback+0x86>
			}
			break;
		}
		default: break;
		}
	for(int i = 0; i < 4; i++) spi_rx[i] = 0;
 801763e:	4a12      	ldr	r2, [pc, #72]	; (8017688 <HAL_SPI_TxRxCpltCallback+0x9d0>)
 8017640:	2100      	movs	r1, #0
 8017642:	54d1      	strb	r1, [r2, r3]
 8017644:	3301      	adds	r3, #1
 8017646:	2b03      	cmp	r3, #3
 8017648:	ddf9      	ble.n	801763e <HAL_SPI_TxRxCpltCallback+0x986>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi_tx, spi_rx, 4);
 801764a:	2304      	movs	r3, #4
 801764c:	4a0e      	ldr	r2, [pc, #56]	; (8017688 <HAL_SPI_TxRxCpltCallback+0x9d0>)
 801764e:	490f      	ldr	r1, [pc, #60]	; (801768c <HAL_SPI_TxRxCpltCallback+0x9d4>)
 8017650:	480f      	ldr	r0, [pc, #60]	; (8017690 <HAL_SPI_TxRxCpltCallback+0x9d8>)
 8017652:	f7ef fad1 	bl	8006bf8 <HAL_SPI_TransmitReceive_IT>
}
 8017656:	ecbd 8b02 	vpop	{d8}
 801765a:	bd38      	pop	{r3, r4, r5, pc}
 801765c:	2000009c 	.word	0x2000009c
 8017660:	20000094 	.word	0x20000094
 8017664:	20001c30 	.word	0x20001c30
 8017668:	2001745c 	.word	0x2001745c
 801766c:	2000e3cc 	.word	0x2000e3cc
 8017670:	467ffc00 	.word	0x467ffc00
 8017674:	38800000 	.word	0x38800000
 8017678:	200000a4 	.word	0x200000a4
 801767c:	2000eba4 	.word	0x2000eba4
 8017680:	20000098 	.word	0x20000098
 8017684:	20017220 	.word	0x20017220
 8017688:	2000eb9c 	.word	0x2000eb9c
 801768c:	20000058 	.word	0x20000058
 8017690:	20017328 	.word	0x20017328

08017694 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8017694:	b508      	push	{r3, lr}
 8017696:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8017698:	4a0b      	ldr	r2, [pc, #44]	; (80176c8 <_sbrk+0x34>)
 801769a:	6812      	ldr	r2, [r2, #0]
 801769c:	b142      	cbz	r2, 80176b0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 801769e:	4a0a      	ldr	r2, [pc, #40]	; (80176c8 <_sbrk+0x34>)
 80176a0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80176a2:	4403      	add	r3, r0
 80176a4:	466a      	mov	r2, sp
 80176a6:	4293      	cmp	r3, r2
 80176a8:	d806      	bhi.n	80176b8 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80176aa:	4a07      	ldr	r2, [pc, #28]	; (80176c8 <_sbrk+0x34>)
 80176ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80176ae:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80176b0:	4a05      	ldr	r2, [pc, #20]	; (80176c8 <_sbrk+0x34>)
 80176b2:	4906      	ldr	r1, [pc, #24]	; (80176cc <_sbrk+0x38>)
 80176b4:	6011      	str	r1, [r2, #0]
 80176b6:	e7f2      	b.n	801769e <_sbrk+0xa>
		errno = ENOMEM;
 80176b8:	f001 fc2a 	bl	8018f10 <__errno>
 80176bc:	230c      	movs	r3, #12
 80176be:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80176c0:	f04f 30ff 	mov.w	r0, #4294967295
 80176c4:	e7f3      	b.n	80176ae <_sbrk+0x1a>
 80176c6:	bf00      	nop
 80176c8:	20017468 	.word	0x20017468
 80176cc:	20017cc8 	.word	0x20017cc8

080176d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80176d0:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80176d2:	4a0f      	ldr	r2, [pc, #60]	; (8017710 <SystemInit+0x40>)
 80176d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80176d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80176dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80176e0:	4b0c      	ldr	r3, [pc, #48]	; (8017714 <SystemInit+0x44>)
 80176e2:	6819      	ldr	r1, [r3, #0]
 80176e4:	f041 0101 	orr.w	r1, r1, #1
 80176e8:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80176ea:	2000      	movs	r0, #0
 80176ec:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80176ee:	681c      	ldr	r4, [r3, #0]
 80176f0:	4909      	ldr	r1, [pc, #36]	; (8017718 <SystemInit+0x48>)
 80176f2:	4021      	ands	r1, r4
 80176f4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80176f6:	4909      	ldr	r1, [pc, #36]	; (801771c <SystemInit+0x4c>)
 80176f8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80176fa:	6819      	ldr	r1, [r3, #0]
 80176fc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8017700:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8017702:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017704:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8017708:	6093      	str	r3, [r2, #8]
#endif
}
 801770a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801770e:	4770      	bx	lr
 8017710:	e000ed00 	.word	0xe000ed00
 8017714:	40023800 	.word	0x40023800
 8017718:	fef6ffff 	.word	0xfef6ffff
 801771c:	24003010 	.word	0x24003010

08017720 <MX_TIM4_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8017720:	b500      	push	{lr}
 8017722:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017724:	2300      	movs	r3, #0
 8017726:	9304      	str	r3, [sp, #16]
 8017728:	9305      	str	r3, [sp, #20]
 801772a:	9306      	str	r3, [sp, #24]
 801772c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801772e:	9301      	str	r3, [sp, #4]
 8017730:	9302      	str	r3, [sp, #8]
 8017732:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8017734:	4815      	ldr	r0, [pc, #84]	; (801778c <MX_TIM4_Init+0x6c>)
 8017736:	4a16      	ldr	r2, [pc, #88]	; (8017790 <MX_TIM4_Init+0x70>)
 8017738:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9999;
 801773a:	f242 720f 	movw	r2, #9999	; 0x270f
 801773e:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017740:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 399;
 8017742:	f240 128f 	movw	r2, #399	; 0x18f
 8017746:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017748:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801774a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801774c:	f7ef fe84 	bl	8007458 <HAL_TIM_Base_Init>
 8017750:	b990      	cbnz	r0, 8017778 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017756:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8017758:	a904      	add	r1, sp, #16
 801775a:	480c      	ldr	r0, [pc, #48]	; (801778c <MX_TIM4_Init+0x6c>)
 801775c:	f7ef ff12 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8017760:	b968      	cbnz	r0, 801777e <MX_TIM4_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017762:	2300      	movs	r3, #0
 8017764:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017766:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8017768:	a901      	add	r1, sp, #4
 801776a:	4808      	ldr	r0, [pc, #32]	; (801778c <MX_TIM4_Init+0x6c>)
 801776c:	f7f0 f948 	bl	8007a00 <HAL_TIMEx_MasterConfigSynchronization>
 8017770:	b940      	cbnz	r0, 8017784 <MX_TIM4_Init+0x64>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8017772:	b009      	add	sp, #36	; 0x24
 8017774:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8017778:	f7fc fc88 	bl	801408c <Error_Handler>
 801777c:	e7e9      	b.n	8017752 <MX_TIM4_Init+0x32>
    Error_Handler();
 801777e:	f7fc fc85 	bl	801408c <Error_Handler>
 8017782:	e7ee      	b.n	8017762 <MX_TIM4_Init+0x42>
    Error_Handler();
 8017784:	f7fc fc82 	bl	801408c <Error_Handler>
}
 8017788:	e7f3      	b.n	8017772 <MX_TIM4_Init+0x52>
 801778a:	bf00      	nop
 801778c:	2001746c 	.word	0x2001746c
 8017790:	40000800 	.word	0x40000800

08017794 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8017794:	b500      	push	{lr}
 8017796:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017798:	2300      	movs	r3, #0
 801779a:	9304      	str	r3, [sp, #16]
 801779c:	9305      	str	r3, [sp, #20]
 801779e:	9306      	str	r3, [sp, #24]
 80177a0:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80177a2:	9301      	str	r3, [sp, #4]
 80177a4:	9302      	str	r3, [sp, #8]
 80177a6:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80177a8:	4815      	ldr	r0, [pc, #84]	; (8017800 <MX_TIM5_Init+0x6c>)
 80177aa:	4a16      	ldr	r2, [pc, #88]	; (8017804 <MX_TIM5_Init+0x70>)
 80177ac:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 19199;
 80177ae:	f644 22ff 	movw	r2, #19199	; 0x4aff
 80177b2:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80177b4:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 1999;
 80177b6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80177ba:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80177bc:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80177be:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80177c0:	f7ef fe4a 	bl	8007458 <HAL_TIM_Base_Init>
 80177c4:	b990      	cbnz	r0, 80177ec <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80177c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80177ca:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80177cc:	a904      	add	r1, sp, #16
 80177ce:	480c      	ldr	r0, [pc, #48]	; (8017800 <MX_TIM5_Init+0x6c>)
 80177d0:	f7ef fed8 	bl	8007584 <HAL_TIM_ConfigClockSource>
 80177d4:	b968      	cbnz	r0, 80177f2 <MX_TIM5_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80177d6:	2300      	movs	r3, #0
 80177d8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80177da:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80177dc:	a901      	add	r1, sp, #4
 80177de:	4808      	ldr	r0, [pc, #32]	; (8017800 <MX_TIM5_Init+0x6c>)
 80177e0:	f7f0 f90e 	bl	8007a00 <HAL_TIMEx_MasterConfigSynchronization>
 80177e4:	b940      	cbnz	r0, 80177f8 <MX_TIM5_Init+0x64>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80177e6:	b009      	add	sp, #36	; 0x24
 80177e8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80177ec:	f7fc fc4e 	bl	801408c <Error_Handler>
 80177f0:	e7e9      	b.n	80177c6 <MX_TIM5_Init+0x32>
    Error_Handler();
 80177f2:	f7fc fc4b 	bl	801408c <Error_Handler>
 80177f6:	e7ee      	b.n	80177d6 <MX_TIM5_Init+0x42>
    Error_Handler();
 80177f8:	f7fc fc48 	bl	801408c <Error_Handler>
}
 80177fc:	e7f3      	b.n	80177e6 <MX_TIM5_Init+0x52>
 80177fe:	bf00      	nop
 8017800:	200174ac 	.word	0x200174ac
 8017804:	40000c00 	.word	0x40000c00

08017808 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8017808:	b500      	push	{lr}
 801780a:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801780c:	2300      	movs	r3, #0
 801780e:	9301      	str	r3, [sp, #4]
 8017810:	9302      	str	r3, [sp, #8]
 8017812:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8017814:	480f      	ldr	r0, [pc, #60]	; (8017854 <MX_TIM6_Init+0x4c>)
 8017816:	4a10      	ldr	r2, [pc, #64]	; (8017858 <MX_TIM6_Init+0x50>)
 8017818:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 9999;
 801781a:	f242 720f 	movw	r2, #9999	; 0x270f
 801781e:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017820:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 999;
 8017822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017826:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017828:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801782a:	f7ef fe15 	bl	8007458 <HAL_TIM_Base_Init>
 801782e:	b950      	cbnz	r0, 8017846 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017830:	2300      	movs	r3, #0
 8017832:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017834:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8017836:	a901      	add	r1, sp, #4
 8017838:	4806      	ldr	r0, [pc, #24]	; (8017854 <MX_TIM6_Init+0x4c>)
 801783a:	f7f0 f8e1 	bl	8007a00 <HAL_TIMEx_MasterConfigSynchronization>
 801783e:	b928      	cbnz	r0, 801784c <MX_TIM6_Init+0x44>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8017840:	b005      	add	sp, #20
 8017842:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8017846:	f7fc fc21 	bl	801408c <Error_Handler>
 801784a:	e7f1      	b.n	8017830 <MX_TIM6_Init+0x28>
    Error_Handler();
 801784c:	f7fc fc1e 	bl	801408c <Error_Handler>
}
 8017850:	e7f6      	b.n	8017840 <MX_TIM6_Init+0x38>
 8017852:	bf00      	nop
 8017854:	200174ec 	.word	0x200174ec
 8017858:	40001000 	.word	0x40001000

0801785c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 801785c:	b500      	push	{lr}
 801785e:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017860:	2300      	movs	r3, #0
 8017862:	9301      	str	r3, [sp, #4]
 8017864:	9302      	str	r3, [sp, #8]
 8017866:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8017868:	480f      	ldr	r0, [pc, #60]	; (80178a8 <MX_TIM7_Init+0x4c>)
 801786a:	4a10      	ldr	r2, [pc, #64]	; (80178ac <MX_TIM7_Init+0x50>)
 801786c:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 9999;
 801786e:	f242 720f 	movw	r2, #9999	; 0x270f
 8017872:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017874:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 4999;
 8017876:	f241 3287 	movw	r2, #4999	; 0x1387
 801787a:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801787c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801787e:	f7ef fdeb 	bl	8007458 <HAL_TIM_Base_Init>
 8017882:	b950      	cbnz	r0, 801789a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017884:	2300      	movs	r3, #0
 8017886:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017888:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801788a:	a901      	add	r1, sp, #4
 801788c:	4806      	ldr	r0, [pc, #24]	; (80178a8 <MX_TIM7_Init+0x4c>)
 801788e:	f7f0 f8b7 	bl	8007a00 <HAL_TIMEx_MasterConfigSynchronization>
 8017892:	b928      	cbnz	r0, 80178a0 <MX_TIM7_Init+0x44>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8017894:	b005      	add	sp, #20
 8017896:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801789a:	f7fc fbf7 	bl	801408c <Error_Handler>
 801789e:	e7f1      	b.n	8017884 <MX_TIM7_Init+0x28>
    Error_Handler();
 80178a0:	f7fc fbf4 	bl	801408c <Error_Handler>
}
 80178a4:	e7f6      	b.n	8017894 <MX_TIM7_Init+0x38>
 80178a6:	bf00      	nop
 80178a8:	2001752c 	.word	0x2001752c
 80178ac:	40001400 	.word	0x40001400

080178b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80178b0:	b500      	push	{lr}
 80178b2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80178b4:	2300      	movs	r3, #0
 80178b6:	9304      	str	r3, [sp, #16]
 80178b8:	9305      	str	r3, [sp, #20]
 80178ba:	9306      	str	r3, [sp, #24]
 80178bc:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80178be:	9301      	str	r3, [sp, #4]
 80178c0:	9302      	str	r3, [sp, #8]
 80178c2:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80178c4:	4816      	ldr	r0, [pc, #88]	; (8017920 <MX_TIM8_Init+0x70>)
 80178c6:	4a17      	ldr	r2, [pc, #92]	; (8017924 <MX_TIM8_Init+0x74>)
 80178c8:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 9599;
 80178ca:	f242 527f 	movw	r2, #9599	; 0x257f
 80178ce:	6042      	str	r2, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80178d0:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 9999;
 80178d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80178d6:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80178d8:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80178da:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80178dc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80178de:	f7ef fdbb 	bl	8007458 <HAL_TIM_Base_Init>
 80178e2:	b998      	cbnz	r0, 801790c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80178e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80178e8:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80178ea:	a904      	add	r1, sp, #16
 80178ec:	480c      	ldr	r0, [pc, #48]	; (8017920 <MX_TIM8_Init+0x70>)
 80178ee:	f7ef fe49 	bl	8007584 <HAL_TIM_ConfigClockSource>
 80178f2:	b970      	cbnz	r0, 8017912 <MX_TIM8_Init+0x62>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80178f4:	2300      	movs	r3, #0
 80178f6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80178f8:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80178fa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80178fc:	a901      	add	r1, sp, #4
 80178fe:	4808      	ldr	r0, [pc, #32]	; (8017920 <MX_TIM8_Init+0x70>)
 8017900:	f7f0 f87e 	bl	8007a00 <HAL_TIMEx_MasterConfigSynchronization>
 8017904:	b940      	cbnz	r0, 8017918 <MX_TIM8_Init+0x68>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8017906:	b009      	add	sp, #36	; 0x24
 8017908:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801790c:	f7fc fbbe 	bl	801408c <Error_Handler>
 8017910:	e7e8      	b.n	80178e4 <MX_TIM8_Init+0x34>
    Error_Handler();
 8017912:	f7fc fbbb 	bl	801408c <Error_Handler>
 8017916:	e7ed      	b.n	80178f4 <MX_TIM8_Init+0x44>
    Error_Handler();
 8017918:	f7fc fbb8 	bl	801408c <Error_Handler>
}
 801791c:	e7f3      	b.n	8017906 <MX_TIM8_Init+0x56>
 801791e:	bf00      	nop
 8017920:	2001756c 	.word	0x2001756c
 8017924:	40010400 	.word	0x40010400

08017928 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8017928:	b500      	push	{lr}
 801792a:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801792c:	2300      	movs	r3, #0
 801792e:	9300      	str	r3, [sp, #0]
 8017930:	9301      	str	r3, [sp, #4]
 8017932:	9302      	str	r3, [sp, #8]
 8017934:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8017936:	4810      	ldr	r0, [pc, #64]	; (8017978 <MX_TIM9_Init+0x50>)
 8017938:	4a10      	ldr	r2, [pc, #64]	; (801797c <MX_TIM9_Init+0x54>)
 801793a:	6002      	str	r2, [r0, #0]
  htim9.Init.Prescaler = 9599;
 801793c:	f242 527f 	movw	r2, #9599	; 0x257f
 8017940:	6042      	str	r2, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017942:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 19999;
 8017944:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8017948:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801794a:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801794c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 801794e:	f7ef fd83 	bl	8007458 <HAL_TIM_Base_Init>
 8017952:	b950      	cbnz	r0, 801796a <MX_TIM9_Init+0x42>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017958:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 801795a:	4669      	mov	r1, sp
 801795c:	4806      	ldr	r0, [pc, #24]	; (8017978 <MX_TIM9_Init+0x50>)
 801795e:	f7ef fe11 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8017962:	b928      	cbnz	r0, 8017970 <MX_TIM9_Init+0x48>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8017964:	b005      	add	sp, #20
 8017966:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801796a:	f7fc fb8f 	bl	801408c <Error_Handler>
 801796e:	e7f1      	b.n	8017954 <MX_TIM9_Init+0x2c>
    Error_Handler();
 8017970:	f7fc fb8c 	bl	801408c <Error_Handler>
}
 8017974:	e7f6      	b.n	8017964 <MX_TIM9_Init+0x3c>
 8017976:	bf00      	nop
 8017978:	200175ac 	.word	0x200175ac
 801797c:	40014000 	.word	0x40014000

08017980 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8017980:	b510      	push	{r4, lr}
 8017982:	b086      	sub	sp, #24

  if(tim_baseHandle->Instance==TIM4)
 8017984:	6803      	ldr	r3, [r0, #0]
 8017986:	4a55      	ldr	r2, [pc, #340]	; (8017adc <HAL_TIM_Base_MspInit+0x15c>)
 8017988:	4293      	cmp	r3, r2
 801798a:	d011      	beq.n	80179b0 <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 801798c:	4a54      	ldr	r2, [pc, #336]	; (8017ae0 <HAL_TIM_Base_MspInit+0x160>)
 801798e:	4293      	cmp	r3, r2
 8017990:	d045      	beq.n	8017a1e <HAL_TIM_Base_MspInit+0x9e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 8017992:	4a54      	ldr	r2, [pc, #336]	; (8017ae4 <HAL_TIM_Base_MspInit+0x164>)
 8017994:	4293      	cmp	r3, r2
 8017996:	d055      	beq.n	8017a44 <HAL_TIM_Base_MspInit+0xc4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 8017998:	4a53      	ldr	r2, [pc, #332]	; (8017ae8 <HAL_TIM_Base_MspInit+0x168>)
 801799a:	4293      	cmp	r3, r2
 801799c:	d065      	beq.n	8017a6a <HAL_TIM_Base_MspInit+0xea>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 801799e:	4a53      	ldr	r2, [pc, #332]	; (8017aec <HAL_TIM_Base_MspInit+0x16c>)
 80179a0:	4293      	cmp	r3, r2
 80179a2:	d075      	beq.n	8017a90 <HAL_TIM_Base_MspInit+0x110>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 80179a4:	4a52      	ldr	r2, [pc, #328]	; (8017af0 <HAL_TIM_Base_MspInit+0x170>)
 80179a6:	4293      	cmp	r3, r2
 80179a8:	f000 8085 	beq.w	8017ab6 <HAL_TIM_Base_MspInit+0x136>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80179ac:	b006      	add	sp, #24
 80179ae:	bd10      	pop	{r4, pc}
	  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_IT_UPDATE);
 80179b0:	4b50      	ldr	r3, [pc, #320]	; (8017af4 <HAL_TIM_Base_MspInit+0x174>)
 80179b2:	681c      	ldr	r4, [r3, #0]
 80179b4:	f06f 0301 	mvn.w	r3, #1
 80179b8:	6123      	str	r3, [r4, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_IT_UPDATE);
 80179ba:	4a4f      	ldr	r2, [pc, #316]	; (8017af8 <HAL_TIM_Base_MspInit+0x178>)
 80179bc:	6810      	ldr	r0, [r2, #0]
 80179be:	6103      	str	r3, [r0, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 80179c0:	4a4e      	ldr	r2, [pc, #312]	; (8017afc <HAL_TIM_Base_MspInit+0x17c>)
 80179c2:	6811      	ldr	r1, [r2, #0]
 80179c4:	610b      	str	r3, [r1, #16]
	  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_IT_UPDATE);
 80179c6:	4a4e      	ldr	r2, [pc, #312]	; (8017b00 <HAL_TIM_Base_MspInit+0x180>)
 80179c8:	6812      	ldr	r2, [r2, #0]
 80179ca:	6113      	str	r3, [r2, #16]
	  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80179cc:	68e3      	ldr	r3, [r4, #12]
 80179ce:	f043 0301 	orr.w	r3, r3, #1
 80179d2:	60e3      	str	r3, [r4, #12]
	  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 80179d4:	68c3      	ldr	r3, [r0, #12]
 80179d6:	f043 0301 	orr.w	r3, r3, #1
 80179da:	60c3      	str	r3, [r0, #12]
	  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80179dc:	68cb      	ldr	r3, [r1, #12]
 80179de:	f043 0301 	orr.w	r3, r3, #1
 80179e2:	60cb      	str	r3, [r1, #12]
	  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 80179e4:	68d3      	ldr	r3, [r2, #12]
 80179e6:	f043 0301 	orr.w	r3, r3, #1
 80179ea:	60d3      	str	r3, [r2, #12]
	  __HAL_TIM_ENABLE_IT(&htim9, TIM_IT_UPDATE);
 80179ec:	4b45      	ldr	r3, [pc, #276]	; (8017b04 <HAL_TIM_Base_MspInit+0x184>)
 80179ee:	681a      	ldr	r2, [r3, #0]
 80179f0:	68d3      	ldr	r3, [r2, #12]
 80179f2:	f043 0301 	orr.w	r3, r3, #1
 80179f6:	60d3      	str	r3, [r2, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
 80179f8:	4b43      	ldr	r3, [pc, #268]	; (8017b08 <HAL_TIM_Base_MspInit+0x188>)
 80179fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80179fc:	f042 0204 	orr.w	r2, r2, #4
 8017a00:	641a      	str	r2, [r3, #64]	; 0x40
 8017a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a04:	f003 0304 	and.w	r3, r3, #4
 8017a08:	9300      	str	r3, [sp, #0]
 8017a0a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	2101      	movs	r1, #1
 8017a10:	201e      	movs	r0, #30
 8017a12:	f7e9 fc4f 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8017a16:	201e      	movs	r0, #30
 8017a18:	f7e9 fc90 	bl	800133c <HAL_NVIC_EnableIRQ>
 8017a1c:	e7c6      	b.n	80179ac <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8017a1e:	4b3a      	ldr	r3, [pc, #232]	; (8017b08 <HAL_TIM_Base_MspInit+0x188>)
 8017a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017a22:	f042 0208 	orr.w	r2, r2, #8
 8017a26:	641a      	str	r2, [r3, #64]	; 0x40
 8017a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a2a:	f003 0308 	and.w	r3, r3, #8
 8017a2e:	9301      	str	r3, [sp, #4]
 8017a30:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8017a32:	2200      	movs	r2, #0
 8017a34:	2103      	movs	r1, #3
 8017a36:	2032      	movs	r0, #50	; 0x32
 8017a38:	f7e9 fc3c 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8017a3c:	2032      	movs	r0, #50	; 0x32
 8017a3e:	f7e9 fc7d 	bl	800133c <HAL_NVIC_EnableIRQ>
 8017a42:	e7b3      	b.n	80179ac <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8017a44:	4b30      	ldr	r3, [pc, #192]	; (8017b08 <HAL_TIM_Base_MspInit+0x188>)
 8017a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017a48:	f042 0210 	orr.w	r2, r2, #16
 8017a4c:	641a      	str	r2, [r3, #64]	; 0x40
 8017a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a50:	f003 0310 	and.w	r3, r3, #16
 8017a54:	9302      	str	r3, [sp, #8]
 8017a56:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8017a58:	2200      	movs	r2, #0
 8017a5a:	2101      	movs	r1, #1
 8017a5c:	2036      	movs	r0, #54	; 0x36
 8017a5e:	f7e9 fc29 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017a62:	2036      	movs	r0, #54	; 0x36
 8017a64:	f7e9 fc6a 	bl	800133c <HAL_NVIC_EnableIRQ>
 8017a68:	e7a0      	b.n	80179ac <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8017a6a:	4b27      	ldr	r3, [pc, #156]	; (8017b08 <HAL_TIM_Base_MspInit+0x188>)
 8017a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017a6e:	f042 0220 	orr.w	r2, r2, #32
 8017a72:	641a      	str	r2, [r3, #64]	; 0x40
 8017a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a76:	f003 0320 	and.w	r3, r3, #32
 8017a7a:	9303      	str	r3, [sp, #12]
 8017a7c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8017a7e:	2200      	movs	r2, #0
 8017a80:	2104      	movs	r1, #4
 8017a82:	2037      	movs	r0, #55	; 0x37
 8017a84:	f7e9 fc16 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8017a88:	2037      	movs	r0, #55	; 0x37
 8017a8a:	f7e9 fc57 	bl	800133c <HAL_NVIC_EnableIRQ>
 8017a8e:	e78d      	b.n	80179ac <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8017a90:	4b1d      	ldr	r3, [pc, #116]	; (8017b08 <HAL_TIM_Base_MspInit+0x188>)
 8017a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017a94:	f042 0202 	orr.w	r2, r2, #2
 8017a98:	645a      	str	r2, [r3, #68]	; 0x44
 8017a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a9c:	f003 0302 	and.w	r3, r3, #2
 8017aa0:	9304      	str	r3, [sp, #16]
 8017aa2:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	2101      	movs	r1, #1
 8017aa8:	202c      	movs	r0, #44	; 0x2c
 8017aaa:	f7e9 fc03 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8017aae:	202c      	movs	r0, #44	; 0x2c
 8017ab0:	f7e9 fc44 	bl	800133c <HAL_NVIC_EnableIRQ>
 8017ab4:	e77a      	b.n	80179ac <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8017ab6:	4b14      	ldr	r3, [pc, #80]	; (8017b08 <HAL_TIM_Base_MspInit+0x188>)
 8017ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017aba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8017abe:	645a      	str	r2, [r3, #68]	; 0x44
 8017ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017ac6:	9305      	str	r3, [sp, #20]
 8017ac8:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8017aca:	2200      	movs	r2, #0
 8017acc:	2102      	movs	r1, #2
 8017ace:	2018      	movs	r0, #24
 8017ad0:	f7e9 fbf0 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8017ad4:	2018      	movs	r0, #24
 8017ad6:	f7e9 fc31 	bl	800133c <HAL_NVIC_EnableIRQ>
}
 8017ada:	e767      	b.n	80179ac <HAL_TIM_Base_MspInit+0x2c>
 8017adc:	40000800 	.word	0x40000800
 8017ae0:	40000c00 	.word	0x40000c00
 8017ae4:	40001000 	.word	0x40001000
 8017ae8:	40001400 	.word	0x40001400
 8017aec:	40010400 	.word	0x40010400
 8017af0:	40014000 	.word	0x40014000
 8017af4:	2001746c 	.word	0x2001746c
 8017af8:	200174ac 	.word	0x200174ac
 8017afc:	200174ec 	.word	0x200174ec
 8017b00:	2001752c 	.word	0x2001752c
 8017b04:	200175ac 	.word	0x200175ac
 8017b08:	40023800 	.word	0x40023800

08017b0c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017b0c:	2904      	cmp	r1, #4
 8017b0e:	d00c      	beq.n	8017b2a <USBH_UserProcess+0x1e>
 8017b10:	2905      	cmp	r1, #5
 8017b12:	d002      	beq.n	8017b1a <USBH_UserProcess+0xe>
 8017b14:	2902      	cmp	r1, #2
 8017b16:	d004      	beq.n	8017b22 <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8017b18:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8017b1a:	4b06      	ldr	r3, [pc, #24]	; (8017b34 <USBH_UserProcess+0x28>)
 8017b1c:	2203      	movs	r2, #3
 8017b1e:	701a      	strb	r2, [r3, #0]
  break;
 8017b20:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8017b22:	4b04      	ldr	r3, [pc, #16]	; (8017b34 <USBH_UserProcess+0x28>)
 8017b24:	2202      	movs	r2, #2
 8017b26:	701a      	strb	r2, [r3, #0]
  break;
 8017b28:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8017b2a:	4b02      	ldr	r3, [pc, #8]	; (8017b34 <USBH_UserProcess+0x28>)
 8017b2c:	2201      	movs	r2, #1
 8017b2e:	701a      	strb	r2, [r3, #0]
}
 8017b30:	e7f2      	b.n	8017b18 <USBH_UserProcess+0xc>
 8017b32:	bf00      	nop
 8017b34:	200175ec 	.word	0x200175ec

08017b38 <MX_USB_HOST_Init>:
{
 8017b38:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017b3a:	2201      	movs	r2, #1
 8017b3c:	490b      	ldr	r1, [pc, #44]	; (8017b6c <MX_USB_HOST_Init+0x34>)
 8017b3e:	480c      	ldr	r0, [pc, #48]	; (8017b70 <MX_USB_HOST_Init+0x38>)
 8017b40:	f7f1 ff10 	bl	8009964 <USBH_Init>
 8017b44:	b948      	cbnz	r0, 8017b5a <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8017b46:	490b      	ldr	r1, [pc, #44]	; (8017b74 <MX_USB_HOST_Init+0x3c>)
 8017b48:	4809      	ldr	r0, [pc, #36]	; (8017b70 <MX_USB_HOST_Init+0x38>)
 8017b4a:	f7f1 ff22 	bl	8009992 <USBH_RegisterClass>
 8017b4e:	b938      	cbnz	r0, 8017b60 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017b50:	4807      	ldr	r0, [pc, #28]	; (8017b70 <MX_USB_HOST_Init+0x38>)
 8017b52:	f7f1 ff64 	bl	8009a1e <USBH_Start>
 8017b56:	b930      	cbnz	r0, 8017b66 <MX_USB_HOST_Init+0x2e>
}
 8017b58:	bd08      	pop	{r3, pc}
    Error_Handler();
 8017b5a:	f7fc fa97 	bl	801408c <Error_Handler>
 8017b5e:	e7f2      	b.n	8017b46 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 8017b60:	f7fc fa94 	bl	801408c <Error_Handler>
 8017b64:	e7f4      	b.n	8017b50 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8017b66:	f7fc fa91 	bl	801408c <Error_Handler>
}
 8017b6a:	e7f5      	b.n	8017b58 <MX_USB_HOST_Init+0x20>
 8017b6c:	08017b0d 	.word	0x08017b0d
 8017b70:	200175f0 	.word	0x200175f0
 8017b74:	20000008 	.word	0x20000008

08017b78 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017b78:	b530      	push	{r4, r5, lr}
 8017b7a:	b0ab      	sub	sp, #172	; 0xac
 8017b7c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b7e:	2100      	movs	r1, #0
 8017b80:	9125      	str	r1, [sp, #148]	; 0x94
 8017b82:	9126      	str	r1, [sp, #152]	; 0x98
 8017b84:	9127      	str	r1, [sp, #156]	; 0x9c
 8017b86:	9128      	str	r1, [sp, #160]	; 0xa0
 8017b88:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017b8a:	2284      	movs	r2, #132	; 0x84
 8017b8c:	a804      	add	r0, sp, #16
 8017b8e:	f001 fa21 	bl	8018fd4 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8017b92:	6823      	ldr	r3, [r4, #0]
 8017b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017b98:	d001      	beq.n	8017b9e <HAL_HCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017b9a:	b02b      	add	sp, #172	; 0xac
 8017b9c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8017b9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017ba2:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017ba4:	a804      	add	r0, sp, #16
 8017ba6:	f7ec fd4b 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 8017baa:	2800      	cmp	r0, #0
 8017bac:	d133      	bne.n	8017c16 <HAL_HCD_MspInit+0x9e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017bae:	4c1b      	ldr	r4, [pc, #108]	; (8017c1c <HAL_HCD_MspInit+0xa4>)
 8017bb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017bb2:	f043 0301 	orr.w	r3, r3, #1
 8017bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8017bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017bba:	f003 0301 	and.w	r3, r3, #1
 8017bbe:	9301      	str	r3, [sp, #4]
 8017bc0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8017bc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017bc6:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017bc8:	2302      	movs	r3, #2
 8017bca:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017bcc:	2500      	movs	r5, #0
 8017bce:	9527      	str	r5, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017bd0:	2303      	movs	r3, #3
 8017bd2:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017bd4:	230a      	movs	r3, #10
 8017bd6:	9329      	str	r3, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017bd8:	a925      	add	r1, sp, #148	; 0x94
 8017bda:	4811      	ldr	r0, [pc, #68]	; (8017c20 <HAL_HCD_MspInit+0xa8>)
 8017bdc:	f7ea f998 	bl	8001f10 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017be6:	6363      	str	r3, [r4, #52]	; 0x34
 8017be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017bee:	9302      	str	r3, [sp, #8]
 8017bf0:	9b02      	ldr	r3, [sp, #8]
 8017bf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017bf8:	6463      	str	r3, [r4, #68]	; 0x44
 8017bfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017c00:	9303      	str	r3, [sp, #12]
 8017c02:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017c04:	462a      	mov	r2, r5
 8017c06:	4629      	mov	r1, r5
 8017c08:	2043      	movs	r0, #67	; 0x43
 8017c0a:	f7e9 fb53 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017c0e:	2043      	movs	r0, #67	; 0x43
 8017c10:	f7e9 fb94 	bl	800133c <HAL_NVIC_EnableIRQ>
}
 8017c14:	e7c1      	b.n	8017b9a <HAL_HCD_MspInit+0x22>
      Error_Handler();
 8017c16:	f7fc fa39 	bl	801408c <Error_Handler>
 8017c1a:	e7c8      	b.n	8017bae <HAL_HCD_MspInit+0x36>
 8017c1c:	40023800 	.word	0x40023800
 8017c20:	40020000 	.word	0x40020000

08017c24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c24:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8017c26:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8017c2a:	f7f1 ff05 	bl	8009a38 <USBH_LL_IncTimer>
}
 8017c2e:	bd08      	pop	{r3, pc}

08017c30 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c30:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8017c32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8017c36:	f7f1 ff10 	bl	8009a5a <USBH_LL_Connect>
}
 8017c3a:	bd08      	pop	{r3, pc}

08017c3c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c3c:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8017c3e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8017c42:	f7f1 ff1e 	bl	8009a82 <USBH_LL_Disconnect>
}
 8017c46:	bd08      	pop	{r3, pc}

08017c48 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8017c48:	4770      	bx	lr

08017c4a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c4a:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 8017c4c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8017c50:	f7f1 fefb 	bl	8009a4a <USBH_LL_PortEnabled>
}
 8017c54:	bd08      	pop	{r3, pc}

08017c56 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c56:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8017c58:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8017c5c:	f7f1 fef9 	bl	8009a52 <USBH_LL_PortDisabled>
}
 8017c60:	bd08      	pop	{r3, pc}
	...

08017c64 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017c64:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8017c68:	2b01      	cmp	r3, #1
 8017c6a:	d001      	beq.n	8017c70 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 8017c6c:	2000      	movs	r0, #0
 8017c6e:	4770      	bx	lr
{
 8017c70:	b510      	push	{r4, lr}
 8017c72:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 8017c74:	480f      	ldr	r0, [pc, #60]	; (8017cb4 <USBH_LL_Init+0x50>)
 8017c76:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8017c7a:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017c7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017c82:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8017c84:	2308      	movs	r3, #8
 8017c86:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8017c88:	2303      	movs	r3, #3
 8017c8a:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8017c90:	2202      	movs	r2, #2
 8017c92:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017c94:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017c96:	f7ea fb9b 	bl	80023d0 <HAL_HCD_Init>
 8017c9a:	b940      	cbnz	r0, 8017cae <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8017c9c:	4805      	ldr	r0, [pc, #20]	; (8017cb4 <USBH_LL_Init+0x50>)
 8017c9e:	f7eb f8b3 	bl	8002e08 <HAL_HCD_GetCurrentFrame>
 8017ca2:	4601      	mov	r1, r0
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	f7f1 fec4 	bl	8009a32 <USBH_LL_SetTimer>
}
 8017caa:	2000      	movs	r0, #0
 8017cac:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8017cae:	f7fc f9ed 	bl	801408c <Error_Handler>
 8017cb2:	e7f3      	b.n	8017c9c <USBH_LL_Init+0x38>
 8017cb4:	200179bc 	.word	0x200179bc

08017cb8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017cb8:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8017cba:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8017cbe:	f7eb f89d 	bl	8002dfc <HAL_HCD_HC_GetXferCount>
}
 8017cc2:	bd08      	pop	{r3, pc}

08017cc4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017cc4:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8017cc6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8017cca:	f7eb f890 	bl	8002dee <HAL_HCD_HC_GetURBState>
}
 8017cce:	bd08      	pop	{r3, pc}

08017cd0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8017cd0:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8017cd2:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8017cd6:	2b01      	cmp	r3, #1
 8017cd8:	d004      	beq.n	8017ce4 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8017cda:	20c8      	movs	r0, #200	; 0xc8
 8017cdc:	f7e9 fab8 	bl	8001250 <HAL_Delay>
  return USBH_OK;
}
 8017ce0:	2000      	movs	r0, #0
 8017ce2:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8017ce4:	4608      	mov	r0, r1
 8017ce6:	f000 f87b 	bl	8017de0 <MX_DriverVbusFS>
 8017cea:	e7f6      	b.n	8017cda <USBH_LL_DriverVBUS+0xa>

08017cec <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8017cec:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8017cf0:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8017cf4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8017cf8:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 8017cfc:	b138      	cbz	r0, 8017d0e <USBH_LL_SetToggle+0x22>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8017cfe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017d02:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8017d06:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8017d0a:	2000      	movs	r0, #0
 8017d0c:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8017d0e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017d12:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8017d16:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8017d1a:	e7f6      	b.n	8017d0a <USBH_LL_SetToggle+0x1e>

08017d1c <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8017d1c:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8017d20:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8017d24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017d28:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 8017d2c:	b132      	cbz	r2, 8017d3c <USBH_LL_GetToggle+0x20>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8017d2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017d32:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8017d36:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 8017d3a:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8017d3c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017d40:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8017d44:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 8017d48:	4770      	bx	lr

08017d4a <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8017d4a:	2802      	cmp	r0, #2
 8017d4c:	d805      	bhi.n	8017d5a <USBH_Get_USB_Status+0x10>
 8017d4e:	e8df f000 	tbb	[pc, r0]
 8017d52:	0405      	.short	0x0405
 8017d54:	02          	.byte	0x02
 8017d55:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8017d56:	2001      	movs	r0, #1
    break;
 8017d58:	4770      	bx	lr
      usb_status = USBH_FAIL;
 8017d5a:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8017d5c:	4770      	bx	lr

08017d5e <USBH_LL_Start>:
{
 8017d5e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8017d60:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8017d64:	f7eb f81b 	bl	8002d9e <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8017d68:	f7ff ffef 	bl	8017d4a <USBH_Get_USB_Status>
}
 8017d6c:	bd08      	pop	{r3, pc}

08017d6e <USBH_LL_Stop>:
{
 8017d6e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8017d70:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8017d74:	f7eb f829 	bl	8002dca <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8017d78:	f7ff ffe7 	bl	8017d4a <USBH_Get_USB_Status>
}
 8017d7c:	bd08      	pop	{r3, pc}

08017d7e <USBH_LL_OpenPipe>:
{
 8017d7e:	b510      	push	{r4, lr}
 8017d80:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8017d82:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8017d86:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8017d8a:	9402      	str	r4, [sp, #8]
 8017d8c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8017d90:	9401      	str	r4, [sp, #4]
 8017d92:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8017d96:	9400      	str	r4, [sp, #0]
 8017d98:	f7ea fabc 	bl	8002314 <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8017d9c:	f7ff ffd5 	bl	8017d4a <USBH_Get_USB_Status>
}
 8017da0:	b004      	add	sp, #16
 8017da2:	bd10      	pop	{r4, pc}

08017da4 <USBH_LL_ClosePipe>:
{
 8017da4:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8017da6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8017daa:	f7ea fafe 	bl	80023aa <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 8017dae:	f7ff ffcc 	bl	8017d4a <USBH_Get_USB_Status>
}
 8017db2:	bd08      	pop	{r3, pc}

08017db4 <USBH_LL_SubmitURB>:
{
 8017db4:	b510      	push	{r4, lr}
 8017db6:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8017db8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8017dbc:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8017dc0:	9403      	str	r4, [sp, #12]
 8017dc2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8017dc6:	9402      	str	r4, [sp, #8]
 8017dc8:	9c07      	ldr	r4, [sp, #28]
 8017dca:	9401      	str	r4, [sp, #4]
 8017dcc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8017dd0:	9400      	str	r4, [sp, #0]
 8017dd2:	f7ea fb59 	bl	8002488 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 8017dd6:	f7ff ffb8 	bl	8017d4a <USBH_Get_USB_Status>
}
 8017dda:	b004      	add	sp, #16
 8017ddc:	bd10      	pop	{r4, pc}
	...

08017de0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8017de0:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8017de2:	4602      	mov	r2, r0
 8017de4:	b100      	cbz	r0, 8017de8 <MX_DriverVbusFS+0x8>
    data = GPIO_PIN_RESET;
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8017de6:	2201      	movs	r2, #1
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8017de8:	2120      	movs	r1, #32
 8017dea:	4802      	ldr	r0, [pc, #8]	; (8017df4 <MX_DriverVbusFS+0x14>)
 8017dec:	f7ea fa24 	bl	8002238 <HAL_GPIO_WritePin>
}
 8017df0:	bd08      	pop	{r3, pc}
 8017df2:	bf00      	nop
 8017df4:	40020c00 	.word	0x40020c00

08017df8 <ReadWavHeader>:

extern uint8_t volume;
uint32_t wavtagsize = 0;
WavHeaderTypeDef wavfile;

uint8_t ReadWavHeader(WavHeaderTypeDef *waveformat) {
 8017df8:	b500      	push	{lr}
 8017dfa:	b083      	sub	sp, #12
 8017dfc:	4601      	mov	r1, r0
	uint32_t bytesread;
	FRESULT res;
	/* Fill the buffer to Send */
	res = f_read(&MyFile, waveformat, sizeof(wavfile), (void*)&bytesread);
 8017dfe:	ab01      	add	r3, sp, #4
 8017e00:	222c      	movs	r2, #44	; 0x2c
 8017e02:	4803      	ldr	r0, [pc, #12]	; (8017e10 <ReadWavHeader+0x18>)
 8017e04:	f7f3 fa1f 	bl	800b246 <f_read>
	return res;
}
 8017e08:	b003      	add	sp, #12
 8017e0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e0e:	bf00      	nop
 8017e10:	200017b0 	.word	0x200017b0

08017e14 <TrackTime>:
			}
		}
	}
}

void TrackTime() {
 8017e14:	b570      	push	{r4, r5, r6, lr}
	rfr = ((rekordbox.spectrum_size-file_pos_wide) % 9000) % 150;
 8017e16:	4d20      	ldr	r5, [pc, #128]	; (8017e98 <TrackTime+0x84>)
 8017e18:	f8d5 1250 	ldr.w	r1, [r5, #592]	; 0x250
 8017e1c:	4b1f      	ldr	r3, [pc, #124]	; (8017e9c <TrackTime+0x88>)
 8017e1e:	6818      	ldr	r0, [r3, #0]
 8017e20:	1a09      	subs	r1, r1, r0
 8017e22:	4b1f      	ldr	r3, [pc, #124]	; (8017ea0 <TrackTime+0x8c>)
 8017e24:	fba3 4201 	umull	r4, r2, r3, r1
 8017e28:	0b52      	lsrs	r2, r2, #13
 8017e2a:	f242 3e28 	movw	lr, #9000	; 0x2328
 8017e2e:	fb0e 1212 	mls	r2, lr, r2, r1
 8017e32:	491c      	ldr	r1, [pc, #112]	; (8017ea4 <TrackTime+0x90>)
 8017e34:	fba1 c402 	umull	ip, r4, r1, r2
 8017e38:	0924      	lsrs	r4, r4, #4
 8017e3a:	f04f 0c96 	mov.w	ip, #150	; 0x96
 8017e3e:	fb0c 2414 	mls	r4, ip, r4, r2
 8017e42:	4a19      	ldr	r2, [pc, #100]	; (8017ea8 <TrackTime+0x94>)
 8017e44:	8014      	strh	r4, [r2, #0]
	rsec = ((rekordbox.spectrum_size-file_pos_wide) % 9000) / 150;
 8017e46:	f8d5 4250 	ldr.w	r4, [r5, #592]	; 0x250
 8017e4a:	1a24      	subs	r4, r4, r0
 8017e4c:	fba3 6204 	umull	r6, r2, r3, r4
 8017e50:	0b52      	lsrs	r2, r2, #13
 8017e52:	fb0e 4212 	mls	r2, lr, r2, r4
 8017e56:	fba1 4202 	umull	r4, r2, r1, r2
 8017e5a:	0912      	lsrs	r2, r2, #4
 8017e5c:	4c13      	ldr	r4, [pc, #76]	; (8017eac <TrackTime+0x98>)
 8017e5e:	7022      	strb	r2, [r4, #0]
	rmin = (rekordbox.spectrum_size-file_pos_wide) / 9000;
 8017e60:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 8017e64:	1a12      	subs	r2, r2, r0
 8017e66:	fba3 4202 	umull	r4, r2, r3, r2
 8017e6a:	0b52      	lsrs	r2, r2, #13
 8017e6c:	4c10      	ldr	r4, [pc, #64]	; (8017eb0 <TrackTime+0x9c>)
 8017e6e:	7022      	strb	r2, [r4, #0]
	fr = ((file_pos_wide) % 9000) % 150;
 8017e70:	fba3 2300 	umull	r2, r3, r3, r0
 8017e74:	0b5a      	lsrs	r2, r3, #13
 8017e76:	fb0e 0212 	mls	r2, lr, r2, r0
 8017e7a:	fba1 0102 	umull	r0, r1, r1, r2
 8017e7e:	0908      	lsrs	r0, r1, #4
 8017e80:	fb0c 2010 	mls	r0, ip, r0, r2
 8017e84:	4a0b      	ldr	r2, [pc, #44]	; (8017eb4 <TrackTime+0xa0>)
 8017e86:	8010      	strh	r0, [r2, #0]
	sec = ((file_pos_wide) % 9000) / 150;
 8017e88:	0909      	lsrs	r1, r1, #4
 8017e8a:	4a0b      	ldr	r2, [pc, #44]	; (8017eb8 <TrackTime+0xa4>)
 8017e8c:	7011      	strb	r1, [r2, #0]
	min = (file_pos_wide) / 9000;
 8017e8e:	0b5b      	lsrs	r3, r3, #13
 8017e90:	4a0a      	ldr	r2, [pc, #40]	; (8017ebc <TrackTime+0xa8>)
 8017e92:	7013      	strb	r3, [r2, #0]
}
 8017e94:	bd70      	pop	{r4, r5, r6, pc}
 8017e96:	bf00      	nop
 8017e98:	20016618 	.word	0x20016618
 8017e9c:	2000e3cc 	.word	0x2000e3cc
 8017ea0:	e90452d5 	.word	0xe90452d5
 8017ea4:	1b4e81b5 	.word	0x1b4e81b5
 8017ea8:	2000eb94 	.word	0x2000eb94
 8017eac:	2000eb97 	.word	0x2000eb97
 8017eb0:	2000eb96 	.word	0x2000eb96
 8017eb4:	2000e5f8 	.word	0x2000e5f8
 8017eb8:	2000eb98 	.word	0x2000eb98
 8017ebc:	2000e790 	.word	0x2000e790

08017ec0 <GoToPosition>:
	tim7_flag = 0;
	if(display.timemode == 0) display.trackbarmode = 0;
	else display.trackbarmode = 1;
}

void GoToPosition(uint32_t position) {
 8017ec0:	b538      	push	{r3, r4, r5, lr}
 8017ec2:	ed2d 8b02 	vpush	{d8}
 8017ec6:	4604      	mov	r4, r0
	BSP_AUDIO_OUT_Pause();
 8017ec8:	f7fd ff9a 	bl	8015e00 <BSP_AUDIO_OUT_Pause>
	file_pos_wide = position;
 8017ecc:	4b41      	ldr	r3, [pc, #260]	; (8017fd4 <GoToPosition+0x114>)
 8017ece:	601c      	str	r4, [r3, #0]
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 8017ed0:	ee07 4a90 	vmov	s15, r4
 8017ed4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8017ed8:	4b3f      	ldr	r3, [pc, #252]	; (8017fd8 <GoToPosition+0x118>)
 8017eda:	ed93 7a94 	vldr	s14, [r3, #592]	; 0x250
 8017ede:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017ee2:	eec8 6a07 	vdiv.f32	s13, s16, s14
			rekordbox.lowp_spectrum_size;
 8017ee6:	edd3 7a93 	vldr	s15, [r3, #588]	; 0x24c
	file_pos = (float)position / (float)rekordbox.spectrum_size *
 8017eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017eee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017ef6:	4b39      	ldr	r3, [pc, #228]	; (8017fdc <GoToPosition+0x11c>)
 8017ef8:	edc3 7a00 	vstr	s15, [r3]
	if(BufferCtl.filetype == 0)	{
 8017efc:	4b38      	ldr	r3, [pc, #224]	; (8017fe0 <GoToPosition+0x120>)
 8017efe:	7a1b      	ldrb	r3, [r3, #8]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d138      	bne.n	8017f76 <GoToPosition+0xb6>
		uint16_t i = 0;
 8017f04:	2400      	movs	r4, #0
		do {
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8017f06:	4d37      	ldr	r5, [pc, #220]	; (8017fe4 <GoToPosition+0x124>)
 8017f08:	6928      	ldr	r0, [r5, #16]
 8017f0a:	6969      	ldr	r1, [r5, #20]
 8017f0c:	4b36      	ldr	r3, [pc, #216]	; (8017fe8 <GoToPosition+0x128>)
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	1ac0      	subs	r0, r0, r3
 8017f12:	f161 0100 	sbc.w	r1, r1, #0
 8017f16:	4b35      	ldr	r3, [pc, #212]	; (8017fec <GoToPosition+0x12c>)
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	1ac0      	subs	r0, r0, r3
 8017f1c:	f161 0100 	sbc.w	r1, r1, #0
 8017f20:	f7e8 ff64 	bl	8000dec <__aeabi_ul2f>
 8017f24:	ee07 0a10 	vmov	s14, r0
 8017f28:	ee28 7a07 	vmul.f32	s14, s16, s14
				/rekordbox.spectrum_size + i));
 8017f2c:	4b2a      	ldr	r3, [pc, #168]	; (8017fd8 <GoToPosition+0x118>)
 8017f2e:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8017f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017f36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017f3a:	ee07 4a90 	vmov	s15, r4
 8017f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8017f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017f46:	ee17 0a90 	vmov	r0, s15
 8017f4a:	f7e8 ffad 	bl	8000ea8 <__aeabi_f2ulz>
 8017f4e:	4602      	mov	r2, r0
 8017f50:	460b      	mov	r3, r1
 8017f52:	4628      	mov	r0, r5
 8017f54:	f7f3 fa48 	bl	800b3e8 <f_lseek>
			i++;
 8017f58:	3401      	adds	r4, #1
 8017f5a:	b2a4      	uxth	r4, r4
		}
		while(((UINT)BufferCtl.buff & 1) != (f_tell(&MyFile) & 1));
 8017f5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8017f5e:	4a24      	ldr	r2, [pc, #144]	; (8017ff0 <GoToPosition+0x130>)
 8017f60:	4053      	eors	r3, r2
 8017f62:	f013 0f01 	tst.w	r3, #1
 8017f66:	d1ce      	bne.n	8017f06 <GoToPosition+0x46>
	}
	else {
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
						/rekordbox.spectrum_size));
	}
	if(BufferCtl.filetype == 1) {
 8017f68:	4b1d      	ldr	r3, [pc, #116]	; (8017fe0 <GoToPosition+0x120>)
 8017f6a:	7a1b      	ldrb	r3, [r3, #8]
 8017f6c:	2b01      	cmp	r3, #1
 8017f6e:	d026      	beq.n	8017fbe <GoToPosition+0xfe>
		unInDataLeft = 0;
		unDmaBufferSpace = 0;
		unFramesDecoded = 0;
		unDmaBufMode = 0;
	}
}
 8017f70:	ecbd 8b02 	vpop	{d8}
 8017f74:	bd38      	pop	{r3, r4, r5, pc}
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8017f76:	4c1b      	ldr	r4, [pc, #108]	; (8017fe4 <GoToPosition+0x124>)
 8017f78:	6923      	ldr	r3, [r4, #16]
 8017f7a:	6961      	ldr	r1, [r4, #20]
 8017f7c:	4a1a      	ldr	r2, [pc, #104]	; (8017fe8 <GoToPosition+0x128>)
 8017f7e:	6810      	ldr	r0, [r2, #0]
 8017f80:	1a1b      	subs	r3, r3, r0
 8017f82:	f161 0100 	sbc.w	r1, r1, #0
 8017f86:	4a19      	ldr	r2, [pc, #100]	; (8017fec <GoToPosition+0x12c>)
 8017f88:	6810      	ldr	r0, [r2, #0]
 8017f8a:	1a18      	subs	r0, r3, r0
 8017f8c:	f161 0100 	sbc.w	r1, r1, #0
 8017f90:	f7e8 ff2c 	bl	8000dec <__aeabi_ul2f>
 8017f94:	ee07 0a90 	vmov	s15, r0
 8017f98:	ee28 8a27 	vmul.f32	s16, s16, s15
						/rekordbox.spectrum_size));
 8017f9c:	4b0e      	ldr	r3, [pc, #56]	; (8017fd8 <GoToPosition+0x118>)
 8017f9e:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8017fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
		f_lseek(&MyFile, (position*(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8017fa6:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8017faa:	ee17 0a90 	vmov	r0, s15
 8017fae:	f7e8 ff7b 	bl	8000ea8 <__aeabi_f2ulz>
 8017fb2:	4602      	mov	r2, r0
 8017fb4:	460b      	mov	r3, r1
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	f7f3 fa16 	bl	800b3e8 <f_lseek>
 8017fbc:	e7d4      	b.n	8017f68 <GoToPosition+0xa8>
		unInDataLeft = 0;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	4a0c      	ldr	r2, [pc, #48]	; (8017ff4 <GoToPosition+0x134>)
 8017fc2:	6013      	str	r3, [r2, #0]
		unDmaBufferSpace = 0;
 8017fc4:	4a0c      	ldr	r2, [pc, #48]	; (8017ff8 <GoToPosition+0x138>)
 8017fc6:	6013      	str	r3, [r2, #0]
		unFramesDecoded = 0;
 8017fc8:	4a0c      	ldr	r2, [pc, #48]	; (8017ffc <GoToPosition+0x13c>)
 8017fca:	6013      	str	r3, [r2, #0]
		unDmaBufMode = 0;
 8017fcc:	4a0c      	ldr	r2, [pc, #48]	; (8018000 <GoToPosition+0x140>)
 8017fce:	6013      	str	r3, [r2, #0]
}
 8017fd0:	e7ce      	b.n	8017f70 <GoToPosition+0xb0>
 8017fd2:	bf00      	nop
 8017fd4:	2000e3cc 	.word	0x2000e3cc
 8017fd8:	20016618 	.word	0x20016618
 8017fdc:	2000e3c8 	.word	0x2000e3c8
 8017fe0:	200017a0 	.word	0x200017a0
 8017fe4:	200017b0 	.word	0x200017b0
 8017fe8:	200145e8 	.word	0x200145e8
 8017fec:	20017cac 	.word	0x20017cac
 8017ff0:	200007a0 	.word	0x200007a0
 8017ff4:	20014614 	.word	0x20014614
 8017ff8:	2001460c 	.word	0x2001460c
 8017ffc:	20014610 	.word	0x20014610
 8018000:	2000ebdc 	.word	0x2000ebdc

08018004 <GetTrackTime>:
void GetTrackTime() {
 8018004:	b538      	push	{r3, r4, r5, lr}
 8018006:	ed2d 8b02 	vpush	{d8}
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 801800a:	4d2a      	ldr	r5, [pc, #168]	; (80180b4 <GetTrackTime+0xb0>)
 801800c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801800e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8018010:	4b29      	ldr	r3, [pc, #164]	; (80180b8 <GetTrackTime+0xb4>)
 8018012:	681c      	ldr	r4, [r3, #0]
 8018014:	1b00      	subs	r0, r0, r4
 8018016:	f161 0100 	sbc.w	r1, r1, #0
 801801a:	f7e8 fee7 	bl	8000dec <__aeabi_ul2f>
 801801e:	ee08 0a10 	vmov	s16, r0
			(float)(f_size(&MyFile)-id3tagsize-wavtagsize)
 8018022:	6928      	ldr	r0, [r5, #16]
 8018024:	6969      	ldr	r1, [r5, #20]
 8018026:	1b00      	subs	r0, r0, r4
 8018028:	f161 0100 	sbc.w	r1, r1, #0
 801802c:	4b23      	ldr	r3, [pc, #140]	; (80180bc <GetTrackTime+0xb8>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	1ac0      	subs	r0, r0, r3
 8018032:	f161 0100 	sbc.w	r1, r1, #0
 8018036:	f7e8 fed9 	bl	8000dec <__aeabi_ul2f>
 801803a:	ee07 0a90 	vmov	s15, r0
	float track_lenght = (float)(f_tell(&MyFile)-id3tagsize)/
 801803e:	ee88 7a27 	vdiv.f32	s14, s16, s15
			*rekordbox.spectrum_size;
 8018042:	4c1f      	ldr	r4, [pc, #124]	; (80180c0 <GetTrackTime+0xbc>)
 8018044:	edd4 7a94 	vldr	s15, [r4, #592]	; 0x250
 8018048:	eef8 7a67 	vcvt.f32.u32	s15, s15
	file_pos_wide = (track_lenght + 0.5);
 801804c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018050:	ee17 0a90 	vmov	r0, s15
 8018054:	f7e8 faa0 	bl	8000598 <__aeabi_f2d>
 8018058:	2200      	movs	r2, #0
 801805a:	4b1a      	ldr	r3, [pc, #104]	; (80180c4 <GetTrackTime+0xc0>)
 801805c:	f7e8 f93e 	bl	80002dc <__adddf3>
 8018060:	f7e8 fd8c 	bl	8000b7c <__aeabi_d2uiz>
 8018064:	4b18      	ldr	r3, [pc, #96]	; (80180c8 <GetTrackTime+0xc4>)
 8018066:	6018      	str	r0, [r3, #0]
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 8018068:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
 801806c:	fb03 f000 	mul.w	r0, r3, r0
			rekordbox.spectrum_size);
 8018070:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
	file_pos = (uint16_t)(rekordbox.lowp_spectrum_size*file_pos_wide/
 8018074:	fbb0 f0f3 	udiv	r0, r0, r3
 8018078:	b280      	uxth	r0, r0
 801807a:	4b14      	ldr	r3, [pc, #80]	; (80180cc <GetTrackTime+0xc8>)
 801807c:	6018      	str	r0, [r3, #0]
	TrackTime();
 801807e:	f7ff fec9 	bl	8017e14 <TrackTime>
	if(display.loop == 1) {
 8018082:	4b13      	ldr	r3, [pc, #76]	; (80180d0 <GetTrackTime+0xcc>)
 8018084:	7c1b      	ldrb	r3, [r3, #16]
 8018086:	2b01      	cmp	r3, #1
 8018088:	d002      	beq.n	8018090 <GetTrackTime+0x8c>
}
 801808a:	ecbd 8b02 	vpop	{d8}
 801808e:	bd38      	pop	{r3, r4, r5, pc}
		if(trak.state == PLAYING) {
 8018090:	4b10      	ldr	r3, [pc, #64]	; (80180d4 <GetTrackTime+0xd0>)
 8018092:	781b      	ldrb	r3, [r3, #0]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d1f8      	bne.n	801808a <GetTrackTime+0x86>
			if(file_pos_wide >= display.loopend) {
 8018098:	4b0d      	ldr	r3, [pc, #52]	; (80180d0 <GetTrackTime+0xcc>)
 801809a:	68da      	ldr	r2, [r3, #12]
 801809c:	4b0a      	ldr	r3, [pc, #40]	; (80180c8 <GetTrackTime+0xc4>)
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	429a      	cmp	r2, r3
 80180a2:	d8f2      	bhi.n	801808a <GetTrackTime+0x86>
				GoToPosition(display.loopstart);
 80180a4:	4b0a      	ldr	r3, [pc, #40]	; (80180d0 <GetTrackTime+0xcc>)
 80180a6:	6898      	ldr	r0, [r3, #8]
 80180a8:	f7ff ff0a 	bl	8017ec0 <GoToPosition>
				BSP_AUDIO_OUT_Resume();
 80180ac:	f7fd feb0 	bl	8015e10 <BSP_AUDIO_OUT_Resume>
}
 80180b0:	e7eb      	b.n	801808a <GetTrackTime+0x86>
 80180b2:	bf00      	nop
 80180b4:	200017b0 	.word	0x200017b0
 80180b8:	200145e8 	.word	0x200145e8
 80180bc:	20017cac 	.word	0x20017cac
 80180c0:	20016618 	.word	0x20016618
 80180c4:	3fe00000 	.word	0x3fe00000
 80180c8:	2000e3cc 	.word	0x2000e3cc
 80180cc:	2000e3c8 	.word	0x2000e3c8
 80180d0:	200005e8 	.word	0x200005e8
 80180d4:	2000eba4 	.word	0x2000eba4

080180d8 <PlayWavFile>:
void PlayWavFile() {
 80180d8:	b530      	push	{r4, r5, lr}
 80180da:	b083      	sub	sp, #12
	wavtagsize = 0;
 80180dc:	4d8a      	ldr	r5, [pc, #552]	; (8018308 <PlayWavFile+0x230>)
 80180de:	2400      	movs	r4, #0
 80180e0:	602c      	str	r4, [r5, #0]
	BufferCtl.filetype = 0;
 80180e2:	488a      	ldr	r0, [pc, #552]	; (801830c <PlayWavFile+0x234>)
 80180e4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80180e8:	721c      	strb	r4, [r3, #8]
	memset(BufferCtl.buff, 0, AUDIO_OUT_BUFFER_SIZE);
 80180ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80180ee:	4621      	mov	r1, r4
 80180f0:	f000 ff70 	bl	8018fd4 <memset>
	bOutOfData = 0;
 80180f4:	4b86      	ldr	r3, [pc, #536]	; (8018310 <PlayWavFile+0x238>)
 80180f6:	601c      	str	r4, [r3, #0]
	uint16_t bytesread = 0;
 80180f8:	f8ad 4006 	strh.w	r4, [sp, #6]
	ReadWavHeader(&wavfile);
 80180fc:	4c85      	ldr	r4, [pc, #532]	; (8018314 <PlayWavFile+0x23c>)
 80180fe:	4620      	mov	r0, r4
 8018100:	f7ff fe7a 	bl	8017df8 <ReadWavHeader>
	wavtagsize = wavfile.FileSize - wavfile.SubChunk2Size;
 8018104:	6863      	ldr	r3, [r4, #4]
 8018106:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018108:	1a9b      	subs	r3, r3, r2
 801810a:	602b      	str	r3, [r5, #0]
	if(wavfile.SampleRate > 0) trak.bitrate = wavfile.SampleRate;
 801810c:	69a3      	ldr	r3, [r4, #24]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d03f      	beq.n	8018192 <PlayWavFile+0xba>
 8018112:	4a81      	ldr	r2, [pc, #516]	; (8018318 <PlayWavFile+0x240>)
 8018114:	8113      	strh	r3, [r2, #8]
	BSP_AUDIO_OUT_ClockConfig(&hsai_BlockA2, (uint32_t)(trak.bitrate / 2)*(1 + trak.percent), NULL);
 8018116:	4a80      	ldr	r2, [pc, #512]	; (8018318 <PlayWavFile+0x240>)
 8018118:	8913      	ldrh	r3, [r2, #8]
 801811a:	edd2 7a01 	vldr	s15, [r2, #4]
 801811e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018126:	085b      	lsrs	r3, r3, #1
 8018128:	ee07 3a90 	vmov	s15, r3
 801812c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018134:	2200      	movs	r2, #0
 8018136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801813a:	ee17 1a90 	vmov	r1, s15
 801813e:	4877      	ldr	r0, [pc, #476]	; (801831c <PlayWavFile+0x244>)
 8018140:	f7fd ff2c 	bl	8015f9c <BSP_AUDIO_OUT_ClockConfig>
	while(f_read(&MyFile, &BufferCtl.buff[0], 2048, (void *)&bytesread) != FR_OK);
 8018144:	f10d 0306 	add.w	r3, sp, #6
 8018148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801814c:	496f      	ldr	r1, [pc, #444]	; (801830c <PlayWavFile+0x234>)
 801814e:	4874      	ldr	r0, [pc, #464]	; (8018320 <PlayWavFile+0x248>)
 8018150:	f7f3 f879 	bl	800b246 <f_read>
 8018154:	2800      	cmp	r0, #0
 8018156:	d1f5      	bne.n	8018144 <PlayWavFile+0x6c>
	if(bytesread != 0) {
 8018158:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801815c:	b9f3      	cbnz	r3, 801819c <PlayWavFile+0xc4>
	if((rekordbox.autocue == 2) && (trak.state == PLAYING)) {
 801815e:	4b71      	ldr	r3, [pc, #452]	; (8018324 <PlayWavFile+0x24c>)
 8018160:	f893 3b90 	ldrb.w	r3, [r3, #2960]	; 0xb90
 8018164:	b2db      	uxtb	r3, r3
 8018166:	2b02      	cmp	r3, #2
 8018168:	d166      	bne.n	8018238 <PlayWavFile+0x160>
 801816a:	4b6b      	ldr	r3, [pc, #428]	; (8018318 <PlayWavFile+0x240>)
 801816c:	781b      	ldrb	r3, [r3, #0]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d162      	bne.n	8018238 <PlayWavFile+0x160>
		BSP_AUDIO_OUT_Pause();
 8018172:	f7fd fe45 	bl	8015e00 <BSP_AUDIO_OUT_Pause>
		trak.state = STOPPED;
 8018176:	4b68      	ldr	r3, [pc, #416]	; (8018318 <PlayWavFile+0x240>)
 8018178:	2201      	movs	r2, #1
 801817a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim8);
 801817c:	486a      	ldr	r0, [pc, #424]	; (8018328 <PlayWavFile+0x250>)
 801817e:	f7ee ff61 	bl	8007044 <HAL_TIM_Base_Start_IT>
		GoToPosition(rekordbox.cue_start_position[0]);
 8018182:	4b68      	ldr	r3, [pc, #416]	; (8018324 <PlayWavFile+0x24c>)
 8018184:	f8d3 080c 	ldr.w	r0, [r3, #2060]	; 0x80c
 8018188:	f7ff fe9a 	bl	8017ec0 <GoToPosition>
		TrackTime();
 801818c:	f7ff fe42 	bl	8017e14 <TrackTime>
 8018190:	e052      	b.n	8018238 <PlayWavFile+0x160>
	else trak.bitrate = AUDIO_FREQUENCY_44K;
 8018192:	4b61      	ldr	r3, [pc, #388]	; (8018318 <PlayWavFile+0x240>)
 8018194:	f64a 4244 	movw	r2, #44100	; 0xac44
 8018198:	811a      	strh	r2, [r3, #8]
 801819a:	e7bc      	b.n	8018116 <PlayWavFile+0x3e>
		BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 801819c:	4c5b      	ldr	r4, [pc, #364]	; (801830c <PlayWavFile+0x234>)
 801819e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80181a2:	4620      	mov	r0, r4
 80181a4:	f7fd fe0c 	bl	8015dc0 <BSP_AUDIO_OUT_Play>
		BufferCtl.fptr = bytesread;
 80181a8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80181ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80181b0:	6063      	str	r3, [r4, #4]
		BSP_AUDIO_OUT_SetVolume(volume);
 80181b2:	4b5e      	ldr	r3, [pc, #376]	; (801832c <PlayWavFile+0x254>)
 80181b4:	7818      	ldrb	r0, [r3, #0]
 80181b6:	f7fd fe4d 	bl	8015e54 <BSP_AUDIO_OUT_SetVolume>
 80181ba:	e7d0      	b.n	801815e <PlayWavFile+0x86>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 80181bc:	485c      	ldr	r0, [pc, #368]	; (8018330 <PlayWavFile+0x258>)
 80181be:	6802      	ldr	r2, [r0, #0]
 80181c0:	f241 3387 	movw	r3, #4999	; 0x1387
 80181c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80181c6:	60c3      	str	r3, [r0, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 80181c8:	f7ee ff3c 	bl	8007044 <HAL_TIM_Base_Start_IT>
					tim7_flag =  1;
 80181cc:	4b59      	ldr	r3, [pc, #356]	; (8018334 <PlayWavFile+0x25c>)
 80181ce:	2201      	movs	r2, #1
 80181d0:	701a      	strb	r2, [r3, #0]
 80181d2:	e04c      	b.n	801826e <PlayWavFile+0x196>
			else if((rmin == 0) && (rsec <= 10)) {
 80181d4:	bb63      	cbnz	r3, 8018230 <PlayWavFile+0x158>
 80181d6:	4b58      	ldr	r3, [pc, #352]	; (8018338 <PlayWavFile+0x260>)
 80181d8:	f993 3000 	ldrsb.w	r3, [r3]
 80181dc:	2b0a      	cmp	r3, #10
 80181de:	dc27      	bgt.n	8018230 <PlayWavFile+0x158>
				if(tim7_flag == 0) {
 80181e0:	4b54      	ldr	r3, [pc, #336]	; (8018334 <PlayWavFile+0x25c>)
 80181e2:	781b      	ldrb	r3, [r3, #0]
 80181e4:	b1c3      	cbz	r3, 8018218 <PlayWavFile+0x140>
				if(tim7_flag == 1) {
 80181e6:	4b53      	ldr	r3, [pc, #332]	; (8018334 <PlayWavFile+0x25c>)
 80181e8:	781b      	ldrb	r3, [r3, #0]
 80181ea:	2b01      	cmp	r3, #1
 80181ec:	d124      	bne.n	8018238 <PlayWavFile+0x160>
					HAL_TIM_Base_Stop_IT(&htim7);
 80181ee:	4c50      	ldr	r4, [pc, #320]	; (8018330 <PlayWavFile+0x258>)
 80181f0:	4620      	mov	r0, r4
 80181f2:	f7ee ff7f 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80181f6:	6823      	ldr	r3, [r4, #0]
 80181f8:	f06f 0201 	mvn.w	r2, #1
 80181fc:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 80181fe:	2200      	movs	r2, #0
 8018200:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 8018202:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8018206:	62da      	str	r2, [r3, #44]	; 0x2c
 8018208:	60e2      	str	r2, [r4, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 801820a:	4620      	mov	r0, r4
 801820c:	f7ee ff1a 	bl	8007044 <HAL_TIM_Base_Start_IT>
					tim7_flag = 2;
 8018210:	4b48      	ldr	r3, [pc, #288]	; (8018334 <PlayWavFile+0x25c>)
 8018212:	2202      	movs	r2, #2
 8018214:	701a      	strb	r2, [r3, #0]
 8018216:	e00f      	b.n	8018238 <PlayWavFile+0x160>
					__HAL_TIM_SET_AUTORELOAD(&htim7, 1999);
 8018218:	4845      	ldr	r0, [pc, #276]	; (8018330 <PlayWavFile+0x258>)
 801821a:	6802      	ldr	r2, [r0, #0]
 801821c:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8018220:	62d3      	str	r3, [r2, #44]	; 0x2c
 8018222:	60c3      	str	r3, [r0, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 8018224:	f7ee ff0e 	bl	8007044 <HAL_TIM_Base_Start_IT>
					tim7_flag =  2;
 8018228:	4b42      	ldr	r3, [pc, #264]	; (8018334 <PlayWavFile+0x25c>)
 801822a:	2202      	movs	r2, #2
 801822c:	701a      	strb	r2, [r3, #0]
 801822e:	e7da      	b.n	80181e6 <PlayWavFile+0x10e>
				if(tim7_flag > 0) {
 8018230:	4b40      	ldr	r3, [pc, #256]	; (8018334 <PlayWavFile+0x25c>)
 8018232:	781b      	ldrb	r3, [r3, #0]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d133      	bne.n	80182a0 <PlayWavFile+0x1c8>
	while((!bOutOfData) && (file_pos_wide < rekordbox.spectrum_size)) {
 8018238:	4b35      	ldr	r3, [pc, #212]	; (8018310 <PlayWavFile+0x238>)
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d146      	bne.n	80182ce <PlayWavFile+0x1f6>
 8018240:	4b38      	ldr	r3, [pc, #224]	; (8018324 <PlayWavFile+0x24c>)
 8018242:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8018246:	4b3d      	ldr	r3, [pc, #244]	; (801833c <PlayWavFile+0x264>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	429a      	cmp	r2, r3
 801824c:	d93f      	bls.n	80182ce <PlayWavFile+0x1f6>
			if((rmin == 0) && (rsec < 30) && (rsec > 10)) {
 801824e:	4b3c      	ldr	r3, [pc, #240]	; (8018340 <PlayWavFile+0x268>)
 8018250:	f993 3000 	ldrsb.w	r3, [r3]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d1bd      	bne.n	80181d4 <PlayWavFile+0xfc>
 8018258:	4a37      	ldr	r2, [pc, #220]	; (8018338 <PlayWavFile+0x260>)
 801825a:	f992 2000 	ldrsb.w	r2, [r2]
 801825e:	2a1d      	cmp	r2, #29
 8018260:	dcb8      	bgt.n	80181d4 <PlayWavFile+0xfc>
 8018262:	2a0a      	cmp	r2, #10
 8018264:	ddb6      	ble.n	80181d4 <PlayWavFile+0xfc>
				if(tim7_flag == 0) {
 8018266:	4b33      	ldr	r3, [pc, #204]	; (8018334 <PlayWavFile+0x25c>)
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d0a6      	beq.n	80181bc <PlayWavFile+0xe4>
				if(tim7_flag == 2) {
 801826e:	4b31      	ldr	r3, [pc, #196]	; (8018334 <PlayWavFile+0x25c>)
 8018270:	781b      	ldrb	r3, [r3, #0]
 8018272:	2b02      	cmp	r3, #2
 8018274:	d1e0      	bne.n	8018238 <PlayWavFile+0x160>
					HAL_TIM_Base_Stop_IT(&htim7);
 8018276:	4c2e      	ldr	r4, [pc, #184]	; (8018330 <PlayWavFile+0x258>)
 8018278:	4620      	mov	r0, r4
 801827a:	f7ee ff3b 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 801827e:	6823      	ldr	r3, [r4, #0]
 8018280:	f06f 0201 	mvn.w	r2, #1
 8018284:	611a      	str	r2, [r3, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 8018286:	2200      	movs	r2, #0
 8018288:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(&htim7, 4999);
 801828a:	f241 3287 	movw	r2, #4999	; 0x1387
 801828e:	62da      	str	r2, [r3, #44]	; 0x2c
 8018290:	60e2      	str	r2, [r4, #12]
					HAL_TIM_Base_Start_IT(&htim7);
 8018292:	4620      	mov	r0, r4
 8018294:	f7ee fed6 	bl	8007044 <HAL_TIM_Base_Start_IT>
					tim7_flag = 1;
 8018298:	4b26      	ldr	r3, [pc, #152]	; (8018334 <PlayWavFile+0x25c>)
 801829a:	2201      	movs	r2, #1
 801829c:	701a      	strb	r2, [r3, #0]
 801829e:	e7cb      	b.n	8018238 <PlayWavFile+0x160>
					HAL_TIM_Base_Stop_IT(&htim7);
 80182a0:	4c23      	ldr	r4, [pc, #140]	; (8018330 <PlayWavFile+0x258>)
 80182a2:	4620      	mov	r0, r4
 80182a4:	f7ee ff26 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80182a8:	6822      	ldr	r2, [r4, #0]
 80182aa:	f06f 0301 	mvn.w	r3, #1
 80182ae:	6113      	str	r3, [r2, #16]
					__HAL_TIM_SET_COUNTER(&htim7, 0);
 80182b0:	2300      	movs	r3, #0
 80182b2:	6253      	str	r3, [r2, #36]	; 0x24
					tim7_flag = 0;
 80182b4:	4a1f      	ldr	r2, [pc, #124]	; (8018334 <PlayWavFile+0x25c>)
 80182b6:	7013      	strb	r3, [r2, #0]
					if(display.timemode == 0) {
 80182b8:	4b22      	ldr	r3, [pc, #136]	; (8018344 <PlayWavFile+0x26c>)
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	b91b      	cbnz	r3, 80182c6 <PlayWavFile+0x1ee>
						display.trackbarmode = 0;
 80182be:	4b21      	ldr	r3, [pc, #132]	; (8018344 <PlayWavFile+0x26c>)
 80182c0:	2200      	movs	r2, #0
 80182c2:	711a      	strb	r2, [r3, #4]
 80182c4:	e7b8      	b.n	8018238 <PlayWavFile+0x160>
						display.trackbarmode = 1;
 80182c6:	4b1f      	ldr	r3, [pc, #124]	; (8018344 <PlayWavFile+0x26c>)
 80182c8:	2201      	movs	r2, #1
 80182ca:	711a      	strb	r2, [r3, #4]
 80182cc:	e7b4      	b.n	8018238 <PlayWavFile+0x160>
	BSP_AUDIO_OUT_SetVolume(0);
 80182ce:	2000      	movs	r0, #0
 80182d0:	f7fd fdc0 	bl	8015e54 <BSP_AUDIO_OUT_SetVolume>
	wavtagsize = 0;
 80182d4:	2400      	movs	r4, #0
 80182d6:	4b0c      	ldr	r3, [pc, #48]	; (8018308 <PlayWavFile+0x230>)
 80182d8:	601c      	str	r4, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim7);
 80182da:	4d15      	ldr	r5, [pc, #84]	; (8018330 <PlayWavFile+0x258>)
 80182dc:	4628      	mov	r0, r5
 80182de:	f7ee ff09 	bl	80070f4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80182e2:	682b      	ldr	r3, [r5, #0]
 80182e4:	f06f 0201 	mvn.w	r2, #1
 80182e8:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80182ea:	625c      	str	r4, [r3, #36]	; 0x24
	tim7_flag = 0;
 80182ec:	4b11      	ldr	r3, [pc, #68]	; (8018334 <PlayWavFile+0x25c>)
 80182ee:	701c      	strb	r4, [r3, #0]
	if(display.timemode == 0) display.trackbarmode = 0;
 80182f0:	4b14      	ldr	r3, [pc, #80]	; (8018344 <PlayWavFile+0x26c>)
 80182f2:	781b      	ldrb	r3, [r3, #0]
 80182f4:	b91b      	cbnz	r3, 80182fe <PlayWavFile+0x226>
 80182f6:	4b13      	ldr	r3, [pc, #76]	; (8018344 <PlayWavFile+0x26c>)
 80182f8:	711c      	strb	r4, [r3, #4]
}
 80182fa:	b003      	add	sp, #12
 80182fc:	bd30      	pop	{r4, r5, pc}
	else display.trackbarmode = 1;
 80182fe:	4b11      	ldr	r3, [pc, #68]	; (8018344 <PlayWavFile+0x26c>)
 8018300:	2201      	movs	r2, #1
 8018302:	711a      	strb	r2, [r3, #4]
}
 8018304:	e7f9      	b.n	80182fa <PlayWavFile+0x222>
 8018306:	bf00      	nop
 8018308:	20017cac 	.word	0x20017cac
 801830c:	200007a0 	.word	0x200007a0
 8018310:	2000e370 	.word	0x2000e370
 8018314:	20017c80 	.word	0x20017c80
 8018318:	2000eba4 	.word	0x2000eba4
 801831c:	20017220 	.word	0x20017220
 8018320:	200017b0 	.word	0x200017b0
 8018324:	20016618 	.word	0x20016618
 8018328:	2001756c 	.word	0x2001756c
 801832c:	2000005c 	.word	0x2000005c
 8018330:	2001752c 	.word	0x2001752c
 8018334:	2000eba0 	.word	0x2000eba0
 8018338:	2000eb97 	.word	0x2000eb97
 801833c:	2000e3cc 	.word	0x2000e3cc
 8018340:	2000eb96 	.word	0x2000eb96
 8018344:	200005e8 	.word	0x200005e8

08018348 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8018348:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 801834a:	f7fd fea1 	bl	8016090 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 801834e:	2000      	movs	r0, #0
 8018350:	bd08      	pop	{r3, pc}
	...

08018354 <wm8994_SetMute>:
{
 8018354:	b538      	push	{r3, r4, r5, lr}
 8018356:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 8018358:	4a13      	ldr	r2, [pc, #76]	; (80183a8 <wm8994_SetMute+0x54>)
 801835a:	6810      	ldr	r0, [r2, #0]
 801835c:	b180      	cbz	r0, 8018380 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 801835e:	2901      	cmp	r1, #1
 8018360:	d00f      	beq.n	8018382 <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8018362:	b2dd      	uxtb	r5, r3
 8018364:	2200      	movs	r2, #0
 8018366:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801836a:	4628      	mov	r0, r5
 801836c:	f7ff ffec 	bl	8018348 <CODEC_IO_Write>
 8018370:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8018372:	2200      	movs	r2, #0
 8018374:	f240 4122 	movw	r1, #1058	; 0x422
 8018378:	4628      	mov	r0, r5
 801837a:	f7ff ffe5 	bl	8018348 <CODEC_IO_Write>
 801837e:	4420      	add	r0, r4
}
 8018380:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8018382:	b2dd      	uxtb	r5, r3
 8018384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018388:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801838c:	4628      	mov	r0, r5
 801838e:	f7ff ffdb 	bl	8018348 <CODEC_IO_Write>
 8018392:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8018394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018398:	f240 4122 	movw	r1, #1058	; 0x422
 801839c:	4628      	mov	r0, r5
 801839e:	f7ff ffd3 	bl	8018348 <CODEC_IO_Write>
 80183a2:	4420      	add	r0, r4
 80183a4:	e7ec      	b.n	8018380 <wm8994_SetMute+0x2c>
 80183a6:	bf00      	nop
 80183a8:	20017cb4 	.word	0x20017cb4

080183ac <wm8994_Play>:
{
 80183ac:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80183ae:	2100      	movs	r1, #0
 80183b0:	f7ff ffd0 	bl	8018354 <wm8994_SetMute>
}
 80183b4:	bd08      	pop	{r3, pc}

080183b6 <wm8994_Resume>:
{
 80183b6:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80183b8:	2100      	movs	r1, #0
 80183ba:	f7ff ffcb 	bl	8018354 <wm8994_SetMute>
}
 80183be:	bd08      	pop	{r3, pc}

080183c0 <wm8994_Pause>:
{  
 80183c0:	b538      	push	{r3, r4, r5, lr}
 80183c2:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80183c4:	2101      	movs	r1, #1
 80183c6:	f7ff ffc5 	bl	8018354 <wm8994_SetMute>
 80183ca:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80183cc:	2201      	movs	r2, #1
 80183ce:	2102      	movs	r1, #2
 80183d0:	b2e8      	uxtb	r0, r5
 80183d2:	f7ff ffb9 	bl	8018348 <CODEC_IO_Write>
}
 80183d6:	4420      	add	r0, r4
 80183d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080183dc <wm8994_Stop>:
{
 80183dc:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 80183de:	4b1d      	ldr	r3, [pc, #116]	; (8018454 <wm8994_Stop+0x78>)
 80183e0:	681c      	ldr	r4, [r3, #0]
 80183e2:	b90c      	cbnz	r4, 80183e8 <wm8994_Stop+0xc>
}
 80183e4:	4620      	mov	r0, r4
 80183e6:	bd70      	pop	{r4, r5, r6, pc}
 80183e8:	4605      	mov	r5, r0
 80183ea:	460e      	mov	r6, r1
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80183ec:	2101      	movs	r1, #1
 80183ee:	f7ff ffb1 	bl	8018354 <wm8994_SetMute>
 80183f2:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 80183f4:	2e02      	cmp	r6, #2
 80183f6:	d0f5      	beq.n	80183e4 <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80183f8:	b2ed      	uxtb	r5, r5
 80183fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80183fe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8018402:	4628      	mov	r0, r5
 8018404:	f7ff ffa0 	bl	8018348 <CODEC_IO_Write>
 8018408:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 801840a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801840e:	f240 4122 	movw	r1, #1058	; 0x422
 8018412:	4628      	mov	r0, r5
 8018414:	f7ff ff98 	bl	8018348 <CODEC_IO_Write>
 8018418:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 801841a:	2200      	movs	r2, #0
 801841c:	212d      	movs	r1, #45	; 0x2d
 801841e:	4628      	mov	r0, r5
 8018420:	f7ff ff92 	bl	8018348 <CODEC_IO_Write>
 8018424:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8018426:	2200      	movs	r2, #0
 8018428:	212e      	movs	r1, #46	; 0x2e
 801842a:	4628      	mov	r0, r5
 801842c:	f7ff ff8c 	bl	8018348 <CODEC_IO_Write>
 8018430:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8018432:	2200      	movs	r2, #0
 8018434:	2105      	movs	r1, #5
 8018436:	4628      	mov	r0, r5
 8018438:	f7ff ff86 	bl	8018348 <CODEC_IO_Write>
 801843c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 801843e:	2200      	movs	r2, #0
 8018440:	4611      	mov	r1, r2
 8018442:	4628      	mov	r0, r5
 8018444:	f7ff ff80 	bl	8018348 <CODEC_IO_Write>
 8018448:	4404      	add	r4, r0
      outputEnabled = 0;
 801844a:	4b02      	ldr	r3, [pc, #8]	; (8018454 <wm8994_Stop+0x78>)
 801844c:	2200      	movs	r2, #0
 801844e:	601a      	str	r2, [r3, #0]
  return counter;
 8018450:	e7c8      	b.n	80183e4 <wm8994_Stop+0x8>
 8018452:	bf00      	nop
 8018454:	20017cb4 	.word	0x20017cb4

08018458 <wm8994_SetVolume>:
{
 8018458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801845c:	4606      	mov	r6, r0
 801845e:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8018460:	2964      	cmp	r1, #100	; 0x64
 8018462:	d825      	bhi.n	80184b0 <wm8994_SetVolume+0x58>
 8018464:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8018468:	4a46      	ldr	r2, [pc, #280]	; (8018584 <wm8994_SetVolume+0x12c>)
 801846a:	fb82 1203 	smull	r1, r2, r2, r3
 801846e:	17df      	asrs	r7, r3, #31
 8018470:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 8018474:	b2ff      	uxtb	r7, r7
  if (outputEnabled != 0)
 8018476:	4b44      	ldr	r3, [pc, #272]	; (8018588 <wm8994_SetVolume+0x130>)
 8018478:	681d      	ldr	r5, [r3, #0]
 801847a:	b145      	cbz	r5, 801848e <wm8994_SetVolume+0x36>
    if(convertedvol > 0x3E)
 801847c:	2f3e      	cmp	r7, #62	; 0x3e
 801847e:	d819      	bhi.n	80184b4 <wm8994_SetVolume+0x5c>
    else if (Volume == 0)
 8018480:	2c00      	cmp	r4, #0
 8018482:	d13a      	bne.n	80184fa <wm8994_SetVolume+0xa2>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8018484:	2101      	movs	r1, #1
 8018486:	4630      	mov	r0, r6
 8018488:	f7ff ff64 	bl	8018354 <wm8994_SetMute>
 801848c:	4605      	mov	r5, r0
  if (inputEnabled != 0)
 801848e:	4b3f      	ldr	r3, [pc, #252]	; (801858c <wm8994_SetVolume+0x134>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d073      	beq.n	801857e <wm8994_SetVolume+0x126>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8018496:	2c63      	cmp	r4, #99	; 0x63
 8018498:	d851      	bhi.n	801853e <wm8994_SetVolume+0xe6>
 801849a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 801849e:	0124      	lsls	r4, r4, #4
 80184a0:	4b38      	ldr	r3, [pc, #224]	; (8018584 <wm8994_SetVolume+0x12c>)
 80184a2:	fb83 2304 	smull	r2, r3, r3, r4
 80184a6:	17e4      	asrs	r4, r4, #31
 80184a8:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 80184ac:	b2e4      	uxtb	r4, r4
 80184ae:	e047      	b.n	8018540 <wm8994_SetVolume+0xe8>
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80184b0:	2764      	movs	r7, #100	; 0x64
 80184b2:	e7e0      	b.n	8018476 <wm8994_SetVolume+0x1e>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80184b4:	2100      	movs	r1, #0
 80184b6:	4630      	mov	r0, r6
 80184b8:	f7ff ff4c 	bl	8018354 <wm8994_SetMute>
 80184bc:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80184be:	b2f7      	uxtb	r7, r6
 80184c0:	f240 127f 	movw	r2, #383	; 0x17f
 80184c4:	211c      	movs	r1, #28
 80184c6:	4638      	mov	r0, r7
 80184c8:	f7ff ff3e 	bl	8018348 <CODEC_IO_Write>
 80184cc:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80184ce:	f240 127f 	movw	r2, #383	; 0x17f
 80184d2:	211d      	movs	r1, #29
 80184d4:	4638      	mov	r0, r7
 80184d6:	f7ff ff37 	bl	8018348 <CODEC_IO_Write>
 80184da:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80184dc:	f240 127f 	movw	r2, #383	; 0x17f
 80184e0:	2126      	movs	r1, #38	; 0x26
 80184e2:	4638      	mov	r0, r7
 80184e4:	f7ff ff30 	bl	8018348 <CODEC_IO_Write>
 80184e8:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80184ea:	f240 127f 	movw	r2, #383	; 0x17f
 80184ee:	2127      	movs	r1, #39	; 0x27
 80184f0:	4638      	mov	r0, r7
 80184f2:	f7ff ff29 	bl	8018348 <CODEC_IO_Write>
 80184f6:	4405      	add	r5, r0
 80184f8:	e7c9      	b.n	801848e <wm8994_SetVolume+0x36>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80184fa:	2100      	movs	r1, #0
 80184fc:	4630      	mov	r0, r6
 80184fe:	f7ff ff29 	bl	8018354 <wm8994_SetMute>
 8018502:	4605      	mov	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8018504:	fa5f f886 	uxtb.w	r8, r6
 8018508:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
 801850c:	463a      	mov	r2, r7
 801850e:	211c      	movs	r1, #28
 8018510:	4640      	mov	r0, r8
 8018512:	f7ff ff19 	bl	8018348 <CODEC_IO_Write>
 8018516:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8018518:	463a      	mov	r2, r7
 801851a:	211d      	movs	r1, #29
 801851c:	4640      	mov	r0, r8
 801851e:	f7ff ff13 	bl	8018348 <CODEC_IO_Write>
 8018522:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8018524:	463a      	mov	r2, r7
 8018526:	2126      	movs	r1, #38	; 0x26
 8018528:	4640      	mov	r0, r8
 801852a:	f7ff ff0d 	bl	8018348 <CODEC_IO_Write>
 801852e:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8018530:	463a      	mov	r2, r7
 8018532:	2127      	movs	r1, #39	; 0x27
 8018534:	4640      	mov	r0, r8
 8018536:	f7ff ff07 	bl	8018348 <CODEC_IO_Write>
 801853a:	4405      	add	r5, r0
 801853c:	e7a7      	b.n	801848e <wm8994_SetVolume+0x36>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 801853e:	24ef      	movs	r4, #239	; 0xef
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8018540:	b2f6      	uxtb	r6, r6
 8018542:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8018546:	4622      	mov	r2, r4
 8018548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801854c:	4630      	mov	r0, r6
 801854e:	f7ff fefb 	bl	8018348 <CODEC_IO_Write>
 8018552:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8018554:	4622      	mov	r2, r4
 8018556:	f240 4101 	movw	r1, #1025	; 0x401
 801855a:	4630      	mov	r0, r6
 801855c:	f7ff fef4 	bl	8018348 <CODEC_IO_Write>
 8018560:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8018562:	4622      	mov	r2, r4
 8018564:	f240 4104 	movw	r1, #1028	; 0x404
 8018568:	4630      	mov	r0, r6
 801856a:	f7ff feed 	bl	8018348 <CODEC_IO_Write>
 801856e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8018570:	4622      	mov	r2, r4
 8018572:	f240 4105 	movw	r1, #1029	; 0x405
 8018576:	4630      	mov	r0, r6
 8018578:	f7ff fee6 	bl	8018348 <CODEC_IO_Write>
 801857c:	4405      	add	r5, r0
}
 801857e:	4628      	mov	r0, r5
 8018580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018584:	51eb851f 	.word	0x51eb851f
 8018588:	20017cb4 	.word	0x20017cb4
 801858c:	20017cb0 	.word	0x20017cb0

08018590 <wm8994_Init>:
{
 8018590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018594:	4680      	mov	r8, r0
 8018596:	4691      	mov	r9, r2
 8018598:	469a      	mov	sl, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 801859a:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 801859c:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 80185a0:	f7fd fd6c 	bl	801607c <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80185a4:	fa5f f488 	uxtb.w	r4, r8
 80185a8:	2203      	movs	r2, #3
 80185aa:	f44f 7181 	mov.w	r1, #258	; 0x102
 80185ae:	4620      	mov	r0, r4
 80185b0:	f7ff feca 	bl	8018348 <CODEC_IO_Write>
 80185b4:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80185b6:	2200      	movs	r2, #0
 80185b8:	f640 0117 	movw	r1, #2071	; 0x817
 80185bc:	4620      	mov	r0, r4
 80185be:	f7ff fec3 	bl	8018348 <CODEC_IO_Write>
 80185c2:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80185c4:	2200      	movs	r2, #0
 80185c6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80185ca:	4620      	mov	r0, r4
 80185cc:	f7ff febc 	bl	8018348 <CODEC_IO_Write>
 80185d0:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80185d2:	226c      	movs	r2, #108	; 0x6c
 80185d4:	2139      	movs	r1, #57	; 0x39
 80185d6:	4620      	mov	r0, r4
 80185d8:	f7ff feb6 	bl	8018348 <CODEC_IO_Write>
 80185dc:	4406      	add	r6, r0
  if (input_device > 0)
 80185de:	b3c5      	cbz	r5, 8018652 <wm8994_Init+0xc2>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80185e0:	2213      	movs	r2, #19
 80185e2:	2101      	movs	r1, #1
 80185e4:	4620      	mov	r0, r4
 80185e6:	f7ff feaf 	bl	8018348 <CODEC_IO_Write>
 80185ea:	4406      	add	r6, r0
  AUDIO_IO_Delay(50);
 80185ec:	2032      	movs	r0, #50	; 0x32
 80185ee:	f7fd fd8f 	bl	8016110 <AUDIO_IO_Delay>
  if (output_device > 0)
 80185f2:	2f00      	cmp	r7, #0
 80185f4:	f000 80c7 	beq.w	8018786 <wm8994_Init+0x1f6>
    outputEnabled = 1;
 80185f8:	4be6      	ldr	r3, [pc, #920]	; (8018994 <wm8994_Init+0x404>)
 80185fa:	2201      	movs	r2, #1
 80185fc:	601a      	str	r2, [r3, #0]
    switch (output_device)
 80185fe:	2f02      	cmp	r7, #2
 8018600:	d052      	beq.n	80186a8 <wm8994_Init+0x118>
 8018602:	2f03      	cmp	r7, #3
 8018604:	d074      	beq.n	80186f0 <wm8994_Init+0x160>
 8018606:	4297      	cmp	r7, r2
 8018608:	d02a      	beq.n	8018660 <wm8994_Init+0xd0>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 801860a:	f240 3203 	movw	r2, #771	; 0x303
 801860e:	2105      	movs	r1, #5
 8018610:	4620      	mov	r0, r4
 8018612:	f7ff fe99 	bl	8018348 <CODEC_IO_Write>
 8018616:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8018618:	2201      	movs	r2, #1
 801861a:	f240 6101 	movw	r1, #1537	; 0x601
 801861e:	4620      	mov	r0, r4
 8018620:	f7ff fe92 	bl	8018348 <CODEC_IO_Write>
 8018624:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8018626:	2201      	movs	r2, #1
 8018628:	f240 6102 	movw	r1, #1538	; 0x602
 801862c:	4620      	mov	r0, r4
 801862e:	f7ff fe8b 	bl	8018348 <CODEC_IO_Write>
 8018632:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8018634:	2200      	movs	r2, #0
 8018636:	f240 6104 	movw	r1, #1540	; 0x604
 801863a:	4620      	mov	r0, r4
 801863c:	f7ff fe84 	bl	8018348 <CODEC_IO_Write>
 8018640:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8018642:	2200      	movs	r2, #0
 8018644:	f240 6105 	movw	r1, #1541	; 0x605
 8018648:	4620      	mov	r0, r4
 801864a:	f7ff fe7d 	bl	8018348 <CODEC_IO_Write>
 801864e:	4406      	add	r6, r0
      break;
 8018650:	e09c      	b.n	801878c <wm8994_Init+0x1fc>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8018652:	2203      	movs	r2, #3
 8018654:	2101      	movs	r1, #1
 8018656:	4620      	mov	r0, r4
 8018658:	f7ff fe76 	bl	8018348 <CODEC_IO_Write>
 801865c:	4406      	add	r6, r0
 801865e:	e7c5      	b.n	80185ec <wm8994_Init+0x5c>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8018660:	f640 420c 	movw	r2, #3084	; 0xc0c
 8018664:	2105      	movs	r1, #5
 8018666:	4620      	mov	r0, r4
 8018668:	f7ff fe6e 	bl	8018348 <CODEC_IO_Write>
 801866c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 801866e:	2200      	movs	r2, #0
 8018670:	f240 6101 	movw	r1, #1537	; 0x601
 8018674:	4620      	mov	r0, r4
 8018676:	f7ff fe67 	bl	8018348 <CODEC_IO_Write>
 801867a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 801867c:	2200      	movs	r2, #0
 801867e:	f240 6102 	movw	r1, #1538	; 0x602
 8018682:	4620      	mov	r0, r4
 8018684:	f7ff fe60 	bl	8018348 <CODEC_IO_Write>
 8018688:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 801868a:	2202      	movs	r2, #2
 801868c:	f240 6104 	movw	r1, #1540	; 0x604
 8018690:	4620      	mov	r0, r4
 8018692:	f7ff fe59 	bl	8018348 <CODEC_IO_Write>
 8018696:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8018698:	2202      	movs	r2, #2
 801869a:	f240 6105 	movw	r1, #1541	; 0x605
 801869e:	4620      	mov	r0, r4
 80186a0:	f7ff fe52 	bl	8018348 <CODEC_IO_Write>
 80186a4:	4406      	add	r6, r0
      break;
 80186a6:	e071      	b.n	801878c <wm8994_Init+0x1fc>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80186a8:	f240 3203 	movw	r2, #771	; 0x303
 80186ac:	2105      	movs	r1, #5
 80186ae:	4620      	mov	r0, r4
 80186b0:	f7ff fe4a 	bl	8018348 <CODEC_IO_Write>
 80186b4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80186b6:	2201      	movs	r2, #1
 80186b8:	f240 6101 	movw	r1, #1537	; 0x601
 80186bc:	4620      	mov	r0, r4
 80186be:	f7ff fe43 	bl	8018348 <CODEC_IO_Write>
 80186c2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80186c4:	2201      	movs	r2, #1
 80186c6:	f240 6102 	movw	r1, #1538	; 0x602
 80186ca:	4620      	mov	r0, r4
 80186cc:	f7ff fe3c 	bl	8018348 <CODEC_IO_Write>
 80186d0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80186d2:	2200      	movs	r2, #0
 80186d4:	f240 6104 	movw	r1, #1540	; 0x604
 80186d8:	4620      	mov	r0, r4
 80186da:	f7ff fe35 	bl	8018348 <CODEC_IO_Write>
 80186de:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80186e0:	2200      	movs	r2, #0
 80186e2:	f240 6105 	movw	r1, #1541	; 0x605
 80186e6:	4620      	mov	r0, r4
 80186e8:	f7ff fe2e 	bl	8018348 <CODEC_IO_Write>
 80186ec:	4406      	add	r6, r0
      break;
 80186ee:	e04d      	b.n	801878c <wm8994_Init+0x1fc>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80186f0:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80186f4:	d023      	beq.n	801873e <wm8994_Init+0x1ae>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80186f6:	f640 720f 	movw	r2, #3855	; 0xf0f
 80186fa:	2105      	movs	r1, #5
 80186fc:	4620      	mov	r0, r4
 80186fe:	f7ff fe23 	bl	8018348 <CODEC_IO_Write>
 8018702:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8018704:	2201      	movs	r2, #1
 8018706:	f240 6101 	movw	r1, #1537	; 0x601
 801870a:	4620      	mov	r0, r4
 801870c:	f7ff fe1c 	bl	8018348 <CODEC_IO_Write>
 8018710:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8018712:	2201      	movs	r2, #1
 8018714:	f240 6102 	movw	r1, #1538	; 0x602
 8018718:	4620      	mov	r0, r4
 801871a:	f7ff fe15 	bl	8018348 <CODEC_IO_Write>
 801871e:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8018720:	2202      	movs	r2, #2
 8018722:	f240 6104 	movw	r1, #1540	; 0x604
 8018726:	4620      	mov	r0, r4
 8018728:	f7ff fe0e 	bl	8018348 <CODEC_IO_Write>
 801872c:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 801872e:	2202      	movs	r2, #2
 8018730:	f240 6105 	movw	r1, #1541	; 0x605
 8018734:	4620      	mov	r0, r4
 8018736:	f7ff fe07 	bl	8018348 <CODEC_IO_Write>
 801873a:	4406      	add	r6, r0
 801873c:	e026      	b.n	801878c <wm8994_Init+0x1fc>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 801873e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8018742:	2105      	movs	r1, #5
 8018744:	4620      	mov	r0, r4
 8018746:	f7ff fdff 	bl	8018348 <CODEC_IO_Write>
 801874a:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 801874c:	2203      	movs	r2, #3
 801874e:	f240 6101 	movw	r1, #1537	; 0x601
 8018752:	4620      	mov	r0, r4
 8018754:	f7ff fdf8 	bl	8018348 <CODEC_IO_Write>
 8018758:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 801875a:	2203      	movs	r2, #3
 801875c:	f240 6102 	movw	r1, #1538	; 0x602
 8018760:	4620      	mov	r0, r4
 8018762:	f7ff fdf1 	bl	8018348 <CODEC_IO_Write>
 8018766:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8018768:	2203      	movs	r2, #3
 801876a:	f240 6104 	movw	r1, #1540	; 0x604
 801876e:	4620      	mov	r0, r4
 8018770:	f7ff fdea 	bl	8018348 <CODEC_IO_Write>
 8018774:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8018776:	2203      	movs	r2, #3
 8018778:	f240 6105 	movw	r1, #1541	; 0x605
 801877c:	4620      	mov	r0, r4
 801877e:	f7ff fde3 	bl	8018348 <CODEC_IO_Write>
 8018782:	4406      	add	r6, r0
 8018784:	e002      	b.n	801878c <wm8994_Init+0x1fc>
    outputEnabled = 0;
 8018786:	4b83      	ldr	r3, [pc, #524]	; (8018994 <wm8994_Init+0x404>)
 8018788:	2200      	movs	r2, #0
 801878a:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 801878c:	2d00      	cmp	r5, #0
 801878e:	f000 80e8 	beq.w	8018962 <wm8994_Init+0x3d2>
    inputEnabled = 1;
 8018792:	4b81      	ldr	r3, [pc, #516]	; (8018998 <wm8994_Init+0x408>)
 8018794:	2201      	movs	r2, #1
 8018796:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8018798:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 801879c:	d077      	beq.n	801888e <wm8994_Init+0x2fe>
 801879e:	d832      	bhi.n	8018806 <wm8994_Init+0x276>
 80187a0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80187a4:	f000 80b0 	beq.w	8018908 <wm8994_Init+0x378>
 80187a8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80187ac:	f040 80d7 	bne.w	801895e <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80187b0:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80187b4:	2104      	movs	r1, #4
 80187b6:	4620      	mov	r0, r4
 80187b8:	f7ff fdc6 	bl	8018348 <CODEC_IO_Write>
 80187bc:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80187be:	22db      	movs	r2, #219	; 0xdb
 80187c0:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80187c4:	4620      	mov	r0, r4
 80187c6:	f7ff fdbf 	bl	8018348 <CODEC_IO_Write>
 80187ca:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80187cc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80187d0:	2102      	movs	r1, #2
 80187d2:	4620      	mov	r0, r4
 80187d4:	f7ff fdb8 	bl	8018348 <CODEC_IO_Write>
 80187d8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80187da:	2202      	movs	r2, #2
 80187dc:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80187e0:	4620      	mov	r0, r4
 80187e2:	f7ff fdb1 	bl	8018348 <CODEC_IO_Write>
 80187e6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80187e8:	2202      	movs	r2, #2
 80187ea:	f240 6109 	movw	r1, #1545	; 0x609
 80187ee:	4620      	mov	r0, r4
 80187f0:	f7ff fdaa 	bl	8018348 <CODEC_IO_Write>
 80187f4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80187f6:	220e      	movs	r2, #14
 80187f8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80187fc:	4620      	mov	r0, r4
 80187fe:	f7ff fda3 	bl	8018348 <CODEC_IO_Write>
 8018802:	4406      	add	r6, r0
      break;
 8018804:	e0b0      	b.n	8018968 <wm8994_Init+0x3d8>
    switch (input_device)
 8018806:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801880a:	f040 80a8 	bne.w	801895e <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 801880e:	f640 723c 	movw	r2, #3900	; 0xf3c
 8018812:	2104      	movs	r1, #4
 8018814:	4620      	mov	r0, r4
 8018816:	f7ff fd97 	bl	8018348 <CODEC_IO_Write>
 801881a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 801881c:	22db      	movs	r2, #219	; 0xdb
 801881e:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8018822:	4620      	mov	r0, r4
 8018824:	f7ff fd90 	bl	8018348 <CODEC_IO_Write>
 8018828:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 801882a:	22db      	movs	r2, #219	; 0xdb
 801882c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8018830:	4620      	mov	r0, r4
 8018832:	f7ff fd89 	bl	8018348 <CODEC_IO_Write>
 8018836:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8018838:	f246 32a0 	movw	r2, #25504	; 0x63a0
 801883c:	2102      	movs	r1, #2
 801883e:	4620      	mov	r0, r4
 8018840:	f7ff fd82 	bl	8018348 <CODEC_IO_Write>
 8018844:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8018846:	2202      	movs	r2, #2
 8018848:	f240 6106 	movw	r1, #1542	; 0x606
 801884c:	4620      	mov	r0, r4
 801884e:	f7ff fd7b 	bl	8018348 <CODEC_IO_Write>
 8018852:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8018854:	2202      	movs	r2, #2
 8018856:	f240 6107 	movw	r1, #1543	; 0x607
 801885a:	4620      	mov	r0, r4
 801885c:	f7ff fd74 	bl	8018348 <CODEC_IO_Write>
 8018860:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8018862:	2202      	movs	r2, #2
 8018864:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8018868:	4620      	mov	r0, r4
 801886a:	f7ff fd6d 	bl	8018348 <CODEC_IO_Write>
 801886e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8018870:	2202      	movs	r2, #2
 8018872:	f240 6109 	movw	r1, #1545	; 0x609
 8018876:	4620      	mov	r0, r4
 8018878:	f7ff fd66 	bl	8018348 <CODEC_IO_Write>
 801887c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 801887e:	220d      	movs	r2, #13
 8018880:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8018884:	4620      	mov	r0, r4
 8018886:	f7ff fd5f 	bl	8018348 <CODEC_IO_Write>
 801888a:	4406      	add	r6, r0
      break;    
 801888c:	e06c      	b.n	8018968 <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 801888e:	2211      	movs	r2, #17
 8018890:	2128      	movs	r1, #40	; 0x28
 8018892:	4620      	mov	r0, r4
 8018894:	f7ff fd58 	bl	8018348 <CODEC_IO_Write>
 8018898:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 801889a:	2235      	movs	r2, #53	; 0x35
 801889c:	2129      	movs	r1, #41	; 0x29
 801889e:	4620      	mov	r0, r4
 80188a0:	f7ff fd52 	bl	8018348 <CODEC_IO_Write>
 80188a4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80188a6:	2235      	movs	r2, #53	; 0x35
 80188a8:	212a      	movs	r1, #42	; 0x2a
 80188aa:	4620      	mov	r0, r4
 80188ac:	f7ff fd4c 	bl	8018348 <CODEC_IO_Write>
 80188b0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80188b2:	f240 3203 	movw	r2, #771	; 0x303
 80188b6:	2104      	movs	r1, #4
 80188b8:	4620      	mov	r0, r4
 80188ba:	f7ff fd45 	bl	8018348 <CODEC_IO_Write>
 80188be:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80188c0:	22db      	movs	r2, #219	; 0xdb
 80188c2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80188c6:	4620      	mov	r0, r4
 80188c8:	f7ff fd3e 	bl	8018348 <CODEC_IO_Write>
 80188cc:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80188ce:	f246 3250 	movw	r2, #25424	; 0x6350
 80188d2:	2102      	movs	r1, #2
 80188d4:	4620      	mov	r0, r4
 80188d6:	f7ff fd37 	bl	8018348 <CODEC_IO_Write>
 80188da:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80188dc:	2202      	movs	r2, #2
 80188de:	f240 6106 	movw	r1, #1542	; 0x606
 80188e2:	4620      	mov	r0, r4
 80188e4:	f7ff fd30 	bl	8018348 <CODEC_IO_Write>
 80188e8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80188ea:	2202      	movs	r2, #2
 80188ec:	f240 6107 	movw	r1, #1543	; 0x607
 80188f0:	4620      	mov	r0, r4
 80188f2:	f7ff fd29 	bl	8018348 <CODEC_IO_Write>
 80188f6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80188f8:	220d      	movs	r2, #13
 80188fa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80188fe:	4620      	mov	r0, r4
 8018900:	f7ff fd22 	bl	8018348 <CODEC_IO_Write>
 8018904:	4406      	add	r6, r0
      break;
 8018906:	e02f      	b.n	8018968 <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8018908:	f44f 7243 	mov.w	r2, #780	; 0x30c
 801890c:	2104      	movs	r1, #4
 801890e:	4620      	mov	r0, r4
 8018910:	f7ff fd1a 	bl	8018348 <CODEC_IO_Write>
 8018914:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8018916:	22db      	movs	r2, #219	; 0xdb
 8018918:	f44f 6188 	mov.w	r1, #1088	; 0x440
 801891c:	4620      	mov	r0, r4
 801891e:	f7ff fd13 	bl	8018348 <CODEC_IO_Write>
 8018922:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8018924:	f246 3250 	movw	r2, #25424	; 0x6350
 8018928:	2102      	movs	r1, #2
 801892a:	4620      	mov	r0, r4
 801892c:	f7ff fd0c 	bl	8018348 <CODEC_IO_Write>
 8018930:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8018932:	2202      	movs	r2, #2
 8018934:	f240 6106 	movw	r1, #1542	; 0x606
 8018938:	4620      	mov	r0, r4
 801893a:	f7ff fd05 	bl	8018348 <CODEC_IO_Write>
 801893e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8018940:	2202      	movs	r2, #2
 8018942:	f240 6107 	movw	r1, #1543	; 0x607
 8018946:	4620      	mov	r0, r4
 8018948:	f7ff fcfe 	bl	8018348 <CODEC_IO_Write>
 801894c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 801894e:	220d      	movs	r2, #13
 8018950:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8018954:	4620      	mov	r0, r4
 8018956:	f7ff fcf7 	bl	8018348 <CODEC_IO_Write>
 801895a:	4406      	add	r6, r0
      break; 
 801895c:	e004      	b.n	8018968 <wm8994_Init+0x3d8>
      counter++;
 801895e:	3601      	adds	r6, #1
      break;
 8018960:	e002      	b.n	8018968 <wm8994_Init+0x3d8>
    inputEnabled = 0;
 8018962:	4b0d      	ldr	r3, [pc, #52]	; (8018998 <wm8994_Init+0x408>)
 8018964:	2200      	movs	r2, #0
 8018966:	601a      	str	r2, [r3, #0]
  switch (AudioFreq)
 8018968:	f5ba 4ffa 	cmp.w	sl, #32000	; 0x7d00
 801896c:	f000 808b 	beq.w	8018a86 <wm8994_Init+0x4f6>
 8018970:	d823      	bhi.n	80189ba <wm8994_Init+0x42a>
 8018972:	f5ba 5f7a 	cmp.w	sl, #16000	; 0x3e80
 8018976:	d07e      	beq.n	8018a76 <wm8994_Init+0x4e6>
 8018978:	d910      	bls.n	801899c <wm8994_Init+0x40c>
 801897a:	f245 6322 	movw	r3, #22050	; 0x5622
 801897e:	459a      	cmp	sl, r3
 8018980:	f040 8091 	bne.w	8018aa6 <wm8994_Init+0x516>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8018984:	2243      	movs	r2, #67	; 0x43
 8018986:	f44f 7104 	mov.w	r1, #528	; 0x210
 801898a:	4620      	mov	r0, r4
 801898c:	f7ff fcdc 	bl	8018348 <CODEC_IO_Write>
 8018990:	4406      	add	r6, r0
    break;
 8018992:	e034      	b.n	80189fe <wm8994_Init+0x46e>
 8018994:	20017cb4 	.word	0x20017cb4
 8018998:	20017cb0 	.word	0x20017cb0
  switch (AudioFreq)
 801899c:	f5ba 5ffa 	cmp.w	sl, #8000	; 0x1f40
 80189a0:	d026      	beq.n	80189f0 <wm8994_Init+0x460>
 80189a2:	f642 3311 	movw	r3, #11025	; 0x2b11
 80189a6:	459a      	cmp	sl, r3
 80189a8:	d17d      	bne.n	8018aa6 <wm8994_Init+0x516>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80189aa:	2213      	movs	r2, #19
 80189ac:	f44f 7104 	mov.w	r1, #528	; 0x210
 80189b0:	4620      	mov	r0, r4
 80189b2:	f7ff fcc9 	bl	8018348 <CODEC_IO_Write>
 80189b6:	4406      	add	r6, r0
    break;
 80189b8:	e021      	b.n	80189fe <wm8994_Init+0x46e>
  switch (AudioFreq)
 80189ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80189be:	459a      	cmp	sl, r3
 80189c0:	d069      	beq.n	8018a96 <wm8994_Init+0x506>
 80189c2:	4bb5      	ldr	r3, [pc, #724]	; (8018c98 <wm8994_Init+0x708>)
 80189c4:	459a      	cmp	sl, r3
 80189c6:	d107      	bne.n	80189d8 <wm8994_Init+0x448>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80189c8:	22a3      	movs	r2, #163	; 0xa3
 80189ca:	f44f 7104 	mov.w	r1, #528	; 0x210
 80189ce:	4620      	mov	r0, r4
 80189d0:	f7ff fcba 	bl	8018348 <CODEC_IO_Write>
 80189d4:	4406      	add	r6, r0
    break;
 80189d6:	e012      	b.n	80189fe <wm8994_Init+0x46e>
  switch (AudioFreq)
 80189d8:	f64a 4344 	movw	r3, #44100	; 0xac44
 80189dc:	459a      	cmp	sl, r3
 80189de:	d162      	bne.n	8018aa6 <wm8994_Init+0x516>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80189e0:	2273      	movs	r2, #115	; 0x73
 80189e2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80189e6:	4620      	mov	r0, r4
 80189e8:	f7ff fcae 	bl	8018348 <CODEC_IO_Write>
 80189ec:	4406      	add	r6, r0
    break; 
 80189ee:	e006      	b.n	80189fe <wm8994_Init+0x46e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80189f0:	2203      	movs	r2, #3
 80189f2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80189f6:	4620      	mov	r0, r4
 80189f8:	f7ff fca6 	bl	8018348 <CODEC_IO_Write>
 80189fc:	4406      	add	r6, r0
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80189fe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8018a02:	d058      	beq.n	8018ab6 <wm8994_Init+0x526>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8018a04:	f244 0210 	movw	r2, #16400	; 0x4010
 8018a08:	f44f 7140 	mov.w	r1, #768	; 0x300
 8018a0c:	4620      	mov	r0, r4
 8018a0e:	f7ff fc9b 	bl	8018348 <CODEC_IO_Write>
 8018a12:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8018a14:	2200      	movs	r2, #0
 8018a16:	f240 3102 	movw	r1, #770	; 0x302
 8018a1a:	4620      	mov	r0, r4
 8018a1c:	f7ff fc94 	bl	8018348 <CODEC_IO_Write>
 8018a20:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8018a22:	220a      	movs	r2, #10
 8018a24:	f44f 7102 	mov.w	r1, #520	; 0x208
 8018a28:	4620      	mov	r0, r4
 8018a2a:	f7ff fc8d 	bl	8018348 <CODEC_IO_Write>
 8018a2e:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8018a30:	2201      	movs	r2, #1
 8018a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018a36:	4620      	mov	r0, r4
 8018a38:	f7ff fc86 	bl	8018348 <CODEC_IO_Write>
 8018a3c:	4406      	add	r6, r0
  if (output_device > 0)  /* Audio output selected */
 8018a3e:	2f00      	cmp	r7, #0
 8018a40:	d142      	bne.n	8018ac8 <wm8994_Init+0x538>
  if (input_device > 0) /* Audio input selected */
 8018a42:	b1ad      	cbz	r5, 8018a70 <wm8994_Init+0x4e0>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8018a44:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8018a48:	bf18      	it	ne
 8018a4a:	f5b5 7f80 	cmpne.w	r5, #256	; 0x100
 8018a4e:	f000 80d7 	beq.w	8018c00 <wm8994_Init+0x670>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8018a52:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8018a56:	f000 80ea 	beq.w	8018c2e <wm8994_Init+0x69e>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8018a5a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8018a5e:	bf18      	it	ne
 8018a60:	f5b5 7f40 	cmpne.w	r5, #768	; 0x300
 8018a64:	f000 8102 	beq.w	8018c6c <wm8994_Init+0x6dc>
    wm8994_SetVolume(DeviceAddr, Volume);
 8018a68:	4649      	mov	r1, r9
 8018a6a:	4640      	mov	r0, r8
 8018a6c:	f7ff fcf4 	bl	8018458 <wm8994_SetVolume>
}
 8018a70:	4630      	mov	r0, r6
 8018a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8018a76:	2233      	movs	r2, #51	; 0x33
 8018a78:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018a7c:	4620      	mov	r0, r4
 8018a7e:	f7ff fc63 	bl	8018348 <CODEC_IO_Write>
 8018a82:	4406      	add	r6, r0
    break;
 8018a84:	e7bb      	b.n	80189fe <wm8994_Init+0x46e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8018a86:	2263      	movs	r2, #99	; 0x63
 8018a88:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018a8c:	4620      	mov	r0, r4
 8018a8e:	f7ff fc5b 	bl	8018348 <CODEC_IO_Write>
 8018a92:	4406      	add	r6, r0
    break;
 8018a94:	e7b3      	b.n	80189fe <wm8994_Init+0x46e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8018a96:	2283      	movs	r2, #131	; 0x83
 8018a98:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018a9c:	4620      	mov	r0, r4
 8018a9e:	f7ff fc53 	bl	8018348 <CODEC_IO_Write>
 8018aa2:	4406      	add	r6, r0
    break;
 8018aa4:	e7ab      	b.n	80189fe <wm8994_Init+0x46e>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8018aa6:	2283      	movs	r2, #131	; 0x83
 8018aa8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018aac:	4620      	mov	r0, r4
 8018aae:	f7ff fc4b 	bl	8018348 <CODEC_IO_Write>
 8018ab2:	4406      	add	r6, r0
    break; 
 8018ab4:	e7a3      	b.n	80189fe <wm8994_Init+0x46e>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8018ab6:	f244 0218 	movw	r2, #16408	; 0x4018
 8018aba:	f44f 7140 	mov.w	r1, #768	; 0x300
 8018abe:	4620      	mov	r0, r4
 8018ac0:	f7ff fc42 	bl	8018348 <CODEC_IO_Write>
 8018ac4:	4406      	add	r6, r0
 8018ac6:	e7a5      	b.n	8018a14 <wm8994_Init+0x484>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8018ac8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8018acc:	2103      	movs	r1, #3
 8018ace:	4620      	mov	r0, r4
 8018ad0:	f7ff fc3a 	bl	8018348 <CODEC_IO_Write>
 8018ad4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	2122      	movs	r1, #34	; 0x22
 8018ada:	4620      	mov	r0, r4
 8018adc:	f7ff fc34 	bl	8018348 <CODEC_IO_Write>
 8018ae0:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	2123      	movs	r1, #35	; 0x23
 8018ae6:	4620      	mov	r0, r4
 8018ae8:	f7ff fc2e 	bl	8018348 <CODEC_IO_Write>
 8018aec:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8018aee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8018af2:	2136      	movs	r1, #54	; 0x36
 8018af4:	4620      	mov	r0, r4
 8018af6:	f7ff fc27 	bl	8018348 <CODEC_IO_Write>
 8018afa:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8018afc:	f243 0203 	movw	r2, #12291	; 0x3003
 8018b00:	2101      	movs	r1, #1
 8018b02:	4620      	mov	r0, r4
 8018b04:	f7ff fc20 	bl	8018348 <CODEC_IO_Write>
 8018b08:	4406      	add	r6, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8018b0a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8018b0e:	d06f      	beq.n	8018bf0 <wm8994_Init+0x660>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8018b10:	2205      	movs	r2, #5
 8018b12:	2151      	movs	r1, #81	; 0x51
 8018b14:	4620      	mov	r0, r4
 8018b16:	f7ff fc17 	bl	8018348 <CODEC_IO_Write>
 8018b1a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8018b1c:	f243 3203 	movw	r2, #13059	; 0x3303
 8018b20:	2101      	movs	r1, #1
 8018b22:	4620      	mov	r0, r4
 8018b24:	f7ff fc10 	bl	8018348 <CODEC_IO_Write>
 8018b28:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8018b2a:	2222      	movs	r2, #34	; 0x22
 8018b2c:	2160      	movs	r1, #96	; 0x60
 8018b2e:	4620      	mov	r0, r4
 8018b30:	f7ff fc0a 	bl	8018348 <CODEC_IO_Write>
 8018b34:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8018b36:	f649 7225 	movw	r2, #40741	; 0x9f25
 8018b3a:	214c      	movs	r1, #76	; 0x4c
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	f7ff fc03 	bl	8018348 <CODEC_IO_Write>
 8018b42:	4406      	add	r6, r0
    AUDIO_IO_Delay(15);
 8018b44:	200f      	movs	r0, #15
 8018b46:	f7fd fae3 	bl	8016110 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8018b4a:	2201      	movs	r2, #1
 8018b4c:	212d      	movs	r1, #45	; 0x2d
 8018b4e:	4620      	mov	r0, r4
 8018b50:	f7ff fbfa 	bl	8018348 <CODEC_IO_Write>
 8018b54:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8018b56:	2201      	movs	r2, #1
 8018b58:	212e      	movs	r1, #46	; 0x2e
 8018b5a:	4620      	mov	r0, r4
 8018b5c:	f7ff fbf4 	bl	8018348 <CODEC_IO_Write>
 8018b60:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8018b62:	f44f 724c 	mov.w	r2, #816	; 0x330
 8018b66:	2103      	movs	r1, #3
 8018b68:	4620      	mov	r0, r4
 8018b6a:	f7ff fbed 	bl	8018348 <CODEC_IO_Write>
 8018b6e:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8018b70:	2233      	movs	r2, #51	; 0x33
 8018b72:	2154      	movs	r1, #84	; 0x54
 8018b74:	4620      	mov	r0, r4
 8018b76:	f7ff fbe7 	bl	8018348 <CODEC_IO_Write>
 8018b7a:	4406      	add	r6, r0
    AUDIO_IO_Delay(250);
 8018b7c:	20fa      	movs	r0, #250	; 0xfa
 8018b7e:	f7fd fac7 	bl	8016110 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8018b82:	22ee      	movs	r2, #238	; 0xee
 8018b84:	2160      	movs	r1, #96	; 0x60
 8018b86:	4620      	mov	r0, r4
 8018b88:	f7ff fbde 	bl	8018348 <CODEC_IO_Write>
 8018b8c:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8018b8e:	22c0      	movs	r2, #192	; 0xc0
 8018b90:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8018b94:	4620      	mov	r0, r4
 8018b96:	f7ff fbd7 	bl	8018348 <CODEC_IO_Write>
 8018b9a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8018b9c:	22c0      	movs	r2, #192	; 0xc0
 8018b9e:	f240 6111 	movw	r1, #1553	; 0x611
 8018ba2:	4620      	mov	r0, r4
 8018ba4:	f7ff fbd0 	bl	8018348 <CODEC_IO_Write>
 8018ba8:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8018baa:	2200      	movs	r2, #0
 8018bac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8018bb0:	4620      	mov	r0, r4
 8018bb2:	f7ff fbc9 	bl	8018348 <CODEC_IO_Write>
 8018bb6:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8018bb8:	22c0      	movs	r2, #192	; 0xc0
 8018bba:	f240 6112 	movw	r1, #1554	; 0x612
 8018bbe:	4620      	mov	r0, r4
 8018bc0:	f7ff fbc2 	bl	8018348 <CODEC_IO_Write>
 8018bc4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8018bc6:	22c0      	movs	r2, #192	; 0xc0
 8018bc8:	f240 6113 	movw	r1, #1555	; 0x613
 8018bcc:	4620      	mov	r0, r4
 8018bce:	f7ff fbbb 	bl	8018348 <CODEC_IO_Write>
 8018bd2:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	f240 4122 	movw	r1, #1058	; 0x422
 8018bda:	4620      	mov	r0, r4
 8018bdc:	f7ff fbb4 	bl	8018348 <CODEC_IO_Write>
 8018be0:	4406      	add	r6, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 8018be2:	4649      	mov	r1, r9
 8018be4:	4640      	mov	r0, r8
 8018be6:	f7ff fc37 	bl	8018458 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8018bea:	f243 3703 	movw	r7, #13059	; 0x3303
 8018bee:	e728      	b.n	8018a42 <wm8994_Init+0x4b2>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8018bf0:	f240 2205 	movw	r2, #517	; 0x205
 8018bf4:	2151      	movs	r1, #81	; 0x51
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	f7ff fba6 	bl	8018348 <CODEC_IO_Write>
 8018bfc:	4406      	add	r6, r0
 8018bfe:	e78d      	b.n	8018b1c <wm8994_Init+0x58c>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8018c00:	f047 0213 	orr.w	r2, r7, #19
 8018c04:	2101      	movs	r1, #1
 8018c06:	4620      	mov	r0, r4
 8018c08:	f7ff fb9e 	bl	8018348 <CODEC_IO_Write>
 8018c0c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8018c0e:	2202      	movs	r2, #2
 8018c10:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8018c14:	4620      	mov	r0, r4
 8018c16:	f7ff fb97 	bl	8018348 <CODEC_IO_Write>
 8018c1a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8018c1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8018c20:	f240 4111 	movw	r1, #1041	; 0x411
 8018c24:	4620      	mov	r0, r4
 8018c26:	f7ff fb8f 	bl	8018348 <CODEC_IO_Write>
 8018c2a:	4406      	add	r6, r0
 8018c2c:	e71c      	b.n	8018a68 <wm8994_Init+0x4d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8018c2e:	f047 0213 	orr.w	r2, r7, #19
 8018c32:	2101      	movs	r1, #1
 8018c34:	4620      	mov	r0, r4
 8018c36:	f7ff fb87 	bl	8018348 <CODEC_IO_Write>
 8018c3a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8018c3c:	2202      	movs	r2, #2
 8018c3e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8018c42:	4620      	mov	r0, r4
 8018c44:	f7ff fb80 	bl	8018348 <CODEC_IO_Write>
 8018c48:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8018c4a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8018c4e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8018c52:	4620      	mov	r0, r4
 8018c54:	f7ff fb78 	bl	8018348 <CODEC_IO_Write>
 8018c58:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8018c5a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8018c5e:	f240 4111 	movw	r1, #1041	; 0x411
 8018c62:	4620      	mov	r0, r4
 8018c64:	f7ff fb70 	bl	8018348 <CODEC_IO_Write>
 8018c68:	4406      	add	r6, r0
 8018c6a:	e6fd      	b.n	8018a68 <wm8994_Init+0x4d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8018c6c:	220b      	movs	r2, #11
 8018c6e:	2118      	movs	r1, #24
 8018c70:	4620      	mov	r0, r4
 8018c72:	f7ff fb69 	bl	8018348 <CODEC_IO_Write>
 8018c76:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8018c78:	220b      	movs	r2, #11
 8018c7a:	211a      	movs	r1, #26
 8018c7c:	4620      	mov	r0, r4
 8018c7e:	f7ff fb63 	bl	8018348 <CODEC_IO_Write>
 8018c82:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8018c84:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8018c88:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f7ff fb5b 	bl	8018348 <CODEC_IO_Write>
 8018c92:	4406      	add	r6, r0
 8018c94:	e6e8      	b.n	8018a68 <wm8994_Init+0x4d8>
 8018c96:	bf00      	nop
 8018c98:	00017700 	.word	0x00017700

08018c9c <wm8994_SetOutputMode>:
{
 8018c9c:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 8018c9e:	2902      	cmp	r1, #2
 8018ca0:	d04d      	beq.n	8018d3e <wm8994_SetOutputMode+0xa2>
 8018ca2:	2903      	cmp	r1, #3
 8018ca4:	d070      	beq.n	8018d88 <wm8994_SetOutputMode+0xec>
 8018ca6:	2901      	cmp	r1, #1
 8018ca8:	d024      	beq.n	8018cf4 <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8018caa:	b2c4      	uxtb	r4, r0
 8018cac:	f240 3203 	movw	r2, #771	; 0x303
 8018cb0:	2105      	movs	r1, #5
 8018cb2:	4620      	mov	r0, r4
 8018cb4:	f7ff fb48 	bl	8018348 <CODEC_IO_Write>
 8018cb8:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8018cba:	2201      	movs	r2, #1
 8018cbc:	f240 6101 	movw	r1, #1537	; 0x601
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	f7ff fb41 	bl	8018348 <CODEC_IO_Write>
 8018cc6:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8018cc8:	2201      	movs	r2, #1
 8018cca:	f240 6102 	movw	r1, #1538	; 0x602
 8018cce:	4620      	mov	r0, r4
 8018cd0:	f7ff fb3a 	bl	8018348 <CODEC_IO_Write>
 8018cd4:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	f240 6104 	movw	r1, #1540	; 0x604
 8018cdc:	4620      	mov	r0, r4
 8018cde:	f7ff fb33 	bl	8018348 <CODEC_IO_Write>
 8018ce2:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8018ce4:	2200      	movs	r2, #0
 8018ce6:	f240 6105 	movw	r1, #1541	; 0x605
 8018cea:	4620      	mov	r0, r4
 8018cec:	f7ff fb2c 	bl	8018348 <CODEC_IO_Write>
 8018cf0:	4428      	add	r0, r5
  return counter;
 8018cf2:	e023      	b.n	8018d3c <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8018cf4:	b2c4      	uxtb	r4, r0
 8018cf6:	f640 420c 	movw	r2, #3084	; 0xc0c
 8018cfa:	2105      	movs	r1, #5
 8018cfc:	4620      	mov	r0, r4
 8018cfe:	f7ff fb23 	bl	8018348 <CODEC_IO_Write>
 8018d02:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8018d04:	2200      	movs	r2, #0
 8018d06:	f240 6101 	movw	r1, #1537	; 0x601
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	f7ff fb1c 	bl	8018348 <CODEC_IO_Write>
 8018d10:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8018d12:	2200      	movs	r2, #0
 8018d14:	f240 6102 	movw	r1, #1538	; 0x602
 8018d18:	4620      	mov	r0, r4
 8018d1a:	f7ff fb15 	bl	8018348 <CODEC_IO_Write>
 8018d1e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8018d20:	2202      	movs	r2, #2
 8018d22:	f240 6104 	movw	r1, #1540	; 0x604
 8018d26:	4620      	mov	r0, r4
 8018d28:	f7ff fb0e 	bl	8018348 <CODEC_IO_Write>
 8018d2c:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8018d2e:	2202      	movs	r2, #2
 8018d30:	f240 6105 	movw	r1, #1541	; 0x605
 8018d34:	4620      	mov	r0, r4
 8018d36:	f7ff fb07 	bl	8018348 <CODEC_IO_Write>
 8018d3a:	4428      	add	r0, r5
}
 8018d3c:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8018d3e:	b2c4      	uxtb	r4, r0
 8018d40:	f240 3203 	movw	r2, #771	; 0x303
 8018d44:	2105      	movs	r1, #5
 8018d46:	4620      	mov	r0, r4
 8018d48:	f7ff fafe 	bl	8018348 <CODEC_IO_Write>
 8018d4c:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8018d4e:	2201      	movs	r2, #1
 8018d50:	f240 6101 	movw	r1, #1537	; 0x601
 8018d54:	4620      	mov	r0, r4
 8018d56:	f7ff faf7 	bl	8018348 <CODEC_IO_Write>
 8018d5a:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8018d5c:	2201      	movs	r2, #1
 8018d5e:	f240 6102 	movw	r1, #1538	; 0x602
 8018d62:	4620      	mov	r0, r4
 8018d64:	f7ff faf0 	bl	8018348 <CODEC_IO_Write>
 8018d68:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	f240 6104 	movw	r1, #1540	; 0x604
 8018d70:	4620      	mov	r0, r4
 8018d72:	f7ff fae9 	bl	8018348 <CODEC_IO_Write>
 8018d76:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8018d78:	2200      	movs	r2, #0
 8018d7a:	f240 6105 	movw	r1, #1541	; 0x605
 8018d7e:	4620      	mov	r0, r4
 8018d80:	f7ff fae2 	bl	8018348 <CODEC_IO_Write>
 8018d84:	4428      	add	r0, r5
    break;
 8018d86:	e7d9      	b.n	8018d3c <wm8994_SetOutputMode+0xa0>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8018d88:	b2c4      	uxtb	r4, r0
 8018d8a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8018d8e:	2105      	movs	r1, #5
 8018d90:	4620      	mov	r0, r4
 8018d92:	f7ff fad9 	bl	8018348 <CODEC_IO_Write>
 8018d96:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8018d98:	2201      	movs	r2, #1
 8018d9a:	f240 6101 	movw	r1, #1537	; 0x601
 8018d9e:	4620      	mov	r0, r4
 8018da0:	f7ff fad2 	bl	8018348 <CODEC_IO_Write>
 8018da4:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8018da6:	2201      	movs	r2, #1
 8018da8:	f240 6102 	movw	r1, #1538	; 0x602
 8018dac:	4620      	mov	r0, r4
 8018dae:	f7ff facb 	bl	8018348 <CODEC_IO_Write>
 8018db2:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8018db4:	2202      	movs	r2, #2
 8018db6:	f240 6104 	movw	r1, #1540	; 0x604
 8018dba:	4620      	mov	r0, r4
 8018dbc:	f7ff fac4 	bl	8018348 <CODEC_IO_Write>
 8018dc0:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8018dc2:	2202      	movs	r2, #2
 8018dc4:	f240 6105 	movw	r1, #1541	; 0x605
 8018dc8:	4620      	mov	r0, r4
 8018dca:	f7ff fabd 	bl	8018348 <CODEC_IO_Write>
 8018dce:	4428      	add	r0, r5
    break;
 8018dd0:	e7b4      	b.n	8018d3c <wm8994_SetOutputMode+0xa0>
	...

08018dd4 <wm8994_SetFrequency>:
{
 8018dd4:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8018dd6:	f245 6322 	movw	r3, #22050	; 0x5622
 8018dda:	4299      	cmp	r1, r3
 8018ddc:	d03f      	beq.n	8018e5e <wm8994_SetFrequency+0x8a>
 8018dde:	d817      	bhi.n	8018e10 <wm8994_SetFrequency+0x3c>
 8018de0:	f642 3311 	movw	r3, #11025	; 0x2b11
 8018de4:	4299      	cmp	r1, r3
 8018de6:	d033      	beq.n	8018e50 <wm8994_SetFrequency+0x7c>
 8018de8:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8018dec:	d106      	bne.n	8018dfc <wm8994_SetFrequency+0x28>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8018dee:	2233      	movs	r2, #51	; 0x33
 8018df0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018df4:	b2c0      	uxtb	r0, r0
 8018df6:	f7ff faa7 	bl	8018348 <CODEC_IO_Write>
    break;
 8018dfa:	e008      	b.n	8018e0e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8018dfc:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8018e00:	d134      	bne.n	8018e6c <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8018e02:	2203      	movs	r2, #3
 8018e04:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018e08:	b2c0      	uxtb	r0, r0
 8018e0a:	f7ff fa9d 	bl	8018348 <CODEC_IO_Write>
}
 8018e0e:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 8018e10:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8018e14:	4299      	cmp	r1, r3
 8018e16:	d014      	beq.n	8018e42 <wm8994_SetFrequency+0x6e>
 8018e18:	4b18      	ldr	r3, [pc, #96]	; (8018e7c <wm8994_SetFrequency+0xa8>)
 8018e1a:	4299      	cmp	r1, r3
 8018e1c:	d106      	bne.n	8018e2c <wm8994_SetFrequency+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8018e1e:	22a3      	movs	r2, #163	; 0xa3
 8018e20:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018e24:	b2c0      	uxtb	r0, r0
 8018e26:	f7ff fa8f 	bl	8018348 <CODEC_IO_Write>
    break;
 8018e2a:	e7f0      	b.n	8018e0e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8018e2c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8018e30:	4299      	cmp	r1, r3
 8018e32:	d11b      	bne.n	8018e6c <wm8994_SetFrequency+0x98>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8018e34:	2273      	movs	r2, #115	; 0x73
 8018e36:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018e3a:	b2c0      	uxtb	r0, r0
 8018e3c:	f7ff fa84 	bl	8018348 <CODEC_IO_Write>
    break; 
 8018e40:	e7e5      	b.n	8018e0e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8018e42:	2283      	movs	r2, #131	; 0x83
 8018e44:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018e48:	b2c0      	uxtb	r0, r0
 8018e4a:	f7ff fa7d 	bl	8018348 <CODEC_IO_Write>
    break;
 8018e4e:	e7de      	b.n	8018e0e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8018e50:	2213      	movs	r2, #19
 8018e52:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018e56:	b2c0      	uxtb	r0, r0
 8018e58:	f7ff fa76 	bl	8018348 <CODEC_IO_Write>
    break;
 8018e5c:	e7d7      	b.n	8018e0e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8018e5e:	2243      	movs	r2, #67	; 0x43
 8018e60:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018e64:	b2c0      	uxtb	r0, r0
 8018e66:	f7ff fa6f 	bl	8018348 <CODEC_IO_Write>
    break;
 8018e6a:	e7d0      	b.n	8018e0e <wm8994_SetFrequency+0x3a>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8018e6c:	2283      	movs	r2, #131	; 0x83
 8018e6e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8018e72:	b2c0      	uxtb	r0, r0
 8018e74:	f7ff fa68 	bl	8018348 <CODEC_IO_Write>
  return counter;
 8018e78:	e7c9      	b.n	8018e0e <wm8994_SetFrequency+0x3a>
 8018e7a:	bf00      	nop
 8018e7c:	00017700 	.word	0x00017700

08018e80 <wm8994_Reset>:
{
 8018e80:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8018e82:	2200      	movs	r2, #0
 8018e84:	4611      	mov	r1, r2
 8018e86:	b2c0      	uxtb	r0, r0
 8018e88:	f7ff fa5e 	bl	8018348 <CODEC_IO_Write>
  outputEnabled = 0;
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	4a02      	ldr	r2, [pc, #8]	; (8018e98 <wm8994_Reset+0x18>)
 8018e90:	6013      	str	r3, [r2, #0]
  inputEnabled=0;
 8018e92:	4a02      	ldr	r2, [pc, #8]	; (8018e9c <wm8994_Reset+0x1c>)
 8018e94:	6013      	str	r3, [r2, #0]
}
 8018e96:	bd08      	pop	{r3, pc}
 8018e98:	20017cb4 	.word	0x20017cb4
 8018e9c:	20017cb0 	.word	0x20017cb0

08018ea0 <wm8994_DeInit>:
{
 8018ea0:	b508      	push	{r3, lr}
  /* Deinitialize Audio Codec interface */  AUDIO_IO_DeInit();
 8018ea2:	f7fd f8f3 	bl	801608c <AUDIO_IO_DeInit>
}
 8018ea6:	bd08      	pop	{r3, pc}

08018ea8 <wm8994_ReadID>:
{
 8018ea8:	b510      	push	{r4, lr}
 8018eaa:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8018eac:	f7fd f8e6 	bl	801607c <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8018eb0:	2100      	movs	r1, #0
 8018eb2:	b2e0      	uxtb	r0, r4
 8018eb4:	f7fd f90c 	bl	80160d0 <AUDIO_IO_Read>
}
 8018eb8:	bd10      	pop	{r4, pc}
	...

08018ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8018ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018ef4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8018ec0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8018ec2:	e003      	b.n	8018ecc <LoopCopyDataInit>

08018ec4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8018ec4:	4b0c      	ldr	r3, [pc, #48]	; (8018ef8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8018ec6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8018ec8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8018eca:	3104      	adds	r1, #4

08018ecc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8018ecc:	480b      	ldr	r0, [pc, #44]	; (8018efc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8018ece:	4b0c      	ldr	r3, [pc, #48]	; (8018f00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8018ed0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8018ed2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8018ed4:	d3f6      	bcc.n	8018ec4 <CopyDataInit>
  ldr  r2, =_sbss
 8018ed6:	4a0b      	ldr	r2, [pc, #44]	; (8018f04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8018ed8:	e002      	b.n	8018ee0 <LoopFillZerobss>

08018eda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8018eda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8018edc:	f842 3b04 	str.w	r3, [r2], #4

08018ee0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8018ee0:	4b09      	ldr	r3, [pc, #36]	; (8018f08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8018ee2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8018ee4:	d3f9      	bcc.n	8018eda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8018ee6:	f7fe fbf3 	bl	80176d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018eea:	f000 f817 	bl	8018f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018eee:	f7fb f927 	bl	8014140 <main>
  bx  lr    
 8018ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8018ef4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8018ef8:	0801eabc 	.word	0x0801eabc
  ldr  r0, =_sdata
 8018efc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8018f00:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 8018f04:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8018f08:	20017cc8 	.word	0x20017cc8

08018f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018f0c:	e7fe      	b.n	8018f0c <ADC_IRQHandler>
	...

08018f10 <__errno>:
 8018f10:	4b01      	ldr	r3, [pc, #4]	; (8018f18 <__errno+0x8>)
 8018f12:	6818      	ldr	r0, [r3, #0]
 8018f14:	4770      	bx	lr
 8018f16:	bf00      	nop
 8018f18:	200000dc 	.word	0x200000dc

08018f1c <__libc_init_array>:
 8018f1c:	b570      	push	{r4, r5, r6, lr}
 8018f1e:	4d0d      	ldr	r5, [pc, #52]	; (8018f54 <__libc_init_array+0x38>)
 8018f20:	4c0d      	ldr	r4, [pc, #52]	; (8018f58 <__libc_init_array+0x3c>)
 8018f22:	1b64      	subs	r4, r4, r5
 8018f24:	10a4      	asrs	r4, r4, #2
 8018f26:	2600      	movs	r6, #0
 8018f28:	42a6      	cmp	r6, r4
 8018f2a:	d109      	bne.n	8018f40 <__libc_init_array+0x24>
 8018f2c:	4d0b      	ldr	r5, [pc, #44]	; (8018f5c <__libc_init_array+0x40>)
 8018f2e:	4c0c      	ldr	r4, [pc, #48]	; (8018f60 <__libc_init_array+0x44>)
 8018f30:	f000 fcde 	bl	80198f0 <_init>
 8018f34:	1b64      	subs	r4, r4, r5
 8018f36:	10a4      	asrs	r4, r4, #2
 8018f38:	2600      	movs	r6, #0
 8018f3a:	42a6      	cmp	r6, r4
 8018f3c:	d105      	bne.n	8018f4a <__libc_init_array+0x2e>
 8018f3e:	bd70      	pop	{r4, r5, r6, pc}
 8018f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f44:	4798      	blx	r3
 8018f46:	3601      	adds	r6, #1
 8018f48:	e7ee      	b.n	8018f28 <__libc_init_array+0xc>
 8018f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f4e:	4798      	blx	r3
 8018f50:	3601      	adds	r6, #1
 8018f52:	e7f2      	b.n	8018f3a <__libc_init_array+0x1e>
 8018f54:	0801eab4 	.word	0x0801eab4
 8018f58:	0801eab4 	.word	0x0801eab4
 8018f5c:	0801eab4 	.word	0x0801eab4
 8018f60:	0801eab8 	.word	0x0801eab8

08018f64 <malloc>:
 8018f64:	4b02      	ldr	r3, [pc, #8]	; (8018f70 <malloc+0xc>)
 8018f66:	4601      	mov	r1, r0
 8018f68:	6818      	ldr	r0, [r3, #0]
 8018f6a:	f000 b8a7 	b.w	80190bc <_malloc_r>
 8018f6e:	bf00      	nop
 8018f70:	200000dc 	.word	0x200000dc

08018f74 <free>:
 8018f74:	4b02      	ldr	r3, [pc, #8]	; (8018f80 <free+0xc>)
 8018f76:	4601      	mov	r1, r0
 8018f78:	6818      	ldr	r0, [r3, #0]
 8018f7a:	f000 b833 	b.w	8018fe4 <_free_r>
 8018f7e:	bf00      	nop
 8018f80:	200000dc 	.word	0x200000dc

08018f84 <memcpy>:
 8018f84:	440a      	add	r2, r1
 8018f86:	4291      	cmp	r1, r2
 8018f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8018f8c:	d100      	bne.n	8018f90 <memcpy+0xc>
 8018f8e:	4770      	bx	lr
 8018f90:	b510      	push	{r4, lr}
 8018f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f9a:	4291      	cmp	r1, r2
 8018f9c:	d1f9      	bne.n	8018f92 <memcpy+0xe>
 8018f9e:	bd10      	pop	{r4, pc}

08018fa0 <memmove>:
 8018fa0:	4288      	cmp	r0, r1
 8018fa2:	b510      	push	{r4, lr}
 8018fa4:	eb01 0402 	add.w	r4, r1, r2
 8018fa8:	d902      	bls.n	8018fb0 <memmove+0x10>
 8018faa:	4284      	cmp	r4, r0
 8018fac:	4623      	mov	r3, r4
 8018fae:	d807      	bhi.n	8018fc0 <memmove+0x20>
 8018fb0:	1e43      	subs	r3, r0, #1
 8018fb2:	42a1      	cmp	r1, r4
 8018fb4:	d008      	beq.n	8018fc8 <memmove+0x28>
 8018fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018fbe:	e7f8      	b.n	8018fb2 <memmove+0x12>
 8018fc0:	4402      	add	r2, r0
 8018fc2:	4601      	mov	r1, r0
 8018fc4:	428a      	cmp	r2, r1
 8018fc6:	d100      	bne.n	8018fca <memmove+0x2a>
 8018fc8:	bd10      	pop	{r4, pc}
 8018fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018fd2:	e7f7      	b.n	8018fc4 <memmove+0x24>

08018fd4 <memset>:
 8018fd4:	4402      	add	r2, r0
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	4293      	cmp	r3, r2
 8018fda:	d100      	bne.n	8018fde <memset+0xa>
 8018fdc:	4770      	bx	lr
 8018fde:	f803 1b01 	strb.w	r1, [r3], #1
 8018fe2:	e7f9      	b.n	8018fd8 <memset+0x4>

08018fe4 <_free_r>:
 8018fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018fe6:	2900      	cmp	r1, #0
 8018fe8:	d044      	beq.n	8019074 <_free_r+0x90>
 8018fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fee:	9001      	str	r0, [sp, #4]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8018ff6:	bfb8      	it	lt
 8018ff8:	18e4      	addlt	r4, r4, r3
 8018ffa:	f000 f943 	bl	8019284 <__malloc_lock>
 8018ffe:	4a1e      	ldr	r2, [pc, #120]	; (8019078 <_free_r+0x94>)
 8019000:	9801      	ldr	r0, [sp, #4]
 8019002:	6813      	ldr	r3, [r2, #0]
 8019004:	b933      	cbnz	r3, 8019014 <_free_r+0x30>
 8019006:	6063      	str	r3, [r4, #4]
 8019008:	6014      	str	r4, [r2, #0]
 801900a:	b003      	add	sp, #12
 801900c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019010:	f000 b93e 	b.w	8019290 <__malloc_unlock>
 8019014:	42a3      	cmp	r3, r4
 8019016:	d908      	bls.n	801902a <_free_r+0x46>
 8019018:	6825      	ldr	r5, [r4, #0]
 801901a:	1961      	adds	r1, r4, r5
 801901c:	428b      	cmp	r3, r1
 801901e:	bf01      	itttt	eq
 8019020:	6819      	ldreq	r1, [r3, #0]
 8019022:	685b      	ldreq	r3, [r3, #4]
 8019024:	1949      	addeq	r1, r1, r5
 8019026:	6021      	streq	r1, [r4, #0]
 8019028:	e7ed      	b.n	8019006 <_free_r+0x22>
 801902a:	461a      	mov	r2, r3
 801902c:	685b      	ldr	r3, [r3, #4]
 801902e:	b10b      	cbz	r3, 8019034 <_free_r+0x50>
 8019030:	42a3      	cmp	r3, r4
 8019032:	d9fa      	bls.n	801902a <_free_r+0x46>
 8019034:	6811      	ldr	r1, [r2, #0]
 8019036:	1855      	adds	r5, r2, r1
 8019038:	42a5      	cmp	r5, r4
 801903a:	d10b      	bne.n	8019054 <_free_r+0x70>
 801903c:	6824      	ldr	r4, [r4, #0]
 801903e:	4421      	add	r1, r4
 8019040:	1854      	adds	r4, r2, r1
 8019042:	42a3      	cmp	r3, r4
 8019044:	6011      	str	r1, [r2, #0]
 8019046:	d1e0      	bne.n	801900a <_free_r+0x26>
 8019048:	681c      	ldr	r4, [r3, #0]
 801904a:	685b      	ldr	r3, [r3, #4]
 801904c:	6053      	str	r3, [r2, #4]
 801904e:	4421      	add	r1, r4
 8019050:	6011      	str	r1, [r2, #0]
 8019052:	e7da      	b.n	801900a <_free_r+0x26>
 8019054:	d902      	bls.n	801905c <_free_r+0x78>
 8019056:	230c      	movs	r3, #12
 8019058:	6003      	str	r3, [r0, #0]
 801905a:	e7d6      	b.n	801900a <_free_r+0x26>
 801905c:	6825      	ldr	r5, [r4, #0]
 801905e:	1961      	adds	r1, r4, r5
 8019060:	428b      	cmp	r3, r1
 8019062:	bf04      	itt	eq
 8019064:	6819      	ldreq	r1, [r3, #0]
 8019066:	685b      	ldreq	r3, [r3, #4]
 8019068:	6063      	str	r3, [r4, #4]
 801906a:	bf04      	itt	eq
 801906c:	1949      	addeq	r1, r1, r5
 801906e:	6021      	streq	r1, [r4, #0]
 8019070:	6054      	str	r4, [r2, #4]
 8019072:	e7ca      	b.n	801900a <_free_r+0x26>
 8019074:	b003      	add	sp, #12
 8019076:	bd30      	pop	{r4, r5, pc}
 8019078:	20017cb8 	.word	0x20017cb8

0801907c <sbrk_aligned>:
 801907c:	b570      	push	{r4, r5, r6, lr}
 801907e:	4e0e      	ldr	r6, [pc, #56]	; (80190b8 <sbrk_aligned+0x3c>)
 8019080:	460c      	mov	r4, r1
 8019082:	6831      	ldr	r1, [r6, #0]
 8019084:	4605      	mov	r5, r0
 8019086:	b911      	cbnz	r1, 801908e <sbrk_aligned+0x12>
 8019088:	f000 f88c 	bl	80191a4 <_sbrk_r>
 801908c:	6030      	str	r0, [r6, #0]
 801908e:	4621      	mov	r1, r4
 8019090:	4628      	mov	r0, r5
 8019092:	f000 f887 	bl	80191a4 <_sbrk_r>
 8019096:	1c43      	adds	r3, r0, #1
 8019098:	d00a      	beq.n	80190b0 <sbrk_aligned+0x34>
 801909a:	1cc4      	adds	r4, r0, #3
 801909c:	f024 0403 	bic.w	r4, r4, #3
 80190a0:	42a0      	cmp	r0, r4
 80190a2:	d007      	beq.n	80190b4 <sbrk_aligned+0x38>
 80190a4:	1a21      	subs	r1, r4, r0
 80190a6:	4628      	mov	r0, r5
 80190a8:	f000 f87c 	bl	80191a4 <_sbrk_r>
 80190ac:	3001      	adds	r0, #1
 80190ae:	d101      	bne.n	80190b4 <sbrk_aligned+0x38>
 80190b0:	f04f 34ff 	mov.w	r4, #4294967295
 80190b4:	4620      	mov	r0, r4
 80190b6:	bd70      	pop	{r4, r5, r6, pc}
 80190b8:	20017cbc 	.word	0x20017cbc

080190bc <_malloc_r>:
 80190bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190c0:	1ccd      	adds	r5, r1, #3
 80190c2:	f025 0503 	bic.w	r5, r5, #3
 80190c6:	3508      	adds	r5, #8
 80190c8:	2d0c      	cmp	r5, #12
 80190ca:	bf38      	it	cc
 80190cc:	250c      	movcc	r5, #12
 80190ce:	2d00      	cmp	r5, #0
 80190d0:	4607      	mov	r7, r0
 80190d2:	db01      	blt.n	80190d8 <_malloc_r+0x1c>
 80190d4:	42a9      	cmp	r1, r5
 80190d6:	d905      	bls.n	80190e4 <_malloc_r+0x28>
 80190d8:	230c      	movs	r3, #12
 80190da:	603b      	str	r3, [r7, #0]
 80190dc:	2600      	movs	r6, #0
 80190de:	4630      	mov	r0, r6
 80190e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190e4:	4e2e      	ldr	r6, [pc, #184]	; (80191a0 <_malloc_r+0xe4>)
 80190e6:	f000 f8cd 	bl	8019284 <__malloc_lock>
 80190ea:	6833      	ldr	r3, [r6, #0]
 80190ec:	461c      	mov	r4, r3
 80190ee:	bb34      	cbnz	r4, 801913e <_malloc_r+0x82>
 80190f0:	4629      	mov	r1, r5
 80190f2:	4638      	mov	r0, r7
 80190f4:	f7ff ffc2 	bl	801907c <sbrk_aligned>
 80190f8:	1c43      	adds	r3, r0, #1
 80190fa:	4604      	mov	r4, r0
 80190fc:	d14d      	bne.n	801919a <_malloc_r+0xde>
 80190fe:	6834      	ldr	r4, [r6, #0]
 8019100:	4626      	mov	r6, r4
 8019102:	2e00      	cmp	r6, #0
 8019104:	d140      	bne.n	8019188 <_malloc_r+0xcc>
 8019106:	6823      	ldr	r3, [r4, #0]
 8019108:	4631      	mov	r1, r6
 801910a:	4638      	mov	r0, r7
 801910c:	eb04 0803 	add.w	r8, r4, r3
 8019110:	f000 f848 	bl	80191a4 <_sbrk_r>
 8019114:	4580      	cmp	r8, r0
 8019116:	d13a      	bne.n	801918e <_malloc_r+0xd2>
 8019118:	6821      	ldr	r1, [r4, #0]
 801911a:	3503      	adds	r5, #3
 801911c:	1a6d      	subs	r5, r5, r1
 801911e:	f025 0503 	bic.w	r5, r5, #3
 8019122:	3508      	adds	r5, #8
 8019124:	2d0c      	cmp	r5, #12
 8019126:	bf38      	it	cc
 8019128:	250c      	movcc	r5, #12
 801912a:	4629      	mov	r1, r5
 801912c:	4638      	mov	r0, r7
 801912e:	f7ff ffa5 	bl	801907c <sbrk_aligned>
 8019132:	3001      	adds	r0, #1
 8019134:	d02b      	beq.n	801918e <_malloc_r+0xd2>
 8019136:	6823      	ldr	r3, [r4, #0]
 8019138:	442b      	add	r3, r5
 801913a:	6023      	str	r3, [r4, #0]
 801913c:	e00e      	b.n	801915c <_malloc_r+0xa0>
 801913e:	6822      	ldr	r2, [r4, #0]
 8019140:	1b52      	subs	r2, r2, r5
 8019142:	d41e      	bmi.n	8019182 <_malloc_r+0xc6>
 8019144:	2a0b      	cmp	r2, #11
 8019146:	d916      	bls.n	8019176 <_malloc_r+0xba>
 8019148:	1961      	adds	r1, r4, r5
 801914a:	42a3      	cmp	r3, r4
 801914c:	6025      	str	r5, [r4, #0]
 801914e:	bf18      	it	ne
 8019150:	6059      	strne	r1, [r3, #4]
 8019152:	6863      	ldr	r3, [r4, #4]
 8019154:	bf08      	it	eq
 8019156:	6031      	streq	r1, [r6, #0]
 8019158:	5162      	str	r2, [r4, r5]
 801915a:	604b      	str	r3, [r1, #4]
 801915c:	4638      	mov	r0, r7
 801915e:	f104 060b 	add.w	r6, r4, #11
 8019162:	f000 f895 	bl	8019290 <__malloc_unlock>
 8019166:	f026 0607 	bic.w	r6, r6, #7
 801916a:	1d23      	adds	r3, r4, #4
 801916c:	1af2      	subs	r2, r6, r3
 801916e:	d0b6      	beq.n	80190de <_malloc_r+0x22>
 8019170:	1b9b      	subs	r3, r3, r6
 8019172:	50a3      	str	r3, [r4, r2]
 8019174:	e7b3      	b.n	80190de <_malloc_r+0x22>
 8019176:	6862      	ldr	r2, [r4, #4]
 8019178:	42a3      	cmp	r3, r4
 801917a:	bf0c      	ite	eq
 801917c:	6032      	streq	r2, [r6, #0]
 801917e:	605a      	strne	r2, [r3, #4]
 8019180:	e7ec      	b.n	801915c <_malloc_r+0xa0>
 8019182:	4623      	mov	r3, r4
 8019184:	6864      	ldr	r4, [r4, #4]
 8019186:	e7b2      	b.n	80190ee <_malloc_r+0x32>
 8019188:	4634      	mov	r4, r6
 801918a:	6876      	ldr	r6, [r6, #4]
 801918c:	e7b9      	b.n	8019102 <_malloc_r+0x46>
 801918e:	230c      	movs	r3, #12
 8019190:	603b      	str	r3, [r7, #0]
 8019192:	4638      	mov	r0, r7
 8019194:	f000 f87c 	bl	8019290 <__malloc_unlock>
 8019198:	e7a1      	b.n	80190de <_malloc_r+0x22>
 801919a:	6025      	str	r5, [r4, #0]
 801919c:	e7de      	b.n	801915c <_malloc_r+0xa0>
 801919e:	bf00      	nop
 80191a0:	20017cb8 	.word	0x20017cb8

080191a4 <_sbrk_r>:
 80191a4:	b538      	push	{r3, r4, r5, lr}
 80191a6:	4d06      	ldr	r5, [pc, #24]	; (80191c0 <_sbrk_r+0x1c>)
 80191a8:	2300      	movs	r3, #0
 80191aa:	4604      	mov	r4, r0
 80191ac:	4608      	mov	r0, r1
 80191ae:	602b      	str	r3, [r5, #0]
 80191b0:	f7fe fa70 	bl	8017694 <_sbrk>
 80191b4:	1c43      	adds	r3, r0, #1
 80191b6:	d102      	bne.n	80191be <_sbrk_r+0x1a>
 80191b8:	682b      	ldr	r3, [r5, #0]
 80191ba:	b103      	cbz	r3, 80191be <_sbrk_r+0x1a>
 80191bc:	6023      	str	r3, [r4, #0]
 80191be:	bd38      	pop	{r3, r4, r5, pc}
 80191c0:	20017cc0 	.word	0x20017cc0

080191c4 <siprintf>:
 80191c4:	b40e      	push	{r1, r2, r3}
 80191c6:	b500      	push	{lr}
 80191c8:	b09c      	sub	sp, #112	; 0x70
 80191ca:	ab1d      	add	r3, sp, #116	; 0x74
 80191cc:	9002      	str	r0, [sp, #8]
 80191ce:	9006      	str	r0, [sp, #24]
 80191d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80191d4:	4809      	ldr	r0, [pc, #36]	; (80191fc <siprintf+0x38>)
 80191d6:	9107      	str	r1, [sp, #28]
 80191d8:	9104      	str	r1, [sp, #16]
 80191da:	4909      	ldr	r1, [pc, #36]	; (8019200 <siprintf+0x3c>)
 80191dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80191e0:	9105      	str	r1, [sp, #20]
 80191e2:	6800      	ldr	r0, [r0, #0]
 80191e4:	9301      	str	r3, [sp, #4]
 80191e6:	a902      	add	r1, sp, #8
 80191e8:	f000 f8b4 	bl	8019354 <_svfiprintf_r>
 80191ec:	9b02      	ldr	r3, [sp, #8]
 80191ee:	2200      	movs	r2, #0
 80191f0:	701a      	strb	r2, [r3, #0]
 80191f2:	b01c      	add	sp, #112	; 0x70
 80191f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80191f8:	b003      	add	sp, #12
 80191fa:	4770      	bx	lr
 80191fc:	200000dc 	.word	0x200000dc
 8019200:	ffff0208 	.word	0xffff0208

08019204 <strcat>:
 8019204:	b510      	push	{r4, lr}
 8019206:	4602      	mov	r2, r0
 8019208:	7814      	ldrb	r4, [r2, #0]
 801920a:	4613      	mov	r3, r2
 801920c:	3201      	adds	r2, #1
 801920e:	2c00      	cmp	r4, #0
 8019210:	d1fa      	bne.n	8019208 <strcat+0x4>
 8019212:	3b01      	subs	r3, #1
 8019214:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019218:	f803 2f01 	strb.w	r2, [r3, #1]!
 801921c:	2a00      	cmp	r2, #0
 801921e:	d1f9      	bne.n	8019214 <strcat+0x10>
 8019220:	bd10      	pop	{r4, pc}

08019222 <strncmp>:
 8019222:	b510      	push	{r4, lr}
 8019224:	b17a      	cbz	r2, 8019246 <strncmp+0x24>
 8019226:	4603      	mov	r3, r0
 8019228:	3901      	subs	r1, #1
 801922a:	1884      	adds	r4, r0, r2
 801922c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019230:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019234:	4290      	cmp	r0, r2
 8019236:	d101      	bne.n	801923c <strncmp+0x1a>
 8019238:	42a3      	cmp	r3, r4
 801923a:	d101      	bne.n	8019240 <strncmp+0x1e>
 801923c:	1a80      	subs	r0, r0, r2
 801923e:	bd10      	pop	{r4, pc}
 8019240:	2800      	cmp	r0, #0
 8019242:	d1f3      	bne.n	801922c <strncmp+0xa>
 8019244:	e7fa      	b.n	801923c <strncmp+0x1a>
 8019246:	4610      	mov	r0, r2
 8019248:	e7f9      	b.n	801923e <strncmp+0x1c>

0801924a <wcscat>:
 801924a:	b510      	push	{r4, lr}
 801924c:	4602      	mov	r2, r0
 801924e:	4613      	mov	r3, r2
 8019250:	f852 4b04 	ldr.w	r4, [r2], #4
 8019254:	2c00      	cmp	r4, #0
 8019256:	d1fa      	bne.n	801924e <wcscat+0x4>
 8019258:	3904      	subs	r1, #4
 801925a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801925e:	b90a      	cbnz	r2, 8019264 <wcscat+0x1a>
 8019260:	601a      	str	r2, [r3, #0]
 8019262:	bd10      	pop	{r4, pc}
 8019264:	f843 2b04 	str.w	r2, [r3], #4
 8019268:	e7f7      	b.n	801925a <wcscat+0x10>

0801926a <wcscpy>:
 801926a:	2300      	movs	r3, #0
 801926c:	6003      	str	r3, [r0, #0]
 801926e:	3904      	subs	r1, #4
 8019270:	4603      	mov	r3, r0
 8019272:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019276:	b90a      	cbnz	r2, 801927c <wcscpy+0x12>
 8019278:	601a      	str	r2, [r3, #0]
 801927a:	4770      	bx	lr
 801927c:	f843 2b04 	str.w	r2, [r3], #4
 8019280:	e7f7      	b.n	8019272 <wcscpy+0x8>
	...

08019284 <__malloc_lock>:
 8019284:	4801      	ldr	r0, [pc, #4]	; (801928c <__malloc_lock+0x8>)
 8019286:	f000 baf9 	b.w	801987c <__retarget_lock_acquire_recursive>
 801928a:	bf00      	nop
 801928c:	20017cc4 	.word	0x20017cc4

08019290 <__malloc_unlock>:
 8019290:	4801      	ldr	r0, [pc, #4]	; (8019298 <__malloc_unlock+0x8>)
 8019292:	f000 baf4 	b.w	801987e <__retarget_lock_release_recursive>
 8019296:	bf00      	nop
 8019298:	20017cc4 	.word	0x20017cc4

0801929c <__ssputs_r>:
 801929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192a0:	688e      	ldr	r6, [r1, #8]
 80192a2:	429e      	cmp	r6, r3
 80192a4:	4682      	mov	sl, r0
 80192a6:	460c      	mov	r4, r1
 80192a8:	4690      	mov	r8, r2
 80192aa:	461f      	mov	r7, r3
 80192ac:	d838      	bhi.n	8019320 <__ssputs_r+0x84>
 80192ae:	898a      	ldrh	r2, [r1, #12]
 80192b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80192b4:	d032      	beq.n	801931c <__ssputs_r+0x80>
 80192b6:	6825      	ldr	r5, [r4, #0]
 80192b8:	6909      	ldr	r1, [r1, #16]
 80192ba:	eba5 0901 	sub.w	r9, r5, r1
 80192be:	6965      	ldr	r5, [r4, #20]
 80192c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80192c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80192c8:	3301      	adds	r3, #1
 80192ca:	444b      	add	r3, r9
 80192cc:	106d      	asrs	r5, r5, #1
 80192ce:	429d      	cmp	r5, r3
 80192d0:	bf38      	it	cc
 80192d2:	461d      	movcc	r5, r3
 80192d4:	0553      	lsls	r3, r2, #21
 80192d6:	d531      	bpl.n	801933c <__ssputs_r+0xa0>
 80192d8:	4629      	mov	r1, r5
 80192da:	f7ff feef 	bl	80190bc <_malloc_r>
 80192de:	4606      	mov	r6, r0
 80192e0:	b950      	cbnz	r0, 80192f8 <__ssputs_r+0x5c>
 80192e2:	230c      	movs	r3, #12
 80192e4:	f8ca 3000 	str.w	r3, [sl]
 80192e8:	89a3      	ldrh	r3, [r4, #12]
 80192ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192ee:	81a3      	strh	r3, [r4, #12]
 80192f0:	f04f 30ff 	mov.w	r0, #4294967295
 80192f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192f8:	6921      	ldr	r1, [r4, #16]
 80192fa:	464a      	mov	r2, r9
 80192fc:	f7ff fe42 	bl	8018f84 <memcpy>
 8019300:	89a3      	ldrh	r3, [r4, #12]
 8019302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801930a:	81a3      	strh	r3, [r4, #12]
 801930c:	6126      	str	r6, [r4, #16]
 801930e:	6165      	str	r5, [r4, #20]
 8019310:	444e      	add	r6, r9
 8019312:	eba5 0509 	sub.w	r5, r5, r9
 8019316:	6026      	str	r6, [r4, #0]
 8019318:	60a5      	str	r5, [r4, #8]
 801931a:	463e      	mov	r6, r7
 801931c:	42be      	cmp	r6, r7
 801931e:	d900      	bls.n	8019322 <__ssputs_r+0x86>
 8019320:	463e      	mov	r6, r7
 8019322:	6820      	ldr	r0, [r4, #0]
 8019324:	4632      	mov	r2, r6
 8019326:	4641      	mov	r1, r8
 8019328:	f7ff fe3a 	bl	8018fa0 <memmove>
 801932c:	68a3      	ldr	r3, [r4, #8]
 801932e:	1b9b      	subs	r3, r3, r6
 8019330:	60a3      	str	r3, [r4, #8]
 8019332:	6823      	ldr	r3, [r4, #0]
 8019334:	4433      	add	r3, r6
 8019336:	6023      	str	r3, [r4, #0]
 8019338:	2000      	movs	r0, #0
 801933a:	e7db      	b.n	80192f4 <__ssputs_r+0x58>
 801933c:	462a      	mov	r2, r5
 801933e:	f000 fa9f 	bl	8019880 <_realloc_r>
 8019342:	4606      	mov	r6, r0
 8019344:	2800      	cmp	r0, #0
 8019346:	d1e1      	bne.n	801930c <__ssputs_r+0x70>
 8019348:	6921      	ldr	r1, [r4, #16]
 801934a:	4650      	mov	r0, sl
 801934c:	f7ff fe4a 	bl	8018fe4 <_free_r>
 8019350:	e7c7      	b.n	80192e2 <__ssputs_r+0x46>
	...

08019354 <_svfiprintf_r>:
 8019354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019358:	4698      	mov	r8, r3
 801935a:	898b      	ldrh	r3, [r1, #12]
 801935c:	061b      	lsls	r3, r3, #24
 801935e:	b09d      	sub	sp, #116	; 0x74
 8019360:	4607      	mov	r7, r0
 8019362:	460d      	mov	r5, r1
 8019364:	4614      	mov	r4, r2
 8019366:	d50e      	bpl.n	8019386 <_svfiprintf_r+0x32>
 8019368:	690b      	ldr	r3, [r1, #16]
 801936a:	b963      	cbnz	r3, 8019386 <_svfiprintf_r+0x32>
 801936c:	2140      	movs	r1, #64	; 0x40
 801936e:	f7ff fea5 	bl	80190bc <_malloc_r>
 8019372:	6028      	str	r0, [r5, #0]
 8019374:	6128      	str	r0, [r5, #16]
 8019376:	b920      	cbnz	r0, 8019382 <_svfiprintf_r+0x2e>
 8019378:	230c      	movs	r3, #12
 801937a:	603b      	str	r3, [r7, #0]
 801937c:	f04f 30ff 	mov.w	r0, #4294967295
 8019380:	e0d1      	b.n	8019526 <_svfiprintf_r+0x1d2>
 8019382:	2340      	movs	r3, #64	; 0x40
 8019384:	616b      	str	r3, [r5, #20]
 8019386:	2300      	movs	r3, #0
 8019388:	9309      	str	r3, [sp, #36]	; 0x24
 801938a:	2320      	movs	r3, #32
 801938c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019390:	f8cd 800c 	str.w	r8, [sp, #12]
 8019394:	2330      	movs	r3, #48	; 0x30
 8019396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019540 <_svfiprintf_r+0x1ec>
 801939a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801939e:	f04f 0901 	mov.w	r9, #1
 80193a2:	4623      	mov	r3, r4
 80193a4:	469a      	mov	sl, r3
 80193a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193aa:	b10a      	cbz	r2, 80193b0 <_svfiprintf_r+0x5c>
 80193ac:	2a25      	cmp	r2, #37	; 0x25
 80193ae:	d1f9      	bne.n	80193a4 <_svfiprintf_r+0x50>
 80193b0:	ebba 0b04 	subs.w	fp, sl, r4
 80193b4:	d00b      	beq.n	80193ce <_svfiprintf_r+0x7a>
 80193b6:	465b      	mov	r3, fp
 80193b8:	4622      	mov	r2, r4
 80193ba:	4629      	mov	r1, r5
 80193bc:	4638      	mov	r0, r7
 80193be:	f7ff ff6d 	bl	801929c <__ssputs_r>
 80193c2:	3001      	adds	r0, #1
 80193c4:	f000 80aa 	beq.w	801951c <_svfiprintf_r+0x1c8>
 80193c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80193ca:	445a      	add	r2, fp
 80193cc:	9209      	str	r2, [sp, #36]	; 0x24
 80193ce:	f89a 3000 	ldrb.w	r3, [sl]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	f000 80a2 	beq.w	801951c <_svfiprintf_r+0x1c8>
 80193d8:	2300      	movs	r3, #0
 80193da:	f04f 32ff 	mov.w	r2, #4294967295
 80193de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80193e2:	f10a 0a01 	add.w	sl, sl, #1
 80193e6:	9304      	str	r3, [sp, #16]
 80193e8:	9307      	str	r3, [sp, #28]
 80193ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80193ee:	931a      	str	r3, [sp, #104]	; 0x68
 80193f0:	4654      	mov	r4, sl
 80193f2:	2205      	movs	r2, #5
 80193f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193f8:	4851      	ldr	r0, [pc, #324]	; (8019540 <_svfiprintf_r+0x1ec>)
 80193fa:	f7e6 ff19 	bl	8000230 <memchr>
 80193fe:	9a04      	ldr	r2, [sp, #16]
 8019400:	b9d8      	cbnz	r0, 801943a <_svfiprintf_r+0xe6>
 8019402:	06d0      	lsls	r0, r2, #27
 8019404:	bf44      	itt	mi
 8019406:	2320      	movmi	r3, #32
 8019408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801940c:	0711      	lsls	r1, r2, #28
 801940e:	bf44      	itt	mi
 8019410:	232b      	movmi	r3, #43	; 0x2b
 8019412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019416:	f89a 3000 	ldrb.w	r3, [sl]
 801941a:	2b2a      	cmp	r3, #42	; 0x2a
 801941c:	d015      	beq.n	801944a <_svfiprintf_r+0xf6>
 801941e:	9a07      	ldr	r2, [sp, #28]
 8019420:	4654      	mov	r4, sl
 8019422:	2000      	movs	r0, #0
 8019424:	f04f 0c0a 	mov.w	ip, #10
 8019428:	4621      	mov	r1, r4
 801942a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801942e:	3b30      	subs	r3, #48	; 0x30
 8019430:	2b09      	cmp	r3, #9
 8019432:	d94e      	bls.n	80194d2 <_svfiprintf_r+0x17e>
 8019434:	b1b0      	cbz	r0, 8019464 <_svfiprintf_r+0x110>
 8019436:	9207      	str	r2, [sp, #28]
 8019438:	e014      	b.n	8019464 <_svfiprintf_r+0x110>
 801943a:	eba0 0308 	sub.w	r3, r0, r8
 801943e:	fa09 f303 	lsl.w	r3, r9, r3
 8019442:	4313      	orrs	r3, r2
 8019444:	9304      	str	r3, [sp, #16]
 8019446:	46a2      	mov	sl, r4
 8019448:	e7d2      	b.n	80193f0 <_svfiprintf_r+0x9c>
 801944a:	9b03      	ldr	r3, [sp, #12]
 801944c:	1d19      	adds	r1, r3, #4
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	9103      	str	r1, [sp, #12]
 8019452:	2b00      	cmp	r3, #0
 8019454:	bfbb      	ittet	lt
 8019456:	425b      	neglt	r3, r3
 8019458:	f042 0202 	orrlt.w	r2, r2, #2
 801945c:	9307      	strge	r3, [sp, #28]
 801945e:	9307      	strlt	r3, [sp, #28]
 8019460:	bfb8      	it	lt
 8019462:	9204      	strlt	r2, [sp, #16]
 8019464:	7823      	ldrb	r3, [r4, #0]
 8019466:	2b2e      	cmp	r3, #46	; 0x2e
 8019468:	d10c      	bne.n	8019484 <_svfiprintf_r+0x130>
 801946a:	7863      	ldrb	r3, [r4, #1]
 801946c:	2b2a      	cmp	r3, #42	; 0x2a
 801946e:	d135      	bne.n	80194dc <_svfiprintf_r+0x188>
 8019470:	9b03      	ldr	r3, [sp, #12]
 8019472:	1d1a      	adds	r2, r3, #4
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	9203      	str	r2, [sp, #12]
 8019478:	2b00      	cmp	r3, #0
 801947a:	bfb8      	it	lt
 801947c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019480:	3402      	adds	r4, #2
 8019482:	9305      	str	r3, [sp, #20]
 8019484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019550 <_svfiprintf_r+0x1fc>
 8019488:	7821      	ldrb	r1, [r4, #0]
 801948a:	2203      	movs	r2, #3
 801948c:	4650      	mov	r0, sl
 801948e:	f7e6 fecf 	bl	8000230 <memchr>
 8019492:	b140      	cbz	r0, 80194a6 <_svfiprintf_r+0x152>
 8019494:	2340      	movs	r3, #64	; 0x40
 8019496:	eba0 000a 	sub.w	r0, r0, sl
 801949a:	fa03 f000 	lsl.w	r0, r3, r0
 801949e:	9b04      	ldr	r3, [sp, #16]
 80194a0:	4303      	orrs	r3, r0
 80194a2:	3401      	adds	r4, #1
 80194a4:	9304      	str	r3, [sp, #16]
 80194a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194aa:	4826      	ldr	r0, [pc, #152]	; (8019544 <_svfiprintf_r+0x1f0>)
 80194ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80194b0:	2206      	movs	r2, #6
 80194b2:	f7e6 febd 	bl	8000230 <memchr>
 80194b6:	2800      	cmp	r0, #0
 80194b8:	d038      	beq.n	801952c <_svfiprintf_r+0x1d8>
 80194ba:	4b23      	ldr	r3, [pc, #140]	; (8019548 <_svfiprintf_r+0x1f4>)
 80194bc:	bb1b      	cbnz	r3, 8019506 <_svfiprintf_r+0x1b2>
 80194be:	9b03      	ldr	r3, [sp, #12]
 80194c0:	3307      	adds	r3, #7
 80194c2:	f023 0307 	bic.w	r3, r3, #7
 80194c6:	3308      	adds	r3, #8
 80194c8:	9303      	str	r3, [sp, #12]
 80194ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194cc:	4433      	add	r3, r6
 80194ce:	9309      	str	r3, [sp, #36]	; 0x24
 80194d0:	e767      	b.n	80193a2 <_svfiprintf_r+0x4e>
 80194d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80194d6:	460c      	mov	r4, r1
 80194d8:	2001      	movs	r0, #1
 80194da:	e7a5      	b.n	8019428 <_svfiprintf_r+0xd4>
 80194dc:	2300      	movs	r3, #0
 80194de:	3401      	adds	r4, #1
 80194e0:	9305      	str	r3, [sp, #20]
 80194e2:	4619      	mov	r1, r3
 80194e4:	f04f 0c0a 	mov.w	ip, #10
 80194e8:	4620      	mov	r0, r4
 80194ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194ee:	3a30      	subs	r2, #48	; 0x30
 80194f0:	2a09      	cmp	r2, #9
 80194f2:	d903      	bls.n	80194fc <_svfiprintf_r+0x1a8>
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d0c5      	beq.n	8019484 <_svfiprintf_r+0x130>
 80194f8:	9105      	str	r1, [sp, #20]
 80194fa:	e7c3      	b.n	8019484 <_svfiprintf_r+0x130>
 80194fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8019500:	4604      	mov	r4, r0
 8019502:	2301      	movs	r3, #1
 8019504:	e7f0      	b.n	80194e8 <_svfiprintf_r+0x194>
 8019506:	ab03      	add	r3, sp, #12
 8019508:	9300      	str	r3, [sp, #0]
 801950a:	462a      	mov	r2, r5
 801950c:	4b0f      	ldr	r3, [pc, #60]	; (801954c <_svfiprintf_r+0x1f8>)
 801950e:	a904      	add	r1, sp, #16
 8019510:	4638      	mov	r0, r7
 8019512:	f3af 8000 	nop.w
 8019516:	1c42      	adds	r2, r0, #1
 8019518:	4606      	mov	r6, r0
 801951a:	d1d6      	bne.n	80194ca <_svfiprintf_r+0x176>
 801951c:	89ab      	ldrh	r3, [r5, #12]
 801951e:	065b      	lsls	r3, r3, #25
 8019520:	f53f af2c 	bmi.w	801937c <_svfiprintf_r+0x28>
 8019524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019526:	b01d      	add	sp, #116	; 0x74
 8019528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801952c:	ab03      	add	r3, sp, #12
 801952e:	9300      	str	r3, [sp, #0]
 8019530:	462a      	mov	r2, r5
 8019532:	4b06      	ldr	r3, [pc, #24]	; (801954c <_svfiprintf_r+0x1f8>)
 8019534:	a904      	add	r1, sp, #16
 8019536:	4638      	mov	r0, r7
 8019538:	f000 f87a 	bl	8019630 <_printf_i>
 801953c:	e7eb      	b.n	8019516 <_svfiprintf_r+0x1c2>
 801953e:	bf00      	nop
 8019540:	0801ea78 	.word	0x0801ea78
 8019544:	0801ea82 	.word	0x0801ea82
 8019548:	00000000 	.word	0x00000000
 801954c:	0801929d 	.word	0x0801929d
 8019550:	0801ea7e 	.word	0x0801ea7e

08019554 <_printf_common>:
 8019554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019558:	4616      	mov	r6, r2
 801955a:	4699      	mov	r9, r3
 801955c:	688a      	ldr	r2, [r1, #8]
 801955e:	690b      	ldr	r3, [r1, #16]
 8019560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019564:	4293      	cmp	r3, r2
 8019566:	bfb8      	it	lt
 8019568:	4613      	movlt	r3, r2
 801956a:	6033      	str	r3, [r6, #0]
 801956c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019570:	4607      	mov	r7, r0
 8019572:	460c      	mov	r4, r1
 8019574:	b10a      	cbz	r2, 801957a <_printf_common+0x26>
 8019576:	3301      	adds	r3, #1
 8019578:	6033      	str	r3, [r6, #0]
 801957a:	6823      	ldr	r3, [r4, #0]
 801957c:	0699      	lsls	r1, r3, #26
 801957e:	bf42      	ittt	mi
 8019580:	6833      	ldrmi	r3, [r6, #0]
 8019582:	3302      	addmi	r3, #2
 8019584:	6033      	strmi	r3, [r6, #0]
 8019586:	6825      	ldr	r5, [r4, #0]
 8019588:	f015 0506 	ands.w	r5, r5, #6
 801958c:	d106      	bne.n	801959c <_printf_common+0x48>
 801958e:	f104 0a19 	add.w	sl, r4, #25
 8019592:	68e3      	ldr	r3, [r4, #12]
 8019594:	6832      	ldr	r2, [r6, #0]
 8019596:	1a9b      	subs	r3, r3, r2
 8019598:	42ab      	cmp	r3, r5
 801959a:	dc26      	bgt.n	80195ea <_printf_common+0x96>
 801959c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80195a0:	1e13      	subs	r3, r2, #0
 80195a2:	6822      	ldr	r2, [r4, #0]
 80195a4:	bf18      	it	ne
 80195a6:	2301      	movne	r3, #1
 80195a8:	0692      	lsls	r2, r2, #26
 80195aa:	d42b      	bmi.n	8019604 <_printf_common+0xb0>
 80195ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80195b0:	4649      	mov	r1, r9
 80195b2:	4638      	mov	r0, r7
 80195b4:	47c0      	blx	r8
 80195b6:	3001      	adds	r0, #1
 80195b8:	d01e      	beq.n	80195f8 <_printf_common+0xa4>
 80195ba:	6823      	ldr	r3, [r4, #0]
 80195bc:	68e5      	ldr	r5, [r4, #12]
 80195be:	6832      	ldr	r2, [r6, #0]
 80195c0:	f003 0306 	and.w	r3, r3, #6
 80195c4:	2b04      	cmp	r3, #4
 80195c6:	bf08      	it	eq
 80195c8:	1aad      	subeq	r5, r5, r2
 80195ca:	68a3      	ldr	r3, [r4, #8]
 80195cc:	6922      	ldr	r2, [r4, #16]
 80195ce:	bf0c      	ite	eq
 80195d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80195d4:	2500      	movne	r5, #0
 80195d6:	4293      	cmp	r3, r2
 80195d8:	bfc4      	itt	gt
 80195da:	1a9b      	subgt	r3, r3, r2
 80195dc:	18ed      	addgt	r5, r5, r3
 80195de:	2600      	movs	r6, #0
 80195e0:	341a      	adds	r4, #26
 80195e2:	42b5      	cmp	r5, r6
 80195e4:	d11a      	bne.n	801961c <_printf_common+0xc8>
 80195e6:	2000      	movs	r0, #0
 80195e8:	e008      	b.n	80195fc <_printf_common+0xa8>
 80195ea:	2301      	movs	r3, #1
 80195ec:	4652      	mov	r2, sl
 80195ee:	4649      	mov	r1, r9
 80195f0:	4638      	mov	r0, r7
 80195f2:	47c0      	blx	r8
 80195f4:	3001      	adds	r0, #1
 80195f6:	d103      	bne.n	8019600 <_printf_common+0xac>
 80195f8:	f04f 30ff 	mov.w	r0, #4294967295
 80195fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019600:	3501      	adds	r5, #1
 8019602:	e7c6      	b.n	8019592 <_printf_common+0x3e>
 8019604:	18e1      	adds	r1, r4, r3
 8019606:	1c5a      	adds	r2, r3, #1
 8019608:	2030      	movs	r0, #48	; 0x30
 801960a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801960e:	4422      	add	r2, r4
 8019610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019618:	3302      	adds	r3, #2
 801961a:	e7c7      	b.n	80195ac <_printf_common+0x58>
 801961c:	2301      	movs	r3, #1
 801961e:	4622      	mov	r2, r4
 8019620:	4649      	mov	r1, r9
 8019622:	4638      	mov	r0, r7
 8019624:	47c0      	blx	r8
 8019626:	3001      	adds	r0, #1
 8019628:	d0e6      	beq.n	80195f8 <_printf_common+0xa4>
 801962a:	3601      	adds	r6, #1
 801962c:	e7d9      	b.n	80195e2 <_printf_common+0x8e>
	...

08019630 <_printf_i>:
 8019630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019634:	7e0f      	ldrb	r7, [r1, #24]
 8019636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019638:	2f78      	cmp	r7, #120	; 0x78
 801963a:	4691      	mov	r9, r2
 801963c:	4680      	mov	r8, r0
 801963e:	460c      	mov	r4, r1
 8019640:	469a      	mov	sl, r3
 8019642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019646:	d807      	bhi.n	8019658 <_printf_i+0x28>
 8019648:	2f62      	cmp	r7, #98	; 0x62
 801964a:	d80a      	bhi.n	8019662 <_printf_i+0x32>
 801964c:	2f00      	cmp	r7, #0
 801964e:	f000 80d8 	beq.w	8019802 <_printf_i+0x1d2>
 8019652:	2f58      	cmp	r7, #88	; 0x58
 8019654:	f000 80a3 	beq.w	801979e <_printf_i+0x16e>
 8019658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801965c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019660:	e03a      	b.n	80196d8 <_printf_i+0xa8>
 8019662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019666:	2b15      	cmp	r3, #21
 8019668:	d8f6      	bhi.n	8019658 <_printf_i+0x28>
 801966a:	a101      	add	r1, pc, #4	; (adr r1, 8019670 <_printf_i+0x40>)
 801966c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019670:	080196c9 	.word	0x080196c9
 8019674:	080196dd 	.word	0x080196dd
 8019678:	08019659 	.word	0x08019659
 801967c:	08019659 	.word	0x08019659
 8019680:	08019659 	.word	0x08019659
 8019684:	08019659 	.word	0x08019659
 8019688:	080196dd 	.word	0x080196dd
 801968c:	08019659 	.word	0x08019659
 8019690:	08019659 	.word	0x08019659
 8019694:	08019659 	.word	0x08019659
 8019698:	08019659 	.word	0x08019659
 801969c:	080197e9 	.word	0x080197e9
 80196a0:	0801970d 	.word	0x0801970d
 80196a4:	080197cb 	.word	0x080197cb
 80196a8:	08019659 	.word	0x08019659
 80196ac:	08019659 	.word	0x08019659
 80196b0:	0801980b 	.word	0x0801980b
 80196b4:	08019659 	.word	0x08019659
 80196b8:	0801970d 	.word	0x0801970d
 80196bc:	08019659 	.word	0x08019659
 80196c0:	08019659 	.word	0x08019659
 80196c4:	080197d3 	.word	0x080197d3
 80196c8:	682b      	ldr	r3, [r5, #0]
 80196ca:	1d1a      	adds	r2, r3, #4
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	602a      	str	r2, [r5, #0]
 80196d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80196d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80196d8:	2301      	movs	r3, #1
 80196da:	e0a3      	b.n	8019824 <_printf_i+0x1f4>
 80196dc:	6820      	ldr	r0, [r4, #0]
 80196de:	6829      	ldr	r1, [r5, #0]
 80196e0:	0606      	lsls	r6, r0, #24
 80196e2:	f101 0304 	add.w	r3, r1, #4
 80196e6:	d50a      	bpl.n	80196fe <_printf_i+0xce>
 80196e8:	680e      	ldr	r6, [r1, #0]
 80196ea:	602b      	str	r3, [r5, #0]
 80196ec:	2e00      	cmp	r6, #0
 80196ee:	da03      	bge.n	80196f8 <_printf_i+0xc8>
 80196f0:	232d      	movs	r3, #45	; 0x2d
 80196f2:	4276      	negs	r6, r6
 80196f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80196f8:	485e      	ldr	r0, [pc, #376]	; (8019874 <_printf_i+0x244>)
 80196fa:	230a      	movs	r3, #10
 80196fc:	e019      	b.n	8019732 <_printf_i+0x102>
 80196fe:	680e      	ldr	r6, [r1, #0]
 8019700:	602b      	str	r3, [r5, #0]
 8019702:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019706:	bf18      	it	ne
 8019708:	b236      	sxthne	r6, r6
 801970a:	e7ef      	b.n	80196ec <_printf_i+0xbc>
 801970c:	682b      	ldr	r3, [r5, #0]
 801970e:	6820      	ldr	r0, [r4, #0]
 8019710:	1d19      	adds	r1, r3, #4
 8019712:	6029      	str	r1, [r5, #0]
 8019714:	0601      	lsls	r1, r0, #24
 8019716:	d501      	bpl.n	801971c <_printf_i+0xec>
 8019718:	681e      	ldr	r6, [r3, #0]
 801971a:	e002      	b.n	8019722 <_printf_i+0xf2>
 801971c:	0646      	lsls	r6, r0, #25
 801971e:	d5fb      	bpl.n	8019718 <_printf_i+0xe8>
 8019720:	881e      	ldrh	r6, [r3, #0]
 8019722:	4854      	ldr	r0, [pc, #336]	; (8019874 <_printf_i+0x244>)
 8019724:	2f6f      	cmp	r7, #111	; 0x6f
 8019726:	bf0c      	ite	eq
 8019728:	2308      	moveq	r3, #8
 801972a:	230a      	movne	r3, #10
 801972c:	2100      	movs	r1, #0
 801972e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019732:	6865      	ldr	r5, [r4, #4]
 8019734:	60a5      	str	r5, [r4, #8]
 8019736:	2d00      	cmp	r5, #0
 8019738:	bfa2      	ittt	ge
 801973a:	6821      	ldrge	r1, [r4, #0]
 801973c:	f021 0104 	bicge.w	r1, r1, #4
 8019740:	6021      	strge	r1, [r4, #0]
 8019742:	b90e      	cbnz	r6, 8019748 <_printf_i+0x118>
 8019744:	2d00      	cmp	r5, #0
 8019746:	d04d      	beq.n	80197e4 <_printf_i+0x1b4>
 8019748:	4615      	mov	r5, r2
 801974a:	fbb6 f1f3 	udiv	r1, r6, r3
 801974e:	fb03 6711 	mls	r7, r3, r1, r6
 8019752:	5dc7      	ldrb	r7, [r0, r7]
 8019754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019758:	4637      	mov	r7, r6
 801975a:	42bb      	cmp	r3, r7
 801975c:	460e      	mov	r6, r1
 801975e:	d9f4      	bls.n	801974a <_printf_i+0x11a>
 8019760:	2b08      	cmp	r3, #8
 8019762:	d10b      	bne.n	801977c <_printf_i+0x14c>
 8019764:	6823      	ldr	r3, [r4, #0]
 8019766:	07de      	lsls	r6, r3, #31
 8019768:	d508      	bpl.n	801977c <_printf_i+0x14c>
 801976a:	6923      	ldr	r3, [r4, #16]
 801976c:	6861      	ldr	r1, [r4, #4]
 801976e:	4299      	cmp	r1, r3
 8019770:	bfde      	ittt	le
 8019772:	2330      	movle	r3, #48	; 0x30
 8019774:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019778:	f105 35ff 	addle.w	r5, r5, #4294967295
 801977c:	1b52      	subs	r2, r2, r5
 801977e:	6122      	str	r2, [r4, #16]
 8019780:	f8cd a000 	str.w	sl, [sp]
 8019784:	464b      	mov	r3, r9
 8019786:	aa03      	add	r2, sp, #12
 8019788:	4621      	mov	r1, r4
 801978a:	4640      	mov	r0, r8
 801978c:	f7ff fee2 	bl	8019554 <_printf_common>
 8019790:	3001      	adds	r0, #1
 8019792:	d14c      	bne.n	801982e <_printf_i+0x1fe>
 8019794:	f04f 30ff 	mov.w	r0, #4294967295
 8019798:	b004      	add	sp, #16
 801979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801979e:	4835      	ldr	r0, [pc, #212]	; (8019874 <_printf_i+0x244>)
 80197a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80197a4:	6829      	ldr	r1, [r5, #0]
 80197a6:	6823      	ldr	r3, [r4, #0]
 80197a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80197ac:	6029      	str	r1, [r5, #0]
 80197ae:	061d      	lsls	r5, r3, #24
 80197b0:	d514      	bpl.n	80197dc <_printf_i+0x1ac>
 80197b2:	07df      	lsls	r7, r3, #31
 80197b4:	bf44      	itt	mi
 80197b6:	f043 0320 	orrmi.w	r3, r3, #32
 80197ba:	6023      	strmi	r3, [r4, #0]
 80197bc:	b91e      	cbnz	r6, 80197c6 <_printf_i+0x196>
 80197be:	6823      	ldr	r3, [r4, #0]
 80197c0:	f023 0320 	bic.w	r3, r3, #32
 80197c4:	6023      	str	r3, [r4, #0]
 80197c6:	2310      	movs	r3, #16
 80197c8:	e7b0      	b.n	801972c <_printf_i+0xfc>
 80197ca:	6823      	ldr	r3, [r4, #0]
 80197cc:	f043 0320 	orr.w	r3, r3, #32
 80197d0:	6023      	str	r3, [r4, #0]
 80197d2:	2378      	movs	r3, #120	; 0x78
 80197d4:	4828      	ldr	r0, [pc, #160]	; (8019878 <_printf_i+0x248>)
 80197d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80197da:	e7e3      	b.n	80197a4 <_printf_i+0x174>
 80197dc:	0659      	lsls	r1, r3, #25
 80197de:	bf48      	it	mi
 80197e0:	b2b6      	uxthmi	r6, r6
 80197e2:	e7e6      	b.n	80197b2 <_printf_i+0x182>
 80197e4:	4615      	mov	r5, r2
 80197e6:	e7bb      	b.n	8019760 <_printf_i+0x130>
 80197e8:	682b      	ldr	r3, [r5, #0]
 80197ea:	6826      	ldr	r6, [r4, #0]
 80197ec:	6961      	ldr	r1, [r4, #20]
 80197ee:	1d18      	adds	r0, r3, #4
 80197f0:	6028      	str	r0, [r5, #0]
 80197f2:	0635      	lsls	r5, r6, #24
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	d501      	bpl.n	80197fc <_printf_i+0x1cc>
 80197f8:	6019      	str	r1, [r3, #0]
 80197fa:	e002      	b.n	8019802 <_printf_i+0x1d2>
 80197fc:	0670      	lsls	r0, r6, #25
 80197fe:	d5fb      	bpl.n	80197f8 <_printf_i+0x1c8>
 8019800:	8019      	strh	r1, [r3, #0]
 8019802:	2300      	movs	r3, #0
 8019804:	6123      	str	r3, [r4, #16]
 8019806:	4615      	mov	r5, r2
 8019808:	e7ba      	b.n	8019780 <_printf_i+0x150>
 801980a:	682b      	ldr	r3, [r5, #0]
 801980c:	1d1a      	adds	r2, r3, #4
 801980e:	602a      	str	r2, [r5, #0]
 8019810:	681d      	ldr	r5, [r3, #0]
 8019812:	6862      	ldr	r2, [r4, #4]
 8019814:	2100      	movs	r1, #0
 8019816:	4628      	mov	r0, r5
 8019818:	f7e6 fd0a 	bl	8000230 <memchr>
 801981c:	b108      	cbz	r0, 8019822 <_printf_i+0x1f2>
 801981e:	1b40      	subs	r0, r0, r5
 8019820:	6060      	str	r0, [r4, #4]
 8019822:	6863      	ldr	r3, [r4, #4]
 8019824:	6123      	str	r3, [r4, #16]
 8019826:	2300      	movs	r3, #0
 8019828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801982c:	e7a8      	b.n	8019780 <_printf_i+0x150>
 801982e:	6923      	ldr	r3, [r4, #16]
 8019830:	462a      	mov	r2, r5
 8019832:	4649      	mov	r1, r9
 8019834:	4640      	mov	r0, r8
 8019836:	47d0      	blx	sl
 8019838:	3001      	adds	r0, #1
 801983a:	d0ab      	beq.n	8019794 <_printf_i+0x164>
 801983c:	6823      	ldr	r3, [r4, #0]
 801983e:	079b      	lsls	r3, r3, #30
 8019840:	d413      	bmi.n	801986a <_printf_i+0x23a>
 8019842:	68e0      	ldr	r0, [r4, #12]
 8019844:	9b03      	ldr	r3, [sp, #12]
 8019846:	4298      	cmp	r0, r3
 8019848:	bfb8      	it	lt
 801984a:	4618      	movlt	r0, r3
 801984c:	e7a4      	b.n	8019798 <_printf_i+0x168>
 801984e:	2301      	movs	r3, #1
 8019850:	4632      	mov	r2, r6
 8019852:	4649      	mov	r1, r9
 8019854:	4640      	mov	r0, r8
 8019856:	47d0      	blx	sl
 8019858:	3001      	adds	r0, #1
 801985a:	d09b      	beq.n	8019794 <_printf_i+0x164>
 801985c:	3501      	adds	r5, #1
 801985e:	68e3      	ldr	r3, [r4, #12]
 8019860:	9903      	ldr	r1, [sp, #12]
 8019862:	1a5b      	subs	r3, r3, r1
 8019864:	42ab      	cmp	r3, r5
 8019866:	dcf2      	bgt.n	801984e <_printf_i+0x21e>
 8019868:	e7eb      	b.n	8019842 <_printf_i+0x212>
 801986a:	2500      	movs	r5, #0
 801986c:	f104 0619 	add.w	r6, r4, #25
 8019870:	e7f5      	b.n	801985e <_printf_i+0x22e>
 8019872:	bf00      	nop
 8019874:	0801ea89 	.word	0x0801ea89
 8019878:	0801ea9a 	.word	0x0801ea9a

0801987c <__retarget_lock_acquire_recursive>:
 801987c:	4770      	bx	lr

0801987e <__retarget_lock_release_recursive>:
 801987e:	4770      	bx	lr

08019880 <_realloc_r>:
 8019880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019884:	4680      	mov	r8, r0
 8019886:	4614      	mov	r4, r2
 8019888:	460e      	mov	r6, r1
 801988a:	b921      	cbnz	r1, 8019896 <_realloc_r+0x16>
 801988c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019890:	4611      	mov	r1, r2
 8019892:	f7ff bc13 	b.w	80190bc <_malloc_r>
 8019896:	b92a      	cbnz	r2, 80198a4 <_realloc_r+0x24>
 8019898:	f7ff fba4 	bl	8018fe4 <_free_r>
 801989c:	4625      	mov	r5, r4
 801989e:	4628      	mov	r0, r5
 80198a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198a4:	f000 f81b 	bl	80198de <_malloc_usable_size_r>
 80198a8:	4284      	cmp	r4, r0
 80198aa:	4607      	mov	r7, r0
 80198ac:	d802      	bhi.n	80198b4 <_realloc_r+0x34>
 80198ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80198b2:	d812      	bhi.n	80198da <_realloc_r+0x5a>
 80198b4:	4621      	mov	r1, r4
 80198b6:	4640      	mov	r0, r8
 80198b8:	f7ff fc00 	bl	80190bc <_malloc_r>
 80198bc:	4605      	mov	r5, r0
 80198be:	2800      	cmp	r0, #0
 80198c0:	d0ed      	beq.n	801989e <_realloc_r+0x1e>
 80198c2:	42bc      	cmp	r4, r7
 80198c4:	4622      	mov	r2, r4
 80198c6:	4631      	mov	r1, r6
 80198c8:	bf28      	it	cs
 80198ca:	463a      	movcs	r2, r7
 80198cc:	f7ff fb5a 	bl	8018f84 <memcpy>
 80198d0:	4631      	mov	r1, r6
 80198d2:	4640      	mov	r0, r8
 80198d4:	f7ff fb86 	bl	8018fe4 <_free_r>
 80198d8:	e7e1      	b.n	801989e <_realloc_r+0x1e>
 80198da:	4635      	mov	r5, r6
 80198dc:	e7df      	b.n	801989e <_realloc_r+0x1e>

080198de <_malloc_usable_size_r>:
 80198de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198e2:	1f18      	subs	r0, r3, #4
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	bfbc      	itt	lt
 80198e8:	580b      	ldrlt	r3, [r1, r0]
 80198ea:	18c0      	addlt	r0, r0, r3
 80198ec:	4770      	bx	lr
	...

080198f0 <_init>:
 80198f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198f2:	bf00      	nop
 80198f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198f6:	bc08      	pop	{r3}
 80198f8:	469e      	mov	lr, r3
 80198fa:	4770      	bx	lr

080198fc <_fini>:
 80198fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198fe:	bf00      	nop
 8019900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019902:	bc08      	pop	{r3}
 8019904:	469e      	mov	lr, r3
 8019906:	4770      	bx	lr
